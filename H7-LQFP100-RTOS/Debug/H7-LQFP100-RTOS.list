
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174d0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08017770  08017770  00027770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017c3c  08017c3c  00027c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017c44  08017c44  00027c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017c48  08017c48  00027c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08017c4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054f0  24000100  08017d4c  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240055f0  08017d4c  000355f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003afed  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000070dd  00000000  00000000  0006b11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028d8  00000000  00000000  000721f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000025f0  00000000  00000000  00074ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044aa9  00000000  00000000  000770c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ca8a  00000000  00000000  000bbb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194dcd  00000000  00000000  000f85f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028d3c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b240  00000000  00000000  0028d410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017758 	.word	0x08017758

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08017758 	.word	0x08017758

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f004 f915 	bl	8004898 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fe20 	bl	80022b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 fa30 	bl	8005ae8 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fe13 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 fb73 	bl	8004da0 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fdfa 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 fb65 	bl	8004da0 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fdec 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 fb57 	bl	8004da0 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fdde 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 fb49 	bl	8004da0 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fdd0 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 fb3a 	bl	8004da0 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fdc1 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 fb2b 	bl	8004da0 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fdb2 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 fb1c 	bl	8004da0 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fda3 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 fb0d 	bl	8004da0 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fd94 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 fafe 	bl	8004da0 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fd85 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 faef 	bl	8004da0 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fd76 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 fae0 	bl	8004da0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fd67 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 fffd 	bl	8004898 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fd08 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 fa68 	bl	8004da0 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fcef 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 fa5a 	bl	8004da0 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fce1 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 fa4c 	bl	8004da0 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fcd3 	bl	80022b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 fa3e 	bl	8004da0 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fcc5 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 fc80 	bl	8009300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 fc74 	bl	8009300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 fc68 	bl	8009300 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fdfb 	bl	8006670 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fc1a 	bl	80022b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fcb6 	bl	8004450 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fcb0 	bl	8004450 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fd9b 	bl	8006670 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fbba 	bl	80022b8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f016 f8dd 	bl	8016d4c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f005 f963 	bl	8005e64 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fb88 	bl	80022b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 fb7e 	bl	80062c4 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 fb73 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 fb53 	bl	8009300 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fce6 	bl	8006670 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fb05 	bl	80022b8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f005 f8a8 	bl	8005e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f005 f8bf 	bl	8005e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f005 f87f 	bl	8005e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f005 f896 	bl	8005e48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f005 f877 	bl	8005e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f005 f88e 	bl	8005e48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f005 f86f 	bl	8005e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f005 f886 	bl	8005e48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f005 f867 	bl	8005e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f005 f87e 	bl	8005e48 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24000818 	.word	0x24000818

08000d74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_FREERTOS_Init+0xa8>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_FREERTOS_Init+0xac>)
 8000d7e:	f012 fbc7 	bl	8013510 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <MX_FREERTOS_Init+0xb0>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <MX_FREERTOS_Init+0xb4>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4827      	ldr	r0, [pc, #156]	; (8000e2c <MX_FREERTOS_Init+0xb8>)
 8000d8e:	f012 fbbf 	bl	8013510 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <MX_FREERTOS_Init+0xbc>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <MX_FREERTOS_Init+0xc0>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_FREERTOS_Init+0xc4>)
 8000d9e:	f012 fbb7 	bl	8013510 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <MX_FREERTOS_Init+0xc8>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <MX_FREERTOS_Init+0xcc>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <MX_FREERTOS_Init+0xd0>)
 8000dae:	f012 fbaf 	bl	8013510 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <MX_FREERTOS_Init+0xd4>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <MX_FREERTOS_Init+0xd8>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <MX_FREERTOS_Init+0xdc>)
 8000dbe:	f012 fba7 	bl	8013510 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_FREERTOS_Init+0xe0>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dc8:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_FREERTOS_Init+0xe4>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_FREERTOS_Init+0xe8>)
 8000dce:	f012 fb9f 	bl	8013510 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <MX_FREERTOS_Init+0xec>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_FREERTOS_Init+0xf0>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <MX_FREERTOS_Init+0xf4>)
 8000dde:	f012 fb97 	bl	8013510 <osThreadNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_FREERTOS_Init+0xf8>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_FREERTOS_Init+0xfc>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <MX_FREERTOS_Init+0x100>)
 8000dee:	f012 fb8f 	bl	8013510 <osThreadNew>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <MX_FREERTOS_Init+0x104>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_FREERTOS_Init+0x108>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4820      	ldr	r0, [pc, #128]	; (8000e80 <MX_FREERTOS_Init+0x10c>)
 8000dfe:	f012 fb87 	bl	8013510 <osThreadNew>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <MX_FREERTOS_Init+0x110>)
 8000e06:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <MX_FREERTOS_Init+0x114>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	481f      	ldr	r0, [pc, #124]	; (8000e8c <MX_FREERTOS_Init+0x118>)
 8000e0e:	f012 fb7f 	bl	8013510 <osThreadNew>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <MX_FREERTOS_Init+0x11c>)
 8000e16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	080179e8 	.word	0x080179e8
 8000e20:	08000e95 	.word	0x08000e95
 8000e24:	24000360 	.word	0x24000360
 8000e28:	08017a0c 	.word	0x08017a0c
 8000e2c:	08000ebd 	.word	0x08000ebd
 8000e30:	24000364 	.word	0x24000364
 8000e34:	08017a30 	.word	0x08017a30
 8000e38:	08000ee5 	.word	0x08000ee5
 8000e3c:	24000368 	.word	0x24000368
 8000e40:	08017a54 	.word	0x08017a54
 8000e44:	08000f0d 	.word	0x08000f0d
 8000e48:	2400036c 	.word	0x2400036c
 8000e4c:	08017a78 	.word	0x08017a78
 8000e50:	08000f85 	.word	0x08000f85
 8000e54:	24000370 	.word	0x24000370
 8000e58:	08017a9c 	.word	0x08017a9c
 8000e5c:	08000ffd 	.word	0x08000ffd
 8000e60:	24000374 	.word	0x24000374
 8000e64:	08017ac0 	.word	0x08017ac0
 8000e68:	080010b5 	.word	0x080010b5
 8000e6c:	24000378 	.word	0x24000378
 8000e70:	08017ae4 	.word	0x08017ae4
 8000e74:	08001161 	.word	0x08001161
 8000e78:	2400037c 	.word	0x2400037c
 8000e7c:	08017b08 	.word	0x08017b08
 8000e80:	08001191 	.word	0x08001191
 8000e84:	24000380 	.word	0x24000380
 8000e88:	08017b2c 	.word	0x08017b2c
 8000e8c:	08001271 	.word	0x08001271
 8000e90:	24000384 	.word	0x24000384

08000e94 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <PMT_init+0x24>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f012 fcb4 	bl	8013814 <osEventFlagsWait>

		create_pmt_packet();
 8000eac:	f001 fa2a 	bl	8002304 <create_pmt_packet>

		osThreadYield();
 8000eb0:	f012 fbc0 	bl	8013634 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb4:	e7f2      	b.n	8000e9c <PMT_init+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	240007c4 	.word	0x240007c4

08000ebc <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <ERPA_init+0x24>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2102      	movs	r1, #2
 8000ed0:	f012 fca0 	bl	8013814 <osEventFlagsWait>

		create_erpa_packet();
 8000ed4:	f001 fa90 	bl	80023f8 <create_erpa_packet>

		osThreadYield();
 8000ed8:	f012 fbac 	bl	8013634 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000edc:	e7f2      	b.n	8000ec4 <ERPA_init+0x8>
 8000ede:	bf00      	nop
 8000ee0:	240007c4 	.word	0x240007c4

08000ee4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HK_init+0x24>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	f012 fc8c 	bl	8013814 <osEventFlagsWait>

		create_hk_packet();
 8000efc:	f001 fb1e 	bl	800253c <create_hk_packet>

		osThreadYield();
 8000f00:	f012 fb98 	bl	8013634 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f04:	e7f2      	b.n	8000eec <HK_init+0x8>
 8000f06:	bf00      	nop
 8000f08:	240007c4 	.word	0x240007c4

08000f0c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <AUTOINIT_init+0x70>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	f012 fc78 	bl	8013814 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e012      	b.n	8000f50 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <AUTOINIT_init+0x74>)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <AUTOINIT_init+0x74>)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f008 fba6 	bl	8009690 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f012 fb95 	bl	8013674 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	dde9      	ble.n	8000f2a <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f56:	2308      	movs	r3, #8
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	e008      	b.n	8000f6e <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 f912 	bl	800418c <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b0d      	cmp	r3, #13
 8000f72:	ddf3      	ble.n	8000f5c <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f74:	f012 fb5e 	bl	8013634 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f78:	e7cc      	b.n	8000f14 <AUTOINIT_init+0x8>
 8000f7a:	bf00      	nop
 8000f7c:	240007c8 	.word	0x240007c8
 8000f80:	08017b50 	.word	0x08017b50

08000f84 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <AUTODEINIT_init+0x70>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	2200      	movs	r2, #0
 8000f96:	2108      	movs	r1, #8
 8000f98:	f012 fc3c 	bl	8013814 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f9c:	230d      	movs	r3, #13
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e008      	b.n	8000fb4 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 f8ef 	bl	800418c <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	dcf3      	bgt.n	8000fa2 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fba:	2306      	movs	r3, #6
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	e012      	b.n	8000fe6 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <AUTODEINIT_init+0x74>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <AUTODEINIT_init+0x74>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f008 fb5b 	bl	8009690 <HAL_GPIO_WritePin>
			osDelay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f012 fb4a 	bl	8013674 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	dae9      	bge.n	8000fc0 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fec:	f012 fb22 	bl	8013634 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000ff0:	e7cc      	b.n	8000f8c <AUTODEINIT_init+0x8>
 8000ff2:	bf00      	nop
 8000ff4:	240007c8 	.word	0x240007c8
 8000ff8:	08017b50 	.word	0x08017b50

08000ffc <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
	osStatus_t status;
	packet_t msg;

	while (1) {
		total_size = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <UART_TX_init+0xa8>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	f107 0108 	add.w	r1, r7, #8
 8001014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001018:	2200      	movs	r2, #0
 800101a:	f012 fd35 	bl	8013a88 <osMessageQueueGet>
 800101e:	6138      	str	r0, [r7, #16]
			if (status == osOK) {
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d11c      	bne.n	8001060 <UART_TX_init+0x64>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	461a      	mov	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	4413      	add	r3, r2
 800102e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001032:	d215      	bcs.n	8001060 <UART_TX_init+0x64>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <UART_TX_init+0xac>)
 8001038:	4413      	add	r3, r2
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	89ba      	ldrh	r2, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f015 fe76 	bl	8016d30 <memcpy>
					free(msg.array);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4618      	mov	r0, r3
 8001048:	f015 fe6a 	bl	8016d20 <free>
					total_size += msg.size;
 800104c:	89bb      	ldrh	r3, [r7, #12]
 800104e:	461a      	mov	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	4413      	add	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f240 32b1 	movw	r2, #945	; 0x3b1
 800105c:	4293      	cmp	r3, r2
 800105e:	d808      	bhi.n	8001072 <UART_TX_init+0x76>
						break;
					}
				}
			}
		} while (osMessageQueueGetCount(mid_MsgQueue));
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <UART_TX_init+0xa8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f012 fd6d 	bl	8013b44 <osMessageQueueGetCount>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1cd      	bne.n	800100c <UART_TX_init+0x10>
 8001070:	e000      	b.n	8001074 <UART_TX_init+0x78>
						break;
 8001072:	bf00      	nop

		if (total_size > 0) {
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d011      	beq.n	800109e <UART_TX_init+0xa2>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	4909      	ldr	r1, [pc, #36]	; (80010a8 <UART_TX_init+0xac>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <UART_TX_init+0xb0>)
 8001084:	f00f fc34 	bl	80108f0 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8001088:	e001      	b.n	800108e <UART_TX_init+0x92>
				osThreadYield();
 800108a:	f012 fad3 	bl	8013634 <osThreadYield>
			while (tx_flag == 0) {
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <UART_TX_init+0xb4>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f8      	beq.n	800108a <UART_TX_init+0x8e>
			}

			// Reset the flag
			tx_flag = 0;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <UART_TX_init+0xb4>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 800109e:	f012 fac9 	bl	8013634 <osThreadYield>
		total_size = 0;
 80010a2:	e7b1      	b.n	8001008 <UART_TX_init+0xc>
 80010a4:	240007d0 	.word	0x240007d0
 80010a8:	24000388 	.word	0x24000388
 80010ac:	24000acc 	.word	0x24000acc
 80010b0:	24000084 	.word	0x24000084

080010b4 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <Voltage_Monitor_init+0xa8>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	f012 fba4 	bl	8013814 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 80010cc:	f003 f888 	bl	80041e0 <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 80010d0:	f003 f87c 	bl	80041cc <get_rail_monitor>
 80010d4:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e03b      	b.n	8001154 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	461a      	mov	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d02d      	beq.n	800114e <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	461a      	mov	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	8898      	ldrh	r0, [r3, #4]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	891b      	ldrh	r3, [r3, #8]
 8001116:	4619      	mov	r1, r3
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	461a      	mov	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4413      	add	r3, r2
 8001128:	88db      	ldrh	r3, [r3, #6]
 800112a:	461a      	mov	r2, r3
 800112c:	f003 f8e6 	bl	80042fc <in_range>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10b      	bne.n	800114e <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4413      	add	r3, r2
 8001146:	785a      	ldrb	r2, [r3, #1]
 8001148:	3201      	adds	r2, #1
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3301      	adds	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b11      	cmp	r3, #17
 8001158:	ddc0      	ble.n	80010dc <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800115a:	e7af      	b.n	80010bc <Voltage_Monitor_init+0x8>
 800115c:	240007c8 	.word	0x240007c8

08001160 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <STOP_init+0x2c>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001170:	2200      	movs	r2, #0
 8001172:	2102      	movs	r1, #2
 8001174:	f012 fb4e 	bl	8013814 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <STOP_init+0x2c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2102      	movs	r1, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f012 fb16 	bl	80137b0 <osEventFlagsClear>

	  enter_stop();
 8001184:	f001 f87a 	bl	800227c <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8001188:	e7ee      	b.n	8001168 <STOP_init+0x8>
 800118a:	bf00      	nop
 800118c:	240007c8 	.word	0x240007c8

08001190 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <Science_init+0xc0>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a0:	2200      	movs	r2, #0
 80011a2:	2101      	movs	r1, #1
 80011a4:	f012 fb36 	bl	8013814 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e012      	b.n	80011d4 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80011ae:	4a29      	ldr	r2, [pc, #164]	; (8001254 <Science_init+0xc4>)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80011b6:	4a27      	ldr	r2, [pc, #156]	; (8001254 <Science_init+0xc4>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	4619      	mov	r1, r3
 80011c4:	f008 fa64 	bl	8009690 <HAL_GPIO_WritePin>
			osDelay(200);
 80011c8:	20c8      	movs	r0, #200	; 0xc8
 80011ca:	f012 fa53 	bl	8013674 <osDelay>
		for (int i = 0; i < 9; i++) {
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3301      	adds	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	dde9      	ble.n	80011ae <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80011da:	2308      	movs	r3, #8
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	e008      	b.n	80011f2 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 ffd0 	bl	800418c <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	3301      	adds	r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	2b10      	cmp	r3, #16
 80011f6:	ddf3      	ble.n	80011e0 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80011fc:	2300      	movs	r3, #0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2320      	movs	r3, #32
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <Science_init+0xc8>)
 8001204:	2100      	movs	r1, #0
 8001206:	4815      	ldr	r0, [pc, #84]	; (800125c <Science_init+0xcc>)
 8001208:	f004 fea6 	bl	8005f58 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <Science_init+0xd0>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 8001212:	210c      	movs	r1, #12
 8001214:	4813      	ldr	r0, [pc, #76]	; (8001264 <Science_init+0xd4>)
 8001216:	f00d fe3f 	bl	800ee98 <HAL_TIM_OC_Start_IT>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 800121a:	2100      	movs	r1, #0
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <Science_init+0xd8>)
 800121e:	f00d fe3b 	bl	800ee98 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <Science_init+0xdc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2104      	movs	r1, #4
 8001228:	4618      	mov	r0, r3
 800122a:	f012 fa7d 	bl	8013728 <osEventFlagsSet>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <Science_init+0xdc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2102      	movs	r1, #2
 8001234:	4618      	mov	r0, r3
 8001236:	f012 fa77 	bl	8013728 <osEventFlagsSet>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <Science_init+0xdc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2101      	movs	r1, #1
 8001240:	4618      	mov	r0, r3
 8001242:	f012 fa71 	bl	8013728 <osEventFlagsSet>
  __ASM volatile ("cpsie i" : : : "memory");
 8001246:	b662      	cpsie	i
}
 8001248:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 800124a:	f012 f9f3 	bl	8013634 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800124e:	e7a3      	b.n	8001198 <Science_init+0x8>
 8001250:	240007cc 	.word	0x240007cc
 8001254:	08017b50 	.word	0x08017b50
 8001258:	24000000 	.word	0x24000000
 800125c:	240002d4 	.word	0x240002d4
 8001260:	24000814 	.word	0x24000814
 8001264:	24000a34 	.word	0x24000a34
 8001268:	240009e8 	.word	0x240009e8
 800126c:	240007c4 	.word	0x240007c4

08001270 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <Idle_init+0x8c>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001280:	2200      	movs	r2, #0
 8001282:	2102      	movs	r1, #2
 8001284:	f012 fac6 	bl	8013814 <osEventFlagsWait>


		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet off
 8001288:	210c      	movs	r1, #12
 800128a:	481d      	ldr	r0, [pc, #116]	; (8001300 <Idle_init+0x90>)
 800128c:	f00d ff5e 	bl	800f14c <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 8001290:	2100      	movs	r1, #0
 8001292:	481c      	ldr	r0, [pc, #112]	; (8001304 <Idle_init+0x94>)
 8001294:	f00d ff5a 	bl	800f14c <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <Idle_init+0x98>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 800129e:	2100      	movs	r1, #0
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <Idle_init+0x9c>)
 80012a2:	f004 ff19 	bl	80060d8 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80012a6:	2310      	movs	r3, #16
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	e008      	b.n	80012be <Idle_init+0x4e>
			set_rail_monitor_enable(i, 0);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 ff6a 	bl	800418c <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	dcf3      	bgt.n	80012ac <Idle_init+0x3c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80012c4:	2308      	movs	r3, #8
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	e012      	b.n	80012f0 <Idle_init+0x80>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <Idle_init+0xa0>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <Idle_init+0xa0>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	f008 f9d6 	bl	8009690 <HAL_GPIO_WritePin>
			osDelay(200);
 80012e4:	20c8      	movs	r0, #200	; 0xc8
 80012e6:	f012 f9c5 	bl	8013674 <osDelay>
		for (int i = 8; i >= 0; i--) {
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dae9      	bge.n	80012ca <Idle_init+0x5a>
		}

		// Yield thread control
		osThreadYield();
 80012f6:	f012 f99d 	bl	8013634 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80012fa:	e7bd      	b.n	8001278 <Idle_init+0x8>
 80012fc:	240007cc 	.word	0x240007cc
 8001300:	24000a34 	.word	0x24000a34
 8001304:	240009e8 	.word	0x240009e8
 8001308:	24000814 	.word	0x24000814
 800130c:	240002d4 	.word	0x240002d4
 8001310:	08017b50 	.word	0x08017b50

08001314 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <MX_GPIO_Init+0xe8>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	4a32      	ldr	r2, [pc, #200]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <MX_GPIO_Init+0xe8>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001348:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <MX_GPIO_Init+0xe8>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <MX_GPIO_Init+0xe8>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	4a23      	ldr	r2, [pc, #140]	; (80013fc <MX_GPIO_Init+0xe8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <MX_GPIO_Init+0xe8>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_GPIO_Init+0xec>)
 80013aa:	f008 f971 	bl	8009690 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2164      	movs	r1, #100	; 0x64
 80013b2:	4814      	ldr	r0, [pc, #80]	; (8001404 <MX_GPIO_Init+0xf0>)
 80013b4:	f008 f96c 	bl	8009690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80013b8:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80013bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <MX_GPIO_Init+0xec>)
 80013d2:	f007 ff95 	bl	8009300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013de:	2302      	movs	r3, #2
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_GPIO_Init+0xf0>)
 80013ee:	f007 ff87 	bl	8009300 <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020800 	.word	0x58020800
 8001404:	58020400 	.word	0x58020400

08001408 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_I2C1_Init+0x78>)
 800140e:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <MX_I2C1_Init+0x7c>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_I2C1_Init+0x78>)
 8001414:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <MX_I2C1_Init+0x80>)
 8001416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_I2C1_Init+0x78>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_I2C1_Init+0x78>)
 8001420:	2201      	movs	r2, #1
 8001422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_I2C1_Init+0x78>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_I2C1_Init+0x78>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_I2C1_Init+0x78>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_I2C1_Init+0x78>)
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_I2C1_Init+0x78>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001442:	480f      	ldr	r0, [pc, #60]	; (8001480 <MX_I2C1_Init+0x78>)
 8001444:	f008 f93e 	bl	80096c4 <HAL_I2C_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800144e:	f000 ff33 	bl	80022b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001452:	2100      	movs	r1, #0
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <MX_I2C1_Init+0x78>)
 8001456:	f008 fe85 	bl	800a164 <HAL_I2CEx_ConfigAnalogFilter>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001460:	f000 ff2a 	bl	80022b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001464:	2100      	movs	r1, #0
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_I2C1_Init+0x78>)
 8001468:	f008 fec7 	bl	800a1fa <HAL_I2CEx_ConfigDigitalFilter>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001472:	f000 ff21 	bl	80022b8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001476:	2001      	movs	r0, #1
 8001478:	f008 ff0c 	bl	800a294 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	24000770 	.word	0x24000770
 8001484:	40005400 	.word	0x40005400
 8001488:	0020081f 	.word	0x0020081f

0800148c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0ba      	sub	sp, #232	; 0xe8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	22c0      	movs	r2, #192	; 0xc0
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f015 fc4d 	bl	8016d4c <memset>
  if(i2cHandle->Instance==I2C1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a27      	ldr	r2, [pc, #156]	; (8001554 <HAL_I2C_MspInit+0xc8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d146      	bne.n	800154a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014bc:	f04f 0208 	mov.w	r2, #8
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	4618      	mov	r0, r3
 80014d4:	f009 ffa0 	bl	800b418 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014de:	f000 feeb 	bl	80022b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001500:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001508:	2312      	movs	r3, #18
 800150a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800151a:	2304      	movs	r3, #4
 800151c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <HAL_I2C_MspInit+0xd0>)
 8001528:	f007 feea 	bl	8009300 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 800152e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 8001534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001538:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 800153e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800154a:	bf00      	nop
 800154c:	37e8      	adds	r7, #232	; 0xe8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005400 	.word	0x40005400
 8001558:	58024400 	.word	0x58024400
 800155c:	58020400 	.word	0x58020400

08001560 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001564:	f3bf 8f4f 	dsb	sy
}
 8001568:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <__NVIC_SystemReset+0x24>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001572:	4904      	ldr	r1, [pc, #16]	; (8001584 <__NVIC_SystemReset+0x24>)
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_SystemReset+0x28>)
 8001576:	4313      	orrs	r3, r2
 8001578:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800157a:	f3bf 8f4f 	dsb	sy
}
 800157e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <__NVIC_SystemReset+0x20>
 8001584:	e000ed00 	.word	0xe000ed00
 8001588:	05fa0004 	.word	0x05fa0004

0800158c <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d106      	bne.n	80015aa <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	4618      	mov	r0, r3
 80015a4:	f012 f8c0 	bl	8013728 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80015a8:	e023      	b.n	80015f2 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	else if (htim == &htim2) {
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a15      	ldr	r2, [pc, #84]	; (8001604 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d106      	bne.n	80015c0 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2102      	movs	r1, #2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f012 f8b5 	bl	8013728 <osEventFlagsSet>
}
 80015be:	e018      	b.n	80015f2 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d111      	bne.n	80015ec <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2101      	movs	r1, #1
 80015ce:	4618      	mov	r0, r3
 80015d0:	f012 f8aa 	bl	8013728 <osEventFlagsSet>
		if (HK_ENABLED){
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2104      	movs	r1, #4
 80015e4:	4618      	mov	r0, r3
 80015e6:	f012 f89f 	bl	8013728 <osEventFlagsSet>
}
 80015ea:	e002      	b.n	80015f2 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80015ee:	f015 fd03 	bl	8016ff8 <puts>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	240009e8 	.word	0x240009e8
 8001600:	240007c4 	.word	0x240007c4
 8001604:	24000a34 	.word	0x24000a34
 8001608:	24000a80 	.word	0x24000a80
 800160c:	240007c8 	.word	0x240007c8
 8001610:	24000814 	.word	0x24000814
 8001614:	080177f8 	.word	0x080177f8

08001618 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af02      	add	r7, sp, #8
 800161e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001620:	2201      	movs	r2, #1
 8001622:	49f2      	ldr	r1, [pc, #968]	; (80019ec <HAL_UART_RxCpltCallback+0x3d4>)
 8001624:	48f2      	ldr	r0, [pc, #968]	; (80019f0 <HAL_UART_RxCpltCallback+0x3d8>)
 8001626:	f00f f917 	bl	8010858 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800162a:	4bf0      	ldr	r3, [pc, #960]	; (80019ec <HAL_UART_RxCpltCallback+0x3d4>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2be0      	cmp	r3, #224	; 0xe0
 8001634:	f200 8419 	bhi.w	8001e6a <HAL_UART_RxCpltCallback+0x852>
 8001638:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <HAL_UART_RxCpltCallback+0x28>)
 800163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163e:	bf00      	nop
 8001640:	080019d9 	.word	0x080019d9
 8001644:	08001a1d 	.word	0x08001a1d
 8001648:	08001a8d 	.word	0x08001a8d
 800164c:	08001ac7 	.word	0x08001ac7
 8001650:	08001aff 	.word	0x08001aff
 8001654:	08001b39 	.word	0x08001b39
 8001658:	08001b75 	.word	0x08001b75
 800165c:	08001bb1 	.word	0x08001bb1
 8001660:	08001beb 	.word	0x08001beb
 8001664:	08001c1f 	.word	0x08001c1f
 8001668:	08001c4b 	.word	0x08001c4b
 800166c:	08001c77 	.word	0x08001c77
 8001670:	08001ca1 	.word	0x08001ca1
 8001674:	08001d7d 	.word	0x08001d7d
 8001678:	08001de5 	.word	0x08001de5
 800167c:	08001e0d 	.word	0x08001e0d
 8001680:	080019c5 	.word	0x080019c5
 8001684:	08001a01 	.word	0x08001a01
 8001688:	08001a6f 	.word	0x08001a6f
 800168c:	08001aab 	.word	0x08001aab
 8001690:	08001ae3 	.word	0x08001ae3
 8001694:	08001b1b 	.word	0x08001b1b
 8001698:	08001b57 	.word	0x08001b57
 800169c:	08001b93 	.word	0x08001b93
 80016a0:	08001bcf 	.word	0x08001bcf
 80016a4:	08001c07 	.word	0x08001c07
 80016a8:	08001c2f 	.word	0x08001c2f
 80016ac:	08001c5b 	.word	0x08001c5b
 80016b0:	08001c87 	.word	0x08001c87
 80016b4:	08001caf 	.word	0x08001caf
 80016b8:	08001dbd 	.word	0x08001dbd
 80016bc:	08001e6b 	.word	0x08001e6b
 80016c0:	08001e6b 	.word	0x08001e6b
 80016c4:	08001e6b 	.word	0x08001e6b
 80016c8:	08001e6b 	.word	0x08001e6b
 80016cc:	08001e6b 	.word	0x08001e6b
 80016d0:	08001e6b 	.word	0x08001e6b
 80016d4:	08001e6b 	.word	0x08001e6b
 80016d8:	08001e6b 	.word	0x08001e6b
 80016dc:	08001e6b 	.word	0x08001e6b
 80016e0:	08001e6b 	.word	0x08001e6b
 80016e4:	08001e6b 	.word	0x08001e6b
 80016e8:	08001e6b 	.word	0x08001e6b
 80016ec:	08001e6b 	.word	0x08001e6b
 80016f0:	08001e6b 	.word	0x08001e6b
 80016f4:	08001e6b 	.word	0x08001e6b
 80016f8:	08001e6b 	.word	0x08001e6b
 80016fc:	08001e6b 	.word	0x08001e6b
 8001700:	08001e6b 	.word	0x08001e6b
 8001704:	08001e6b 	.word	0x08001e6b
 8001708:	08001e6b 	.word	0x08001e6b
 800170c:	08001e6b 	.word	0x08001e6b
 8001710:	08001e6b 	.word	0x08001e6b
 8001714:	08001e6b 	.word	0x08001e6b
 8001718:	08001e6b 	.word	0x08001e6b
 800171c:	08001e6b 	.word	0x08001e6b
 8001720:	08001e6b 	.word	0x08001e6b
 8001724:	08001e6b 	.word	0x08001e6b
 8001728:	08001e6b 	.word	0x08001e6b
 800172c:	08001e6b 	.word	0x08001e6b
 8001730:	08001e6b 	.word	0x08001e6b
 8001734:	08001e6b 	.word	0x08001e6b
 8001738:	08001e6b 	.word	0x08001e6b
 800173c:	08001e6b 	.word	0x08001e6b
 8001740:	08001e6b 	.word	0x08001e6b
 8001744:	08001e6b 	.word	0x08001e6b
 8001748:	08001e6b 	.word	0x08001e6b
 800174c:	08001e6b 	.word	0x08001e6b
 8001750:	08001e6b 	.word	0x08001e6b
 8001754:	08001e6b 	.word	0x08001e6b
 8001758:	08001e6b 	.word	0x08001e6b
 800175c:	08001e6b 	.word	0x08001e6b
 8001760:	08001e6b 	.word	0x08001e6b
 8001764:	08001e6b 	.word	0x08001e6b
 8001768:	08001e6b 	.word	0x08001e6b
 800176c:	08001e6b 	.word	0x08001e6b
 8001770:	08001e6b 	.word	0x08001e6b
 8001774:	08001e6b 	.word	0x08001e6b
 8001778:	08001e6b 	.word	0x08001e6b
 800177c:	08001e6b 	.word	0x08001e6b
 8001780:	08001e6b 	.word	0x08001e6b
 8001784:	08001e6b 	.word	0x08001e6b
 8001788:	08001e6b 	.word	0x08001e6b
 800178c:	08001e6b 	.word	0x08001e6b
 8001790:	08001e6b 	.word	0x08001e6b
 8001794:	08001e6b 	.word	0x08001e6b
 8001798:	08001e6b 	.word	0x08001e6b
 800179c:	08001e6b 	.word	0x08001e6b
 80017a0:	08001e6b 	.word	0x08001e6b
 80017a4:	08001e6b 	.word	0x08001e6b
 80017a8:	08001e6b 	.word	0x08001e6b
 80017ac:	08001e6b 	.word	0x08001e6b
 80017b0:	08001e6b 	.word	0x08001e6b
 80017b4:	08001e6b 	.word	0x08001e6b
 80017b8:	08001e6b 	.word	0x08001e6b
 80017bc:	08001e6b 	.word	0x08001e6b
 80017c0:	08001e6b 	.word	0x08001e6b
 80017c4:	08001e6b 	.word	0x08001e6b
 80017c8:	08001e6b 	.word	0x08001e6b
 80017cc:	08001e6b 	.word	0x08001e6b
 80017d0:	08001e6b 	.word	0x08001e6b
 80017d4:	08001e6b 	.word	0x08001e6b
 80017d8:	08001e6b 	.word	0x08001e6b
 80017dc:	08001e6b 	.word	0x08001e6b
 80017e0:	08001e6b 	.word	0x08001e6b
 80017e4:	08001e6b 	.word	0x08001e6b
 80017e8:	08001e6b 	.word	0x08001e6b
 80017ec:	08001e6b 	.word	0x08001e6b
 80017f0:	08001e6b 	.word	0x08001e6b
 80017f4:	08001e6b 	.word	0x08001e6b
 80017f8:	08001e6b 	.word	0x08001e6b
 80017fc:	08001e6b 	.word	0x08001e6b
 8001800:	08001e6b 	.word	0x08001e6b
 8001804:	08001e6b 	.word	0x08001e6b
 8001808:	08001e6b 	.word	0x08001e6b
 800180c:	08001e6b 	.word	0x08001e6b
 8001810:	08001e6b 	.word	0x08001e6b
 8001814:	08001e6b 	.word	0x08001e6b
 8001818:	08001e6b 	.word	0x08001e6b
 800181c:	08001e6b 	.word	0x08001e6b
 8001820:	08001e6b 	.word	0x08001e6b
 8001824:	08001e6b 	.word	0x08001e6b
 8001828:	08001e6b 	.word	0x08001e6b
 800182c:	08001e6b 	.word	0x08001e6b
 8001830:	08001e6b 	.word	0x08001e6b
 8001834:	08001e6b 	.word	0x08001e6b
 8001838:	08001e6b 	.word	0x08001e6b
 800183c:	08001e6b 	.word	0x08001e6b
 8001840:	08001e6b 	.word	0x08001e6b
 8001844:	08001e6b 	.word	0x08001e6b
 8001848:	08001e6b 	.word	0x08001e6b
 800184c:	08001e6b 	.word	0x08001e6b
 8001850:	08001e6b 	.word	0x08001e6b
 8001854:	08001e6b 	.word	0x08001e6b
 8001858:	08001e6b 	.word	0x08001e6b
 800185c:	08001e6b 	.word	0x08001e6b
 8001860:	08001e6b 	.word	0x08001e6b
 8001864:	08001e6b 	.word	0x08001e6b
 8001868:	08001e6b 	.word	0x08001e6b
 800186c:	08001e6b 	.word	0x08001e6b
 8001870:	08001e6b 	.word	0x08001e6b
 8001874:	08001e6b 	.word	0x08001e6b
 8001878:	08001e6b 	.word	0x08001e6b
 800187c:	08001e6b 	.word	0x08001e6b
 8001880:	08001e6b 	.word	0x08001e6b
 8001884:	08001e6b 	.word	0x08001e6b
 8001888:	08001e6b 	.word	0x08001e6b
 800188c:	08001e6b 	.word	0x08001e6b
 8001890:	08001e6b 	.word	0x08001e6b
 8001894:	08001e6b 	.word	0x08001e6b
 8001898:	08001e6b 	.word	0x08001e6b
 800189c:	08001e6b 	.word	0x08001e6b
 80018a0:	08001e6b 	.word	0x08001e6b
 80018a4:	08001e6b 	.word	0x08001e6b
 80018a8:	08001e6b 	.word	0x08001e6b
 80018ac:	08001e6b 	.word	0x08001e6b
 80018b0:	08001e6b 	.word	0x08001e6b
 80018b4:	08001e6b 	.word	0x08001e6b
 80018b8:	08001e6b 	.word	0x08001e6b
 80018bc:	08001e6b 	.word	0x08001e6b
 80018c0:	08001e6b 	.word	0x08001e6b
 80018c4:	08001e6b 	.word	0x08001e6b
 80018c8:	08001e6b 	.word	0x08001e6b
 80018cc:	08001e6b 	.word	0x08001e6b
 80018d0:	08001e6b 	.word	0x08001e6b
 80018d4:	08001e6b 	.word	0x08001e6b
 80018d8:	08001e6b 	.word	0x08001e6b
 80018dc:	08001e6b 	.word	0x08001e6b
 80018e0:	08001e6b 	.word	0x08001e6b
 80018e4:	08001e6b 	.word	0x08001e6b
 80018e8:	08001e6b 	.word	0x08001e6b
 80018ec:	08001e6b 	.word	0x08001e6b
 80018f0:	08001e6b 	.word	0x08001e6b
 80018f4:	08001e6b 	.word	0x08001e6b
 80018f8:	08001e6b 	.word	0x08001e6b
 80018fc:	08001e49 	.word	0x08001e49
 8001900:	08001e6b 	.word	0x08001e6b
 8001904:	08001e6b 	.word	0x08001e6b
 8001908:	08001e6b 	.word	0x08001e6b
 800190c:	08001e6b 	.word	0x08001e6b
 8001910:	08001e6b 	.word	0x08001e6b
 8001914:	08001e6b 	.word	0x08001e6b
 8001918:	08001e6b 	.word	0x08001e6b
 800191c:	08001e6b 	.word	0x08001e6b
 8001920:	08001e6b 	.word	0x08001e6b
 8001924:	08001e6b 	.word	0x08001e6b
 8001928:	08001e6b 	.word	0x08001e6b
 800192c:	08001e6b 	.word	0x08001e6b
 8001930:	08001e6b 	.word	0x08001e6b
 8001934:	08001e6b 	.word	0x08001e6b
 8001938:	08001e6b 	.word	0x08001e6b
 800193c:	08001e4f 	.word	0x08001e4f
 8001940:	08001e6b 	.word	0x08001e6b
 8001944:	08001e6b 	.word	0x08001e6b
 8001948:	08001e6b 	.word	0x08001e6b
 800194c:	08001e6b 	.word	0x08001e6b
 8001950:	08001e6b 	.word	0x08001e6b
 8001954:	08001e6b 	.word	0x08001e6b
 8001958:	08001e6b 	.word	0x08001e6b
 800195c:	08001e6b 	.word	0x08001e6b
 8001960:	08001e6b 	.word	0x08001e6b
 8001964:	08001e6b 	.word	0x08001e6b
 8001968:	08001e6b 	.word	0x08001e6b
 800196c:	08001e6b 	.word	0x08001e6b
 8001970:	08001e6b 	.word	0x08001e6b
 8001974:	08001e6b 	.word	0x08001e6b
 8001978:	08001e6b 	.word	0x08001e6b
 800197c:	08001e5d 	.word	0x08001e5d
 8001980:	08001e35 	.word	0x08001e35
 8001984:	08001e6b 	.word	0x08001e6b
 8001988:	08001e6b 	.word	0x08001e6b
 800198c:	08001e6b 	.word	0x08001e6b
 8001990:	08001e6b 	.word	0x08001e6b
 8001994:	08001e6b 	.word	0x08001e6b
 8001998:	08001e6b 	.word	0x08001e6b
 800199c:	08001e6b 	.word	0x08001e6b
 80019a0:	08001e6b 	.word	0x08001e6b
 80019a4:	08001e6b 	.word	0x08001e6b
 80019a8:	08001e6b 	.word	0x08001e6b
 80019ac:	08001e6b 	.word	0x08001e6b
 80019b0:	08001e6b 	.word	0x08001e6b
 80019b4:	08001e6b 	.word	0x08001e6b
 80019b8:	08001e6b 	.word	0x08001e6b
 80019bc:	08001e6b 	.word	0x08001e6b
 80019c0:	08001e21 	.word	0x08001e21
	case 0x10: {
		printf("SDN1 ON\n");
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <HAL_UART_RxCpltCallback+0x3dc>)
 80019c6:	f015 fb17 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_UART_RxCpltCallback+0x3e0>)
 80019cc:	2104      	movs	r1, #4
 80019ce:	2201      	movs	r2, #1
 80019d0:	4618      	mov	r0, r3
 80019d2:	f007 fe5d 	bl	8009690 <HAL_GPIO_WritePin>
		break;
 80019d6:	e253      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 80019d8:	4808      	ldr	r0, [pc, #32]	; (80019fc <HAL_UART_RxCpltCallback+0x3e4>)
 80019da:	f015 fb0d 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_UART_RxCpltCallback+0x3e0>)
 80019e0:	2104      	movs	r1, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f007 fe53 	bl	8009690 <HAL_GPIO_WritePin>
		break;
 80019ea:	e249      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
 80019ec:	240007d4 	.word	0x240007d4
 80019f0:	24000acc 	.word	0x24000acc
 80019f4:	08017810 	.word	0x08017810
 80019f8:	58020400 	.word	0x58020400
 80019fc:	08017818 	.word	0x08017818
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001a00:	48bb      	ldr	r0, [pc, #748]	; (8001cf0 <HAL_UART_RxCpltCallback+0x6d8>)
 8001a02:	f015 faf9 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001a06:	4bbb      	ldr	r3, [pc, #748]	; (8001cf4 <HAL_UART_RxCpltCallback+0x6dc>)
 8001a08:	2120      	movs	r1, #32
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f007 fe3f 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8001a12:	2101      	movs	r1, #1
 8001a14:	2008      	movs	r0, #8
 8001a16:	f002 fbb9 	bl	800418c <set_rail_monitor_enable>
		break;
 8001a1a:	e231      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001a1c:	48b6      	ldr	r0, [pc, #728]	; (8001cf8 <HAL_UART_RxCpltCallback+0x6e0>)
 8001a1e:	f015 faeb 	bl	8016ff8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8001a22:	2308      	movs	r3, #8
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e00f      	b.n	8001a48 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001a28:	4ab4      	ldr	r2, [pc, #720]	; (8001cfc <HAL_UART_RxCpltCallback+0x6e4>)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a30:	4ab2      	ldr	r2, [pc, #712]	; (8001cfc <HAL_UART_RxCpltCallback+0x6e4>)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	889b      	ldrh	r3, [r3, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f007 fe27 	bl	8009690 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	dcec      	bgt.n	8001a28 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001a4e:	2310      	movs	r3, #16
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	e008      	b.n	8001a66 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fb96 	bl	800418c <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b07      	cmp	r3, #7
 8001a6a:	dcf3      	bgt.n	8001a54 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8001a6c:	e208      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8001a6e:	48a4      	ldr	r0, [pc, #656]	; (8001d00 <HAL_UART_RxCpltCallback+0x6e8>)
 8001a70:	f015 fac2 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8001a74:	4ba3      	ldr	r3, [pc, #652]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f007 fe07 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8001a82:	2101      	movs	r1, #1
 8001a84:	2009      	movs	r0, #9
 8001a86:	f002 fb81 	bl	800418c <set_rail_monitor_enable>

		break;
 8001a8a:	e1f9      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8001a8c:	489e      	ldr	r0, [pc, #632]	; (8001d08 <HAL_UART_RxCpltCallback+0x6f0>)
 8001a8e:	f015 fab3 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8001a92:	4b9c      	ldr	r3, [pc, #624]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f007 fdf8 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2009      	movs	r0, #9
 8001aa4:	f002 fb72 	bl	800418c <set_rail_monitor_enable>
		break;
 8001aa8:	e1ea      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8001aaa:	4898      	ldr	r0, [pc, #608]	; (8001d0c <HAL_UART_RxCpltCallback+0x6f4>)
 8001aac:	f015 faa4 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8001ab0:	4b94      	ldr	r3, [pc, #592]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f007 fdea 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001abc:	2101      	movs	r1, #1
 8001abe:	200a      	movs	r0, #10
 8001ac0:	f002 fb64 	bl	800418c <set_rail_monitor_enable>

		break;
 8001ac4:	e1dc      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001ac6:	4892      	ldr	r0, [pc, #584]	; (8001d10 <HAL_UART_RxCpltCallback+0x6f8>)
 8001ac8:	f015 fa96 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001acc:	4b8d      	ldr	r3, [pc, #564]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f007 fddc 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	200a      	movs	r0, #10
 8001adc:	f002 fb56 	bl	800418c <set_rail_monitor_enable>
		break;
 8001ae0:	e1ce      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001ae2:	488c      	ldr	r0, [pc, #560]	; (8001d14 <HAL_UART_RxCpltCallback+0x6fc>)
 8001ae4:	f015 fa88 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001ae8:	4b86      	ldr	r3, [pc, #536]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001aea:	2140      	movs	r1, #64	; 0x40
 8001aec:	2201      	movs	r2, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f007 fdce 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001af4:	2101      	movs	r1, #1
 8001af6:	200b      	movs	r0, #11
 8001af8:	f002 fb48 	bl	800418c <set_rail_monitor_enable>

		break;
 8001afc:	e1c0      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001afe:	4886      	ldr	r0, [pc, #536]	; (8001d18 <HAL_UART_RxCpltCallback+0x700>)
 8001b00:	f015 fa7a 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001b04:	4b7f      	ldr	r3, [pc, #508]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b06:	2140      	movs	r1, #64	; 0x40
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f007 fdc0 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001b10:	2100      	movs	r1, #0
 8001b12:	200b      	movs	r0, #11
 8001b14:	f002 fb3a 	bl	800418c <set_rail_monitor_enable>
		break;
 8001b18:	e1b2      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001b1a:	4880      	ldr	r0, [pc, #512]	; (8001d1c <HAL_UART_RxCpltCallback+0x704>)
 8001b1c:	f015 fa6c 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001b20:	4b78      	ldr	r3, [pc, #480]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b26:	2201      	movs	r2, #1
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f007 fdb1 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001b2e:	2101      	movs	r1, #1
 8001b30:	200c      	movs	r0, #12
 8001b32:	f002 fb2b 	bl	800418c <set_rail_monitor_enable>

		break;
 8001b36:	e1a3      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001b38:	4879      	ldr	r0, [pc, #484]	; (8001d20 <HAL_UART_RxCpltCallback+0x708>)
 8001b3a:	f015 fa5d 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001b3e:	4b71      	ldr	r3, [pc, #452]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b44:	2200      	movs	r2, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f007 fda2 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	200c      	movs	r0, #12
 8001b50:	f002 fb1c 	bl	800418c <set_rail_monitor_enable>
		break;
 8001b54:	e194      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001b56:	4873      	ldr	r0, [pc, #460]	; (8001d24 <HAL_UART_RxCpltCallback+0x70c>)
 8001b58:	f015 fa4e 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001b5c:	4b69      	ldr	r3, [pc, #420]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b62:	2201      	movs	r2, #1
 8001b64:	4618      	mov	r0, r3
 8001b66:	f007 fd93 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	200d      	movs	r0, #13
 8001b6e:	f002 fb0d 	bl	800418c <set_rail_monitor_enable>

		break;
 8001b72:	e185      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001b74:	486c      	ldr	r0, [pc, #432]	; (8001d28 <HAL_UART_RxCpltCallback+0x710>)
 8001b76:	f015 fa3f 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001b7a:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b80:	2200      	movs	r2, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f007 fd84 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	200d      	movs	r0, #13
 8001b8c:	f002 fafe 	bl	800418c <set_rail_monitor_enable>
		break;
 8001b90:	e176      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001b92:	4866      	ldr	r0, [pc, #408]	; (8001d2c <HAL_UART_RxCpltCallback+0x714>)
 8001b94:	f015 fa30 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001b98:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f007 fd75 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	200f      	movs	r0, #15
 8001baa:	f002 faef 	bl	800418c <set_rail_monitor_enable>

		break;
 8001bae:	e167      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001bb0:	485f      	ldr	r0, [pc, #380]	; (8001d30 <HAL_UART_RxCpltCallback+0x718>)
 8001bb2:	f015 fa21 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_UART_RxCpltCallback+0x6ec>)
 8001bb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f007 fd66 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f002 fae0 	bl	800418c <set_rail_monitor_enable>
		break;
 8001bcc:	e158      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001bce:	4859      	ldr	r0, [pc, #356]	; (8001d34 <HAL_UART_RxCpltCallback+0x71c>)
 8001bd0:	f015 fa12 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001bd4:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_UART_RxCpltCallback+0x6dc>)
 8001bd6:	2140      	movs	r1, #64	; 0x40
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f007 fd58 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001be0:	2101      	movs	r1, #1
 8001be2:	2010      	movs	r0, #16
 8001be4:	f002 fad2 	bl	800418c <set_rail_monitor_enable>

		break;
 8001be8:	e14a      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001bea:	4853      	ldr	r0, [pc, #332]	; (8001d38 <HAL_UART_RxCpltCallback+0x720>)
 8001bec:	f015 fa04 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001bf0:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <HAL_UART_RxCpltCallback+0x6dc>)
 8001bf2:	2140      	movs	r1, #64	; 0x40
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f007 fd4a 	bl	8009690 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2010      	movs	r0, #16
 8001c00:	f002 fac4 	bl	800418c <set_rail_monitor_enable>
		break;
 8001c04:	e13c      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001c06:	484d      	ldr	r0, [pc, #308]	; (8001d3c <HAL_UART_RxCpltCallback+0x724>)
 8001c08:	f015 f9f6 	bl	8016ff8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2320      	movs	r3, #32
 8001c12:	4a4b      	ldr	r2, [pc, #300]	; (8001d40 <HAL_UART_RxCpltCallback+0x728>)
 8001c14:	2100      	movs	r1, #0
 8001c16:	484b      	ldr	r0, [pc, #300]	; (8001d44 <HAL_UART_RxCpltCallback+0x72c>)
 8001c18:	f004 f99e 	bl	8005f58 <HAL_DAC_Start_DMA>
		break;
 8001c1c:	e130      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001c1e:	484a      	ldr	r0, [pc, #296]	; (8001d48 <HAL_UART_RxCpltCallback+0x730>)
 8001c20:	f015 f9ea 	bl	8016ff8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001c24:	2100      	movs	r1, #0
 8001c26:	4847      	ldr	r0, [pc, #284]	; (8001d44 <HAL_UART_RxCpltCallback+0x72c>)
 8001c28:	f004 fa56 	bl	80060d8 <HAL_DAC_Stop_DMA>
		break;
 8001c2c:	e128      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001c2e:	4847      	ldr	r0, [pc, #284]	; (8001d4c <HAL_UART_RxCpltCallback+0x734>)
 8001c30:	f015 f9e2 	bl	8016ff8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001c34:	210c      	movs	r1, #12
 8001c36:	4846      	ldr	r0, [pc, #280]	; (8001d50 <HAL_UART_RxCpltCallback+0x738>)
 8001c38:	f00d f92e 	bl	800ee98 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001c3c:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <HAL_UART_RxCpltCallback+0x73c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2102      	movs	r1, #2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f011 fd70 	bl	8013728 <osEventFlagsSet>
		break;
 8001c48:	e11a      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001c4a:	4843      	ldr	r0, [pc, #268]	; (8001d58 <HAL_UART_RxCpltCallback+0x740>)
 8001c4c:	f015 f9d4 	bl	8016ff8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001c50:	210c      	movs	r1, #12
 8001c52:	483f      	ldr	r0, [pc, #252]	; (8001d50 <HAL_UART_RxCpltCallback+0x738>)
 8001c54:	f00d fa7a 	bl	800f14c <HAL_TIM_OC_Stop_IT>
		break;
 8001c58:	e112      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001c5a:	4840      	ldr	r0, [pc, #256]	; (8001d5c <HAL_UART_RxCpltCallback+0x744>)
 8001c5c:	f015 f9cc 	bl	8016ff8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001c60:	2100      	movs	r1, #0
 8001c62:	483f      	ldr	r0, [pc, #252]	; (8001d60 <HAL_UART_RxCpltCallback+0x748>)
 8001c64:	f00d f918 	bl	800ee98 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001c68:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <HAL_UART_RxCpltCallback+0x73c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f011 fd5a 	bl	8013728 <osEventFlagsSet>
		break;
 8001c74:	e104      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001c76:	483b      	ldr	r0, [pc, #236]	; (8001d64 <HAL_UART_RxCpltCallback+0x74c>)
 8001c78:	f015 f9be 	bl	8016ff8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4838      	ldr	r0, [pc, #224]	; (8001d60 <HAL_UART_RxCpltCallback+0x748>)
 8001c80:	f00d fa64 	bl	800f14c <HAL_TIM_OC_Stop_IT>
		break;
 8001c84:	e0fc      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001c86:	4838      	ldr	r0, [pc, #224]	; (8001d68 <HAL_UART_RxCpltCallback+0x750>)
 8001c88:	f015 f9b6 	bl	8016ff8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_UART_RxCpltCallback+0x73c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2104      	movs	r1, #4
 8001c92:	4618      	mov	r0, r3
 8001c94:	f011 fd48 	bl	8013728 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_UART_RxCpltCallback+0x754>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
		break;
 8001c9e:	e0ef      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001ca0:	4833      	ldr	r0, [pc, #204]	; (8001d70 <HAL_UART_RxCpltCallback+0x758>)
 8001ca2:	f015 f9a9 	bl	8016ff8 <puts>
		HK_ENABLED = 0;
 8001ca6:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_UART_RxCpltCallback+0x754>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
		break;
 8001cac:	e0e8      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001cae:	4831      	ldr	r0, [pc, #196]	; (8001d74 <HAL_UART_RxCpltCallback+0x75c>)
 8001cb0:	f015 f9a2 	bl	8016ff8 <puts>
		if (step < 14) {
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_UART_RxCpltCallback+0x760>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b0d      	cmp	r3, #13
 8001cbc:	f200 80d9 	bhi.w	8001e72 <HAL_UART_RxCpltCallback+0x85a>
			step += 2;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_UART_RxCpltCallback+0x760>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_UART_RxCpltCallback+0x760>)
 8001ccc:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_UART_RxCpltCallback+0x760>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_UART_RxCpltCallback+0x728>)
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4818      	ldr	r0, [pc, #96]	; (8001d44 <HAL_UART_RxCpltCallback+0x72c>)
 8001ce2:	f004 fa9c 	bl	800621e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4816      	ldr	r0, [pc, #88]	; (8001d44 <HAL_UART_RxCpltCallback+0x72c>)
 8001cea:	f004 f8dd 	bl	8005ea8 <HAL_DAC_Start>
		}
		break;
 8001cee:	e0c0      	b.n	8001e72 <HAL_UART_RxCpltCallback+0x85a>
 8001cf0:	08017824 	.word	0x08017824
 8001cf4:	58020400 	.word	0x58020400
 8001cf8:	08017830 	.word	0x08017830
 8001cfc:	08017b50 	.word	0x08017b50
 8001d00:	0801783c 	.word	0x0801783c
 8001d04:	58020800 	.word	0x58020800
 8001d08:	08017848 	.word	0x08017848
 8001d0c:	08017858 	.word	0x08017858
 8001d10:	08017864 	.word	0x08017864
 8001d14:	08017870 	.word	0x08017870
 8001d18:	0801787c 	.word	0x0801787c
 8001d1c:	0801788c 	.word	0x0801788c
 8001d20:	08017898 	.word	0x08017898
 8001d24:	080178a4 	.word	0x080178a4
 8001d28:	080178b0 	.word	0x080178b0
 8001d2c:	080178bc 	.word	0x080178bc
 8001d30:	080178cc 	.word	0x080178cc
 8001d34:	080178dc 	.word	0x080178dc
 8001d38:	080178e8 	.word	0x080178e8
 8001d3c:	080178f8 	.word	0x080178f8
 8001d40:	24000000 	.word	0x24000000
 8001d44:	240002d4 	.word	0x240002d4
 8001d48:	08017908 	.word	0x08017908
 8001d4c:	08017918 	.word	0x08017918
 8001d50:	24000a34 	.word	0x24000a34
 8001d54:	240007c4 	.word	0x240007c4
 8001d58:	08017920 	.word	0x08017920
 8001d5c:	0801792c 	.word	0x0801792c
 8001d60:	240009e8 	.word	0x240009e8
 8001d64:	08017934 	.word	0x08017934
 8001d68:	0801793c 	.word	0x0801793c
 8001d6c:	24000814 	.word	0x24000814
 8001d70:	08017944 	.word	0x08017944
 8001d74:	0801794c 	.word	0x0801794c
 8001d78:	24000815 	.word	0x24000815
	}
	case 0x0D: {
		printf("Step Down\n");
 8001d7c:	4842      	ldr	r0, [pc, #264]	; (8001e88 <HAL_UART_RxCpltCallback+0x870>)
 8001d7e:	f015 f93b 	bl	8016ff8 <puts>
		if (step > 1) {
 8001d82:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <HAL_UART_RxCpltCallback+0x874>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d974      	bls.n	8001e76 <HAL_UART_RxCpltCallback+0x85e>
			step -= 2;
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_UART_RxCpltCallback+0x874>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	3b02      	subs	r3, #2
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_UART_RxCpltCallback+0x874>)
 8001d98:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <HAL_UART_RxCpltCallback+0x874>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_UART_RxCpltCallback+0x878>)
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	4839      	ldr	r0, [pc, #228]	; (8001e94 <HAL_UART_RxCpltCallback+0x87c>)
 8001dae:	f004 fa36 	bl	800621e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001db2:	2100      	movs	r1, #0
 8001db4:	4837      	ldr	r0, [pc, #220]	; (8001e94 <HAL_UART_RxCpltCallback+0x87c>)
 8001db6:	f004 f877 	bl	8005ea8 <HAL_DAC_Start>
		}
		break;
 8001dba:	e05c      	b.n	8001e76 <HAL_UART_RxCpltCallback+0x85e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001dbc:	4836      	ldr	r0, [pc, #216]	; (8001e98 <HAL_UART_RxCpltCallback+0x880>)
 8001dbe:	f015 f91b 	bl	8016ff8 <puts>
		if (cadence <= 50000) {
 8001dc2:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_UART_RxCpltCallback+0x884>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d855      	bhi.n	8001e7a <HAL_UART_RxCpltCallback+0x862>
			cadence *= 2;
 8001dce:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_UART_RxCpltCallback+0x884>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4a31      	ldr	r2, [pc, #196]	; (8001e9c <HAL_UART_RxCpltCallback+0x884>)
 8001dd6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001dd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <HAL_UART_RxCpltCallback+0x884>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001de2:	e04a      	b.n	8001e7a <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001de4:	482e      	ldr	r0, [pc, #184]	; (8001ea0 <HAL_UART_RxCpltCallback+0x888>)
 8001de6:	f015 f907 	bl	8016ff8 <puts>
		if (cadence >= 6250) {
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <HAL_UART_RxCpltCallback+0x884>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f641 0269 	movw	r2, #6249	; 0x1869
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d943      	bls.n	8001e7e <HAL_UART_RxCpltCallback+0x866>
			cadence /= 2;
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HAL_UART_RxCpltCallback+0x884>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <HAL_UART_RxCpltCallback+0x884>)
 8001dfe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001e00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_UART_RxCpltCallback+0x884>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001e0a:	e038      	b.n	8001e7e <HAL_UART_RxCpltCallback+0x866>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001e0c:	4825      	ldr	r0, [pc, #148]	; (8001ea4 <HAL_UART_RxCpltCallback+0x88c>)
 8001e0e:	f015 f8f3 	bl	8016ff8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001e12:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_UART_RxCpltCallback+0x890>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2102      	movs	r1, #2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f011 fc85 	bl	8013728 <osEventFlagsSet>
		break;
 8001e1e:	e02f      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001e20:	4822      	ldr	r0, [pc, #136]	; (8001eac <HAL_UART_RxCpltCallback+0x894>)
 8001e22:	f015 f8e9 	bl	8016ff8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_UART_RxCpltCallback+0x890>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f011 fc7b 	bl	8013728 <osEventFlagsSet>
		break;
 8001e32:	e025      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001e34:	481e      	ldr	r0, [pc, #120]	; (8001eb0 <HAL_UART_RxCpltCallback+0x898>)
 8001e36:	f015 f8df 	bl	8016ff8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_UART_RxCpltCallback+0x890>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2108      	movs	r1, #8
 8001e40:	4618      	mov	r0, r3
 8001e42:	f011 fc71 	bl	8013728 <osEventFlagsSet>
		break;
 8001e46:	e01b      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xAF: {
		sync();
 8001e48:	f000 f97e 	bl	8002148 <sync>
		break;
 8001e4c:	e018      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_UART_RxCpltCallback+0x89c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f011 fc67 	bl	8013728 <osEventFlagsSet>
		break;
 8001e5a:	e011      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_UART_RxCpltCallback+0x89c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2102      	movs	r1, #2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f011 fc60 	bl	8013728 <osEventFlagsSet>
		break;
 8001e68:	e00a      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
	}
	default: {
		printf("Unknown Command\n");
 8001e6a:	4813      	ldr	r0, [pc, #76]	; (8001eb8 <HAL_UART_RxCpltCallback+0x8a0>)
 8001e6c:	f015 f8c4 	bl	8016ff8 <puts>
		break;
 8001e70:	e006      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e72:	bf00      	nop
 8001e74:	e004      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e76:	bf00      	nop
 8001e78:	e002      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e7a:	bf00      	nop
 8001e7c:	e000      	b.n	8001e80 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e7e:	bf00      	nop
	}
	}
}
 8001e80:	bf00      	nop
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	08017954 	.word	0x08017954
 8001e8c:	24000815 	.word	0x24000815
 8001e90:	24000000 	.word	0x24000000
 8001e94:	240002d4 	.word	0x240002d4
 8001e98:	08017960 	.word	0x08017960
 8001e9c:	24000080 	.word	0x24000080
 8001ea0:	0801796c 	.word	0x0801796c
 8001ea4:	08017978 	.word	0x08017978
 8001ea8:	240007c8 	.word	0x240007c8
 8001eac:	08017988 	.word	0x08017988
 8001eb0:	08017994 	.word	0x08017994
 8001eb4:	240007cc 	.word	0x240007cc
 8001eb8:	080179a0 	.word	0x080179a0

08001ebc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <HAL_UART_TxCpltCallback+0x1c>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	24000084 	.word	0x24000084

08001edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee0:	f002 fa4e 	bl	8004380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee4:	f000 f826 	bl	8001f34 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ee8:	f000 f8a4 	bl	8002034 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eec:	f7ff fa12 	bl	8001314 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ef0:	f7fe fefa 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001ef4:	f001 fbf8 	bl	80036e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001ef8:	f001 fe80 	bl	8003bfc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001efc:	f7ff fa84 	bl	8001408 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001f00:	f000 ff4a 	bl	8002d98 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001f04:	f001 fb7a 	bl	80035fc <MX_TIM2_Init>
  MX_TIM1_Init();
 8001f08:	f001 faca 	bl	80034a0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001f0c:	f7fe fc8c 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001f10:	f7fe fb68 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001f14:	f7fe fe34 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001f18:	f000 fee6 	bl	8002ce8 <MX_SPI1_Init>
  MX_RTC_Init();
 8001f1c:	f000 fcca 	bl	80028b4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001f20:	f000 f8b8 	bl	8002094 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f24:	f011 faaa 	bl	801347c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f28:	f7fe ff24 	bl	8000d74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f2c:	f011 faca 	bl	80134c4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001f30:	e7fe      	b.n	8001f30 <main+0x54>
	...

08001f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b09c      	sub	sp, #112	; 0x70
 8001f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3e:	224c      	movs	r2, #76	; 0x4c
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f014 ff02 	bl	8016d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f014 fefc 	bl	8016d4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001f54:	2002      	movs	r0, #2
 8001f56:	f008 f9fd 	bl	800a354 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b33      	ldr	r3, [pc, #204]	; (800202c <SystemClock_Config+0xf8>)
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	4a32      	ldr	r2, [pc, #200]	; (800202c <SystemClock_Config+0xf8>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f6a:	4b30      	ldr	r3, [pc, #192]	; (800202c <SystemClock_Config+0xf8>)
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <SystemClock_Config+0xfc>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f7c:	4a2c      	ldr	r2, [pc, #176]	; (8002030 <SystemClock_Config+0xfc>)
 8001f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <SystemClock_Config+0xfc>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f90:	bf00      	nop
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <SystemClock_Config+0xfc>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9e:	d1f8      	bne.n	8001f92 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001faa:	2309      	movs	r3, #9
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fae:	2340      	movs	r3, #64	; 0x40
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001fce:	2308      	movs	r3, #8
 8001fd0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f008 f9f2 	bl	800a3c8 <HAL_RCC_OscConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001fea:	f000 f965 	bl	80022b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fee:	233f      	movs	r3, #63	; 0x3f
 8001ff0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002002:	2340      	movs	r3, #64	; 0x40
 8002004:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2102      	movs	r1, #2
 8002012:	4618      	mov	r0, r3
 8002014:	f008 fe32 	bl	800ac7c <HAL_RCC_ClockConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800201e:	f000 f94b 	bl	80022b8 <Error_Handler>
  }
}
 8002022:	bf00      	nop
 8002024:	3770      	adds	r7, #112	; 0x70
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	58000400 	.word	0x58000400
 8002030:	58024800 	.word	0x58024800

08002034 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0b0      	sub	sp, #192	; 0xc0
 8002038:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800203a:	463b      	mov	r3, r7
 800203c:	22c0      	movs	r2, #192	; 0xc0
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f014 fe83 	bl	8016d4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002046:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002052:	2304      	movs	r3, #4
 8002054:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8002056:	2320      	movs	r3, #32
 8002058:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800205a:	2308      	movs	r3, #8
 800205c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800205e:	2302      	movs	r3, #2
 8002060:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002078:	463b      	mov	r3, r7
 800207a:	4618      	mov	r0, r3
 800207c:	f009 f9cc 	bl	800b418 <HAL_RCCEx_PeriphCLKConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002086:	f000 f917 	bl	80022b8 <Error_Handler>
  }
}
 800208a:	bf00      	nop
 800208c:	37c0      	adds	r7, #192	; 0xc0
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8002098:	2000      	movs	r0, #0
 800209a:	f011 fb06 	bl	80136aa <osEventFlagsNew>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a22      	ldr	r2, [pc, #136]	; (800212c <system_setup+0x98>)
 80020a2:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <system_setup+0x98>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d100      	bne.n	80020ae <system_setup+0x1a>
        while (1);
 80020ac:	e7fe      	b.n	80020ac <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f011 fafb 	bl	80136aa <osEventFlagsNew>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <system_setup+0x9c>)
 80020b8:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 80020ba:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <system_setup+0x9c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d100      	bne.n	80020c4 <system_setup+0x30>
        while (1);
 80020c2:	e7fe      	b.n	80020c2 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f011 faf0 	bl	80136aa <osEventFlagsNew>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <system_setup+0xa0>)
 80020ce:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <system_setup+0xa0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d100      	bne.n	80020da <system_setup+0x46>
        while (1);
 80020d8:	e7fe      	b.n	80020d8 <system_setup+0x44>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 80020da:	2200      	movs	r2, #0
 80020dc:	2108      	movs	r1, #8
 80020de:	2080      	movs	r0, #128	; 0x80
 80020e0:	f011 fbfe 	bl	80138e0 <osMessageQueueNew>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4a14      	ldr	r2, [pc, #80]	; (8002138 <system_setup+0xa4>)
 80020e8:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <system_setup+0xa4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d100      	bne.n	80020f4 <system_setup+0x60>
		while (1);
 80020f2:	e7fe      	b.n	80020f2 <system_setup+0x5e>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 80020f4:	f001 fe8c 	bl	8003e10 <voltage_monitor_init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d100      	bne.n	8002100 <system_setup+0x6c>
		while (1);
 80020fe:	e7fe      	b.n	80020fe <system_setup+0x6a>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002100:	2100      	movs	r1, #0
 8002102:	480e      	ldr	r0, [pc, #56]	; (800213c <system_setup+0xa8>)
 8002104:	f00c fec8 	bl	800ee98 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8002108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800210c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002110:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8002112:	f000 fc61 	bl	80029d8 <init_adc_dma>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d100      	bne.n	800211e <system_setup+0x8a>
		while (1);
 800211c:	e7fe      	b.n	800211c <system_setup+0x88>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800211e:	2201      	movs	r2, #1
 8002120:	4907      	ldr	r1, [pc, #28]	; (8002140 <system_setup+0xac>)
 8002122:	4808      	ldr	r0, [pc, #32]	; (8002144 <system_setup+0xb0>)
 8002124:	f00e fb98 	bl	8010858 <HAL_UART_Receive_IT>

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	240007c4 	.word	0x240007c4
 8002130:	240007c8 	.word	0x240007c8
 8002134:	240007cc 	.word	0x240007cc
 8002138:	240007d0 	.word	0x240007d0
 800213c:	24000a80 	.word	0x24000a80
 8002140:	240007d4 	.word	0x240007d4
 8002144:	24000acc 	.word	0x24000acc

08002148 <sync>:

void sync() {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
	send_ACK();
 800214e:	f000 f821 	bl	8002194 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002152:	480e      	ldr	r0, [pc, #56]	; (800218c <sync+0x44>)
 8002154:	f00e fc4c 	bl	80109f0 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002158:	2364      	movs	r3, #100	; 0x64
 800215a:	2209      	movs	r2, #9
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <sync+0x48>)
 800215e:	480b      	ldr	r0, [pc, #44]	; (800218c <sync+0x44>)
 8002160:	f00e fab2 	bl	80106c8 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <sync+0x48>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2bff      	cmp	r3, #255	; 0xff
 800216e:	d1f3      	bne.n	8002158 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8002170:	4807      	ldr	r0, [pc, #28]	; (8002190 <sync+0x48>)
 8002172:	f001 fc81 	bl	8003a78 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002176:	2201      	movs	r2, #1
 8002178:	4905      	ldr	r1, [pc, #20]	; (8002190 <sync+0x48>)
 800217a:	4804      	ldr	r0, [pc, #16]	; (800218c <sync+0x44>)
 800217c:	f00e fb6c 	bl	8010858 <HAL_UART_Receive_IT>

	send_ACK();
 8002180:	f000 f808 	bl	8002194 <send_ACK>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	24000acc 	.word	0x24000acc
 8002190:	240007d4 	.word	0x240007d4

08002194 <send_ACK>:

void send_ACK() {
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <send_ACK+0x1c>)
 800219a:	22ff      	movs	r2, #255	; 0xff
 800219c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800219e:	2364      	movs	r3, #100	; 0x64
 80021a0:	2201      	movs	r2, #1
 80021a2:	4903      	ldr	r1, [pc, #12]	; (80021b0 <send_ACK+0x1c>)
 80021a4:	4803      	ldr	r0, [pc, #12]	; (80021b4 <send_ACK+0x20>)
 80021a6:	f00e fa01 	bl	80105ac <HAL_UART_Transmit>
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2400081c 	.word	0x2400081c
 80021b4:	24000acc 	.word	0x24000acc

080021b8 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <get_current_step+0xc0>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d04a      	beq.n	8002264 <get_current_step+0xac>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d4:	da48      	bge.n	8002268 <get_current_step+0xb0>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021dc:	4293      	cmp	r3, r2
 80021de:	d03f      	beq.n	8002260 <get_current_step+0xa8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021e6:	4293      	cmp	r3, r2
 80021e8:	dc3e      	bgt.n	8002268 <get_current_step+0xb0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f640 421f 	movw	r2, #3103	; 0xc1f
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d033      	beq.n	800225c <get_current_step+0xa4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80021fa:	da35      	bge.n	8002268 <get_current_step+0xb0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002202:	4293      	cmp	r3, r2
 8002204:	d028      	beq.n	8002258 <get_current_step+0xa0>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800220c:	4293      	cmp	r3, r2
 800220e:	dc2b      	bgt.n	8002268 <get_current_step+0xb0>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f240 7245 	movw	r2, #1861	; 0x745
 8002216:	4293      	cmp	r3, r2
 8002218:	d01c      	beq.n	8002254 <get_current_step+0x9c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f240 7245 	movw	r2, #1861	; 0x745
 8002220:	4293      	cmp	r3, r2
 8002222:	dc21      	bgt.n	8002268 <get_current_step+0xb0>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800222a:	4293      	cmp	r3, r2
 800222c:	d010      	beq.n	8002250 <get_current_step+0x98>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002234:	4293      	cmp	r3, r2
 8002236:	dc17      	bgt.n	8002268 <get_current_step+0xb0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <get_current_step+0x90>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002244:	d002      	beq.n	800224c <get_current_step+0x94>
 8002246:	e00f      	b.n	8002268 <get_current_step+0xb0>
	case 0:
		return 0;
 8002248:	2300      	movs	r3, #0
 800224a:	e00e      	b.n	800226a <get_current_step+0xb2>
	case 620:
		return 1;
 800224c:	2301      	movs	r3, #1
 800224e:	e00c      	b.n	800226a <get_current_step+0xb2>
	case 1241:
		return 2;
 8002250:	2302      	movs	r3, #2
 8002252:	e00a      	b.n	800226a <get_current_step+0xb2>
	case 1861:
		return 3;
 8002254:	2303      	movs	r3, #3
 8002256:	e008      	b.n	800226a <get_current_step+0xb2>
	case 2482:
		return 4;
 8002258:	2304      	movs	r3, #4
 800225a:	e006      	b.n	800226a <get_current_step+0xb2>
	case 3103:
		return 5;
 800225c:	2305      	movs	r3, #5
 800225e:	e004      	b.n	800226a <get_current_step+0xb2>
	case 3723:
		return 6;
 8002260:	2306      	movs	r3, #6
 8002262:	e002      	b.n	800226a <get_current_step+0xb2>
	case 4095:
		return 7;
 8002264:	2307      	movs	r3, #7
 8002266:	e000      	b.n	800226a <get_current_step+0xb2>
	default:
		return -1;
 8002268:	23ff      	movs	r3, #255	; 0xff
	}
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40007400 	.word	0x40007400

0800227c <enter_stop>:

void enter_stop() {
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	  send_ACK();
 8002280:	f7ff ff88 	bl	8002194 <send_ACK>

	  vTaskSuspendAll();
 8002284:	f012 fff0 	bl	8015268 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002288:	2101      	movs	r1, #1
 800228a:	2001      	movs	r0, #1
 800228c:	f008 f826 	bl	800a2dc <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8002290:	f7ff f966 	bl	8001560 <__NVIC_SystemReset>

08002294 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022a6:	f002 f8a7 	bl	80043f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40001000 	.word	0x40001000

080022b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022bc:	b672      	cpsid	i
}
 80022be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022c0:	e7fe      	b.n	80022c0 <Error_Handler+0x8>

080022c2 <packetize>:

uint16_t pmt_seq = 0;
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;

packet_t packetize(const uint8_t *data, uint16_t size) {
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	4613      	mov	r3, r2
 80022ce:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f014 fd1c 	bl	8016d10 <malloc>
 80022d8:	4603      	mov	r3, r0
 80022da:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	88fa      	ldrh	r2, [r7, #6]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f014 fd24 	bl	8016d30 <memcpy>
	packet.size = size;
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	82bb      	strh	r3, [r7, #20]
	return packet;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022f8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <create_pmt_packet>:

void create_pmt_packet() {
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800230a:	bf00      	nop
 800230c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002310:	4836      	ldr	r0, [pc, #216]	; (80023ec <create_pmt_packet+0xe8>)
 8002312:	f007 f9a5 	bl	8009660 <HAL_GPIO_ReadPin>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f7      	bne.n	800230c <create_pmt_packet+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 800231c:	200a      	movs	r0, #10
 800231e:	f014 fcf7 	bl	8016d10 <malloc>
 8002322:	4603      	mov	r3, r0
 8002324:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002326:	2002      	movs	r0, #2
 8002328:	f014 fcf2 	bl	8016d10 <malloc>
 800232c:	4603      	mov	r3, r0
 800232e:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002330:	2004      	movs	r0, #4
 8002332:	f014 fced 	bl	8016d10 <malloc>
 8002336:	4603      	mov	r3, r0
 8002338:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f001 fb02 	bl	8003944 <get_uptime>

	sample_pmt_spi(pmt_spi);
 8002340:	6938      	ldr	r0, [r7, #16]
 8002342:	f000 fb89 	bl	8002a58 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	22bb      	movs	r2, #187	; 0xbb
 800234a:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3301      	adds	r3, #1
 8002350:	22bb      	movs	r2, #187	; 0xbb
 8002352:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002354:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <create_pmt_packet+0xec>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	b29a      	uxth	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3302      	adds	r3, #2
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <create_pmt_packet+0xec>)
 8002366:	881a      	ldrh	r2, [r3, #0]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3303      	adds	r3, #3
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3304      	adds	r3, #4
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	7812      	ldrb	r2, [r2, #0]
 8002378:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3305      	adds	r3, #5
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	7852      	ldrb	r2, [r2, #1]
 8002382:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3306      	adds	r3, #6
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	7812      	ldrb	r2, [r2, #0]
 800238c:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3307      	adds	r3, #7
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	7852      	ldrb	r2, [r2, #1]
 8002396:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3308      	adds	r3, #8
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	7892      	ldrb	r2, [r2, #2]
 80023a0:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3309      	adds	r3, #9
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	78d2      	ldrb	r2, [r2, #3]
 80023aa:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = packetize(buffer, PMT_DATA_SIZE);
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	220a      	movs	r2, #10
 80023b0:	6979      	ldr	r1, [r7, #20]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff85 	bl	80022c2 <packetize>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <create_pmt_packet+0xf0>)
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	1d39      	adds	r1, r7, #4
 80023be:	2300      	movs	r3, #0
 80023c0:	2200      	movs	r2, #0
 80023c2:	f011 fb01 	bl	80139c8 <osMessageQueuePut>
	pmt_seq++;
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <create_pmt_packet+0xec>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <create_pmt_packet+0xec>)
 80023d0:	801a      	strh	r2, [r3, #0]
	free(buffer);
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f014 fca4 	bl	8016d20 <free>
	free(pmt_spi);
 80023d8:	6938      	ldr	r0, [r7, #16]
 80023da:	f014 fca1 	bl	8016d20 <free>
	free(uptime);
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f014 fc9e 	bl	8016d20 <free>
}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	58020000 	.word	0x58020000
 80023f0:	2400081e 	.word	0x2400081e
 80023f4:	240007d0 	.word	0x240007d0

080023f8 <create_erpa_packet>:


void create_erpa_packet() {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80023fe:	bf00      	nop
 8002400:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002404:	484a      	ldr	r0, [pc, #296]	; (8002530 <create_erpa_packet+0x138>)
 8002406:	f007 f92b 	bl	8009660 <HAL_GPIO_ReadPin>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f7      	bne.n	8002400 <create_erpa_packet+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002410:	200e      	movs	r0, #14
 8002412:	f014 fc7d 	bl	8016d10 <malloc>
 8002416:	4603      	mov	r3, r0
 8002418:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800241a:	2002      	movs	r0, #2
 800241c:	f014 fc78 	bl	8016d10 <malloc>
 8002420:	4603      	mov	r3, r0
 8002422:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002424:	2002      	movs	r0, #2
 8002426:	f014 fc73 	bl	8016d10 <malloc>
 800242a:	4603      	mov	r3, r0
 800242c:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800242e:	2004      	movs	r0, #4
 8002430:	f014 fc6e 	bl	8016d10 <malloc>
 8002434:	4603      	mov	r3, r0
 8002436:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002438:	23ff      	movs	r3, #255	; 0xff
 800243a:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 800243c:	6938      	ldr	r0, [r7, #16]
 800243e:	f001 fa81 	bl	8003944 <get_uptime>
	sweep_step = get_current_step();
 8002442:	f7ff feb9 	bl	80021b8 <get_current_step>
 8002446:	4603      	mov	r3, r0
 8002448:	73fb      	strb	r3, [r7, #15]

	sample_erpa_spi(erpa_spi);
 800244a:	69b8      	ldr	r0, [r7, #24]
 800244c:	f000 fb28 	bl	8002aa0 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002450:	6978      	ldr	r0, [r7, #20]
 8002452:	f000 fb49 	bl	8002ae8 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	22aa      	movs	r2, #170	; 0xaa
 800245a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	3301      	adds	r3, #1
 8002460:	22aa      	movs	r2, #170	; 0xaa
 8002462:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <create_erpa_packet+0x13c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0c1a      	lsrs	r2, r3, #16
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3302      	adds	r3, #2
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <create_erpa_packet+0x13c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0a1a      	lsrs	r2, r3, #8
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	3303      	adds	r3, #3
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 8002480:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <create_erpa_packet+0x13c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3304      	adds	r3, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3305      	adds	r3, #5
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	b29a      	uxth	r2, r3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	3306      	adds	r3, #6
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	881a      	ldrh	r2, [r3, #0]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3307      	adds	r3, #7
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	3308      	adds	r3, #8
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3309      	adds	r3, #9
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	7852      	ldrb	r2, [r2, #1]
 80024c2:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	330a      	adds	r3, #10
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	330b      	adds	r3, #11
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	7852      	ldrb	r2, [r2, #1]
 80024d6:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	330c      	adds	r3, #12
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	7892      	ldrb	r2, [r2, #2]
 80024e0:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	330d      	adds	r3, #13
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	78d2      	ldrb	r2, [r2, #3]
 80024ea:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = packetize(buffer, ERPA_DATA_SIZE);
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	220e      	movs	r2, #14
 80024f0:	69f9      	ldr	r1, [r7, #28]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fee5 	bl	80022c2 <packetize>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <create_erpa_packet+0x140>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	1d39      	adds	r1, r7, #4
 80024fe:	2300      	movs	r3, #0
 8002500:	2200      	movs	r2, #0
 8002502:	f011 fa61 	bl	80139c8 <osMessageQueuePut>
	erpa_seq++;
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <create_erpa_packet+0x13c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	4a09      	ldr	r2, [pc, #36]	; (8002534 <create_erpa_packet+0x13c>)
 800250e:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002510:	69f8      	ldr	r0, [r7, #28]
 8002512:	f014 fc05 	bl	8016d20 <free>
	free(erpa_spi);
 8002516:	69b8      	ldr	r0, [r7, #24]
 8002518:	f014 fc02 	bl	8016d20 <free>
	free(erpa_adc);
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f014 fbff 	bl	8016d20 <free>
	free(uptime);
 8002522:	6938      	ldr	r0, [r7, #16]
 8002524:	f014 fbfc 	bl	8016d20 <free>
}
 8002528:	bf00      	nop
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	58020400 	.word	0x58020400
 8002534:	24000820 	.word	0x24000820
 8002538:	240007d0 	.word	0x240007d0

0800253c <create_hk_packet>:


void create_hk_packet() {
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002542:	2036      	movs	r0, #54	; 0x36
 8002544:	f014 fbe4 	bl	8016d10 <malloc>
 8002548:	4603      	mov	r3, r0
 800254a:	617b      	str	r3, [r7, #20]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 800254c:	200a      	movs	r0, #10
 800254e:	f014 fbdf 	bl	8016d10 <malloc>
 8002552:	4603      	mov	r3, r0
 8002554:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002556:	2004      	movs	r0, #4
 8002558:	f014 fbda 	bl	8016d10 <malloc>
 800255c:	4603      	mov	r3, r0
 800255e:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f001 f9ef 	bl	8003944 <get_uptime>
	get_timestamp(timestamp);
 8002566:	6938      	ldr	r0, [r7, #16]
 8002568:	f001 fa36 	bl	80039d8 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 800256c:	f001 fe2e 	bl	80041cc <get_rail_monitor>
 8002570:	60b8      	str	r0, [r7, #8]


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	22cc      	movs	r2, #204	; 0xcc
 8002576:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	22cc      	movs	r2, #204	; 0xcc
 800257e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002580:	4ba1      	ldr	r3, [pc, #644]	; (8002808 <create_hk_packet+0x2cc>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	b29a      	uxth	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3302      	adds	r3, #2
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002590:	4b9d      	ldr	r3, [pc, #628]	; (8002808 <create_hk_packet+0x2cc>)
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3303      	adds	r3, #3
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	889b      	ldrh	r3, [r3, #4]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3304      	adds	r3, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	889a      	ldrh	r2, [r3, #4]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3305      	adds	r3, #5
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	330a      	adds	r3, #10
 80025bc:	889b      	ldrh	r3, [r3, #4]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3306      	adds	r3, #6
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	330a      	adds	r3, #10
 80025ce:	889a      	ldrh	r2, [r3, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3307      	adds	r3, #7
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	3314      	adds	r3, #20
 80025dc:	889b      	ldrh	r3, [r3, #4]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3308      	adds	r3, #8
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3314      	adds	r3, #20
 80025ee:	889a      	ldrh	r2, [r3, #4]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3309      	adds	r3, #9
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	331e      	adds	r3, #30
 80025fc:	889b      	ldrh	r3, [r3, #4]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	b29a      	uxth	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	330a      	adds	r3, #10
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	331e      	adds	r3, #30
 800260e:	889a      	ldrh	r2, [r3, #4]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	330b      	adds	r3, #11
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3328      	adds	r3, #40	; 0x28
 800261c:	889b      	ldrh	r3, [r3, #4]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	b29a      	uxth	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	330c      	adds	r3, #12
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3328      	adds	r3, #40	; 0x28
 800262e:	889a      	ldrh	r2, [r3, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	330d      	adds	r3, #13
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	3332      	adds	r3, #50	; 0x32
 800263c:	889b      	ldrh	r3, [r3, #4]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	b29a      	uxth	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	330e      	adds	r3, #14
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3332      	adds	r3, #50	; 0x32
 800264e:	889a      	ldrh	r2, [r3, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	330f      	adds	r3, #15
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	333c      	adds	r3, #60	; 0x3c
 800265c:	889b      	ldrh	r3, [r3, #4]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	b29a      	uxth	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3310      	adds	r3, #16
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	333c      	adds	r3, #60	; 0x3c
 800266e:	889a      	ldrh	r2, [r3, #4]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3311      	adds	r3, #17
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	3346      	adds	r3, #70	; 0x46
 800267c:	889b      	ldrh	r3, [r3, #4]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	b29a      	uxth	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3312      	adds	r3, #18
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3346      	adds	r3, #70	; 0x46
 800268e:	889a      	ldrh	r2, [r3, #4]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3313      	adds	r3, #19
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	3350      	adds	r3, #80	; 0x50
 800269c:	889b      	ldrh	r3, [r3, #4]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3314      	adds	r3, #20
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3350      	adds	r3, #80	; 0x50
 80026ae:	889a      	ldrh	r2, [r3, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3315      	adds	r3, #21
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	335a      	adds	r3, #90	; 0x5a
 80026bc:	889b      	ldrh	r3, [r3, #4]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3316      	adds	r3, #22
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	335a      	adds	r3, #90	; 0x5a
 80026ce:	889a      	ldrh	r2, [r3, #4]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3317      	adds	r3, #23
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3364      	adds	r3, #100	; 0x64
 80026dc:	889b      	ldrh	r3, [r3, #4]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3318      	adds	r3, #24
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3364      	adds	r3, #100	; 0x64
 80026ee:	889a      	ldrh	r2, [r3, #4]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	3319      	adds	r3, #25
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	336e      	adds	r3, #110	; 0x6e
 80026fc:	889b      	ldrh	r3, [r3, #4]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	b29a      	uxth	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	331a      	adds	r3, #26
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	336e      	adds	r3, #110	; 0x6e
 800270e:	889a      	ldrh	r2, [r3, #4]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	331b      	adds	r3, #27
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3378      	adds	r3, #120	; 0x78
 800271c:	889b      	ldrh	r3, [r3, #4]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	b29a      	uxth	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	331c      	adds	r3, #28
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	3378      	adds	r3, #120	; 0x78
 800272e:	889a      	ldrh	r2, [r3, #4]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	331d      	adds	r3, #29
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3382      	adds	r3, #130	; 0x82
 800273c:	889b      	ldrh	r3, [r3, #4]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b29a      	uxth	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	331e      	adds	r3, #30
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3382      	adds	r3, #130	; 0x82
 800274e:	889a      	ldrh	r2, [r3, #4]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	331f      	adds	r3, #31
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	338c      	adds	r3, #140	; 0x8c
 800275c:	889b      	ldrh	r3, [r3, #4]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	b29a      	uxth	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3320      	adds	r3, #32
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	338c      	adds	r3, #140	; 0x8c
 800276e:	889a      	ldrh	r2, [r3, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3321      	adds	r3, #33	; 0x21
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	3396      	adds	r3, #150	; 0x96
 800277c:	889b      	ldrh	r3, [r3, #4]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	b29a      	uxth	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3322      	adds	r3, #34	; 0x22
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3396      	adds	r3, #150	; 0x96
 800278e:	889a      	ldrh	r2, [r3, #4]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	3323      	adds	r3, #35	; 0x23
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	33a0      	adds	r3, #160	; 0xa0
 800279c:	889b      	ldrh	r3, [r3, #4]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3324      	adds	r3, #36	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	33a0      	adds	r3, #160	; 0xa0
 80027ae:	889a      	ldrh	r2, [r3, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3325      	adds	r3, #37	; 0x25
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	33aa      	adds	r3, #170	; 0xaa
 80027bc:	889b      	ldrh	r3, [r3, #4]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3326      	adds	r3, #38	; 0x26
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	33aa      	adds	r3, #170	; 0xaa
 80027ce:	889a      	ldrh	r2, [r3, #4]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3327      	adds	r3, #39	; 0x27
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3328      	adds	r3, #40	; 0x28
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	7812      	ldrb	r2, [r2, #0]
 80027e0:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3329      	adds	r3, #41	; 0x29
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	7852      	ldrb	r2, [r2, #1]
 80027ea:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	332a      	adds	r3, #42	; 0x2a
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	7892      	ldrb	r2, [r2, #2]
 80027f4:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	332b      	adds	r3, #43	; 0x2b
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	78d2      	ldrb	r2, [r2, #3]
 80027fe:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	332c      	adds	r3, #44	; 0x2c
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	e001      	b.n	800280c <create_hk_packet+0x2d0>
 8002808:	24000824 	.word	0x24000824
 800280c:	7912      	ldrb	r2, [r2, #4]
 800280e:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	332d      	adds	r3, #45	; 0x2d
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	7952      	ldrb	r2, [r2, #5]
 8002818:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	332e      	adds	r3, #46	; 0x2e
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	7992      	ldrb	r2, [r2, #6]
 8002822:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	332f      	adds	r3, #47	; 0x2f
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	79d2      	ldrb	r2, [r2, #7]
 800282c:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3330      	adds	r3, #48	; 0x30
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	7a12      	ldrb	r2, [r2, #8]
 8002836:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3331      	adds	r3, #49	; 0x31
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	7a52      	ldrb	r2, [r2, #9]
 8002840:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3332      	adds	r3, #50	; 0x32
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3333      	adds	r3, #51	; 0x33
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	7852      	ldrb	r2, [r2, #1]
 8002854:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3334      	adds	r3, #52	; 0x34
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	7892      	ldrb	r2, [r2, #2]
 800285e:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3335      	adds	r3, #53	; 0x35
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	78d2      	ldrb	r2, [r2, #3]
 8002868:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = packetize(buffer, HK_DATA_SIZE);
 800286a:	463b      	mov	r3, r7
 800286c:	2236      	movs	r2, #54	; 0x36
 800286e:	6979      	ldr	r1, [r7, #20]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fd26 	bl	80022c2 <packetize>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <create_hk_packet+0x370>)
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	4639      	mov	r1, r7
 800287c:	2300      	movs	r3, #0
 800287e:	2200      	movs	r2, #0
 8002880:	f011 f8a2 	bl	80139c8 <osMessageQueuePut>
	hk_seq++;
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <create_hk_packet+0x374>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <create_hk_packet+0x374>)
 800288e:	801a      	strh	r2, [r3, #0]
	free(buffer);
 8002890:	6978      	ldr	r0, [r7, #20]
 8002892:	f014 fa45 	bl	8016d20 <free>
	free(timestamp);
 8002896:	6938      	ldr	r0, [r7, #16]
 8002898:	f014 fa42 	bl	8016d20 <free>
	free(uptime);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f014 fa3f 	bl	8016d20 <free>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	240007d0 	.word	0x240007d0
 80028b0:	24000824 	.word	0x24000824

080028b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80028c8:	2300      	movs	r3, #0
 80028ca:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028cc:	4b26      	ldr	r3, [pc, #152]	; (8002968 <MX_RTC_Init+0xb4>)
 80028ce:	4a27      	ldr	r2, [pc, #156]	; (800296c <MX_RTC_Init+0xb8>)
 80028d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028d2:	4b25      	ldr	r3, [pc, #148]	; (8002968 <MX_RTC_Init+0xb4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <MX_RTC_Init+0xb4>)
 80028da:	2263      	movs	r2, #99	; 0x63
 80028dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <MX_RTC_Init+0xb4>)
 80028e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80028e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <MX_RTC_Init+0xb4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <MX_RTC_Init+0xb4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <MX_RTC_Init+0xb4>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <MX_RTC_Init+0xb4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028fe:	481a      	ldr	r0, [pc, #104]	; (8002968 <MX_RTC_Init+0xb4>)
 8002900:	f00b fa88 	bl	800de14 <HAL_RTC_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800290a:	f7ff fcd5 	bl	80022b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800290e:	2300      	movs	r3, #0
 8002910:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002912:	2300      	movs	r3, #0
 8002914:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002916:	2300      	movs	r3, #0
 8002918:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	2201      	movs	r2, #1
 8002926:	4619      	mov	r1, r3
 8002928:	480f      	ldr	r0, [pc, #60]	; (8002968 <MX_RTC_Init+0xb4>)
 800292a:	f00b faf5 	bl	800df18 <HAL_RTC_SetTime>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002934:	f7ff fcc0 	bl	80022b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002938:	2301      	movs	r3, #1
 800293a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800293c:	2301      	movs	r3, #1
 800293e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002940:	2301      	movs	r3, #1
 8002942:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002944:	2300      	movs	r3, #0
 8002946:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002948:	463b      	mov	r3, r7
 800294a:	2201      	movs	r2, #1
 800294c:	4619      	mov	r1, r3
 800294e:	4806      	ldr	r0, [pc, #24]	; (8002968 <MX_RTC_Init+0xb4>)
 8002950:	f00b fbdc 	bl	800e10c <HAL_RTC_SetDate>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800295a:	f7ff fcad 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	24000828 	.word	0x24000828
 800296c:	58004000 	.word	0x58004000

08002970 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0b2      	sub	sp, #200	; 0xc8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002978:	f107 0308 	add.w	r3, r7, #8
 800297c:	22c0      	movs	r2, #192	; 0xc0
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f014 f9e3 	bl	8016d4c <memset>
  if(rtcHandle->Instance==RTC)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_RTC_MspInit+0x5c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d118      	bne.n	80029c2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002990:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_RTC_MspInit+0x60>)
 800299e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029a2:	f107 0308 	add.w	r3, r7, #8
 80029a6:	4618      	mov	r0, r3
 80029a8:	f008 fd36 	bl	800b418 <HAL_RCCEx_PeriphCLKConfig>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80029b2:	f7ff fc81 	bl	80022b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RTC_MspInit+0x64>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_RTC_MspInit+0x64>)
 80029bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80029c2:	bf00      	nop
 80029c4:	37c8      	adds	r7, #200	; 0xc8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	58004000 	.word	0x58004000
 80029d0:	00019300 	.word	0x00019300
 80029d4:	58024400 	.word	0x58024400

080029d8 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80029e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80029e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ea:	4817      	ldr	r0, [pc, #92]	; (8002a48 <init_adc_dma+0x70>)
 80029ec:	f003 f818 	bl	8005a20 <HAL_ADCEx_Calibration_Start>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80029f6:	f7ff fc5f 	bl	80022b8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80029fa:	220b      	movs	r2, #11
 80029fc:	4913      	ldr	r1, [pc, #76]	; (8002a4c <init_adc_dma+0x74>)
 80029fe:	4812      	ldr	r0, [pc, #72]	; (8002a48 <init_adc_dma+0x70>)
 8002a00:	f002 f8ec 	bl	8004bdc <HAL_ADC_Start_DMA>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002a0a:	f7ff fc55 	bl	80022b8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002a0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002a12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a16:	480e      	ldr	r0, [pc, #56]	; (8002a50 <init_adc_dma+0x78>)
 8002a18:	f003 f802 	bl	8005a20 <HAL_ADCEx_Calibration_Start>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002a22:	f7ff fc49 	bl	80022b8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002a26:	2204      	movs	r2, #4
 8002a28:	490a      	ldr	r1, [pc, #40]	; (8002a54 <init_adc_dma+0x7c>)
 8002a2a:	4809      	ldr	r0, [pc, #36]	; (8002a50 <init_adc_dma+0x78>)
 8002a2c:	f002 f8d6 	bl	8004bdc <HAL_ADC_Start_DMA>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002a36:	f7ff fc3f 	bl	80022b8 <Error_Handler>
	}
	status = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	71fb      	strb	r3, [r7, #7]

	return status;
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2400011c 	.word	0x2400011c
 8002a4c:	24000860 	.word	0x24000860
 8002a50:	24000180 	.word	0x24000180
 8002a54:	24000880 	.word	0x24000880

08002a58 <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8002a60:	f107 010c 	add.w	r1, r7, #12
 8002a64:	2301      	movs	r3, #1
 8002a66:	2201      	movs	r2, #1
 8002a68:	480c      	ldr	r0, [pc, #48]	; (8002a9c <sample_pmt_spi+0x44>)
 8002a6a:	f00b fe19 	bl	800e6a0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002a72:	7b7b      	ldrb	r3, [r7, #13]
 8002a74:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <sample_pmt_spi+0x44>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <sample_pmt_spi+0x44>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a84:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7bba      	ldrb	r2, [r7, #14]
 8002a8a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	701a      	strb	r2, [r3, #0]
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	24000888 	.word	0x24000888

08002aa0 <sample_erpa_spi>:

void sample_erpa_spi(uint8_t *buffer) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8002aa8:	f107 010c 	add.w	r1, r7, #12
 8002aac:	2364      	movs	r3, #100	; 0x64
 8002aae:	2201      	movs	r2, #1
 8002ab0:	480c      	ldr	r0, [pc, #48]	; (8002ae4 <sample_erpa_spi+0x44>)
 8002ab2:	f00b fdf5 	bl	800e6a0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002aba:	7b7b      	ldrb	r3, [r7, #13]
 8002abc:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <sample_erpa_spi+0x44>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <sample_erpa_spi+0x44>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002acc:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7bba      	ldrb	r2, [r7, #14]
 8002ad2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	701a      	strb	r2, [r3, #0]
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	24000910 	.word	0x24000910

08002ae8 <sample_erpa_adc>:

void sample_erpa_adc(uint16_t *buffer) {
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <sample_erpa_adc+0x20>)
 8002af2:	885b      	ldrh	r3, [r3, #2]
 8002af4:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	89fa      	ldrh	r2, [r7, #14]
 8002afa:	801a      	strh	r2, [r3, #0]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	24000860 	.word	0x24000860

08002b0c <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002b14:	2390      	movs	r3, #144	; 0x90
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f8a2 	bl	8002c60 <poll_i2c_sensor>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8002b20:	2394      	movs	r3, #148	; 0x94
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f89c 	bl	8002c60 <poll_i2c_sensor>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8002b2c:	2392      	movs	r3, #146	; 0x92
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f896 	bl	8002c60 <poll_i2c_sensor>
 8002b34:	4603      	mov	r3, r0
 8002b36:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002b38:	2396      	movs	r3, #150	; 0x96
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f890 	bl	8002c60 <poll_i2c_sensor>
 8002b40:	4603      	mov	r3, r0
 8002b42:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	89fa      	ldrh	r2, [r7, #14]
 8002b48:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	89ba      	ldrh	r2, [r7, #12]
 8002b50:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	897a      	ldrh	r2, [r7, #10]
 8002b58:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3306      	adds	r3, #6
 8002b5e:	893a      	ldrh	r2, [r7, #8]
 8002b60:	801a      	strh	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <sample_hk_adc1+0xa0>)
 8002b76:	8a9b      	ldrh	r3, [r3, #20]
 8002b78:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <sample_hk_adc1+0xa0>)
 8002b7c:	8a1b      	ldrh	r3, [r3, #16]
 8002b7e:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <sample_hk_adc1+0xa0>)
 8002b82:	899b      	ldrh	r3, [r3, #12]
 8002b84:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <sample_hk_adc1+0xa0>)
 8002b88:	8a5b      	ldrh	r3, [r3, #18]
 8002b8a:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <sample_hk_adc1+0xa0>)
 8002b8e:	889b      	ldrh	r3, [r3, #4]
 8002b90:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <sample_hk_adc1+0xa0>)
 8002b94:	88db      	ldrh	r3, [r3, #6]
 8002b96:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <sample_hk_adc1+0xa0>)
 8002b9a:	89db      	ldrh	r3, [r3, #14]
 8002b9c:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <sample_hk_adc1+0xa0>)
 8002ba0:	891b      	ldrh	r3, [r3, #8]
 8002ba2:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <sample_hk_adc1+0xa0>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <sample_hk_adc1+0xa0>)
 8002bac:	895b      	ldrh	r3, [r3, #10]
 8002bae:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8bfa      	ldrh	r2, [r7, #30]
 8002bb4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	8bba      	ldrh	r2, [r7, #28]
 8002bbc:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	8b7a      	ldrh	r2, [r7, #26]
 8002bc4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3306      	adds	r3, #6
 8002bca:	8b3a      	ldrh	r2, [r7, #24]
 8002bcc:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	8afa      	ldrh	r2, [r7, #22]
 8002bd4:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	330a      	adds	r3, #10
 8002bda:	8aba      	ldrh	r2, [r7, #20]
 8002bdc:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	330c      	adds	r3, #12
 8002be2:	8a7a      	ldrh	r2, [r7, #18]
 8002be4:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	330e      	adds	r3, #14
 8002bea:	8a3a      	ldrh	r2, [r7, #16]
 8002bec:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3310      	adds	r3, #16
 8002bf2:	89fa      	ldrh	r2, [r7, #14]
 8002bf4:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3312      	adds	r3, #18
 8002bfa:	89ba      	ldrh	r2, [r7, #12]
 8002bfc:	801a      	strh	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	24000860 	.word	0x24000860

08002c10 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <sample_hk_adc3+0x4c>)
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <sample_hk_adc3+0x4c>)
 8002c20:	885b      	ldrh	r3, [r3, #2]
 8002c22:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <sample_hk_adc3+0x4c>)
 8002c26:	889b      	ldrh	r3, [r3, #4]
 8002c28:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <sample_hk_adc3+0x4c>)
 8002c2c:	88db      	ldrh	r3, [r3, #6]
 8002c2e:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	89fa      	ldrh	r2, [r7, #14]
 8002c34:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3302      	adds	r3, #2
 8002c3a:	89ba      	ldrh	r2, [r7, #12]
 8002c3c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3304      	adds	r3, #4
 8002c42:	897a      	ldrh	r2, [r7, #10]
 8002c44:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3306      	adds	r3, #6
 8002c4a:	893a      	ldrh	r2, [r7, #8]
 8002c4c:	801a      	strh	r2, [r3, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	24000880 	.word	0x24000880

08002c60 <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	b299      	uxth	r1, r3
 8002c72:	f107 0208 	add.w	r2, r7, #8
 8002c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	4817      	ldr	r0, [pc, #92]	; (8002cdc <poll_i2c_sensor+0x7c>)
 8002c80:	f006 fdbc 	bl	80097fc <HAL_I2C_Master_Transmit>
 8002c84:	4603      	mov	r3, r0
 8002c86:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002c88:	7b7b      	ldrb	r3, [r7, #13]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8002c8e:	4814      	ldr	r0, [pc, #80]	; (8002ce0 <poll_i2c_sensor+0x80>)
 8002c90:	f014 f9b2 	bl	8016ff8 <puts>
 8002c94:	e01c      	b.n	8002cd0 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	b299      	uxth	r1, r3
 8002c9a:	f107 0208 	add.w	r2, r7, #8
 8002c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	480d      	ldr	r0, [pc, #52]	; (8002cdc <poll_i2c_sensor+0x7c>)
 8002ca8:	f006 fec0 	bl	8009a2c <HAL_I2C_Master_Receive>
 8002cac:	4603      	mov	r3, r0
 8002cae:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8002cb0:	7b7b      	ldrb	r3, [r7, #13]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8002cb6:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <poll_i2c_sensor+0x84>)
 8002cb8:	f014 f99e 	bl	8016ff8 <puts>
 8002cbc:	e008      	b.n	8002cd0 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8002cbe:	7a3b      	ldrb	r3, [r7, #8]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8002cc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc8:	7a7a      	ldrb	r2, [r7, #9]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	10db      	asrs	r3, r3, #3
 8002cce:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8002cd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	24000770 	.word	0x24000770
 8002ce0:	080179b0 	.word	0x080179b0
 8002ce4:	080179c0 	.word	0x080179c0

08002ce8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cec:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002cee:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <MX_SPI1_Init+0xac>)
 8002cf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002cf4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002cf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002cfa:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002cfc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d00:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d04:	220f      	movs	r2, #15
 8002d06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d14:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d1e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002d22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d42:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d7a:	4805      	ldr	r0, [pc, #20]	; (8002d90 <MX_SPI1_Init+0xa8>)
 8002d7c:	f00b fb6c 	bl	800e458 <HAL_SPI_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002d86:	f7ff fa97 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	24000888 	.word	0x24000888
 8002d94:	40013000 	.word	0x40013000

08002d98 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002d9c:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002d9e:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <MX_SPI2_Init+0xac>)
 8002da0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002da2:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002da4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002da8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002dac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002db0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002db2:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002db4:	220f      	movs	r2, #15
 8002db6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002dc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002dca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002dce:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002dd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de0:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002de6:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002df2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002dfa:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MX_SPI2_Init+0xa8>)
 8002e2c:	f00b fb14 	bl	800e458 <HAL_SPI_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002e36:	f7ff fa3f 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	24000910 	.word	0x24000910
 8002e44:	40003800 	.word	0x40003800

08002e48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b0bc      	sub	sp, #240	; 0xf0
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e60:	f107 0318 	add.w	r3, r7, #24
 8002e64:	22c0      	movs	r2, #192	; 0xc0
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f013 ff6f 	bl	8016d4c <memset>
  if(spiHandle->Instance==SPI1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a4c      	ldr	r2, [pc, #304]	; (8002fa4 <HAL_SPI_MspInit+0x15c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d145      	bne.n	8002f04 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e88:	f107 0318 	add.w	r3, r7, #24
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f008 fac3 	bl	800b418 <HAL_RCCEx_PeriphCLKConfig>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002e98:	f7ff fa0e 	bl	80022b8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e9c:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ea2:	4a41      	ldr	r2, [pc, #260]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ea8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002eac:	4b3e      	ldr	r3, [pc, #248]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eba:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec0:	4a39      	ldr	r2, [pc, #228]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002ed8:	2318      	movs	r3, #24
 8002eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002efa:	4619      	mov	r1, r3
 8002efc:	482b      	ldr	r0, [pc, #172]	; (8002fac <HAL_SPI_MspInit+0x164>)
 8002efe:	f006 f9ff 	bl	8009300 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002f02:	e04a      	b.n	8002f9a <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <HAL_SPI_MspInit+0x168>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d145      	bne.n	8002f9a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f1e:	f107 0318 	add.w	r3, r7, #24
 8002f22:	4618      	mov	r0, r3
 8002f24:	f008 fa78 	bl	800b418 <HAL_RCCEx_PeriphCLKConfig>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002f2e:	f7ff f9c3 	bl	80022b8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f38:	4a1b      	ldr	r2, [pc, #108]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f56:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002f6e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f88:	2305      	movs	r3, #5
 8002f8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f92:	4619      	mov	r1, r3
 8002f94:	4805      	ldr	r0, [pc, #20]	; (8002fac <HAL_SPI_MspInit+0x164>)
 8002f96:	f006 f9b3 	bl	8009300 <HAL_GPIO_Init>
}
 8002f9a:	bf00      	nop
 8002f9c:	37f0      	adds	r7, #240	; 0xf0
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40013000 	.word	0x40013000
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	58020400 	.word	0x58020400
 8002fb0:	40003800 	.word	0x40003800

08002fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_MspInit+0x38>)
 8002fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_MspInit+0x38>)
 8002fc2:	f043 0302 	orr.w	r3, r3, #2
 8002fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_MspInit+0x38>)
 8002fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	210f      	movs	r1, #15
 8002fdc:	f06f 0001 	mvn.w	r0, #1
 8002fe0:	f002 ff18 	bl	8005e14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	58024400 	.word	0x58024400

08002ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b090      	sub	sp, #64	; 0x40
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b0f      	cmp	r3, #15
 8002ffc:	d827      	bhi.n	800304e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002ffe:	2200      	movs	r2, #0
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	2036      	movs	r0, #54	; 0x36
 8003004:	f002 ff06 	bl	8005e14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003008:	2036      	movs	r0, #54	; 0x36
 800300a:	f002 ff1d 	bl	8005e48 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800300e:	4a29      	ldr	r2, [pc, #164]	; (80030b4 <HAL_InitTick+0xc4>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_InitTick+0xc8>)
 8003016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800301a:	4a27      	ldr	r2, [pc, #156]	; (80030b8 <HAL_InitTick+0xc8>)
 800301c:	f043 0310 	orr.w	r3, r3, #16
 8003020:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_InitTick+0xc8>)
 8003026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003032:	f107 0210 	add.w	r2, r7, #16
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f008 f9a9 	bl	800b394 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	2b00      	cmp	r3, #0
 800304a:	d106      	bne.n	800305a <HAL_InitTick+0x6a>
 800304c:	e001      	b.n	8003052 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e02b      	b.n	80030aa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003052:	f008 f973 	bl	800b33c <HAL_RCC_GetPCLK1Freq>
 8003056:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003058:	e004      	b.n	8003064 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800305a:	f008 f96f 	bl	800b33c <HAL_RCC_GetPCLK1Freq>
 800305e:	4603      	mov	r3, r0
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003066:	4a15      	ldr	r2, [pc, #84]	; (80030bc <HAL_InitTick+0xcc>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	0c9b      	lsrs	r3, r3, #18
 800306e:	3b01      	subs	r3, #1
 8003070:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_InitTick+0xd0>)
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <HAL_InitTick+0xd4>)
 8003076:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_InitTick+0xd0>)
 800307a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800307e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003080:	4a0f      	ldr	r2, [pc, #60]	; (80030c0 <HAL_InitTick+0xd0>)
 8003082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003084:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_InitTick+0xd0>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_InitTick+0xd0>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003092:	480b      	ldr	r0, [pc, #44]	; (80030c0 <HAL_InitTick+0xd0>)
 8003094:	f00b fe31 	bl	800ecfa <HAL_TIM_Base_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800309e:	4808      	ldr	r0, [pc, #32]	; (80030c0 <HAL_InitTick+0xd0>)
 80030a0:	f00b fe82 	bl	800eda8 <HAL_TIM_Base_Start_IT>
 80030a4:	4603      	mov	r3, r0
 80030a6:	e000      	b.n	80030aa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3740      	adds	r7, #64	; 0x40
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	24000090 	.word	0x24000090
 80030b8:	58024400 	.word	0x58024400
 80030bc:	431bde83 	.word	0x431bde83
 80030c0:	24000998 	.word	0x24000998
 80030c4:	40001000 	.word	0x40001000

080030c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80030cc:	e7fe      	b.n	80030cc <NMI_Handler+0x4>

080030ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d2:	e7fe      	b.n	80030d2 <HardFault_Handler+0x4>

080030d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d8:	e7fe      	b.n	80030d8 <MemManage_Handler+0x4>

080030da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030de:	e7fe      	b.n	80030de <BusFault_Handler+0x4>

080030e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e4:	e7fe      	b.n	80030e4 <UsageFault_Handler+0x4>

080030e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <DMA1_Stream0_IRQHandler+0x10>)
 80030fa:	f004 fde3 	bl	8007cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	240001e4 	.word	0x240001e4

08003108 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <DMA1_Stream1_IRQHandler+0x10>)
 800310e:	f004 fdd9 	bl	8007cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	2400025c 	.word	0x2400025c

0800311c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <DMA1_Stream2_IRQHandler+0x10>)
 8003122:	f004 fdcf 	bl	8007cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	24000b60 	.word	0x24000b60

08003130 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <DMA1_Stream5_IRQHandler+0x10>)
 8003136:	f004 fdc5 	bl	8007cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	240002e8 	.word	0x240002e8

08003144 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <TIM1_BRK_IRQHandler+0x10>)
 800314a:	f00c f944 	bl	800f3d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	240009e8 	.word	0x240009e8

08003158 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <TIM1_UP_IRQHandler+0x10>)
 800315e:	f00c f93a 	bl	800f3d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	240009e8 	.word	0x240009e8

0800316c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <TIM1_TRG_COM_IRQHandler+0x10>)
 8003172:	f00c f930 	bl	800f3d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	240009e8 	.word	0x240009e8

08003180 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003184:	4802      	ldr	r0, [pc, #8]	; (8003190 <TIM1_CC_IRQHandler+0x10>)
 8003186:	f00c f926 	bl	800f3d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	240009e8 	.word	0x240009e8

08003194 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <TIM2_IRQHandler+0x10>)
 800319a:	f00c f91c 	bl	800f3d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	24000a34 	.word	0x24000a34

080031a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <TIM3_IRQHandler+0x10>)
 80031ae:	f00c f912 	bl	800f3d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	24000a80 	.word	0x24000a80

080031bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <USART1_IRQHandler+0x10>)
 80031c2:	f00d fccb 	bl	8010b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	24000acc 	.word	0x24000acc

080031d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <TIM6_DAC_IRQHandler+0x20>)
 80031d6:	791b      	ldrb	r3, [r3, #4]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80031de:	4804      	ldr	r0, [pc, #16]	; (80031f0 <TIM6_DAC_IRQHandler+0x20>)
 80031e0:	f002 ffc7 	bl	8006172 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80031e4:	4803      	ldr	r0, [pc, #12]	; (80031f4 <TIM6_DAC_IRQHandler+0x24>)
 80031e6:	f00c f8f6 	bl	800f3d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	240002d4 	.word	0x240002d4
 80031f4:	24000998 	.word	0x24000998

080031f8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <ITM_SendChar+0x48>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <ITM_SendChar+0x48>)
 8003208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800320c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <ITM_SendChar+0x4c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <ITM_SendChar+0x4c>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800321a:	bf00      	nop
 800321c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f8      	beq.n	800321c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800322a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	6013      	str	r3, [r2, #0]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000edfc 	.word	0xe000edfc
 8003244:	e0000e00 	.word	0xe0000e00

08003248 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e00a      	b.n	8003270 <_read+0x28>
		*ptr++ = __io_getchar();
 800325a:	f3af 8000 	nop.w
 800325e:	4601      	mov	r1, r0
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	60ba      	str	r2, [r7, #8]
 8003266:	b2ca      	uxtb	r2, r1
 8003268:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3301      	adds	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	dbf0      	blt.n	800325a <_read+0x12>
	}

	return len;
 8003278:	687b      	ldr	r3, [r7, #4]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e009      	b.n	80032a8 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	60ba      	str	r2, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ffab 	bl	80031f8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	dbf1      	blt.n	8003294 <_write+0x12>
	}
	return len;
 80032b0:	687b      	ldr	r3, [r7, #4]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <_close>:

int _close(int file) {
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032e2:	605a      	str	r2, [r3, #4]
	return 0;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <_isatty>:

int _isatty(int file) {
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <_sbrk+0x64>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <_sbrk+0x64>)
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <_sbrk+0x68>)
 8003344:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <_sbrk+0x64>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	429a      	cmp	r2, r3
 8003352:	d207      	bcs.n	8003364 <_sbrk+0x40>
		errno = ENOMEM;
 8003354:	f013 fcb2 	bl	8016cbc <__errno>
 8003358:	4603      	mov	r3, r0
 800335a:	220c      	movs	r2, #12
 800335c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003362:	e009      	b.n	8003378 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <_sbrk+0x64>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <_sbrk+0x64>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	4a05      	ldr	r2, [pc, #20]	; (8003388 <_sbrk+0x64>)
 8003374:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	24080000 	.word	0x24080000
 8003384:	00000400 	.word	0x00000400
 8003388:	240009e4 	.word	0x240009e4
 800338c:	240055f0 	.word	0x240055f0

08003390 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003394:	4b37      	ldr	r3, [pc, #220]	; (8003474 <SystemInit+0xe4>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	4a36      	ldr	r2, [pc, #216]	; (8003474 <SystemInit+0xe4>)
 800339c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <SystemInit+0xe8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d807      	bhi.n	80033c0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <SystemInit+0xe8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 030f 	bic.w	r3, r3, #15
 80033b8:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <SystemInit+0xe8>)
 80033ba:	f043 0307 	orr.w	r3, r3, #7
 80033be:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80033c0:	4b2e      	ldr	r3, [pc, #184]	; (800347c <SystemInit+0xec>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2d      	ldr	r2, [pc, #180]	; (800347c <SystemInit+0xec>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <SystemInit+0xec>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80033d2:	4b2a      	ldr	r3, [pc, #168]	; (800347c <SystemInit+0xec>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4929      	ldr	r1, [pc, #164]	; (800347c <SystemInit+0xec>)
 80033d8:	4b29      	ldr	r3, [pc, #164]	; (8003480 <SystemInit+0xf0>)
 80033da:	4013      	ands	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <SystemInit+0xe8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <SystemInit+0xe8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 030f 	bic.w	r3, r3, #15
 80033f2:	4a21      	ldr	r2, [pc, #132]	; (8003478 <SystemInit+0xe8>)
 80033f4:	f043 0307 	orr.w	r3, r3, #7
 80033f8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <SystemInit+0xec>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <SystemInit+0xec>)
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <SystemInit+0xec>)
 8003408:	2200      	movs	r2, #0
 800340a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <SystemInit+0xec>)
 800340e:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <SystemInit+0xf4>)
 8003410:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <SystemInit+0xec>)
 8003414:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <SystemInit+0xf8>)
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003418:	4b18      	ldr	r3, [pc, #96]	; (800347c <SystemInit+0xec>)
 800341a:	4a1c      	ldr	r2, [pc, #112]	; (800348c <SystemInit+0xfc>)
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <SystemInit+0xec>)
 8003420:	2200      	movs	r2, #0
 8003422:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <SystemInit+0xec>)
 8003426:	4a19      	ldr	r2, [pc, #100]	; (800348c <SystemInit+0xfc>)
 8003428:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <SystemInit+0xec>)
 800342c:	2200      	movs	r2, #0
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <SystemInit+0xec>)
 8003432:	4a16      	ldr	r2, [pc, #88]	; (800348c <SystemInit+0xfc>)
 8003434:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <SystemInit+0xec>)
 8003438:	2200      	movs	r2, #0
 800343a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <SystemInit+0xec>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0e      	ldr	r2, [pc, #56]	; (800347c <SystemInit+0xec>)
 8003442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003446:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <SystemInit+0xec>)
 800344a:	2200      	movs	r2, #0
 800344c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <SystemInit+0x100>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <SystemInit+0x104>)
 8003454:	4013      	ands	r3, r2
 8003456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800345a:	d202      	bcs.n	8003462 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <SystemInit+0x108>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <SystemInit+0x10c>)
 8003464:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000ed00 	.word	0xe000ed00
 8003478:	52002000 	.word	0x52002000
 800347c:	58024400 	.word	0x58024400
 8003480:	eaf6ed7f 	.word	0xeaf6ed7f
 8003484:	02020200 	.word	0x02020200
 8003488:	01ff0000 	.word	0x01ff0000
 800348c:	01010280 	.word	0x01010280
 8003490:	5c001000 	.word	0x5c001000
 8003494:	ffff0000 	.word	0xffff0000
 8003498:	51008108 	.word	0x51008108
 800349c:	52004000 	.word	0x52004000

080034a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b09a      	sub	sp, #104	; 0x68
 80034a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
 80034d0:	615a      	str	r2, [r3, #20]
 80034d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	222c      	movs	r2, #44	; 0x2c
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f013 fc36 	bl	8016d4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034e0:	4b44      	ldr	r3, [pc, #272]	; (80035f4 <MX_TIM1_Init+0x154>)
 80034e2:	4a45      	ldr	r2, [pc, #276]	; (80035f8 <MX_TIM1_Init+0x158>)
 80034e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80034e6:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <MX_TIM1_Init+0x154>)
 80034e8:	2263      	movs	r2, #99	; 0x63
 80034ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ec:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <MX_TIM1_Init+0x154>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80034f2:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <MX_TIM1_Init+0x154>)
 80034f4:	f24f 4223 	movw	r2, #62499	; 0xf423
 80034f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fa:	4b3e      	ldr	r3, [pc, #248]	; (80035f4 <MX_TIM1_Init+0x154>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003500:	4b3c      	ldr	r3, [pc, #240]	; (80035f4 <MX_TIM1_Init+0x154>)
 8003502:	2200      	movs	r2, #0
 8003504:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <MX_TIM1_Init+0x154>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800350c:	4839      	ldr	r0, [pc, #228]	; (80035f4 <MX_TIM1_Init+0x154>)
 800350e:	f00b fbf4 	bl	800ecfa <HAL_TIM_Base_Init>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003518:	f7fe fece 	bl	80022b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800351c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003520:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003522:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003526:	4619      	mov	r1, r3
 8003528:	4832      	ldr	r0, [pc, #200]	; (80035f4 <MX_TIM1_Init+0x154>)
 800352a:	f00c f96f 	bl	800f80c <HAL_TIM_ConfigClockSource>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003534:	f7fe fec0 	bl	80022b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003538:	482e      	ldr	r0, [pc, #184]	; (80035f4 <MX_TIM1_Init+0x154>)
 800353a:	f00b feeb 	bl	800f314 <HAL_TIM_PWM_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003544:	f7fe feb8 	bl	80022b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003548:	2300      	movs	r3, #0
 800354a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800354c:	2300      	movs	r3, #0
 800354e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003554:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003558:	4619      	mov	r1, r3
 800355a:	4826      	ldr	r0, [pc, #152]	; (80035f4 <MX_TIM1_Init+0x154>)
 800355c:	f00c feac 	bl	80102b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003566:	f7fe fea7 	bl	80022b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800356a:	2360      	movs	r3, #96	; 0x60
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800356e:	f240 13df 	movw	r3, #479	; 0x1df
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003574:	2300      	movs	r3, #0
 8003576:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003578:	2300      	movs	r3, #0
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800357c:	2300      	movs	r3, #0
 800357e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003584:	2300      	movs	r3, #0
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800358c:	2200      	movs	r2, #0
 800358e:	4619      	mov	r1, r3
 8003590:	4818      	ldr	r0, [pc, #96]	; (80035f4 <MX_TIM1_Init+0x154>)
 8003592:	f00c f827 	bl	800f5e4 <HAL_TIM_PWM_ConfigChannel>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800359c:	f7fe fe8c 	bl	80022b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80035be:	2300      	movs	r3, #0
 80035c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80035c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4807      	ldr	r0, [pc, #28]	; (80035f4 <MX_TIM1_Init+0x154>)
 80035d6:	f00c fefd 	bl	80103d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80035e0:	f7fe fe6a 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80035e4:	4803      	ldr	r0, [pc, #12]	; (80035f4 <MX_TIM1_Init+0x154>)
 80035e6:	f000 f949 	bl	800387c <HAL_TIM_MspPostInit>

}
 80035ea:	bf00      	nop
 80035ec:	3768      	adds	r7, #104	; 0x68
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	240009e8 	.word	0x240009e8
 80035f8:	40010000 	.word	0x40010000

080035fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08e      	sub	sp, #56	; 0x38
 8003600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003610:	f107 031c 	add.w	r3, r7, #28
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800361c:	463b      	mov	r3, r7
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]
 800362a:	615a      	str	r2, [r3, #20]
 800362c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <MX_TIM2_Init+0xe8>)
 8003630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003634:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <MX_TIM2_Init+0xe8>)
 8003638:	2263      	movs	r2, #99	; 0x63
 800363a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800363c:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <MX_TIM2_Init+0xe8>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8003642:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <MX_TIM2_Init+0xe8>)
 8003644:	f640 4234 	movw	r2, #3124	; 0xc34
 8003648:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <MX_TIM2_Init+0xe8>)
 800364c:	2200      	movs	r2, #0
 800364e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003650:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <MX_TIM2_Init+0xe8>)
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003656:	4823      	ldr	r0, [pc, #140]	; (80036e4 <MX_TIM2_Init+0xe8>)
 8003658:	f00b fb4f 	bl	800ecfa <HAL_TIM_Base_Init>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003662:	f7fe fe29 	bl	80022b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800366c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003670:	4619      	mov	r1, r3
 8003672:	481c      	ldr	r0, [pc, #112]	; (80036e4 <MX_TIM2_Init+0xe8>)
 8003674:	f00c f8ca 	bl	800f80c <HAL_TIM_ConfigClockSource>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800367e:	f7fe fe1b 	bl	80022b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003682:	4818      	ldr	r0, [pc, #96]	; (80036e4 <MX_TIM2_Init+0xe8>)
 8003684:	f00b fe46 	bl	800f314 <HAL_TIM_PWM_Init>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800368e:	f7fe fe13 	bl	80022b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003692:	2320      	movs	r3, #32
 8003694:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003696:	2300      	movs	r3, #0
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800369a:	f107 031c 	add.w	r3, r7, #28
 800369e:	4619      	mov	r1, r3
 80036a0:	4810      	ldr	r0, [pc, #64]	; (80036e4 <MX_TIM2_Init+0xe8>)
 80036a2:	f00c fe09 	bl	80102b8 <HAL_TIMEx_MasterConfigSynchronization>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80036ac:	f7fe fe04 	bl	80022b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036b0:	2360      	movs	r3, #96	; 0x60
 80036b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80036c0:	463b      	mov	r3, r7
 80036c2:	220c      	movs	r2, #12
 80036c4:	4619      	mov	r1, r3
 80036c6:	4807      	ldr	r0, [pc, #28]	; (80036e4 <MX_TIM2_Init+0xe8>)
 80036c8:	f00b ff8c 	bl	800f5e4 <HAL_TIM_PWM_ConfigChannel>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80036d2:	f7fe fdf1 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80036d6:	4803      	ldr	r0, [pc, #12]	; (80036e4 <MX_TIM2_Init+0xe8>)
 80036d8:	f000 f8d0 	bl	800387c <HAL_TIM_MspPostInit>

}
 80036dc:	bf00      	nop
 80036de:	3738      	adds	r7, #56	; 0x38
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	24000a34 	.word	0x24000a34

080036e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ee:	f107 0310 	add.w	r3, r7, #16
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036fc:	1d3b      	adds	r3, r7, #4
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <MX_TIM3_Init+0x94>)
 8003708:	4a1d      	ldr	r2, [pc, #116]	; (8003780 <MX_TIM3_Init+0x98>)
 800370a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <MX_TIM3_Init+0x94>)
 800370e:	22c7      	movs	r2, #199	; 0xc7
 8003710:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <MX_TIM3_Init+0x94>)
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <MX_TIM3_Init+0x94>)
 800371a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800371e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003720:	4b16      	ldr	r3, [pc, #88]	; (800377c <MX_TIM3_Init+0x94>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <MX_TIM3_Init+0x94>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800372c:	4813      	ldr	r0, [pc, #76]	; (800377c <MX_TIM3_Init+0x94>)
 800372e:	f00b fae4 	bl	800ecfa <HAL_TIM_Base_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003738:	f7fe fdbe 	bl	80022b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800373c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003740:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003742:	f107 0310 	add.w	r3, r7, #16
 8003746:	4619      	mov	r1, r3
 8003748:	480c      	ldr	r0, [pc, #48]	; (800377c <MX_TIM3_Init+0x94>)
 800374a:	f00c f85f 	bl	800f80c <HAL_TIM_ConfigClockSource>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003754:	f7fe fdb0 	bl	80022b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003758:	2300      	movs	r3, #0
 800375a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4805      	ldr	r0, [pc, #20]	; (800377c <MX_TIM3_Init+0x94>)
 8003766:	f00c fda7 	bl	80102b8 <HAL_TIMEx_MasterConfigSynchronization>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003770:	f7fe fda2 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003774:	bf00      	nop
 8003776:	3720      	adds	r7, #32
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	24000a80 	.word	0x24000a80
 8003780:	40000400 	.word	0x40000400

08003784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a37      	ldr	r2, [pc, #220]	; (8003870 <HAL_TIM_Base_MspInit+0xec>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d12f      	bne.n	80037f6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003796:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_TIM_Base_MspInit+0xf0>)
 8003798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800379c:	4a35      	ldr	r2, [pc, #212]	; (8003874 <HAL_TIM_Base_MspInit+0xf0>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037a6:	4b33      	ldr	r3, [pc, #204]	; (8003874 <HAL_TIM_Base_MspInit+0xf0>)
 80037a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80037b4:	2200      	movs	r2, #0
 80037b6:	2105      	movs	r1, #5
 80037b8:	2018      	movs	r0, #24
 80037ba:	f002 fb2b 	bl	8005e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80037be:	2018      	movs	r0, #24
 80037c0:	f002 fb42 	bl	8005e48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80037c4:	2200      	movs	r2, #0
 80037c6:	2105      	movs	r1, #5
 80037c8:	2019      	movs	r0, #25
 80037ca:	f002 fb23 	bl	8005e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80037ce:	2019      	movs	r0, #25
 80037d0:	f002 fb3a 	bl	8005e48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80037d4:	2200      	movs	r2, #0
 80037d6:	2105      	movs	r1, #5
 80037d8:	201a      	movs	r0, #26
 80037da:	f002 fb1b 	bl	8005e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80037de:	201a      	movs	r0, #26
 80037e0:	f002 fb32 	bl	8005e48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2105      	movs	r1, #5
 80037e8:	201b      	movs	r0, #27
 80037ea:	f002 fb13 	bl	8005e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80037ee:	201b      	movs	r0, #27
 80037f0:	f002 fb2a 	bl	8005e48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80037f4:	e038      	b.n	8003868 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d117      	bne.n	8003830 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003800:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_TIM_Base_MspInit+0xf0>)
 8003802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003806:	4a1b      	ldr	r2, [pc, #108]	; (8003874 <HAL_TIM_Base_MspInit+0xf0>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_TIM_Base_MspInit+0xf0>)
 8003812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	2105      	movs	r1, #5
 8003822:	201c      	movs	r0, #28
 8003824:	f002 faf6 	bl	8005e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003828:	201c      	movs	r0, #28
 800382a:	f002 fb0d 	bl	8005e48 <HAL_NVIC_EnableIRQ>
}
 800382e:	e01b      	b.n	8003868 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a10      	ldr	r2, [pc, #64]	; (8003878 <HAL_TIM_Base_MspInit+0xf4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d116      	bne.n	8003868 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_TIM_Base_MspInit+0xf0>)
 800383c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003840:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <HAL_TIM_Base_MspInit+0xf0>)
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_TIM_Base_MspInit+0xf0>)
 800384c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003858:	2200      	movs	r2, #0
 800385a:	2105      	movs	r1, #5
 800385c:	201d      	movs	r0, #29
 800385e:	f002 fad9 	bl	8005e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003862:	201d      	movs	r0, #29
 8003864:	f002 faf0 	bl	8005e48 <HAL_NVIC_EnableIRQ>
}
 8003868:	bf00      	nop
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40010000 	.word	0x40010000
 8003874:	58024400 	.word	0x58024400
 8003878:	40000400 	.word	0x40000400

0800387c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	; 0x28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	f107 0314 	add.w	r3, r7, #20
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a26      	ldr	r2, [pc, #152]	; (8003934 <HAL_TIM_MspPostInit+0xb8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d120      	bne.n	80038e0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <HAL_TIM_MspPostInit+0xbc>)
 80038a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <HAL_TIM_MspPostInit+0xbc>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ae:	4b22      	ldr	r3, [pc, #136]	; (8003938 <HAL_TIM_MspPostInit+0xbc>)
 80038b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d2:	f107 0314 	add.w	r3, r7, #20
 80038d6:	4619      	mov	r1, r3
 80038d8:	4818      	ldr	r0, [pc, #96]	; (800393c <HAL_TIM_MspPostInit+0xc0>)
 80038da:	f005 fd11 	bl	8009300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80038de:	e024      	b.n	800392a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d11f      	bne.n	800392a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_TIM_MspPostInit+0xbc>)
 80038ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f0:	4a11      	ldr	r2, [pc, #68]	; (8003938 <HAL_TIM_MspPostInit+0xbc>)
 80038f2:	f043 0302 	orr.w	r3, r3, #2
 80038f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038fa:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <HAL_TIM_MspPostInit+0xbc>)
 80038fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800390c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390e:	2302      	movs	r3, #2
 8003910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003916:	2300      	movs	r3, #0
 8003918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800391a:	2301      	movs	r3, #1
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391e:	f107 0314 	add.w	r3, r7, #20
 8003922:	4619      	mov	r1, r3
 8003924:	4806      	ldr	r0, [pc, #24]	; (8003940 <HAL_TIM_MspPostInit+0xc4>)
 8003926:	f005 fceb 	bl	8009300 <HAL_GPIO_Init>
}
 800392a:	bf00      	nop
 800392c:	3728      	adds	r7, #40	; 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40010000 	.word	0x40010000
 8003938:	58024400 	.word	0x58024400
 800393c:	58020000 	.word	0x58020000
 8003940:	58020400 	.word	0x58020400

08003944 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8003950:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <get_uptime+0x88>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8003956:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <get_uptime+0x8c>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <get_uptime+0x88>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	429a      	cmp	r2, r3
 8003964:	d005      	beq.n	8003972 <get_uptime+0x2e>
		ms = uptime_millis;
 8003966:	4b19      	ldr	r3, [pc, #100]	; (80039cc <get_uptime+0x88>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 800396c:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <get_uptime+0x8c>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003978:	fb03 f202 	mul.w	r2, r3, r2
 800397c:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <get_uptime+0x8c>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	3301      	adds	r3, #1
 8003982:	4914      	ldr	r1, [pc, #80]	; (80039d4 <get_uptime+0x90>)
 8003984:	fba1 1303 	umull	r1, r3, r1, r3
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	6939      	ldr	r1, [r7, #16]
 800398c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	0e1b      	lsrs	r3, r3, #24
 8003998:	b2da      	uxtb	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	0c1a      	lsrs	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3301      	adds	r3, #1
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	0a1a      	lsrs	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3302      	adds	r3, #2
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3303      	adds	r3, #3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	24000818 	.word	0x24000818
 80039d0:	e000e010 	.word	0xe000e010
 80039d4:	10624dd3 	.word	0x10624dd3

080039d8 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	; 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80039e0:	f107 0310 	add.w	r3, r7, #16
 80039e4:	2200      	movs	r2, #0
 80039e6:	4619      	mov	r1, r3
 80039e8:	4821      	ldr	r0, [pc, #132]	; (8003a70 <get_timestamp+0x98>)
 80039ea:	f00a fb33 	bl	800e054 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80039ee:	f107 030c 	add.w	r3, r7, #12
 80039f2:	2200      	movs	r2, #0
 80039f4:	4619      	mov	r1, r3
 80039f6:	481e      	ldr	r0, [pc, #120]	; (8003a70 <get_timestamp+0x98>)
 80039f8:	f00a fc10 	bl	800e21c <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2264      	movs	r2, #100	; 0x64
 8003a00:	fb03 f202 	mul.w	r2, r3, r2
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <get_timestamp+0x9c>)
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3301      	adds	r3, #1
 8003a14:	7b7a      	ldrb	r2, [r7, #13]
 8003a16:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	7bba      	ldrb	r2, [r7, #14]
 8003a1e:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3303      	adds	r3, #3
 8003a24:	7c3a      	ldrb	r2, [r7, #16]
 8003a26:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	7c7a      	ldrb	r2, [r7, #17]
 8003a2e:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3305      	adds	r3, #5
 8003a34:	7cba      	ldrb	r2, [r7, #18]
 8003a36:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	0e1a      	lsrs	r2, r3, #24
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3306      	adds	r3, #6
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	0c1a      	lsrs	r2, r3, #16
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3307      	adds	r3, #7
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	0a1a      	lsrs	r2, r3, #8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3308      	adds	r3, #8
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3309      	adds	r3, #9
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]
}
 8003a66:	bf00      	nop
 8003a68:	3728      	adds	r7, #40	; 0x28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	24000828 	.word	0x24000828
 8003a74:	000f4240 	.word	0x000f4240

08003a78 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	; 0x30
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	789b      	ldrb	r3, [r3, #2]
 8003a8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	78db      	ldrb	r3, [r3, #3]
 8003a94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	791b      	ldrb	r3, [r3, #4]
 8003a9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	795b      	ldrb	r3, [r3, #5]
 8003aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	799b      	ldrb	r3, [r3, #6]
 8003aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3307      	adds	r3, #7
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	b21a      	sxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3308      	adds	r3, #8
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	b21b      	sxth	r3, r3
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	b21b      	sxth	r3, r3
 8003ac6:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8003ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8003ad0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003ad4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8003ad8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003adc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8003ae0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ae4:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8003ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aea:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8003aec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003af0:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8003af2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003af4:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8003af6:	f107 0320 	add.w	r3, r7, #32
 8003afa:	2200      	movs	r2, #0
 8003afc:	4619      	mov	r1, r3
 8003afe:	480b      	ldr	r0, [pc, #44]	; (8003b2c <calibrateRTC+0xb4>)
 8003b00:	f00a fb04 	bl	800e10c <HAL_RTC_SetDate>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8003b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <calibrateRTC+0x9e>
		Error_Handler();
 8003b12:	f7fe fbd1 	bl	80022b8 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8003b16:	f107 030c 	add.w	r3, r7, #12
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4803      	ldr	r0, [pc, #12]	; (8003b2c <calibrateRTC+0xb4>)
 8003b20:	f000 f806 	bl	8003b30 <RTC_SetTime>
}
 8003b24:	bf00      	nop
 8003b26:	3730      	adds	r7, #48	; 0x30
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	24000828 	.word	0x24000828

08003b30 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <RTC_SetTime+0x1a>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e051      	b.n	8003bee <RTC_SetTime+0xbe>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2202      	movs	r2, #2
 8003b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	22ca      	movs	r2, #202	; 0xca
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2253      	movs	r2, #83	; 0x53
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f00a fbc8 	bl	800e300 <RTC_EnterInitMode>
 8003b70:	4603      	mov	r3, r0
 8003b72:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d129      	bne.n	8003bce <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f00a fc2d 	bl	800e3e4 <RTC_ByteToBcd2>
 8003b8a:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8003b8c:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	785b      	ldrb	r3, [r3, #1]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f00a fc26 	bl	800e3e4 <RTC_ByteToBcd2>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	789b      	ldrb	r3, [r3, #2]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f00a fc1e 	bl	800e3e4 <RTC_ByteToBcd2>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	78db      	ldrb	r3, [r3, #3]
 8003bb2:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	6939      	ldr	r1, [r7, #16]
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <RTC_SetTime+0xc8>)
 8003bc0:	400b      	ands	r3, r1
 8003bc2:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f00a fbcf 	bl	800e368 <RTC_ExitInitMode>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	22ff      	movs	r2, #255	; 0xff
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d103      	bne.n	8003be4 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8003bec:	7dfb      	ldrb	r3, [r7, #23]

}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd90      	pop	{r4, r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	007f7f7f 	.word	0x007f7f7f

08003bfc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c00:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c02:	4a31      	ldr	r2, [pc, #196]	; (8003cc8 <MX_USART1_UART_Init+0xcc>)
 8003c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003c06:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c08:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c0e:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c14:	4b2b      	ldr	r3, [pc, #172]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c1a:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c20:	4b28      	ldr	r3, [pc, #160]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c22:	220c      	movs	r2, #12
 8003c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c26:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c38:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c3e:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c44:	481f      	ldr	r0, [pc, #124]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c46:	f00c fc61 	bl	801050c <HAL_UART_Init>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003c50:	f7fe fb32 	bl	80022b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c54:	2100      	movs	r1, #0
 8003c56:	481b      	ldr	r0, [pc, #108]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c58:	f00f fb01 	bl	801325e <HAL_UARTEx_SetTxFifoThreshold>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003c62:	f7fe fb29 	bl	80022b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c66:	2100      	movs	r1, #0
 8003c68:	4816      	ldr	r0, [pc, #88]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c6a:	f00f fb36 	bl	80132da <HAL_UARTEx_SetRxFifoThreshold>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003c74:	f7fe fb20 	bl	80022b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003c78:	4812      	ldr	r0, [pc, #72]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c7a:	f00f fab7 	bl	80131ec <HAL_UARTEx_DisableFifoMode>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003c84:	f7fe fb18 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8003c88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c8c:	480d      	ldr	r0, [pc, #52]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c8e:	f00f fb24 	bl	80132da <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8003c92:	480c      	ldr	r0, [pc, #48]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c94:	f00f fa6f 	bl	8013176 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8003c98:	480a      	ldr	r0, [pc, #40]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003c9a:	f00f fa39 	bl	8013110 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cac:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <MX_USART1_UART_Init+0xc8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003cbc:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	24000acc 	.word	0x24000acc
 8003cc8:	40011000 	.word	0x40011000

08003ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b0ba      	sub	sp, #232	; 0xe8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ce4:	f107 0310 	add.w	r3, r7, #16
 8003ce8:	22c0      	movs	r2, #192	; 0xc0
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f013 f82d 	bl	8016d4c <memset>
  if(uartHandle->Instance==USART1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a41      	ldr	r2, [pc, #260]	; (8003dfc <HAL_UART_MspInit+0x130>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d17b      	bne.n	8003df4 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003cfc:	f04f 0201 	mov.w	r2, #1
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003d08:	2318      	movs	r3, #24
 8003d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d0e:	f107 0310 	add.w	r3, r7, #16
 8003d12:	4618      	mov	r0, r3
 8003d14:	f007 fb80 	bl	800b418 <HAL_RCCEx_PeriphCLKConfig>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003d1e:	f7fe facb 	bl	80022b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <HAL_UART_MspInit+0x134>)
 8003d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d28:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <HAL_UART_MspInit+0x134>)
 8003d2a:	f043 0310 	orr.w	r3, r3, #16
 8003d2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d32:	4b33      	ldr	r3, [pc, #204]	; (8003e00 <HAL_UART_MspInit+0x134>)
 8003d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d40:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <HAL_UART_MspInit+0x134>)
 8003d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d46:	4a2e      	ldr	r2, [pc, #184]	; (8003e00 <HAL_UART_MspInit+0x134>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <HAL_UART_MspInit+0x134>)
 8003d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d66:	2302      	movs	r3, #2
 8003d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d78:	2307      	movs	r3, #7
 8003d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d82:	4619      	mov	r1, r3
 8003d84:	481f      	ldr	r0, [pc, #124]	; (8003e04 <HAL_UART_MspInit+0x138>)
 8003d86:	f005 fabb 	bl	8009300 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003d8a:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <HAL_UART_MspInit+0x140>)
 8003d8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003d92:	222a      	movs	r2, #42	; 0x2a
 8003d94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d96:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003d98:	2240      	movs	r2, #64	; 0x40
 8003d9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003da2:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003da8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003daa:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003db0:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dbc:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dc2:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003dc8:	480f      	ldr	r0, [pc, #60]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003dca:	f002 fc51 	bl	8006670 <HAL_DMA_Init>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003dd4:	f7fe fa70 	bl	80022b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003ddc:	67da      	str	r2, [r3, #124]	; 0x7c
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <HAL_UART_MspInit+0x13c>)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003de4:	2200      	movs	r2, #0
 8003de6:	2105      	movs	r1, #5
 8003de8:	2025      	movs	r0, #37	; 0x25
 8003dea:	f002 f813 	bl	8005e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003dee:	2025      	movs	r0, #37	; 0x25
 8003df0:	f002 f82a 	bl	8005e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003df4:	bf00      	nop
 8003df6:	37e8      	adds	r7, #232	; 0xe8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40011000 	.word	0x40011000
 8003e00:	58024400 	.word	0x58024400
 8003e04:	58020000 	.word	0x58020000
 8003e08:	24000b60 	.word	0x24000b60
 8003e0c:	40020040 	.word	0x40020040

08003e10 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003e1a:	4bc2      	ldr	r3, [pc, #776]	; (8004124 <voltage_monitor_init+0x314>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003e20:	4bc0      	ldr	r3, [pc, #768]	; (8004124 <voltage_monitor_init+0x314>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003e26:	4bbf      	ldr	r3, [pc, #764]	; (8004124 <voltage_monitor_init+0x314>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003e2c:	4bbd      	ldr	r3, [pc, #756]	; (8004124 <voltage_monitor_init+0x314>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e32:	4bbc      	ldr	r3, [pc, #752]	; (8004124 <voltage_monitor_init+0x314>)
 8003e34:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e38:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003e3a:	4bba      	ldr	r3, [pc, #744]	; (8004124 <voltage_monitor_init+0x314>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003e40:	4bb8      	ldr	r3, [pc, #736]	; (8004124 <voltage_monitor_init+0x314>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003e46:	4bb7      	ldr	r3, [pc, #732]	; (8004124 <voltage_monitor_init+0x314>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003e4c:	4bb5      	ldr	r3, [pc, #724]	; (8004124 <voltage_monitor_init+0x314>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003e52:	4bb4      	ldr	r3, [pc, #720]	; (8004124 <voltage_monitor_init+0x314>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e58:	4bb2      	ldr	r3, [pc, #712]	; (8004124 <voltage_monitor_init+0x314>)
 8003e5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e5e:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003e60:	4bb0      	ldr	r3, [pc, #704]	; (8004124 <voltage_monitor_init+0x314>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003e66:	4baf      	ldr	r3, [pc, #700]	; (8004124 <voltage_monitor_init+0x314>)
 8003e68:	2202      	movs	r2, #2
 8003e6a:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003e6c:	4bad      	ldr	r3, [pc, #692]	; (8004124 <voltage_monitor_init+0x314>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003e72:	4bac      	ldr	r3, [pc, #688]	; (8004124 <voltage_monitor_init+0x314>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003e78:	4baa      	ldr	r3, [pc, #680]	; (8004124 <voltage_monitor_init+0x314>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e7e:	4ba9      	ldr	r3, [pc, #676]	; (8004124 <voltage_monitor_init+0x314>)
 8003e80:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e84:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003e86:	4ba7      	ldr	r3, [pc, #668]	; (8004124 <voltage_monitor_init+0x314>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003e8c:	4ba5      	ldr	r3, [pc, #660]	; (8004124 <voltage_monitor_init+0x314>)
 8003e8e:	2203      	movs	r2, #3
 8003e90:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003e92:	4ba4      	ldr	r3, [pc, #656]	; (8004124 <voltage_monitor_init+0x314>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003e98:	4ba2      	ldr	r3, [pc, #648]	; (8004124 <voltage_monitor_init+0x314>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003ea0:	4ba0      	ldr	r3, [pc, #640]	; (8004124 <voltage_monitor_init+0x314>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003ea6:	4b9f      	ldr	r3, [pc, #636]	; (8004124 <voltage_monitor_init+0x314>)
 8003ea8:	f242 7210 	movw	r2, #10000	; 0x2710
 8003eac:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003eae:	4b9d      	ldr	r3, [pc, #628]	; (8004124 <voltage_monitor_init+0x314>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003eb4:	4b9b      	ldr	r3, [pc, #620]	; (8004124 <voltage_monitor_init+0x314>)
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003ebc:	4b99      	ldr	r3, [pc, #612]	; (8004124 <voltage_monitor_init+0x314>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003ec4:	4b97      	ldr	r3, [pc, #604]	; (8004124 <voltage_monitor_init+0x314>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003ecc:	4b95      	ldr	r3, [pc, #596]	; (8004124 <voltage_monitor_init+0x314>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003ed2:	4b94      	ldr	r3, [pc, #592]	; (8004124 <voltage_monitor_init+0x314>)
 8003ed4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ed8:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003eda:	4b92      	ldr	r3, [pc, #584]	; (8004124 <voltage_monitor_init+0x314>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003ee0:	4b90      	ldr	r3, [pc, #576]	; (8004124 <voltage_monitor_init+0x314>)
 8003ee2:	2205      	movs	r2, #5
 8003ee4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003ee8:	4b8e      	ldr	r3, [pc, #568]	; (8004124 <voltage_monitor_init+0x314>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003ef0:	4b8c      	ldr	r3, [pc, #560]	; (8004124 <voltage_monitor_init+0x314>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003ef8:	4b8a      	ldr	r3, [pc, #552]	; (8004124 <voltage_monitor_init+0x314>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003efe:	4b89      	ldr	r3, [pc, #548]	; (8004124 <voltage_monitor_init+0x314>)
 8003f00:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f04:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003f06:	4b87      	ldr	r3, [pc, #540]	; (8004124 <voltage_monitor_init+0x314>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003f0c:	4b85      	ldr	r3, [pc, #532]	; (8004124 <voltage_monitor_init+0x314>)
 8003f0e:	2206      	movs	r2, #6
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003f14:	4b83      	ldr	r3, [pc, #524]	; (8004124 <voltage_monitor_init+0x314>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003f1c:	4b81      	ldr	r3, [pc, #516]	; (8004124 <voltage_monitor_init+0x314>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003f24:	4b7f      	ldr	r3, [pc, #508]	; (8004124 <voltage_monitor_init+0x314>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003f2c:	4b7d      	ldr	r3, [pc, #500]	; (8004124 <voltage_monitor_init+0x314>)
 8003f2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f32:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003f36:	4b7b      	ldr	r3, [pc, #492]	; (8004124 <voltage_monitor_init+0x314>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003f3e:	4b79      	ldr	r3, [pc, #484]	; (8004124 <voltage_monitor_init+0x314>)
 8003f40:	2207      	movs	r2, #7
 8003f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003f46:	4b77      	ldr	r3, [pc, #476]	; (8004124 <voltage_monitor_init+0x314>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003f4e:	4b75      	ldr	r3, [pc, #468]	; (8004124 <voltage_monitor_init+0x314>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003f56:	4b73      	ldr	r3, [pc, #460]	; (8004124 <voltage_monitor_init+0x314>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003f5e:	4b71      	ldr	r3, [pc, #452]	; (8004124 <voltage_monitor_init+0x314>)
 8003f60:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003f68:	4b6e      	ldr	r3, [pc, #440]	; (8004124 <voltage_monitor_init+0x314>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003f70:	4b6c      	ldr	r3, [pc, #432]	; (8004124 <voltage_monitor_init+0x314>)
 8003f72:	2208      	movs	r2, #8
 8003f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003f78:	4b6a      	ldr	r3, [pc, #424]	; (8004124 <voltage_monitor_init+0x314>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003f80:	4b68      	ldr	r3, [pc, #416]	; (8004124 <voltage_monitor_init+0x314>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003f88:	4b66      	ldr	r3, [pc, #408]	; (8004124 <voltage_monitor_init+0x314>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003f90:	4b64      	ldr	r3, [pc, #400]	; (8004124 <voltage_monitor_init+0x314>)
 8003f92:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003f96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003f9a:	4b62      	ldr	r3, [pc, #392]	; (8004124 <voltage_monitor_init+0x314>)
 8003f9c:	f640 3283 	movw	r2, #2947	; 0xb83
 8003fa0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003fa4:	4b5f      	ldr	r3, [pc, #380]	; (8004124 <voltage_monitor_init+0x314>)
 8003fa6:	2209      	movs	r2, #9
 8003fa8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003fac:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <voltage_monitor_init+0x314>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003fb4:	4b5b      	ldr	r3, [pc, #364]	; (8004124 <voltage_monitor_init+0x314>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003fbc:	4b59      	ldr	r3, [pc, #356]	; (8004124 <voltage_monitor_init+0x314>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003fc4:	4b57      	ldr	r3, [pc, #348]	; (8004124 <voltage_monitor_init+0x314>)
 8003fc6:	f640 7245 	movw	r2, #3909	; 0xf45
 8003fca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003fce:	4b55      	ldr	r3, [pc, #340]	; (8004124 <voltage_monitor_init+0x314>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003fd6:	4b53      	ldr	r3, [pc, #332]	; (8004124 <voltage_monitor_init+0x314>)
 8003fd8:	220a      	movs	r2, #10
 8003fda:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003fde:	4b51      	ldr	r3, [pc, #324]	; (8004124 <voltage_monitor_init+0x314>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003fe6:	4b4f      	ldr	r3, [pc, #316]	; (8004124 <voltage_monitor_init+0x314>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003fee:	4b4d      	ldr	r3, [pc, #308]	; (8004124 <voltage_monitor_init+0x314>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003ff6:	4b4b      	ldr	r3, [pc, #300]	; (8004124 <voltage_monitor_init+0x314>)
 8003ff8:	f640 7245 	movw	r2, #3909	; 0xf45
 8003ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8004000:	4b48      	ldr	r3, [pc, #288]	; (8004124 <voltage_monitor_init+0x314>)
 8004002:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8004006:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 800400a:	4b46      	ldr	r3, [pc, #280]	; (8004124 <voltage_monitor_init+0x314>)
 800400c:	220b      	movs	r2, #11
 800400e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8004012:	4b44      	ldr	r3, [pc, #272]	; (8004124 <voltage_monitor_init+0x314>)
 8004014:	2200      	movs	r2, #0
 8004016:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 800401a:	4b42      	ldr	r3, [pc, #264]	; (8004124 <voltage_monitor_init+0x314>)
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8004022:	4b40      	ldr	r3, [pc, #256]	; (8004124 <voltage_monitor_init+0x314>)
 8004024:	2200      	movs	r2, #0
 8004026:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 800402a:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <voltage_monitor_init+0x314>)
 800402c:	f640 72fb 	movw	r2, #4091	; 0xffb
 8004030:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8004034:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <voltage_monitor_init+0x314>)
 8004036:	f640 6276 	movw	r2, #3702	; 0xe76
 800403a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 800403e:	4b39      	ldr	r3, [pc, #228]	; (8004124 <voltage_monitor_init+0x314>)
 8004040:	220c      	movs	r2, #12
 8004042:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <voltage_monitor_init+0x314>)
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 800404e:	4b35      	ldr	r3, [pc, #212]	; (8004124 <voltage_monitor_init+0x314>)
 8004050:	2200      	movs	r2, #0
 8004052:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8004056:	4b33      	ldr	r3, [pc, #204]	; (8004124 <voltage_monitor_init+0x314>)
 8004058:	2200      	movs	r2, #0
 800405a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 800405e:	4b31      	ldr	r3, [pc, #196]	; (8004124 <voltage_monitor_init+0x314>)
 8004060:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004064:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8004068:	4b2e      	ldr	r3, [pc, #184]	; (8004124 <voltage_monitor_init+0x314>)
 800406a:	2200      	movs	r2, #0
 800406c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8004070:	4b2c      	ldr	r3, [pc, #176]	; (8004124 <voltage_monitor_init+0x314>)
 8004072:	220d      	movs	r2, #13
 8004074:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8004078:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <voltage_monitor_init+0x314>)
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8004080:	4b28      	ldr	r3, [pc, #160]	; (8004124 <voltage_monitor_init+0x314>)
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8004088:	4b26      	ldr	r3, [pc, #152]	; (8004124 <voltage_monitor_init+0x314>)
 800408a:	2200      	movs	r2, #0
 800408c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8004090:	4b24      	ldr	r3, [pc, #144]	; (8004124 <voltage_monitor_init+0x314>)
 8004092:	f640 7238 	movw	r2, #3896	; 0xf38
 8004096:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <voltage_monitor_init+0x314>)
 800409c:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80040a0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80040a4:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <voltage_monitor_init+0x314>)
 80040a6:	220e      	movs	r2, #14
 80040a8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 80040ac:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <voltage_monitor_init+0x314>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <voltage_monitor_init+0x314>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <voltage_monitor_init+0x314>)
 80040be:	2200      	movs	r2, #0
 80040c0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 80040c4:	4b17      	ldr	r3, [pc, #92]	; (8004124 <voltage_monitor_init+0x314>)
 80040c6:	f640 7245 	movw	r2, #3909	; 0xf45
 80040ca:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <voltage_monitor_init+0x314>)
 80040d0:	f640 52d1 	movw	r2, #3537	; 0xdd1
 80040d4:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 80040d8:	4b12      	ldr	r3, [pc, #72]	; (8004124 <voltage_monitor_init+0x314>)
 80040da:	220f      	movs	r2, #15
 80040dc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <voltage_monitor_init+0x314>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 80040e8:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <voltage_monitor_init+0x314>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <voltage_monitor_init+0x314>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <voltage_monitor_init+0x314>)
 80040fa:	f241 0264 	movw	r2, #4196	; 0x1064
 80040fe:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8004102:	4b08      	ldr	r3, [pc, #32]	; (8004124 <voltage_monitor_init+0x314>)
 8004104:	2200      	movs	r2, #0
 8004106:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <voltage_monitor_init+0x314>)
 800410c:	2210      	movs	r2, #16
 800410e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8004112:	4b04      	ldr	r3, [pc, #16]	; (8004124 <voltage_monitor_init+0x314>)
 8004114:	2200      	movs	r2, #0
 8004116:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 800411a:	4b02      	ldr	r3, [pc, #8]	; (8004124 <voltage_monitor_init+0x314>)
 800411c:	2200      	movs	r2, #0
 800411e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8004122:	e001      	b.n	8004128 <voltage_monitor_init+0x318>
 8004124:	24000bd8 	.word	0x24000bd8
	rail_monitor[RAIL_n800v].data = 0;
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <voltage_monitor_init+0x378>)
 800412a:	2200      	movs	r2, #0
 800412c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8004130:	4b15      	ldr	r3, [pc, #84]	; (8004188 <voltage_monitor_init+0x378>)
 8004132:	f640 5208 	movw	r2, #3336	; 0xd08
 8004136:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <voltage_monitor_init+0x378>)
 800413c:	f640 32ca 	movw	r2, #3018	; 0xbca
 8004140:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8004144:	4b10      	ldr	r3, [pc, #64]	; (8004188 <voltage_monitor_init+0x378>)
 8004146:	2211      	movs	r2, #17
 8004148:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 800414c:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <voltage_monitor_init+0x378>)
 800414e:	2200      	movs	r2, #0
 8004150:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <voltage_monitor_init+0x378>)
 8004156:	2201      	movs	r2, #1
 8004158:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <voltage_monitor_init+0x378>)
 800415e:	2200      	movs	r2, #0
 8004160:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <voltage_monitor_init+0x378>)
 8004166:	f242 7210 	movw	r2, #10000	; 0x2710
 800416a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <voltage_monitor_init+0x378>)
 8004170:	2200      	movs	r2, #0
 8004172:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	71fb      	strb	r3, [r7, #7]

	return status;
 800417a:	79fb      	ldrb	r3, [r7, #7]
}
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	24000bd8 	.word	0x24000bd8

0800418c <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	460a      	mov	r2, r1
 8004196:	71fb      	strb	r3, [r7, #7]
 8004198:	4613      	mov	r3, r2
 800419a:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 80041a0:	79fa      	ldrb	r2, [r7, #7]
 80041a2:	4909      	ldr	r1, [pc, #36]	; (80041c8 <set_rail_monitor_enable+0x3c>)
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	440b      	add	r3, r1
 80041ae:	3302      	adds	r3, #2
 80041b0:	79ba      	ldrb	r2, [r7, #6]
 80041b2:	701a      	strb	r2, [r3, #0]
	status = 1;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]

	return status;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	24000bd8 	.word	0x24000bd8

080041cc <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
	return rail_monitor;
 80041d0:	4b02      	ldr	r3, [pc, #8]	; (80041dc <get_rail_monitor+0x10>)
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	24000bd8 	.word	0x24000bd8

080041e0 <set_rail_monitor>:

uint8_t set_rail_monitor() {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
	uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 80041ea:	2014      	movs	r0, #20
 80041ec:	f012 fd90 	bl	8016d10 <malloc>
 80041f0:	4603      	mov	r3, r0
 80041f2:	60bb      	str	r3, [r7, #8]
	uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 80041f4:	2008      	movs	r0, #8
 80041f6:	f012 fd8b 	bl	8016d10 <malloc>
 80041fa:	4603      	mov	r3, r0
 80041fc:	607b      	str	r3, [r7, #4]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80041fe:	2008      	movs	r0, #8
 8004200:	f012 fd86 	bl	8016d10 <malloc>
 8004204:	4603      	mov	r3, r0
 8004206:	603b      	str	r3, [r7, #0]

	sample_hk_i2c(hk_i2c);
 8004208:	6838      	ldr	r0, [r7, #0]
 800420a:	f7fe fc7f 	bl	8002b0c <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 800420e:	68b8      	ldr	r0, [r7, #8]
 8004210:	f7fe fcac 	bl	8002b6c <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fe fcfb 	bl	8002c10 <sample_hk_adc3>

	rail_monitor[RAIL_vsense].data = hk_adc3[1];
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	885a      	ldrh	r2, [r3, #2]
 800421e:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <set_rail_monitor+0x118>)
 8004220:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vrefint].data = hk_adc3[0];
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	881a      	ldrh	r2, [r3, #0]
 8004226:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <set_rail_monitor+0x118>)
 8004228:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_TEMP1].data = hk_i2c[0];
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004230:	b29a      	uxth	r2, r3
 8004232:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <set_rail_monitor+0x118>)
 8004234:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP2].data = hk_i2c[1];
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	3302      	adds	r3, #2
 800423a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800423e:	b29a      	uxth	r2, r3
 8004240:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <set_rail_monitor+0x118>)
 8004242:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP3].data = hk_i2c[2];
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800424c:	b29a      	uxth	r2, r3
 800424e:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <set_rail_monitor+0x118>)
 8004250:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP4].data = hk_i2c[3];
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	3306      	adds	r3, #6
 8004256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800425a:	b29a      	uxth	r2, r3
 800425c:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <set_rail_monitor+0x118>)
 800425e:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_busvmon].data = hk_adc1[0];
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	881a      	ldrh	r2, [r3, #0]
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <set_rail_monitor+0x118>)
 8004266:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busimon].data = hk_adc1[1];
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	885a      	ldrh	r2, [r3, #2]
 800426e:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <set_rail_monitor+0x118>)
 8004270:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_2v5].data = hk_adc1[2];
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	889a      	ldrh	r2, [r3, #4]
 8004278:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <set_rail_monitor+0x118>)
 800427a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_3v3].data = hk_adc3[3];
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	88da      	ldrh	r2, [r3, #6]
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <set_rail_monitor+0x118>)
 8004284:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_5v].data = hk_adc1[6];
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	899a      	ldrh	r2, [r3, #12]
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <set_rail_monitor+0x118>)
 800428e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_n3v3].data = hk_adc1[3];
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	88da      	ldrh	r2, [r3, #6]
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <set_rail_monitor+0x118>)
 8004298:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n5v].data = hk_adc3[2];
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	889a      	ldrh	r2, [r3, #4]
 80042a0:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <set_rail_monitor+0x118>)
 80042a2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_15v].data = hk_adc1[7];
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	89da      	ldrh	r2, [r3, #14]
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <set_rail_monitor+0x118>)
 80042ac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_5vref].data = hk_adc1[8];
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	8a1a      	ldrh	r2, [r3, #16]
 80042b4:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <set_rail_monitor+0x118>)
 80042b6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_n200v].data = hk_adc1[4];
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	891a      	ldrh	r2, [r3, #8]
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <set_rail_monitor+0x118>)
 80042c0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n800v].data = hk_adc1[5];
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	895a      	ldrh	r2, [r3, #10]
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <set_rail_monitor+0x118>)
 80042ca:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_TMP1].data = hk_adc1[9];
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	8a5a      	ldrh	r2, [r3, #18]
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <set_rail_monitor+0x118>)
 80042d4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	free(hk_adc1);
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f012 fd21 	bl	8016d20 <free>
	free(hk_adc3);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f012 fd1e 	bl	8016d20 <free>
	free(hk_i2c);
 80042e4:	6838      	ldr	r0, [r7, #0]
 80042e6:	f012 fd1b 	bl	8016d20 <free>

	status = 1;
 80042ea:	2301      	movs	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]

	return status;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	24000bd8 	.word	0x24000bd8

080042fc <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 800430a:	89fb      	ldrh	r3, [r7, #14]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	429a      	cmp	r2, r3
 8004310:	db05      	blt.n	800431e <in_range+0x22>
 8004312:	89fb      	ldrh	r3, [r7, #14]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	429a      	cmp	r2, r3
 8004318:	dc01      	bgt.n	800431e <in_range+0x22>
		return 1;
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <in_range+0x24>
	}
	return 0;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800432c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004364 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004330:	f7ff f82e 	bl	8003390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004334:	480c      	ldr	r0, [pc, #48]	; (8004368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004336:	490d      	ldr	r1, [pc, #52]	; (800436c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004338:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800433a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800433c:	e002      	b.n	8004344 <LoopCopyDataInit>

0800433e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004342:	3304      	adds	r3, #4

08004344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004348:	d3f9      	bcc.n	800433e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800434a:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800434c:	4c0a      	ldr	r4, [pc, #40]	; (8004378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800434e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004350:	e001      	b.n	8004356 <LoopFillZerobss>

08004352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004354:	3204      	adds	r2, #4

08004356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004358:	d3fb      	bcc.n	8004352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800435a:	f012 fcb5 	bl	8016cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800435e:	f7fd fdbd 	bl	8001edc <main>
  bx  lr
 8004362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004364:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004368:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800436c:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8004370:	08017c4c 	.word	0x08017c4c
  ldr r2, =_sbss
 8004374:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8004378:	240055f0 	.word	0x240055f0

0800437c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800437c:	e7fe      	b.n	800437c <ADC3_IRQHandler>
	...

08004380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004386:	2003      	movs	r0, #3
 8004388:	f001 fd39 	bl	8005dfe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800438c:	f006 fe2c 	bl	800afe8 <HAL_RCC_GetSysClockFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <HAL_Init+0x68>)
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	4913      	ldr	r1, [pc, #76]	; (80043ec <HAL_Init+0x6c>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
 80043a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <HAL_Init+0x68>)
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <HAL_Init+0x6c>)
 80043b4:	5cd3      	ldrb	r3, [r2, r3]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
 80043c0:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <HAL_Init+0x70>)
 80043c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043c4:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <HAL_Init+0x74>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043ca:	2005      	movs	r0, #5
 80043cc:	f7fe fe10 	bl	8002ff0 <HAL_InitTick>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e002      	b.n	80043e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80043da:	f7fe fdeb 	bl	8002fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	58024400 	.word	0x58024400
 80043ec:	08017b98 	.word	0x08017b98
 80043f0:	2400008c 	.word	0x2400008c
 80043f4:	24000088 	.word	0x24000088

080043f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_IncTick+0x20>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_IncTick+0x24>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4413      	add	r3, r2
 8004408:	4a04      	ldr	r2, [pc, #16]	; (800441c <HAL_IncTick+0x24>)
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	24000094 	.word	0x24000094
 800441c:	24000c8c 	.word	0x24000c8c

08004420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return uwTick;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_GetTick+0x14>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	24000c8c 	.word	0x24000c8c

08004438 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_GetREVID+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	0c1b      	lsrs	r3, r3, #16
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	5c001000 	.word	0x5c001000

08004450 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800445a:	4b07      	ldr	r3, [pc, #28]	; (8004478 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	43db      	mvns	r3, r3
 8004462:	401a      	ands	r2, r3
 8004464:	4904      	ldr	r1, [pc, #16]	; (8004478 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	58000400 	.word	0x58000400

0800447c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	609a      	str	r2, [r3, #8]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3360      	adds	r3, #96	; 0x60
 80044f6:	461a      	mov	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	430b      	orrs	r3, r1
 8004512:	431a      	orrs	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	611a      	str	r2, [r3, #16]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004556:	b480      	push	{r7}
 8004558:	b087      	sub	sp, #28
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3360      	adds	r3, #96	; 0x60
 8004566:	461a      	mov	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	431a      	orrs	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	601a      	str	r2, [r3, #0]
  }
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b087      	sub	sp, #28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3330      	adds	r3, #48	; 0x30
 80045c2:	461a      	mov	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	4413      	add	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	211f      	movs	r1, #31
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	401a      	ands	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0e9b      	lsrs	r3, r3, #26
 80045ea:	f003 011f 	and.w	r1, r3, #31
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	fa01 f303 	lsl.w	r3, r1, r3
 80045f8:	431a      	orrs	r2, r3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f023 0203 	bic.w	r2, r3, #3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60da      	str	r2, [r3, #12]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3314      	adds	r3, #20
 8004640:	461a      	mov	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	0e5b      	lsrs	r3, r3, #25
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	4413      	add	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	0d1b      	lsrs	r3, r3, #20
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2107      	movs	r1, #7
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	401a      	ands	r2, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	0d1b      	lsrs	r3, r3, #20
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	fa01 f303 	lsl.w	r3, r1, r3
 8004674:	431a      	orrs	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a0:	43db      	mvns	r3, r3
 80046a2:	401a      	ands	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f003 0318 	and.w	r3, r3, #24
 80046aa:	4908      	ldr	r1, [pc, #32]	; (80046cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80046ac:	40d9      	lsrs	r1, r3
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	400b      	ands	r3, r1
 80046b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046b6:	431a      	orrs	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	000fffff 	.word	0x000fffff

080046d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 031f 	and.w	r3, r3, #31
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <LL_ADC_DisableDeepPowerDown+0x20>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6093      	str	r3, [r2, #8]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	5fffffc0 	.word	0x5fffffc0

08004710 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004724:	d101      	bne.n	800472a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <LL_ADC_EnableInternalRegulator+0x24>)
 8004746:	4013      	ands	r3, r2
 8004748:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	6fffffc0 	.word	0x6fffffc0

08004760 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004774:	d101      	bne.n	800477a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <LL_ADC_Enable+0x24>)
 8004796:	4013      	ands	r3, r2
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	7fffffc0 	.word	0x7fffffc0

080047b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <LL_ADC_Disable+0x24>)
 80047be:	4013      	ands	r3, r2
 80047c0:	f043 0202 	orr.w	r2, r3, #2
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	7fffffc0 	.word	0x7fffffc0

080047d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <LL_ADC_IsEnabled+0x18>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <LL_ADC_IsEnabled+0x1a>
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d101      	bne.n	8004816 <LL_ADC_IsDisableOngoing+0x18>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <LL_ADC_IsDisableOngoing+0x1a>
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <LL_ADC_REG_StartConversion+0x24>)
 8004832:	4013      	ands	r3, r2
 8004834:	f043 0204 	orr.w	r2, r3, #4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	7fffffc0 	.word	0x7fffffc0

0800484c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d101      	bne.n	8004864 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b08      	cmp	r3, #8
 8004884:	d101      	bne.n	800488a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b089      	sub	sp, #36	; 0x24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e18f      	b.n	8004bd2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fc f843 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff ff19 	bl	8004710 <LL_ADC_IsDeepPowerDownEnabled>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d004      	beq.n	80048ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff feff 	bl	80046ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff ff34 	bl	8004760 <LL_ADC_IsInternalRegulatorEnabled>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d114      	bne.n	8004928 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff ff18 	bl	8004738 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004908:	4b87      	ldr	r3, [pc, #540]	; (8004b28 <HAL_ADC_Init+0x290>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	099b      	lsrs	r3, r3, #6
 800490e:	4a87      	ldr	r2, [pc, #540]	; (8004b2c <HAL_ADC_Init+0x294>)
 8004910:	fba2 2303 	umull	r2, r3, r2, r3
 8004914:	099b      	lsrs	r3, r3, #6
 8004916:	3301      	adds	r3, #1
 8004918:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800491a:	e002      	b.n	8004922 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	3b01      	subs	r3, #1
 8004920:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f9      	bne.n	800491c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ff17 	bl	8004760 <LL_ADC_IsInternalRegulatorEnabled>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10d      	bne.n	8004954 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f043 0210 	orr.w	r2, r3, #16
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	f043 0201 	orr.w	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff ff77 	bl	800484c <LL_ADC_REG_IsConversionOngoing>
 800495e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 8129 	bne.w	8004bc0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f040 8125 	bne.w	8004bc0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800497e:	f043 0202 	orr.w	r2, r3, #2
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff ff24 	bl	80047d8 <LL_ADC_IsEnabled>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d136      	bne.n	8004a04 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a65      	ldr	r2, [pc, #404]	; (8004b30 <HAL_ADC_Init+0x298>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_ADC_Init+0x112>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a63      	ldr	r2, [pc, #396]	; (8004b34 <HAL_ADC_Init+0x29c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10e      	bne.n	80049c8 <HAL_ADC_Init+0x130>
 80049aa:	4861      	ldr	r0, [pc, #388]	; (8004b30 <HAL_ADC_Init+0x298>)
 80049ac:	f7ff ff14 	bl	80047d8 <LL_ADC_IsEnabled>
 80049b0:	4604      	mov	r4, r0
 80049b2:	4860      	ldr	r0, [pc, #384]	; (8004b34 <HAL_ADC_Init+0x29c>)
 80049b4:	f7ff ff10 	bl	80047d8 <LL_ADC_IsEnabled>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4323      	orrs	r3, r4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e008      	b.n	80049da <HAL_ADC_Init+0x142>
 80049c8:	485b      	ldr	r0, [pc, #364]	; (8004b38 <HAL_ADC_Init+0x2a0>)
 80049ca:	f7ff ff05 	bl	80047d8 <LL_ADC_IsEnabled>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d012      	beq.n	8004a04 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a53      	ldr	r2, [pc, #332]	; (8004b30 <HAL_ADC_Init+0x298>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_ADC_Init+0x15a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a51      	ldr	r2, [pc, #324]	; (8004b34 <HAL_ADC_Init+0x29c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d101      	bne.n	80049f6 <HAL_ADC_Init+0x15e>
 80049f2:	4a52      	ldr	r2, [pc, #328]	; (8004b3c <HAL_ADC_Init+0x2a4>)
 80049f4:	e000      	b.n	80049f8 <HAL_ADC_Init+0x160>
 80049f6:	4a52      	ldr	r2, [pc, #328]	; (8004b40 <HAL_ADC_Init+0x2a8>)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f7ff fd3c 	bl	800447c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004a04:	f7ff fd18 	bl	8004438 <HAL_GetREVID>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d914      	bls.n	8004a3c <HAL_ADC_Init+0x1a4>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b10      	cmp	r3, #16
 8004a18:	d110      	bne.n	8004a3c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7d5b      	ldrb	r3, [r3, #21]
 8004a1e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a24:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a2a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	7f1b      	ldrb	r3, [r3, #28]
 8004a30:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004a32:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a34:	f043 030c 	orr.w	r3, r3, #12
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	e00d      	b.n	8004a58 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	7d5b      	ldrb	r3, [r3, #21]
 8004a40:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a46:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a4c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7f1b      	ldrb	r3, [r3, #28]
 8004a52:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	7f1b      	ldrb	r3, [r3, #28]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d106      	bne.n	8004a6e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	045b      	lsls	r3, r3, #17
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	4b2c      	ldr	r3, [pc, #176]	; (8004b44 <HAL_ADC_Init+0x2ac>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	69b9      	ldr	r1, [r7, #24]
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fed2 	bl	800484c <LL_ADC_REG_IsConversionOngoing>
 8004aa8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fedf 	bl	8004872 <LL_ADC_INJ_IsConversionOngoing>
 8004ab4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d15f      	bne.n	8004b7c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d15c      	bne.n	8004b7c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	7d1b      	ldrb	r3, [r3, #20]
 8004ac6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <HAL_ADC_Init+0x2b0>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	69b9      	ldr	r1, [r7, #24]
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d130      	bne.n	8004b50 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <HAL_ADC_Init+0x2b4>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b02:	3a01      	subs	r2, #1
 8004b04:	0411      	lsls	r1, r2, #16
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b0a:	4311      	orrs	r1, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b10:	4311      	orrs	r1, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b16:	430a      	orrs	r2, r1
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	611a      	str	r2, [r3, #16]
 8004b24:	e01c      	b.n	8004b60 <HAL_ADC_Init+0x2c8>
 8004b26:	bf00      	nop
 8004b28:	24000088 	.word	0x24000088
 8004b2c:	053e2d63 	.word	0x053e2d63
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40022100 	.word	0x40022100
 8004b38:	58026000 	.word	0x58026000
 8004b3c:	40022300 	.word	0x40022300
 8004b40:	58026300 	.word	0x58026300
 8004b44:	fff0c003 	.word	0xfff0c003
 8004b48:	ffffbffc 	.word	0xffffbffc
 8004b4c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fdec 	bl	8005754 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10c      	bne.n	8004b9e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f023 010f 	bic.w	r1, r3, #15
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	1e5a      	subs	r2, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b9c:	e007      	b.n	8004bae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 020f 	bic.w	r2, r2, #15
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	f043 0201 	orr.w	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
 8004bbe:	e007      	b.n	8004bd0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	f043 0210 	orr.w	r2, r3, #16
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3724      	adds	r7, #36	; 0x24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd90      	pop	{r4, r7, pc}
 8004bda:	bf00      	nop

08004bdc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a55      	ldr	r2, [pc, #340]	; (8004d44 <HAL_ADC_Start_DMA+0x168>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_ADC_Start_DMA+0x20>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a54      	ldr	r2, [pc, #336]	; (8004d48 <HAL_ADC_Start_DMA+0x16c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <HAL_ADC_Start_DMA+0x24>
 8004bfc:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <HAL_ADC_Start_DMA+0x170>)
 8004bfe:	e000      	b.n	8004c02 <HAL_ADC_Start_DMA+0x26>
 8004c00:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <HAL_ADC_Start_DMA+0x174>)
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fd64 	bl	80046d0 <LL_ADC_GetMultimode>
 8004c08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fe1c 	bl	800484c <LL_ADC_REG_IsConversionOngoing>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 808c 	bne.w	8004d34 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_ADC_Start_DMA+0x4e>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e087      	b.n	8004d3a <HAL_ADC_Start_DMA+0x15e>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b05      	cmp	r3, #5
 8004c3c:	d002      	beq.n	8004c44 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b09      	cmp	r3, #9
 8004c42:	d170      	bne.n	8004d26 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fc07 	bl	8005458 <ADC_Enable>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d163      	bne.n	8004d1c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c58:	4b3e      	ldr	r3, [pc, #248]	; (8004d54 <HAL_ADC_Start_DMA+0x178>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a37      	ldr	r2, [pc, #220]	; (8004d48 <HAL_ADC_Start_DMA+0x16c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d002      	beq.n	8004c74 <HAL_ADC_Start_DMA+0x98>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	e000      	b.n	8004c76 <HAL_ADC_Start_DMA+0x9a>
 8004c74:	4b33      	ldr	r3, [pc, #204]	; (8004d44 <HAL_ADC_Start_DMA+0x168>)
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d002      	beq.n	8004c84 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d006      	beq.n	8004caa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f023 0206 	bic.w	r2, r3, #6
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ca8:	e002      	b.n	8004cb0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb4:	4a28      	ldr	r2, [pc, #160]	; (8004d58 <HAL_ADC_Start_DMA+0x17c>)
 8004cb6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbc:	4a27      	ldr	r2, [pc, #156]	; (8004d5c <HAL_ADC_Start_DMA+0x180>)
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc4:	4a26      	ldr	r2, [pc, #152]	; (8004d60 <HAL_ADC_Start_DMA+0x184>)
 8004cc6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	221c      	movs	r2, #28
 8004cce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0210 	orr.w	r2, r2, #16
 8004ce6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7ff fc89 	bl	800460a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3340      	adds	r3, #64	; 0x40
 8004d02:	4619      	mov	r1, r3
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f002 f80e 	bl	8006d28 <HAL_DMA_Start_IT>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fd85 	bl	8004824 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004d1a:	e00d      	b.n	8004d38 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004d24:	e008      	b.n	8004d38 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d32:	e001      	b.n	8004d38 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
 8004d36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40022000 	.word	0x40022000
 8004d48:	40022100 	.word	0x40022100
 8004d4c:	40022300 	.word	0x40022300
 8004d50:	58026300 	.word	0x58026300
 8004d54:	fffff0fe 	.word	0xfffff0fe
 8004d58:	0800562b 	.word	0x0800562b
 8004d5c:	08005703 	.word	0x08005703
 8004d60:	0800571f 	.word	0x0800571f

08004d64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b0a1      	sub	sp, #132	; 0x84
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4a65      	ldr	r2, [pc, #404]	; (8004f50 <HAL_ADC_ConfigChannel+0x1b0>)
 8004dba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x2a>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e32e      	b.n	8005428 <HAL_ADC_ConfigChannel+0x688>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fd38 	bl	800484c <LL_ADC_REG_IsConversionOngoing>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f040 8313 	bne.w	800540a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	db2c      	blt.n	8004e46 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d108      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x6a>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	0e9b      	lsrs	r3, r3, #26
 8004dfe:	f003 031f 	and.w	r3, r3, #31
 8004e02:	2201      	movs	r2, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	e016      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x98>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e1a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004e22:	2320      	movs	r3, #32
 8004e24:	e003      	b.n	8004e2e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e28:	fab3 f383 	clz	r3, r3
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2201      	movs	r2, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	69d1      	ldr	r1, [r2, #28]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	430b      	orrs	r3, r1
 8004e44:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6859      	ldr	r1, [r3, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f7ff fbad 	bl	80045b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fcf5 	bl	800484c <LL_ADC_REG_IsConversionOngoing>
 8004e62:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fd02 	bl	8004872 <LL_ADC_INJ_IsConversionOngoing>
 8004e6e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f040 80b8 	bne.w	8004fe8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 80b4 	bne.w	8004fe8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	6819      	ldr	r1, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f7ff fbcf 	bl	8004630 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004e92:	4b30      	ldr	r3, [pc, #192]	; (8004f54 <HAL_ADC_ConfigChannel+0x1b4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x118>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	089b      	lsrs	r3, r3, #2
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	e01d      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x154>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <HAL_ADC_ConfigChannel+0x13e>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	089b      	lsrs	r3, r3, #2
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	e00a      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x154>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	695a      	ldr	r2, [r3, #20]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d02c      	beq.n	8004f58 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6919      	ldr	r1, [r3, #16]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f0c:	f7ff faea 	bl	80044e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6919      	ldr	r1, [r3, #16]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	7e5b      	ldrb	r3, [r3, #25]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d102      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x186>
 8004f20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f24:	e000      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x188>
 8004f26:	2300      	movs	r3, #0
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f7ff fb14 	bl	8004556 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6919      	ldr	r1, [r3, #16]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	7e1b      	ldrb	r3, [r3, #24]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d102      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x1a4>
 8004f3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f42:	e000      	b.n	8004f46 <HAL_ADC_ConfigChannel+0x1a6>
 8004f44:	2300      	movs	r3, #0
 8004f46:	461a      	mov	r2, r3
 8004f48:	f7ff faec 	bl	8004524 <LL_ADC_SetDataRightShift>
 8004f4c:	e04c      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x248>
 8004f4e:	bf00      	nop
 8004f50:	47ff0000 	.word	0x47ff0000
 8004f54:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	069b      	lsls	r3, r3, #26
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d107      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f7a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	069b      	lsls	r3, r3, #26
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d107      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f9e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	069b      	lsls	r3, r3, #26
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d107      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fc2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	069b      	lsls	r3, r3, #26
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d107      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fe6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff fbf3 	bl	80047d8 <LL_ADC_IsEnabled>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f040 8211 	bne.w	800541c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6819      	ldr	r1, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	461a      	mov	r2, r3
 8005008:	f7ff fb3e 	bl	8004688 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4aa1      	ldr	r2, [pc, #644]	; (8005298 <HAL_ADC_ConfigChannel+0x4f8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	f040 812e 	bne.w	8005274 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x2a0>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	0e9b      	lsrs	r3, r3, #26
 800502e:	3301      	adds	r3, #1
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2b09      	cmp	r3, #9
 8005036:	bf94      	ite	ls
 8005038:	2301      	movls	r3, #1
 800503a:	2300      	movhi	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	e019      	b.n	8005074 <HAL_ADC_ConfigChannel+0x2d4>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005048:	fa93 f3a3 	rbit	r3, r3
 800504c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800504e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005050:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8005058:	2320      	movs	r3, #32
 800505a:	e003      	b.n	8005064 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800505c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800505e:	fab3 f383 	clz	r3, r3
 8005062:	b2db      	uxtb	r3, r3
 8005064:	3301      	adds	r3, #1
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2b09      	cmp	r3, #9
 800506c:	bf94      	ite	ls
 800506e:	2301      	movls	r3, #1
 8005070:	2300      	movhi	r3, #0
 8005072:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005074:	2b00      	cmp	r3, #0
 8005076:	d079      	beq.n	800516c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005080:	2b00      	cmp	r3, #0
 8005082:	d107      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x2f4>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	0e9b      	lsrs	r3, r3, #26
 800508a:	3301      	adds	r3, #1
 800508c:	069b      	lsls	r3, r3, #26
 800508e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005092:	e015      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x320>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509c:	fa93 f3a3 	rbit	r3, r3
 80050a0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80050a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80050a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80050ac:	2320      	movs	r3, #32
 80050ae:	e003      	b.n	80050b8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80050b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b2:	fab3 f383 	clz	r3, r3
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	3301      	adds	r3, #1
 80050ba:	069b      	lsls	r3, r3, #26
 80050bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <HAL_ADC_ConfigChannel+0x340>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	0e9b      	lsrs	r3, r3, #26
 80050d2:	3301      	adds	r3, #1
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	2101      	movs	r1, #1
 80050da:	fa01 f303 	lsl.w	r3, r1, r3
 80050de:	e017      	b.n	8005110 <HAL_ADC_ConfigChannel+0x370>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e8:	fa93 f3a3 	rbit	r3, r3
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80050ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80050f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80050f8:	2320      	movs	r3, #32
 80050fa:	e003      	b.n	8005104 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80050fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050fe:	fab3 f383 	clz	r3, r3
 8005102:	b2db      	uxtb	r3, r3
 8005104:	3301      	adds	r3, #1
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	2101      	movs	r1, #1
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	ea42 0103 	orr.w	r1, r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x396>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	0e9b      	lsrs	r3, r3, #26
 8005126:	3301      	adds	r3, #1
 8005128:	f003 021f 	and.w	r2, r3, #31
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	051b      	lsls	r3, r3, #20
 8005134:	e018      	b.n	8005168 <HAL_ADC_ConfigChannel+0x3c8>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513e:	fa93 f3a3 	rbit	r3, r3
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800514e:	2320      	movs	r3, #32
 8005150:	e003      	b.n	800515a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	fab3 f383 	clz	r3, r3
 8005158:	b2db      	uxtb	r3, r3
 800515a:	3301      	adds	r3, #1
 800515c:	f003 021f 	and.w	r2, r3, #31
 8005160:	4613      	mov	r3, r2
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	4413      	add	r3, r2
 8005166:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005168:	430b      	orrs	r3, r1
 800516a:	e07e      	b.n	800526a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005174:	2b00      	cmp	r3, #0
 8005176:	d107      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x3e8>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0e9b      	lsrs	r3, r3, #26
 800517e:	3301      	adds	r3, #1
 8005180:	069b      	lsls	r3, r3, #26
 8005182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005186:	e015      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x414>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	fa93 f3a3 	rbit	r3, r3
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80051a0:	2320      	movs	r3, #32
 80051a2:	e003      	b.n	80051ac <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	3301      	adds	r3, #1
 80051ae:	069b      	lsls	r3, r3, #26
 80051b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d109      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x434>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	0e9b      	lsrs	r3, r3, #26
 80051c6:	3301      	adds	r3, #1
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	2101      	movs	r1, #1
 80051ce:	fa01 f303 	lsl.w	r3, r1, r3
 80051d2:	e017      	b.n	8005204 <HAL_ADC_ConfigChannel+0x464>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	fa93 f3a3 	rbit	r3, r3
 80051e0:	61bb      	str	r3, [r7, #24]
  return result;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80051ec:	2320      	movs	r3, #32
 80051ee:	e003      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	fab3 f383 	clz	r3, r3
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	3301      	adds	r3, #1
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2101      	movs	r1, #1
 8005200:	fa01 f303 	lsl.w	r3, r1, r3
 8005204:	ea42 0103 	orr.w	r1, r2, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10d      	bne.n	8005230 <HAL_ADC_ConfigChannel+0x490>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	0e9b      	lsrs	r3, r3, #26
 800521a:	3301      	adds	r3, #1
 800521c:	f003 021f 	and.w	r2, r3, #31
 8005220:	4613      	mov	r3, r2
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	4413      	add	r3, r2
 8005226:	3b1e      	subs	r3, #30
 8005228:	051b      	lsls	r3, r3, #20
 800522a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800522e:	e01b      	b.n	8005268 <HAL_ADC_ConfigChannel+0x4c8>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	fa93 f3a3 	rbit	r3, r3
 800523c:	60fb      	str	r3, [r7, #12]
  return result;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8005248:	2320      	movs	r3, #32
 800524a:	e003      	b.n	8005254 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	fab3 f383 	clz	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	3301      	adds	r3, #1
 8005256:	f003 021f 	and.w	r2, r3, #31
 800525a:	4613      	mov	r3, r2
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	4413      	add	r3, r2
 8005260:	3b1e      	subs	r3, #30
 8005262:	051b      	lsls	r3, r3, #20
 8005264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005268:	430b      	orrs	r3, r1
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	6892      	ldr	r2, [r2, #8]
 800526e:	4619      	mov	r1, r3
 8005270:	f7ff f9de 	bl	8004630 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f280 80cf 	bge.w	800541c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a06      	ldr	r2, [pc, #24]	; (800529c <HAL_ADC_ConfigChannel+0x4fc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_ADC_ConfigChannel+0x4f2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <HAL_ADC_ConfigChannel+0x500>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10a      	bne.n	80052a8 <HAL_ADC_ConfigChannel+0x508>
 8005292:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <HAL_ADC_ConfigChannel+0x504>)
 8005294:	e009      	b.n	80052aa <HAL_ADC_ConfigChannel+0x50a>
 8005296:	bf00      	nop
 8005298:	47ff0000 	.word	0x47ff0000
 800529c:	40022000 	.word	0x40022000
 80052a0:	40022100 	.word	0x40022100
 80052a4:	40022300 	.word	0x40022300
 80052a8:	4b61      	ldr	r3, [pc, #388]	; (8005430 <HAL_ADC_ConfigChannel+0x690>)
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff f90c 	bl	80044c8 <LL_ADC_GetCommonPathInternalCh>
 80052b0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a5f      	ldr	r2, [pc, #380]	; (8005434 <HAL_ADC_ConfigChannel+0x694>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_ADC_ConfigChannel+0x526>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a5d      	ldr	r2, [pc, #372]	; (8005438 <HAL_ADC_ConfigChannel+0x698>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10e      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x544>
 80052c6:	485b      	ldr	r0, [pc, #364]	; (8005434 <HAL_ADC_ConfigChannel+0x694>)
 80052c8:	f7ff fa86 	bl	80047d8 <LL_ADC_IsEnabled>
 80052cc:	4604      	mov	r4, r0
 80052ce:	485a      	ldr	r0, [pc, #360]	; (8005438 <HAL_ADC_ConfigChannel+0x698>)
 80052d0:	f7ff fa82 	bl	80047d8 <LL_ADC_IsEnabled>
 80052d4:	4603      	mov	r3, r0
 80052d6:	4323      	orrs	r3, r4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bf0c      	ite	eq
 80052dc:	2301      	moveq	r3, #1
 80052de:	2300      	movne	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e008      	b.n	80052f6 <HAL_ADC_ConfigChannel+0x556>
 80052e4:	4855      	ldr	r0, [pc, #340]	; (800543c <HAL_ADC_ConfigChannel+0x69c>)
 80052e6:	f7ff fa77 	bl	80047d8 <LL_ADC_IsEnabled>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d07d      	beq.n	80053f6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a50      	ldr	r2, [pc, #320]	; (8005440 <HAL_ADC_ConfigChannel+0x6a0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d130      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x5c6>
 8005304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d12b      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a4a      	ldr	r2, [pc, #296]	; (800543c <HAL_ADC_ConfigChannel+0x69c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	f040 8081 	bne.w	800541c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a45      	ldr	r2, [pc, #276]	; (8005434 <HAL_ADC_ConfigChannel+0x694>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_ADC_ConfigChannel+0x58e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a43      	ldr	r2, [pc, #268]	; (8005438 <HAL_ADC_ConfigChannel+0x698>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d101      	bne.n	8005332 <HAL_ADC_ConfigChannel+0x592>
 800532e:	4a45      	ldr	r2, [pc, #276]	; (8005444 <HAL_ADC_ConfigChannel+0x6a4>)
 8005330:	e000      	b.n	8005334 <HAL_ADC_ConfigChannel+0x594>
 8005332:	4a3f      	ldr	r2, [pc, #252]	; (8005430 <HAL_ADC_ConfigChannel+0x690>)
 8005334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005336:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f7ff f8b0 	bl	80044a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005342:	4b41      	ldr	r3, [pc, #260]	; (8005448 <HAL_ADC_ConfigChannel+0x6a8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	099b      	lsrs	r3, r3, #6
 8005348:	4a40      	ldr	r2, [pc, #256]	; (800544c <HAL_ADC_ConfigChannel+0x6ac>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	099b      	lsrs	r3, r3, #6
 8005350:	3301      	adds	r3, #1
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005356:	e002      	b.n	800535e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	3b01      	subs	r3, #1
 800535c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f9      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005364:	e05a      	b.n	800541c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a39      	ldr	r2, [pc, #228]	; (8005450 <HAL_ADC_ConfigChannel+0x6b0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d11e      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x60e>
 8005370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d119      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2f      	ldr	r2, [pc, #188]	; (800543c <HAL_ADC_ConfigChannel+0x69c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d14b      	bne.n	800541c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <HAL_ADC_ConfigChannel+0x694>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_ADC_ConfigChannel+0x5f8>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a29      	ldr	r2, [pc, #164]	; (8005438 <HAL_ADC_ConfigChannel+0x698>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d101      	bne.n	800539c <HAL_ADC_ConfigChannel+0x5fc>
 8005398:	4a2a      	ldr	r2, [pc, #168]	; (8005444 <HAL_ADC_ConfigChannel+0x6a4>)
 800539a:	e000      	b.n	800539e <HAL_ADC_ConfigChannel+0x5fe>
 800539c:	4a24      	ldr	r2, [pc, #144]	; (8005430 <HAL_ADC_ConfigChannel+0x690>)
 800539e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f7ff f87b 	bl	80044a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053ac:	e036      	b.n	800541c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a28      	ldr	r2, [pc, #160]	; (8005454 <HAL_ADC_ConfigChannel+0x6b4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d131      	bne.n	800541c <HAL_ADC_ConfigChannel+0x67c>
 80053b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d12c      	bne.n	800541c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1d      	ldr	r2, [pc, #116]	; (800543c <HAL_ADC_ConfigChannel+0x69c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d127      	bne.n	800541c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_ADC_ConfigChannel+0x694>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_ADC_ConfigChannel+0x640>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_ADC_ConfigChannel+0x698>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d101      	bne.n	80053e4 <HAL_ADC_ConfigChannel+0x644>
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_ADC_ConfigChannel+0x6a4>)
 80053e2:	e000      	b.n	80053e6 <HAL_ADC_ConfigChannel+0x646>
 80053e4:	4a12      	ldr	r2, [pc, #72]	; (8005430 <HAL_ADC_ConfigChannel+0x690>)
 80053e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f7ff f857 	bl	80044a2 <LL_ADC_SetCommonPathInternalCh>
 80053f4:	e012      	b.n	800541c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fa:	f043 0220 	orr.w	r2, r3, #32
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005408:	e008      	b.n	800541c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	f043 0220 	orr.w	r2, r3, #32
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005424:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005428:	4618      	mov	r0, r3
 800542a:	3784      	adds	r7, #132	; 0x84
 800542c:	46bd      	mov	sp, r7
 800542e:	bd90      	pop	{r4, r7, pc}
 8005430:	58026300 	.word	0x58026300
 8005434:	40022000 	.word	0x40022000
 8005438:	40022100 	.word	0x40022100
 800543c:	58026000 	.word	0x58026000
 8005440:	cb840000 	.word	0xcb840000
 8005444:	40022300 	.word	0x40022300
 8005448:	24000088 	.word	0x24000088
 800544c:	053e2d63 	.word	0x053e2d63
 8005450:	c7520000 	.word	0xc7520000
 8005454:	cfb80000 	.word	0xcfb80000

08005458 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff f9b7 	bl	80047d8 <LL_ADC_IsEnabled>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d16e      	bne.n	800554e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	4b38      	ldr	r3, [pc, #224]	; (8005558 <ADC_Enable+0x100>)
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00d      	beq.n	800549a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f043 0210 	orr.w	r2, r3, #16
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	f043 0201 	orr.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e05a      	b.n	8005550 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff f972 	bl	8004788 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80054a4:	f7fe ffbc 	bl	8004420 <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2b      	ldr	r2, [pc, #172]	; (800555c <ADC_Enable+0x104>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <ADC_Enable+0x66>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a29      	ldr	r2, [pc, #164]	; (8005560 <ADC_Enable+0x108>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d101      	bne.n	80054c2 <ADC_Enable+0x6a>
 80054be:	4b29      	ldr	r3, [pc, #164]	; (8005564 <ADC_Enable+0x10c>)
 80054c0:	e000      	b.n	80054c4 <ADC_Enable+0x6c>
 80054c2:	4b29      	ldr	r3, [pc, #164]	; (8005568 <ADC_Enable+0x110>)
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff f903 	bl	80046d0 <LL_ADC_GetMultimode>
 80054ca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a23      	ldr	r2, [pc, #140]	; (8005560 <ADC_Enable+0x108>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d002      	beq.n	80054dc <ADC_Enable+0x84>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	e000      	b.n	80054de <ADC_Enable+0x86>
 80054dc:	4b1f      	ldr	r3, [pc, #124]	; (800555c <ADC_Enable+0x104>)
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d02c      	beq.n	8005540 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d130      	bne.n	800554e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054ec:	e028      	b.n	8005540 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff f970 	bl	80047d8 <LL_ADC_IsEnabled>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff f940 	bl	8004788 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005508:	f7fe ff8a 	bl	8004420 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d914      	bls.n	8005540 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b01      	cmp	r3, #1
 8005522:	d00d      	beq.n	8005540 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	f043 0210 	orr.w	r2, r3, #16
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005534:	f043 0201 	orr.w	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e007      	b.n	8005550 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b01      	cmp	r3, #1
 800554c:	d1cf      	bne.n	80054ee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	8000003f 	.word	0x8000003f
 800555c:	40022000 	.word	0x40022000
 8005560:	40022100 	.word	0x40022100
 8005564:	40022300 	.word	0x40022300
 8005568:	58026300 	.word	0x58026300

0800556c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff f940 	bl	80047fe <LL_ADC_IsDisableOngoing>
 800557e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff f927 	bl	80047d8 <LL_ADC_IsEnabled>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d047      	beq.n	8005620 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d144      	bne.n	8005620 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 030d 	and.w	r3, r3, #13
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10c      	bne.n	80055be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff f901 	bl	80047b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2203      	movs	r2, #3
 80055b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055b6:	f7fe ff33 	bl	8004420 <HAL_GetTick>
 80055ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055bc:	e029      	b.n	8005612 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	f043 0210 	orr.w	r2, r3, #16
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e023      	b.n	8005622 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80055da:	f7fe ff21 	bl	8004420 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d914      	bls.n	8005612 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00d      	beq.n	8005612 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	f043 0210 	orr.w	r2, r3, #16
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e007      	b.n	8005622 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1dc      	bne.n	80055da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005640:	2b00      	cmp	r3, #0
 8005642:	d14b      	bne.n	80056dc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005648:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d021      	beq.n	80056a2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe ff92 	bl	800458c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d032      	beq.n	80056d4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d12b      	bne.n	80056d4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d11f      	bne.n	80056d4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005698:	f043 0201 	orr.w	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	655a      	str	r2, [r3, #84]	; 0x54
 80056a0:	e018      	b.n	80056d4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d111      	bne.n	80056d4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d105      	bne.n	80056d4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	f043 0201 	orr.w	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff fb45 	bl	8004d64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80056da:	e00e      	b.n	80056fa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff fb4f 	bl	8004d8c <HAL_ADC_ErrorCallback>
}
 80056ee:	e004      	b.n	80056fa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	4798      	blx	r3
}
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff fb31 	bl	8004d78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573c:	f043 0204 	orr.w	r2, r3, #4
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7ff fb21 	bl	8004d8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a7a      	ldr	r2, [pc, #488]	; (800594c <ADC_ConfigureBoostMode+0x1f8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d004      	beq.n	8005770 <ADC_ConfigureBoostMode+0x1c>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a79      	ldr	r2, [pc, #484]	; (8005950 <ADC_ConfigureBoostMode+0x1fc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d109      	bne.n	8005784 <ADC_ConfigureBoostMode+0x30>
 8005770:	4b78      	ldr	r3, [pc, #480]	; (8005954 <ADC_ConfigureBoostMode+0x200>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005778:	2b00      	cmp	r3, #0
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	e008      	b.n	8005796 <ADC_ConfigureBoostMode+0x42>
 8005784:	4b74      	ldr	r3, [pc, #464]	; (8005958 <ADC_ConfigureBoostMode+0x204>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800578c:	2b00      	cmp	r3, #0
 800578e:	bf14      	ite	ne
 8005790:	2301      	movne	r3, #1
 8005792:	2300      	moveq	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01c      	beq.n	80057d4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800579a:	f005 fd9f 	bl	800b2dc <HAL_RCC_GetHCLKFreq>
 800579e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057a8:	d010      	beq.n	80057cc <ADC_ConfigureBoostMode+0x78>
 80057aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057ae:	d873      	bhi.n	8005898 <ADC_ConfigureBoostMode+0x144>
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b4:	d002      	beq.n	80057bc <ADC_ConfigureBoostMode+0x68>
 80057b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ba:	d16d      	bne.n	8005898 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	0c1b      	lsrs	r3, r3, #16
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	60fb      	str	r3, [r7, #12]
        break;
 80057ca:	e068      	b.n	800589e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	60fb      	str	r3, [r7, #12]
        break;
 80057d2:	e064      	b.n	800589e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80057d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80057d8:	f04f 0100 	mov.w	r1, #0
 80057dc:	f007 f826 	bl	800c82c <HAL_RCCEx_GetPeriphCLKFreq>
 80057e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80057ea:	d051      	beq.n	8005890 <ADC_ConfigureBoostMode+0x13c>
 80057ec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80057f0:	d854      	bhi.n	800589c <ADC_ConfigureBoostMode+0x148>
 80057f2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80057f6:	d047      	beq.n	8005888 <ADC_ConfigureBoostMode+0x134>
 80057f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80057fc:	d84e      	bhi.n	800589c <ADC_ConfigureBoostMode+0x148>
 80057fe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005802:	d03d      	beq.n	8005880 <ADC_ConfigureBoostMode+0x12c>
 8005804:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005808:	d848      	bhi.n	800589c <ADC_ConfigureBoostMode+0x148>
 800580a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800580e:	d033      	beq.n	8005878 <ADC_ConfigureBoostMode+0x124>
 8005810:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005814:	d842      	bhi.n	800589c <ADC_ConfigureBoostMode+0x148>
 8005816:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800581a:	d029      	beq.n	8005870 <ADC_ConfigureBoostMode+0x11c>
 800581c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005820:	d83c      	bhi.n	800589c <ADC_ConfigureBoostMode+0x148>
 8005822:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005826:	d01a      	beq.n	800585e <ADC_ConfigureBoostMode+0x10a>
 8005828:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800582c:	d836      	bhi.n	800589c <ADC_ConfigureBoostMode+0x148>
 800582e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005832:	d014      	beq.n	800585e <ADC_ConfigureBoostMode+0x10a>
 8005834:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005838:	d830      	bhi.n	800589c <ADC_ConfigureBoostMode+0x148>
 800583a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583e:	d00e      	beq.n	800585e <ADC_ConfigureBoostMode+0x10a>
 8005840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005844:	d82a      	bhi.n	800589c <ADC_ConfigureBoostMode+0x148>
 8005846:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800584a:	d008      	beq.n	800585e <ADC_ConfigureBoostMode+0x10a>
 800584c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005850:	d824      	bhi.n	800589c <ADC_ConfigureBoostMode+0x148>
 8005852:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005856:	d002      	beq.n	800585e <ADC_ConfigureBoostMode+0x10a>
 8005858:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800585c:	d11e      	bne.n	800589c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	0c9b      	lsrs	r3, r3, #18
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	60fb      	str	r3, [r7, #12]
        break;
 800586e:	e016      	b.n	800589e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	60fb      	str	r3, [r7, #12]
        break;
 8005876:	e012      	b.n	800589e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	60fb      	str	r3, [r7, #12]
        break;
 800587e:	e00e      	b.n	800589e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	099b      	lsrs	r3, r3, #6
 8005884:	60fb      	str	r3, [r7, #12]
        break;
 8005886:	e00a      	b.n	800589e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	09db      	lsrs	r3, r3, #7
 800588c:	60fb      	str	r3, [r7, #12]
        break;
 800588e:	e006      	b.n	800589e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	60fb      	str	r3, [r7, #12]
        break;
 8005896:	e002      	b.n	800589e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005898:	bf00      	nop
 800589a:	e000      	b.n	800589e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800589c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800589e:	f7fe fdcb 	bl	8004438 <HAL_GetREVID>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d815      	bhi.n	80058d8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4a2b      	ldr	r2, [pc, #172]	; (800595c <ADC_ConfigureBoostMode+0x208>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d908      	bls.n	80058c6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058c2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80058c4:	e03e      	b.n	8005944 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058d4:	609a      	str	r2, [r3, #8]
}
 80058d6:	e035      	b.n	8005944 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <ADC_ConfigureBoostMode+0x20c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d808      	bhi.n	80058f8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80058f4:	609a      	str	r2, [r3, #8]
}
 80058f6:	e025      	b.n	8005944 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <ADC_ConfigureBoostMode+0x210>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d80a      	bhi.n	8005916 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005912:	609a      	str	r2, [r3, #8]
}
 8005914:	e016      	b.n	8005944 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a13      	ldr	r2, [pc, #76]	; (8005968 <ADC_ConfigureBoostMode+0x214>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d80a      	bhi.n	8005934 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005930:	609a      	str	r2, [r3, #8]
}
 8005932:	e007      	b.n	8005944 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40022000 	.word	0x40022000
 8005950:	40022100 	.word	0x40022100
 8005954:	40022300 	.word	0x40022300
 8005958:	58026300 	.word	0x58026300
 800595c:	01312d00 	.word	0x01312d00
 8005960:	005f5e10 	.word	0x005f5e10
 8005964:	00bebc20 	.word	0x00bebc20
 8005968:	017d7840 	.word	0x017d7840

0800596c <LL_ADC_IsEnabled>:
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <LL_ADC_IsEnabled+0x18>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <LL_ADC_IsEnabled+0x1a>
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
	...

08005994 <LL_ADC_StartCalibration>:
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <LL_ADC_StartCalibration+0x38>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80059b4:	430a      	orrs	r2, r1
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	609a      	str	r2, [r3, #8]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	3ffeffc0 	.word	0x3ffeffc0

080059d0 <LL_ADC_IsCalibrationOnGoing>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e4:	d101      	bne.n	80059ea <LL_ADC_IsCalibrationOnGoing+0x1a>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <LL_ADC_IsCalibrationOnGoing+0x1c>
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <LL_ADC_REG_IsConversionOngoing>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d101      	bne.n	8005a10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_ADCEx_Calibration_Start+0x1e>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e04c      	b.n	8005ad8 <HAL_ADCEx_Calibration_Start+0xb8>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff fd90 	bl	800556c <ADC_Disable>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d135      	bne.n	8005ac2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5a:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	f043 0202 	orr.w	r2, r3, #2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff ff90 	bl	8005994 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a74:	e014      	b.n	8005aa0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d30d      	bcc.n	8005aa0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	f023 0312 	bic.w	r3, r3, #18
 8005a8c:	f043 0210 	orr.w	r2, r3, #16
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e01b      	b.n	8005ad8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff ff93 	bl	80059d0 <LL_ADC_IsCalibrationOnGoing>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e2      	bne.n	8005a76 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab4:	f023 0303 	bic.w	r3, r3, #3
 8005ab8:	f043 0201 	orr.w	r2, r3, #1
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
 8005ac0:	e005      	b.n	8005ace <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	f043 0210 	orr.w	r2, r3, #16
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	ffffeefd 	.word	0xffffeefd
 8005ae4:	25c3f800 	.word	0x25c3f800

08005ae8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005ae8:	b590      	push	{r4, r7, lr}
 8005aea:	b09f      	sub	sp, #124	; 0x7c
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e0be      	b.n	8005c84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a5c      	ldr	r2, [pc, #368]	; (8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d102      	bne.n	8005b26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b20:	4b5b      	ldr	r3, [pc, #364]	; (8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	e001      	b.n	8005b2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b34:	f043 0220 	orr.w	r2, r3, #32
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e09d      	b.n	8005c84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff ff54 	bl	80059f8 <LL_ADC_REG_IsConversionOngoing>
 8005b50:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff ff4e 	bl	80059f8 <LL_ADC_REG_IsConversionOngoing>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d17f      	bne.n	8005c62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d17c      	bne.n	8005c62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a47      	ldr	r2, [pc, #284]	; (8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a46      	ldr	r2, [pc, #280]	; (8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d101      	bne.n	8005b80 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005b7c:	4b45      	ldr	r3, [pc, #276]	; (8005c94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b7e:	e000      	b.n	8005b82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005b80:	4b45      	ldr	r3, [pc, #276]	; (8005c98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d039      	beq.n	8005c00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a3a      	ldr	r2, [pc, #232]	; (8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d004      	beq.n	8005bb2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a38      	ldr	r2, [pc, #224]	; (8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005bb2:	4836      	ldr	r0, [pc, #216]	; (8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005bb4:	f7ff feda 	bl	800596c <LL_ADC_IsEnabled>
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4835      	ldr	r0, [pc, #212]	; (8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005bbc:	f7ff fed6 	bl	800596c <LL_ADC_IsEnabled>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	4323      	orrs	r3, r4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	e008      	b.n	8005be2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005bd0:	4832      	ldr	r0, [pc, #200]	; (8005c9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005bd2:	f7ff fecb 	bl	800596c <LL_ADC_IsEnabled>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d047      	beq.n	8005c76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	6811      	ldr	r1, [r2, #0]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	6892      	ldr	r2, [r2, #8]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bfc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bfe:	e03a      	b.n	8005c76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1e      	ldr	r2, [pc, #120]	; (8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1d      	ldr	r2, [pc, #116]	; (8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d10e      	bne.n	8005c3e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005c20:	481a      	ldr	r0, [pc, #104]	; (8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005c22:	f7ff fea3 	bl	800596c <LL_ADC_IsEnabled>
 8005c26:	4604      	mov	r4, r0
 8005c28:	4819      	ldr	r0, [pc, #100]	; (8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005c2a:	f7ff fe9f 	bl	800596c <LL_ADC_IsEnabled>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	4323      	orrs	r3, r4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bf0c      	ite	eq
 8005c36:	2301      	moveq	r3, #1
 8005c38:	2300      	movne	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	e008      	b.n	8005c50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005c3e:	4817      	ldr	r0, [pc, #92]	; (8005c9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005c40:	f7ff fe94 	bl	800596c <LL_ADC_IsEnabled>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bf0c      	ite	eq
 8005c4a:	2301      	moveq	r3, #1
 8005c4c:	2300      	movne	r3, #0
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d010      	beq.n	8005c76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c60:	e009      	b.n	8005c76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	f043 0220 	orr.w	r2, r3, #32
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005c74:	e000      	b.n	8005c78 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005c80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	377c      	adds	r7, #124	; 0x7c
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd90      	pop	{r4, r7, pc}
 8005c8c:	40022000 	.word	0x40022000
 8005c90:	40022100 	.word	0x40022100
 8005c94:	40022300 	.word	0x40022300
 8005c98:	58026300 	.word	0x58026300
 8005c9c:	58026000 	.word	0x58026000
 8005ca0:	fffff0e0 	.word	0xfffff0e0

08005ca4 <__NVIC_SetPriorityGrouping>:
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ccc:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cd2:	4a04      	ldr	r2, [pc, #16]	; (8005ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	60d3      	str	r3, [r2, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	e000ed00 	.word	0xe000ed00
 8005ce8:	05fa0000 	.word	0x05fa0000

08005cec <__NVIC_GetPriorityGrouping>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cf0:	4b04      	ldr	r3, [pc, #16]	; (8005d04 <__NVIC_GetPriorityGrouping+0x18>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	f003 0307 	and.w	r3, r3, #7
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	e000ed00 	.word	0xe000ed00

08005d08 <__NVIC_EnableIRQ>:
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	db0b      	blt.n	8005d32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	f003 021f 	and.w	r2, r3, #31
 8005d20:	4907      	ldr	r1, [pc, #28]	; (8005d40 <__NVIC_EnableIRQ+0x38>)
 8005d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2001      	movs	r0, #1
 8005d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	e000e100 	.word	0xe000e100

08005d44 <__NVIC_SetPriority>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	6039      	str	r1, [r7, #0]
 8005d4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	db0a      	blt.n	8005d6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	490c      	ldr	r1, [pc, #48]	; (8005d90 <__NVIC_SetPriority+0x4c>)
 8005d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d62:	0112      	lsls	r2, r2, #4
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	440b      	add	r3, r1
 8005d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d6c:	e00a      	b.n	8005d84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	4908      	ldr	r1, [pc, #32]	; (8005d94 <__NVIC_SetPriority+0x50>)
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	3b04      	subs	r3, #4
 8005d7c:	0112      	lsls	r2, r2, #4
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	440b      	add	r3, r1
 8005d82:	761a      	strb	r2, [r3, #24]
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	e000e100 	.word	0xe000e100
 8005d94:	e000ed00 	.word	0xe000ed00

08005d98 <NVIC_EncodePriority>:
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b089      	sub	sp, #36	; 0x24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f1c3 0307 	rsb	r3, r3, #7
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	bf28      	it	cs
 8005db6:	2304      	movcs	r3, #4
 8005db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	2b06      	cmp	r3, #6
 8005dc0:	d902      	bls.n	8005dc8 <NVIC_EncodePriority+0x30>
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	3b03      	subs	r3, #3
 8005dc6:	e000      	b.n	8005dca <NVIC_EncodePriority+0x32>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	43da      	mvns	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	401a      	ands	r2, r3
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005de0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dea:	43d9      	mvns	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df0:	4313      	orrs	r3, r2
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3724      	adds	r7, #36	; 0x24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff ff4c 	bl	8005ca4 <__NVIC_SetPriorityGrouping>
}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e22:	f7ff ff63 	bl	8005cec <__NVIC_GetPriorityGrouping>
 8005e26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	6978      	ldr	r0, [r7, #20]
 8005e2e:	f7ff ffb3 	bl	8005d98 <NVIC_EncodePriority>
 8005e32:	4602      	mov	r2, r0
 8005e34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e38:	4611      	mov	r1, r2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff ff82 	bl	8005d44 <__NVIC_SetPriority>
}
 8005e40:	bf00      	nop
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	4603      	mov	r3, r0
 8005e50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff ff56 	bl	8005d08 <__NVIC_EnableIRQ>
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e014      	b.n	8005ea0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	791b      	ldrb	r3, [r3, #4]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d105      	bne.n	8005e8c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fa feac 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e046      	b.n	8005f4a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	795b      	ldrb	r3, [r3, #5]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_DAC_Start+0x20>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e040      	b.n	8005f4a <HAL_DAC_Start+0xa2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6819      	ldr	r1, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10f      	bne.n	8005f12 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d11d      	bne.n	8005f3c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	605a      	str	r2, [r3, #4]
 8005f10:	e014      	b.n	8005f3c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	2102      	movs	r1, #2
 8005f24:	fa01 f303 	lsl.w	r3, r1, r3
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d107      	bne.n	8005f3c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0202 	orr.w	r2, r2, #2
 8005f3a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0a2      	b.n	80060b6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	795b      	ldrb	r3, [r3, #5]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_DAC_Start_DMA+0x24>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e09c      	b.n	80060b6 <HAL_DAC_Start_DMA+0x15e>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2202      	movs	r2, #2
 8005f86:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d129      	bne.n	8005fe2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	4a4b      	ldr	r2, [pc, #300]	; (80060c0 <HAL_DAC_Start_DMA+0x168>)
 8005f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	4a4a      	ldr	r2, [pc, #296]	; (80060c4 <HAL_DAC_Start_DMA+0x16c>)
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	4a49      	ldr	r2, [pc, #292]	; (80060c8 <HAL_DAC_Start_DMA+0x170>)
 8005fa4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fb4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_DAC_Start_DMA+0x6c>
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d005      	beq.n	8005fce <HAL_DAC_Start_DMA+0x76>
 8005fc2:	e009      	b.n	8005fd8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	613b      	str	r3, [r7, #16]
        break;
 8005fcc:	e033      	b.n	8006036 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	613b      	str	r3, [r7, #16]
        break;
 8005fd6:	e02e      	b.n	8006036 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3310      	adds	r3, #16
 8005fde:	613b      	str	r3, [r7, #16]
        break;
 8005fe0:	e029      	b.n	8006036 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	4a39      	ldr	r2, [pc, #228]	; (80060cc <HAL_DAC_Start_DMA+0x174>)
 8005fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	4a38      	ldr	r2, [pc, #224]	; (80060d0 <HAL_DAC_Start_DMA+0x178>)
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	4a37      	ldr	r2, [pc, #220]	; (80060d4 <HAL_DAC_Start_DMA+0x17c>)
 8005ff8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006008:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_DAC_Start_DMA+0xc0>
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	2b04      	cmp	r3, #4
 8006014:	d005      	beq.n	8006022 <HAL_DAC_Start_DMA+0xca>
 8006016:	e009      	b.n	800602c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3314      	adds	r3, #20
 800601e:	613b      	str	r3, [r7, #16]
        break;
 8006020:	e009      	b.n	8006036 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3318      	adds	r3, #24
 8006028:	613b      	str	r3, [r7, #16]
        break;
 800602a:	e004      	b.n	8006036 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	331c      	adds	r3, #28
 8006032:	613b      	str	r3, [r7, #16]
        break;
 8006034:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d111      	bne.n	8006060 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800604a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6898      	ldr	r0, [r3, #8]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	f000 fe67 	bl	8006d28 <HAL_DMA_Start_IT>
 800605a:	4603      	mov	r3, r0
 800605c:	75fb      	strb	r3, [r7, #23]
 800605e:	e010      	b.n	8006082 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800606e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68d8      	ldr	r0, [r3, #12]
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	f000 fe55 	bl	8006d28 <HAL_DMA_Start_IT>
 800607e:	4603      	mov	r3, r0
 8006080:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10c      	bne.n	80060a8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2201      	movs	r2, #1
 800609c:	409a      	lsls	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e005      	b.n	80060b4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f043 0204 	orr.w	r2, r3, #4
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	08006549 	.word	0x08006549
 80060c4:	0800656b 	.word	0x0800656b
 80060c8:	08006587 	.word	0x08006587
 80060cc:	08006605 	.word	0x08006605
 80060d0:	08006627 	.word	0x08006627
 80060d4:	08006643 	.word	0x08006643

080060d8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e03e      	b.n	800616a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6819      	ldr	r1, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	43da      	mvns	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	400a      	ands	r2, r1
 8006108:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2201      	movs	r2, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	43da      	mvns	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	400a      	ands	r2, r1
 8006124:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10d      	bne.n	8006148 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4618      	mov	r0, r3
 8006132:	f001 f863 	bl	80071fc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	e00c      	b.n	8006162 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	4618      	mov	r0, r3
 800614e:	f001 f855 	bl	80071fc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006160:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006188:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01d      	beq.n	80061d0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d018      	beq.n	80061d0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2204      	movs	r2, #4
 80061a2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f043 0201 	orr.w	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061c8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f86f 	bl	80062ae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01d      	beq.n	8006216 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d018      	beq.n	8006216 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2204      	movs	r2, #4
 80061e8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f043 0202 	orr.w	r2, r3, #2
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80061fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800620e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f9ed 	bl	80065f0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006216:	bf00      	nop
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800621e:	b480      	push	{r7}
 8006220:	b087      	sub	sp, #28
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e015      	b.n	8006266 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d105      	bne.n	8006252 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4413      	add	r3, r2
 800624c:	3308      	adds	r3, #8
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e004      	b.n	800625c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4413      	add	r3, r2
 8006258:	3314      	adds	r3, #20
 800625a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	461a      	mov	r2, r3
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <HAL_DAC_ConfigChannel+0x1e>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e12a      	b.n	800653c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	795b      	ldrb	r3, [r3, #5]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_DAC_ConfigChannel+0x2e>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e124      	b.n	800653c <HAL_DAC_ConfigChannel+0x278>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2202      	movs	r2, #2
 80062fc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b04      	cmp	r3, #4
 8006304:	d17a      	bne.n	80063fc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006306:	f7fe f88b 	bl	8004420 <HAL_GetTick>
 800630a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d13d      	bne.n	800638e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006312:	e018      	b.n	8006346 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006314:	f7fe f884 	bl	8004420 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b01      	cmp	r3, #1
 8006320:	d911      	bls.n	8006346 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006328:	4b86      	ldr	r3, [pc, #536]	; (8006544 <HAL_DAC_ConfigChannel+0x280>)
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f043 0208 	orr.w	r2, r3, #8
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2203      	movs	r2, #3
 8006340:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e0fa      	b.n	800653c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800634c:	4b7d      	ldr	r3, [pc, #500]	; (8006544 <HAL_DAC_ConfigChannel+0x280>)
 800634e:	4013      	ands	r3, r2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1df      	bne.n	8006314 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	6992      	ldr	r2, [r2, #24]
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
 800635e:	e020      	b.n	80063a2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006360:	f7fe f85e 	bl	8004420 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d90f      	bls.n	800638e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	2b00      	cmp	r3, #0
 8006376:	da0a      	bge.n	800638e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f043 0208 	orr.w	r2, r3, #8
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2203      	movs	r2, #3
 8006388:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e0d6      	b.n	800653c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006394:	2b00      	cmp	r3, #0
 8006396:	dbe3      	blt.n	8006360 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	6992      	ldr	r2, [r2, #24]
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80063b2:	fa01 f303 	lsl.w	r3, r1, r3
 80063b6:	43db      	mvns	r3, r3
 80063b8:	ea02 0103 	and.w	r1, r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	409a      	lsls	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f003 0310 	and.w	r3, r3, #16
 80063dc:	21ff      	movs	r1, #255	; 0xff
 80063de:	fa01 f303 	lsl.w	r3, r1, r3
 80063e2:	43db      	mvns	r3, r3
 80063e4:	ea02 0103 	and.w	r1, r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6a1a      	ldr	r2, [r3, #32]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	409a      	lsls	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d11d      	bne.n	8006440 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	221f      	movs	r2, #31
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	43db      	mvns	r3, r3
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	4013      	ands	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	fa02 f303 	lsl.w	r3, r2, r3
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4313      	orrs	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2207      	movs	r2, #7
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4013      	ands	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d102      	bne.n	800646a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006464:	2300      	movs	r3, #0
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
 8006468:	e00f      	b.n	800648a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d102      	bne.n	8006478 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006472:	2301      	movs	r3, #1
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
 8006476:	e008      	b.n	800648a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006480:	2301      	movs	r3, #1
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
 8006484:	e001      	b.n	800648a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006486:	2300      	movs	r3, #0
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	4313      	orrs	r3, r2
 8006494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6819      	ldr	r1, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	43da      	mvns	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	400a      	ands	r2, r1
 80064d0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	43db      	mvns	r3, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4013      	ands	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	4313      	orrs	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6819      	ldr	r1, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	22c0      	movs	r2, #192	; 0xc0
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	43da      	mvns	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	400a      	ands	r2, r1
 800652a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800653c:	4618      	mov	r0, r3
 800653e:	3728      	adds	r7, #40	; 0x28
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20008000 	.word	0x20008000

08006548 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff fe8b 	bl	8006272 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	711a      	strb	r2, [r3, #4]
}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f7ff fe84 	bl	8006286 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800657e:	bf00      	nop
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f043 0204 	orr.w	r2, r3, #4
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7ff fe7a 	bl	800629a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	711a      	strb	r2, [r3, #4]
}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f7ff ffce 	bl	80065b4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2201      	movs	r2, #1
 800661c:	711a      	strb	r2, [r3, #4]
}
 800661e:	bf00      	nop
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff ffc7 	bl	80065c8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f043 0204 	orr.w	r2, r3, #4
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7ff ffbd 	bl	80065dc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2201      	movs	r2, #1
 8006666:	711a      	strb	r2, [r3, #4]
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006678:	f7fd fed2 	bl	8004420 <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e316      	b.n	8006cb6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a66      	ldr	r2, [pc, #408]	; (8006828 <HAL_DMA_Init+0x1b8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d04a      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a65      	ldr	r2, [pc, #404]	; (800682c <HAL_DMA_Init+0x1bc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d045      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a63      	ldr	r2, [pc, #396]	; (8006830 <HAL_DMA_Init+0x1c0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d040      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a62      	ldr	r2, [pc, #392]	; (8006834 <HAL_DMA_Init+0x1c4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d03b      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a60      	ldr	r2, [pc, #384]	; (8006838 <HAL_DMA_Init+0x1c8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d036      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a5f      	ldr	r2, [pc, #380]	; (800683c <HAL_DMA_Init+0x1cc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d031      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a5d      	ldr	r2, [pc, #372]	; (8006840 <HAL_DMA_Init+0x1d0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d02c      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a5c      	ldr	r2, [pc, #368]	; (8006844 <HAL_DMA_Init+0x1d4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d027      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a5a      	ldr	r2, [pc, #360]	; (8006848 <HAL_DMA_Init+0x1d8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d022      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a59      	ldr	r2, [pc, #356]	; (800684c <HAL_DMA_Init+0x1dc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d01d      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a57      	ldr	r2, [pc, #348]	; (8006850 <HAL_DMA_Init+0x1e0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d018      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a56      	ldr	r2, [pc, #344]	; (8006854 <HAL_DMA_Init+0x1e4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a54      	ldr	r2, [pc, #336]	; (8006858 <HAL_DMA_Init+0x1e8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00e      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a53      	ldr	r2, [pc, #332]	; (800685c <HAL_DMA_Init+0x1ec>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d009      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a51      	ldr	r2, [pc, #324]	; (8006860 <HAL_DMA_Init+0x1f0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <HAL_DMA_Init+0xb8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a50      	ldr	r2, [pc, #320]	; (8006864 <HAL_DMA_Init+0x1f4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d101      	bne.n	800672c <HAL_DMA_Init+0xbc>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <HAL_DMA_Init+0xbe>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 813b 	beq.w	80069aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a37      	ldr	r2, [pc, #220]	; (8006828 <HAL_DMA_Init+0x1b8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d04a      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a36      	ldr	r2, [pc, #216]	; (800682c <HAL_DMA_Init+0x1bc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d045      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a34      	ldr	r2, [pc, #208]	; (8006830 <HAL_DMA_Init+0x1c0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d040      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a33      	ldr	r2, [pc, #204]	; (8006834 <HAL_DMA_Init+0x1c4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d03b      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a31      	ldr	r2, [pc, #196]	; (8006838 <HAL_DMA_Init+0x1c8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d036      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a30      	ldr	r2, [pc, #192]	; (800683c <HAL_DMA_Init+0x1cc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d031      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a2e      	ldr	r2, [pc, #184]	; (8006840 <HAL_DMA_Init+0x1d0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d02c      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2d      	ldr	r2, [pc, #180]	; (8006844 <HAL_DMA_Init+0x1d4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d027      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a2b      	ldr	r2, [pc, #172]	; (8006848 <HAL_DMA_Init+0x1d8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d022      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a2a      	ldr	r2, [pc, #168]	; (800684c <HAL_DMA_Init+0x1dc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d01d      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a28      	ldr	r2, [pc, #160]	; (8006850 <HAL_DMA_Init+0x1e0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a27      	ldr	r2, [pc, #156]	; (8006854 <HAL_DMA_Init+0x1e4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a25      	ldr	r2, [pc, #148]	; (8006858 <HAL_DMA_Init+0x1e8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a24      	ldr	r2, [pc, #144]	; (800685c <HAL_DMA_Init+0x1ec>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a22      	ldr	r2, [pc, #136]	; (8006860 <HAL_DMA_Init+0x1f0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_DMA_Init+0x174>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a21      	ldr	r2, [pc, #132]	; (8006864 <HAL_DMA_Init+0x1f4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d108      	bne.n	80067f6 <HAL_DMA_Init+0x186>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e007      	b.n	8006806 <HAL_DMA_Init+0x196>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0201 	bic.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006806:	e02f      	b.n	8006868 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006808:	f7fd fe0a 	bl	8004420 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b05      	cmp	r3, #5
 8006814:	d928      	bls.n	8006868 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2203      	movs	r2, #3
 8006820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e246      	b.n	8006cb6 <HAL_DMA_Init+0x646>
 8006828:	40020010 	.word	0x40020010
 800682c:	40020028 	.word	0x40020028
 8006830:	40020040 	.word	0x40020040
 8006834:	40020058 	.word	0x40020058
 8006838:	40020070 	.word	0x40020070
 800683c:	40020088 	.word	0x40020088
 8006840:	400200a0 	.word	0x400200a0
 8006844:	400200b8 	.word	0x400200b8
 8006848:	40020410 	.word	0x40020410
 800684c:	40020428 	.word	0x40020428
 8006850:	40020440 	.word	0x40020440
 8006854:	40020458 	.word	0x40020458
 8006858:	40020470 	.word	0x40020470
 800685c:	40020488 	.word	0x40020488
 8006860:	400204a0 	.word	0x400204a0
 8006864:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1c8      	bne.n	8006808 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4b83      	ldr	r3, [pc, #524]	; (8006a90 <HAL_DMA_Init+0x420>)
 8006882:	4013      	ands	r3, r2
 8006884:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800688e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800689a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d107      	bne.n	80068cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	4313      	orrs	r3, r2
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80068cc:	4b71      	ldr	r3, [pc, #452]	; (8006a94 <HAL_DMA_Init+0x424>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	4b71      	ldr	r3, [pc, #452]	; (8006a98 <HAL_DMA_Init+0x428>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068d8:	d328      	bcc.n	800692c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b28      	cmp	r3, #40	; 0x28
 80068e0:	d903      	bls.n	80068ea <HAL_DMA_Init+0x27a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b2e      	cmp	r3, #46	; 0x2e
 80068e8:	d917      	bls.n	800691a <HAL_DMA_Init+0x2aa>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b3e      	cmp	r3, #62	; 0x3e
 80068f0:	d903      	bls.n	80068fa <HAL_DMA_Init+0x28a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b42      	cmp	r3, #66	; 0x42
 80068f8:	d90f      	bls.n	800691a <HAL_DMA_Init+0x2aa>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b46      	cmp	r3, #70	; 0x46
 8006900:	d903      	bls.n	800690a <HAL_DMA_Init+0x29a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b48      	cmp	r3, #72	; 0x48
 8006908:	d907      	bls.n	800691a <HAL_DMA_Init+0x2aa>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b4e      	cmp	r3, #78	; 0x4e
 8006910:	d905      	bls.n	800691e <HAL_DMA_Init+0x2ae>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b52      	cmp	r3, #82	; 0x52
 8006918:	d801      	bhi.n	800691e <HAL_DMA_Init+0x2ae>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <HAL_DMA_Init+0x2b0>
 800691e:	2300      	movs	r3, #0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800692a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f023 0307 	bic.w	r3, r3, #7
 8006942:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	2b04      	cmp	r3, #4
 8006954:	d117      	bne.n	8006986 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f002 fb3f 	bl	8008fec <DMA_CheckFifoParam>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2240      	movs	r2, #64	; 0x40
 8006978:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e197      	b.n	8006cb6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f002 fa7a 	bl	8008e88 <DMA_CalcBaseAndBitshift>
 8006994:	4603      	mov	r3, r0
 8006996:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	223f      	movs	r2, #63	; 0x3f
 80069a2:	409a      	lsls	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	609a      	str	r2, [r3, #8]
 80069a8:	e0cd      	b.n	8006b46 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a3b      	ldr	r2, [pc, #236]	; (8006a9c <HAL_DMA_Init+0x42c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d022      	beq.n	80069fa <HAL_DMA_Init+0x38a>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a39      	ldr	r2, [pc, #228]	; (8006aa0 <HAL_DMA_Init+0x430>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01d      	beq.n	80069fa <HAL_DMA_Init+0x38a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a38      	ldr	r2, [pc, #224]	; (8006aa4 <HAL_DMA_Init+0x434>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d018      	beq.n	80069fa <HAL_DMA_Init+0x38a>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a36      	ldr	r2, [pc, #216]	; (8006aa8 <HAL_DMA_Init+0x438>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_DMA_Init+0x38a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a35      	ldr	r2, [pc, #212]	; (8006aac <HAL_DMA_Init+0x43c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_DMA_Init+0x38a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a33      	ldr	r2, [pc, #204]	; (8006ab0 <HAL_DMA_Init+0x440>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_DMA_Init+0x38a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a32      	ldr	r2, [pc, #200]	; (8006ab4 <HAL_DMA_Init+0x444>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_DMA_Init+0x38a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a30      	ldr	r2, [pc, #192]	; (8006ab8 <HAL_DMA_Init+0x448>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d101      	bne.n	80069fe <HAL_DMA_Init+0x38e>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <HAL_DMA_Init+0x390>
 80069fe:	2300      	movs	r3, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8097 	beq.w	8006b34 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a24      	ldr	r2, [pc, #144]	; (8006a9c <HAL_DMA_Init+0x42c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d021      	beq.n	8006a54 <HAL_DMA_Init+0x3e4>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a22      	ldr	r2, [pc, #136]	; (8006aa0 <HAL_DMA_Init+0x430>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01c      	beq.n	8006a54 <HAL_DMA_Init+0x3e4>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a21      	ldr	r2, [pc, #132]	; (8006aa4 <HAL_DMA_Init+0x434>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d017      	beq.n	8006a54 <HAL_DMA_Init+0x3e4>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <HAL_DMA_Init+0x438>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d012      	beq.n	8006a54 <HAL_DMA_Init+0x3e4>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1e      	ldr	r2, [pc, #120]	; (8006aac <HAL_DMA_Init+0x43c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00d      	beq.n	8006a54 <HAL_DMA_Init+0x3e4>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1c      	ldr	r2, [pc, #112]	; (8006ab0 <HAL_DMA_Init+0x440>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d008      	beq.n	8006a54 <HAL_DMA_Init+0x3e4>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1b      	ldr	r2, [pc, #108]	; (8006ab4 <HAL_DMA_Init+0x444>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <HAL_DMA_Init+0x3e4>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a19      	ldr	r2, [pc, #100]	; (8006ab8 <HAL_DMA_Init+0x448>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4b12      	ldr	r3, [pc, #72]	; (8006abc <HAL_DMA_Init+0x44c>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b40      	cmp	r3, #64	; 0x40
 8006a7c:	d020      	beq.n	8006ac0 <HAL_DMA_Init+0x450>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b80      	cmp	r3, #128	; 0x80
 8006a84:	d102      	bne.n	8006a8c <HAL_DMA_Init+0x41c>
 8006a86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a8a:	e01a      	b.n	8006ac2 <HAL_DMA_Init+0x452>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	e018      	b.n	8006ac2 <HAL_DMA_Init+0x452>
 8006a90:	fe10803f 	.word	0xfe10803f
 8006a94:	5c001000 	.word	0x5c001000
 8006a98:	ffff0000 	.word	0xffff0000
 8006a9c:	58025408 	.word	0x58025408
 8006aa0:	5802541c 	.word	0x5802541c
 8006aa4:	58025430 	.word	0x58025430
 8006aa8:	58025444 	.word	0x58025444
 8006aac:	58025458 	.word	0x58025458
 8006ab0:	5802546c 	.word	0x5802546c
 8006ab4:	58025480 	.word	0x58025480
 8006ab8:	58025494 	.word	0x58025494
 8006abc:	fffe000f 	.word	0xfffe000f
 8006ac0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	68d2      	ldr	r2, [r2, #12]
 8006ac6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006ac8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006ad0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006ad8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006ae0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006ae8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006af0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	4b6e      	ldr	r3, [pc, #440]	; (8006cc0 <HAL_DMA_Init+0x650>)
 8006b08:	4413      	add	r3, r2
 8006b0a:	4a6e      	ldr	r2, [pc, #440]	; (8006cc4 <HAL_DMA_Init+0x654>)
 8006b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	009a      	lsls	r2, r3, #2
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f002 f9b5 	bl	8008e88 <DMA_CalcBaseAndBitshift>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	605a      	str	r2, [r3, #4]
 8006b32:	e008      	b.n	8006b46 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2240      	movs	r2, #64	; 0x40
 8006b38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e0b7      	b.n	8006cb6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a5f      	ldr	r2, [pc, #380]	; (8006cc8 <HAL_DMA_Init+0x658>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d072      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a5d      	ldr	r2, [pc, #372]	; (8006ccc <HAL_DMA_Init+0x65c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d06d      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a5c      	ldr	r2, [pc, #368]	; (8006cd0 <HAL_DMA_Init+0x660>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d068      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a5a      	ldr	r2, [pc, #360]	; (8006cd4 <HAL_DMA_Init+0x664>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d063      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a59      	ldr	r2, [pc, #356]	; (8006cd8 <HAL_DMA_Init+0x668>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d05e      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a57      	ldr	r2, [pc, #348]	; (8006cdc <HAL_DMA_Init+0x66c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d059      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a56      	ldr	r2, [pc, #344]	; (8006ce0 <HAL_DMA_Init+0x670>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d054      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a54      	ldr	r2, [pc, #336]	; (8006ce4 <HAL_DMA_Init+0x674>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d04f      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a53      	ldr	r2, [pc, #332]	; (8006ce8 <HAL_DMA_Init+0x678>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d04a      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a51      	ldr	r2, [pc, #324]	; (8006cec <HAL_DMA_Init+0x67c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d045      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a50      	ldr	r2, [pc, #320]	; (8006cf0 <HAL_DMA_Init+0x680>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d040      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a4e      	ldr	r2, [pc, #312]	; (8006cf4 <HAL_DMA_Init+0x684>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d03b      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a4d      	ldr	r2, [pc, #308]	; (8006cf8 <HAL_DMA_Init+0x688>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d036      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a4b      	ldr	r2, [pc, #300]	; (8006cfc <HAL_DMA_Init+0x68c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d031      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a4a      	ldr	r2, [pc, #296]	; (8006d00 <HAL_DMA_Init+0x690>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d02c      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a48      	ldr	r2, [pc, #288]	; (8006d04 <HAL_DMA_Init+0x694>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d027      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a47      	ldr	r2, [pc, #284]	; (8006d08 <HAL_DMA_Init+0x698>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d022      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a45      	ldr	r2, [pc, #276]	; (8006d0c <HAL_DMA_Init+0x69c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d01d      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a44      	ldr	r2, [pc, #272]	; (8006d10 <HAL_DMA_Init+0x6a0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d018      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a42      	ldr	r2, [pc, #264]	; (8006d14 <HAL_DMA_Init+0x6a4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d013      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a41      	ldr	r2, [pc, #260]	; (8006d18 <HAL_DMA_Init+0x6a8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00e      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a3f      	ldr	r2, [pc, #252]	; (8006d1c <HAL_DMA_Init+0x6ac>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d009      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a3e      	ldr	r2, [pc, #248]	; (8006d20 <HAL_DMA_Init+0x6b0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d004      	beq.n	8006c36 <HAL_DMA_Init+0x5c6>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a3c      	ldr	r2, [pc, #240]	; (8006d24 <HAL_DMA_Init+0x6b4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d101      	bne.n	8006c3a <HAL_DMA_Init+0x5ca>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <HAL_DMA_Init+0x5cc>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d032      	beq.n	8006ca6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f002 fa4f 	bl	80090e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2b80      	cmp	r3, #128	; 0x80
 8006c4c:	d102      	bne.n	8006c54 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d010      	beq.n	8006c94 <HAL_DMA_Init+0x624>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d80c      	bhi.n	8006c94 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f002 facc 	bl	8009218 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	e008      	b.n	8006ca6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	a7fdabf8 	.word	0xa7fdabf8
 8006cc4:	cccccccd 	.word	0xcccccccd
 8006cc8:	40020010 	.word	0x40020010
 8006ccc:	40020028 	.word	0x40020028
 8006cd0:	40020040 	.word	0x40020040
 8006cd4:	40020058 	.word	0x40020058
 8006cd8:	40020070 	.word	0x40020070
 8006cdc:	40020088 	.word	0x40020088
 8006ce0:	400200a0 	.word	0x400200a0
 8006ce4:	400200b8 	.word	0x400200b8
 8006ce8:	40020410 	.word	0x40020410
 8006cec:	40020428 	.word	0x40020428
 8006cf0:	40020440 	.word	0x40020440
 8006cf4:	40020458 	.word	0x40020458
 8006cf8:	40020470 	.word	0x40020470
 8006cfc:	40020488 	.word	0x40020488
 8006d00:	400204a0 	.word	0x400204a0
 8006d04:	400204b8 	.word	0x400204b8
 8006d08:	58025408 	.word	0x58025408
 8006d0c:	5802541c 	.word	0x5802541c
 8006d10:	58025430 	.word	0x58025430
 8006d14:	58025444 	.word	0x58025444
 8006d18:	58025458 	.word	0x58025458
 8006d1c:	5802546c 	.word	0x5802546c
 8006d20:	58025480 	.word	0x58025480
 8006d24:	58025494 	.word	0x58025494

08006d28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e226      	b.n	8007192 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_DMA_Start_IT+0x2a>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e21f      	b.n	8007192 <HAL_DMA_Start_IT+0x46a>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	f040 820a 	bne.w	800717c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a68      	ldr	r2, [pc, #416]	; (8006f1c <HAL_DMA_Start_IT+0x1f4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d04a      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a66      	ldr	r2, [pc, #408]	; (8006f20 <HAL_DMA_Start_IT+0x1f8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d045      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a65      	ldr	r2, [pc, #404]	; (8006f24 <HAL_DMA_Start_IT+0x1fc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d040      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a63      	ldr	r2, [pc, #396]	; (8006f28 <HAL_DMA_Start_IT+0x200>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d03b      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a62      	ldr	r2, [pc, #392]	; (8006f2c <HAL_DMA_Start_IT+0x204>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d036      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a60      	ldr	r2, [pc, #384]	; (8006f30 <HAL_DMA_Start_IT+0x208>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d031      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a5f      	ldr	r2, [pc, #380]	; (8006f34 <HAL_DMA_Start_IT+0x20c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d02c      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a5d      	ldr	r2, [pc, #372]	; (8006f38 <HAL_DMA_Start_IT+0x210>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d027      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a5c      	ldr	r2, [pc, #368]	; (8006f3c <HAL_DMA_Start_IT+0x214>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d022      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a5a      	ldr	r2, [pc, #360]	; (8006f40 <HAL_DMA_Start_IT+0x218>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01d      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a59      	ldr	r2, [pc, #356]	; (8006f44 <HAL_DMA_Start_IT+0x21c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d018      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a57      	ldr	r2, [pc, #348]	; (8006f48 <HAL_DMA_Start_IT+0x220>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d013      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a56      	ldr	r2, [pc, #344]	; (8006f4c <HAL_DMA_Start_IT+0x224>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00e      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a54      	ldr	r2, [pc, #336]	; (8006f50 <HAL_DMA_Start_IT+0x228>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d009      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a53      	ldr	r2, [pc, #332]	; (8006f54 <HAL_DMA_Start_IT+0x22c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d004      	beq.n	8006e16 <HAL_DMA_Start_IT+0xee>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a51      	ldr	r2, [pc, #324]	; (8006f58 <HAL_DMA_Start_IT+0x230>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d108      	bne.n	8006e28 <HAL_DMA_Start_IT+0x100>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e007      	b.n	8006e38 <HAL_DMA_Start_IT+0x110>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0201 	bic.w	r2, r2, #1
 8006e36:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f001 fe76 	bl	8008b30 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a34      	ldr	r2, [pc, #208]	; (8006f1c <HAL_DMA_Start_IT+0x1f4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d04a      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a33      	ldr	r2, [pc, #204]	; (8006f20 <HAL_DMA_Start_IT+0x1f8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d045      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a31      	ldr	r2, [pc, #196]	; (8006f24 <HAL_DMA_Start_IT+0x1fc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d040      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a30      	ldr	r2, [pc, #192]	; (8006f28 <HAL_DMA_Start_IT+0x200>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d03b      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a2e      	ldr	r2, [pc, #184]	; (8006f2c <HAL_DMA_Start_IT+0x204>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d036      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a2d      	ldr	r2, [pc, #180]	; (8006f30 <HAL_DMA_Start_IT+0x208>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d031      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a2b      	ldr	r2, [pc, #172]	; (8006f34 <HAL_DMA_Start_IT+0x20c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d02c      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a2a      	ldr	r2, [pc, #168]	; (8006f38 <HAL_DMA_Start_IT+0x210>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d027      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a28      	ldr	r2, [pc, #160]	; (8006f3c <HAL_DMA_Start_IT+0x214>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d022      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a27      	ldr	r2, [pc, #156]	; (8006f40 <HAL_DMA_Start_IT+0x218>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d01d      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a25      	ldr	r2, [pc, #148]	; (8006f44 <HAL_DMA_Start_IT+0x21c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d018      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a24      	ldr	r2, [pc, #144]	; (8006f48 <HAL_DMA_Start_IT+0x220>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d013      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a22      	ldr	r2, [pc, #136]	; (8006f4c <HAL_DMA_Start_IT+0x224>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00e      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <HAL_DMA_Start_IT+0x228>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d009      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1f      	ldr	r2, [pc, #124]	; (8006f54 <HAL_DMA_Start_IT+0x22c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d004      	beq.n	8006ee4 <HAL_DMA_Start_IT+0x1bc>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <HAL_DMA_Start_IT+0x230>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d101      	bne.n	8006ee8 <HAL_DMA_Start_IT+0x1c0>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e000      	b.n	8006eea <HAL_DMA_Start_IT+0x1c2>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d036      	beq.n	8006f5c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f023 021e 	bic.w	r2, r3, #30
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0216 	orr.w	r2, r2, #22
 8006f00:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d03e      	beq.n	8006f88 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f042 0208 	orr.w	r2, r2, #8
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	e035      	b.n	8006f88 <HAL_DMA_Start_IT+0x260>
 8006f1c:	40020010 	.word	0x40020010
 8006f20:	40020028 	.word	0x40020028
 8006f24:	40020040 	.word	0x40020040
 8006f28:	40020058 	.word	0x40020058
 8006f2c:	40020070 	.word	0x40020070
 8006f30:	40020088 	.word	0x40020088
 8006f34:	400200a0 	.word	0x400200a0
 8006f38:	400200b8 	.word	0x400200b8
 8006f3c:	40020410 	.word	0x40020410
 8006f40:	40020428 	.word	0x40020428
 8006f44:	40020440 	.word	0x40020440
 8006f48:	40020458 	.word	0x40020458
 8006f4c:	40020470 	.word	0x40020470
 8006f50:	40020488 	.word	0x40020488
 8006f54:	400204a0 	.word	0x400204a0
 8006f58:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f023 020e 	bic.w	r2, r3, #14
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 020a 	orr.w	r2, r2, #10
 8006f6e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0204 	orr.w	r2, r2, #4
 8006f86:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a83      	ldr	r2, [pc, #524]	; (800719c <HAL_DMA_Start_IT+0x474>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d072      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a82      	ldr	r2, [pc, #520]	; (80071a0 <HAL_DMA_Start_IT+0x478>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d06d      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a80      	ldr	r2, [pc, #512]	; (80071a4 <HAL_DMA_Start_IT+0x47c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d068      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a7f      	ldr	r2, [pc, #508]	; (80071a8 <HAL_DMA_Start_IT+0x480>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d063      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a7d      	ldr	r2, [pc, #500]	; (80071ac <HAL_DMA_Start_IT+0x484>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d05e      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a7c      	ldr	r2, [pc, #496]	; (80071b0 <HAL_DMA_Start_IT+0x488>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d059      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a7a      	ldr	r2, [pc, #488]	; (80071b4 <HAL_DMA_Start_IT+0x48c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d054      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a79      	ldr	r2, [pc, #484]	; (80071b8 <HAL_DMA_Start_IT+0x490>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d04f      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a77      	ldr	r2, [pc, #476]	; (80071bc <HAL_DMA_Start_IT+0x494>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d04a      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a76      	ldr	r2, [pc, #472]	; (80071c0 <HAL_DMA_Start_IT+0x498>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d045      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a74      	ldr	r2, [pc, #464]	; (80071c4 <HAL_DMA_Start_IT+0x49c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d040      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a73      	ldr	r2, [pc, #460]	; (80071c8 <HAL_DMA_Start_IT+0x4a0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d03b      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a71      	ldr	r2, [pc, #452]	; (80071cc <HAL_DMA_Start_IT+0x4a4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d036      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a70      	ldr	r2, [pc, #448]	; (80071d0 <HAL_DMA_Start_IT+0x4a8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d031      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a6e      	ldr	r2, [pc, #440]	; (80071d4 <HAL_DMA_Start_IT+0x4ac>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d02c      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a6d      	ldr	r2, [pc, #436]	; (80071d8 <HAL_DMA_Start_IT+0x4b0>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d027      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a6b      	ldr	r2, [pc, #428]	; (80071dc <HAL_DMA_Start_IT+0x4b4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d022      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a6a      	ldr	r2, [pc, #424]	; (80071e0 <HAL_DMA_Start_IT+0x4b8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d01d      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a68      	ldr	r2, [pc, #416]	; (80071e4 <HAL_DMA_Start_IT+0x4bc>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d018      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a67      	ldr	r2, [pc, #412]	; (80071e8 <HAL_DMA_Start_IT+0x4c0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a65      	ldr	r2, [pc, #404]	; (80071ec <HAL_DMA_Start_IT+0x4c4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00e      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a64      	ldr	r2, [pc, #400]	; (80071f0 <HAL_DMA_Start_IT+0x4c8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d009      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a62      	ldr	r2, [pc, #392]	; (80071f4 <HAL_DMA_Start_IT+0x4cc>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d004      	beq.n	8007078 <HAL_DMA_Start_IT+0x350>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a61      	ldr	r2, [pc, #388]	; (80071f8 <HAL_DMA_Start_IT+0x4d0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d101      	bne.n	800707c <HAL_DMA_Start_IT+0x354>
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <HAL_DMA_Start_IT+0x356>
 800707c:	2300      	movs	r3, #0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01a      	beq.n	80070b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d007      	beq.n	80070a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800709a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800709e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d007      	beq.n	80070b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a37      	ldr	r2, [pc, #220]	; (800719c <HAL_DMA_Start_IT+0x474>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d04a      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a36      	ldr	r2, [pc, #216]	; (80071a0 <HAL_DMA_Start_IT+0x478>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d045      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a34      	ldr	r2, [pc, #208]	; (80071a4 <HAL_DMA_Start_IT+0x47c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d040      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a33      	ldr	r2, [pc, #204]	; (80071a8 <HAL_DMA_Start_IT+0x480>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d03b      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a31      	ldr	r2, [pc, #196]	; (80071ac <HAL_DMA_Start_IT+0x484>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d036      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a30      	ldr	r2, [pc, #192]	; (80071b0 <HAL_DMA_Start_IT+0x488>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d031      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2e      	ldr	r2, [pc, #184]	; (80071b4 <HAL_DMA_Start_IT+0x48c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d02c      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2d      	ldr	r2, [pc, #180]	; (80071b8 <HAL_DMA_Start_IT+0x490>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d027      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2b      	ldr	r2, [pc, #172]	; (80071bc <HAL_DMA_Start_IT+0x494>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d022      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2a      	ldr	r2, [pc, #168]	; (80071c0 <HAL_DMA_Start_IT+0x498>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d01d      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a28      	ldr	r2, [pc, #160]	; (80071c4 <HAL_DMA_Start_IT+0x49c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d018      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a27      	ldr	r2, [pc, #156]	; (80071c8 <HAL_DMA_Start_IT+0x4a0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d013      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a25      	ldr	r2, [pc, #148]	; (80071cc <HAL_DMA_Start_IT+0x4a4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00e      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a24      	ldr	r2, [pc, #144]	; (80071d0 <HAL_DMA_Start_IT+0x4a8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d009      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a22      	ldr	r2, [pc, #136]	; (80071d4 <HAL_DMA_Start_IT+0x4ac>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d004      	beq.n	8007158 <HAL_DMA_Start_IT+0x430>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a21      	ldr	r2, [pc, #132]	; (80071d8 <HAL_DMA_Start_IT+0x4b0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d108      	bne.n	800716a <HAL_DMA_Start_IT+0x442>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e012      	b.n	8007190 <HAL_DMA_Start_IT+0x468>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f042 0201 	orr.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e009      	b.n	8007190 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007182:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40020010 	.word	0x40020010
 80071a0:	40020028 	.word	0x40020028
 80071a4:	40020040 	.word	0x40020040
 80071a8:	40020058 	.word	0x40020058
 80071ac:	40020070 	.word	0x40020070
 80071b0:	40020088 	.word	0x40020088
 80071b4:	400200a0 	.word	0x400200a0
 80071b8:	400200b8 	.word	0x400200b8
 80071bc:	40020410 	.word	0x40020410
 80071c0:	40020428 	.word	0x40020428
 80071c4:	40020440 	.word	0x40020440
 80071c8:	40020458 	.word	0x40020458
 80071cc:	40020470 	.word	0x40020470
 80071d0:	40020488 	.word	0x40020488
 80071d4:	400204a0 	.word	0x400204a0
 80071d8:	400204b8 	.word	0x400204b8
 80071dc:	58025408 	.word	0x58025408
 80071e0:	5802541c 	.word	0x5802541c
 80071e4:	58025430 	.word	0x58025430
 80071e8:	58025444 	.word	0x58025444
 80071ec:	58025458 	.word	0x58025458
 80071f0:	5802546c 	.word	0x5802546c
 80071f4:	58025480 	.word	0x58025480
 80071f8:	58025494 	.word	0x58025494

080071fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007204:	f7fd f90c 	bl	8004420 <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e2dc      	b.n	80077ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d008      	beq.n	8007232 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2280      	movs	r2, #128	; 0x80
 8007224:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e2cd      	b.n	80077ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a76      	ldr	r2, [pc, #472]	; (8007410 <HAL_DMA_Abort+0x214>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d04a      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a74      	ldr	r2, [pc, #464]	; (8007414 <HAL_DMA_Abort+0x218>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d045      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a73      	ldr	r2, [pc, #460]	; (8007418 <HAL_DMA_Abort+0x21c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d040      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a71      	ldr	r2, [pc, #452]	; (800741c <HAL_DMA_Abort+0x220>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d03b      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a70      	ldr	r2, [pc, #448]	; (8007420 <HAL_DMA_Abort+0x224>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d036      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a6e      	ldr	r2, [pc, #440]	; (8007424 <HAL_DMA_Abort+0x228>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d031      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a6d      	ldr	r2, [pc, #436]	; (8007428 <HAL_DMA_Abort+0x22c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d02c      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a6b      	ldr	r2, [pc, #428]	; (800742c <HAL_DMA_Abort+0x230>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d027      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a6a      	ldr	r2, [pc, #424]	; (8007430 <HAL_DMA_Abort+0x234>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d022      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a68      	ldr	r2, [pc, #416]	; (8007434 <HAL_DMA_Abort+0x238>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d01d      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a67      	ldr	r2, [pc, #412]	; (8007438 <HAL_DMA_Abort+0x23c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d018      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a65      	ldr	r2, [pc, #404]	; (800743c <HAL_DMA_Abort+0x240>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d013      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a64      	ldr	r2, [pc, #400]	; (8007440 <HAL_DMA_Abort+0x244>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d00e      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a62      	ldr	r2, [pc, #392]	; (8007444 <HAL_DMA_Abort+0x248>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d009      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a61      	ldr	r2, [pc, #388]	; (8007448 <HAL_DMA_Abort+0x24c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d004      	beq.n	80072d2 <HAL_DMA_Abort+0xd6>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a5f      	ldr	r2, [pc, #380]	; (800744c <HAL_DMA_Abort+0x250>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d101      	bne.n	80072d6 <HAL_DMA_Abort+0xda>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <HAL_DMA_Abort+0xdc>
 80072d6:	2300      	movs	r3, #0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d013      	beq.n	8007304 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 021e 	bic.w	r2, r2, #30
 80072ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e00a      	b.n	800731a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 020e 	bic.w	r2, r2, #14
 8007312:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a3c      	ldr	r2, [pc, #240]	; (8007410 <HAL_DMA_Abort+0x214>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d072      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a3a      	ldr	r2, [pc, #232]	; (8007414 <HAL_DMA_Abort+0x218>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d06d      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a39      	ldr	r2, [pc, #228]	; (8007418 <HAL_DMA_Abort+0x21c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d068      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a37      	ldr	r2, [pc, #220]	; (800741c <HAL_DMA_Abort+0x220>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d063      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a36      	ldr	r2, [pc, #216]	; (8007420 <HAL_DMA_Abort+0x224>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d05e      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a34      	ldr	r2, [pc, #208]	; (8007424 <HAL_DMA_Abort+0x228>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d059      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a33      	ldr	r2, [pc, #204]	; (8007428 <HAL_DMA_Abort+0x22c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d054      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a31      	ldr	r2, [pc, #196]	; (800742c <HAL_DMA_Abort+0x230>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d04f      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a30      	ldr	r2, [pc, #192]	; (8007430 <HAL_DMA_Abort+0x234>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d04a      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2e      	ldr	r2, [pc, #184]	; (8007434 <HAL_DMA_Abort+0x238>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d045      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2d      	ldr	r2, [pc, #180]	; (8007438 <HAL_DMA_Abort+0x23c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d040      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a2b      	ldr	r2, [pc, #172]	; (800743c <HAL_DMA_Abort+0x240>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d03b      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2a      	ldr	r2, [pc, #168]	; (8007440 <HAL_DMA_Abort+0x244>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d036      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a28      	ldr	r2, [pc, #160]	; (8007444 <HAL_DMA_Abort+0x248>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d031      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a27      	ldr	r2, [pc, #156]	; (8007448 <HAL_DMA_Abort+0x24c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d02c      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a25      	ldr	r2, [pc, #148]	; (800744c <HAL_DMA_Abort+0x250>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d027      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a24      	ldr	r2, [pc, #144]	; (8007450 <HAL_DMA_Abort+0x254>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d022      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a22      	ldr	r2, [pc, #136]	; (8007454 <HAL_DMA_Abort+0x258>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01d      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a21      	ldr	r2, [pc, #132]	; (8007458 <HAL_DMA_Abort+0x25c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d018      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1f      	ldr	r2, [pc, #124]	; (800745c <HAL_DMA_Abort+0x260>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d013      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1e      	ldr	r2, [pc, #120]	; (8007460 <HAL_DMA_Abort+0x264>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00e      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1c      	ldr	r2, [pc, #112]	; (8007464 <HAL_DMA_Abort+0x268>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d009      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1b      	ldr	r2, [pc, #108]	; (8007468 <HAL_DMA_Abort+0x26c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <HAL_DMA_Abort+0x20e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a19      	ldr	r2, [pc, #100]	; (800746c <HAL_DMA_Abort+0x270>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d132      	bne.n	8007470 <HAL_DMA_Abort+0x274>
 800740a:	2301      	movs	r3, #1
 800740c:	e031      	b.n	8007472 <HAL_DMA_Abort+0x276>
 800740e:	bf00      	nop
 8007410:	40020010 	.word	0x40020010
 8007414:	40020028 	.word	0x40020028
 8007418:	40020040 	.word	0x40020040
 800741c:	40020058 	.word	0x40020058
 8007420:	40020070 	.word	0x40020070
 8007424:	40020088 	.word	0x40020088
 8007428:	400200a0 	.word	0x400200a0
 800742c:	400200b8 	.word	0x400200b8
 8007430:	40020410 	.word	0x40020410
 8007434:	40020428 	.word	0x40020428
 8007438:	40020440 	.word	0x40020440
 800743c:	40020458 	.word	0x40020458
 8007440:	40020470 	.word	0x40020470
 8007444:	40020488 	.word	0x40020488
 8007448:	400204a0 	.word	0x400204a0
 800744c:	400204b8 	.word	0x400204b8
 8007450:	58025408 	.word	0x58025408
 8007454:	5802541c 	.word	0x5802541c
 8007458:	58025430 	.word	0x58025430
 800745c:	58025444 	.word	0x58025444
 8007460:	58025458 	.word	0x58025458
 8007464:	5802546c 	.word	0x5802546c
 8007468:	58025480 	.word	0x58025480
 800746c:	58025494 	.word	0x58025494
 8007470:	2300      	movs	r3, #0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d007      	beq.n	8007486 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007484:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a6d      	ldr	r2, [pc, #436]	; (8007640 <HAL_DMA_Abort+0x444>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d04a      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a6b      	ldr	r2, [pc, #428]	; (8007644 <HAL_DMA_Abort+0x448>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d045      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a6a      	ldr	r2, [pc, #424]	; (8007648 <HAL_DMA_Abort+0x44c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d040      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a68      	ldr	r2, [pc, #416]	; (800764c <HAL_DMA_Abort+0x450>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d03b      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a67      	ldr	r2, [pc, #412]	; (8007650 <HAL_DMA_Abort+0x454>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d036      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a65      	ldr	r2, [pc, #404]	; (8007654 <HAL_DMA_Abort+0x458>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d031      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a64      	ldr	r2, [pc, #400]	; (8007658 <HAL_DMA_Abort+0x45c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d02c      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a62      	ldr	r2, [pc, #392]	; (800765c <HAL_DMA_Abort+0x460>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d027      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a61      	ldr	r2, [pc, #388]	; (8007660 <HAL_DMA_Abort+0x464>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d022      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a5f      	ldr	r2, [pc, #380]	; (8007664 <HAL_DMA_Abort+0x468>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d01d      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a5e      	ldr	r2, [pc, #376]	; (8007668 <HAL_DMA_Abort+0x46c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d018      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a5c      	ldr	r2, [pc, #368]	; (800766c <HAL_DMA_Abort+0x470>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d013      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a5b      	ldr	r2, [pc, #364]	; (8007670 <HAL_DMA_Abort+0x474>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00e      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a59      	ldr	r2, [pc, #356]	; (8007674 <HAL_DMA_Abort+0x478>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d009      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a58      	ldr	r2, [pc, #352]	; (8007678 <HAL_DMA_Abort+0x47c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d004      	beq.n	8007526 <HAL_DMA_Abort+0x32a>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a56      	ldr	r2, [pc, #344]	; (800767c <HAL_DMA_Abort+0x480>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d108      	bne.n	8007538 <HAL_DMA_Abort+0x33c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0201 	bic.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	e007      	b.n	8007548 <HAL_DMA_Abort+0x34c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0201 	bic.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007548:	e013      	b.n	8007572 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800754a:	f7fc ff69 	bl	8004420 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b05      	cmp	r3, #5
 8007556:	d90c      	bls.n	8007572 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2220      	movs	r2, #32
 800755c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2203      	movs	r2, #3
 8007562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e12d      	b.n	80077ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e5      	bne.n	800754a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a2f      	ldr	r2, [pc, #188]	; (8007640 <HAL_DMA_Abort+0x444>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d04a      	beq.n	800761e <HAL_DMA_Abort+0x422>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a2d      	ldr	r2, [pc, #180]	; (8007644 <HAL_DMA_Abort+0x448>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d045      	beq.n	800761e <HAL_DMA_Abort+0x422>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a2c      	ldr	r2, [pc, #176]	; (8007648 <HAL_DMA_Abort+0x44c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d040      	beq.n	800761e <HAL_DMA_Abort+0x422>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a2a      	ldr	r2, [pc, #168]	; (800764c <HAL_DMA_Abort+0x450>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d03b      	beq.n	800761e <HAL_DMA_Abort+0x422>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a29      	ldr	r2, [pc, #164]	; (8007650 <HAL_DMA_Abort+0x454>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d036      	beq.n	800761e <HAL_DMA_Abort+0x422>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a27      	ldr	r2, [pc, #156]	; (8007654 <HAL_DMA_Abort+0x458>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d031      	beq.n	800761e <HAL_DMA_Abort+0x422>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a26      	ldr	r2, [pc, #152]	; (8007658 <HAL_DMA_Abort+0x45c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d02c      	beq.n	800761e <HAL_DMA_Abort+0x422>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a24      	ldr	r2, [pc, #144]	; (800765c <HAL_DMA_Abort+0x460>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d027      	beq.n	800761e <HAL_DMA_Abort+0x422>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a23      	ldr	r2, [pc, #140]	; (8007660 <HAL_DMA_Abort+0x464>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d022      	beq.n	800761e <HAL_DMA_Abort+0x422>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a21      	ldr	r2, [pc, #132]	; (8007664 <HAL_DMA_Abort+0x468>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01d      	beq.n	800761e <HAL_DMA_Abort+0x422>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a20      	ldr	r2, [pc, #128]	; (8007668 <HAL_DMA_Abort+0x46c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d018      	beq.n	800761e <HAL_DMA_Abort+0x422>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1e      	ldr	r2, [pc, #120]	; (800766c <HAL_DMA_Abort+0x470>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d013      	beq.n	800761e <HAL_DMA_Abort+0x422>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <HAL_DMA_Abort+0x474>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00e      	beq.n	800761e <HAL_DMA_Abort+0x422>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a1b      	ldr	r2, [pc, #108]	; (8007674 <HAL_DMA_Abort+0x478>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d009      	beq.n	800761e <HAL_DMA_Abort+0x422>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a1a      	ldr	r2, [pc, #104]	; (8007678 <HAL_DMA_Abort+0x47c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d004      	beq.n	800761e <HAL_DMA_Abort+0x422>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a18      	ldr	r2, [pc, #96]	; (800767c <HAL_DMA_Abort+0x480>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d101      	bne.n	8007622 <HAL_DMA_Abort+0x426>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <HAL_DMA_Abort+0x428>
 8007622:	2300      	movs	r3, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d02b      	beq.n	8007680 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	223f      	movs	r2, #63	; 0x3f
 8007638:	409a      	lsls	r2, r3
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	609a      	str	r2, [r3, #8]
 800763e:	e02a      	b.n	8007696 <HAL_DMA_Abort+0x49a>
 8007640:	40020010 	.word	0x40020010
 8007644:	40020028 	.word	0x40020028
 8007648:	40020040 	.word	0x40020040
 800764c:	40020058 	.word	0x40020058
 8007650:	40020070 	.word	0x40020070
 8007654:	40020088 	.word	0x40020088
 8007658:	400200a0 	.word	0x400200a0
 800765c:	400200b8 	.word	0x400200b8
 8007660:	40020410 	.word	0x40020410
 8007664:	40020428 	.word	0x40020428
 8007668:	40020440 	.word	0x40020440
 800766c:	40020458 	.word	0x40020458
 8007670:	40020470 	.word	0x40020470
 8007674:	40020488 	.word	0x40020488
 8007678:	400204a0 	.word	0x400204a0
 800767c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007684:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800768a:	f003 031f 	and.w	r3, r3, #31
 800768e:	2201      	movs	r2, #1
 8007690:	409a      	lsls	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a4f      	ldr	r2, [pc, #316]	; (80077d8 <HAL_DMA_Abort+0x5dc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d072      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a4d      	ldr	r2, [pc, #308]	; (80077dc <HAL_DMA_Abort+0x5e0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d06d      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4c      	ldr	r2, [pc, #304]	; (80077e0 <HAL_DMA_Abort+0x5e4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d068      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a4a      	ldr	r2, [pc, #296]	; (80077e4 <HAL_DMA_Abort+0x5e8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d063      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a49      	ldr	r2, [pc, #292]	; (80077e8 <HAL_DMA_Abort+0x5ec>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d05e      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a47      	ldr	r2, [pc, #284]	; (80077ec <HAL_DMA_Abort+0x5f0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d059      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a46      	ldr	r2, [pc, #280]	; (80077f0 <HAL_DMA_Abort+0x5f4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d054      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a44      	ldr	r2, [pc, #272]	; (80077f4 <HAL_DMA_Abort+0x5f8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d04f      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a43      	ldr	r2, [pc, #268]	; (80077f8 <HAL_DMA_Abort+0x5fc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d04a      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a41      	ldr	r2, [pc, #260]	; (80077fc <HAL_DMA_Abort+0x600>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d045      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a40      	ldr	r2, [pc, #256]	; (8007800 <HAL_DMA_Abort+0x604>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d040      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a3e      	ldr	r2, [pc, #248]	; (8007804 <HAL_DMA_Abort+0x608>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d03b      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a3d      	ldr	r2, [pc, #244]	; (8007808 <HAL_DMA_Abort+0x60c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d036      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a3b      	ldr	r2, [pc, #236]	; (800780c <HAL_DMA_Abort+0x610>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d031      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a3a      	ldr	r2, [pc, #232]	; (8007810 <HAL_DMA_Abort+0x614>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d02c      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a38      	ldr	r2, [pc, #224]	; (8007814 <HAL_DMA_Abort+0x618>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d027      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a37      	ldr	r2, [pc, #220]	; (8007818 <HAL_DMA_Abort+0x61c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d022      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a35      	ldr	r2, [pc, #212]	; (800781c <HAL_DMA_Abort+0x620>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01d      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a34      	ldr	r2, [pc, #208]	; (8007820 <HAL_DMA_Abort+0x624>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d018      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a32      	ldr	r2, [pc, #200]	; (8007824 <HAL_DMA_Abort+0x628>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d013      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a31      	ldr	r2, [pc, #196]	; (8007828 <HAL_DMA_Abort+0x62c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00e      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a2f      	ldr	r2, [pc, #188]	; (800782c <HAL_DMA_Abort+0x630>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d009      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a2e      	ldr	r2, [pc, #184]	; (8007830 <HAL_DMA_Abort+0x634>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d004      	beq.n	8007786 <HAL_DMA_Abort+0x58a>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a2c      	ldr	r2, [pc, #176]	; (8007834 <HAL_DMA_Abort+0x638>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d101      	bne.n	800778a <HAL_DMA_Abort+0x58e>
 8007786:	2301      	movs	r3, #1
 8007788:	e000      	b.n	800778c <HAL_DMA_Abort+0x590>
 800778a:	2300      	movs	r3, #0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d015      	beq.n	80077bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007798:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00c      	beq.n	80077bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40020010 	.word	0x40020010
 80077dc:	40020028 	.word	0x40020028
 80077e0:	40020040 	.word	0x40020040
 80077e4:	40020058 	.word	0x40020058
 80077e8:	40020070 	.word	0x40020070
 80077ec:	40020088 	.word	0x40020088
 80077f0:	400200a0 	.word	0x400200a0
 80077f4:	400200b8 	.word	0x400200b8
 80077f8:	40020410 	.word	0x40020410
 80077fc:	40020428 	.word	0x40020428
 8007800:	40020440 	.word	0x40020440
 8007804:	40020458 	.word	0x40020458
 8007808:	40020470 	.word	0x40020470
 800780c:	40020488 	.word	0x40020488
 8007810:	400204a0 	.word	0x400204a0
 8007814:	400204b8 	.word	0x400204b8
 8007818:	58025408 	.word	0x58025408
 800781c:	5802541c 	.word	0x5802541c
 8007820:	58025430 	.word	0x58025430
 8007824:	58025444 	.word	0x58025444
 8007828:	58025458 	.word	0x58025458
 800782c:	5802546c 	.word	0x5802546c
 8007830:	58025480 	.word	0x58025480
 8007834:	58025494 	.word	0x58025494

08007838 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e237      	b.n	8007cba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d004      	beq.n	8007860 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2280      	movs	r2, #128	; 0x80
 800785a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e22c      	b.n	8007cba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a5c      	ldr	r2, [pc, #368]	; (80079d8 <HAL_DMA_Abort_IT+0x1a0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d04a      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a5b      	ldr	r2, [pc, #364]	; (80079dc <HAL_DMA_Abort_IT+0x1a4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d045      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a59      	ldr	r2, [pc, #356]	; (80079e0 <HAL_DMA_Abort_IT+0x1a8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d040      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a58      	ldr	r2, [pc, #352]	; (80079e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d03b      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a56      	ldr	r2, [pc, #344]	; (80079e8 <HAL_DMA_Abort_IT+0x1b0>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d036      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a55      	ldr	r2, [pc, #340]	; (80079ec <HAL_DMA_Abort_IT+0x1b4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d031      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a53      	ldr	r2, [pc, #332]	; (80079f0 <HAL_DMA_Abort_IT+0x1b8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d02c      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a52      	ldr	r2, [pc, #328]	; (80079f4 <HAL_DMA_Abort_IT+0x1bc>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d027      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a50      	ldr	r2, [pc, #320]	; (80079f8 <HAL_DMA_Abort_IT+0x1c0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d022      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a4f      	ldr	r2, [pc, #316]	; (80079fc <HAL_DMA_Abort_IT+0x1c4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d01d      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a4d      	ldr	r2, [pc, #308]	; (8007a00 <HAL_DMA_Abort_IT+0x1c8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d018      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a4c      	ldr	r2, [pc, #304]	; (8007a04 <HAL_DMA_Abort_IT+0x1cc>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d013      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a4a      	ldr	r2, [pc, #296]	; (8007a08 <HAL_DMA_Abort_IT+0x1d0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00e      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a49      	ldr	r2, [pc, #292]	; (8007a0c <HAL_DMA_Abort_IT+0x1d4>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d009      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a47      	ldr	r2, [pc, #284]	; (8007a10 <HAL_DMA_Abort_IT+0x1d8>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d004      	beq.n	8007900 <HAL_DMA_Abort_IT+0xc8>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a46      	ldr	r2, [pc, #280]	; (8007a14 <HAL_DMA_Abort_IT+0x1dc>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d101      	bne.n	8007904 <HAL_DMA_Abort_IT+0xcc>
 8007900:	2301      	movs	r3, #1
 8007902:	e000      	b.n	8007906 <HAL_DMA_Abort_IT+0xce>
 8007904:	2300      	movs	r3, #0
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 8086 	beq.w	8007a18 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2204      	movs	r2, #4
 8007910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a2f      	ldr	r2, [pc, #188]	; (80079d8 <HAL_DMA_Abort_IT+0x1a0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d04a      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a2e      	ldr	r2, [pc, #184]	; (80079dc <HAL_DMA_Abort_IT+0x1a4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d045      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a2c      	ldr	r2, [pc, #176]	; (80079e0 <HAL_DMA_Abort_IT+0x1a8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d040      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a2b      	ldr	r2, [pc, #172]	; (80079e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d03b      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a29      	ldr	r2, [pc, #164]	; (80079e8 <HAL_DMA_Abort_IT+0x1b0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d036      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a28      	ldr	r2, [pc, #160]	; (80079ec <HAL_DMA_Abort_IT+0x1b4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d031      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a26      	ldr	r2, [pc, #152]	; (80079f0 <HAL_DMA_Abort_IT+0x1b8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d02c      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a25      	ldr	r2, [pc, #148]	; (80079f4 <HAL_DMA_Abort_IT+0x1bc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d027      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a23      	ldr	r2, [pc, #140]	; (80079f8 <HAL_DMA_Abort_IT+0x1c0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d022      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a22      	ldr	r2, [pc, #136]	; (80079fc <HAL_DMA_Abort_IT+0x1c4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d01d      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a20      	ldr	r2, [pc, #128]	; (8007a00 <HAL_DMA_Abort_IT+0x1c8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d018      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1f      	ldr	r2, [pc, #124]	; (8007a04 <HAL_DMA_Abort_IT+0x1cc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d013      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a1d      	ldr	r2, [pc, #116]	; (8007a08 <HAL_DMA_Abort_IT+0x1d0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00e      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a1c      	ldr	r2, [pc, #112]	; (8007a0c <HAL_DMA_Abort_IT+0x1d4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d009      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a1a      	ldr	r2, [pc, #104]	; (8007a10 <HAL_DMA_Abort_IT+0x1d8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d004      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x17c>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a19      	ldr	r2, [pc, #100]	; (8007a14 <HAL_DMA_Abort_IT+0x1dc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d108      	bne.n	80079c6 <HAL_DMA_Abort_IT+0x18e>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0201 	bic.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e178      	b.n	8007cb8 <HAL_DMA_Abort_IT+0x480>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0201 	bic.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	e16f      	b.n	8007cb8 <HAL_DMA_Abort_IT+0x480>
 80079d8:	40020010 	.word	0x40020010
 80079dc:	40020028 	.word	0x40020028
 80079e0:	40020040 	.word	0x40020040
 80079e4:	40020058 	.word	0x40020058
 80079e8:	40020070 	.word	0x40020070
 80079ec:	40020088 	.word	0x40020088
 80079f0:	400200a0 	.word	0x400200a0
 80079f4:	400200b8 	.word	0x400200b8
 80079f8:	40020410 	.word	0x40020410
 80079fc:	40020428 	.word	0x40020428
 8007a00:	40020440 	.word	0x40020440
 8007a04:	40020458 	.word	0x40020458
 8007a08:	40020470 	.word	0x40020470
 8007a0c:	40020488 	.word	0x40020488
 8007a10:	400204a0 	.word	0x400204a0
 8007a14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 020e 	bic.w	r2, r2, #14
 8007a26:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a6c      	ldr	r2, [pc, #432]	; (8007be0 <HAL_DMA_Abort_IT+0x3a8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d04a      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a6b      	ldr	r2, [pc, #428]	; (8007be4 <HAL_DMA_Abort_IT+0x3ac>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d045      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a69      	ldr	r2, [pc, #420]	; (8007be8 <HAL_DMA_Abort_IT+0x3b0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d040      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a68      	ldr	r2, [pc, #416]	; (8007bec <HAL_DMA_Abort_IT+0x3b4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d03b      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a66      	ldr	r2, [pc, #408]	; (8007bf0 <HAL_DMA_Abort_IT+0x3b8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d036      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a65      	ldr	r2, [pc, #404]	; (8007bf4 <HAL_DMA_Abort_IT+0x3bc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d031      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a63      	ldr	r2, [pc, #396]	; (8007bf8 <HAL_DMA_Abort_IT+0x3c0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d02c      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a62      	ldr	r2, [pc, #392]	; (8007bfc <HAL_DMA_Abort_IT+0x3c4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d027      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a60      	ldr	r2, [pc, #384]	; (8007c00 <HAL_DMA_Abort_IT+0x3c8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d022      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a5f      	ldr	r2, [pc, #380]	; (8007c04 <HAL_DMA_Abort_IT+0x3cc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d01d      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a5d      	ldr	r2, [pc, #372]	; (8007c08 <HAL_DMA_Abort_IT+0x3d0>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d018      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a5c      	ldr	r2, [pc, #368]	; (8007c0c <HAL_DMA_Abort_IT+0x3d4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d013      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a5a      	ldr	r2, [pc, #360]	; (8007c10 <HAL_DMA_Abort_IT+0x3d8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00e      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a59      	ldr	r2, [pc, #356]	; (8007c14 <HAL_DMA_Abort_IT+0x3dc>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d009      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a57      	ldr	r2, [pc, #348]	; (8007c18 <HAL_DMA_Abort_IT+0x3e0>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d004      	beq.n	8007ac8 <HAL_DMA_Abort_IT+0x290>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a56      	ldr	r2, [pc, #344]	; (8007c1c <HAL_DMA_Abort_IT+0x3e4>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d108      	bne.n	8007ada <HAL_DMA_Abort_IT+0x2a2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0201 	bic.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e007      	b.n	8007aea <HAL_DMA_Abort_IT+0x2b2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a3c      	ldr	r2, [pc, #240]	; (8007be0 <HAL_DMA_Abort_IT+0x3a8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d072      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a3a      	ldr	r2, [pc, #232]	; (8007be4 <HAL_DMA_Abort_IT+0x3ac>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d06d      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a39      	ldr	r2, [pc, #228]	; (8007be8 <HAL_DMA_Abort_IT+0x3b0>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d068      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a37      	ldr	r2, [pc, #220]	; (8007bec <HAL_DMA_Abort_IT+0x3b4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d063      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a36      	ldr	r2, [pc, #216]	; (8007bf0 <HAL_DMA_Abort_IT+0x3b8>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d05e      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a34      	ldr	r2, [pc, #208]	; (8007bf4 <HAL_DMA_Abort_IT+0x3bc>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d059      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a33      	ldr	r2, [pc, #204]	; (8007bf8 <HAL_DMA_Abort_IT+0x3c0>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d054      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a31      	ldr	r2, [pc, #196]	; (8007bfc <HAL_DMA_Abort_IT+0x3c4>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d04f      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a30      	ldr	r2, [pc, #192]	; (8007c00 <HAL_DMA_Abort_IT+0x3c8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d04a      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a2e      	ldr	r2, [pc, #184]	; (8007c04 <HAL_DMA_Abort_IT+0x3cc>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d045      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a2d      	ldr	r2, [pc, #180]	; (8007c08 <HAL_DMA_Abort_IT+0x3d0>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d040      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a2b      	ldr	r2, [pc, #172]	; (8007c0c <HAL_DMA_Abort_IT+0x3d4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d03b      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a2a      	ldr	r2, [pc, #168]	; (8007c10 <HAL_DMA_Abort_IT+0x3d8>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d036      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a28      	ldr	r2, [pc, #160]	; (8007c14 <HAL_DMA_Abort_IT+0x3dc>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d031      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a27      	ldr	r2, [pc, #156]	; (8007c18 <HAL_DMA_Abort_IT+0x3e0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d02c      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a25      	ldr	r2, [pc, #148]	; (8007c1c <HAL_DMA_Abort_IT+0x3e4>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d027      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a24      	ldr	r2, [pc, #144]	; (8007c20 <HAL_DMA_Abort_IT+0x3e8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d022      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a22      	ldr	r2, [pc, #136]	; (8007c24 <HAL_DMA_Abort_IT+0x3ec>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01d      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a21      	ldr	r2, [pc, #132]	; (8007c28 <HAL_DMA_Abort_IT+0x3f0>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d018      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1f      	ldr	r2, [pc, #124]	; (8007c2c <HAL_DMA_Abort_IT+0x3f4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a1e      	ldr	r2, [pc, #120]	; (8007c30 <HAL_DMA_Abort_IT+0x3f8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00e      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a1c      	ldr	r2, [pc, #112]	; (8007c34 <HAL_DMA_Abort_IT+0x3fc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d009      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a1b      	ldr	r2, [pc, #108]	; (8007c38 <HAL_DMA_Abort_IT+0x400>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d004      	beq.n	8007bda <HAL_DMA_Abort_IT+0x3a2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a19      	ldr	r2, [pc, #100]	; (8007c3c <HAL_DMA_Abort_IT+0x404>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d132      	bne.n	8007c40 <HAL_DMA_Abort_IT+0x408>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e031      	b.n	8007c42 <HAL_DMA_Abort_IT+0x40a>
 8007bde:	bf00      	nop
 8007be0:	40020010 	.word	0x40020010
 8007be4:	40020028 	.word	0x40020028
 8007be8:	40020040 	.word	0x40020040
 8007bec:	40020058 	.word	0x40020058
 8007bf0:	40020070 	.word	0x40020070
 8007bf4:	40020088 	.word	0x40020088
 8007bf8:	400200a0 	.word	0x400200a0
 8007bfc:	400200b8 	.word	0x400200b8
 8007c00:	40020410 	.word	0x40020410
 8007c04:	40020428 	.word	0x40020428
 8007c08:	40020440 	.word	0x40020440
 8007c0c:	40020458 	.word	0x40020458
 8007c10:	40020470 	.word	0x40020470
 8007c14:	40020488 	.word	0x40020488
 8007c18:	400204a0 	.word	0x400204a0
 8007c1c:	400204b8 	.word	0x400204b8
 8007c20:	58025408 	.word	0x58025408
 8007c24:	5802541c 	.word	0x5802541c
 8007c28:	58025430 	.word	0x58025430
 8007c2c:	58025444 	.word	0x58025444
 8007c30:	58025458 	.word	0x58025458
 8007c34:	5802546c 	.word	0x5802546c
 8007c38:	58025480 	.word	0x58025480
 8007c3c:	58025494 	.word	0x58025494
 8007c40:	2300      	movs	r3, #0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d028      	beq.n	8007c98 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c60:	f003 031f 	and.w	r3, r3, #31
 8007c64:	2201      	movs	r2, #1
 8007c66:	409a      	lsls	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007c74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00c      	beq.n	8007c98 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop

08007cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007cd0:	4b67      	ldr	r3, [pc, #412]	; (8007e70 <HAL_DMA_IRQHandler+0x1ac>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a67      	ldr	r2, [pc, #412]	; (8007e74 <HAL_DMA_IRQHandler+0x1b0>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	0a9b      	lsrs	r3, r3, #10
 8007cdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a5f      	ldr	r2, [pc, #380]	; (8007e78 <HAL_DMA_IRQHandler+0x1b4>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d04a      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a5d      	ldr	r2, [pc, #372]	; (8007e7c <HAL_DMA_IRQHandler+0x1b8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d045      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a5c      	ldr	r2, [pc, #368]	; (8007e80 <HAL_DMA_IRQHandler+0x1bc>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d040      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a5a      	ldr	r2, [pc, #360]	; (8007e84 <HAL_DMA_IRQHandler+0x1c0>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d03b      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a59      	ldr	r2, [pc, #356]	; (8007e88 <HAL_DMA_IRQHandler+0x1c4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d036      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a57      	ldr	r2, [pc, #348]	; (8007e8c <HAL_DMA_IRQHandler+0x1c8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d031      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a56      	ldr	r2, [pc, #344]	; (8007e90 <HAL_DMA_IRQHandler+0x1cc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d02c      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a54      	ldr	r2, [pc, #336]	; (8007e94 <HAL_DMA_IRQHandler+0x1d0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d027      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a53      	ldr	r2, [pc, #332]	; (8007e98 <HAL_DMA_IRQHandler+0x1d4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d022      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a51      	ldr	r2, [pc, #324]	; (8007e9c <HAL_DMA_IRQHandler+0x1d8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d01d      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a50      	ldr	r2, [pc, #320]	; (8007ea0 <HAL_DMA_IRQHandler+0x1dc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d018      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a4e      	ldr	r2, [pc, #312]	; (8007ea4 <HAL_DMA_IRQHandler+0x1e0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d013      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a4d      	ldr	r2, [pc, #308]	; (8007ea8 <HAL_DMA_IRQHandler+0x1e4>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00e      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a4b      	ldr	r2, [pc, #300]	; (8007eac <HAL_DMA_IRQHandler+0x1e8>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d009      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a4a      	ldr	r2, [pc, #296]	; (8007eb0 <HAL_DMA_IRQHandler+0x1ec>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d004      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xd2>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a48      	ldr	r2, [pc, #288]	; (8007eb4 <HAL_DMA_IRQHandler+0x1f0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d101      	bne.n	8007d9a <HAL_DMA_IRQHandler+0xd6>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <HAL_DMA_IRQHandler+0xd8>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 842b 	beq.w	80085f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da6:	f003 031f 	and.w	r3, r3, #31
 8007daa:	2208      	movs	r2, #8
 8007dac:	409a      	lsls	r2, r3
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	4013      	ands	r3, r2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 80a2 	beq.w	8007efc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a2e      	ldr	r2, [pc, #184]	; (8007e78 <HAL_DMA_IRQHandler+0x1b4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d04a      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a2d      	ldr	r2, [pc, #180]	; (8007e7c <HAL_DMA_IRQHandler+0x1b8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d045      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a2b      	ldr	r2, [pc, #172]	; (8007e80 <HAL_DMA_IRQHandler+0x1bc>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d040      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a2a      	ldr	r2, [pc, #168]	; (8007e84 <HAL_DMA_IRQHandler+0x1c0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d03b      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a28      	ldr	r2, [pc, #160]	; (8007e88 <HAL_DMA_IRQHandler+0x1c4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d036      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a27      	ldr	r2, [pc, #156]	; (8007e8c <HAL_DMA_IRQHandler+0x1c8>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d031      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a25      	ldr	r2, [pc, #148]	; (8007e90 <HAL_DMA_IRQHandler+0x1cc>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d02c      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a24      	ldr	r2, [pc, #144]	; (8007e94 <HAL_DMA_IRQHandler+0x1d0>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d027      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a22      	ldr	r2, [pc, #136]	; (8007e98 <HAL_DMA_IRQHandler+0x1d4>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d022      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a21      	ldr	r2, [pc, #132]	; (8007e9c <HAL_DMA_IRQHandler+0x1d8>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d01d      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1f      	ldr	r2, [pc, #124]	; (8007ea0 <HAL_DMA_IRQHandler+0x1dc>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d018      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <HAL_DMA_IRQHandler+0x1e0>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d013      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1c      	ldr	r2, [pc, #112]	; (8007ea8 <HAL_DMA_IRQHandler+0x1e4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00e      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a1b      	ldr	r2, [pc, #108]	; (8007eac <HAL_DMA_IRQHandler+0x1e8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d009      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a19      	ldr	r2, [pc, #100]	; (8007eb0 <HAL_DMA_IRQHandler+0x1ec>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d004      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x194>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <HAL_DMA_IRQHandler+0x1f0>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d12f      	bne.n	8007eb8 <HAL_DMA_IRQHandler+0x1f4>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bf14      	ite	ne
 8007e66:	2301      	movne	r3, #1
 8007e68:	2300      	moveq	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	e02e      	b.n	8007ecc <HAL_DMA_IRQHandler+0x208>
 8007e6e:	bf00      	nop
 8007e70:	24000088 	.word	0x24000088
 8007e74:	1b4e81b5 	.word	0x1b4e81b5
 8007e78:	40020010 	.word	0x40020010
 8007e7c:	40020028 	.word	0x40020028
 8007e80:	40020040 	.word	0x40020040
 8007e84:	40020058 	.word	0x40020058
 8007e88:	40020070 	.word	0x40020070
 8007e8c:	40020088 	.word	0x40020088
 8007e90:	400200a0 	.word	0x400200a0
 8007e94:	400200b8 	.word	0x400200b8
 8007e98:	40020410 	.word	0x40020410
 8007e9c:	40020428 	.word	0x40020428
 8007ea0:	40020440 	.word	0x40020440
 8007ea4:	40020458 	.word	0x40020458
 8007ea8:	40020470 	.word	0x40020470
 8007eac:	40020488 	.word	0x40020488
 8007eb0:	400204a0 	.word	0x400204a0
 8007eb4:	400204b8 	.word	0x400204b8
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	bf14      	ite	ne
 8007ec6:	2301      	movne	r3, #1
 8007ec8:	2300      	moveq	r3, #0
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d015      	beq.n	8007efc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0204 	bic.w	r2, r2, #4
 8007ede:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ee4:	f003 031f 	and.w	r3, r3, #31
 8007ee8:	2208      	movs	r2, #8
 8007eea:	409a      	lsls	r2, r3
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef4:	f043 0201 	orr.w	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f00:	f003 031f 	and.w	r3, r3, #31
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d06e      	beq.n	8007ff0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a69      	ldr	r2, [pc, #420]	; (80080bc <HAL_DMA_IRQHandler+0x3f8>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d04a      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a67      	ldr	r2, [pc, #412]	; (80080c0 <HAL_DMA_IRQHandler+0x3fc>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d045      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a66      	ldr	r2, [pc, #408]	; (80080c4 <HAL_DMA_IRQHandler+0x400>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d040      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a64      	ldr	r2, [pc, #400]	; (80080c8 <HAL_DMA_IRQHandler+0x404>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d03b      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a63      	ldr	r2, [pc, #396]	; (80080cc <HAL_DMA_IRQHandler+0x408>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d036      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a61      	ldr	r2, [pc, #388]	; (80080d0 <HAL_DMA_IRQHandler+0x40c>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d031      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a60      	ldr	r2, [pc, #384]	; (80080d4 <HAL_DMA_IRQHandler+0x410>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d02c      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a5e      	ldr	r2, [pc, #376]	; (80080d8 <HAL_DMA_IRQHandler+0x414>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d027      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a5d      	ldr	r2, [pc, #372]	; (80080dc <HAL_DMA_IRQHandler+0x418>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d022      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a5b      	ldr	r2, [pc, #364]	; (80080e0 <HAL_DMA_IRQHandler+0x41c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d01d      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a5a      	ldr	r2, [pc, #360]	; (80080e4 <HAL_DMA_IRQHandler+0x420>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d018      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a58      	ldr	r2, [pc, #352]	; (80080e8 <HAL_DMA_IRQHandler+0x424>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d013      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a57      	ldr	r2, [pc, #348]	; (80080ec <HAL_DMA_IRQHandler+0x428>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00e      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a55      	ldr	r2, [pc, #340]	; (80080f0 <HAL_DMA_IRQHandler+0x42c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d009      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a54      	ldr	r2, [pc, #336]	; (80080f4 <HAL_DMA_IRQHandler+0x430>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d004      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x2ee>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a52      	ldr	r2, [pc, #328]	; (80080f8 <HAL_DMA_IRQHandler+0x434>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d10a      	bne.n	8007fc8 <HAL_DMA_IRQHandler+0x304>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	bf14      	ite	ne
 8007fc0:	2301      	movne	r3, #1
 8007fc2:	2300      	moveq	r3, #0
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	e003      	b.n	8007fd0 <HAL_DMA_IRQHandler+0x30c>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00d      	beq.n	8007ff0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd8:	f003 031f 	and.w	r3, r3, #31
 8007fdc:	2201      	movs	r2, #1
 8007fde:	409a      	lsls	r2, r3
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe8:	f043 0202 	orr.w	r2, r3, #2
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff4:	f003 031f 	and.w	r3, r3, #31
 8007ff8:	2204      	movs	r2, #4
 8007ffa:	409a      	lsls	r2, r3
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	4013      	ands	r3, r2
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 808f 	beq.w	8008124 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a2c      	ldr	r2, [pc, #176]	; (80080bc <HAL_DMA_IRQHandler+0x3f8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d04a      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a2a      	ldr	r2, [pc, #168]	; (80080c0 <HAL_DMA_IRQHandler+0x3fc>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d045      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a29      	ldr	r2, [pc, #164]	; (80080c4 <HAL_DMA_IRQHandler+0x400>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d040      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a27      	ldr	r2, [pc, #156]	; (80080c8 <HAL_DMA_IRQHandler+0x404>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d03b      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a26      	ldr	r2, [pc, #152]	; (80080cc <HAL_DMA_IRQHandler+0x408>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d036      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a24      	ldr	r2, [pc, #144]	; (80080d0 <HAL_DMA_IRQHandler+0x40c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d031      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a23      	ldr	r2, [pc, #140]	; (80080d4 <HAL_DMA_IRQHandler+0x410>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d02c      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a21      	ldr	r2, [pc, #132]	; (80080d8 <HAL_DMA_IRQHandler+0x414>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d027      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a20      	ldr	r2, [pc, #128]	; (80080dc <HAL_DMA_IRQHandler+0x418>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d022      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a1e      	ldr	r2, [pc, #120]	; (80080e0 <HAL_DMA_IRQHandler+0x41c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01d      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a1d      	ldr	r2, [pc, #116]	; (80080e4 <HAL_DMA_IRQHandler+0x420>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d018      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1b      	ldr	r2, [pc, #108]	; (80080e8 <HAL_DMA_IRQHandler+0x424>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a1a      	ldr	r2, [pc, #104]	; (80080ec <HAL_DMA_IRQHandler+0x428>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a18      	ldr	r2, [pc, #96]	; (80080f0 <HAL_DMA_IRQHandler+0x42c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a17      	ldr	r2, [pc, #92]	; (80080f4 <HAL_DMA_IRQHandler+0x430>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x3e2>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a15      	ldr	r2, [pc, #84]	; (80080f8 <HAL_DMA_IRQHandler+0x434>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d12a      	bne.n	80080fc <HAL_DMA_IRQHandler+0x438>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bf14      	ite	ne
 80080b4:	2301      	movne	r3, #1
 80080b6:	2300      	moveq	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	e023      	b.n	8008104 <HAL_DMA_IRQHandler+0x440>
 80080bc:	40020010 	.word	0x40020010
 80080c0:	40020028 	.word	0x40020028
 80080c4:	40020040 	.word	0x40020040
 80080c8:	40020058 	.word	0x40020058
 80080cc:	40020070 	.word	0x40020070
 80080d0:	40020088 	.word	0x40020088
 80080d4:	400200a0 	.word	0x400200a0
 80080d8:	400200b8 	.word	0x400200b8
 80080dc:	40020410 	.word	0x40020410
 80080e0:	40020428 	.word	0x40020428
 80080e4:	40020440 	.word	0x40020440
 80080e8:	40020458 	.word	0x40020458
 80080ec:	40020470 	.word	0x40020470
 80080f0:	40020488 	.word	0x40020488
 80080f4:	400204a0 	.word	0x400204a0
 80080f8:	400204b8 	.word	0x400204b8
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2300      	movs	r3, #0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00d      	beq.n	8008124 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810c:	f003 031f 	and.w	r3, r3, #31
 8008110:	2204      	movs	r2, #4
 8008112:	409a      	lsls	r2, r3
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811c:	f043 0204 	orr.w	r2, r3, #4
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008128:	f003 031f 	and.w	r3, r3, #31
 800812c:	2210      	movs	r2, #16
 800812e:	409a      	lsls	r2, r3
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	4013      	ands	r3, r2
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 80a6 	beq.w	8008286 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a85      	ldr	r2, [pc, #532]	; (8008354 <HAL_DMA_IRQHandler+0x690>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d04a      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a83      	ldr	r2, [pc, #524]	; (8008358 <HAL_DMA_IRQHandler+0x694>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d045      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a82      	ldr	r2, [pc, #520]	; (800835c <HAL_DMA_IRQHandler+0x698>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d040      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a80      	ldr	r2, [pc, #512]	; (8008360 <HAL_DMA_IRQHandler+0x69c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d03b      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a7f      	ldr	r2, [pc, #508]	; (8008364 <HAL_DMA_IRQHandler+0x6a0>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d036      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a7d      	ldr	r2, [pc, #500]	; (8008368 <HAL_DMA_IRQHandler+0x6a4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d031      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a7c      	ldr	r2, [pc, #496]	; (800836c <HAL_DMA_IRQHandler+0x6a8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d02c      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a7a      	ldr	r2, [pc, #488]	; (8008370 <HAL_DMA_IRQHandler+0x6ac>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d027      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a79      	ldr	r2, [pc, #484]	; (8008374 <HAL_DMA_IRQHandler+0x6b0>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d022      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a77      	ldr	r2, [pc, #476]	; (8008378 <HAL_DMA_IRQHandler+0x6b4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d01d      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a76      	ldr	r2, [pc, #472]	; (800837c <HAL_DMA_IRQHandler+0x6b8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d018      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a74      	ldr	r2, [pc, #464]	; (8008380 <HAL_DMA_IRQHandler+0x6bc>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d013      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a73      	ldr	r2, [pc, #460]	; (8008384 <HAL_DMA_IRQHandler+0x6c0>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00e      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a71      	ldr	r2, [pc, #452]	; (8008388 <HAL_DMA_IRQHandler+0x6c4>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d009      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a70      	ldr	r2, [pc, #448]	; (800838c <HAL_DMA_IRQHandler+0x6c8>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d004      	beq.n	80081da <HAL_DMA_IRQHandler+0x516>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a6e      	ldr	r2, [pc, #440]	; (8008390 <HAL_DMA_IRQHandler+0x6cc>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d10a      	bne.n	80081f0 <HAL_DMA_IRQHandler+0x52c>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bf14      	ite	ne
 80081e8:	2301      	movne	r3, #1
 80081ea:	2300      	moveq	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	e009      	b.n	8008204 <HAL_DMA_IRQHandler+0x540>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bf14      	ite	ne
 80081fe:	2301      	movne	r3, #1
 8008200:	2300      	moveq	r3, #0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d03e      	beq.n	8008286 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820c:	f003 031f 	and.w	r3, r3, #31
 8008210:	2210      	movs	r2, #16
 8008212:	409a      	lsls	r2, r3
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d018      	beq.n	8008258 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d108      	bne.n	8008246 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d024      	beq.n	8008286 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
 8008244:	e01f      	b.n	8008286 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800824a:	2b00      	cmp	r3, #0
 800824c:	d01b      	beq.n	8008286 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
 8008256:	e016      	b.n	8008286 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	2b00      	cmp	r3, #0
 8008264:	d107      	bne.n	8008276 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0208 	bic.w	r2, r2, #8
 8008274:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828a:	f003 031f 	and.w	r3, r3, #31
 800828e:	2220      	movs	r2, #32
 8008290:	409a      	lsls	r2, r3
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	4013      	ands	r3, r2
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 8110 	beq.w	80084bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a2c      	ldr	r2, [pc, #176]	; (8008354 <HAL_DMA_IRQHandler+0x690>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d04a      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a2b      	ldr	r2, [pc, #172]	; (8008358 <HAL_DMA_IRQHandler+0x694>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d045      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a29      	ldr	r2, [pc, #164]	; (800835c <HAL_DMA_IRQHandler+0x698>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d040      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a28      	ldr	r2, [pc, #160]	; (8008360 <HAL_DMA_IRQHandler+0x69c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d03b      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a26      	ldr	r2, [pc, #152]	; (8008364 <HAL_DMA_IRQHandler+0x6a0>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d036      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a25      	ldr	r2, [pc, #148]	; (8008368 <HAL_DMA_IRQHandler+0x6a4>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d031      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a23      	ldr	r2, [pc, #140]	; (800836c <HAL_DMA_IRQHandler+0x6a8>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d02c      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a22      	ldr	r2, [pc, #136]	; (8008370 <HAL_DMA_IRQHandler+0x6ac>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d027      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a20      	ldr	r2, [pc, #128]	; (8008374 <HAL_DMA_IRQHandler+0x6b0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d022      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <HAL_DMA_IRQHandler+0x6b4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d01d      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a1d      	ldr	r2, [pc, #116]	; (800837c <HAL_DMA_IRQHandler+0x6b8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d018      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a1c      	ldr	r2, [pc, #112]	; (8008380 <HAL_DMA_IRQHandler+0x6bc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d013      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1a      	ldr	r2, [pc, #104]	; (8008384 <HAL_DMA_IRQHandler+0x6c0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00e      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a19      	ldr	r2, [pc, #100]	; (8008388 <HAL_DMA_IRQHandler+0x6c4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d009      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a17      	ldr	r2, [pc, #92]	; (800838c <HAL_DMA_IRQHandler+0x6c8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_DMA_IRQHandler+0x678>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a16      	ldr	r2, [pc, #88]	; (8008390 <HAL_DMA_IRQHandler+0x6cc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d12b      	bne.n	8008394 <HAL_DMA_IRQHandler+0x6d0>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	2b00      	cmp	r3, #0
 8008348:	bf14      	ite	ne
 800834a:	2301      	movne	r3, #1
 800834c:	2300      	moveq	r3, #0
 800834e:	b2db      	uxtb	r3, r3
 8008350:	e02a      	b.n	80083a8 <HAL_DMA_IRQHandler+0x6e4>
 8008352:	bf00      	nop
 8008354:	40020010 	.word	0x40020010
 8008358:	40020028 	.word	0x40020028
 800835c:	40020040 	.word	0x40020040
 8008360:	40020058 	.word	0x40020058
 8008364:	40020070 	.word	0x40020070
 8008368:	40020088 	.word	0x40020088
 800836c:	400200a0 	.word	0x400200a0
 8008370:	400200b8 	.word	0x400200b8
 8008374:	40020410 	.word	0x40020410
 8008378:	40020428 	.word	0x40020428
 800837c:	40020440 	.word	0x40020440
 8008380:	40020458 	.word	0x40020458
 8008384:	40020470 	.word	0x40020470
 8008388:	40020488 	.word	0x40020488
 800838c:	400204a0 	.word	0x400204a0
 8008390:	400204b8 	.word	0x400204b8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bf14      	ite	ne
 80083a2:	2301      	movne	r3, #1
 80083a4:	2300      	moveq	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8087 	beq.w	80084bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b2:	f003 031f 	and.w	r3, r3, #31
 80083b6:	2220      	movs	r2, #32
 80083b8:	409a      	lsls	r2, r3
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d139      	bne.n	800843e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f022 0216 	bic.w	r2, r2, #22
 80083d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	695a      	ldr	r2, [r3, #20]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <HAL_DMA_IRQHandler+0x736>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0208 	bic.w	r2, r2, #8
 8008408:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800840e:	f003 031f 	and.w	r3, r3, #31
 8008412:	223f      	movs	r2, #63	; 0x3f
 8008414:	409a      	lsls	r2, r3
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 834a 	beq.w	8008ac8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	4798      	blx	r3
          }
          return;
 800843c:	e344      	b.n	8008ac8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d018      	beq.n	800847e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d108      	bne.n	800846c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845e:	2b00      	cmp	r3, #0
 8008460:	d02c      	beq.n	80084bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	4798      	blx	r3
 800846a:	e027      	b.n	80084bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d023      	beq.n	80084bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
 800847c:	e01e      	b.n	80084bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10f      	bne.n	80084ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0210 	bic.w	r2, r2, #16
 800849a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 8306 	beq.w	8008ad2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 8088 	beq.w	80085e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2204      	movs	r2, #4
 80084d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a7a      	ldr	r2, [pc, #488]	; (80086cc <HAL_DMA_IRQHandler+0xa08>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d04a      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a79      	ldr	r2, [pc, #484]	; (80086d0 <HAL_DMA_IRQHandler+0xa0c>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d045      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a77      	ldr	r2, [pc, #476]	; (80086d4 <HAL_DMA_IRQHandler+0xa10>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d040      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a76      	ldr	r2, [pc, #472]	; (80086d8 <HAL_DMA_IRQHandler+0xa14>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d03b      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a74      	ldr	r2, [pc, #464]	; (80086dc <HAL_DMA_IRQHandler+0xa18>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d036      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a73      	ldr	r2, [pc, #460]	; (80086e0 <HAL_DMA_IRQHandler+0xa1c>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d031      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a71      	ldr	r2, [pc, #452]	; (80086e4 <HAL_DMA_IRQHandler+0xa20>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d02c      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a70      	ldr	r2, [pc, #448]	; (80086e8 <HAL_DMA_IRQHandler+0xa24>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d027      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a6e      	ldr	r2, [pc, #440]	; (80086ec <HAL_DMA_IRQHandler+0xa28>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d022      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a6d      	ldr	r2, [pc, #436]	; (80086f0 <HAL_DMA_IRQHandler+0xa2c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d01d      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a6b      	ldr	r2, [pc, #428]	; (80086f4 <HAL_DMA_IRQHandler+0xa30>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d018      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a6a      	ldr	r2, [pc, #424]	; (80086f8 <HAL_DMA_IRQHandler+0xa34>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d013      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a68      	ldr	r2, [pc, #416]	; (80086fc <HAL_DMA_IRQHandler+0xa38>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d00e      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a67      	ldr	r2, [pc, #412]	; (8008700 <HAL_DMA_IRQHandler+0xa3c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d009      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a65      	ldr	r2, [pc, #404]	; (8008704 <HAL_DMA_IRQHandler+0xa40>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d004      	beq.n	800857c <HAL_DMA_IRQHandler+0x8b8>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a64      	ldr	r2, [pc, #400]	; (8008708 <HAL_DMA_IRQHandler+0xa44>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d108      	bne.n	800858e <HAL_DMA_IRQHandler+0x8ca>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0201 	bic.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]
 800858c:	e007      	b.n	800859e <HAL_DMA_IRQHandler+0x8da>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0201 	bic.w	r2, r2, #1
 800859c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3301      	adds	r3, #1
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d307      	bcc.n	80085ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1f2      	bne.n	800859e <HAL_DMA_IRQHandler+0x8da>
 80085b8:	e000      	b.n	80085bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80085ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d004      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2203      	movs	r2, #3
 80085ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80085d2:	e003      	b.n	80085dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8272 	beq.w	8008ad2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	4798      	blx	r3
 80085f6:	e26c      	b.n	8008ad2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a43      	ldr	r2, [pc, #268]	; (800870c <HAL_DMA_IRQHandler+0xa48>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d022      	beq.n	8008648 <HAL_DMA_IRQHandler+0x984>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a42      	ldr	r2, [pc, #264]	; (8008710 <HAL_DMA_IRQHandler+0xa4c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d01d      	beq.n	8008648 <HAL_DMA_IRQHandler+0x984>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a40      	ldr	r2, [pc, #256]	; (8008714 <HAL_DMA_IRQHandler+0xa50>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d018      	beq.n	8008648 <HAL_DMA_IRQHandler+0x984>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a3f      	ldr	r2, [pc, #252]	; (8008718 <HAL_DMA_IRQHandler+0xa54>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d013      	beq.n	8008648 <HAL_DMA_IRQHandler+0x984>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a3d      	ldr	r2, [pc, #244]	; (800871c <HAL_DMA_IRQHandler+0xa58>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d00e      	beq.n	8008648 <HAL_DMA_IRQHandler+0x984>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a3c      	ldr	r2, [pc, #240]	; (8008720 <HAL_DMA_IRQHandler+0xa5c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d009      	beq.n	8008648 <HAL_DMA_IRQHandler+0x984>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a3a      	ldr	r2, [pc, #232]	; (8008724 <HAL_DMA_IRQHandler+0xa60>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d004      	beq.n	8008648 <HAL_DMA_IRQHandler+0x984>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a39      	ldr	r2, [pc, #228]	; (8008728 <HAL_DMA_IRQHandler+0xa64>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d101      	bne.n	800864c <HAL_DMA_IRQHandler+0x988>
 8008648:	2301      	movs	r3, #1
 800864a:	e000      	b.n	800864e <HAL_DMA_IRQHandler+0x98a>
 800864c:	2300      	movs	r3, #0
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 823f 	beq.w	8008ad2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	2204      	movs	r2, #4
 8008666:	409a      	lsls	r2, r3
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	4013      	ands	r3, r2
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 80cd 	beq.w	800880c <HAL_DMA_IRQHandler+0xb48>
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 80c7 	beq.w	800880c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008682:	f003 031f 	and.w	r3, r3, #31
 8008686:	2204      	movs	r2, #4
 8008688:	409a      	lsls	r2, r3
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d049      	beq.n	800872c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d109      	bne.n	80086b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 8210 	beq.w	8008acc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086b4:	e20a      	b.n	8008acc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 8206 	beq.w	8008acc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086c8:	e200      	b.n	8008acc <HAL_DMA_IRQHandler+0xe08>
 80086ca:	bf00      	nop
 80086cc:	40020010 	.word	0x40020010
 80086d0:	40020028 	.word	0x40020028
 80086d4:	40020040 	.word	0x40020040
 80086d8:	40020058 	.word	0x40020058
 80086dc:	40020070 	.word	0x40020070
 80086e0:	40020088 	.word	0x40020088
 80086e4:	400200a0 	.word	0x400200a0
 80086e8:	400200b8 	.word	0x400200b8
 80086ec:	40020410 	.word	0x40020410
 80086f0:	40020428 	.word	0x40020428
 80086f4:	40020440 	.word	0x40020440
 80086f8:	40020458 	.word	0x40020458
 80086fc:	40020470 	.word	0x40020470
 8008700:	40020488 	.word	0x40020488
 8008704:	400204a0 	.word	0x400204a0
 8008708:	400204b8 	.word	0x400204b8
 800870c:	58025408 	.word	0x58025408
 8008710:	5802541c 	.word	0x5802541c
 8008714:	58025430 	.word	0x58025430
 8008718:	58025444 	.word	0x58025444
 800871c:	58025458 	.word	0x58025458
 8008720:	5802546c 	.word	0x5802546c
 8008724:	58025480 	.word	0x58025480
 8008728:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b00      	cmp	r3, #0
 8008734:	d160      	bne.n	80087f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a7f      	ldr	r2, [pc, #508]	; (8008938 <HAL_DMA_IRQHandler+0xc74>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d04a      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a7d      	ldr	r2, [pc, #500]	; (800893c <HAL_DMA_IRQHandler+0xc78>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d045      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a7c      	ldr	r2, [pc, #496]	; (8008940 <HAL_DMA_IRQHandler+0xc7c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d040      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a7a      	ldr	r2, [pc, #488]	; (8008944 <HAL_DMA_IRQHandler+0xc80>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d03b      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a79      	ldr	r2, [pc, #484]	; (8008948 <HAL_DMA_IRQHandler+0xc84>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d036      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a77      	ldr	r2, [pc, #476]	; (800894c <HAL_DMA_IRQHandler+0xc88>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d031      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a76      	ldr	r2, [pc, #472]	; (8008950 <HAL_DMA_IRQHandler+0xc8c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d02c      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a74      	ldr	r2, [pc, #464]	; (8008954 <HAL_DMA_IRQHandler+0xc90>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d027      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a73      	ldr	r2, [pc, #460]	; (8008958 <HAL_DMA_IRQHandler+0xc94>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d022      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a71      	ldr	r2, [pc, #452]	; (800895c <HAL_DMA_IRQHandler+0xc98>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d01d      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a70      	ldr	r2, [pc, #448]	; (8008960 <HAL_DMA_IRQHandler+0xc9c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d018      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a6e      	ldr	r2, [pc, #440]	; (8008964 <HAL_DMA_IRQHandler+0xca0>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d013      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a6d      	ldr	r2, [pc, #436]	; (8008968 <HAL_DMA_IRQHandler+0xca4>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00e      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a6b      	ldr	r2, [pc, #428]	; (800896c <HAL_DMA_IRQHandler+0xca8>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d009      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a6a      	ldr	r2, [pc, #424]	; (8008970 <HAL_DMA_IRQHandler+0xcac>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d004      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xb12>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a68      	ldr	r2, [pc, #416]	; (8008974 <HAL_DMA_IRQHandler+0xcb0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d108      	bne.n	80087e8 <HAL_DMA_IRQHandler+0xb24>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0208 	bic.w	r2, r2, #8
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	e007      	b.n	80087f8 <HAL_DMA_IRQHandler+0xb34>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0204 	bic.w	r2, r2, #4
 80087f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 8165 	beq.w	8008acc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800880a:	e15f      	b.n	8008acc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008810:	f003 031f 	and.w	r3, r3, #31
 8008814:	2202      	movs	r2, #2
 8008816:	409a      	lsls	r2, r3
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	4013      	ands	r3, r2
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 80c5 	beq.w	80089ac <HAL_DMA_IRQHandler+0xce8>
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f003 0302 	and.w	r3, r3, #2
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 80bf 	beq.w	80089ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008832:	f003 031f 	and.w	r3, r3, #31
 8008836:	2202      	movs	r2, #2
 8008838:	409a      	lsls	r2, r3
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d018      	beq.n	800887a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d109      	bne.n	8008866 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 813a 	beq.w	8008ad0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008864:	e134      	b.n	8008ad0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 8130 	beq.w	8008ad0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008878:	e12a      	b.n	8008ad0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f003 0320 	and.w	r3, r3, #32
 8008880:	2b00      	cmp	r3, #0
 8008882:	f040 8089 	bne.w	8008998 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a2b      	ldr	r2, [pc, #172]	; (8008938 <HAL_DMA_IRQHandler+0xc74>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d04a      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a29      	ldr	r2, [pc, #164]	; (800893c <HAL_DMA_IRQHandler+0xc78>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d045      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a28      	ldr	r2, [pc, #160]	; (8008940 <HAL_DMA_IRQHandler+0xc7c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d040      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a26      	ldr	r2, [pc, #152]	; (8008944 <HAL_DMA_IRQHandler+0xc80>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d03b      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a25      	ldr	r2, [pc, #148]	; (8008948 <HAL_DMA_IRQHandler+0xc84>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d036      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a23      	ldr	r2, [pc, #140]	; (800894c <HAL_DMA_IRQHandler+0xc88>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d031      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a22      	ldr	r2, [pc, #136]	; (8008950 <HAL_DMA_IRQHandler+0xc8c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d02c      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a20      	ldr	r2, [pc, #128]	; (8008954 <HAL_DMA_IRQHandler+0xc90>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d027      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a1f      	ldr	r2, [pc, #124]	; (8008958 <HAL_DMA_IRQHandler+0xc94>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d022      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1d      	ldr	r2, [pc, #116]	; (800895c <HAL_DMA_IRQHandler+0xc98>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d01d      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a1c      	ldr	r2, [pc, #112]	; (8008960 <HAL_DMA_IRQHandler+0xc9c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d018      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a1a      	ldr	r2, [pc, #104]	; (8008964 <HAL_DMA_IRQHandler+0xca0>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d013      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a19      	ldr	r2, [pc, #100]	; (8008968 <HAL_DMA_IRQHandler+0xca4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00e      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a17      	ldr	r2, [pc, #92]	; (800896c <HAL_DMA_IRQHandler+0xca8>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d009      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a16      	ldr	r2, [pc, #88]	; (8008970 <HAL_DMA_IRQHandler+0xcac>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d004      	beq.n	8008926 <HAL_DMA_IRQHandler+0xc62>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a14      	ldr	r2, [pc, #80]	; (8008974 <HAL_DMA_IRQHandler+0xcb0>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d128      	bne.n	8008978 <HAL_DMA_IRQHandler+0xcb4>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 0214 	bic.w	r2, r2, #20
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	e027      	b.n	8008988 <HAL_DMA_IRQHandler+0xcc4>
 8008938:	40020010 	.word	0x40020010
 800893c:	40020028 	.word	0x40020028
 8008940:	40020040 	.word	0x40020040
 8008944:	40020058 	.word	0x40020058
 8008948:	40020070 	.word	0x40020070
 800894c:	40020088 	.word	0x40020088
 8008950:	400200a0 	.word	0x400200a0
 8008954:	400200b8 	.word	0x400200b8
 8008958:	40020410 	.word	0x40020410
 800895c:	40020428 	.word	0x40020428
 8008960:	40020440 	.word	0x40020440
 8008964:	40020458 	.word	0x40020458
 8008968:	40020470 	.word	0x40020470
 800896c:	40020488 	.word	0x40020488
 8008970:	400204a0 	.word	0x400204a0
 8008974:	400204b8 	.word	0x400204b8
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 020a 	bic.w	r2, r2, #10
 8008986:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8097 	beq.w	8008ad0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089aa:	e091      	b.n	8008ad0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b0:	f003 031f 	and.w	r3, r3, #31
 80089b4:	2208      	movs	r2, #8
 80089b6:	409a      	lsls	r2, r3
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4013      	ands	r3, r2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 8088 	beq.w	8008ad2 <HAL_DMA_IRQHandler+0xe0e>
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8082 	beq.w	8008ad2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a41      	ldr	r2, [pc, #260]	; (8008ad8 <HAL_DMA_IRQHandler+0xe14>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d04a      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a3f      	ldr	r2, [pc, #252]	; (8008adc <HAL_DMA_IRQHandler+0xe18>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d045      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a3e      	ldr	r2, [pc, #248]	; (8008ae0 <HAL_DMA_IRQHandler+0xe1c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d040      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a3c      	ldr	r2, [pc, #240]	; (8008ae4 <HAL_DMA_IRQHandler+0xe20>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d03b      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a3b      	ldr	r2, [pc, #236]	; (8008ae8 <HAL_DMA_IRQHandler+0xe24>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d036      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a39      	ldr	r2, [pc, #228]	; (8008aec <HAL_DMA_IRQHandler+0xe28>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d031      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a38      	ldr	r2, [pc, #224]	; (8008af0 <HAL_DMA_IRQHandler+0xe2c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d02c      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a36      	ldr	r2, [pc, #216]	; (8008af4 <HAL_DMA_IRQHandler+0xe30>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d027      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a35      	ldr	r2, [pc, #212]	; (8008af8 <HAL_DMA_IRQHandler+0xe34>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d022      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a33      	ldr	r2, [pc, #204]	; (8008afc <HAL_DMA_IRQHandler+0xe38>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01d      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a32      	ldr	r2, [pc, #200]	; (8008b00 <HAL_DMA_IRQHandler+0xe3c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d018      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a30      	ldr	r2, [pc, #192]	; (8008b04 <HAL_DMA_IRQHandler+0xe40>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d013      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a2f      	ldr	r2, [pc, #188]	; (8008b08 <HAL_DMA_IRQHandler+0xe44>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00e      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a2d      	ldr	r2, [pc, #180]	; (8008b0c <HAL_DMA_IRQHandler+0xe48>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d009      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a2c      	ldr	r2, [pc, #176]	; (8008b10 <HAL_DMA_IRQHandler+0xe4c>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xdaa>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <HAL_DMA_IRQHandler+0xe50>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d108      	bne.n	8008a80 <HAL_DMA_IRQHandler+0xdbc>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 021c 	bic.w	r2, r2, #28
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e007      	b.n	8008a90 <HAL_DMA_IRQHandler+0xdcc>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 020e 	bic.w	r2, r2, #14
 8008a8e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a94:	f003 031f 	and.w	r3, r3, #31
 8008a98:	2201      	movs	r2, #1
 8008a9a:	409a      	lsls	r2, r3
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d009      	beq.n	8008ad2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4798      	blx	r3
 8008ac6:	e004      	b.n	8008ad2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008ac8:	bf00      	nop
 8008aca:	e002      	b.n	8008ad2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008acc:	bf00      	nop
 8008ace:	e000      	b.n	8008ad2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ad0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008ad2:	3728      	adds	r7, #40	; 0x28
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	40020010 	.word	0x40020010
 8008adc:	40020028 	.word	0x40020028
 8008ae0:	40020040 	.word	0x40020040
 8008ae4:	40020058 	.word	0x40020058
 8008ae8:	40020070 	.word	0x40020070
 8008aec:	40020088 	.word	0x40020088
 8008af0:	400200a0 	.word	0x400200a0
 8008af4:	400200b8 	.word	0x400200b8
 8008af8:	40020410 	.word	0x40020410
 8008afc:	40020428 	.word	0x40020428
 8008b00:	40020440 	.word	0x40020440
 8008b04:	40020458 	.word	0x40020458
 8008b08:	40020470 	.word	0x40020470
 8008b0c:	40020488 	.word	0x40020488
 8008b10:	400204a0 	.word	0x400204a0
 8008b14:	400204b8 	.word	0x400204b8

08008b18 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b42:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b48:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a7f      	ldr	r2, [pc, #508]	; (8008d4c <DMA_SetConfig+0x21c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d072      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a7d      	ldr	r2, [pc, #500]	; (8008d50 <DMA_SetConfig+0x220>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d06d      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a7c      	ldr	r2, [pc, #496]	; (8008d54 <DMA_SetConfig+0x224>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d068      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a7a      	ldr	r2, [pc, #488]	; (8008d58 <DMA_SetConfig+0x228>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d063      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a79      	ldr	r2, [pc, #484]	; (8008d5c <DMA_SetConfig+0x22c>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d05e      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a77      	ldr	r2, [pc, #476]	; (8008d60 <DMA_SetConfig+0x230>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d059      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a76      	ldr	r2, [pc, #472]	; (8008d64 <DMA_SetConfig+0x234>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d054      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a74      	ldr	r2, [pc, #464]	; (8008d68 <DMA_SetConfig+0x238>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d04f      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a73      	ldr	r2, [pc, #460]	; (8008d6c <DMA_SetConfig+0x23c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d04a      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a71      	ldr	r2, [pc, #452]	; (8008d70 <DMA_SetConfig+0x240>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d045      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a70      	ldr	r2, [pc, #448]	; (8008d74 <DMA_SetConfig+0x244>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d040      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a6e      	ldr	r2, [pc, #440]	; (8008d78 <DMA_SetConfig+0x248>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d03b      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a6d      	ldr	r2, [pc, #436]	; (8008d7c <DMA_SetConfig+0x24c>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d036      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a6b      	ldr	r2, [pc, #428]	; (8008d80 <DMA_SetConfig+0x250>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d031      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a6a      	ldr	r2, [pc, #424]	; (8008d84 <DMA_SetConfig+0x254>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d02c      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a68      	ldr	r2, [pc, #416]	; (8008d88 <DMA_SetConfig+0x258>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d027      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a67      	ldr	r2, [pc, #412]	; (8008d8c <DMA_SetConfig+0x25c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d022      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a65      	ldr	r2, [pc, #404]	; (8008d90 <DMA_SetConfig+0x260>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d01d      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a64      	ldr	r2, [pc, #400]	; (8008d94 <DMA_SetConfig+0x264>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d018      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a62      	ldr	r2, [pc, #392]	; (8008d98 <DMA_SetConfig+0x268>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d013      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a61      	ldr	r2, [pc, #388]	; (8008d9c <DMA_SetConfig+0x26c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00e      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a5f      	ldr	r2, [pc, #380]	; (8008da0 <DMA_SetConfig+0x270>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d009      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a5e      	ldr	r2, [pc, #376]	; (8008da4 <DMA_SetConfig+0x274>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d004      	beq.n	8008c3a <DMA_SetConfig+0x10a>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a5c      	ldr	r2, [pc, #368]	; (8008da8 <DMA_SetConfig+0x278>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d101      	bne.n	8008c3e <DMA_SetConfig+0x10e>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <DMA_SetConfig+0x110>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00d      	beq.n	8008c60 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008c4c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d004      	beq.n	8008c60 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c5e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a39      	ldr	r2, [pc, #228]	; (8008d4c <DMA_SetConfig+0x21c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d04a      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a38      	ldr	r2, [pc, #224]	; (8008d50 <DMA_SetConfig+0x220>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d045      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a36      	ldr	r2, [pc, #216]	; (8008d54 <DMA_SetConfig+0x224>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d040      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a35      	ldr	r2, [pc, #212]	; (8008d58 <DMA_SetConfig+0x228>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d03b      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a33      	ldr	r2, [pc, #204]	; (8008d5c <DMA_SetConfig+0x22c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d036      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a32      	ldr	r2, [pc, #200]	; (8008d60 <DMA_SetConfig+0x230>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d031      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a30      	ldr	r2, [pc, #192]	; (8008d64 <DMA_SetConfig+0x234>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d02c      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a2f      	ldr	r2, [pc, #188]	; (8008d68 <DMA_SetConfig+0x238>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d027      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a2d      	ldr	r2, [pc, #180]	; (8008d6c <DMA_SetConfig+0x23c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d022      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a2c      	ldr	r2, [pc, #176]	; (8008d70 <DMA_SetConfig+0x240>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d01d      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a2a      	ldr	r2, [pc, #168]	; (8008d74 <DMA_SetConfig+0x244>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d018      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a29      	ldr	r2, [pc, #164]	; (8008d78 <DMA_SetConfig+0x248>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d013      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a27      	ldr	r2, [pc, #156]	; (8008d7c <DMA_SetConfig+0x24c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d00e      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a26      	ldr	r2, [pc, #152]	; (8008d80 <DMA_SetConfig+0x250>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d009      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a24      	ldr	r2, [pc, #144]	; (8008d84 <DMA_SetConfig+0x254>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d004      	beq.n	8008d00 <DMA_SetConfig+0x1d0>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a23      	ldr	r2, [pc, #140]	; (8008d88 <DMA_SetConfig+0x258>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d101      	bne.n	8008d04 <DMA_SetConfig+0x1d4>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e000      	b.n	8008d06 <DMA_SetConfig+0x1d6>
 8008d04:	2300      	movs	r3, #0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d059      	beq.n	8008dbe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d0e:	f003 031f 	and.w	r3, r3, #31
 8008d12:	223f      	movs	r2, #63	; 0x3f
 8008d14:	409a      	lsls	r2, r3
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d28:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	2b40      	cmp	r3, #64	; 0x40
 8008d38:	d138      	bne.n	8008dac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008d4a:	e086      	b.n	8008e5a <DMA_SetConfig+0x32a>
 8008d4c:	40020010 	.word	0x40020010
 8008d50:	40020028 	.word	0x40020028
 8008d54:	40020040 	.word	0x40020040
 8008d58:	40020058 	.word	0x40020058
 8008d5c:	40020070 	.word	0x40020070
 8008d60:	40020088 	.word	0x40020088
 8008d64:	400200a0 	.word	0x400200a0
 8008d68:	400200b8 	.word	0x400200b8
 8008d6c:	40020410 	.word	0x40020410
 8008d70:	40020428 	.word	0x40020428
 8008d74:	40020440 	.word	0x40020440
 8008d78:	40020458 	.word	0x40020458
 8008d7c:	40020470 	.word	0x40020470
 8008d80:	40020488 	.word	0x40020488
 8008d84:	400204a0 	.word	0x400204a0
 8008d88:	400204b8 	.word	0x400204b8
 8008d8c:	58025408 	.word	0x58025408
 8008d90:	5802541c 	.word	0x5802541c
 8008d94:	58025430 	.word	0x58025430
 8008d98:	58025444 	.word	0x58025444
 8008d9c:	58025458 	.word	0x58025458
 8008da0:	5802546c 	.word	0x5802546c
 8008da4:	58025480 	.word	0x58025480
 8008da8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	60da      	str	r2, [r3, #12]
}
 8008dbc:	e04d      	b.n	8008e5a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a29      	ldr	r2, [pc, #164]	; (8008e68 <DMA_SetConfig+0x338>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d022      	beq.n	8008e0e <DMA_SetConfig+0x2de>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a27      	ldr	r2, [pc, #156]	; (8008e6c <DMA_SetConfig+0x33c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d01d      	beq.n	8008e0e <DMA_SetConfig+0x2de>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a26      	ldr	r2, [pc, #152]	; (8008e70 <DMA_SetConfig+0x340>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d018      	beq.n	8008e0e <DMA_SetConfig+0x2de>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a24      	ldr	r2, [pc, #144]	; (8008e74 <DMA_SetConfig+0x344>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d013      	beq.n	8008e0e <DMA_SetConfig+0x2de>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a23      	ldr	r2, [pc, #140]	; (8008e78 <DMA_SetConfig+0x348>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00e      	beq.n	8008e0e <DMA_SetConfig+0x2de>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a21      	ldr	r2, [pc, #132]	; (8008e7c <DMA_SetConfig+0x34c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d009      	beq.n	8008e0e <DMA_SetConfig+0x2de>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a20      	ldr	r2, [pc, #128]	; (8008e80 <DMA_SetConfig+0x350>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d004      	beq.n	8008e0e <DMA_SetConfig+0x2de>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a1e      	ldr	r2, [pc, #120]	; (8008e84 <DMA_SetConfig+0x354>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d101      	bne.n	8008e12 <DMA_SetConfig+0x2e2>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e000      	b.n	8008e14 <DMA_SetConfig+0x2e4>
 8008e12:	2300      	movs	r3, #0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d020      	beq.n	8008e5a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e1c:	f003 031f 	and.w	r3, r3, #31
 8008e20:	2201      	movs	r2, #1
 8008e22:	409a      	lsls	r2, r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	2b40      	cmp	r3, #64	; 0x40
 8008e36:	d108      	bne.n	8008e4a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	60da      	str	r2, [r3, #12]
}
 8008e48:	e007      	b.n	8008e5a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	60da      	str	r2, [r3, #12]
}
 8008e5a:	bf00      	nop
 8008e5c:	371c      	adds	r7, #28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	58025408 	.word	0x58025408
 8008e6c:	5802541c 	.word	0x5802541c
 8008e70:	58025430 	.word	0x58025430
 8008e74:	58025444 	.word	0x58025444
 8008e78:	58025458 	.word	0x58025458
 8008e7c:	5802546c 	.word	0x5802546c
 8008e80:	58025480 	.word	0x58025480
 8008e84:	58025494 	.word	0x58025494

08008e88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a42      	ldr	r2, [pc, #264]	; (8008fa0 <DMA_CalcBaseAndBitshift+0x118>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d04a      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a41      	ldr	r2, [pc, #260]	; (8008fa4 <DMA_CalcBaseAndBitshift+0x11c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d045      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a3f      	ldr	r2, [pc, #252]	; (8008fa8 <DMA_CalcBaseAndBitshift+0x120>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d040      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a3e      	ldr	r2, [pc, #248]	; (8008fac <DMA_CalcBaseAndBitshift+0x124>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d03b      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a3c      	ldr	r2, [pc, #240]	; (8008fb0 <DMA_CalcBaseAndBitshift+0x128>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d036      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a3b      	ldr	r2, [pc, #236]	; (8008fb4 <DMA_CalcBaseAndBitshift+0x12c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d031      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a39      	ldr	r2, [pc, #228]	; (8008fb8 <DMA_CalcBaseAndBitshift+0x130>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d02c      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a38      	ldr	r2, [pc, #224]	; (8008fbc <DMA_CalcBaseAndBitshift+0x134>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d027      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a36      	ldr	r2, [pc, #216]	; (8008fc0 <DMA_CalcBaseAndBitshift+0x138>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d022      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a35      	ldr	r2, [pc, #212]	; (8008fc4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d01d      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a33      	ldr	r2, [pc, #204]	; (8008fc8 <DMA_CalcBaseAndBitshift+0x140>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d018      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a32      	ldr	r2, [pc, #200]	; (8008fcc <DMA_CalcBaseAndBitshift+0x144>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d013      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a30      	ldr	r2, [pc, #192]	; (8008fd0 <DMA_CalcBaseAndBitshift+0x148>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d00e      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a2f      	ldr	r2, [pc, #188]	; (8008fd4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d009      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a2d      	ldr	r2, [pc, #180]	; (8008fd8 <DMA_CalcBaseAndBitshift+0x150>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d004      	beq.n	8008f30 <DMA_CalcBaseAndBitshift+0xa8>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a2c      	ldr	r2, [pc, #176]	; (8008fdc <DMA_CalcBaseAndBitshift+0x154>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d101      	bne.n	8008f34 <DMA_CalcBaseAndBitshift+0xac>
 8008f30:	2301      	movs	r3, #1
 8008f32:	e000      	b.n	8008f36 <DMA_CalcBaseAndBitshift+0xae>
 8008f34:	2300      	movs	r3, #0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d024      	beq.n	8008f84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	3b10      	subs	r3, #16
 8008f42:	4a27      	ldr	r2, [pc, #156]	; (8008fe0 <DMA_CalcBaseAndBitshift+0x158>)
 8008f44:	fba2 2303 	umull	r2, r3, r2, r3
 8008f48:	091b      	lsrs	r3, r3, #4
 8008f4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	4a24      	ldr	r2, [pc, #144]	; (8008fe4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008f54:	5cd3      	ldrb	r3, [r2, r3]
 8008f56:	461a      	mov	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d908      	bls.n	8008f74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	4b1f      	ldr	r3, [pc, #124]	; (8008fe8 <DMA_CalcBaseAndBitshift+0x160>)
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	1d1a      	adds	r2, r3, #4
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	659a      	str	r2, [r3, #88]	; 0x58
 8008f72:	e00d      	b.n	8008f90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <DMA_CalcBaseAndBitshift+0x160>)
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6593      	str	r3, [r2, #88]	; 0x58
 8008f82:	e005      	b.n	8008f90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	40020010 	.word	0x40020010
 8008fa4:	40020028 	.word	0x40020028
 8008fa8:	40020040 	.word	0x40020040
 8008fac:	40020058 	.word	0x40020058
 8008fb0:	40020070 	.word	0x40020070
 8008fb4:	40020088 	.word	0x40020088
 8008fb8:	400200a0 	.word	0x400200a0
 8008fbc:	400200b8 	.word	0x400200b8
 8008fc0:	40020410 	.word	0x40020410
 8008fc4:	40020428 	.word	0x40020428
 8008fc8:	40020440 	.word	0x40020440
 8008fcc:	40020458 	.word	0x40020458
 8008fd0:	40020470 	.word	0x40020470
 8008fd4:	40020488 	.word	0x40020488
 8008fd8:	400204a0 	.word	0x400204a0
 8008fdc:	400204b8 	.word	0x400204b8
 8008fe0:	aaaaaaab 	.word	0xaaaaaaab
 8008fe4:	08017ba8 	.word	0x08017ba8
 8008fe8:	fffffc00 	.word	0xfffffc00

08008fec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d120      	bne.n	8009042 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	2b03      	cmp	r3, #3
 8009006:	d858      	bhi.n	80090ba <DMA_CheckFifoParam+0xce>
 8009008:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <DMA_CheckFifoParam+0x24>)
 800900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900e:	bf00      	nop
 8009010:	08009021 	.word	0x08009021
 8009014:	08009033 	.word	0x08009033
 8009018:	08009021 	.word	0x08009021
 800901c:	080090bb 	.word	0x080090bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d048      	beq.n	80090be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009030:	e045      	b.n	80090be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800903a:	d142      	bne.n	80090c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009040:	e03f      	b.n	80090c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800904a:	d123      	bne.n	8009094 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	2b03      	cmp	r3, #3
 8009052:	d838      	bhi.n	80090c6 <DMA_CheckFifoParam+0xda>
 8009054:	a201      	add	r2, pc, #4	; (adr r2, 800905c <DMA_CheckFifoParam+0x70>)
 8009056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905a:	bf00      	nop
 800905c:	0800906d 	.word	0x0800906d
 8009060:	08009073 	.word	0x08009073
 8009064:	0800906d 	.word	0x0800906d
 8009068:	08009085 	.word	0x08009085
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	73fb      	strb	r3, [r7, #15]
        break;
 8009070:	e030      	b.n	80090d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d025      	beq.n	80090ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009082:	e022      	b.n	80090ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800908c:	d11f      	bne.n	80090ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009092:	e01c      	b.n	80090ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009098:	2b02      	cmp	r3, #2
 800909a:	d902      	bls.n	80090a2 <DMA_CheckFifoParam+0xb6>
 800909c:	2b03      	cmp	r3, #3
 800909e:	d003      	beq.n	80090a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80090a0:	e018      	b.n	80090d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	73fb      	strb	r3, [r7, #15]
        break;
 80090a6:	e015      	b.n	80090d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00e      	beq.n	80090d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	73fb      	strb	r3, [r7, #15]
    break;
 80090b8:	e00b      	b.n	80090d2 <DMA_CheckFifoParam+0xe6>
        break;
 80090ba:	bf00      	nop
 80090bc:	e00a      	b.n	80090d4 <DMA_CheckFifoParam+0xe8>
        break;
 80090be:	bf00      	nop
 80090c0:	e008      	b.n	80090d4 <DMA_CheckFifoParam+0xe8>
        break;
 80090c2:	bf00      	nop
 80090c4:	e006      	b.n	80090d4 <DMA_CheckFifoParam+0xe8>
        break;
 80090c6:	bf00      	nop
 80090c8:	e004      	b.n	80090d4 <DMA_CheckFifoParam+0xe8>
        break;
 80090ca:	bf00      	nop
 80090cc:	e002      	b.n	80090d4 <DMA_CheckFifoParam+0xe8>
        break;
 80090ce:	bf00      	nop
 80090d0:	e000      	b.n	80090d4 <DMA_CheckFifoParam+0xe8>
    break;
 80090d2:	bf00      	nop
    }
  }

  return status;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop

080090e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a38      	ldr	r2, [pc, #224]	; (80091d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d022      	beq.n	8009142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a36      	ldr	r2, [pc, #216]	; (80091dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d01d      	beq.n	8009142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a35      	ldr	r2, [pc, #212]	; (80091e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d018      	beq.n	8009142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a33      	ldr	r2, [pc, #204]	; (80091e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d013      	beq.n	8009142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a32      	ldr	r2, [pc, #200]	; (80091e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d00e      	beq.n	8009142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a30      	ldr	r2, [pc, #192]	; (80091ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d009      	beq.n	8009142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a2f      	ldr	r2, [pc, #188]	; (80091f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d004      	beq.n	8009142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a2d      	ldr	r2, [pc, #180]	; (80091f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d101      	bne.n	8009146 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009146:	2300      	movs	r3, #0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01a      	beq.n	8009182 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	3b08      	subs	r3, #8
 8009154:	4a28      	ldr	r2, [pc, #160]	; (80091f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	091b      	lsrs	r3, r3, #4
 800915c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	4b26      	ldr	r3, [pc, #152]	; (80091fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	461a      	mov	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a24      	ldr	r2, [pc, #144]	; (8009200 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009170:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f003 031f 	and.w	r3, r3, #31
 8009178:	2201      	movs	r2, #1
 800917a:	409a      	lsls	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009180:	e024      	b.n	80091cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	b2db      	uxtb	r3, r3
 8009188:	3b10      	subs	r3, #16
 800918a:	4a1e      	ldr	r2, [pc, #120]	; (8009204 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800918c:	fba2 2303 	umull	r2, r3, r2, r3
 8009190:	091b      	lsrs	r3, r3, #4
 8009192:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	4a1c      	ldr	r2, [pc, #112]	; (8009208 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d806      	bhi.n	80091aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4a1b      	ldr	r2, [pc, #108]	; (800920c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d902      	bls.n	80091aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3308      	adds	r3, #8
 80091a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4b18      	ldr	r3, [pc, #96]	; (8009210 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	461a      	mov	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a16      	ldr	r2, [pc, #88]	; (8009214 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80091bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f003 031f 	and.w	r3, r3, #31
 80091c4:	2201      	movs	r2, #1
 80091c6:	409a      	lsls	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80091cc:	bf00      	nop
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	58025408 	.word	0x58025408
 80091dc:	5802541c 	.word	0x5802541c
 80091e0:	58025430 	.word	0x58025430
 80091e4:	58025444 	.word	0x58025444
 80091e8:	58025458 	.word	0x58025458
 80091ec:	5802546c 	.word	0x5802546c
 80091f0:	58025480 	.word	0x58025480
 80091f4:	58025494 	.word	0x58025494
 80091f8:	cccccccd 	.word	0xcccccccd
 80091fc:	16009600 	.word	0x16009600
 8009200:	58025880 	.word	0x58025880
 8009204:	aaaaaaab 	.word	0xaaaaaaab
 8009208:	400204b8 	.word	0x400204b8
 800920c:	4002040f 	.word	0x4002040f
 8009210:	10008200 	.word	0x10008200
 8009214:	40020880 	.word	0x40020880

08009218 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	b2db      	uxtb	r3, r3
 8009226:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d04a      	beq.n	80092c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b08      	cmp	r3, #8
 8009232:	d847      	bhi.n	80092c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a25      	ldr	r2, [pc, #148]	; (80092d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d022      	beq.n	8009284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a24      	ldr	r2, [pc, #144]	; (80092d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d01d      	beq.n	8009284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a22      	ldr	r2, [pc, #136]	; (80092d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d018      	beq.n	8009284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a21      	ldr	r2, [pc, #132]	; (80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d013      	beq.n	8009284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a1f      	ldr	r2, [pc, #124]	; (80092e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d00e      	beq.n	8009284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a1e      	ldr	r2, [pc, #120]	; (80092e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d009      	beq.n	8009284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a1c      	ldr	r2, [pc, #112]	; (80092e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d004      	beq.n	8009284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a1b      	ldr	r2, [pc, #108]	; (80092ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d101      	bne.n	8009288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009284:	2301      	movs	r3, #1
 8009286:	e000      	b.n	800928a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009288:	2300      	movs	r3, #0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	4b17      	ldr	r3, [pc, #92]	; (80092f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	461a      	mov	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a15      	ldr	r2, [pc, #84]	; (80092f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80092a0:	671a      	str	r2, [r3, #112]	; 0x70
 80092a2:	e009      	b.n	80092b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4b14      	ldr	r3, [pc, #80]	; (80092f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	461a      	mov	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a11      	ldr	r2, [pc, #68]	; (80092fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80092b6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	2201      	movs	r2, #1
 80092be:	409a      	lsls	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80092c4:	bf00      	nop
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	58025408 	.word	0x58025408
 80092d4:	5802541c 	.word	0x5802541c
 80092d8:	58025430 	.word	0x58025430
 80092dc:	58025444 	.word	0x58025444
 80092e0:	58025458 	.word	0x58025458
 80092e4:	5802546c 	.word	0x5802546c
 80092e8:	58025480 	.word	0x58025480
 80092ec:	58025494 	.word	0x58025494
 80092f0:	1600963f 	.word	0x1600963f
 80092f4:	58025940 	.word	0x58025940
 80092f8:	1000823f 	.word	0x1000823f
 80092fc:	40020940 	.word	0x40020940

08009300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009300:	b480      	push	{r7}
 8009302:	b089      	sub	sp, #36	; 0x24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800930a:	2300      	movs	r3, #0
 800930c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800930e:	4b89      	ldr	r3, [pc, #548]	; (8009534 <HAL_GPIO_Init+0x234>)
 8009310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009312:	e194      	b.n	800963e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	2101      	movs	r1, #1
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	fa01 f303 	lsl.w	r3, r1, r3
 8009320:	4013      	ands	r3, r2
 8009322:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 8186 	beq.w	8009638 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f003 0303 	and.w	r3, r3, #3
 8009334:	2b01      	cmp	r3, #1
 8009336:	d005      	beq.n	8009344 <HAL_GPIO_Init+0x44>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f003 0303 	and.w	r3, r3, #3
 8009340:	2b02      	cmp	r3, #2
 8009342:	d130      	bne.n	80093a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	2203      	movs	r2, #3
 8009350:	fa02 f303 	lsl.w	r3, r2, r3
 8009354:	43db      	mvns	r3, r3
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	4013      	ands	r3, r2
 800935a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	005b      	lsls	r3, r3, #1
 8009364:	fa02 f303 	lsl.w	r3, r2, r3
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	4313      	orrs	r3, r2
 800936c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800937a:	2201      	movs	r2, #1
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	fa02 f303 	lsl.w	r3, r2, r3
 8009382:	43db      	mvns	r3, r3
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	4013      	ands	r3, r2
 8009388:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	091b      	lsrs	r3, r3, #4
 8009390:	f003 0201 	and.w	r2, r3, #1
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	fa02 f303 	lsl.w	r3, r2, r3
 800939a:	69ba      	ldr	r2, [r7, #24]
 800939c:	4313      	orrs	r3, r2
 800939e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d017      	beq.n	80093e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	2203      	movs	r2, #3
 80093be:	fa02 f303 	lsl.w	r3, r2, r3
 80093c2:	43db      	mvns	r3, r3
 80093c4:	69ba      	ldr	r2, [r7, #24]
 80093c6:	4013      	ands	r3, r2
 80093c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	fa02 f303 	lsl.w	r3, r2, r3
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	4313      	orrs	r3, r2
 80093da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d123      	bne.n	8009436 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	08da      	lsrs	r2, r3, #3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3208      	adds	r2, #8
 80093f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	f003 0307 	and.w	r3, r3, #7
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	220f      	movs	r2, #15
 8009406:	fa02 f303 	lsl.w	r3, r2, r3
 800940a:	43db      	mvns	r3, r3
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	4013      	ands	r3, r2
 8009410:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	691a      	ldr	r2, [r3, #16]
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	f003 0307 	and.w	r3, r3, #7
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	fa02 f303 	lsl.w	r3, r2, r3
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	4313      	orrs	r3, r2
 8009426:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	08da      	lsrs	r2, r3, #3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3208      	adds	r2, #8
 8009430:	69b9      	ldr	r1, [r7, #24]
 8009432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	2203      	movs	r2, #3
 8009442:	fa02 f303 	lsl.w	r3, r2, r3
 8009446:	43db      	mvns	r3, r3
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	4013      	ands	r3, r2
 800944c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f003 0203 	and.w	r2, r3, #3
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	005b      	lsls	r3, r3, #1
 800945a:	fa02 f303 	lsl.w	r3, r2, r3
 800945e:	69ba      	ldr	r2, [r7, #24]
 8009460:	4313      	orrs	r3, r2
 8009462:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 80e0 	beq.w	8009638 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009478:	4b2f      	ldr	r3, [pc, #188]	; (8009538 <HAL_GPIO_Init+0x238>)
 800947a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800947e:	4a2e      	ldr	r2, [pc, #184]	; (8009538 <HAL_GPIO_Init+0x238>)
 8009480:	f043 0302 	orr.w	r3, r3, #2
 8009484:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009488:	4b2b      	ldr	r3, [pc, #172]	; (8009538 <HAL_GPIO_Init+0x238>)
 800948a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009496:	4a29      	ldr	r2, [pc, #164]	; (800953c <HAL_GPIO_Init+0x23c>)
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	089b      	lsrs	r3, r3, #2
 800949c:	3302      	adds	r3, #2
 800949e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f003 0303 	and.w	r3, r3, #3
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	220f      	movs	r2, #15
 80094ae:	fa02 f303 	lsl.w	r3, r2, r3
 80094b2:	43db      	mvns	r3, r3
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	4013      	ands	r3, r2
 80094b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a20      	ldr	r2, [pc, #128]	; (8009540 <HAL_GPIO_Init+0x240>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d052      	beq.n	8009568 <HAL_GPIO_Init+0x268>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a1f      	ldr	r2, [pc, #124]	; (8009544 <HAL_GPIO_Init+0x244>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d031      	beq.n	800952e <HAL_GPIO_Init+0x22e>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a1e      	ldr	r2, [pc, #120]	; (8009548 <HAL_GPIO_Init+0x248>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d02b      	beq.n	800952a <HAL_GPIO_Init+0x22a>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a1d      	ldr	r2, [pc, #116]	; (800954c <HAL_GPIO_Init+0x24c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d025      	beq.n	8009526 <HAL_GPIO_Init+0x226>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a1c      	ldr	r2, [pc, #112]	; (8009550 <HAL_GPIO_Init+0x250>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d01f      	beq.n	8009522 <HAL_GPIO_Init+0x222>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a1b      	ldr	r2, [pc, #108]	; (8009554 <HAL_GPIO_Init+0x254>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d019      	beq.n	800951e <HAL_GPIO_Init+0x21e>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a1a      	ldr	r2, [pc, #104]	; (8009558 <HAL_GPIO_Init+0x258>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d013      	beq.n	800951a <HAL_GPIO_Init+0x21a>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a19      	ldr	r2, [pc, #100]	; (800955c <HAL_GPIO_Init+0x25c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00d      	beq.n	8009516 <HAL_GPIO_Init+0x216>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a18      	ldr	r2, [pc, #96]	; (8009560 <HAL_GPIO_Init+0x260>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d007      	beq.n	8009512 <HAL_GPIO_Init+0x212>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a17      	ldr	r2, [pc, #92]	; (8009564 <HAL_GPIO_Init+0x264>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d101      	bne.n	800950e <HAL_GPIO_Init+0x20e>
 800950a:	2309      	movs	r3, #9
 800950c:	e02d      	b.n	800956a <HAL_GPIO_Init+0x26a>
 800950e:	230a      	movs	r3, #10
 8009510:	e02b      	b.n	800956a <HAL_GPIO_Init+0x26a>
 8009512:	2308      	movs	r3, #8
 8009514:	e029      	b.n	800956a <HAL_GPIO_Init+0x26a>
 8009516:	2307      	movs	r3, #7
 8009518:	e027      	b.n	800956a <HAL_GPIO_Init+0x26a>
 800951a:	2306      	movs	r3, #6
 800951c:	e025      	b.n	800956a <HAL_GPIO_Init+0x26a>
 800951e:	2305      	movs	r3, #5
 8009520:	e023      	b.n	800956a <HAL_GPIO_Init+0x26a>
 8009522:	2304      	movs	r3, #4
 8009524:	e021      	b.n	800956a <HAL_GPIO_Init+0x26a>
 8009526:	2303      	movs	r3, #3
 8009528:	e01f      	b.n	800956a <HAL_GPIO_Init+0x26a>
 800952a:	2302      	movs	r3, #2
 800952c:	e01d      	b.n	800956a <HAL_GPIO_Init+0x26a>
 800952e:	2301      	movs	r3, #1
 8009530:	e01b      	b.n	800956a <HAL_GPIO_Init+0x26a>
 8009532:	bf00      	nop
 8009534:	58000080 	.word	0x58000080
 8009538:	58024400 	.word	0x58024400
 800953c:	58000400 	.word	0x58000400
 8009540:	58020000 	.word	0x58020000
 8009544:	58020400 	.word	0x58020400
 8009548:	58020800 	.word	0x58020800
 800954c:	58020c00 	.word	0x58020c00
 8009550:	58021000 	.word	0x58021000
 8009554:	58021400 	.word	0x58021400
 8009558:	58021800 	.word	0x58021800
 800955c:	58021c00 	.word	0x58021c00
 8009560:	58022000 	.word	0x58022000
 8009564:	58022400 	.word	0x58022400
 8009568:	2300      	movs	r3, #0
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	f002 0203 	and.w	r2, r2, #3
 8009570:	0092      	lsls	r2, r2, #2
 8009572:	4093      	lsls	r3, r2
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	4313      	orrs	r3, r2
 8009578:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800957a:	4938      	ldr	r1, [pc, #224]	; (800965c <HAL_GPIO_Init+0x35c>)
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	089b      	lsrs	r3, r3, #2
 8009580:	3302      	adds	r3, #2
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	43db      	mvns	r3, r3
 8009594:	69ba      	ldr	r2, [r7, #24]
 8009596:	4013      	ands	r3, r2
 8009598:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80095ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80095b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	43db      	mvns	r3, r3
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	4013      	ands	r3, r2
 80095c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d003      	beq.n	80095dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	4313      	orrs	r3, r2
 80095da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80095dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	43db      	mvns	r3, r3
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	4013      	ands	r3, r2
 80095f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	4313      	orrs	r3, r2
 8009606:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	43db      	mvns	r3, r3
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	4013      	ands	r3, r2
 800961c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	4313      	orrs	r3, r2
 8009630:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	69ba      	ldr	r2, [r7, #24]
 8009636:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	3301      	adds	r3, #1
 800963c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	fa22 f303 	lsr.w	r3, r2, r3
 8009648:	2b00      	cmp	r3, #0
 800964a:	f47f ae63 	bne.w	8009314 <HAL_GPIO_Init+0x14>
  }
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	3724      	adds	r7, #36	; 0x24
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	58000400 	.word	0x58000400

08009660 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691a      	ldr	r2, [r3, #16]
 8009670:	887b      	ldrh	r3, [r7, #2]
 8009672:	4013      	ands	r3, r2
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009678:	2301      	movs	r3, #1
 800967a:	73fb      	strb	r3, [r7, #15]
 800967c:	e001      	b.n	8009682 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009682:	7bfb      	ldrb	r3, [r7, #15]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	807b      	strh	r3, [r7, #2]
 800969c:	4613      	mov	r3, r2
 800969e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80096a0:	787b      	ldrb	r3, [r7, #1]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096a6:	887a      	ldrh	r2, [r7, #2]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80096ac:	e003      	b.n	80096b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80096ae:	887b      	ldrh	r3, [r7, #2]
 80096b0:	041a      	lsls	r2, r3, #16
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	619a      	str	r2, [r3, #24]
}
 80096b6:	bf00      	nop
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
	...

080096c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e08b      	b.n	80097ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7f7 fece 	bl	800148c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2224      	movs	r2, #36	; 0x24
 80096f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0201 	bic.w	r2, r2, #1
 8009706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009714:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009724:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d107      	bne.n	800973e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	689a      	ldr	r2, [r3, #8]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800973a:	609a      	str	r2, [r3, #8]
 800973c:	e006      	b.n	800974c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800974a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d108      	bne.n	8009766 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009762:	605a      	str	r2, [r3, #4]
 8009764:	e007      	b.n	8009776 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009774:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6859      	ldr	r1, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	4b1d      	ldr	r3, [pc, #116]	; (80097f8 <HAL_I2C_Init+0x134>)
 8009782:	430b      	orrs	r3, r1
 8009784:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68da      	ldr	r2, [r3, #12]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009794:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691a      	ldr	r2, [r3, #16]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	430a      	orrs	r2, r1
 80097ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	69d9      	ldr	r1, [r3, #28]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a1a      	ldr	r2, [r3, #32]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	430a      	orrs	r2, r1
 80097be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f042 0201 	orr.w	r2, r2, #1
 80097ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	02008000 	.word	0x02008000

080097fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af02      	add	r7, sp, #8
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	461a      	mov	r2, r3
 8009808:	460b      	mov	r3, r1
 800980a:	817b      	strh	r3, [r7, #10]
 800980c:	4613      	mov	r3, r2
 800980e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b20      	cmp	r3, #32
 800981a:	f040 80fd 	bne.w	8009a18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009824:	2b01      	cmp	r3, #1
 8009826:	d101      	bne.n	800982c <HAL_I2C_Master_Transmit+0x30>
 8009828:	2302      	movs	r3, #2
 800982a:	e0f6      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x21e>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009834:	f7fa fdf4 	bl	8004420 <HAL_GetTick>
 8009838:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	2319      	movs	r3, #25
 8009840:	2201      	movs	r2, #1
 8009842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 fa0a 	bl	8009c60 <I2C_WaitOnFlagUntilTimeout>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e0e1      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2221      	movs	r2, #33	; 0x21
 800985a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2210      	movs	r2, #16
 8009862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	893a      	ldrh	r2, [r7, #8]
 8009876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009882:	b29b      	uxth	r3, r3
 8009884:	2bff      	cmp	r3, #255	; 0xff
 8009886:	d906      	bls.n	8009896 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	22ff      	movs	r2, #255	; 0xff
 800988c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800988e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	e007      	b.n	80098a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800989a:	b29a      	uxth	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80098a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d024      	beq.n	80098f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	781a      	ldrb	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d6:	3b01      	subs	r3, #1
 80098d8:	b29a      	uxth	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	3301      	adds	r3, #1
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	8979      	ldrh	r1, [r7, #10]
 80098ea:	4b4e      	ldr	r3, [pc, #312]	; (8009a24 <HAL_I2C_Master_Transmit+0x228>)
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 fc05 	bl	800a100 <I2C_TransferConfig>
 80098f6:	e066      	b.n	80099c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	8979      	ldrh	r1, [r7, #10]
 8009900:	4b48      	ldr	r3, [pc, #288]	; (8009a24 <HAL_I2C_Master_Transmit+0x228>)
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 fbfa 	bl	800a100 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800990c:	e05b      	b.n	80099c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	6a39      	ldr	r1, [r7, #32]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f000 f9fd 	bl	8009d12 <I2C_WaitOnTXISFlagUntilTimeout>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e07b      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	781a      	ldrb	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993c:	b29b      	uxth	r3, r3
 800993e:	3b01      	subs	r3, #1
 8009940:	b29a      	uxth	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800994a:	3b01      	subs	r3, #1
 800994c:	b29a      	uxth	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009956:	b29b      	uxth	r3, r3
 8009958:	2b00      	cmp	r3, #0
 800995a:	d034      	beq.n	80099c6 <HAL_I2C_Master_Transmit+0x1ca>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009960:	2b00      	cmp	r3, #0
 8009962:	d130      	bne.n	80099c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	2200      	movs	r2, #0
 800996c:	2180      	movs	r1, #128	; 0x80
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 f976 	bl	8009c60 <I2C_WaitOnFlagUntilTimeout>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e04d      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009982:	b29b      	uxth	r3, r3
 8009984:	2bff      	cmp	r3, #255	; 0xff
 8009986:	d90e      	bls.n	80099a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	22ff      	movs	r2, #255	; 0xff
 800998c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009992:	b2da      	uxtb	r2, r3
 8009994:	8979      	ldrh	r1, [r7, #10]
 8009996:	2300      	movs	r3, #0
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 fbae 	bl	800a100 <I2C_TransferConfig>
 80099a4:	e00f      	b.n	80099c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	8979      	ldrh	r1, [r7, #10]
 80099b8:	2300      	movs	r3, #0
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 fb9d 	bl	800a100 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d19e      	bne.n	800990e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	6a39      	ldr	r1, [r7, #32]
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 f9e3 	bl	8009da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e01a      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2220      	movs	r2, #32
 80099ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6859      	ldr	r1, [r3, #4]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <HAL_I2C_Master_Transmit+0x22c>)
 80099f8:	400b      	ands	r3, r1
 80099fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	e000      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009a18:	2302      	movs	r3, #2
  }
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	80002000 	.word	0x80002000
 8009a28:	fe00e800 	.word	0xfe00e800

08009a2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	607a      	str	r2, [r7, #4]
 8009a36:	461a      	mov	r2, r3
 8009a38:	460b      	mov	r3, r1
 8009a3a:	817b      	strh	r3, [r7, #10]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b20      	cmp	r3, #32
 8009a4a:	f040 80db 	bne.w	8009c04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d101      	bne.n	8009a5c <HAL_I2C_Master_Receive+0x30>
 8009a58:	2302      	movs	r3, #2
 8009a5a:	e0d4      	b.n	8009c06 <HAL_I2C_Master_Receive+0x1da>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a64:	f7fa fcdc 	bl	8004420 <HAL_GetTick>
 8009a68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	2319      	movs	r3, #25
 8009a70:	2201      	movs	r2, #1
 8009a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 f8f2 	bl	8009c60 <I2C_WaitOnFlagUntilTimeout>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e0bf      	b.n	8009c06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2222      	movs	r2, #34	; 0x22
 8009a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2210      	movs	r2, #16
 8009a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	893a      	ldrh	r2, [r7, #8]
 8009aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	2bff      	cmp	r3, #255	; 0xff
 8009ab6:	d90e      	bls.n	8009ad6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	22ff      	movs	r2, #255	; 0xff
 8009abc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	8979      	ldrh	r1, [r7, #10]
 8009ac6:	4b52      	ldr	r3, [pc, #328]	; (8009c10 <HAL_I2C_Master_Receive+0x1e4>)
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 fb16 	bl	800a100 <I2C_TransferConfig>
 8009ad4:	e06d      	b.n	8009bb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	8979      	ldrh	r1, [r7, #10]
 8009ae8:	4b49      	ldr	r3, [pc, #292]	; (8009c10 <HAL_I2C_Master_Receive+0x1e4>)
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 fb05 	bl	800a100 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009af6:	e05c      	b.n	8009bb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	6a39      	ldr	r1, [r7, #32]
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 f993 	bl	8009e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e07c      	b.n	8009c06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d034      	beq.n	8009bb2 <HAL_I2C_Master_Receive+0x186>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d130      	bne.n	8009bb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	2200      	movs	r2, #0
 8009b58:	2180      	movs	r1, #128	; 0x80
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 f880 	bl	8009c60 <I2C_WaitOnFlagUntilTimeout>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e04d      	b.n	8009c06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	2bff      	cmp	r3, #255	; 0xff
 8009b72:	d90e      	bls.n	8009b92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	22ff      	movs	r2, #255	; 0xff
 8009b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	8979      	ldrh	r1, [r7, #10]
 8009b82:	2300      	movs	r3, #0
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f000 fab8 	bl	800a100 <I2C_TransferConfig>
 8009b90:	e00f      	b.n	8009bb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	8979      	ldrh	r1, [r7, #10]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 faa7 	bl	800a100 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d19d      	bne.n	8009af8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	6a39      	ldr	r1, [r7, #32]
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 f8ed 	bl	8009da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e01a      	b.n	8009c06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6859      	ldr	r1, [r3, #4]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4b0c      	ldr	r3, [pc, #48]	; (8009c14 <HAL_I2C_Master_Receive+0x1e8>)
 8009be4:	400b      	ands	r3, r1
 8009be6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	e000      	b.n	8009c06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009c04:	2302      	movs	r3, #2
  }
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	80002400 	.word	0x80002400
 8009c14:	fe00e800 	.word	0xfe00e800

08009c18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	f003 0302 	and.w	r3, r3, #2
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d103      	bne.n	8009c36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2200      	movs	r2, #0
 8009c34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d007      	beq.n	8009c54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	699a      	ldr	r2, [r3, #24]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f042 0201 	orr.w	r2, r2, #1
 8009c52:	619a      	str	r2, [r3, #24]
  }
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c70:	e03b      	b.n	8009cea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c72:	69ba      	ldr	r2, [r7, #24]
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 f962 	bl	8009f40 <I2C_IsErrorOccurred>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e041      	b.n	8009d0a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c8c:	d02d      	beq.n	8009cea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c8e:	f7fa fbc7 	bl	8004420 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d302      	bcc.n	8009ca4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d122      	bne.n	8009cea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	699a      	ldr	r2, [r3, #24]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	4013      	ands	r3, r2
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	bf0c      	ite	eq
 8009cb4:	2301      	moveq	r3, #1
 8009cb6:	2300      	movne	r3, #0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	461a      	mov	r2, r3
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d113      	bne.n	8009cea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc6:	f043 0220 	orr.w	r2, r3, #32
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e00f      	b.n	8009d0a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	699a      	ldr	r2, [r3, #24]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	bf0c      	ite	eq
 8009cfa:	2301      	moveq	r3, #1
 8009cfc:	2300      	movne	r3, #0
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	461a      	mov	r2, r3
 8009d02:	79fb      	ldrb	r3, [r7, #7]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d0b4      	beq.n	8009c72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	60f8      	str	r0, [r7, #12]
 8009d1a:	60b9      	str	r1, [r7, #8]
 8009d1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d1e:	e033      	b.n	8009d88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	68b9      	ldr	r1, [r7, #8]
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 f90b 	bl	8009f40 <I2C_IsErrorOccurred>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e031      	b.n	8009d98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d3a:	d025      	beq.n	8009d88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d3c:	f7fa fb70 	bl	8004420 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d302      	bcc.n	8009d52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d11a      	bne.n	8009d88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	f003 0302 	and.w	r3, r3, #2
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d013      	beq.n	8009d88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d64:	f043 0220 	orr.w	r2, r3, #32
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2220      	movs	r2, #32
 8009d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e007      	b.n	8009d98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d1c4      	bne.n	8009d20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dac:	e02f      	b.n	8009e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	68b9      	ldr	r1, [r7, #8]
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f000 f8c4 	bl	8009f40 <I2C_IsErrorOccurred>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e02d      	b.n	8009e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dc2:	f7fa fb2d 	bl	8004420 <HAL_GetTick>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d302      	bcc.n	8009dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d11a      	bne.n	8009e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b20      	cmp	r3, #32
 8009de4:	d013      	beq.n	8009e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dea:	f043 0220 	orr.w	r2, r3, #32
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e007      	b.n	8009e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	f003 0320 	and.w	r3, r3, #32
 8009e18:	2b20      	cmp	r3, #32
 8009e1a:	d1c8      	bne.n	8009dae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009e38:	e071      	b.n	8009f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	68b9      	ldr	r1, [r7, #8]
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 f87e 	bl	8009f40 <I2C_IsErrorOccurred>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	f003 0320 	and.w	r3, r3, #32
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d13b      	bne.n	8009ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d138      	bne.n	8009ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	d105      	bne.n	8009e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	f003 0310 	and.w	r3, r3, #16
 8009e86:	2b10      	cmp	r3, #16
 8009e88:	d121      	bne.n	8009ece <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2210      	movs	r2, #16
 8009e90:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2204      	movs	r2, #4
 8009e96:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6859      	ldr	r1, [r3, #4]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	4b24      	ldr	r3, [pc, #144]	; (8009f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009eac:	400b      	ands	r3, r1
 8009eae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	75fb      	strb	r3, [r7, #23]
 8009ecc:	e002      	b.n	8009ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009ed4:	f7fa faa4 	bl	8004420 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d302      	bcc.n	8009eea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d119      	bne.n	8009f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d116      	bne.n	8009f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	f003 0304 	and.w	r3, r3, #4
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d00f      	beq.n	8009f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f02:	f043 0220 	orr.w	r2, r3, #32
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	2b04      	cmp	r3, #4
 8009f2a:	d002      	beq.n	8009f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009f2c:	7dfb      	ldrb	r3, [r7, #23]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d083      	beq.n	8009e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	fe00e800 	.word	0xfe00e800

08009f40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08a      	sub	sp, #40	; 0x28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	f003 0310 	and.w	r3, r3, #16
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d068      	beq.n	800a03e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2210      	movs	r2, #16
 8009f72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009f74:	e049      	b.n	800a00a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f7c:	d045      	beq.n	800a00a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f7e:	f7fa fa4f 	bl	8004420 <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d302      	bcc.n	8009f94 <I2C_IsErrorOccurred+0x54>
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d13a      	bne.n	800a00a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fb6:	d121      	bne.n	8009ffc <I2C_IsErrorOccurred+0xbc>
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fbe:	d01d      	beq.n	8009ffc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009fc0:	7cfb      	ldrb	r3, [r7, #19]
 8009fc2:	2b20      	cmp	r3, #32
 8009fc4:	d01a      	beq.n	8009ffc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009fd6:	f7fa fa23 	bl	8004420 <HAL_GetTick>
 8009fda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fdc:	e00e      	b.n	8009ffc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009fde:	f7fa fa1f 	bl	8004420 <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	2b19      	cmp	r3, #25
 8009fea:	d907      	bls.n	8009ffc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	f043 0320 	orr.w	r3, r3, #32
 8009ff2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009ffa:	e006      	b.n	800a00a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	699b      	ldr	r3, [r3, #24]
 800a002:	f003 0320 	and.w	r3, r3, #32
 800a006:	2b20      	cmp	r3, #32
 800a008:	d1e9      	bne.n	8009fde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	f003 0320 	and.w	r3, r3, #32
 800a014:	2b20      	cmp	r3, #32
 800a016:	d003      	beq.n	800a020 <I2C_IsErrorOccurred+0xe0>
 800a018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d0aa      	beq.n	8009f76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2220      	movs	r2, #32
 800a02e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	f043 0304 	orr.w	r3, r3, #4
 800a036:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00b      	beq.n	800a068 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a050:	6a3b      	ldr	r3, [r7, #32]
 800a052:	f043 0301 	orr.w	r3, r3, #1
 800a056:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00b      	beq.n	800a08a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	f043 0308 	orr.w	r3, r3, #8
 800a078:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a082:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00b      	beq.n	800a0ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a094:	6a3b      	ldr	r3, [r7, #32]
 800a096:	f043 0302 	orr.w	r3, r3, #2
 800a09a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d01c      	beq.n	800a0ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f7ff fdaf 	bl	8009c18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6859      	ldr	r1, [r3, #4]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	4b0d      	ldr	r3, [pc, #52]	; (800a0fc <I2C_IsErrorOccurred+0x1bc>)
 800a0c6:	400b      	ands	r3, r1
 800a0c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2220      	movs	r2, #32
 800a0da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3728      	adds	r7, #40	; 0x28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	fe00e800 	.word	0xfe00e800

0800a100 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	607b      	str	r3, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	817b      	strh	r3, [r7, #10]
 800a10e:	4613      	mov	r3, r2
 800a110:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a112:	897b      	ldrh	r3, [r7, #10]
 800a114:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a118:	7a7b      	ldrb	r3, [r7, #9]
 800a11a:	041b      	lsls	r3, r3, #16
 800a11c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a120:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	4313      	orrs	r3, r2
 800a12a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a12e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	0d5b      	lsrs	r3, r3, #21
 800a13a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a13e:	4b08      	ldr	r3, [pc, #32]	; (800a160 <I2C_TransferConfig+0x60>)
 800a140:	430b      	orrs	r3, r1
 800a142:	43db      	mvns	r3, r3
 800a144:	ea02 0103 	and.w	r1, r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	430a      	orrs	r2, r1
 800a150:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a152:	bf00      	nop
 800a154:	371c      	adds	r7, #28
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	03ff63ff 	.word	0x03ff63ff

0800a164 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b20      	cmp	r3, #32
 800a178:	d138      	bne.n	800a1ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a180:	2b01      	cmp	r3, #1
 800a182:	d101      	bne.n	800a188 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a184:	2302      	movs	r3, #2
 800a186:	e032      	b.n	800a1ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2224      	movs	r2, #36	; 0x24
 800a194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0201 	bic.w	r2, r2, #1
 800a1a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a1b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6819      	ldr	r1, [r3, #0]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0201 	orr.w	r2, r2, #1
 800a1d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e000      	b.n	800a1ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a1ec:	2302      	movs	r3, #2
  }
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b085      	sub	sp, #20
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	d139      	bne.n	800a284 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a216:	2b01      	cmp	r3, #1
 800a218:	d101      	bne.n	800a21e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a21a:	2302      	movs	r3, #2
 800a21c:	e033      	b.n	800a286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2224      	movs	r2, #36	; 0x24
 800a22a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0201 	bic.w	r2, r2, #1
 800a23c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a24c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f042 0201 	orr.w	r2, r2, #1
 800a26e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	e000      	b.n	800a286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a284:	2302      	movs	r3, #2
  }
}
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
	...

0800a294 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a29c:	4b0d      	ldr	r3, [pc, #52]	; (800a2d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a29e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a2a2:	4a0c      	ldr	r2, [pc, #48]	; (800a2d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a2a4:	f043 0302 	orr.w	r3, r3, #2
 800a2a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a2ac:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a2ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800a2ba:	4b07      	ldr	r3, [pc, #28]	; (800a2d8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	4906      	ldr	r1, [pc, #24]	; (800a2d8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	604b      	str	r3, [r1, #4]
}
 800a2c6:	bf00      	nop
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	58024400 	.word	0x58024400
 800a2d8:	58000400 	.word	0x58000400

0800a2dc <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800a2e8:	4b18      	ldr	r3, [pc, #96]	; (800a34c <HAL_PWR_EnterSTOPMode+0x70>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f023 0201 	bic.w	r2, r3, #1
 800a2f0:	4916      	ldr	r1, [pc, #88]	; (800a34c <HAL_PWR_EnterSTOPMode+0x70>)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800a2f8:	4b14      	ldr	r3, [pc, #80]	; (800a34c <HAL_PWR_EnterSTOPMode+0x70>)
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	4a13      	ldr	r2, [pc, #76]	; (800a34c <HAL_PWR_EnterSTOPMode+0x70>)
 800a2fe:	f023 0305 	bic.w	r3, r3, #5
 800a302:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800a304:	4b11      	ldr	r3, [pc, #68]	; (800a34c <HAL_PWR_EnterSTOPMode+0x70>)
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	4a10      	ldr	r2, [pc, #64]	; (800a34c <HAL_PWR_EnterSTOPMode+0x70>)
 800a30a:	f023 0302 	bic.w	r3, r3, #2
 800a30e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a310:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <HAL_PWR_EnterSTOPMode+0x74>)
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	4a0e      	ldr	r2, [pc, #56]	; (800a350 <HAL_PWR_EnterSTOPMode+0x74>)
 800a316:	f043 0304 	orr.w	r3, r3, #4
 800a31a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a31c:	f3bf 8f4f 	dsb	sy
}
 800a320:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a322:	f3bf 8f6f 	isb	sy
}
 800a326:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d101      	bne.n	800a332 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800a32e:	bf30      	wfi
 800a330:	e000      	b.n	800a334 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800a332:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a334:	4b06      	ldr	r3, [pc, #24]	; (800a350 <HAL_PWR_EnterSTOPMode+0x74>)
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	4a05      	ldr	r2, [pc, #20]	; (800a350 <HAL_PWR_EnterSTOPMode+0x74>)
 800a33a:	f023 0304 	bic.w	r3, r3, #4
 800a33e:	6113      	str	r3, [r2, #16]
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	58024800 	.word	0x58024800
 800a350:	e000ed00 	.word	0xe000ed00

0800a354 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a35c:	4b19      	ldr	r3, [pc, #100]	; (800a3c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b04      	cmp	r3, #4
 800a366:	d00a      	beq.n	800a37e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a368:	4b16      	ldr	r3, [pc, #88]	; (800a3c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	429a      	cmp	r2, r3
 800a374:	d001      	beq.n	800a37a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e01f      	b.n	800a3ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	e01d      	b.n	800a3ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a37e:	4b11      	ldr	r3, [pc, #68]	; (800a3c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	f023 0207 	bic.w	r2, r3, #7
 800a386:	490f      	ldr	r1, [pc, #60]	; (800a3c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a38e:	f7fa f847 	bl	8004420 <HAL_GetTick>
 800a392:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a394:	e009      	b.n	800a3aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a396:	f7fa f843 	bl	8004420 <HAL_GetTick>
 800a39a:	4602      	mov	r2, r0
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3a4:	d901      	bls.n	800a3aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e007      	b.n	800a3ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a3aa:	4b06      	ldr	r3, [pc, #24]	; (800a3c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3b6:	d1ee      	bne.n	800a396 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	58024800 	.word	0x58024800

0800a3c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08c      	sub	sp, #48	; 0x30
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d102      	bne.n	800a3dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	f000 bc48 	b.w	800ac6c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0301 	and.w	r3, r3, #1
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 8088 	beq.w	800a4fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3ea:	4b99      	ldr	r3, [pc, #612]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3f4:	4b96      	ldr	r3, [pc, #600]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fc:	2b10      	cmp	r3, #16
 800a3fe:	d007      	beq.n	800a410 <HAL_RCC_OscConfig+0x48>
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	2b18      	cmp	r3, #24
 800a404:	d111      	bne.n	800a42a <HAL_RCC_OscConfig+0x62>
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	f003 0303 	and.w	r3, r3, #3
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d10c      	bne.n	800a42a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a410:	4b8f      	ldr	r3, [pc, #572]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d06d      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x130>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d169      	bne.n	800a4f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	f000 bc21 	b.w	800ac6c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a432:	d106      	bne.n	800a442 <HAL_RCC_OscConfig+0x7a>
 800a434:	4b86      	ldr	r3, [pc, #536]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a85      	ldr	r2, [pc, #532]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a43a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a43e:	6013      	str	r3, [r2, #0]
 800a440:	e02e      	b.n	800a4a0 <HAL_RCC_OscConfig+0xd8>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10c      	bne.n	800a464 <HAL_RCC_OscConfig+0x9c>
 800a44a:	4b81      	ldr	r3, [pc, #516]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a80      	ldr	r2, [pc, #512]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	4b7e      	ldr	r3, [pc, #504]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a7d      	ldr	r2, [pc, #500]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a45c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	e01d      	b.n	800a4a0 <HAL_RCC_OscConfig+0xd8>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a46c:	d10c      	bne.n	800a488 <HAL_RCC_OscConfig+0xc0>
 800a46e:	4b78      	ldr	r3, [pc, #480]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a77      	ldr	r2, [pc, #476]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	4b75      	ldr	r3, [pc, #468]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a74      	ldr	r2, [pc, #464]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	e00b      	b.n	800a4a0 <HAL_RCC_OscConfig+0xd8>
 800a488:	4b71      	ldr	r3, [pc, #452]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a70      	ldr	r2, [pc, #448]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a48e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	4b6e      	ldr	r3, [pc, #440]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a6d      	ldr	r2, [pc, #436]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a49a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a49e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d013      	beq.n	800a4d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a8:	f7f9 ffba 	bl	8004420 <HAL_GetTick>
 800a4ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4ae:	e008      	b.n	800a4c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4b0:	f7f9 ffb6 	bl	8004420 <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	2b64      	cmp	r3, #100	; 0x64
 800a4bc:	d901      	bls.n	800a4c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e3d4      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4c2:	4b63      	ldr	r3, [pc, #396]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0f0      	beq.n	800a4b0 <HAL_RCC_OscConfig+0xe8>
 800a4ce:	e014      	b.n	800a4fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4d0:	f7f9 ffa6 	bl	8004420 <HAL_GetTick>
 800a4d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4d6:	e008      	b.n	800a4ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4d8:	f7f9 ffa2 	bl	8004420 <HAL_GetTick>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	2b64      	cmp	r3, #100	; 0x64
 800a4e4:	d901      	bls.n	800a4ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	e3c0      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4ea:	4b59      	ldr	r3, [pc, #356]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1f0      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x110>
 800a4f6:	e000      	b.n	800a4fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0302 	and.w	r3, r3, #2
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 80ca 	beq.w	800a69c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a508:	4b51      	ldr	r3, [pc, #324]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a510:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a512:	4b4f      	ldr	r3, [pc, #316]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d007      	beq.n	800a52e <HAL_RCC_OscConfig+0x166>
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	2b18      	cmp	r3, #24
 800a522:	d156      	bne.n	800a5d2 <HAL_RCC_OscConfig+0x20a>
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	f003 0303 	and.w	r3, r3, #3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d151      	bne.n	800a5d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a52e:	4b48      	ldr	r3, [pc, #288]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 0304 	and.w	r3, r3, #4
 800a536:	2b00      	cmp	r3, #0
 800a538:	d005      	beq.n	800a546 <HAL_RCC_OscConfig+0x17e>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e392      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a546:	4b42      	ldr	r3, [pc, #264]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f023 0219 	bic.w	r2, r3, #25
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	493f      	ldr	r1, [pc, #252]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a554:	4313      	orrs	r3, r2
 800a556:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a558:	f7f9 ff62 	bl	8004420 <HAL_GetTick>
 800a55c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a55e:	e008      	b.n	800a572 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a560:	f7f9 ff5e 	bl	8004420 <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d901      	bls.n	800a572 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	e37c      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a572:	4b37      	ldr	r3, [pc, #220]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0304 	and.w	r3, r3, #4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d0f0      	beq.n	800a560 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a57e:	f7f9 ff5b 	bl	8004438 <HAL_GetREVID>
 800a582:	4603      	mov	r3, r0
 800a584:	f241 0203 	movw	r2, #4099	; 0x1003
 800a588:	4293      	cmp	r3, r2
 800a58a:	d817      	bhi.n	800a5bc <HAL_RCC_OscConfig+0x1f4>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	2b40      	cmp	r3, #64	; 0x40
 800a592:	d108      	bne.n	800a5a6 <HAL_RCC_OscConfig+0x1de>
 800a594:	4b2e      	ldr	r3, [pc, #184]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a59c:	4a2c      	ldr	r2, [pc, #176]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a59e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5a4:	e07a      	b.n	800a69c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5a6:	4b2a      	ldr	r3, [pc, #168]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	031b      	lsls	r3, r3, #12
 800a5b4:	4926      	ldr	r1, [pc, #152]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5ba:	e06f      	b.n	800a69c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5bc:	4b24      	ldr	r3, [pc, #144]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	061b      	lsls	r3, r3, #24
 800a5ca:	4921      	ldr	r1, [pc, #132]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5d0:	e064      	b.n	800a69c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d047      	beq.n	800a66a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a5da:	4b1d      	ldr	r3, [pc, #116]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f023 0219 	bic.w	r2, r3, #25
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	491a      	ldr	r1, [pc, #104]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5ec:	f7f9 ff18 	bl	8004420 <HAL_GetTick>
 800a5f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5f2:	e008      	b.n	800a606 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5f4:	f7f9 ff14 	bl	8004420 <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e332      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a606:	4b12      	ldr	r3, [pc, #72]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 0304 	and.w	r3, r3, #4
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0f0      	beq.n	800a5f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a612:	f7f9 ff11 	bl	8004438 <HAL_GetREVID>
 800a616:	4603      	mov	r3, r0
 800a618:	f241 0203 	movw	r2, #4099	; 0x1003
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d819      	bhi.n	800a654 <HAL_RCC_OscConfig+0x28c>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	2b40      	cmp	r3, #64	; 0x40
 800a626:	d108      	bne.n	800a63a <HAL_RCC_OscConfig+0x272>
 800a628:	4b09      	ldr	r3, [pc, #36]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a630:	4a07      	ldr	r2, [pc, #28]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a636:	6053      	str	r3, [r2, #4]
 800a638:	e030      	b.n	800a69c <HAL_RCC_OscConfig+0x2d4>
 800a63a:	4b05      	ldr	r3, [pc, #20]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	031b      	lsls	r3, r3, #12
 800a648:	4901      	ldr	r1, [pc, #4]	; (800a650 <HAL_RCC_OscConfig+0x288>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	604b      	str	r3, [r1, #4]
 800a64e:	e025      	b.n	800a69c <HAL_RCC_OscConfig+0x2d4>
 800a650:	58024400 	.word	0x58024400
 800a654:	4b9a      	ldr	r3, [pc, #616]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	061b      	lsls	r3, r3, #24
 800a662:	4997      	ldr	r1, [pc, #604]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a664:	4313      	orrs	r3, r2
 800a666:	604b      	str	r3, [r1, #4]
 800a668:	e018      	b.n	800a69c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a66a:	4b95      	ldr	r3, [pc, #596]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a94      	ldr	r2, [pc, #592]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a670:	f023 0301 	bic.w	r3, r3, #1
 800a674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a676:	f7f9 fed3 	bl	8004420 <HAL_GetTick>
 800a67a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a67c:	e008      	b.n	800a690 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a67e:	f7f9 fecf 	bl	8004420 <HAL_GetTick>
 800a682:	4602      	mov	r2, r0
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d901      	bls.n	800a690 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e2ed      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a690:	4b8b      	ldr	r3, [pc, #556]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0304 	and.w	r3, r3, #4
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1f0      	bne.n	800a67e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0310 	and.w	r3, r3, #16
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 80a9 	beq.w	800a7fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6aa:	4b85      	ldr	r3, [pc, #532]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6b4:	4b82      	ldr	r3, [pc, #520]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	2b08      	cmp	r3, #8
 800a6be:	d007      	beq.n	800a6d0 <HAL_RCC_OscConfig+0x308>
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	2b18      	cmp	r3, #24
 800a6c4:	d13a      	bne.n	800a73c <HAL_RCC_OscConfig+0x374>
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f003 0303 	and.w	r3, r3, #3
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d135      	bne.n	800a73c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6d0:	4b7b      	ldr	r3, [pc, #492]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d005      	beq.n	800a6e8 <HAL_RCC_OscConfig+0x320>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	2b80      	cmp	r3, #128	; 0x80
 800a6e2:	d001      	beq.n	800a6e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e2c1      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6e8:	f7f9 fea6 	bl	8004438 <HAL_GetREVID>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	f241 0203 	movw	r2, #4099	; 0x1003
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d817      	bhi.n	800a726 <HAL_RCC_OscConfig+0x35e>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	2b20      	cmp	r3, #32
 800a6fc:	d108      	bne.n	800a710 <HAL_RCC_OscConfig+0x348>
 800a6fe:	4b70      	ldr	r3, [pc, #448]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a706:	4a6e      	ldr	r2, [pc, #440]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a70c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a70e:	e075      	b.n	800a7fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a710:	4b6b      	ldr	r3, [pc, #428]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	069b      	lsls	r3, r3, #26
 800a71e:	4968      	ldr	r1, [pc, #416]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a720:	4313      	orrs	r3, r2
 800a722:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a724:	e06a      	b.n	800a7fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a726:	4b66      	ldr	r3, [pc, #408]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	061b      	lsls	r3, r3, #24
 800a734:	4962      	ldr	r1, [pc, #392]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a736:	4313      	orrs	r3, r2
 800a738:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a73a:	e05f      	b.n	800a7fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d042      	beq.n	800a7ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a744:	4b5e      	ldr	r3, [pc, #376]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a5d      	ldr	r2, [pc, #372]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a74a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a750:	f7f9 fe66 	bl	8004420 <HAL_GetTick>
 800a754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a756:	e008      	b.n	800a76a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a758:	f7f9 fe62 	bl	8004420 <HAL_GetTick>
 800a75c:	4602      	mov	r2, r0
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	2b02      	cmp	r3, #2
 800a764:	d901      	bls.n	800a76a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e280      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a76a:	4b55      	ldr	r3, [pc, #340]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a772:	2b00      	cmp	r3, #0
 800a774:	d0f0      	beq.n	800a758 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a776:	f7f9 fe5f 	bl	8004438 <HAL_GetREVID>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a780:	4293      	cmp	r3, r2
 800a782:	d817      	bhi.n	800a7b4 <HAL_RCC_OscConfig+0x3ec>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a1b      	ldr	r3, [r3, #32]
 800a788:	2b20      	cmp	r3, #32
 800a78a:	d108      	bne.n	800a79e <HAL_RCC_OscConfig+0x3d6>
 800a78c:	4b4c      	ldr	r3, [pc, #304]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a794:	4a4a      	ldr	r2, [pc, #296]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a796:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a79a:	6053      	str	r3, [r2, #4]
 800a79c:	e02e      	b.n	800a7fc <HAL_RCC_OscConfig+0x434>
 800a79e:	4b48      	ldr	r3, [pc, #288]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	069b      	lsls	r3, r3, #26
 800a7ac:	4944      	ldr	r1, [pc, #272]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	604b      	str	r3, [r1, #4]
 800a7b2:	e023      	b.n	800a7fc <HAL_RCC_OscConfig+0x434>
 800a7b4:	4b42      	ldr	r3, [pc, #264]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	061b      	lsls	r3, r3, #24
 800a7c2:	493f      	ldr	r1, [pc, #252]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	60cb      	str	r3, [r1, #12]
 800a7c8:	e018      	b.n	800a7fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a7ca:	4b3d      	ldr	r3, [pc, #244]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a3c      	ldr	r2, [pc, #240]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a7d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7d6:	f7f9 fe23 	bl	8004420 <HAL_GetTick>
 800a7da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7dc:	e008      	b.n	800a7f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a7de:	f7f9 fe1f 	bl	8004420 <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d901      	bls.n	800a7f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e23d      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7f0:	4b33      	ldr	r3, [pc, #204]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1f0      	bne.n	800a7de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 0308 	and.w	r3, r3, #8
 800a804:	2b00      	cmp	r3, #0
 800a806:	d036      	beq.n	800a876 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d019      	beq.n	800a844 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a810:	4b2b      	ldr	r3, [pc, #172]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a814:	4a2a      	ldr	r2, [pc, #168]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a816:	f043 0301 	orr.w	r3, r3, #1
 800a81a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a81c:	f7f9 fe00 	bl	8004420 <HAL_GetTick>
 800a820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a822:	e008      	b.n	800a836 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a824:	f7f9 fdfc 	bl	8004420 <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d901      	bls.n	800a836 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	e21a      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a836:	4b22      	ldr	r3, [pc, #136]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a83a:	f003 0302 	and.w	r3, r3, #2
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d0f0      	beq.n	800a824 <HAL_RCC_OscConfig+0x45c>
 800a842:	e018      	b.n	800a876 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a844:	4b1e      	ldr	r3, [pc, #120]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a848:	4a1d      	ldr	r2, [pc, #116]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a84a:	f023 0301 	bic.w	r3, r3, #1
 800a84e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a850:	f7f9 fde6 	bl	8004420 <HAL_GetTick>
 800a854:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a856:	e008      	b.n	800a86a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a858:	f7f9 fde2 	bl	8004420 <HAL_GetTick>
 800a85c:	4602      	mov	r2, r0
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	2b02      	cmp	r3, #2
 800a864:	d901      	bls.n	800a86a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e200      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a86a:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a86e:	f003 0302 	and.w	r3, r3, #2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1f0      	bne.n	800a858 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0320 	and.w	r3, r3, #32
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d039      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d01c      	beq.n	800a8c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a88a:	4b0d      	ldr	r3, [pc, #52]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a0c      	ldr	r2, [pc, #48]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a894:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a896:	f7f9 fdc3 	bl	8004420 <HAL_GetTick>
 800a89a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a89c:	e008      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a89e:	f7f9 fdbf 	bl	8004420 <HAL_GetTick>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d901      	bls.n	800a8b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e1dd      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a8b0:	4b03      	ldr	r3, [pc, #12]	; (800a8c0 <HAL_RCC_OscConfig+0x4f8>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0f0      	beq.n	800a89e <HAL_RCC_OscConfig+0x4d6>
 800a8bc:	e01b      	b.n	800a8f6 <HAL_RCC_OscConfig+0x52e>
 800a8be:	bf00      	nop
 800a8c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a8c4:	4b9b      	ldr	r3, [pc, #620]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a9a      	ldr	r2, [pc, #616]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a8ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a8d0:	f7f9 fda6 	bl	8004420 <HAL_GetTick>
 800a8d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8d6:	e008      	b.n	800a8ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8d8:	f7f9 fda2 	bl	8004420 <HAL_GetTick>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d901      	bls.n	800a8ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e1c0      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8ea:	4b92      	ldr	r3, [pc, #584]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1f0      	bne.n	800a8d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0304 	and.w	r3, r3, #4
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 8081 	beq.w	800aa06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a904:	4b8c      	ldr	r3, [pc, #560]	; (800ab38 <HAL_RCC_OscConfig+0x770>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a8b      	ldr	r2, [pc, #556]	; (800ab38 <HAL_RCC_OscConfig+0x770>)
 800a90a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a90e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a910:	f7f9 fd86 	bl	8004420 <HAL_GetTick>
 800a914:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a916:	e008      	b.n	800a92a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a918:	f7f9 fd82 	bl	8004420 <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b64      	cmp	r3, #100	; 0x64
 800a924:	d901      	bls.n	800a92a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e1a0      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a92a:	4b83      	ldr	r3, [pc, #524]	; (800ab38 <HAL_RCC_OscConfig+0x770>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0f0      	beq.n	800a918 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d106      	bne.n	800a94c <HAL_RCC_OscConfig+0x584>
 800a93e:	4b7d      	ldr	r3, [pc, #500]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a942:	4a7c      	ldr	r2, [pc, #496]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a944:	f043 0301 	orr.w	r3, r3, #1
 800a948:	6713      	str	r3, [r2, #112]	; 0x70
 800a94a:	e02d      	b.n	800a9a8 <HAL_RCC_OscConfig+0x5e0>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10c      	bne.n	800a96e <HAL_RCC_OscConfig+0x5a6>
 800a954:	4b77      	ldr	r3, [pc, #476]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a958:	4a76      	ldr	r2, [pc, #472]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a95a:	f023 0301 	bic.w	r3, r3, #1
 800a95e:	6713      	str	r3, [r2, #112]	; 0x70
 800a960:	4b74      	ldr	r3, [pc, #464]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a964:	4a73      	ldr	r2, [pc, #460]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a966:	f023 0304 	bic.w	r3, r3, #4
 800a96a:	6713      	str	r3, [r2, #112]	; 0x70
 800a96c:	e01c      	b.n	800a9a8 <HAL_RCC_OscConfig+0x5e0>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	2b05      	cmp	r3, #5
 800a974:	d10c      	bne.n	800a990 <HAL_RCC_OscConfig+0x5c8>
 800a976:	4b6f      	ldr	r3, [pc, #444]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a97a:	4a6e      	ldr	r2, [pc, #440]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a97c:	f043 0304 	orr.w	r3, r3, #4
 800a980:	6713      	str	r3, [r2, #112]	; 0x70
 800a982:	4b6c      	ldr	r3, [pc, #432]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a986:	4a6b      	ldr	r2, [pc, #428]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a988:	f043 0301 	orr.w	r3, r3, #1
 800a98c:	6713      	str	r3, [r2, #112]	; 0x70
 800a98e:	e00b      	b.n	800a9a8 <HAL_RCC_OscConfig+0x5e0>
 800a990:	4b68      	ldr	r3, [pc, #416]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a994:	4a67      	ldr	r2, [pc, #412]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a996:	f023 0301 	bic.w	r3, r3, #1
 800a99a:	6713      	str	r3, [r2, #112]	; 0x70
 800a99c:	4b65      	ldr	r3, [pc, #404]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a99e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a0:	4a64      	ldr	r2, [pc, #400]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a9a2:	f023 0304 	bic.w	r3, r3, #4
 800a9a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d015      	beq.n	800a9dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b0:	f7f9 fd36 	bl	8004420 <HAL_GetTick>
 800a9b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9b6:	e00a      	b.n	800a9ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9b8:	f7f9 fd32 	bl	8004420 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d901      	bls.n	800a9ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e14e      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9ce:	4b59      	ldr	r3, [pc, #356]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9d2:	f003 0302 	and.w	r3, r3, #2
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0ee      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x5f0>
 800a9da:	e014      	b.n	800aa06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9dc:	f7f9 fd20 	bl	8004420 <HAL_GetTick>
 800a9e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9e2:	e00a      	b.n	800a9fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9e4:	f7f9 fd1c 	bl	8004420 <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e138      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9fa:	4b4e      	ldr	r3, [pc, #312]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800a9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fe:	f003 0302 	and.w	r3, r3, #2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1ee      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 812d 	beq.w	800ac6a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aa10:	4b48      	ldr	r3, [pc, #288]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa18:	2b18      	cmp	r3, #24
 800aa1a:	f000 80bd 	beq.w	800ab98 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	f040 809e 	bne.w	800ab64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa28:	4b42      	ldr	r3, [pc, #264]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a41      	ldr	r2, [pc, #260]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aa2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa34:	f7f9 fcf4 	bl	8004420 <HAL_GetTick>
 800aa38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa3a:	e008      	b.n	800aa4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa3c:	f7f9 fcf0 	bl	8004420 <HAL_GetTick>
 800aa40:	4602      	mov	r2, r0
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d901      	bls.n	800aa4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e10e      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa4e:	4b39      	ldr	r3, [pc, #228]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1f0      	bne.n	800aa3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa5a:	4b36      	ldr	r3, [pc, #216]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aa5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa5e:	4b37      	ldr	r3, [pc, #220]	; (800ab3c <HAL_RCC_OscConfig+0x774>)
 800aa60:	4013      	ands	r3, r2
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aa6a:	0112      	lsls	r2, r2, #4
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	4931      	ldr	r1, [pc, #196]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aa70:	4313      	orrs	r3, r2
 800aa72:	628b      	str	r3, [r1, #40]	; 0x28
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa82:	3b01      	subs	r3, #1
 800aa84:	025b      	lsls	r3, r3, #9
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	431a      	orrs	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	041b      	lsls	r3, r3, #16
 800aa92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa96:	431a      	orrs	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	061b      	lsls	r3, r3, #24
 800aaa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aaa4:	4923      	ldr	r1, [pc, #140]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aaaa:	4b22      	ldr	r3, [pc, #136]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaae:	4a21      	ldr	r2, [pc, #132]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aab0:	f023 0301 	bic.w	r3, r3, #1
 800aab4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aab6:	4b1f      	ldr	r3, [pc, #124]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaba:	4b21      	ldr	r3, [pc, #132]	; (800ab40 <HAL_RCC_OscConfig+0x778>)
 800aabc:	4013      	ands	r3, r2
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aac2:	00d2      	lsls	r2, r2, #3
 800aac4:	491b      	ldr	r1, [pc, #108]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aaca:	4b1a      	ldr	r3, [pc, #104]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aace:	f023 020c 	bic.w	r2, r3, #12
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	4917      	ldr	r1, [pc, #92]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aad8:	4313      	orrs	r3, r2
 800aada:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aadc:	4b15      	ldr	r3, [pc, #84]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	f023 0202 	bic.w	r2, r3, #2
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae8:	4912      	ldr	r1, [pc, #72]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aaee:	4b11      	ldr	r3, [pc, #68]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aaf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf2:	4a10      	ldr	r2, [pc, #64]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aaf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aafa:	4b0e      	ldr	r3, [pc, #56]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800aafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafe:	4a0d      	ldr	r2, [pc, #52]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800ab00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ab06:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800ab08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0a:	4a0a      	ldr	r2, [pc, #40]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800ab0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ab12:	4b08      	ldr	r3, [pc, #32]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800ab14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab16:	4a07      	ldr	r2, [pc, #28]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800ab18:	f043 0301 	orr.w	r3, r3, #1
 800ab1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab1e:	4b05      	ldr	r3, [pc, #20]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a04      	ldr	r2, [pc, #16]	; (800ab34 <HAL_RCC_OscConfig+0x76c>)
 800ab24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab2a:	f7f9 fc79 	bl	8004420 <HAL_GetTick>
 800ab2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab30:	e011      	b.n	800ab56 <HAL_RCC_OscConfig+0x78e>
 800ab32:	bf00      	nop
 800ab34:	58024400 	.word	0x58024400
 800ab38:	58024800 	.word	0x58024800
 800ab3c:	fffffc0c 	.word	0xfffffc0c
 800ab40:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab44:	f7f9 fc6c 	bl	8004420 <HAL_GetTick>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d901      	bls.n	800ab56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e08a      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab56:	4b47      	ldr	r3, [pc, #284]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d0f0      	beq.n	800ab44 <HAL_RCC_OscConfig+0x77c>
 800ab62:	e082      	b.n	800ac6a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab64:	4b43      	ldr	r3, [pc, #268]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a42      	ldr	r2, [pc, #264]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ab6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab70:	f7f9 fc56 	bl	8004420 <HAL_GetTick>
 800ab74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab76:	e008      	b.n	800ab8a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab78:	f7f9 fc52 	bl	8004420 <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d901      	bls.n	800ab8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e070      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab8a:	4b3a      	ldr	r3, [pc, #232]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1f0      	bne.n	800ab78 <HAL_RCC_OscConfig+0x7b0>
 800ab96:	e068      	b.n	800ac6a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ab98:	4b36      	ldr	r3, [pc, #216]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ab9e:	4b35      	ldr	r3, [pc, #212]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800aba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d031      	beq.n	800ac10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	f003 0203 	and.w	r2, r3, #3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d12a      	bne.n	800ac10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	091b      	lsrs	r3, r3, #4
 800abbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d122      	bne.n	800ac10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d11a      	bne.n	800ac10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	0a5b      	lsrs	r3, r3, #9
 800abde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800abe8:	429a      	cmp	r2, r3
 800abea:	d111      	bne.n	800ac10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	0c1b      	lsrs	r3, r3, #16
 800abf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d108      	bne.n	800ac10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	0e1b      	lsrs	r3, r3, #24
 800ac02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d001      	beq.n	800ac14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e02b      	b.n	800ac6c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ac14:	4b17      	ldr	r3, [pc, #92]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ac16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac18:	08db      	lsrs	r3, r3, #3
 800ac1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d01f      	beq.n	800ac6a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ac2a:	4b12      	ldr	r3, [pc, #72]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ac2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2e:	4a11      	ldr	r2, [pc, #68]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ac30:	f023 0301 	bic.w	r3, r3, #1
 800ac34:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ac36:	f7f9 fbf3 	bl	8004420 <HAL_GetTick>
 800ac3a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ac3c:	bf00      	nop
 800ac3e:	f7f9 fbef 	bl	8004420 <HAL_GetTick>
 800ac42:	4602      	mov	r2, r0
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d0f9      	beq.n	800ac3e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac4a:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ac4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac4e:	4b0a      	ldr	r3, [pc, #40]	; (800ac78 <HAL_RCC_OscConfig+0x8b0>)
 800ac50:	4013      	ands	r3, r2
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac56:	00d2      	lsls	r2, r2, #3
 800ac58:	4906      	ldr	r1, [pc, #24]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ac5e:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ac60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac62:	4a04      	ldr	r2, [pc, #16]	; (800ac74 <HAL_RCC_OscConfig+0x8ac>)
 800ac64:	f043 0301 	orr.w	r3, r3, #1
 800ac68:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3730      	adds	r7, #48	; 0x30
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	58024400 	.word	0x58024400
 800ac78:	ffff0007 	.word	0xffff0007

0800ac7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e19c      	b.n	800afca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac90:	4b8a      	ldr	r3, [pc, #552]	; (800aebc <HAL_RCC_ClockConfig+0x240>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 030f 	and.w	r3, r3, #15
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d910      	bls.n	800acc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac9e:	4b87      	ldr	r3, [pc, #540]	; (800aebc <HAL_RCC_ClockConfig+0x240>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f023 020f 	bic.w	r2, r3, #15
 800aca6:	4985      	ldr	r1, [pc, #532]	; (800aebc <HAL_RCC_ClockConfig+0x240>)
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	4313      	orrs	r3, r2
 800acac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acae:	4b83      	ldr	r3, [pc, #524]	; (800aebc <HAL_RCC_ClockConfig+0x240>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 030f 	and.w	r3, r3, #15
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d001      	beq.n	800acc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e184      	b.n	800afca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d010      	beq.n	800acee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	691a      	ldr	r2, [r3, #16]
 800acd0:	4b7b      	ldr	r3, [pc, #492]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acd8:	429a      	cmp	r2, r3
 800acda:	d908      	bls.n	800acee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800acdc:	4b78      	ldr	r3, [pc, #480]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	4975      	ldr	r1, [pc, #468]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800acea:	4313      	orrs	r3, r2
 800acec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0308 	and.w	r3, r3, #8
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d010      	beq.n	800ad1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	695a      	ldr	r2, [r3, #20]
 800acfe:	4b70      	ldr	r3, [pc, #448]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d908      	bls.n	800ad1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad0a:	4b6d      	ldr	r3, [pc, #436]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	496a      	ldr	r1, [pc, #424]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0310 	and.w	r3, r3, #16
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d010      	beq.n	800ad4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	699a      	ldr	r2, [r3, #24]
 800ad2c:	4b64      	ldr	r3, [pc, #400]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad2e:	69db      	ldr	r3, [r3, #28]
 800ad30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d908      	bls.n	800ad4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad38:	4b61      	ldr	r3, [pc, #388]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad3a:	69db      	ldr	r3, [r3, #28]
 800ad3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	495e      	ldr	r1, [pc, #376]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0320 	and.w	r3, r3, #32
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d010      	beq.n	800ad78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	69da      	ldr	r2, [r3, #28]
 800ad5a:	4b59      	ldr	r3, [pc, #356]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d908      	bls.n	800ad78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ad66:	4b56      	ldr	r3, [pc, #344]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	4953      	ldr	r1, [pc, #332]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0302 	and.w	r3, r3, #2
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d010      	beq.n	800ada6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68da      	ldr	r2, [r3, #12]
 800ad88:	4b4d      	ldr	r3, [pc, #308]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	f003 030f 	and.w	r3, r3, #15
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d908      	bls.n	800ada6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad94:	4b4a      	ldr	r3, [pc, #296]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	f023 020f 	bic.w	r2, r3, #15
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	4947      	ldr	r1, [pc, #284]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ada2:	4313      	orrs	r3, r2
 800ada4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d055      	beq.n	800ae5e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800adb2:	4b43      	ldr	r3, [pc, #268]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	4940      	ldr	r1, [pc, #256]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800adc0:	4313      	orrs	r3, r2
 800adc2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d107      	bne.n	800addc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800adcc:	4b3c      	ldr	r3, [pc, #240]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d121      	bne.n	800ae1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e0f6      	b.n	800afca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d107      	bne.n	800adf4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ade4:	4b36      	ldr	r3, [pc, #216]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d115      	bne.n	800ae1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e0ea      	b.n	800afca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d107      	bne.n	800ae0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adfc:	4b30      	ldr	r3, [pc, #192]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d109      	bne.n	800ae1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e0de      	b.n	800afca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae0c:	4b2c      	ldr	r3, [pc, #176]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e0d6      	b.n	800afca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ae1c:	4b28      	ldr	r3, [pc, #160]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	f023 0207 	bic.w	r2, r3, #7
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	4925      	ldr	r1, [pc, #148]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae2e:	f7f9 faf7 	bl	8004420 <HAL_GetTick>
 800ae32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae34:	e00a      	b.n	800ae4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae36:	f7f9 faf3 	bl	8004420 <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d901      	bls.n	800ae4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	e0be      	b.n	800afca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae4c:	4b1c      	ldr	r3, [pc, #112]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d1eb      	bne.n	800ae36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0302 	and.w	r3, r3, #2
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d010      	beq.n	800ae8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68da      	ldr	r2, [r3, #12]
 800ae6e:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	f003 030f 	and.w	r3, r3, #15
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d208      	bcs.n	800ae8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae7a:	4b11      	ldr	r3, [pc, #68]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	f023 020f 	bic.w	r2, r3, #15
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	490e      	ldr	r1, [pc, #56]	; (800aec0 <HAL_RCC_ClockConfig+0x244>)
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae8c:	4b0b      	ldr	r3, [pc, #44]	; (800aebc <HAL_RCC_ClockConfig+0x240>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 030f 	and.w	r3, r3, #15
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d214      	bcs.n	800aec4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae9a:	4b08      	ldr	r3, [pc, #32]	; (800aebc <HAL_RCC_ClockConfig+0x240>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f023 020f 	bic.w	r2, r3, #15
 800aea2:	4906      	ldr	r1, [pc, #24]	; (800aebc <HAL_RCC_ClockConfig+0x240>)
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeaa:	4b04      	ldr	r3, [pc, #16]	; (800aebc <HAL_RCC_ClockConfig+0x240>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 030f 	and.w	r3, r3, #15
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d005      	beq.n	800aec4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e086      	b.n	800afca <HAL_RCC_ClockConfig+0x34e>
 800aebc:	52002000 	.word	0x52002000
 800aec0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d010      	beq.n	800aef2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	691a      	ldr	r2, [r3, #16]
 800aed4:	4b3f      	ldr	r3, [pc, #252]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aedc:	429a      	cmp	r2, r3
 800aede:	d208      	bcs.n	800aef2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aee0:	4b3c      	ldr	r3, [pc, #240]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	4939      	ldr	r1, [pc, #228]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0308 	and.w	r3, r3, #8
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d010      	beq.n	800af20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	695a      	ldr	r2, [r3, #20]
 800af02:	4b34      	ldr	r3, [pc, #208]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af04:	69db      	ldr	r3, [r3, #28]
 800af06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d208      	bcs.n	800af20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af0e:	4b31      	ldr	r3, [pc, #196]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	695b      	ldr	r3, [r3, #20]
 800af1a:	492e      	ldr	r1, [pc, #184]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af1c:	4313      	orrs	r3, r2
 800af1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 0310 	and.w	r3, r3, #16
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d010      	beq.n	800af4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	699a      	ldr	r2, [r3, #24]
 800af30:	4b28      	ldr	r3, [pc, #160]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af32:	69db      	ldr	r3, [r3, #28]
 800af34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af38:	429a      	cmp	r2, r3
 800af3a:	d208      	bcs.n	800af4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af3c:	4b25      	ldr	r3, [pc, #148]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af3e:	69db      	ldr	r3, [r3, #28]
 800af40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	4922      	ldr	r1, [pc, #136]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af4a:	4313      	orrs	r3, r2
 800af4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0320 	and.w	r3, r3, #32
 800af56:	2b00      	cmp	r3, #0
 800af58:	d010      	beq.n	800af7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	69da      	ldr	r2, [r3, #28]
 800af5e:	4b1d      	ldr	r3, [pc, #116]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af66:	429a      	cmp	r2, r3
 800af68:	d208      	bcs.n	800af7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af6a:	4b1a      	ldr	r3, [pc, #104]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	69db      	ldr	r3, [r3, #28]
 800af76:	4917      	ldr	r1, [pc, #92]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af78:	4313      	orrs	r3, r2
 800af7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800af7c:	f000 f834 	bl	800afe8 <HAL_RCC_GetSysClockFreq>
 800af80:	4602      	mov	r2, r0
 800af82:	4b14      	ldr	r3, [pc, #80]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	0a1b      	lsrs	r3, r3, #8
 800af88:	f003 030f 	and.w	r3, r3, #15
 800af8c:	4912      	ldr	r1, [pc, #72]	; (800afd8 <HAL_RCC_ClockConfig+0x35c>)
 800af8e:	5ccb      	ldrb	r3, [r1, r3]
 800af90:	f003 031f 	and.w	r3, r3, #31
 800af94:	fa22 f303 	lsr.w	r3, r2, r3
 800af98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af9a:	4b0e      	ldr	r3, [pc, #56]	; (800afd4 <HAL_RCC_ClockConfig+0x358>)
 800af9c:	699b      	ldr	r3, [r3, #24]
 800af9e:	f003 030f 	and.w	r3, r3, #15
 800afa2:	4a0d      	ldr	r2, [pc, #52]	; (800afd8 <HAL_RCC_ClockConfig+0x35c>)
 800afa4:	5cd3      	ldrb	r3, [r2, r3]
 800afa6:	f003 031f 	and.w	r3, r3, #31
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	fa22 f303 	lsr.w	r3, r2, r3
 800afb0:	4a0a      	ldr	r2, [pc, #40]	; (800afdc <HAL_RCC_ClockConfig+0x360>)
 800afb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800afb4:	4a0a      	ldr	r2, [pc, #40]	; (800afe0 <HAL_RCC_ClockConfig+0x364>)
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800afba:	4b0a      	ldr	r3, [pc, #40]	; (800afe4 <HAL_RCC_ClockConfig+0x368>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7f8 f816 	bl	8002ff0 <HAL_InitTick>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3718      	adds	r7, #24
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	58024400 	.word	0x58024400
 800afd8:	08017b98 	.word	0x08017b98
 800afdc:	2400008c 	.word	0x2400008c
 800afe0:	24000088 	.word	0x24000088
 800afe4:	24000090 	.word	0x24000090

0800afe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afe8:	b480      	push	{r7}
 800afea:	b089      	sub	sp, #36	; 0x24
 800afec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afee:	4bb3      	ldr	r3, [pc, #716]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aff6:	2b18      	cmp	r3, #24
 800aff8:	f200 8155 	bhi.w	800b2a6 <HAL_RCC_GetSysClockFreq+0x2be>
 800affc:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <HAL_RCC_GetSysClockFreq+0x1c>)
 800affe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b002:	bf00      	nop
 800b004:	0800b069 	.word	0x0800b069
 800b008:	0800b2a7 	.word	0x0800b2a7
 800b00c:	0800b2a7 	.word	0x0800b2a7
 800b010:	0800b2a7 	.word	0x0800b2a7
 800b014:	0800b2a7 	.word	0x0800b2a7
 800b018:	0800b2a7 	.word	0x0800b2a7
 800b01c:	0800b2a7 	.word	0x0800b2a7
 800b020:	0800b2a7 	.word	0x0800b2a7
 800b024:	0800b08f 	.word	0x0800b08f
 800b028:	0800b2a7 	.word	0x0800b2a7
 800b02c:	0800b2a7 	.word	0x0800b2a7
 800b030:	0800b2a7 	.word	0x0800b2a7
 800b034:	0800b2a7 	.word	0x0800b2a7
 800b038:	0800b2a7 	.word	0x0800b2a7
 800b03c:	0800b2a7 	.word	0x0800b2a7
 800b040:	0800b2a7 	.word	0x0800b2a7
 800b044:	0800b095 	.word	0x0800b095
 800b048:	0800b2a7 	.word	0x0800b2a7
 800b04c:	0800b2a7 	.word	0x0800b2a7
 800b050:	0800b2a7 	.word	0x0800b2a7
 800b054:	0800b2a7 	.word	0x0800b2a7
 800b058:	0800b2a7 	.word	0x0800b2a7
 800b05c:	0800b2a7 	.word	0x0800b2a7
 800b060:	0800b2a7 	.word	0x0800b2a7
 800b064:	0800b09b 	.word	0x0800b09b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b068:	4b94      	ldr	r3, [pc, #592]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0320 	and.w	r3, r3, #32
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b074:	4b91      	ldr	r3, [pc, #580]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	08db      	lsrs	r3, r3, #3
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	4a90      	ldr	r2, [pc, #576]	; (800b2c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b080:	fa22 f303 	lsr.w	r3, r2, r3
 800b084:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b086:	e111      	b.n	800b2ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b088:	4b8d      	ldr	r3, [pc, #564]	; (800b2c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b08a:	61bb      	str	r3, [r7, #24]
      break;
 800b08c:	e10e      	b.n	800b2ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b08e:	4b8d      	ldr	r3, [pc, #564]	; (800b2c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b090:	61bb      	str	r3, [r7, #24]
      break;
 800b092:	e10b      	b.n	800b2ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b094:	4b8c      	ldr	r3, [pc, #560]	; (800b2c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b096:	61bb      	str	r3, [r7, #24]
      break;
 800b098:	e108      	b.n	800b2ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b09a:	4b88      	ldr	r3, [pc, #544]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	f003 0303 	and.w	r3, r3, #3
 800b0a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b0a4:	4b85      	ldr	r3, [pc, #532]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a8:	091b      	lsrs	r3, r3, #4
 800b0aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b0b0:	4b82      	ldr	r3, [pc, #520]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b0ba:	4b80      	ldr	r3, [pc, #512]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0be:	08db      	lsrs	r3, r3, #3
 800b0c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ca:	ee07 3a90 	vmov	s15, r3
 800b0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 80e1 	beq.w	800b2a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	f000 8083 	beq.w	800b1ec <HAL_RCC_GetSysClockFreq+0x204>
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	f200 80a1 	bhi.w	800b230 <HAL_RCC_GetSysClockFreq+0x248>
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d003      	beq.n	800b0fc <HAL_RCC_GetSysClockFreq+0x114>
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d056      	beq.n	800b1a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b0fa:	e099      	b.n	800b230 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0fc:	4b6f      	ldr	r3, [pc, #444]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0320 	and.w	r3, r3, #32
 800b104:	2b00      	cmp	r3, #0
 800b106:	d02d      	beq.n	800b164 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b108:	4b6c      	ldr	r3, [pc, #432]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	08db      	lsrs	r3, r3, #3
 800b10e:	f003 0303 	and.w	r3, r3, #3
 800b112:	4a6b      	ldr	r2, [pc, #428]	; (800b2c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b114:	fa22 f303 	lsr.w	r3, r2, r3
 800b118:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	ee07 3a90 	vmov	s15, r3
 800b120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b132:	4b62      	ldr	r3, [pc, #392]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13a:	ee07 3a90 	vmov	s15, r3
 800b13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b142:	ed97 6a02 	vldr	s12, [r7, #8]
 800b146:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b2cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b14a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b14e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b15e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b162:	e087      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	ee07 3a90 	vmov	s15, r3
 800b16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b2d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b176:	4b51      	ldr	r3, [pc, #324]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b186:	ed97 6a02 	vldr	s12, [r7, #8]
 800b18a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b2cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b18e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1a6:	e065      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b2d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b1b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ba:	4b40      	ldr	r3, [pc, #256]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b2cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1ea:	e043      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	ee07 3a90 	vmov	s15, r3
 800b1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b2d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b1fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1fe:	4b2f      	ldr	r3, [pc, #188]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b20e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b212:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b2cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b21a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b21e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b22e:	e021      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b2d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b23e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b242:	4b1e      	ldr	r3, [pc, #120]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b252:	ed97 6a02 	vldr	s12, [r7, #8]
 800b256:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b2cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b25a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b25e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b26a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b26e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b272:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b274:	4b11      	ldr	r3, [pc, #68]	; (800b2bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b278:	0a5b      	lsrs	r3, r3, #9
 800b27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b27e:	3301      	adds	r3, #1
 800b280:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	ee07 3a90 	vmov	s15, r3
 800b288:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b28c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b298:	ee17 3a90 	vmov	r3, s15
 800b29c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b29e:	e005      	b.n	800b2ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	61bb      	str	r3, [r7, #24]
      break;
 800b2a4:	e002      	b.n	800b2ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b2a6:	4b07      	ldr	r3, [pc, #28]	; (800b2c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b2a8:	61bb      	str	r3, [r7, #24]
      break;
 800b2aa:	bf00      	nop
  }

  return sysclockfreq;
 800b2ac:	69bb      	ldr	r3, [r7, #24]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3724      	adds	r7, #36	; 0x24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	58024400 	.word	0x58024400
 800b2c0:	03d09000 	.word	0x03d09000
 800b2c4:	003d0900 	.word	0x003d0900
 800b2c8:	017d7840 	.word	0x017d7840
 800b2cc:	46000000 	.word	0x46000000
 800b2d0:	4c742400 	.word	0x4c742400
 800b2d4:	4a742400 	.word	0x4a742400
 800b2d8:	4bbebc20 	.word	0x4bbebc20

0800b2dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b2e2:	f7ff fe81 	bl	800afe8 <HAL_RCC_GetSysClockFreq>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	4b10      	ldr	r3, [pc, #64]	; (800b32c <HAL_RCC_GetHCLKFreq+0x50>)
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	0a1b      	lsrs	r3, r3, #8
 800b2ee:	f003 030f 	and.w	r3, r3, #15
 800b2f2:	490f      	ldr	r1, [pc, #60]	; (800b330 <HAL_RCC_GetHCLKFreq+0x54>)
 800b2f4:	5ccb      	ldrb	r3, [r1, r3]
 800b2f6:	f003 031f 	and.w	r3, r3, #31
 800b2fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b2fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <HAL_RCC_GetHCLKFreq+0x50>)
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	f003 030f 	and.w	r3, r3, #15
 800b308:	4a09      	ldr	r2, [pc, #36]	; (800b330 <HAL_RCC_GetHCLKFreq+0x54>)
 800b30a:	5cd3      	ldrb	r3, [r2, r3]
 800b30c:	f003 031f 	and.w	r3, r3, #31
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	fa22 f303 	lsr.w	r3, r2, r3
 800b316:	4a07      	ldr	r2, [pc, #28]	; (800b334 <HAL_RCC_GetHCLKFreq+0x58>)
 800b318:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b31a:	4a07      	ldr	r2, [pc, #28]	; (800b338 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b320:	4b04      	ldr	r3, [pc, #16]	; (800b334 <HAL_RCC_GetHCLKFreq+0x58>)
 800b322:	681b      	ldr	r3, [r3, #0]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3708      	adds	r7, #8
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	58024400 	.word	0x58024400
 800b330:	08017b98 	.word	0x08017b98
 800b334:	2400008c 	.word	0x2400008c
 800b338:	24000088 	.word	0x24000088

0800b33c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b340:	f7ff ffcc 	bl	800b2dc <HAL_RCC_GetHCLKFreq>
 800b344:	4602      	mov	r2, r0
 800b346:	4b06      	ldr	r3, [pc, #24]	; (800b360 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	091b      	lsrs	r3, r3, #4
 800b34c:	f003 0307 	and.w	r3, r3, #7
 800b350:	4904      	ldr	r1, [pc, #16]	; (800b364 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b352:	5ccb      	ldrb	r3, [r1, r3]
 800b354:	f003 031f 	and.w	r3, r3, #31
 800b358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	58024400 	.word	0x58024400
 800b364:	08017b98 	.word	0x08017b98

0800b368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b36c:	f7ff ffb6 	bl	800b2dc <HAL_RCC_GetHCLKFreq>
 800b370:	4602      	mov	r2, r0
 800b372:	4b06      	ldr	r3, [pc, #24]	; (800b38c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	0a1b      	lsrs	r3, r3, #8
 800b378:	f003 0307 	and.w	r3, r3, #7
 800b37c:	4904      	ldr	r1, [pc, #16]	; (800b390 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b37e:	5ccb      	ldrb	r3, [r1, r3]
 800b380:	f003 031f 	and.w	r3, r3, #31
 800b384:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b388:	4618      	mov	r0, r3
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	58024400 	.word	0x58024400
 800b390:	08017b98 	.word	0x08017b98

0800b394 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	223f      	movs	r2, #63	; 0x3f
 800b3a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b3a4:	4b1a      	ldr	r3, [pc, #104]	; (800b410 <HAL_RCC_GetClockConfig+0x7c>)
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	f003 0207 	and.w	r2, r3, #7
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b3b0:	4b17      	ldr	r3, [pc, #92]	; (800b410 <HAL_RCC_GetClockConfig+0x7c>)
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b3bc:	4b14      	ldr	r3, [pc, #80]	; (800b410 <HAL_RCC_GetClockConfig+0x7c>)
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	f003 020f 	and.w	r2, r3, #15
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b3c8:	4b11      	ldr	r3, [pc, #68]	; (800b410 <HAL_RCC_GetClockConfig+0x7c>)
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b3d4:	4b0e      	ldr	r3, [pc, #56]	; (800b410 <HAL_RCC_GetClockConfig+0x7c>)
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b3e0:	4b0b      	ldr	r3, [pc, #44]	; (800b410 <HAL_RCC_GetClockConfig+0x7c>)
 800b3e2:	69db      	ldr	r3, [r3, #28]
 800b3e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b3ec:	4b08      	ldr	r3, [pc, #32]	; (800b410 <HAL_RCC_GetClockConfig+0x7c>)
 800b3ee:	6a1b      	ldr	r3, [r3, #32]
 800b3f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b3f8:	4b06      	ldr	r3, [pc, #24]	; (800b414 <HAL_RCC_GetClockConfig+0x80>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 020f 	and.w	r2, r3, #15
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	601a      	str	r2, [r3, #0]
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	58024400 	.word	0x58024400
 800b414:	52002000 	.word	0x52002000

0800b418 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b41c:	b0ca      	sub	sp, #296	; 0x128
 800b41e:	af00      	add	r7, sp, #0
 800b420:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b424:	2300      	movs	r3, #0
 800b426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b42a:	2300      	movs	r3, #0
 800b42c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b43c:	2500      	movs	r5, #0
 800b43e:	ea54 0305 	orrs.w	r3, r4, r5
 800b442:	d049      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b44a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b44e:	d02f      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b450:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b454:	d828      	bhi.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b45a:	d01a      	beq.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b45c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b460:	d822      	bhi.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b462:	2b00      	cmp	r3, #0
 800b464:	d003      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b46a:	d007      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b46c:	e01c      	b.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b46e:	4bb8      	ldr	r3, [pc, #736]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b472:	4ab7      	ldr	r2, [pc, #732]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b478:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b47a:	e01a      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b480:	3308      	adds	r3, #8
 800b482:	2102      	movs	r1, #2
 800b484:	4618      	mov	r0, r3
 800b486:	f002 fb61 	bl	800db4c <RCCEx_PLL2_Config>
 800b48a:	4603      	mov	r3, r0
 800b48c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b490:	e00f      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b496:	3328      	adds	r3, #40	; 0x28
 800b498:	2102      	movs	r1, #2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f002 fc08 	bl	800dcb0 <RCCEx_PLL3_Config>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4a6:	e004      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4ae:	e000      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b4b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10a      	bne.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b4ba:	4ba5      	ldr	r3, [pc, #660]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4c8:	4aa1      	ldr	r2, [pc, #644]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4ca:	430b      	orrs	r3, r1
 800b4cc:	6513      	str	r3, [r2, #80]	; 0x50
 800b4ce:	e003      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b4e4:	f04f 0900 	mov.w	r9, #0
 800b4e8:	ea58 0309 	orrs.w	r3, r8, r9
 800b4ec:	d047      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	d82a      	bhi.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b4f8:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fe:	bf00      	nop
 800b500:	0800b515 	.word	0x0800b515
 800b504:	0800b523 	.word	0x0800b523
 800b508:	0800b539 	.word	0x0800b539
 800b50c:	0800b557 	.word	0x0800b557
 800b510:	0800b557 	.word	0x0800b557
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b514:	4b8e      	ldr	r3, [pc, #568]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4a8d      	ldr	r2, [pc, #564]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b51a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b51e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b520:	e01a      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b526:	3308      	adds	r3, #8
 800b528:	2100      	movs	r1, #0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f002 fb0e 	bl	800db4c <RCCEx_PLL2_Config>
 800b530:	4603      	mov	r3, r0
 800b532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b536:	e00f      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53c:	3328      	adds	r3, #40	; 0x28
 800b53e:	2100      	movs	r1, #0
 800b540:	4618      	mov	r0, r3
 800b542:	f002 fbb5 	bl	800dcb0 <RCCEx_PLL3_Config>
 800b546:	4603      	mov	r3, r0
 800b548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b54c:	e004      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b554:	e000      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b556:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10a      	bne.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b560:	4b7b      	ldr	r3, [pc, #492]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b564:	f023 0107 	bic.w	r1, r3, #7
 800b568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56e:	4a78      	ldr	r2, [pc, #480]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b570:	430b      	orrs	r3, r1
 800b572:	6513      	str	r3, [r2, #80]	; 0x50
 800b574:	e003      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b57a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b58a:	f04f 0b00 	mov.w	fp, #0
 800b58e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b592:	d04c      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b59e:	d030      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b5a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a4:	d829      	bhi.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b5a6:	2bc0      	cmp	r3, #192	; 0xc0
 800b5a8:	d02d      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b5aa:	2bc0      	cmp	r3, #192	; 0xc0
 800b5ac:	d825      	bhi.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b5ae:	2b80      	cmp	r3, #128	; 0x80
 800b5b0:	d018      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b5b2:	2b80      	cmp	r3, #128	; 0x80
 800b5b4:	d821      	bhi.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b5ba:	2b40      	cmp	r3, #64	; 0x40
 800b5bc:	d007      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b5be:	e01c      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5c0:	4b63      	ldr	r3, [pc, #396]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	4a62      	ldr	r2, [pc, #392]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b5cc:	e01c      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f002 fab8 	bl	800db4c <RCCEx_PLL2_Config>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b5e2:	e011      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e8:	3328      	adds	r3, #40	; 0x28
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f002 fb5f 	bl	800dcb0 <RCCEx_PLL3_Config>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b5f8:	e006      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b600:	e002      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b602:	bf00      	nop
 800b604:	e000      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b606:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b608:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b610:	4b4f      	ldr	r3, [pc, #316]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b614:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b61e:	4a4c      	ldr	r2, [pc, #304]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b620:	430b      	orrs	r3, r1
 800b622:	6513      	str	r3, [r2, #80]	; 0x50
 800b624:	e003      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b62a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b63a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b63e:	2300      	movs	r3, #0
 800b640:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b644:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b648:	460b      	mov	r3, r1
 800b64a:	4313      	orrs	r3, r2
 800b64c:	d053      	beq.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b652:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b656:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b65a:	d035      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b65c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b660:	d82e      	bhi.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b662:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b666:	d031      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b668:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b66c:	d828      	bhi.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b66e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b672:	d01a      	beq.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b678:	d822      	bhi.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b67e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b682:	d007      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b684:	e01c      	b.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b686:	4b32      	ldr	r3, [pc, #200]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68a:	4a31      	ldr	r2, [pc, #196]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b68c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b690:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b692:	e01c      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b698:	3308      	adds	r3, #8
 800b69a:	2100      	movs	r1, #0
 800b69c:	4618      	mov	r0, r3
 800b69e:	f002 fa55 	bl	800db4c <RCCEx_PLL2_Config>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b6a8:	e011      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ae:	3328      	adds	r3, #40	; 0x28
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f002 fafc 	bl	800dcb0 <RCCEx_PLL3_Config>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6be:	e006      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6c6:	e002      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b6c8:	bf00      	nop
 800b6ca:	e000      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b6cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10b      	bne.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b6d6:	4b1e      	ldr	r3, [pc, #120]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6da:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b6e6:	4a1a      	ldr	r2, [pc, #104]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b6e8:	430b      	orrs	r3, r1
 800b6ea:	6593      	str	r3, [r2, #88]	; 0x58
 800b6ec:	e003      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b702:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b706:	2300      	movs	r3, #0
 800b708:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b70c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b710:	460b      	mov	r3, r1
 800b712:	4313      	orrs	r3, r2
 800b714:	d056      	beq.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b71a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b71e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b722:	d038      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b724:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b728:	d831      	bhi.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b72a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b72e:	d034      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b730:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b734:	d82b      	bhi.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b73a:	d01d      	beq.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b73c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b740:	d825      	bhi.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d006      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b746:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b74a:	d00a      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b74c:	e01f      	b.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b74e:	bf00      	nop
 800b750:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b754:	4ba2      	ldr	r3, [pc, #648]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b758:	4aa1      	ldr	r2, [pc, #644]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b75a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b75e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b760:	e01c      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b766:	3308      	adds	r3, #8
 800b768:	2100      	movs	r1, #0
 800b76a:	4618      	mov	r0, r3
 800b76c:	f002 f9ee 	bl	800db4c <RCCEx_PLL2_Config>
 800b770:	4603      	mov	r3, r0
 800b772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b776:	e011      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b77c:	3328      	adds	r3, #40	; 0x28
 800b77e:	2100      	movs	r1, #0
 800b780:	4618      	mov	r0, r3
 800b782:	f002 fa95 	bl	800dcb0 <RCCEx_PLL3_Config>
 800b786:	4603      	mov	r3, r0
 800b788:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b78c:	e006      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b794:	e002      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b796:	bf00      	nop
 800b798:	e000      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b79a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b79c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10b      	bne.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b7a4:	4b8e      	ldr	r3, [pc, #568]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7a8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b7ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b7b4:	4a8a      	ldr	r2, [pc, #552]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7b6:	430b      	orrs	r3, r1
 800b7b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b7ba:	e003      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b7d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b7de:	460b      	mov	r3, r1
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	d03a      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ea:	2b30      	cmp	r3, #48	; 0x30
 800b7ec:	d01f      	beq.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b7ee:	2b30      	cmp	r3, #48	; 0x30
 800b7f0:	d819      	bhi.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b7f2:	2b20      	cmp	r3, #32
 800b7f4:	d00c      	beq.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	d815      	bhi.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d019      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b7fe:	2b10      	cmp	r3, #16
 800b800:	d111      	bne.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b802:	4b77      	ldr	r3, [pc, #476]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b806:	4a76      	ldr	r2, [pc, #472]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b80c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b80e:	e011      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b814:	3308      	adds	r3, #8
 800b816:	2102      	movs	r1, #2
 800b818:	4618      	mov	r0, r3
 800b81a:	f002 f997 	bl	800db4c <RCCEx_PLL2_Config>
 800b81e:	4603      	mov	r3, r0
 800b820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b824:	e006      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b82c:	e002      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b82e:	bf00      	nop
 800b830:	e000      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b832:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10a      	bne.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b83c:	4b68      	ldr	r3, [pc, #416]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b83e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b840:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b84a:	4a65      	ldr	r2, [pc, #404]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b84c:	430b      	orrs	r3, r1
 800b84e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b850:	e003      	b.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b856:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b866:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b86a:	2300      	movs	r3, #0
 800b86c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b870:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b874:	460b      	mov	r3, r1
 800b876:	4313      	orrs	r3, r2
 800b878:	d051      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b87a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b87e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b884:	d035      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b88a:	d82e      	bhi.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b88c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b890:	d031      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b892:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b896:	d828      	bhi.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b89c:	d01a      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b89e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8a2:	d822      	bhi.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d003      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b8a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ac:	d007      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b8ae:	e01c      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8b0:	4b4b      	ldr	r3, [pc, #300]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b4:	4a4a      	ldr	r2, [pc, #296]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b8b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8bc:	e01c      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f002 f940 	bl	800db4c <RCCEx_PLL2_Config>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8d2:	e011      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d8:	3328      	adds	r3, #40	; 0x28
 800b8da:	2100      	movs	r1, #0
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f002 f9e7 	bl	800dcb0 <RCCEx_PLL3_Config>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8e8:	e006      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8f0:	e002      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b8f2:	bf00      	nop
 800b8f4:	e000      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b8f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10a      	bne.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b900:	4b37      	ldr	r3, [pc, #220]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b904:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b90c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b90e:	4a34      	ldr	r2, [pc, #208]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b910:	430b      	orrs	r3, r1
 800b912:	6513      	str	r3, [r2, #80]	; 0x50
 800b914:	e003      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b91a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b926:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b92a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b92e:	2300      	movs	r3, #0
 800b930:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b934:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b938:	460b      	mov	r3, r1
 800b93a:	4313      	orrs	r3, r2
 800b93c:	d056      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b93e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b948:	d033      	beq.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b94a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b94e:	d82c      	bhi.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b950:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b954:	d02f      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b95a:	d826      	bhi.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b95c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b960:	d02b      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b962:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b966:	d820      	bhi.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b96c:	d012      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b96e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b972:	d81a      	bhi.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b974:	2b00      	cmp	r3, #0
 800b976:	d022      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b97c:	d115      	bne.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b982:	3308      	adds	r3, #8
 800b984:	2101      	movs	r1, #1
 800b986:	4618      	mov	r0, r3
 800b988:	f002 f8e0 	bl	800db4c <RCCEx_PLL2_Config>
 800b98c:	4603      	mov	r3, r0
 800b98e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b992:	e015      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b998:	3328      	adds	r3, #40	; 0x28
 800b99a:	2101      	movs	r1, #1
 800b99c:	4618      	mov	r0, r3
 800b99e:	f002 f987 	bl	800dcb0 <RCCEx_PLL3_Config>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b9a8:	e00a      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9b0:	e006      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b9b2:	bf00      	nop
 800b9b4:	e004      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b9b6:	bf00      	nop
 800b9b8:	e002      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b9ba:	bf00      	nop
 800b9bc:	e000      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b9be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10d      	bne.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b9c8:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b9ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9d6:	4a02      	ldr	r2, [pc, #8]	; (800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b9d8:	430b      	orrs	r3, r1
 800b9da:	6513      	str	r3, [r2, #80]	; 0x50
 800b9dc:	e006      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b9de:	bf00      	nop
 800b9e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b9f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ba06:	460b      	mov	r3, r1
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	d055      	beq.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ba0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba18:	d033      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ba1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba1e:	d82c      	bhi.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba24:	d02f      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ba26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba2a:	d826      	bhi.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba30:	d02b      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ba32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba36:	d820      	bhi.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba3c:	d012      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ba3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba42:	d81a      	bhi.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d022      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ba48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba4c:	d115      	bne.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba52:	3308      	adds	r3, #8
 800ba54:	2101      	movs	r1, #1
 800ba56:	4618      	mov	r0, r3
 800ba58:	f002 f878 	bl	800db4c <RCCEx_PLL2_Config>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba62:	e015      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba68:	3328      	adds	r3, #40	; 0x28
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f002 f91f 	bl	800dcb0 <RCCEx_PLL3_Config>
 800ba72:	4603      	mov	r3, r0
 800ba74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba78:	e00a      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba80:	e006      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ba82:	bf00      	nop
 800ba84:	e004      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ba86:	bf00      	nop
 800ba88:	e002      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ba8a:	bf00      	nop
 800ba8c:	e000      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ba8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10b      	bne.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ba98:	4ba3      	ldr	r3, [pc, #652]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba9c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800baa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800baa8:	4a9f      	ldr	r2, [pc, #636]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baaa:	430b      	orrs	r3, r1
 800baac:	6593      	str	r3, [r2, #88]	; 0x58
 800baae:	e003      	b.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bab4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bac8:	2300      	movs	r3, #0
 800baca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bad2:	460b      	mov	r3, r1
 800bad4:	4313      	orrs	r3, r2
 800bad6:	d037      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800badc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bae2:	d00e      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800bae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bae8:	d816      	bhi.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800baea:	2b00      	cmp	r3, #0
 800baec:	d018      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800baee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800baf2:	d111      	bne.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baf4:	4b8c      	ldr	r3, [pc, #560]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf8:	4a8b      	ldr	r2, [pc, #556]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bafa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bafe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bb00:	e00f      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb06:	3308      	adds	r3, #8
 800bb08:	2101      	movs	r1, #1
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f002 f81e 	bl	800db4c <RCCEx_PLL2_Config>
 800bb10:	4603      	mov	r3, r0
 800bb12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bb16:	e004      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb1e:	e000      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800bb20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10a      	bne.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb2a:	4b7f      	ldr	r3, [pc, #508]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb2e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bb32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb38:	4a7b      	ldr	r2, [pc, #492]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb3a:	430b      	orrs	r3, r1
 800bb3c:	6513      	str	r3, [r2, #80]	; 0x50
 800bb3e:	e003      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bb54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb58:	2300      	movs	r3, #0
 800bb5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bb5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4313      	orrs	r3, r2
 800bb66:	d039      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d81c      	bhi.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x794>
 800bb72:	a201      	add	r2, pc, #4	; (adr r2, 800bb78 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800bb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb78:	0800bbb5 	.word	0x0800bbb5
 800bb7c:	0800bb89 	.word	0x0800bb89
 800bb80:	0800bb97 	.word	0x0800bb97
 800bb84:	0800bbb5 	.word	0x0800bbb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb88:	4b67      	ldr	r3, [pc, #412]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8c:	4a66      	ldr	r2, [pc, #408]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb94:	e00f      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	2102      	movs	r1, #2
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f001 ffd4 	bl	800db4c <RCCEx_PLL2_Config>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bbaa:	e004      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbb2:	e000      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800bbb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10a      	bne.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bbbe:	4b5a      	ldr	r3, [pc, #360]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbc2:	f023 0103 	bic.w	r1, r3, #3
 800bbc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbcc:	4a56      	ldr	r2, [pc, #344]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbce:	430b      	orrs	r3, r1
 800bbd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbd2:	e003      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bbe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbec:	2300      	movs	r3, #0
 800bbee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bbf2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	f000 809f 	beq.w	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbfe:	4b4b      	ldr	r3, [pc, #300]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a4a      	ldr	r2, [pc, #296]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bc04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc0a:	f7f8 fc09 	bl	8004420 <HAL_GetTick>
 800bc0e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc12:	e00b      	b.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc14:	f7f8 fc04 	bl	8004420 <HAL_GetTick>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	2b64      	cmp	r3, #100	; 0x64
 800bc22:	d903      	bls.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc2a:	e005      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc2c:	4b3f      	ldr	r3, [pc, #252]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d0ed      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800bc38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d179      	bne.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bc40:	4b39      	ldr	r3, [pc, #228]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc4c:	4053      	eors	r3, r2
 800bc4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d015      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc56:	4b34      	ldr	r3, [pc, #208]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc62:	4b31      	ldr	r3, [pc, #196]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc66:	4a30      	ldr	r2, [pc, #192]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc6c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc6e:	4b2e      	ldr	r3, [pc, #184]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc72:	4a2d      	ldr	r2, [pc, #180]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc78:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bc7a:	4a2b      	ldr	r2, [pc, #172]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bc80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc8e:	d118      	bne.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc90:	f7f8 fbc6 	bl	8004420 <HAL_GetTick>
 800bc94:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc98:	e00d      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc9a:	f7f8 fbc1 	bl	8004420 <HAL_GetTick>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bca4:	1ad2      	subs	r2, r2, r3
 800bca6:	f241 3388 	movw	r3, #5000	; 0x1388
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d903      	bls.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800bcae:	2303      	movs	r3, #3
 800bcb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800bcb4:	e005      	b.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bcb6:	4b1c      	ldr	r3, [pc, #112]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcba:	f003 0302 	and.w	r3, r3, #2
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0eb      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800bcc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d129      	bne.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcda:	d10e      	bne.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bcdc:	4b12      	ldr	r3, [pc, #72]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcec:	091a      	lsrs	r2, r3, #4
 800bcee:	4b10      	ldr	r3, [pc, #64]	; (800bd30 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	4a0d      	ldr	r2, [pc, #52]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcf4:	430b      	orrs	r3, r1
 800bcf6:	6113      	str	r3, [r2, #16]
 800bcf8:	e005      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800bcfa:	4b0b      	ldr	r3, [pc, #44]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	4a0a      	ldr	r2, [pc, #40]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bd04:	6113      	str	r3, [r2, #16]
 800bd06:	4b08      	ldr	r3, [pc, #32]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bd0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd16:	4a04      	ldr	r2, [pc, #16]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd18:	430b      	orrs	r3, r1
 800bd1a:	6713      	str	r3, [r2, #112]	; 0x70
 800bd1c:	e00e      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800bd26:	e009      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800bd28:	58024400 	.word	0x58024400
 800bd2c:	58024800 	.word	0x58024800
 800bd30:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	f002 0301 	and.w	r3, r2, #1
 800bd48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd56:	460b      	mov	r3, r1
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	f000 8089 	beq.w	800be70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bd5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd64:	2b28      	cmp	r3, #40	; 0x28
 800bd66:	d86b      	bhi.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800bd68:	a201      	add	r2, pc, #4	; (adr r2, 800bd70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6e:	bf00      	nop
 800bd70:	0800be49 	.word	0x0800be49
 800bd74:	0800be41 	.word	0x0800be41
 800bd78:	0800be41 	.word	0x0800be41
 800bd7c:	0800be41 	.word	0x0800be41
 800bd80:	0800be41 	.word	0x0800be41
 800bd84:	0800be41 	.word	0x0800be41
 800bd88:	0800be41 	.word	0x0800be41
 800bd8c:	0800be41 	.word	0x0800be41
 800bd90:	0800be15 	.word	0x0800be15
 800bd94:	0800be41 	.word	0x0800be41
 800bd98:	0800be41 	.word	0x0800be41
 800bd9c:	0800be41 	.word	0x0800be41
 800bda0:	0800be41 	.word	0x0800be41
 800bda4:	0800be41 	.word	0x0800be41
 800bda8:	0800be41 	.word	0x0800be41
 800bdac:	0800be41 	.word	0x0800be41
 800bdb0:	0800be2b 	.word	0x0800be2b
 800bdb4:	0800be41 	.word	0x0800be41
 800bdb8:	0800be41 	.word	0x0800be41
 800bdbc:	0800be41 	.word	0x0800be41
 800bdc0:	0800be41 	.word	0x0800be41
 800bdc4:	0800be41 	.word	0x0800be41
 800bdc8:	0800be41 	.word	0x0800be41
 800bdcc:	0800be41 	.word	0x0800be41
 800bdd0:	0800be49 	.word	0x0800be49
 800bdd4:	0800be41 	.word	0x0800be41
 800bdd8:	0800be41 	.word	0x0800be41
 800bddc:	0800be41 	.word	0x0800be41
 800bde0:	0800be41 	.word	0x0800be41
 800bde4:	0800be41 	.word	0x0800be41
 800bde8:	0800be41 	.word	0x0800be41
 800bdec:	0800be41 	.word	0x0800be41
 800bdf0:	0800be49 	.word	0x0800be49
 800bdf4:	0800be41 	.word	0x0800be41
 800bdf8:	0800be41 	.word	0x0800be41
 800bdfc:	0800be41 	.word	0x0800be41
 800be00:	0800be41 	.word	0x0800be41
 800be04:	0800be41 	.word	0x0800be41
 800be08:	0800be41 	.word	0x0800be41
 800be0c:	0800be41 	.word	0x0800be41
 800be10:	0800be49 	.word	0x0800be49
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be18:	3308      	adds	r3, #8
 800be1a:	2101      	movs	r1, #1
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 fe95 	bl	800db4c <RCCEx_PLL2_Config>
 800be22:	4603      	mov	r3, r0
 800be24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be28:	e00f      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be2e:	3328      	adds	r3, #40	; 0x28
 800be30:	2101      	movs	r1, #1
 800be32:	4618      	mov	r0, r3
 800be34:	f001 ff3c 	bl	800dcb0 <RCCEx_PLL3_Config>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be3e:	e004      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be46:	e000      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800be48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10a      	bne.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800be52:	4bbf      	ldr	r3, [pc, #764]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be56:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800be5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be60:	4abb      	ldr	r2, [pc, #748]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be62:	430b      	orrs	r3, r1
 800be64:	6553      	str	r3, [r2, #84]	; 0x54
 800be66:	e003      	b.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800be70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f002 0302 	and.w	r3, r2, #2
 800be7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be80:	2300      	movs	r3, #0
 800be82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800be8a:	460b      	mov	r3, r1
 800be8c:	4313      	orrs	r3, r2
 800be8e:	d041      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800be90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be96:	2b05      	cmp	r3, #5
 800be98:	d824      	bhi.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800be9a:	a201      	add	r2, pc, #4	; (adr r2, 800bea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800be9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea0:	0800beed 	.word	0x0800beed
 800bea4:	0800beb9 	.word	0x0800beb9
 800bea8:	0800becf 	.word	0x0800becf
 800beac:	0800beed 	.word	0x0800beed
 800beb0:	0800beed 	.word	0x0800beed
 800beb4:	0800beed 	.word	0x0800beed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800beb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bebc:	3308      	adds	r3, #8
 800bebe:	2101      	movs	r1, #1
 800bec0:	4618      	mov	r0, r3
 800bec2:	f001 fe43 	bl	800db4c <RCCEx_PLL2_Config>
 800bec6:	4603      	mov	r3, r0
 800bec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800becc:	e00f      	b.n	800beee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed2:	3328      	adds	r3, #40	; 0x28
 800bed4:	2101      	movs	r1, #1
 800bed6:	4618      	mov	r0, r3
 800bed8:	f001 feea 	bl	800dcb0 <RCCEx_PLL3_Config>
 800bedc:	4603      	mov	r3, r0
 800bede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bee2:	e004      	b.n	800beee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800beea:	e000      	b.n	800beee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800beec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d10a      	bne.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bef6:	4b96      	ldr	r3, [pc, #600]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befa:	f023 0107 	bic.w	r1, r3, #7
 800befe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf04:	4a92      	ldr	r2, [pc, #584]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf06:	430b      	orrs	r3, r1
 800bf08:	6553      	str	r3, [r2, #84]	; 0x54
 800bf0a:	e003      	b.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	f002 0304 	and.w	r3, r2, #4
 800bf20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf24:	2300      	movs	r3, #0
 800bf26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4313      	orrs	r3, r2
 800bf32:	d044      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bf34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf3c:	2b05      	cmp	r3, #5
 800bf3e:	d825      	bhi.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bf40:	a201      	add	r2, pc, #4	; (adr r2, 800bf48 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bf42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf46:	bf00      	nop
 800bf48:	0800bf95 	.word	0x0800bf95
 800bf4c:	0800bf61 	.word	0x0800bf61
 800bf50:	0800bf77 	.word	0x0800bf77
 800bf54:	0800bf95 	.word	0x0800bf95
 800bf58:	0800bf95 	.word	0x0800bf95
 800bf5c:	0800bf95 	.word	0x0800bf95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf64:	3308      	adds	r3, #8
 800bf66:	2101      	movs	r1, #1
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f001 fdef 	bl	800db4c <RCCEx_PLL2_Config>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf74:	e00f      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7a:	3328      	adds	r3, #40	; 0x28
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f001 fe96 	bl	800dcb0 <RCCEx_PLL3_Config>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf8a:	e004      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf92:	e000      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bf94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10b      	bne.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf9e:	4b6c      	ldr	r3, [pc, #432]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bfa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfa2:	f023 0107 	bic.w	r1, r3, #7
 800bfa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfae:	4a68      	ldr	r2, [pc, #416]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bfb0:	430b      	orrs	r3, r1
 800bfb2:	6593      	str	r3, [r2, #88]	; 0x58
 800bfb4:	e003      	b.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	f002 0320 	and.w	r3, r2, #32
 800bfca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	d055      	beq.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfea:	d033      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bfec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bff0:	d82c      	bhi.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bff6:	d02f      	beq.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bffc:	d826      	bhi.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bffe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c002:	d02b      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c004:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c008:	d820      	bhi.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c00e:	d012      	beq.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c014:	d81a      	bhi.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c016:	2b00      	cmp	r3, #0
 800c018:	d022      	beq.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c01a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c01e:	d115      	bne.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c024:	3308      	adds	r3, #8
 800c026:	2100      	movs	r1, #0
 800c028:	4618      	mov	r0, r3
 800c02a:	f001 fd8f 	bl	800db4c <RCCEx_PLL2_Config>
 800c02e:	4603      	mov	r3, r0
 800c030:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c034:	e015      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c03a:	3328      	adds	r3, #40	; 0x28
 800c03c:	2102      	movs	r1, #2
 800c03e:	4618      	mov	r0, r3
 800c040:	f001 fe36 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c044:	4603      	mov	r3, r0
 800c046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c04a:	e00a      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c052:	e006      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c054:	bf00      	nop
 800c056:	e004      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c058:	bf00      	nop
 800c05a:	e002      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c05c:	bf00      	nop
 800c05e:	e000      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c060:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10b      	bne.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c06a:	4b39      	ldr	r3, [pc, #228]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c06e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c07a:	4a35      	ldr	r2, [pc, #212]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c07c:	430b      	orrs	r3, r1
 800c07e:	6553      	str	r3, [r2, #84]	; 0x54
 800c080:	e003      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c09a:	2300      	movs	r3, #0
 800c09c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c0a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	d058      	beq.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c0b6:	d033      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c0b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c0bc:	d82c      	bhi.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c0be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0c2:	d02f      	beq.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c0c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0c8:	d826      	bhi.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c0ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0ce:	d02b      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c0d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0d4:	d820      	bhi.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c0d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0da:	d012      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c0dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0e0:	d81a      	bhi.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d022      	beq.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c0e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0ea:	d115      	bne.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f001 fd29 	bl	800db4c <RCCEx_PLL2_Config>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c100:	e015      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c106:	3328      	adds	r3, #40	; 0x28
 800c108:	2102      	movs	r1, #2
 800c10a:	4618      	mov	r0, r3
 800c10c:	f001 fdd0 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c110:	4603      	mov	r3, r0
 800c112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c116:	e00a      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c11e:	e006      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c120:	bf00      	nop
 800c122:	e004      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c124:	bf00      	nop
 800c126:	e002      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c128:	bf00      	nop
 800c12a:	e000      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c12c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c12e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10e      	bne.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c136:	4b06      	ldr	r3, [pc, #24]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c13a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c146:	4a02      	ldr	r2, [pc, #8]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c148:	430b      	orrs	r3, r1
 800c14a:	6593      	str	r3, [r2, #88]	; 0x58
 800c14c:	e006      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c14e:	bf00      	nop
 800c150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c158:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c16c:	2300      	movs	r3, #0
 800c16e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c172:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c176:	460b      	mov	r3, r1
 800c178:	4313      	orrs	r3, r2
 800c17a:	d055      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c180:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c184:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c188:	d033      	beq.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c18a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c18e:	d82c      	bhi.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c194:	d02f      	beq.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c19a:	d826      	bhi.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c19c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c1a0:	d02b      	beq.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c1a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c1a6:	d820      	bhi.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c1a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1ac:	d012      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c1ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1b2:	d81a      	bhi.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d022      	beq.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c1b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1bc:	d115      	bne.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1c2:	3308      	adds	r3, #8
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f001 fcc0 	bl	800db4c <RCCEx_PLL2_Config>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c1d2:	e015      	b.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d8:	3328      	adds	r3, #40	; 0x28
 800c1da:	2102      	movs	r1, #2
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f001 fd67 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c1e8:	e00a      	b.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1f0:	e006      	b.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c1f2:	bf00      	nop
 800c1f4:	e004      	b.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c1f6:	bf00      	nop
 800c1f8:	e002      	b.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c1fa:	bf00      	nop
 800c1fc:	e000      	b.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c1fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10b      	bne.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c208:	4ba1      	ldr	r3, [pc, #644]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c20a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c20c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c214:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c218:	4a9d      	ldr	r2, [pc, #628]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c21a:	430b      	orrs	r3, r1
 800c21c:	6593      	str	r3, [r2, #88]	; 0x58
 800c21e:	e003      	b.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c224:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	f002 0308 	and.w	r3, r2, #8
 800c234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c238:	2300      	movs	r3, #0
 800c23a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c23e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c242:	460b      	mov	r3, r1
 800c244:	4313      	orrs	r3, r2
 800c246:	d01e      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c24c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c254:	d10c      	bne.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25a:	3328      	adds	r3, #40	; 0x28
 800c25c:	2102      	movs	r1, #2
 800c25e:	4618      	mov	r0, r3
 800c260:	f001 fd26 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d002      	beq.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c270:	4b87      	ldr	r3, [pc, #540]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c274:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c27c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c280:	4a83      	ldr	r2, [pc, #524]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c282:	430b      	orrs	r3, r1
 800c284:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28e:	f002 0310 	and.w	r3, r2, #16
 800c292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c296:	2300      	movs	r3, #0
 800c298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c29c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	d01e      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2b2:	d10c      	bne.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b8:	3328      	adds	r3, #40	; 0x28
 800c2ba:	2102      	movs	r1, #2
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f001 fcf7 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d002      	beq.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c2ce:	4b70      	ldr	r3, [pc, #448]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2de:	4a6c      	ldr	r2, [pc, #432]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2e0:	430b      	orrs	r3, r1
 800c2e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c2f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c2fe:	460b      	mov	r3, r1
 800c300:	4313      	orrs	r3, r2
 800c302:	d03e      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c308:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c30c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c310:	d022      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c316:	d81b      	bhi.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c320:	d00b      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c322:	e015      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c328:	3308      	adds	r3, #8
 800c32a:	2100      	movs	r1, #0
 800c32c:	4618      	mov	r0, r3
 800c32e:	f001 fc0d 	bl	800db4c <RCCEx_PLL2_Config>
 800c332:	4603      	mov	r3, r0
 800c334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c338:	e00f      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c33e:	3328      	adds	r3, #40	; 0x28
 800c340:	2102      	movs	r1, #2
 800c342:	4618      	mov	r0, r3
 800c344:	f001 fcb4 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c348:	4603      	mov	r3, r0
 800c34a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c34e:	e004      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c350:	2301      	movs	r3, #1
 800c352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c356:	e000      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c35a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10b      	bne.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c362:	4b4b      	ldr	r3, [pc, #300]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c366:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c36e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c372:	4a47      	ldr	r2, [pc, #284]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c374:	430b      	orrs	r3, r1
 800c376:	6593      	str	r3, [r2, #88]	; 0x58
 800c378:	e003      	b.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c37a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c37e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c38e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c390:	2300      	movs	r3, #0
 800c392:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c394:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c398:	460b      	mov	r3, r1
 800c39a:	4313      	orrs	r3, r2
 800c39c:	d03b      	beq.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3aa:	d01f      	beq.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c3ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3b0:	d818      	bhi.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c3b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3b6:	d003      	beq.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c3b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3bc:	d007      	beq.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c3be:	e011      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3c0:	4b33      	ldr	r3, [pc, #204]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c4:	4a32      	ldr	r2, [pc, #200]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c3cc:	e00f      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3d2:	3328      	adds	r3, #40	; 0x28
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f001 fc6a 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c3e2:	e004      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c3ea:	e000      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10b      	bne.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3f6:	4b26      	ldr	r3, [pc, #152]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c406:	4a22      	ldr	r2, [pc, #136]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c408:	430b      	orrs	r3, r1
 800c40a:	6553      	str	r3, [r2, #84]	; 0x54
 800c40c:	e003      	b.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c40e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c412:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c422:	673b      	str	r3, [r7, #112]	; 0x70
 800c424:	2300      	movs	r3, #0
 800c426:	677b      	str	r3, [r7, #116]	; 0x74
 800c428:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c42c:	460b      	mov	r3, r1
 800c42e:	4313      	orrs	r3, r2
 800c430:	d034      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c440:	d007      	beq.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c442:	e011      	b.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c444:	4b12      	ldr	r3, [pc, #72]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c448:	4a11      	ldr	r2, [pc, #68]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c44a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c44e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c450:	e00e      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c456:	3308      	adds	r3, #8
 800c458:	2102      	movs	r1, #2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f001 fb76 	bl	800db4c <RCCEx_PLL2_Config>
 800c460:	4603      	mov	r3, r0
 800c462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c466:	e003      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c46e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10d      	bne.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c478:	4b05      	ldr	r3, [pc, #20]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c47a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c47c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c486:	4a02      	ldr	r2, [pc, #8]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c488:	430b      	orrs	r3, r1
 800c48a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c48c:	e006      	b.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c48e:	bf00      	nop
 800c490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c498:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c4a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	d00c      	beq.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4bc:	3328      	adds	r3, #40	; 0x28
 800c4be:	2102      	movs	r1, #2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f001 fbf5 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c4de:	663b      	str	r3, [r7, #96]	; 0x60
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	667b      	str	r3, [r7, #100]	; 0x64
 800c4e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	d038      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4fa:	d018      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c4fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c500:	d811      	bhi.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c506:	d014      	beq.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c50c:	d80b      	bhi.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d011      	beq.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c516:	d106      	bne.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c518:	4bc3      	ldr	r3, [pc, #780]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51c:	4ac2      	ldr	r2, [pc, #776]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c51e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c524:	e008      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c52c:	e004      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c52e:	bf00      	nop
 800c530:	e002      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c532:	bf00      	nop
 800c534:	e000      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c536:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c538:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10b      	bne.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c540:	4bb9      	ldr	r3, [pc, #740]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c544:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c550:	4ab5      	ldr	r2, [pc, #724]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c552:	430b      	orrs	r3, r1
 800c554:	6553      	str	r3, [r2, #84]	; 0x54
 800c556:	e003      	b.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c55c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c56c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c56e:	2300      	movs	r3, #0
 800c570:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c572:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c576:	460b      	mov	r3, r1
 800c578:	4313      	orrs	r3, r2
 800c57a:	d009      	beq.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c57c:	4baa      	ldr	r3, [pc, #680]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c580:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c58a:	4aa7      	ldr	r2, [pc, #668]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c58c:	430b      	orrs	r3, r1
 800c58e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c59c:	653b      	str	r3, [r7, #80]	; 0x50
 800c59e:	2300      	movs	r3, #0
 800c5a0:	657b      	str	r3, [r7, #84]	; 0x54
 800c5a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	d00a      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c5ac:	4b9e      	ldr	r3, [pc, #632]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c5bc:	4a9a      	ldr	r2, [pc, #616]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5be:	430b      	orrs	r3, r1
 800c5c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c5ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	d009      	beq.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c5de:	4b92      	ldr	r3, [pc, #584]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5e2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ec:	4a8e      	ldr	r2, [pc, #568]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5ee:	430b      	orrs	r3, r1
 800c5f0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c5fe:	643b      	str	r3, [r7, #64]	; 0x40
 800c600:	2300      	movs	r3, #0
 800c602:	647b      	str	r3, [r7, #68]	; 0x44
 800c604:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c608:	460b      	mov	r3, r1
 800c60a:	4313      	orrs	r3, r2
 800c60c:	d00e      	beq.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c60e:	4b86      	ldr	r3, [pc, #536]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	4a85      	ldr	r2, [pc, #532]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c614:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c618:	6113      	str	r3, [r2, #16]
 800c61a:	4b83      	ldr	r3, [pc, #524]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c61c:	6919      	ldr	r1, [r3, #16]
 800c61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c622:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c626:	4a80      	ldr	r2, [pc, #512]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c628:	430b      	orrs	r3, r1
 800c62a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c634:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c638:	63bb      	str	r3, [r7, #56]	; 0x38
 800c63a:	2300      	movs	r3, #0
 800c63c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c63e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c642:	460b      	mov	r3, r1
 800c644:	4313      	orrs	r3, r2
 800c646:	d009      	beq.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c648:	4b77      	ldr	r3, [pc, #476]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c64a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c64c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c656:	4a74      	ldr	r2, [pc, #464]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c658:	430b      	orrs	r3, r1
 800c65a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c664:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c668:	633b      	str	r3, [r7, #48]	; 0x30
 800c66a:	2300      	movs	r3, #0
 800c66c:	637b      	str	r3, [r7, #52]	; 0x34
 800c66e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c672:	460b      	mov	r3, r1
 800c674:	4313      	orrs	r3, r2
 800c676:	d00a      	beq.n	800c68e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c678:	4b6b      	ldr	r3, [pc, #428]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c67c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c688:	4a67      	ldr	r2, [pc, #412]	; (800c828 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c68a:	430b      	orrs	r3, r1
 800c68c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	2100      	movs	r1, #0
 800c698:	62b9      	str	r1, [r7, #40]	; 0x28
 800c69a:	f003 0301 	and.w	r3, r3, #1
 800c69e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	d011      	beq.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f001 fa4a 	bl	800db4c <RCCEx_PLL2_Config>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c6be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d003      	beq.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	6239      	str	r1, [r7, #32]
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	627b      	str	r3, [r7, #36]	; 0x24
 800c6e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	d011      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ee:	3308      	adds	r3, #8
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f001 fa2a 	bl	800db4c <RCCEx_PLL2_Config>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c6fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c702:	2b00      	cmp	r3, #0
 800c704:	d003      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c70a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	2100      	movs	r1, #0
 800c718:	61b9      	str	r1, [r7, #24]
 800c71a:	f003 0304 	and.w	r3, r3, #4
 800c71e:	61fb      	str	r3, [r7, #28]
 800c720:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c724:	460b      	mov	r3, r1
 800c726:	4313      	orrs	r3, r2
 800c728:	d011      	beq.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c72e:	3308      	adds	r3, #8
 800c730:	2102      	movs	r1, #2
 800c732:	4618      	mov	r0, r3
 800c734:	f001 fa0a 	bl	800db4c <RCCEx_PLL2_Config>
 800c738:	4603      	mov	r3, r0
 800c73a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c73e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c742:	2b00      	cmp	r3, #0
 800c744:	d003      	beq.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c74a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c756:	2100      	movs	r1, #0
 800c758:	6139      	str	r1, [r7, #16]
 800c75a:	f003 0308 	and.w	r3, r3, #8
 800c75e:	617b      	str	r3, [r7, #20]
 800c760:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c764:	460b      	mov	r3, r1
 800c766:	4313      	orrs	r3, r2
 800c768:	d011      	beq.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c76e:	3328      	adds	r3, #40	; 0x28
 800c770:	2100      	movs	r1, #0
 800c772:	4618      	mov	r0, r3
 800c774:	f001 fa9c 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c778:	4603      	mov	r3, r0
 800c77a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c77e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c782:	2b00      	cmp	r3, #0
 800c784:	d003      	beq.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c78a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c796:	2100      	movs	r1, #0
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	f003 0310 	and.w	r3, r3, #16
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	d011      	beq.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ae:	3328      	adds	r3, #40	; 0x28
 800c7b0:	2101      	movs	r1, #1
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f001 fa7c 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c7be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	6039      	str	r1, [r7, #0]
 800c7da:	f003 0320 	and.w	r3, r3, #32
 800c7de:	607b      	str	r3, [r7, #4]
 800c7e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	d011      	beq.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ee:	3328      	adds	r3, #40	; 0x28
 800c7f0:	2102      	movs	r1, #2
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f001 fa5c 	bl	800dcb0 <RCCEx_PLL3_Config>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c7fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c80a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c80e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c816:	2300      	movs	r3, #0
 800c818:	e000      	b.n	800c81c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c81a:	2301      	movs	r3, #1
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c822:	46bd      	mov	sp, r7
 800c824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c828:	58024400 	.word	0x58024400

0800c82c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b090      	sub	sp, #64	; 0x40
 800c830:	af00      	add	r7, sp, #0
 800c832:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c83a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c83e:	430b      	orrs	r3, r1
 800c840:	f040 8094 	bne.w	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c844:	4b9e      	ldr	r3, [pc, #632]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c848:	f003 0307 	and.w	r3, r3, #7
 800c84c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c850:	2b04      	cmp	r3, #4
 800c852:	f200 8087 	bhi.w	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c856:	a201      	add	r2, pc, #4	; (adr r2, 800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85c:	0800c871 	.word	0x0800c871
 800c860:	0800c899 	.word	0x0800c899
 800c864:	0800c8c1 	.word	0x0800c8c1
 800c868:	0800c95d 	.word	0x0800c95d
 800c86c:	0800c8e9 	.word	0x0800c8e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c870:	4b93      	ldr	r3, [pc, #588]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c878:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c87c:	d108      	bne.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c87e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c882:	4618      	mov	r0, r3
 800c884:	f001 f810 	bl	800d8a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c88c:	f000 bd45 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c894:	f000 bd41 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c898:	4b89      	ldr	r3, [pc, #548]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8a4:	d108      	bne.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8a6:	f107 0318 	add.w	r3, r7, #24
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f000 fd54 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8b4:	f000 bd31 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8bc:	f000 bd2d 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8c0:	4b7f      	ldr	r3, [pc, #508]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8cc:	d108      	bne.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8ce:	f107 030c 	add.w	r3, r7, #12
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 fe94 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8dc:	f000 bd1d 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8e4:	f000 bd19 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8e8:	4b75      	ldr	r3, [pc, #468]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8f2:	4b73      	ldr	r3, [pc, #460]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f003 0304 	and.w	r3, r3, #4
 800c8fa:	2b04      	cmp	r3, #4
 800c8fc:	d10c      	bne.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c900:	2b00      	cmp	r3, #0
 800c902:	d109      	bne.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c904:	4b6e      	ldr	r3, [pc, #440]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	08db      	lsrs	r3, r3, #3
 800c90a:	f003 0303 	and.w	r3, r3, #3
 800c90e:	4a6d      	ldr	r2, [pc, #436]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c910:	fa22 f303 	lsr.w	r3, r2, r3
 800c914:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c916:	e01f      	b.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c918:	4b69      	ldr	r3, [pc, #420]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c924:	d106      	bne.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c92c:	d102      	bne.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c92e:	4b66      	ldr	r3, [pc, #408]	; (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c930:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c932:	e011      	b.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c934:	4b62      	ldr	r3, [pc, #392]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c93c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c940:	d106      	bne.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c948:	d102      	bne.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c94a:	4b60      	ldr	r3, [pc, #384]	; (800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c94e:	e003      	b.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c954:	f000 bce1 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c958:	f000 bcdf 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c95c:	4b5c      	ldr	r3, [pc, #368]	; (800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c960:	f000 bcdb 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c968:	f000 bcd7 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c96c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c970:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c974:	430b      	orrs	r3, r1
 800c976:	f040 80ad 	bne.w	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c97a:	4b51      	ldr	r3, [pc, #324]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c97e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c982:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c98a:	d056      	beq.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c992:	f200 8090 	bhi.w	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c998:	2bc0      	cmp	r3, #192	; 0xc0
 800c99a:	f000 8088 	beq.w	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	2bc0      	cmp	r3, #192	; 0xc0
 800c9a2:	f200 8088 	bhi.w	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a8:	2b80      	cmp	r3, #128	; 0x80
 800c9aa:	d032      	beq.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ae:	2b80      	cmp	r3, #128	; 0x80
 800c9b0:	f200 8081 	bhi.w	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d003      	beq.n	800c9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9bc:	2b40      	cmp	r3, #64	; 0x40
 800c9be:	d014      	beq.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c9c0:	e079      	b.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9c2:	4b3f      	ldr	r3, [pc, #252]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9ce:	d108      	bne.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 ff67 	bl	800d8a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9de:	f000 bc9c 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e6:	f000 bc98 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9ea:	4b35      	ldr	r3, [pc, #212]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9f6:	d108      	bne.n	800ca0a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9f8:	f107 0318 	add.w	r3, r7, #24
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f000 fcab 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca06:	f000 bc88 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca0e:	f000 bc84 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca12:	4b2b      	ldr	r3, [pc, #172]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca1e:	d108      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca20:	f107 030c 	add.w	r3, r7, #12
 800ca24:	4618      	mov	r0, r3
 800ca26:	f000 fdeb 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca2e:	f000 bc74 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca36:	f000 bc70 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca3a:	4b21      	ldr	r3, [pc, #132]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca42:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca44:	4b1e      	ldr	r3, [pc, #120]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	d10c      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ca50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d109      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca56:	4b1a      	ldr	r3, [pc, #104]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	08db      	lsrs	r3, r3, #3
 800ca5c:	f003 0303 	and.w	r3, r3, #3
 800ca60:	4a18      	ldr	r2, [pc, #96]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ca62:	fa22 f303 	lsr.w	r3, r2, r3
 800ca66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca68:	e01f      	b.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca6a:	4b15      	ldr	r3, [pc, #84]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca76:	d106      	bne.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ca78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca7e:	d102      	bne.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca80:	4b11      	ldr	r3, [pc, #68]	; (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ca82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca84:	e011      	b.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca86:	4b0e      	ldr	r3, [pc, #56]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca92:	d106      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ca94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca9a:	d102      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca9c:	4b0b      	ldr	r3, [pc, #44]	; (800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ca9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caa0:	e003      	b.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800caa6:	f000 bc38 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800caaa:	f000 bc36 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800caae:	4b08      	ldr	r3, [pc, #32]	; (800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800cab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cab2:	f000 bc32 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caba:	f000 bc2e 	b.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cabe:	bf00      	nop
 800cac0:	58024400 	.word	0x58024400
 800cac4:	03d09000 	.word	0x03d09000
 800cac8:	003d0900 	.word	0x003d0900
 800cacc:	017d7840 	.word	0x017d7840
 800cad0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cad8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cadc:	430b      	orrs	r3, r1
 800cade:	f040 809c 	bne.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cae2:	4b9e      	ldr	r3, [pc, #632]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800caea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800caec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800caf2:	d054      	beq.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800caf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cafa:	f200 808b 	bhi.w	800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb04:	f000 8083 	beq.w	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800cb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb0e:	f200 8081 	bhi.w	800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb18:	d02f      	beq.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800cb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb20:	d878      	bhi.n	800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d004      	beq.n	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800cb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb2e:	d012      	beq.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800cb30:	e070      	b.n	800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb32:	4b8a      	ldr	r3, [pc, #552]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb3e:	d107      	bne.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 feaf 	bl	800d8a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4e:	e3e4      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb54:	e3e1      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb56:	4b81      	ldr	r3, [pc, #516]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb62:	d107      	bne.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb64:	f107 0318 	add.w	r3, r7, #24
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 fbf5 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb72:	e3d2      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb74:	2300      	movs	r3, #0
 800cb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb78:	e3cf      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb7a:	4b78      	ldr	r3, [pc, #480]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb86:	d107      	bne.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb88:	f107 030c 	add.w	r3, r7, #12
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 fd37 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb96:	e3c0      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb9c:	e3bd      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb9e:	4b6f      	ldr	r3, [pc, #444]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cba2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cba6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cba8:	4b6c      	ldr	r3, [pc, #432]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f003 0304 	and.w	r3, r3, #4
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	d10c      	bne.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800cbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d109      	bne.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbba:	4b68      	ldr	r3, [pc, #416]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	08db      	lsrs	r3, r3, #3
 800cbc0:	f003 0303 	and.w	r3, r3, #3
 800cbc4:	4a66      	ldr	r2, [pc, #408]	; (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cbc6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbcc:	e01e      	b.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbce:	4b63      	ldr	r3, [pc, #396]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbda:	d106      	bne.n	800cbea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800cbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbe2:	d102      	bne.n	800cbea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbe4:	4b5f      	ldr	r3, [pc, #380]	; (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbe8:	e010      	b.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbea:	4b5c      	ldr	r3, [pc, #368]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbf6:	d106      	bne.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800cbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbfe:	d102      	bne.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc00:	4b59      	ldr	r3, [pc, #356]	; (800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cc02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc04:	e002      	b.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc0a:	e386      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc0c:	e385      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc0e:	4b57      	ldr	r3, [pc, #348]	; (800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cc10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc12:	e382      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc14:	2300      	movs	r3, #0
 800cc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc18:	e37f      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cc1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc1e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cc22:	430b      	orrs	r3, r1
 800cc24:	f040 80a7 	bne.w	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cc28:	4b4c      	ldr	r3, [pc, #304]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc2c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cc30:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc38:	d055      	beq.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc40:	f200 8096 	bhi.w	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc4a:	f000 8084 	beq.w	800cd56 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc54:	f200 808c 	bhi.w	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc5e:	d030      	beq.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc66:	f200 8083 	bhi.w	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d004      	beq.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800cc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc76:	d012      	beq.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800cc78:	e07a      	b.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc7a:	4b38      	ldr	r3, [pc, #224]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc86:	d107      	bne.n	800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f000 fe0b 	bl	800d8a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc96:	e340      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc9c:	e33d      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc9e:	4b2f      	ldr	r3, [pc, #188]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccaa:	d107      	bne.n	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccac:	f107 0318 	add.w	r3, r7, #24
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 fb51 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccba:	e32e      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccc0:	e32b      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccc2:	4b26      	ldr	r3, [pc, #152]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccce:	d107      	bne.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccd0:	f107 030c 	add.w	r3, r7, #12
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 fc93 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccde:	e31c      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce4:	e319      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cce6:	4b1d      	ldr	r3, [pc, #116]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccf0:	4b1a      	ldr	r3, [pc, #104]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f003 0304 	and.w	r3, r3, #4
 800ccf8:	2b04      	cmp	r3, #4
 800ccfa:	d10c      	bne.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ccfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d109      	bne.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd02:	4b16      	ldr	r3, [pc, #88]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	08db      	lsrs	r3, r3, #3
 800cd08:	f003 0303 	and.w	r3, r3, #3
 800cd0c:	4a14      	ldr	r2, [pc, #80]	; (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd14:	e01e      	b.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd16:	4b11      	ldr	r3, [pc, #68]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd22:	d106      	bne.n	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd2a:	d102      	bne.n	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd2c:	4b0d      	ldr	r3, [pc, #52]	; (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd30:	e010      	b.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd32:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd3e:	d106      	bne.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800cd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd46:	d102      	bne.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd48:	4b07      	ldr	r3, [pc, #28]	; (800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd4c:	e002      	b.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd52:	e2e2      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd54:	e2e1      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd56:	4b05      	ldr	r3, [pc, #20]	; (800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cd58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd5a:	e2de      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd5c:	58024400 	.word	0x58024400
 800cd60:	03d09000 	.word	0x03d09000
 800cd64:	003d0900 	.word	0x003d0900
 800cd68:	017d7840 	.word	0x017d7840
 800cd6c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800cd70:	2300      	movs	r3, #0
 800cd72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd74:	e2d1      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cd76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd7a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cd7e:	430b      	orrs	r3, r1
 800cd80:	f040 809c 	bne.w	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cd84:	4b93      	ldr	r3, [pc, #588]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd88:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cd8c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd94:	d054      	beq.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd9c:	f200 808b 	bhi.w	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cda6:	f000 8083 	beq.w	800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdb0:	f200 8081 	bhi.w	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdba:	d02f      	beq.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdc2:	d878      	bhi.n	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d004      	beq.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdd0:	d012      	beq.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800cdd2:	e070      	b.n	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdd4:	4b7f      	ldr	r3, [pc, #508]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cde0:	d107      	bne.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cde2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 fd5e 	bl	800d8a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdf0:	e293      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf6:	e290      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdf8:	4b76      	ldr	r3, [pc, #472]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce04:	d107      	bne.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce06:	f107 0318 	add.w	r3, r7, #24
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 faa4 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce14:	e281      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce1a:	e27e      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce1c:	4b6d      	ldr	r3, [pc, #436]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce28:	d107      	bne.n	800ce3a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce2a:	f107 030c 	add.w	r3, r7, #12
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f000 fbe6 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce38:	e26f      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce3e:	e26c      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce40:	4b64      	ldr	r3, [pc, #400]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce48:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce4a:	4b62      	ldr	r3, [pc, #392]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f003 0304 	and.w	r3, r3, #4
 800ce52:	2b04      	cmp	r3, #4
 800ce54:	d10c      	bne.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ce56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d109      	bne.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce5c:	4b5d      	ldr	r3, [pc, #372]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	08db      	lsrs	r3, r3, #3
 800ce62:	f003 0303 	and.w	r3, r3, #3
 800ce66:	4a5c      	ldr	r2, [pc, #368]	; (800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ce68:	fa22 f303 	lsr.w	r3, r2, r3
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce6e:	e01e      	b.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce70:	4b58      	ldr	r3, [pc, #352]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce7c:	d106      	bne.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ce7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce84:	d102      	bne.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce86:	4b55      	ldr	r3, [pc, #340]	; (800cfdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce8a:	e010      	b.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce8c:	4b51      	ldr	r3, [pc, #324]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce98:	d106      	bne.n	800cea8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ce9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cea0:	d102      	bne.n	800cea8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cea2:	4b4f      	ldr	r3, [pc, #316]	; (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cea6:	e002      	b.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ceac:	e235      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ceae:	e234      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ceb0:	4b4c      	ldr	r3, [pc, #304]	; (800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ceb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb4:	e231      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceba:	e22e      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cec0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cec4:	430b      	orrs	r3, r1
 800cec6:	f040 808f 	bne.w	800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ceca:	4b42      	ldr	r3, [pc, #264]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cece:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ced2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ced4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ceda:	d06b      	beq.n	800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cede:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cee2:	d874      	bhi.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ceea:	d056      	beq.n	800cf9a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ceec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cef2:	d86c      	bhi.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cefa:	d03b      	beq.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cf02:	d864      	bhi.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf0a:	d021      	beq.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf12:	d85c      	bhi.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d004      	beq.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf20:	d004      	beq.n	800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cf22:	e054      	b.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cf24:	f7fe fa0a 	bl	800b33c <HAL_RCC_GetPCLK1Freq>
 800cf28:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf2a:	e1f6      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf2c:	4b29      	ldr	r3, [pc, #164]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf38:	d107      	bne.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf3a:	f107 0318 	add.w	r3, r7, #24
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 fa0a 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf48:	e1e7      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf4e:	e1e4      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf50:	4b20      	ldr	r3, [pc, #128]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf5c:	d107      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf5e:	f107 030c 	add.w	r3, r7, #12
 800cf62:	4618      	mov	r0, r3
 800cf64:	f000 fb4c 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf6c:	e1d5      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf72:	e1d2      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf74:	4b17      	ldr	r3, [pc, #92]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 0304 	and.w	r3, r3, #4
 800cf7c:	2b04      	cmp	r3, #4
 800cf7e:	d109      	bne.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf80:	4b14      	ldr	r3, [pc, #80]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	08db      	lsrs	r3, r3, #3
 800cf86:	f003 0303 	and.w	r3, r3, #3
 800cf8a:	4a13      	ldr	r2, [pc, #76]	; (800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cf8c:	fa22 f303 	lsr.w	r3, r2, r3
 800cf90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf92:	e1c2      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf98:	e1bf      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf9a:	4b0e      	ldr	r3, [pc, #56]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfa6:	d102      	bne.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cfa8:	4b0c      	ldr	r3, [pc, #48]	; (800cfdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfac:	e1b5      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfb2:	e1b2      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cfb4:	4b07      	ldr	r3, [pc, #28]	; (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfc0:	d102      	bne.n	800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cfc2:	4b07      	ldr	r3, [pc, #28]	; (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfc6:	e1a8      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfcc:	e1a5      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfd2:	e1a2      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cfd4:	58024400 	.word	0x58024400
 800cfd8:	03d09000 	.word	0x03d09000
 800cfdc:	003d0900 	.word	0x003d0900
 800cfe0:	017d7840 	.word	0x017d7840
 800cfe4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cfe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfec:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cff0:	430b      	orrs	r3, r1
 800cff2:	d173      	bne.n	800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cff4:	4b9c      	ldr	r3, [pc, #624]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cffc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d004:	d02f      	beq.n	800d066 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d00c:	d863      	bhi.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800d00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d010:	2b00      	cmp	r3, #0
 800d012:	d004      	beq.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d01a:	d012      	beq.n	800d042 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800d01c:	e05b      	b.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d01e:	4b92      	ldr	r3, [pc, #584]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d02a:	d107      	bne.n	800d03c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d02c:	f107 0318 	add.w	r3, r7, #24
 800d030:	4618      	mov	r0, r3
 800d032:	f000 f991 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d03a:	e16e      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d040:	e16b      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d042:	4b89      	ldr	r3, [pc, #548]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d04a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d04e:	d107      	bne.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d050:	f107 030c 	add.w	r3, r7, #12
 800d054:	4618      	mov	r0, r3
 800d056:	f000 fad3 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d05e:	e15c      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d060:	2300      	movs	r3, #0
 800d062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d064:	e159      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d066:	4b80      	ldr	r3, [pc, #512]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d06a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d06e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d070:	4b7d      	ldr	r3, [pc, #500]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f003 0304 	and.w	r3, r3, #4
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d10c      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800d07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d109      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d082:	4b79      	ldr	r3, [pc, #484]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	08db      	lsrs	r3, r3, #3
 800d088:	f003 0303 	and.w	r3, r3, #3
 800d08c:	4a77      	ldr	r2, [pc, #476]	; (800d26c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d08e:	fa22 f303 	lsr.w	r3, r2, r3
 800d092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d094:	e01e      	b.n	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d096:	4b74      	ldr	r3, [pc, #464]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0a2:	d106      	bne.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0aa:	d102      	bne.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d0ac:	4b70      	ldr	r3, [pc, #448]	; (800d270 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0b0:	e010      	b.n	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d0b2:	4b6d      	ldr	r3, [pc, #436]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0be:	d106      	bne.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800d0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0c6:	d102      	bne.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d0c8:	4b6a      	ldr	r3, [pc, #424]	; (800d274 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0cc:	e002      	b.n	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d0d2:	e122      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d0d4:	e121      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0da:	e11e      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d0dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0e0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d0e4:	430b      	orrs	r3, r1
 800d0e6:	d133      	bne.n	800d150 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d0e8:	4b5f      	ldr	r3, [pc, #380]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d004      	beq.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0fe:	d012      	beq.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800d100:	e023      	b.n	800d14a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d102:	4b59      	ldr	r3, [pc, #356]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d10a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d10e:	d107      	bne.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d114:	4618      	mov	r0, r3
 800d116:	f000 fbc7 	bl	800d8a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d11e:	e0fc      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d124:	e0f9      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d126:	4b50      	ldr	r3, [pc, #320]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d12e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d132:	d107      	bne.n	800d144 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d134:	f107 0318 	add.w	r3, r7, #24
 800d138:	4618      	mov	r0, r3
 800d13a:	f000 f90d 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d13e:	6a3b      	ldr	r3, [r7, #32]
 800d140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d142:	e0ea      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d144:	2300      	movs	r3, #0
 800d146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d148:	e0e7      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d14e:	e0e4      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d154:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d158:	430b      	orrs	r3, r1
 800d15a:	f040 808d 	bne.w	800d278 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d15e:	4b42      	ldr	r3, [pc, #264]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d162:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d166:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d16e:	d06b      	beq.n	800d248 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800d170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d176:	d874      	bhi.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d17e:	d056      	beq.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800d180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d186:	d86c      	bhi.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d18e:	d03b      	beq.n	800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d196:	d864      	bhi.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d19e:	d021      	beq.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800d1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1a6:	d85c      	bhi.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d004      	beq.n	800d1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1b4:	d004      	beq.n	800d1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800d1b6:	e054      	b.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d1b8:	f000 f8b8 	bl	800d32c <HAL_RCCEx_GetD3PCLK1Freq>
 800d1bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1be:	e0ac      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1c0:	4b29      	ldr	r3, [pc, #164]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1cc:	d107      	bne.n	800d1de <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1ce:	f107 0318 	add.w	r3, r7, #24
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 f8c0 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1dc:	e09d      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1e2:	e09a      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d1e4:	4b20      	ldr	r3, [pc, #128]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1f0:	d107      	bne.n	800d202 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1f2:	f107 030c 	add.w	r3, r7, #12
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 fa02 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d200:	e08b      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d206:	e088      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d208:	4b17      	ldr	r3, [pc, #92]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 0304 	and.w	r3, r3, #4
 800d210:	2b04      	cmp	r3, #4
 800d212:	d109      	bne.n	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d214:	4b14      	ldr	r3, [pc, #80]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	08db      	lsrs	r3, r3, #3
 800d21a:	f003 0303 	and.w	r3, r3, #3
 800d21e:	4a13      	ldr	r2, [pc, #76]	; (800d26c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d220:	fa22 f303 	lsr.w	r3, r2, r3
 800d224:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d226:	e078      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d22c:	e075      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d22e:	4b0e      	ldr	r3, [pc, #56]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d23a:	d102      	bne.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800d23c:	4b0c      	ldr	r3, [pc, #48]	; (800d270 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d240:	e06b      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d246:	e068      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d248:	4b07      	ldr	r3, [pc, #28]	; (800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d254:	d102      	bne.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800d256:	4b07      	ldr	r3, [pc, #28]	; (800d274 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d25a:	e05e      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d25c:	2300      	movs	r3, #0
 800d25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d260:	e05b      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d262:	2300      	movs	r3, #0
 800d264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d266:	e058      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d268:	58024400 	.word	0x58024400
 800d26c:	03d09000 	.word	0x03d09000
 800d270:	003d0900 	.word	0x003d0900
 800d274:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d27c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d280:	430b      	orrs	r3, r1
 800d282:	d148      	bne.n	800d316 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d284:	4b27      	ldr	r3, [pc, #156]	; (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d288:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d28c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d294:	d02a      	beq.n	800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800d296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d29c:	d838      	bhi.n	800d310 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d004      	beq.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2aa:	d00d      	beq.n	800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d2ac:	e030      	b.n	800d310 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d2ae:	4b1d      	ldr	r3, [pc, #116]	; (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2ba:	d102      	bne.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d2bc:	4b1a      	ldr	r3, [pc, #104]	; (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2c0:	e02b      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2c6:	e028      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d2c8:	4b16      	ldr	r3, [pc, #88]	; (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2d4:	d107      	bne.n	800d2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f000 fae4 	bl	800d8a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2e4:	e019      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2ea:	e016      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2ec:	4b0d      	ldr	r3, [pc, #52]	; (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2f8:	d107      	bne.n	800d30a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2fa:	f107 0318 	add.w	r3, r7, #24
 800d2fe:	4618      	mov	r0, r3
 800d300:	f000 f82a 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d308:	e007      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d30e:	e004      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d310:	2300      	movs	r3, #0
 800d312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d314:	e001      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d316:	2300      	movs	r3, #0
 800d318:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3740      	adds	r7, #64	; 0x40
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	58024400 	.word	0x58024400
 800d328:	017d7840 	.word	0x017d7840

0800d32c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d330:	f7fd ffd4 	bl	800b2dc <HAL_RCC_GetHCLKFreq>
 800d334:	4602      	mov	r2, r0
 800d336:	4b06      	ldr	r3, [pc, #24]	; (800d350 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d338:	6a1b      	ldr	r3, [r3, #32]
 800d33a:	091b      	lsrs	r3, r3, #4
 800d33c:	f003 0307 	and.w	r3, r3, #7
 800d340:	4904      	ldr	r1, [pc, #16]	; (800d354 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d342:	5ccb      	ldrb	r3, [r1, r3]
 800d344:	f003 031f 	and.w	r3, r3, #31
 800d348:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	58024400 	.word	0x58024400
 800d354:	08017b98 	.word	0x08017b98

0800d358 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d358:	b480      	push	{r7}
 800d35a:	b089      	sub	sp, #36	; 0x24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d360:	4ba1      	ldr	r3, [pc, #644]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d364:	f003 0303 	and.w	r3, r3, #3
 800d368:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d36a:	4b9f      	ldr	r3, [pc, #636]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36e:	0b1b      	lsrs	r3, r3, #12
 800d370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d374:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d376:	4b9c      	ldr	r3, [pc, #624]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37a:	091b      	lsrs	r3, r3, #4
 800d37c:	f003 0301 	and.w	r3, r3, #1
 800d380:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d382:	4b99      	ldr	r3, [pc, #612]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d386:	08db      	lsrs	r3, r3, #3
 800d388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	fb02 f303 	mul.w	r3, r2, r3
 800d392:	ee07 3a90 	vmov	s15, r3
 800d396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d39a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f000 8111 	beq.w	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	f000 8083 	beq.w	800d4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	f200 80a1 	bhi.w	800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d003      	beq.n	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d056      	beq.n	800d470 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d3c2:	e099      	b.n	800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3c4:	4b88      	ldr	r3, [pc, #544]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f003 0320 	and.w	r3, r3, #32
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d02d      	beq.n	800d42c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3d0:	4b85      	ldr	r3, [pc, #532]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	08db      	lsrs	r3, r3, #3
 800d3d6:	f003 0303 	and.w	r3, r3, #3
 800d3da:	4a84      	ldr	r2, [pc, #528]	; (800d5ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d3dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d3e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	ee07 3a90 	vmov	s15, r3
 800d3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	ee07 3a90 	vmov	s15, r3
 800d3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3fa:	4b7b      	ldr	r3, [pc, #492]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d402:	ee07 3a90 	vmov	s15, r3
 800d406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d40e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d426:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d42a:	e087      	b.n	800d53c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	ee07 3a90 	vmov	s15, r3
 800d432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d436:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d43e:	4b6a      	ldr	r3, [pc, #424]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d452:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d45e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d46a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d46e:	e065      	b.n	800d53c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	ee07 3a90 	vmov	s15, r3
 800d476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d47a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d47e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d482:	4b59      	ldr	r3, [pc, #356]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d48a:	ee07 3a90 	vmov	s15, r3
 800d48e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d492:	ed97 6a03 	vldr	s12, [r7, #12]
 800d496:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d49a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4b2:	e043      	b.n	800d53c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	ee07 3a90 	vmov	s15, r3
 800d4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d5fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4c6:	4b48      	ldr	r3, [pc, #288]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ce:	ee07 3a90 	vmov	s15, r3
 800d4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4f6:	e021      	b.n	800d53c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	ee07 3a90 	vmov	s15, r3
 800d4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d502:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d50a:	4b37      	ldr	r3, [pc, #220]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d512:	ee07 3a90 	vmov	s15, r3
 800d516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d51a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d51e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d53a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d53c:	4b2a      	ldr	r3, [pc, #168]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d540:	0a5b      	lsrs	r3, r3, #9
 800d542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d546:	ee07 3a90 	vmov	s15, r3
 800d54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d54e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d552:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d556:	edd7 6a07 	vldr	s13, [r7, #28]
 800d55a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d55e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d562:	ee17 2a90 	vmov	r2, s15
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d56a:	4b1f      	ldr	r3, [pc, #124]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d56e:	0c1b      	lsrs	r3, r3, #16
 800d570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d574:	ee07 3a90 	vmov	s15, r3
 800d578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d57c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d580:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d584:	edd7 6a07 	vldr	s13, [r7, #28]
 800d588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d58c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d590:	ee17 2a90 	vmov	r2, s15
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d598:	4b13      	ldr	r3, [pc, #76]	; (800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59c:	0e1b      	lsrs	r3, r3, #24
 800d59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5a2:	ee07 3a90 	vmov	s15, r3
 800d5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5be:	ee17 2a90 	vmov	r2, s15
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d5c6:	e008      	b.n	800d5da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	609a      	str	r2, [r3, #8]
}
 800d5da:	bf00      	nop
 800d5dc:	3724      	adds	r7, #36	; 0x24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop
 800d5e8:	58024400 	.word	0x58024400
 800d5ec:	03d09000 	.word	0x03d09000
 800d5f0:	46000000 	.word	0x46000000
 800d5f4:	4c742400 	.word	0x4c742400
 800d5f8:	4a742400 	.word	0x4a742400
 800d5fc:	4bbebc20 	.word	0x4bbebc20

0800d600 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d600:	b480      	push	{r7}
 800d602:	b089      	sub	sp, #36	; 0x24
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d608:	4ba1      	ldr	r3, [pc, #644]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d60c:	f003 0303 	and.w	r3, r3, #3
 800d610:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d612:	4b9f      	ldr	r3, [pc, #636]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d616:	0d1b      	lsrs	r3, r3, #20
 800d618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d61c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d61e:	4b9c      	ldr	r3, [pc, #624]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d622:	0a1b      	lsrs	r3, r3, #8
 800d624:	f003 0301 	and.w	r3, r3, #1
 800d628:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d62a:	4b99      	ldr	r3, [pc, #612]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d62e:	08db      	lsrs	r3, r3, #3
 800d630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	fb02 f303 	mul.w	r3, r2, r3
 800d63a:	ee07 3a90 	vmov	s15, r3
 800d63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d642:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 8111 	beq.w	800d870 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	2b02      	cmp	r3, #2
 800d652:	f000 8083 	beq.w	800d75c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	2b02      	cmp	r3, #2
 800d65a:	f200 80a1 	bhi.w	800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d003      	beq.n	800d66c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d056      	beq.n	800d718 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d66a:	e099      	b.n	800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d66c:	4b88      	ldr	r3, [pc, #544]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f003 0320 	and.w	r3, r3, #32
 800d674:	2b00      	cmp	r3, #0
 800d676:	d02d      	beq.n	800d6d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d678:	4b85      	ldr	r3, [pc, #532]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	08db      	lsrs	r3, r3, #3
 800d67e:	f003 0303 	and.w	r3, r3, #3
 800d682:	4a84      	ldr	r2, [pc, #528]	; (800d894 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d684:	fa22 f303 	lsr.w	r3, r2, r3
 800d688:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	ee07 3a90 	vmov	s15, r3
 800d690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	ee07 3a90 	vmov	s15, r3
 800d69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d69e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6a2:	4b7b      	ldr	r3, [pc, #492]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6aa:	ee07 3a90 	vmov	s15, r3
 800d6ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d6d2:	e087      	b.n	800d7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	ee07 3a90 	vmov	s15, r3
 800d6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d89c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d6e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6e6:	4b6a      	ldr	r3, [pc, #424]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ee:	ee07 3a90 	vmov	s15, r3
 800d6f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d70a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d70e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d716:	e065      	b.n	800d7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	ee07 3a90 	vmov	s15, r3
 800d71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d722:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d8a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d72a:	4b59      	ldr	r3, [pc, #356]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d732:	ee07 3a90 	vmov	s15, r3
 800d736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d73a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d73e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d74a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d74e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d752:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d75a:	e043      	b.n	800d7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	ee07 3a90 	vmov	s15, r3
 800d762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d766:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d76e:	4b48      	ldr	r3, [pc, #288]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d776:	ee07 3a90 	vmov	s15, r3
 800d77a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d77e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d782:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d78e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d79a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d79e:	e021      	b.n	800d7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	ee07 3a90 	vmov	s15, r3
 800d7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d8a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7b2:	4b37      	ldr	r3, [pc, #220]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ba:	ee07 3a90 	vmov	s15, r3
 800d7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d7e4:	4b2a      	ldr	r3, [pc, #168]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e8:	0a5b      	lsrs	r3, r3, #9
 800d7ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ee:	ee07 3a90 	vmov	s15, r3
 800d7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d80a:	ee17 2a90 	vmov	r2, s15
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d812:	4b1f      	ldr	r3, [pc, #124]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d816:	0c1b      	lsrs	r3, r3, #16
 800d818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d81c:	ee07 3a90 	vmov	s15, r3
 800d820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d82c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d838:	ee17 2a90 	vmov	r2, s15
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d840:	4b13      	ldr	r3, [pc, #76]	; (800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d844:	0e1b      	lsrs	r3, r3, #24
 800d846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d84a:	ee07 3a90 	vmov	s15, r3
 800d84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d85a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d85e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d866:	ee17 2a90 	vmov	r2, s15
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d86e:	e008      	b.n	800d882 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	609a      	str	r2, [r3, #8]
}
 800d882:	bf00      	nop
 800d884:	3724      	adds	r7, #36	; 0x24
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	58024400 	.word	0x58024400
 800d894:	03d09000 	.word	0x03d09000
 800d898:	46000000 	.word	0x46000000
 800d89c:	4c742400 	.word	0x4c742400
 800d8a0:	4a742400 	.word	0x4a742400
 800d8a4:	4bbebc20 	.word	0x4bbebc20

0800d8a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b089      	sub	sp, #36	; 0x24
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d8b0:	4ba0      	ldr	r3, [pc, #640]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8b4:	f003 0303 	and.w	r3, r3, #3
 800d8b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d8ba:	4b9e      	ldr	r3, [pc, #632]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8be:	091b      	lsrs	r3, r3, #4
 800d8c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d8c6:	4b9b      	ldr	r3, [pc, #620]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d8d0:	4b98      	ldr	r3, [pc, #608]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d4:	08db      	lsrs	r3, r3, #3
 800d8d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	fb02 f303 	mul.w	r3, r2, r3
 800d8e0:	ee07 3a90 	vmov	s15, r3
 800d8e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f000 8111 	beq.w	800db16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d8f4:	69bb      	ldr	r3, [r7, #24]
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	f000 8083 	beq.w	800da02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	f200 80a1 	bhi.w	800da46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d003      	beq.n	800d912 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d056      	beq.n	800d9be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d910:	e099      	b.n	800da46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d912:	4b88      	ldr	r3, [pc, #544]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f003 0320 	and.w	r3, r3, #32
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d02d      	beq.n	800d97a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d91e:	4b85      	ldr	r3, [pc, #532]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	08db      	lsrs	r3, r3, #3
 800d924:	f003 0303 	and.w	r3, r3, #3
 800d928:	4a83      	ldr	r2, [pc, #524]	; (800db38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d92a:	fa22 f303 	lsr.w	r3, r2, r3
 800d92e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	ee07 3a90 	vmov	s15, r3
 800d936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	ee07 3a90 	vmov	s15, r3
 800d940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d948:	4b7a      	ldr	r3, [pc, #488]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d950:	ee07 3a90 	vmov	s15, r3
 800d954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d958:	ed97 6a03 	vldr	s12, [r7, #12]
 800d95c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800db3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d96c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d970:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d974:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d978:	e087      	b.n	800da8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	ee07 3a90 	vmov	s15, r3
 800d980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d984:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800db40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d98c:	4b69      	ldr	r3, [pc, #420]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d98e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d994:	ee07 3a90 	vmov	s15, r3
 800d998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d99c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800db3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9bc:	e065      	b.n	800da8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	ee07 3a90 	vmov	s15, r3
 800d9c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800db44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d9cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9d0:	4b58      	ldr	r3, [pc, #352]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d8:	ee07 3a90 	vmov	s15, r3
 800d9dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800db3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da00:	e043      	b.n	800da8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	ee07 3a90 	vmov	s15, r3
 800da08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da0c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800db48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800da10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da14:	4b47      	ldr	r3, [pc, #284]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da1c:	ee07 3a90 	vmov	s15, r3
 800da20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da24:	ed97 6a03 	vldr	s12, [r7, #12]
 800da28:	eddf 5a44 	vldr	s11, [pc, #272]	; 800db3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da44:	e021      	b.n	800da8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	ee07 3a90 	vmov	s15, r3
 800da4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da50:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800db40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800da54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da58:	4b36      	ldr	r3, [pc, #216]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da60:	ee07 3a90 	vmov	s15, r3
 800da64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da68:	ed97 6a03 	vldr	s12, [r7, #12]
 800da6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800db3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800da8a:	4b2a      	ldr	r3, [pc, #168]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8e:	0a5b      	lsrs	r3, r3, #9
 800da90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da94:	ee07 3a90 	vmov	s15, r3
 800da98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800daa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daa4:	edd7 6a07 	vldr	s13, [r7, #28]
 800daa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dab0:	ee17 2a90 	vmov	r2, s15
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dab8:	4b1e      	ldr	r3, [pc, #120]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dabc:	0c1b      	lsrs	r3, r3, #16
 800dabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dac2:	ee07 3a90 	vmov	s15, r3
 800dac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dace:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dad2:	edd7 6a07 	vldr	s13, [r7, #28]
 800dad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dade:	ee17 2a90 	vmov	r2, s15
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dae6:	4b13      	ldr	r3, [pc, #76]	; (800db34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daea:	0e1b      	lsrs	r3, r3, #24
 800daec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daf0:	ee07 3a90 	vmov	s15, r3
 800daf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dafc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db00:	edd7 6a07 	vldr	s13, [r7, #28]
 800db04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db0c:	ee17 2a90 	vmov	r2, s15
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800db14:	e008      	b.n	800db28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2200      	movs	r2, #0
 800db1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	609a      	str	r2, [r3, #8]
}
 800db28:	bf00      	nop
 800db2a:	3724      	adds	r7, #36	; 0x24
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr
 800db34:	58024400 	.word	0x58024400
 800db38:	03d09000 	.word	0x03d09000
 800db3c:	46000000 	.word	0x46000000
 800db40:	4c742400 	.word	0x4c742400
 800db44:	4a742400 	.word	0x4a742400
 800db48:	4bbebc20 	.word	0x4bbebc20

0800db4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db56:	2300      	movs	r3, #0
 800db58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800db5a:	4b53      	ldr	r3, [pc, #332]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800db5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db5e:	f003 0303 	and.w	r3, r3, #3
 800db62:	2b03      	cmp	r3, #3
 800db64:	d101      	bne.n	800db6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800db66:	2301      	movs	r3, #1
 800db68:	e099      	b.n	800dc9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800db6a:	4b4f      	ldr	r3, [pc, #316]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a4e      	ldr	r2, [pc, #312]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800db70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800db74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db76:	f7f6 fc53 	bl	8004420 <HAL_GetTick>
 800db7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db7c:	e008      	b.n	800db90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db7e:	f7f6 fc4f 	bl	8004420 <HAL_GetTick>
 800db82:	4602      	mov	r2, r0
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	1ad3      	subs	r3, r2, r3
 800db88:	2b02      	cmp	r3, #2
 800db8a:	d901      	bls.n	800db90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db8c:	2303      	movs	r3, #3
 800db8e:	e086      	b.n	800dc9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db90:	4b45      	ldr	r3, [pc, #276]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1f0      	bne.n	800db7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db9c:	4b42      	ldr	r3, [pc, #264]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800db9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	031b      	lsls	r3, r3, #12
 800dbaa:	493f      	ldr	r1, [pc, #252]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dbac:	4313      	orrs	r3, r2
 800dbae:	628b      	str	r3, [r1, #40]	; 0x28
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	3b01      	subs	r3, #1
 800dbc0:	025b      	lsls	r3, r3, #9
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	431a      	orrs	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	041b      	lsls	r3, r3, #16
 800dbce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dbd2:	431a      	orrs	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	061b      	lsls	r3, r3, #24
 800dbdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dbe0:	4931      	ldr	r1, [pc, #196]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dbe6:	4b30      	ldr	r3, [pc, #192]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	492d      	ldr	r1, [pc, #180]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dbf8:	4b2b      	ldr	r3, [pc, #172]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfc:	f023 0220 	bic.w	r2, r3, #32
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	699b      	ldr	r3, [r3, #24]
 800dc04:	4928      	ldr	r1, [pc, #160]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc06:	4313      	orrs	r3, r2
 800dc08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dc0a:	4b27      	ldr	r3, [pc, #156]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0e:	4a26      	ldr	r2, [pc, #152]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc10:	f023 0310 	bic.w	r3, r3, #16
 800dc14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dc16:	4b24      	ldr	r3, [pc, #144]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc1a:	4b24      	ldr	r3, [pc, #144]	; (800dcac <RCCEx_PLL2_Config+0x160>)
 800dc1c:	4013      	ands	r3, r2
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	69d2      	ldr	r2, [r2, #28]
 800dc22:	00d2      	lsls	r2, r2, #3
 800dc24:	4920      	ldr	r1, [pc, #128]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc26:	4313      	orrs	r3, r2
 800dc28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dc2a:	4b1f      	ldr	r3, [pc, #124]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2e:	4a1e      	ldr	r2, [pc, #120]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc30:	f043 0310 	orr.w	r3, r3, #16
 800dc34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d106      	bne.n	800dc4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dc3c:	4b1a      	ldr	r3, [pc, #104]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc40:	4a19      	ldr	r2, [pc, #100]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc48:	e00f      	b.n	800dc6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d106      	bne.n	800dc5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dc50:	4b15      	ldr	r3, [pc, #84]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc54:	4a14      	ldr	r2, [pc, #80]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc5c:	e005      	b.n	800dc6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dc5e:	4b12      	ldr	r3, [pc, #72]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc62:	4a11      	ldr	r2, [pc, #68]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dc68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dc6a:	4b0f      	ldr	r3, [pc, #60]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4a0e      	ldr	r2, [pc, #56]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dc74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc76:	f7f6 fbd3 	bl	8004420 <HAL_GetTick>
 800dc7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc7c:	e008      	b.n	800dc90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc7e:	f7f6 fbcf 	bl	8004420 <HAL_GetTick>
 800dc82:	4602      	mov	r2, r0
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	d901      	bls.n	800dc90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	e006      	b.n	800dc9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc90:	4b05      	ldr	r3, [pc, #20]	; (800dca8 <RCCEx_PLL2_Config+0x15c>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d0f0      	beq.n	800dc7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	58024400 	.word	0x58024400
 800dcac:	ffff0007 	.word	0xffff0007

0800dcb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dcbe:	4b53      	ldr	r3, [pc, #332]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dcc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc2:	f003 0303 	and.w	r3, r3, #3
 800dcc6:	2b03      	cmp	r3, #3
 800dcc8:	d101      	bne.n	800dcce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e099      	b.n	800de02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dcce:	4b4f      	ldr	r3, [pc, #316]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a4e      	ldr	r2, [pc, #312]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dcd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dcd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcda:	f7f6 fba1 	bl	8004420 <HAL_GetTick>
 800dcde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dce0:	e008      	b.n	800dcf4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dce2:	f7f6 fb9d 	bl	8004420 <HAL_GetTick>
 800dce6:	4602      	mov	r2, r0
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d901      	bls.n	800dcf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dcf0:	2303      	movs	r3, #3
 800dcf2:	e086      	b.n	800de02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dcf4:	4b45      	ldr	r3, [pc, #276]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1f0      	bne.n	800dce2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dd00:	4b42      	ldr	r3, [pc, #264]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	051b      	lsls	r3, r3, #20
 800dd0e:	493f      	ldr	r1, [pc, #252]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd10:	4313      	orrs	r3, r2
 800dd12:	628b      	str	r3, [r1, #40]	; 0x28
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	025b      	lsls	r3, r3, #9
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	431a      	orrs	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	041b      	lsls	r3, r3, #16
 800dd32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dd36:	431a      	orrs	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	061b      	lsls	r3, r3, #24
 800dd40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dd44:	4931      	ldr	r1, [pc, #196]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd46:	4313      	orrs	r3, r2
 800dd48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dd4a:	4b30      	ldr	r3, [pc, #192]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	695b      	ldr	r3, [r3, #20]
 800dd56:	492d      	ldr	r1, [pc, #180]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dd5c:	4b2b      	ldr	r3, [pc, #172]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	699b      	ldr	r3, [r3, #24]
 800dd68:	4928      	ldr	r1, [pc, #160]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dd6e:	4b27      	ldr	r3, [pc, #156]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd72:	4a26      	ldr	r2, [pc, #152]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dd7a:	4b24      	ldr	r3, [pc, #144]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd7e:	4b24      	ldr	r3, [pc, #144]	; (800de10 <RCCEx_PLL3_Config+0x160>)
 800dd80:	4013      	ands	r3, r2
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	69d2      	ldr	r2, [r2, #28]
 800dd86:	00d2      	lsls	r2, r2, #3
 800dd88:	4920      	ldr	r1, [pc, #128]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dd8e:	4b1f      	ldr	r3, [pc, #124]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd92:	4a1e      	ldr	r2, [pc, #120]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dd94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d106      	bne.n	800ddae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dda0:	4b1a      	ldr	r3, [pc, #104]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda4:	4a19      	ldr	r2, [pc, #100]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800dda6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ddaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ddac:	e00f      	b.n	800ddce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d106      	bne.n	800ddc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ddb4:	4b15      	ldr	r3, [pc, #84]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800ddb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddb8:	4a14      	ldr	r2, [pc, #80]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800ddba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ddbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ddc0:	e005      	b.n	800ddce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ddc2:	4b12      	ldr	r3, [pc, #72]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800ddc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc6:	4a11      	ldr	r2, [pc, #68]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800ddc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ddcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ddce:	4b0f      	ldr	r3, [pc, #60]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4a0e      	ldr	r2, [pc, #56]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800ddd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddda:	f7f6 fb21 	bl	8004420 <HAL_GetTick>
 800ddde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dde0:	e008      	b.n	800ddf4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dde2:	f7f6 fb1d 	bl	8004420 <HAL_GetTick>
 800dde6:	4602      	mov	r2, r0
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d901      	bls.n	800ddf4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ddf0:	2303      	movs	r3, #3
 800ddf2:	e006      	b.n	800de02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ddf4:	4b05      	ldr	r3, [pc, #20]	; (800de0c <RCCEx_PLL3_Config+0x15c>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d0f0      	beq.n	800dde2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800de00:	7bfb      	ldrb	r3, [r7, #15]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	58024400 	.word	0x58024400
 800de10:	ffff0007 	.word	0xffff0007

0800de14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800de1c:	2301      	movs	r3, #1
 800de1e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d071      	beq.n	800df0a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d106      	bne.n	800de40 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7f4 fd98 	bl	8002970 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2202      	movs	r2, #2
 800de44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	f003 0310 	and.w	r3, r3, #16
 800de52:	2b10      	cmp	r3, #16
 800de54:	d050      	beq.n	800def8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	22ca      	movs	r2, #202	; 0xca
 800de5c:	625a      	str	r2, [r3, #36]	; 0x24
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2253      	movs	r2, #83	; 0x53
 800de64:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fa4a 	bl	800e300 <RTC_EnterInitMode>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800de70:	7bfb      	ldrb	r3, [r7, #15]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d124      	bne.n	800dec0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	6899      	ldr	r1, [r3, #8]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	4b24      	ldr	r3, [pc, #144]	; (800df14 <HAL_RTC_Init+0x100>)
 800de82:	400b      	ands	r3, r1
 800de84:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	6899      	ldr	r1, [r3, #8]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	685a      	ldr	r2, [r3, #4]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	691b      	ldr	r3, [r3, #16]
 800de94:	431a      	orrs	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	699b      	ldr	r3, [r3, #24]
 800de9a:	431a      	orrs	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	430a      	orrs	r2, r1
 800dea2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	0419      	lsls	r1, r3, #16
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	68da      	ldr	r2, [r3, #12]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	430a      	orrs	r2, r1
 800deb4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 fa56 	bl	800e368 <RTC_ExitInitMode>
 800debc:	4603      	mov	r3, r0
 800debe:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800dec0:	7bfb      	ldrb	r3, [r7, #15]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d113      	bne.n	800deee <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f022 0203 	bic.w	r2, r2, #3
 800ded4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	69da      	ldr	r2, [r3, #28]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	695b      	ldr	r3, [r3, #20]
 800dee4:	431a      	orrs	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	430a      	orrs	r2, r1
 800deec:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	22ff      	movs	r2, #255	; 0xff
 800def4:	625a      	str	r2, [r3, #36]	; 0x24
 800def6:	e001      	b.n	800defc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800defc:	7bfb      	ldrb	r3, [r7, #15]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d103      	bne.n	800df0a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2201      	movs	r2, #1
 800df06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800df0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3710      	adds	r7, #16
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	ff8fffbf 	.word	0xff8fffbf

0800df18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800df18:	b590      	push	{r4, r7, lr}
 800df1a:	b087      	sub	sp, #28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d101      	bne.n	800df32 <HAL_RTC_SetTime+0x1a>
 800df2e:	2302      	movs	r3, #2
 800df30:	e089      	b.n	800e046 <HAL_RTC_SetTime+0x12e>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2201      	movs	r2, #1
 800df36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2202      	movs	r2, #2
 800df3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	22ca      	movs	r2, #202	; 0xca
 800df48:	625a      	str	r2, [r3, #36]	; 0x24
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2253      	movs	r2, #83	; 0x53
 800df50:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f000 f9d4 	bl	800e300 <RTC_EnterInitMode>
 800df58:	4603      	mov	r3, r0
 800df5a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800df5c:	7cfb      	ldrb	r3, [r7, #19]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d161      	bne.n	800e026 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d126      	bne.n	800dfb6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df72:	2b00      	cmp	r3, #0
 800df74:	d102      	bne.n	800df7c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2200      	movs	r2, #0
 800df7a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	4618      	mov	r0, r3
 800df82:	f000 fa2f 	bl	800e3e4 <RTC_ByteToBcd2>
 800df86:	4603      	mov	r3, r0
 800df88:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	785b      	ldrb	r3, [r3, #1]
 800df8e:	4618      	mov	r0, r3
 800df90:	f000 fa28 	bl	800e3e4 <RTC_ByteToBcd2>
 800df94:	4603      	mov	r3, r0
 800df96:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800df98:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	789b      	ldrb	r3, [r3, #2]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f000 fa20 	bl	800e3e4 <RTC_ByteToBcd2>
 800dfa4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dfa6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	78db      	ldrb	r3, [r3, #3]
 800dfae:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	617b      	str	r3, [r7, #20]
 800dfb4:	e018      	b.n	800dfe8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d102      	bne.n	800dfca <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	785b      	ldrb	r3, [r3, #1]
 800dfd4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dfd6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dfdc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	78db      	ldrb	r3, [r3, #3]
 800dfe2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	6979      	ldr	r1, [r7, #20]
 800dfee:	4b18      	ldr	r3, [pc, #96]	; (800e050 <HAL_RTC_SetTime+0x138>)
 800dff0:	400b      	ands	r3, r1
 800dff2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	689a      	ldr	r2, [r3, #8]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e002:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	6899      	ldr	r1, [r3, #8]
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	68da      	ldr	r2, [r3, #12]
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	431a      	orrs	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	430a      	orrs	r2, r1
 800e01a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f000 f9a3 	bl	800e368 <RTC_ExitInitMode>
 800e022:	4603      	mov	r3, r0
 800e024:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	22ff      	movs	r2, #255	; 0xff
 800e02c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800e02e:	7cfb      	ldrb	r3, [r7, #19]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d103      	bne.n	800e03c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2200      	movs	r2, #0
 800e040:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e044:	7cfb      	ldrb	r3, [r7, #19]
}
 800e046:	4618      	mov	r0, r3
 800e048:	371c      	adds	r7, #28
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd90      	pop	{r4, r7, pc}
 800e04e:	bf00      	nop
 800e050:	007f7f7f 	.word	0x007f7f7f

0800e054 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b086      	sub	sp, #24
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	691b      	ldr	r3, [r3, #16]
 800e070:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	4b22      	ldr	r3, [pc, #136]	; (800e108 <HAL_RTC_GetTime+0xb4>)
 800e080:	4013      	ands	r3, r2
 800e082:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	0c1b      	lsrs	r3, r3, #16
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	0a1b      	lsrs	r3, r3, #8
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	0d9b      	lsrs	r3, r3, #22
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	f003 0301 	and.w	r3, r3, #1
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d11a      	bne.n	800e0fe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 f9a9 	bl	800e424 <RTC_Bcd2ToByte>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	785b      	ldrb	r3, [r3, #1]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 f9a0 	bl	800e424 <RTC_Bcd2ToByte>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	789b      	ldrb	r3, [r3, #2]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f000 f997 	bl	800e424 <RTC_Bcd2ToByte>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3718      	adds	r7, #24
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	007f7f7f 	.word	0x007f7f7f

0800e10c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e10c:	b590      	push	{r4, r7, lr}
 800e10e:	b087      	sub	sp, #28
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d101      	bne.n	800e126 <HAL_RTC_SetDate+0x1a>
 800e122:	2302      	movs	r3, #2
 800e124:	e073      	b.n	800e20e <HAL_RTC_SetDate+0x102>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2202      	movs	r2, #2
 800e132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d10e      	bne.n	800e15a <HAL_RTC_SetDate+0x4e>
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	785b      	ldrb	r3, [r3, #1]
 800e140:	f003 0310 	and.w	r3, r3, #16
 800e144:	2b00      	cmp	r3, #0
 800e146:	d008      	beq.n	800e15a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	785b      	ldrb	r3, [r3, #1]
 800e14c:	f023 0310 	bic.w	r3, r3, #16
 800e150:	b2db      	uxtb	r3, r3
 800e152:	330a      	adds	r3, #10
 800e154:	b2da      	uxtb	r2, r3
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d11c      	bne.n	800e19a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	78db      	ldrb	r3, [r3, #3]
 800e164:	4618      	mov	r0, r3
 800e166:	f000 f93d 	bl	800e3e4 <RTC_ByteToBcd2>
 800e16a:	4603      	mov	r3, r0
 800e16c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	785b      	ldrb	r3, [r3, #1]
 800e172:	4618      	mov	r0, r3
 800e174:	f000 f936 	bl	800e3e4 <RTC_ByteToBcd2>
 800e178:	4603      	mov	r3, r0
 800e17a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e17c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	789b      	ldrb	r3, [r3, #2]
 800e182:	4618      	mov	r0, r3
 800e184:	f000 f92e 	bl	800e3e4 <RTC_ByteToBcd2>
 800e188:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e18a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e194:	4313      	orrs	r3, r2
 800e196:	617b      	str	r3, [r7, #20]
 800e198:	e00e      	b.n	800e1b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	78db      	ldrb	r3, [r3, #3]
 800e19e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	785b      	ldrb	r3, [r3, #1]
 800e1a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e1a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800e1a8:	68ba      	ldr	r2, [r7, #8]
 800e1aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800e1ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	22ca      	movs	r2, #202	; 0xca
 800e1be:	625a      	str	r2, [r3, #36]	; 0x24
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2253      	movs	r2, #83	; 0x53
 800e1c6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f000 f899 	bl	800e300 <RTC_EnterInitMode>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e1d2:	7cfb      	ldrb	r3, [r7, #19]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10a      	bne.n	800e1ee <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	6979      	ldr	r1, [r7, #20]
 800e1de:	4b0e      	ldr	r3, [pc, #56]	; (800e218 <HAL_RTC_SetDate+0x10c>)
 800e1e0:	400b      	ands	r3, r1
 800e1e2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f000 f8bf 	bl	800e368 <RTC_ExitInitMode>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	22ff      	movs	r2, #255	; 0xff
 800e1f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800e1f6:	7cfb      	ldrb	r3, [r7, #19]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d103      	bne.n	800e204 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2201      	movs	r2, #1
 800e200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2200      	movs	r2, #0
 800e208:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e20c:	7cfb      	ldrb	r3, [r7, #19]


}
 800e20e:	4618      	mov	r0, r3
 800e210:	371c      	adds	r7, #28
 800e212:	46bd      	mov	sp, r7
 800e214:	bd90      	pop	{r4, r7, pc}
 800e216:	bf00      	nop
 800e218:	00ffff3f 	.word	0x00ffff3f

0800e21c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b086      	sub	sp, #24
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	685a      	ldr	r2, [r3, #4]
 800e22e:	4b21      	ldr	r3, [pc, #132]	; (800e2b4 <HAL_RTC_GetDate+0x98>)
 800e230:	4013      	ands	r3, r2
 800e232:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	0c1b      	lsrs	r3, r3, #16
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	0a1b      	lsrs	r3, r3, #8
 800e242:	b2db      	uxtb	r3, r3
 800e244:	f003 031f 	and.w	r3, r3, #31
 800e248:	b2da      	uxtb	r2, r3
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	b2db      	uxtb	r3, r3
 800e252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e256:	b2da      	uxtb	r2, r3
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	0b5b      	lsrs	r3, r3, #13
 800e260:	b2db      	uxtb	r3, r3
 800e262:	f003 0307 	and.w	r3, r3, #7
 800e266:	b2da      	uxtb	r2, r3
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d11a      	bne.n	800e2a8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	78db      	ldrb	r3, [r3, #3]
 800e276:	4618      	mov	r0, r3
 800e278:	f000 f8d4 	bl	800e424 <RTC_Bcd2ToByte>
 800e27c:	4603      	mov	r3, r0
 800e27e:	461a      	mov	r2, r3
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	785b      	ldrb	r3, [r3, #1]
 800e288:	4618      	mov	r0, r3
 800e28a:	f000 f8cb 	bl	800e424 <RTC_Bcd2ToByte>
 800e28e:	4603      	mov	r3, r0
 800e290:	461a      	mov	r2, r3
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	789b      	ldrb	r3, [r3, #2]
 800e29a:	4618      	mov	r0, r3
 800e29c:	f000 f8c2 	bl	800e424 <RTC_Bcd2ToByte>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800e2a8:	2300      	movs	r3, #0
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3718      	adds	r7, #24
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	00ffff3f 	.word	0x00ffff3f

0800e2b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4a0d      	ldr	r2, [pc, #52]	; (800e2fc <HAL_RTC_WaitForSynchro+0x44>)
 800e2c6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800e2c8:	f7f6 f8aa 	bl	8004420 <HAL_GetTick>
 800e2cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e2ce:	e009      	b.n	800e2e4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e2d0:	f7f6 f8a6 	bl	8004420 <HAL_GetTick>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e2de:	d901      	bls.n	800e2e4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800e2e0:	2303      	movs	r3, #3
 800e2e2:	e007      	b.n	800e2f4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	f003 0320 	and.w	r3, r3, #32
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d0ee      	beq.n	800e2d0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	0003ff5f 	.word	0x0003ff5f

0800e300 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e308:	2300      	movs	r3, #0
 800e30a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e316:	2b00      	cmp	r3, #0
 800e318:	d120      	bne.n	800e35c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e322:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e324:	f7f6 f87c 	bl	8004420 <HAL_GetTick>
 800e328:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e32a:	e00d      	b.n	800e348 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e32c:	f7f6 f878 	bl	8004420 <HAL_GetTick>
 800e330:	4602      	mov	r2, r0
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e33a:	d905      	bls.n	800e348 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e33c:	2303      	movs	r3, #3
 800e33e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2203      	movs	r2, #3
 800e344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	68db      	ldr	r3, [r3, #12]
 800e34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e352:	2b00      	cmp	r3, #0
 800e354:	d102      	bne.n	800e35c <RTC_EnterInitMode+0x5c>
 800e356:	7bfb      	ldrb	r3, [r7, #15]
 800e358:	2b03      	cmp	r3, #3
 800e35a:	d1e7      	bne.n	800e32c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800e35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
	...

0800e368 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e370:	2300      	movs	r3, #0
 800e372:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e374:	4b1a      	ldr	r3, [pc, #104]	; (800e3e0 <RTC_ExitInitMode+0x78>)
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	4a19      	ldr	r2, [pc, #100]	; (800e3e0 <RTC_ExitInitMode+0x78>)
 800e37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e37e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e380:	4b17      	ldr	r3, [pc, #92]	; (800e3e0 <RTC_ExitInitMode+0x78>)
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	f003 0320 	and.w	r3, r3, #32
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10c      	bne.n	800e3a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7ff ff93 	bl	800e2b8 <HAL_RTC_WaitForSynchro>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d01e      	beq.n	800e3d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2203      	movs	r2, #3
 800e39c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e3a0:	2303      	movs	r3, #3
 800e3a2:	73fb      	strb	r3, [r7, #15]
 800e3a4:	e017      	b.n	800e3d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e3a6:	4b0e      	ldr	r3, [pc, #56]	; (800e3e0 <RTC_ExitInitMode+0x78>)
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	4a0d      	ldr	r2, [pc, #52]	; (800e3e0 <RTC_ExitInitMode+0x78>)
 800e3ac:	f023 0320 	bic.w	r3, r3, #32
 800e3b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7ff ff80 	bl	800e2b8 <HAL_RTC_WaitForSynchro>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d005      	beq.n	800e3ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2203      	movs	r2, #3
 800e3c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e3ca:	4b05      	ldr	r3, [pc, #20]	; (800e3e0 <RTC_ExitInitMode+0x78>)
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	4a04      	ldr	r2, [pc, #16]	; (800e3e0 <RTC_ExitInitMode+0x78>)
 800e3d0:	f043 0320 	orr.w	r3, r3, #32
 800e3d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	58004000 	.word	0x58004000

0800e3e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e3f2:	79fb      	ldrb	r3, [r7, #7]
 800e3f4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e3f6:	e005      	b.n	800e404 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e3fe:	7afb      	ldrb	r3, [r7, #11]
 800e400:	3b0a      	subs	r3, #10
 800e402:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e404:	7afb      	ldrb	r3, [r7, #11]
 800e406:	2b09      	cmp	r3, #9
 800e408:	d8f6      	bhi.n	800e3f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	011b      	lsls	r3, r3, #4
 800e410:	b2da      	uxtb	r2, r3
 800e412:	7afb      	ldrb	r3, [r7, #11]
 800e414:	4313      	orrs	r3, r2
 800e416:	b2db      	uxtb	r3, r3
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3714      	adds	r7, #20
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	4603      	mov	r3, r0
 800e42c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e42e:	79fb      	ldrb	r3, [r7, #7]
 800e430:	091b      	lsrs	r3, r3, #4
 800e432:	b2db      	uxtb	r3, r3
 800e434:	461a      	mov	r2, r3
 800e436:	0092      	lsls	r2, r2, #2
 800e438:	4413      	add	r3, r2
 800e43a:	005b      	lsls	r3, r3, #1
 800e43c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	f003 030f 	and.w	r3, r3, #15
 800e444:	b2da      	uxtb	r2, r3
 800e446:	7bfb      	ldrb	r3, [r7, #15]
 800e448:	4413      	add	r3, r2
 800e44a:	b2db      	uxtb	r3, r3
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d101      	bne.n	800e46a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e466:	2301      	movs	r3, #1
 800e468:	e10f      	b.n	800e68a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2200      	movs	r2, #0
 800e46e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a87      	ldr	r2, [pc, #540]	; (800e694 <HAL_SPI_Init+0x23c>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d00f      	beq.n	800e49a <HAL_SPI_Init+0x42>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4a86      	ldr	r2, [pc, #536]	; (800e698 <HAL_SPI_Init+0x240>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d00a      	beq.n	800e49a <HAL_SPI_Init+0x42>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a84      	ldr	r2, [pc, #528]	; (800e69c <HAL_SPI_Init+0x244>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d005      	beq.n	800e49a <HAL_SPI_Init+0x42>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	2b0f      	cmp	r3, #15
 800e494:	d901      	bls.n	800e49a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e496:	2301      	movs	r3, #1
 800e498:	e0f7      	b.n	800e68a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 fc12 	bl	800ecc4 <SPI_GetPacketSize>
 800e4a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a7b      	ldr	r2, [pc, #492]	; (800e694 <HAL_SPI_Init+0x23c>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d00c      	beq.n	800e4c6 <HAL_SPI_Init+0x6e>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a79      	ldr	r2, [pc, #484]	; (800e698 <HAL_SPI_Init+0x240>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d007      	beq.n	800e4c6 <HAL_SPI_Init+0x6e>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a78      	ldr	r2, [pc, #480]	; (800e69c <HAL_SPI_Init+0x244>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d002      	beq.n	800e4c6 <HAL_SPI_Init+0x6e>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2b08      	cmp	r3, #8
 800e4c4:	d811      	bhi.n	800e4ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e4ca:	4a72      	ldr	r2, [pc, #456]	; (800e694 <HAL_SPI_Init+0x23c>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d009      	beq.n	800e4e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a70      	ldr	r2, [pc, #448]	; (800e698 <HAL_SPI_Init+0x240>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d004      	beq.n	800e4e4 <HAL_SPI_Init+0x8c>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a6f      	ldr	r2, [pc, #444]	; (800e69c <HAL_SPI_Init+0x244>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d104      	bne.n	800e4ee <HAL_SPI_Init+0x96>
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2b10      	cmp	r3, #16
 800e4e8:	d901      	bls.n	800e4ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e0cd      	b.n	800e68a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d106      	bne.n	800e508 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7f4 fca0 	bl	8002e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2202      	movs	r2, #2
 800e50c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f022 0201 	bic.w	r2, r2, #1
 800e51e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e52a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	699b      	ldr	r3, [r3, #24]
 800e530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e534:	d119      	bne.n	800e56a <HAL_SPI_Init+0x112>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e53e:	d103      	bne.n	800e548 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e544:	2b00      	cmp	r3, #0
 800e546:	d008      	beq.n	800e55a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10c      	bne.n	800e56a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e558:	d107      	bne.n	800e56a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e568:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00f      	beq.n	800e596 <HAL_SPI_Init+0x13e>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	2b06      	cmp	r3, #6
 800e57c:	d90b      	bls.n	800e596 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	430a      	orrs	r2, r1
 800e592:	601a      	str	r2, [r3, #0]
 800e594:	e007      	b.n	800e5a6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e5a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	69da      	ldr	r2, [r3, #28]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ae:	431a      	orrs	r2, r3
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	431a      	orrs	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5b8:	ea42 0103 	orr.w	r1, r2, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	68da      	ldr	r2, [r3, #12]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	430a      	orrs	r2, r1
 800e5c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d0:	431a      	orrs	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d6:	431a      	orrs	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	699b      	ldr	r3, [r3, #24]
 800e5dc:	431a      	orrs	r2, r3
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	691b      	ldr	r3, [r3, #16]
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	695b      	ldr	r3, [r3, #20]
 800e5e8:	431a      	orrs	r2, r3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6a1b      	ldr	r3, [r3, #32]
 800e5ee:	431a      	orrs	r2, r3
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	431a      	orrs	r2, r3
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5fa:	431a      	orrs	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	431a      	orrs	r2, r3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e606:	ea42 0103 	orr.w	r1, r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	430a      	orrs	r2, r1
 800e614:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d113      	bne.n	800e646 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e630:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e644:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f022 0201 	bic.w	r2, r2, #1
 800e654:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00a      	beq.n	800e678 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	430a      	orrs	r2, r1
 800e676:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2200      	movs	r2, #0
 800e67c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2201      	movs	r2, #1
 800e684:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	40013000 	.word	0x40013000
 800e698:	40003800 	.word	0x40003800
 800e69c:	40003c00 	.word	0x40003c00

0800e6a0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	603b      	str	r3, [r7, #0]
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6b4:	095b      	lsrs	r3, r3, #5
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	3330      	adds	r3, #48	; 0x30
 800e6c2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6c4:	f7f5 feac 	bl	8004420 <HAL_GetTick>
 800e6c8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d001      	beq.n	800e6da <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e6d6:	2302      	movs	r3, #2
 800e6d8:	e250      	b.n	800eb7c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <HAL_SPI_Receive+0x46>
 800e6e0:	88fb      	ldrh	r3, [r7, #6]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d101      	bne.n	800e6ea <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e248      	b.n	800eb7c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d101      	bne.n	800e6f8 <HAL_SPI_Receive+0x58>
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	e241      	b.n	800eb7c <HAL_SPI_Receive+0x4dc>
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2204      	movs	r2, #4
 800e704:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	68ba      	ldr	r2, [r7, #8]
 800e714:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	88fa      	ldrh	r2, [r7, #6]
 800e71a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	88fa      	ldrh	r2, [r7, #6]
 800e722:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2200      	movs	r2, #0
 800e72a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2200      	movs	r2, #0
 800e730:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2200      	movs	r2, #0
 800e738:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2200      	movs	r2, #0
 800e740:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	689b      	ldr	r3, [r3, #8]
 800e74c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e750:	d108      	bne.n	800e764 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e760:	601a      	str	r2, [r3, #0]
 800e762:	e009      	b.n	800e778 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e776:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	685a      	ldr	r2, [r3, #4]
 800e77e:	4b95      	ldr	r3, [pc, #596]	; (800e9d4 <HAL_SPI_Receive+0x334>)
 800e780:	4013      	ands	r3, r2
 800e782:	88f9      	ldrh	r1, [r7, #6]
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	6812      	ldr	r2, [r2, #0]
 800e788:	430b      	orrs	r3, r1
 800e78a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f042 0201 	orr.w	r2, r2, #1
 800e79a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e7a4:	d107      	bne.n	800e7b6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	2b0f      	cmp	r3, #15
 800e7bc:	d96c      	bls.n	800e898 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e7be:	e064      	b.n	800e88a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	695b      	ldr	r3, [r3, #20]
 800e7c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	695b      	ldr	r3, [r3, #20]
 800e7ce:	f003 0301 	and.w	r3, r3, #1
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d114      	bne.n	800e800 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e7e0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7e6:	1d1a      	adds	r2, r3, #4
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7fe:	e044      	b.n	800e88a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e806:	b29b      	uxth	r3, r3
 800e808:	8bfa      	ldrh	r2, [r7, #30]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d919      	bls.n	800e842 <HAL_SPI_Receive+0x1a2>
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e814:	2b00      	cmp	r3, #0
 800e816:	d014      	beq.n	800e842 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e820:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e822:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e828:	1d1a      	adds	r2, r3, #4
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e834:	b29b      	uxth	r3, r3
 800e836:	3b01      	subs	r3, #1
 800e838:	b29a      	uxth	r2, r3
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e840:	e023      	b.n	800e88a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e842:	f7f5 fded 	bl	8004420 <HAL_GetTick>
 800e846:	4602      	mov	r2, r0
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	683a      	ldr	r2, [r7, #0]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d803      	bhi.n	800e85a <HAL_SPI_Receive+0x1ba>
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e858:	d102      	bne.n	800e860 <HAL_SPI_Receive+0x1c0>
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d114      	bne.n	800e88a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f000 f98f 	bl	800eb84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e86c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2201      	movs	r2, #1
 800e87a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2200      	movs	r2, #0
 800e882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e886:	2303      	movs	r3, #3
 800e888:	e178      	b.n	800eb7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e890:	b29b      	uxth	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d194      	bne.n	800e7c0 <HAL_SPI_Receive+0x120>
 800e896:	e15e      	b.n	800eb56 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	2b07      	cmp	r3, #7
 800e89e:	f240 8153 	bls.w	800eb48 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e8a2:	e08f      	b.n	800e9c4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	695b      	ldr	r3, [r3, #20]
 800e8aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	695b      	ldr	r3, [r3, #20]
 800e8b2:	f003 0301 	and.w	r3, r3, #1
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d114      	bne.n	800e8e4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8be:	69ba      	ldr	r2, [r7, #24]
 800e8c0:	8812      	ldrh	r2, [r2, #0]
 800e8c2:	b292      	uxth	r2, r2
 800e8c4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8ca:	1c9a      	adds	r2, r3, #2
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	b29a      	uxth	r2, r3
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e8e2:	e06f      	b.n	800e9c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	8bfa      	ldrh	r2, [r7, #30]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d924      	bls.n	800e93c <HAL_SPI_Receive+0x29c>
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d01f      	beq.n	800e93c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e900:	69ba      	ldr	r2, [r7, #24]
 800e902:	8812      	ldrh	r2, [r2, #0]
 800e904:	b292      	uxth	r2, r2
 800e906:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e90c:	1c9a      	adds	r2, r3, #2
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e916:	69ba      	ldr	r2, [r7, #24]
 800e918:	8812      	ldrh	r2, [r2, #0]
 800e91a:	b292      	uxth	r2, r2
 800e91c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e922:	1c9a      	adds	r2, r3, #2
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e92e:	b29b      	uxth	r3, r3
 800e930:	3b02      	subs	r3, #2
 800e932:	b29a      	uxth	r2, r3
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e93a:	e043      	b.n	800e9c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e942:	b29b      	uxth	r3, r3
 800e944:	2b01      	cmp	r3, #1
 800e946:	d119      	bne.n	800e97c <HAL_SPI_Receive+0x2dc>
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d014      	beq.n	800e97c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e956:	69ba      	ldr	r2, [r7, #24]
 800e958:	8812      	ldrh	r2, [r2, #0]
 800e95a:	b292      	uxth	r2, r2
 800e95c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e962:	1c9a      	adds	r2, r3, #2
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e96e:	b29b      	uxth	r3, r3
 800e970:	3b01      	subs	r3, #1
 800e972:	b29a      	uxth	r2, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e97a:	e023      	b.n	800e9c4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e97c:	f7f5 fd50 	bl	8004420 <HAL_GetTick>
 800e980:	4602      	mov	r2, r0
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	683a      	ldr	r2, [r7, #0]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d803      	bhi.n	800e994 <HAL_SPI_Receive+0x2f4>
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e992:	d102      	bne.n	800e99a <HAL_SPI_Receive+0x2fa>
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d114      	bne.n	800e9c4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f000 f8f2 	bl	800eb84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e9c0:	2303      	movs	r3, #3
 800e9c2:	e0db      	b.n	800eb7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	f47f af69 	bne.w	800e8a4 <HAL_SPI_Receive+0x204>
 800e9d2:	e0c0      	b.n	800eb56 <HAL_SPI_Receive+0x4b6>
 800e9d4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	695b      	ldr	r3, [r3, #20]
 800e9de:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	695b      	ldr	r3, [r3, #20]
 800e9e6:	f003 0301 	and.w	r3, r3, #1
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d117      	bne.n	800ea1e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9fa:	7812      	ldrb	r2, [r2, #0]
 800e9fc:	b2d2      	uxtb	r2, r2
 800e9fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea04:	1c5a      	adds	r2, r3, #1
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	3b01      	subs	r3, #1
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ea1c:	e094      	b.n	800eb48 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	8bfa      	ldrh	r2, [r7, #30]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d946      	bls.n	800eaba <HAL_SPI_Receive+0x41a>
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d041      	beq.n	800eaba <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea42:	7812      	ldrb	r2, [r2, #0]
 800ea44:	b2d2      	uxtb	r2, r2
 800ea46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea4c:	1c5a      	adds	r2, r3, #1
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea5e:	7812      	ldrb	r2, [r2, #0]
 800ea60:	b2d2      	uxtb	r2, r2
 800ea62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea68:	1c5a      	adds	r2, r3, #1
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea7a:	7812      	ldrb	r2, [r2, #0]
 800ea7c:	b2d2      	uxtb	r2, r2
 800ea7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea84:	1c5a      	adds	r2, r3, #1
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea96:	7812      	ldrb	r2, [r2, #0]
 800ea98:	b2d2      	uxtb	r2, r2
 800ea9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eaa0:	1c5a      	adds	r2, r3, #1
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	3b04      	subs	r3, #4
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eab8:	e046      	b.n	800eb48 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	2b03      	cmp	r3, #3
 800eac4:	d81c      	bhi.n	800eb00 <HAL_SPI_Receive+0x460>
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d017      	beq.n	800eb00 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eadc:	7812      	ldrb	r2, [r2, #0]
 800eade:	b2d2      	uxtb	r2, r2
 800eae0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eae6:	1c5a      	adds	r2, r3, #1
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	3b01      	subs	r3, #1
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eafe:	e023      	b.n	800eb48 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb00:	f7f5 fc8e 	bl	8004420 <HAL_GetTick>
 800eb04:	4602      	mov	r2, r0
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	1ad3      	subs	r3, r2, r3
 800eb0a:	683a      	ldr	r2, [r7, #0]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d803      	bhi.n	800eb18 <HAL_SPI_Receive+0x478>
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb16:	d102      	bne.n	800eb1e <HAL_SPI_Receive+0x47e>
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d114      	bne.n	800eb48 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f000 f830 	bl	800eb84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2201      	movs	r2, #1
 800eb38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eb44:	2303      	movs	r3, #3
 800eb46:	e019      	b.n	800eb7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f47f af41 	bne.w	800e9d8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f000 f814 	bl	800eb84 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800eb76:	2301      	movs	r3, #1
 800eb78:	e000      	b.n	800eb7c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800eb7a:	2300      	movs	r3, #0
  }
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3720      	adds	r7, #32
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	695b      	ldr	r3, [r3, #20]
 800eb92:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	699a      	ldr	r2, [r3, #24]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f042 0208 	orr.w	r2, r2, #8
 800eba2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	699a      	ldr	r2, [r3, #24]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f042 0210 	orr.w	r2, r2, #16
 800ebb2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f022 0201 	bic.w	r2, r2, #1
 800ebc2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	6919      	ldr	r1, [r3, #16]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681a      	ldr	r2, [r3, #0]
 800ebce:	4b3c      	ldr	r3, [pc, #240]	; (800ecc0 <SPI_CloseTransfer+0x13c>)
 800ebd0:	400b      	ands	r3, r1
 800ebd2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	689a      	ldr	r2, [r3, #8]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ebe2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	2b04      	cmp	r3, #4
 800ebee:	d014      	beq.n	800ec1a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f003 0320 	and.w	r3, r3, #32
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d00f      	beq.n	800ec1a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	699a      	ldr	r2, [r3, #24]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f042 0220 	orr.w	r2, r2, #32
 800ec18:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	2b03      	cmp	r3, #3
 800ec24:	d014      	beq.n	800ec50 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00f      	beq.n	800ec50 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec36:	f043 0204 	orr.w	r2, r3, #4
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	699a      	ldr	r2, [r3, #24]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec4e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00f      	beq.n	800ec7a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec60:	f043 0201 	orr.w	r2, r3, #1
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	699a      	ldr	r2, [r3, #24]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec78:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d00f      	beq.n	800eca4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec8a:	f043 0208 	orr.w	r2, r3, #8
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	699a      	ldr	r2, [r3, #24]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eca2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ecb4:	bf00      	nop
 800ecb6:	3714      	adds	r7, #20
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr
 800ecc0:	fffffc90 	.word	0xfffffc90

0800ecc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecd0:	095b      	lsrs	r3, r3, #5
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	3307      	adds	r3, #7
 800ece2:	08db      	lsrs	r3, r3, #3
 800ece4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	fb02 f303 	mul.w	r3, r2, r3
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3714      	adds	r7, #20
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr

0800ecfa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b082      	sub	sp, #8
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d101      	bne.n	800ed0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e049      	b.n	800eda0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d106      	bne.n	800ed26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7f4 fd2f 	bl	8003784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2202      	movs	r2, #2
 800ed2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	3304      	adds	r3, #4
 800ed36:	4619      	mov	r1, r3
 800ed38:	4610      	mov	r0, r2
 800ed3a:	f000 fe7d 	bl	800fa38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2201      	movs	r2, #1
 800ed42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2201      	movs	r2, #1
 800ed52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2201      	movs	r2, #1
 800ed5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2201      	movs	r2, #1
 800ed62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2201      	movs	r2, #1
 800ed6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2201      	movs	r2, #1
 800ed72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2201      	movs	r2, #1
 800ed7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2201      	movs	r2, #1
 800ed82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2201      	movs	r2, #1
 800ed92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b085      	sub	sp, #20
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d001      	beq.n	800edc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800edbc:	2301      	movs	r3, #1
 800edbe:	e054      	b.n	800ee6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2202      	movs	r2, #2
 800edc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68da      	ldr	r2, [r3, #12]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f042 0201 	orr.w	r2, r2, #1
 800edd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4a26      	ldr	r2, [pc, #152]	; (800ee78 <HAL_TIM_Base_Start_IT+0xd0>)
 800edde:	4293      	cmp	r3, r2
 800ede0:	d022      	beq.n	800ee28 <HAL_TIM_Base_Start_IT+0x80>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edea:	d01d      	beq.n	800ee28 <HAL_TIM_Base_Start_IT+0x80>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a22      	ldr	r2, [pc, #136]	; (800ee7c <HAL_TIM_Base_Start_IT+0xd4>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d018      	beq.n	800ee28 <HAL_TIM_Base_Start_IT+0x80>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a21      	ldr	r2, [pc, #132]	; (800ee80 <HAL_TIM_Base_Start_IT+0xd8>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d013      	beq.n	800ee28 <HAL_TIM_Base_Start_IT+0x80>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a1f      	ldr	r2, [pc, #124]	; (800ee84 <HAL_TIM_Base_Start_IT+0xdc>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d00e      	beq.n	800ee28 <HAL_TIM_Base_Start_IT+0x80>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4a1e      	ldr	r2, [pc, #120]	; (800ee88 <HAL_TIM_Base_Start_IT+0xe0>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d009      	beq.n	800ee28 <HAL_TIM_Base_Start_IT+0x80>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a1c      	ldr	r2, [pc, #112]	; (800ee8c <HAL_TIM_Base_Start_IT+0xe4>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d004      	beq.n	800ee28 <HAL_TIM_Base_Start_IT+0x80>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4a1b      	ldr	r2, [pc, #108]	; (800ee90 <HAL_TIM_Base_Start_IT+0xe8>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d115      	bne.n	800ee54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	689a      	ldr	r2, [r3, #8]
 800ee2e:	4b19      	ldr	r3, [pc, #100]	; (800ee94 <HAL_TIM_Base_Start_IT+0xec>)
 800ee30:	4013      	ands	r3, r2
 800ee32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2b06      	cmp	r3, #6
 800ee38:	d015      	beq.n	800ee66 <HAL_TIM_Base_Start_IT+0xbe>
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee40:	d011      	beq.n	800ee66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f042 0201 	orr.w	r2, r2, #1
 800ee50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee52:	e008      	b.n	800ee66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f042 0201 	orr.w	r2, r2, #1
 800ee62:	601a      	str	r2, [r3, #0]
 800ee64:	e000      	b.n	800ee68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3714      	adds	r7, #20
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop
 800ee78:	40010000 	.word	0x40010000
 800ee7c:	40000400 	.word	0x40000400
 800ee80:	40000800 	.word	0x40000800
 800ee84:	40000c00 	.word	0x40000c00
 800ee88:	40010400 	.word	0x40010400
 800ee8c:	40001800 	.word	0x40001800
 800ee90:	40014000 	.word	0x40014000
 800ee94:	00010007 	.word	0x00010007

0800ee98 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eea2:	2300      	movs	r3, #0
 800eea4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d109      	bne.n	800eec0 <HAL_TIM_OC_Start_IT+0x28>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	bf14      	ite	ne
 800eeb8:	2301      	movne	r3, #1
 800eeba:	2300      	moveq	r3, #0
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	e03c      	b.n	800ef3a <HAL_TIM_OC_Start_IT+0xa2>
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	2b04      	cmp	r3, #4
 800eec4:	d109      	bne.n	800eeda <HAL_TIM_OC_Start_IT+0x42>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	2b01      	cmp	r3, #1
 800eed0:	bf14      	ite	ne
 800eed2:	2301      	movne	r3, #1
 800eed4:	2300      	moveq	r3, #0
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	e02f      	b.n	800ef3a <HAL_TIM_OC_Start_IT+0xa2>
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	2b08      	cmp	r3, #8
 800eede:	d109      	bne.n	800eef4 <HAL_TIM_OC_Start_IT+0x5c>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	bf14      	ite	ne
 800eeec:	2301      	movne	r3, #1
 800eeee:	2300      	moveq	r3, #0
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	e022      	b.n	800ef3a <HAL_TIM_OC_Start_IT+0xa2>
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	2b0c      	cmp	r3, #12
 800eef8:	d109      	bne.n	800ef0e <HAL_TIM_OC_Start_IT+0x76>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	bf14      	ite	ne
 800ef06:	2301      	movne	r3, #1
 800ef08:	2300      	moveq	r3, #0
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	e015      	b.n	800ef3a <HAL_TIM_OC_Start_IT+0xa2>
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	2b10      	cmp	r3, #16
 800ef12:	d109      	bne.n	800ef28 <HAL_TIM_OC_Start_IT+0x90>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	bf14      	ite	ne
 800ef20:	2301      	movne	r3, #1
 800ef22:	2300      	moveq	r3, #0
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	e008      	b.n	800ef3a <HAL_TIM_OC_Start_IT+0xa2>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	bf14      	ite	ne
 800ef34:	2301      	movne	r3, #1
 800ef36:	2300      	moveq	r3, #0
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d001      	beq.n	800ef42 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e0ec      	b.n	800f11c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d104      	bne.n	800ef52 <HAL_TIM_OC_Start_IT+0xba>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2202      	movs	r2, #2
 800ef4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef50:	e023      	b.n	800ef9a <HAL_TIM_OC_Start_IT+0x102>
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	2b04      	cmp	r3, #4
 800ef56:	d104      	bne.n	800ef62 <HAL_TIM_OC_Start_IT+0xca>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef60:	e01b      	b.n	800ef9a <HAL_TIM_OC_Start_IT+0x102>
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	2b08      	cmp	r3, #8
 800ef66:	d104      	bne.n	800ef72 <HAL_TIM_OC_Start_IT+0xda>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef70:	e013      	b.n	800ef9a <HAL_TIM_OC_Start_IT+0x102>
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	2b0c      	cmp	r3, #12
 800ef76:	d104      	bne.n	800ef82 <HAL_TIM_OC_Start_IT+0xea>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2202      	movs	r2, #2
 800ef7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef80:	e00b      	b.n	800ef9a <HAL_TIM_OC_Start_IT+0x102>
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	2b10      	cmp	r3, #16
 800ef86:	d104      	bne.n	800ef92 <HAL_TIM_OC_Start_IT+0xfa>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2202      	movs	r2, #2
 800ef8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef90:	e003      	b.n	800ef9a <HAL_TIM_OC_Start_IT+0x102>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2202      	movs	r2, #2
 800ef96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	2b0c      	cmp	r3, #12
 800ef9e:	d841      	bhi.n	800f024 <HAL_TIM_OC_Start_IT+0x18c>
 800efa0:	a201      	add	r2, pc, #4	; (adr r2, 800efa8 <HAL_TIM_OC_Start_IT+0x110>)
 800efa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa6:	bf00      	nop
 800efa8:	0800efdd 	.word	0x0800efdd
 800efac:	0800f025 	.word	0x0800f025
 800efb0:	0800f025 	.word	0x0800f025
 800efb4:	0800f025 	.word	0x0800f025
 800efb8:	0800efef 	.word	0x0800efef
 800efbc:	0800f025 	.word	0x0800f025
 800efc0:	0800f025 	.word	0x0800f025
 800efc4:	0800f025 	.word	0x0800f025
 800efc8:	0800f001 	.word	0x0800f001
 800efcc:	0800f025 	.word	0x0800f025
 800efd0:	0800f025 	.word	0x0800f025
 800efd4:	0800f025 	.word	0x0800f025
 800efd8:	0800f013 	.word	0x0800f013
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68da      	ldr	r2, [r3, #12]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f042 0202 	orr.w	r2, r2, #2
 800efea:	60da      	str	r2, [r3, #12]
      break;
 800efec:	e01d      	b.n	800f02a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68da      	ldr	r2, [r3, #12]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f042 0204 	orr.w	r2, r2, #4
 800effc:	60da      	str	r2, [r3, #12]
      break;
 800effe:	e014      	b.n	800f02a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68da      	ldr	r2, [r3, #12]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f042 0208 	orr.w	r2, r2, #8
 800f00e:	60da      	str	r2, [r3, #12]
      break;
 800f010:	e00b      	b.n	800f02a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	68da      	ldr	r2, [r3, #12]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f042 0210 	orr.w	r2, r2, #16
 800f020:	60da      	str	r2, [r3, #12]
      break;
 800f022:	e002      	b.n	800f02a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800f024:	2301      	movs	r3, #1
 800f026:	73fb      	strb	r3, [r7, #15]
      break;
 800f028:	bf00      	nop
  }

  if (status == HAL_OK)
 800f02a:	7bfb      	ldrb	r3, [r7, #15]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d174      	bne.n	800f11a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2201      	movs	r2, #1
 800f036:	6839      	ldr	r1, [r7, #0]
 800f038:	4618      	mov	r0, r3
 800f03a:	f001 f917 	bl	801026c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4a38      	ldr	r2, [pc, #224]	; (800f124 <HAL_TIM_OC_Start_IT+0x28c>)
 800f044:	4293      	cmp	r3, r2
 800f046:	d013      	beq.n	800f070 <HAL_TIM_OC_Start_IT+0x1d8>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4a36      	ldr	r2, [pc, #216]	; (800f128 <HAL_TIM_OC_Start_IT+0x290>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d00e      	beq.n	800f070 <HAL_TIM_OC_Start_IT+0x1d8>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	4a35      	ldr	r2, [pc, #212]	; (800f12c <HAL_TIM_OC_Start_IT+0x294>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d009      	beq.n	800f070 <HAL_TIM_OC_Start_IT+0x1d8>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a33      	ldr	r2, [pc, #204]	; (800f130 <HAL_TIM_OC_Start_IT+0x298>)
 800f062:	4293      	cmp	r3, r2
 800f064:	d004      	beq.n	800f070 <HAL_TIM_OC_Start_IT+0x1d8>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4a32      	ldr	r2, [pc, #200]	; (800f134 <HAL_TIM_OC_Start_IT+0x29c>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d101      	bne.n	800f074 <HAL_TIM_OC_Start_IT+0x1dc>
 800f070:	2301      	movs	r3, #1
 800f072:	e000      	b.n	800f076 <HAL_TIM_OC_Start_IT+0x1de>
 800f074:	2300      	movs	r3, #0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d007      	beq.n	800f08a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f088:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	4a25      	ldr	r2, [pc, #148]	; (800f124 <HAL_TIM_OC_Start_IT+0x28c>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d022      	beq.n	800f0da <HAL_TIM_OC_Start_IT+0x242>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f09c:	d01d      	beq.n	800f0da <HAL_TIM_OC_Start_IT+0x242>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4a25      	ldr	r2, [pc, #148]	; (800f138 <HAL_TIM_OC_Start_IT+0x2a0>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d018      	beq.n	800f0da <HAL_TIM_OC_Start_IT+0x242>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a23      	ldr	r2, [pc, #140]	; (800f13c <HAL_TIM_OC_Start_IT+0x2a4>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d013      	beq.n	800f0da <HAL_TIM_OC_Start_IT+0x242>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4a22      	ldr	r2, [pc, #136]	; (800f140 <HAL_TIM_OC_Start_IT+0x2a8>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d00e      	beq.n	800f0da <HAL_TIM_OC_Start_IT+0x242>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4a19      	ldr	r2, [pc, #100]	; (800f128 <HAL_TIM_OC_Start_IT+0x290>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d009      	beq.n	800f0da <HAL_TIM_OC_Start_IT+0x242>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a1e      	ldr	r2, [pc, #120]	; (800f144 <HAL_TIM_OC_Start_IT+0x2ac>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d004      	beq.n	800f0da <HAL_TIM_OC_Start_IT+0x242>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a15      	ldr	r2, [pc, #84]	; (800f12c <HAL_TIM_OC_Start_IT+0x294>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d115      	bne.n	800f106 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	689a      	ldr	r2, [r3, #8]
 800f0e0:	4b19      	ldr	r3, [pc, #100]	; (800f148 <HAL_TIM_OC_Start_IT+0x2b0>)
 800f0e2:	4013      	ands	r3, r2
 800f0e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	2b06      	cmp	r3, #6
 800f0ea:	d015      	beq.n	800f118 <HAL_TIM_OC_Start_IT+0x280>
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0f2:	d011      	beq.n	800f118 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f042 0201 	orr.w	r2, r2, #1
 800f102:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f104:	e008      	b.n	800f118 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f042 0201 	orr.w	r2, r2, #1
 800f114:	601a      	str	r2, [r3, #0]
 800f116:	e000      	b.n	800f11a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f118:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3710      	adds	r7, #16
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	40010000 	.word	0x40010000
 800f128:	40010400 	.word	0x40010400
 800f12c:	40014000 	.word	0x40014000
 800f130:	40014400 	.word	0x40014400
 800f134:	40014800 	.word	0x40014800
 800f138:	40000400 	.word	0x40000400
 800f13c:	40000800 	.word	0x40000800
 800f140:	40000c00 	.word	0x40000c00
 800f144:	40001800 	.word	0x40001800
 800f148:	00010007 	.word	0x00010007

0800f14c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f156:	2300      	movs	r3, #0
 800f158:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	2b0c      	cmp	r3, #12
 800f15e:	d841      	bhi.n	800f1e4 <HAL_TIM_OC_Stop_IT+0x98>
 800f160:	a201      	add	r2, pc, #4	; (adr r2, 800f168 <HAL_TIM_OC_Stop_IT+0x1c>)
 800f162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f166:	bf00      	nop
 800f168:	0800f19d 	.word	0x0800f19d
 800f16c:	0800f1e5 	.word	0x0800f1e5
 800f170:	0800f1e5 	.word	0x0800f1e5
 800f174:	0800f1e5 	.word	0x0800f1e5
 800f178:	0800f1af 	.word	0x0800f1af
 800f17c:	0800f1e5 	.word	0x0800f1e5
 800f180:	0800f1e5 	.word	0x0800f1e5
 800f184:	0800f1e5 	.word	0x0800f1e5
 800f188:	0800f1c1 	.word	0x0800f1c1
 800f18c:	0800f1e5 	.word	0x0800f1e5
 800f190:	0800f1e5 	.word	0x0800f1e5
 800f194:	0800f1e5 	.word	0x0800f1e5
 800f198:	0800f1d3 	.word	0x0800f1d3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	68da      	ldr	r2, [r3, #12]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f022 0202 	bic.w	r2, r2, #2
 800f1aa:	60da      	str	r2, [r3, #12]
      break;
 800f1ac:	e01d      	b.n	800f1ea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68da      	ldr	r2, [r3, #12]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f022 0204 	bic.w	r2, r2, #4
 800f1bc:	60da      	str	r2, [r3, #12]
      break;
 800f1be:	e014      	b.n	800f1ea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	68da      	ldr	r2, [r3, #12]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f022 0208 	bic.w	r2, r2, #8
 800f1ce:	60da      	str	r2, [r3, #12]
      break;
 800f1d0:	e00b      	b.n	800f1ea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68da      	ldr	r2, [r3, #12]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f022 0210 	bic.w	r2, r2, #16
 800f1e0:	60da      	str	r2, [r3, #12]
      break;
 800f1e2:	e002      	b.n	800f1ea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	73fb      	strb	r3, [r7, #15]
      break;
 800f1e8:	bf00      	nop
  }

  if (status == HAL_OK)
 800f1ea:	7bfb      	ldrb	r3, [r7, #15]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	f040 8081 	bne.w	800f2f4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	6839      	ldr	r1, [r7, #0]
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f001 f836 	bl	801026c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a3e      	ldr	r2, [pc, #248]	; (800f300 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d013      	beq.n	800f232 <HAL_TIM_OC_Stop_IT+0xe6>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	4a3d      	ldr	r2, [pc, #244]	; (800f304 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d00e      	beq.n	800f232 <HAL_TIM_OC_Stop_IT+0xe6>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4a3b      	ldr	r2, [pc, #236]	; (800f308 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d009      	beq.n	800f232 <HAL_TIM_OC_Stop_IT+0xe6>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4a3a      	ldr	r2, [pc, #232]	; (800f30c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d004      	beq.n	800f232 <HAL_TIM_OC_Stop_IT+0xe6>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4a38      	ldr	r2, [pc, #224]	; (800f310 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d101      	bne.n	800f236 <HAL_TIM_OC_Stop_IT+0xea>
 800f232:	2301      	movs	r3, #1
 800f234:	e000      	b.n	800f238 <HAL_TIM_OC_Stop_IT+0xec>
 800f236:	2300      	movs	r3, #0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d017      	beq.n	800f26c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6a1a      	ldr	r2, [r3, #32]
 800f242:	f241 1311 	movw	r3, #4369	; 0x1111
 800f246:	4013      	ands	r3, r2
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d10f      	bne.n	800f26c <HAL_TIM_OC_Stop_IT+0x120>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	6a1a      	ldr	r2, [r3, #32]
 800f252:	f240 4344 	movw	r3, #1092	; 0x444
 800f256:	4013      	ands	r3, r2
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d107      	bne.n	800f26c <HAL_TIM_OC_Stop_IT+0x120>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f26a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6a1a      	ldr	r2, [r3, #32]
 800f272:	f241 1311 	movw	r3, #4369	; 0x1111
 800f276:	4013      	ands	r3, r2
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d10f      	bne.n	800f29c <HAL_TIM_OC_Stop_IT+0x150>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	6a1a      	ldr	r2, [r3, #32]
 800f282:	f240 4344 	movw	r3, #1092	; 0x444
 800f286:	4013      	ands	r3, r2
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d107      	bne.n	800f29c <HAL_TIM_OC_Stop_IT+0x150>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f022 0201 	bic.w	r2, r2, #1
 800f29a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d104      	bne.n	800f2ac <HAL_TIM_OC_Stop_IT+0x160>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f2aa:	e023      	b.n	800f2f4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	2b04      	cmp	r3, #4
 800f2b0:	d104      	bne.n	800f2bc <HAL_TIM_OC_Stop_IT+0x170>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f2ba:	e01b      	b.n	800f2f4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	2b08      	cmp	r3, #8
 800f2c0:	d104      	bne.n	800f2cc <HAL_TIM_OC_Stop_IT+0x180>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2ca:	e013      	b.n	800f2f4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	2b0c      	cmp	r3, #12
 800f2d0:	d104      	bne.n	800f2dc <HAL_TIM_OC_Stop_IT+0x190>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f2da:	e00b      	b.n	800f2f4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	2b10      	cmp	r3, #16
 800f2e0:	d104      	bne.n	800f2ec <HAL_TIM_OC_Stop_IT+0x1a0>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f2ea:	e003      	b.n	800f2f4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800f2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	40010000 	.word	0x40010000
 800f304:	40010400 	.word	0x40010400
 800f308:	40014000 	.word	0x40014000
 800f30c:	40014400 	.word	0x40014400
 800f310:	40014800 	.word	0x40014800

0800f314 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d101      	bne.n	800f326 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f322:	2301      	movs	r3, #1
 800f324:	e049      	b.n	800f3ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d106      	bne.n	800f340 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2200      	movs	r2, #0
 800f336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 f841 	bl	800f3c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2202      	movs	r2, #2
 800f344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	3304      	adds	r3, #4
 800f350:	4619      	mov	r1, r3
 800f352:	4610      	mov	r0, r2
 800f354:	f000 fb70 	bl	800fa38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2201      	movs	r2, #1
 800f35c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2201      	movs	r2, #1
 800f36c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2201      	movs	r2, #1
 800f374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2201      	movs	r2, #1
 800f37c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2201      	movs	r2, #1
 800f384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2201      	movs	r2, #1
 800f394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2201      	movs	r2, #1
 800f39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f3b8:	2300      	movs	r3, #0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3708      	adds	r7, #8
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f3c2:	b480      	push	{r7}
 800f3c4:	b083      	sub	sp, #12
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f3ca:	bf00      	nop
 800f3cc:	370c      	adds	r7, #12
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr

0800f3d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b084      	sub	sp, #16
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	691b      	ldr	r3, [r3, #16]
 800f3ec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	f003 0302 	and.w	r3, r3, #2
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d020      	beq.n	800f43a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f003 0302 	and.w	r3, r3, #2
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d01b      	beq.n	800f43a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f06f 0202 	mvn.w	r2, #2
 800f40a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2201      	movs	r2, #1
 800f410:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	699b      	ldr	r3, [r3, #24]
 800f418:	f003 0303 	and.w	r3, r3, #3
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d003      	beq.n	800f428 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 faeb 	bl	800f9fc <HAL_TIM_IC_CaptureCallback>
 800f426:	e005      	b.n	800f434 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f7f2 f8af 	bl	800158c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 faee 	bl	800fa10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	f003 0304 	and.w	r3, r3, #4
 800f440:	2b00      	cmp	r3, #0
 800f442:	d020      	beq.n	800f486 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f003 0304 	and.w	r3, r3, #4
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d01b      	beq.n	800f486 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f06f 0204 	mvn.w	r2, #4
 800f456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2202      	movs	r2, #2
 800f45c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	699b      	ldr	r3, [r3, #24]
 800f464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d003      	beq.n	800f474 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 fac5 	bl	800f9fc <HAL_TIM_IC_CaptureCallback>
 800f472:	e005      	b.n	800f480 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7f2 f889 	bl	800158c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 fac8 	bl	800fa10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	f003 0308 	and.w	r3, r3, #8
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d020      	beq.n	800f4d2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f003 0308 	and.w	r3, r3, #8
 800f496:	2b00      	cmp	r3, #0
 800f498:	d01b      	beq.n	800f4d2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f06f 0208 	mvn.w	r2, #8
 800f4a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2204      	movs	r2, #4
 800f4a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	69db      	ldr	r3, [r3, #28]
 800f4b0:	f003 0303 	and.w	r3, r3, #3
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d003      	beq.n	800f4c0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 fa9f 	bl	800f9fc <HAL_TIM_IC_CaptureCallback>
 800f4be:	e005      	b.n	800f4cc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7f2 f863 	bl	800158c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 faa2 	bl	800fa10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	f003 0310 	and.w	r3, r3, #16
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d020      	beq.n	800f51e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f003 0310 	and.w	r3, r3, #16
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d01b      	beq.n	800f51e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f06f 0210 	mvn.w	r2, #16
 800f4ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2208      	movs	r2, #8
 800f4f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	69db      	ldr	r3, [r3, #28]
 800f4fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f500:	2b00      	cmp	r3, #0
 800f502:	d003      	beq.n	800f50c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 fa79 	bl	800f9fc <HAL_TIM_IC_CaptureCallback>
 800f50a:	e005      	b.n	800f518 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7f2 f83d 	bl	800158c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 fa7c 	bl	800fa10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2200      	movs	r2, #0
 800f51c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	f003 0301 	and.w	r3, r3, #1
 800f524:	2b00      	cmp	r3, #0
 800f526:	d00c      	beq.n	800f542 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f003 0301 	and.w	r3, r3, #1
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d007      	beq.n	800f542 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f06f 0201 	mvn.w	r2, #1
 800f53a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7f2 fea9 	bl	8002294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d104      	bne.n	800f556 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00c      	beq.n	800f570 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d007      	beq.n	800f570 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 ffba 	bl	80104e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00c      	beq.n	800f594 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f580:	2b00      	cmp	r3, #0
 800f582:	d007      	beq.n	800f594 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f58c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 ffb2 	bl	80104f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00c      	beq.n	800f5b8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d007      	beq.n	800f5b8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f5b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fa36 	bl	800fa24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	f003 0320 	and.w	r3, r3, #32
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d00c      	beq.n	800f5dc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f003 0320 	and.w	r3, r3, #32
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d007      	beq.n	800f5dc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f06f 0220 	mvn.w	r2, #32
 800f5d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 ff7a 	bl	80104d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f5dc:	bf00      	nop
 800f5de:	3710      	adds	r7, #16
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b086      	sub	sp, #24
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	60f8      	str	r0, [r7, #12]
 800f5ec:	60b9      	str	r1, [r7, #8]
 800f5ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d101      	bne.n	800f602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f5fe:	2302      	movs	r3, #2
 800f600:	e0ff      	b.n	800f802 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2201      	movs	r2, #1
 800f606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2b14      	cmp	r3, #20
 800f60e:	f200 80f0 	bhi.w	800f7f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f612:	a201      	add	r2, pc, #4	; (adr r2, 800f618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f618:	0800f66d 	.word	0x0800f66d
 800f61c:	0800f7f3 	.word	0x0800f7f3
 800f620:	0800f7f3 	.word	0x0800f7f3
 800f624:	0800f7f3 	.word	0x0800f7f3
 800f628:	0800f6ad 	.word	0x0800f6ad
 800f62c:	0800f7f3 	.word	0x0800f7f3
 800f630:	0800f7f3 	.word	0x0800f7f3
 800f634:	0800f7f3 	.word	0x0800f7f3
 800f638:	0800f6ef 	.word	0x0800f6ef
 800f63c:	0800f7f3 	.word	0x0800f7f3
 800f640:	0800f7f3 	.word	0x0800f7f3
 800f644:	0800f7f3 	.word	0x0800f7f3
 800f648:	0800f72f 	.word	0x0800f72f
 800f64c:	0800f7f3 	.word	0x0800f7f3
 800f650:	0800f7f3 	.word	0x0800f7f3
 800f654:	0800f7f3 	.word	0x0800f7f3
 800f658:	0800f771 	.word	0x0800f771
 800f65c:	0800f7f3 	.word	0x0800f7f3
 800f660:	0800f7f3 	.word	0x0800f7f3
 800f664:	0800f7f3 	.word	0x0800f7f3
 800f668:	0800f7b1 	.word	0x0800f7b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	68b9      	ldr	r1, [r7, #8]
 800f672:	4618      	mov	r0, r3
 800f674:	f000 fa86 	bl	800fb84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	699a      	ldr	r2, [r3, #24]
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f042 0208 	orr.w	r2, r2, #8
 800f686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	699a      	ldr	r2, [r3, #24]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f022 0204 	bic.w	r2, r2, #4
 800f696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	6999      	ldr	r1, [r3, #24]
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	691a      	ldr	r2, [r3, #16]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	430a      	orrs	r2, r1
 800f6a8:	619a      	str	r2, [r3, #24]
      break;
 800f6aa:	e0a5      	b.n	800f7f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	68b9      	ldr	r1, [r7, #8]
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f000 faf6 	bl	800fca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	699a      	ldr	r2, [r3, #24]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	699a      	ldr	r2, [r3, #24]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	6999      	ldr	r1, [r3, #24]
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	021a      	lsls	r2, r3, #8
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	430a      	orrs	r2, r1
 800f6ea:	619a      	str	r2, [r3, #24]
      break;
 800f6ec:	e084      	b.n	800f7f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	68b9      	ldr	r1, [r7, #8]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 fb5f 	bl	800fdb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	69da      	ldr	r2, [r3, #28]
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f042 0208 	orr.w	r2, r2, #8
 800f708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	69da      	ldr	r2, [r3, #28]
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f022 0204 	bic.w	r2, r2, #4
 800f718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	69d9      	ldr	r1, [r3, #28]
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	691a      	ldr	r2, [r3, #16]
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	430a      	orrs	r2, r1
 800f72a:	61da      	str	r2, [r3, #28]
      break;
 800f72c:	e064      	b.n	800f7f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	68b9      	ldr	r1, [r7, #8]
 800f734:	4618      	mov	r0, r3
 800f736:	f000 fbc7 	bl	800fec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	69da      	ldr	r2, [r3, #28]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	69da      	ldr	r2, [r3, #28]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	69d9      	ldr	r1, [r3, #28]
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	691b      	ldr	r3, [r3, #16]
 800f764:	021a      	lsls	r2, r3, #8
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	430a      	orrs	r2, r1
 800f76c:	61da      	str	r2, [r3, #28]
      break;
 800f76e:	e043      	b.n	800f7f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	68b9      	ldr	r1, [r7, #8]
 800f776:	4618      	mov	r0, r3
 800f778:	f000 fc10 	bl	800ff9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f042 0208 	orr.w	r2, r2, #8
 800f78a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f022 0204 	bic.w	r2, r2, #4
 800f79a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	691a      	ldr	r2, [r3, #16]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	430a      	orrs	r2, r1
 800f7ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f7ae:	e023      	b.n	800f7f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	68b9      	ldr	r1, [r7, #8]
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f000 fc54 	bl	8010064 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	691b      	ldr	r3, [r3, #16]
 800f7e6:	021a      	lsls	r2, r3, #8
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	430a      	orrs	r2, r1
 800f7ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f7f0:	e002      	b.n	800f7f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	75fb      	strb	r3, [r7, #23]
      break;
 800f7f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f800:	7dfb      	ldrb	r3, [r7, #23]
}
 800f802:	4618      	mov	r0, r3
 800f804:	3718      	adds	r7, #24
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop

0800f80c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f816:	2300      	movs	r3, #0
 800f818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f820:	2b01      	cmp	r3, #1
 800f822:	d101      	bne.n	800f828 <HAL_TIM_ConfigClockSource+0x1c>
 800f824:	2302      	movs	r3, #2
 800f826:	e0dc      	b.n	800f9e2 <HAL_TIM_ConfigClockSource+0x1d6>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2201      	movs	r2, #1
 800f82c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2202      	movs	r2, #2
 800f834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	689b      	ldr	r3, [r3, #8]
 800f83e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f840:	68ba      	ldr	r2, [r7, #8]
 800f842:	4b6a      	ldr	r3, [pc, #424]	; (800f9ec <HAL_TIM_ConfigClockSource+0x1e0>)
 800f844:	4013      	ands	r3, r2
 800f846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f84e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4a64      	ldr	r2, [pc, #400]	; (800f9f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	f000 80a9 	beq.w	800f9b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f864:	4a62      	ldr	r2, [pc, #392]	; (800f9f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f866:	4293      	cmp	r3, r2
 800f868:	f200 80ae 	bhi.w	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f86c:	4a61      	ldr	r2, [pc, #388]	; (800f9f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	f000 80a1 	beq.w	800f9b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f874:	4a5f      	ldr	r2, [pc, #380]	; (800f9f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f876:	4293      	cmp	r3, r2
 800f878:	f200 80a6 	bhi.w	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f87c:	4a5e      	ldr	r2, [pc, #376]	; (800f9f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	f000 8099 	beq.w	800f9b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f884:	4a5c      	ldr	r2, [pc, #368]	; (800f9f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f886:	4293      	cmp	r3, r2
 800f888:	f200 809e 	bhi.w	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f88c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f890:	f000 8091 	beq.w	800f9b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f894:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f898:	f200 8096 	bhi.w	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f89c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8a0:	f000 8089 	beq.w	800f9b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8a8:	f200 808e 	bhi.w	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8b0:	d03e      	beq.n	800f930 <HAL_TIM_ConfigClockSource+0x124>
 800f8b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8b6:	f200 8087 	bhi.w	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8be:	f000 8086 	beq.w	800f9ce <HAL_TIM_ConfigClockSource+0x1c2>
 800f8c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8c6:	d87f      	bhi.n	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8c8:	2b70      	cmp	r3, #112	; 0x70
 800f8ca:	d01a      	beq.n	800f902 <HAL_TIM_ConfigClockSource+0xf6>
 800f8cc:	2b70      	cmp	r3, #112	; 0x70
 800f8ce:	d87b      	bhi.n	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8d0:	2b60      	cmp	r3, #96	; 0x60
 800f8d2:	d050      	beq.n	800f976 <HAL_TIM_ConfigClockSource+0x16a>
 800f8d4:	2b60      	cmp	r3, #96	; 0x60
 800f8d6:	d877      	bhi.n	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8d8:	2b50      	cmp	r3, #80	; 0x50
 800f8da:	d03c      	beq.n	800f956 <HAL_TIM_ConfigClockSource+0x14a>
 800f8dc:	2b50      	cmp	r3, #80	; 0x50
 800f8de:	d873      	bhi.n	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8e0:	2b40      	cmp	r3, #64	; 0x40
 800f8e2:	d058      	beq.n	800f996 <HAL_TIM_ConfigClockSource+0x18a>
 800f8e4:	2b40      	cmp	r3, #64	; 0x40
 800f8e6:	d86f      	bhi.n	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8e8:	2b30      	cmp	r3, #48	; 0x30
 800f8ea:	d064      	beq.n	800f9b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8ec:	2b30      	cmp	r3, #48	; 0x30
 800f8ee:	d86b      	bhi.n	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8f0:	2b20      	cmp	r3, #32
 800f8f2:	d060      	beq.n	800f9b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8f4:	2b20      	cmp	r3, #32
 800f8f6:	d867      	bhi.n	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d05c      	beq.n	800f9b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8fc:	2b10      	cmp	r3, #16
 800f8fe:	d05a      	beq.n	800f9b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f900:	e062      	b.n	800f9c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6818      	ldr	r0, [r3, #0]
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	6899      	ldr	r1, [r3, #8]
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	685a      	ldr	r2, [r3, #4]
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	f000 fc8b 	bl	801022c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f924:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	609a      	str	r2, [r3, #8]
      break;
 800f92e:	e04f      	b.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6818      	ldr	r0, [r3, #0]
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	6899      	ldr	r1, [r3, #8]
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	685a      	ldr	r2, [r3, #4]
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	f000 fc74 	bl	801022c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	689a      	ldr	r2, [r3, #8]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f952:	609a      	str	r2, [r3, #8]
      break;
 800f954:	e03c      	b.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6818      	ldr	r0, [r3, #0]
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	6859      	ldr	r1, [r3, #4]
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	461a      	mov	r2, r3
 800f964:	f000 fbe4 	bl	8010130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2150      	movs	r1, #80	; 0x50
 800f96e:	4618      	mov	r0, r3
 800f970:	f000 fc3e 	bl	80101f0 <TIM_ITRx_SetConfig>
      break;
 800f974:	e02c      	b.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6818      	ldr	r0, [r3, #0]
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	6859      	ldr	r1, [r3, #4]
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	461a      	mov	r2, r3
 800f984:	f000 fc03 	bl	801018e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2160      	movs	r1, #96	; 0x60
 800f98e:	4618      	mov	r0, r3
 800f990:	f000 fc2e 	bl	80101f0 <TIM_ITRx_SetConfig>
      break;
 800f994:	e01c      	b.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6818      	ldr	r0, [r3, #0]
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	6859      	ldr	r1, [r3, #4]
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	f000 fbc4 	bl	8010130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	2140      	movs	r1, #64	; 0x40
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 fc1e 	bl	80101f0 <TIM_ITRx_SetConfig>
      break;
 800f9b4:	e00c      	b.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	4619      	mov	r1, r3
 800f9c0:	4610      	mov	r0, r2
 800f9c2:	f000 fc15 	bl	80101f0 <TIM_ITRx_SetConfig>
      break;
 800f9c6:	e003      	b.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	73fb      	strb	r3, [r7, #15]
      break;
 800f9cc:	e000      	b.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f9ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3710      	adds	r7, #16
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	ffceff88 	.word	0xffceff88
 800f9f0:	00100040 	.word	0x00100040
 800f9f4:	00100030 	.word	0x00100030
 800f9f8:	00100020 	.word	0x00100020

0800f9fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fa18:	bf00      	nop
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr

0800fa24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fa2c:	bf00      	nop
 800fa2e:	370c      	adds	r7, #12
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b085      	sub	sp, #20
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4a46      	ldr	r2, [pc, #280]	; (800fb64 <TIM_Base_SetConfig+0x12c>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d013      	beq.n	800fa78 <TIM_Base_SetConfig+0x40>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa56:	d00f      	beq.n	800fa78 <TIM_Base_SetConfig+0x40>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4a43      	ldr	r2, [pc, #268]	; (800fb68 <TIM_Base_SetConfig+0x130>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d00b      	beq.n	800fa78 <TIM_Base_SetConfig+0x40>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	4a42      	ldr	r2, [pc, #264]	; (800fb6c <TIM_Base_SetConfig+0x134>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d007      	beq.n	800fa78 <TIM_Base_SetConfig+0x40>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4a41      	ldr	r2, [pc, #260]	; (800fb70 <TIM_Base_SetConfig+0x138>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d003      	beq.n	800fa78 <TIM_Base_SetConfig+0x40>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	4a40      	ldr	r2, [pc, #256]	; (800fb74 <TIM_Base_SetConfig+0x13c>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d108      	bne.n	800fa8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	68fa      	ldr	r2, [r7, #12]
 800fa86:	4313      	orrs	r3, r2
 800fa88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4a35      	ldr	r2, [pc, #212]	; (800fb64 <TIM_Base_SetConfig+0x12c>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d01f      	beq.n	800fad2 <TIM_Base_SetConfig+0x9a>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa98:	d01b      	beq.n	800fad2 <TIM_Base_SetConfig+0x9a>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4a32      	ldr	r2, [pc, #200]	; (800fb68 <TIM_Base_SetConfig+0x130>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d017      	beq.n	800fad2 <TIM_Base_SetConfig+0x9a>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	4a31      	ldr	r2, [pc, #196]	; (800fb6c <TIM_Base_SetConfig+0x134>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d013      	beq.n	800fad2 <TIM_Base_SetConfig+0x9a>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4a30      	ldr	r2, [pc, #192]	; (800fb70 <TIM_Base_SetConfig+0x138>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d00f      	beq.n	800fad2 <TIM_Base_SetConfig+0x9a>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4a2f      	ldr	r2, [pc, #188]	; (800fb74 <TIM_Base_SetConfig+0x13c>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d00b      	beq.n	800fad2 <TIM_Base_SetConfig+0x9a>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4a2e      	ldr	r2, [pc, #184]	; (800fb78 <TIM_Base_SetConfig+0x140>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d007      	beq.n	800fad2 <TIM_Base_SetConfig+0x9a>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4a2d      	ldr	r2, [pc, #180]	; (800fb7c <TIM_Base_SetConfig+0x144>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d003      	beq.n	800fad2 <TIM_Base_SetConfig+0x9a>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4a2c      	ldr	r2, [pc, #176]	; (800fb80 <TIM_Base_SetConfig+0x148>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d108      	bne.n	800fae4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	68db      	ldr	r3, [r3, #12]
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	4313      	orrs	r3, r2
 800fae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	4313      	orrs	r3, r2
 800faf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	68fa      	ldr	r2, [r7, #12]
 800faf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	689a      	ldr	r2, [r3, #8]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4a16      	ldr	r2, [pc, #88]	; (800fb64 <TIM_Base_SetConfig+0x12c>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d00f      	beq.n	800fb30 <TIM_Base_SetConfig+0xf8>
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	4a18      	ldr	r2, [pc, #96]	; (800fb74 <TIM_Base_SetConfig+0x13c>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d00b      	beq.n	800fb30 <TIM_Base_SetConfig+0xf8>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4a17      	ldr	r2, [pc, #92]	; (800fb78 <TIM_Base_SetConfig+0x140>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d007      	beq.n	800fb30 <TIM_Base_SetConfig+0xf8>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a16      	ldr	r2, [pc, #88]	; (800fb7c <TIM_Base_SetConfig+0x144>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d003      	beq.n	800fb30 <TIM_Base_SetConfig+0xf8>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a15      	ldr	r2, [pc, #84]	; (800fb80 <TIM_Base_SetConfig+0x148>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d103      	bne.n	800fb38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	691a      	ldr	r2, [r3, #16]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	691b      	ldr	r3, [r3, #16]
 800fb42:	f003 0301 	and.w	r3, r3, #1
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d105      	bne.n	800fb56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	691b      	ldr	r3, [r3, #16]
 800fb4e:	f023 0201 	bic.w	r2, r3, #1
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	611a      	str	r2, [r3, #16]
  }
}
 800fb56:	bf00      	nop
 800fb58:	3714      	adds	r7, #20
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop
 800fb64:	40010000 	.word	0x40010000
 800fb68:	40000400 	.word	0x40000400
 800fb6c:	40000800 	.word	0x40000800
 800fb70:	40000c00 	.word	0x40000c00
 800fb74:	40010400 	.word	0x40010400
 800fb78:	40014000 	.word	0x40014000
 800fb7c:	40014400 	.word	0x40014400
 800fb80:	40014800 	.word	0x40014800

0800fb84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b087      	sub	sp, #28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6a1b      	ldr	r3, [r3, #32]
 800fb92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6a1b      	ldr	r3, [r3, #32]
 800fb98:	f023 0201 	bic.w	r2, r3, #1
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	699b      	ldr	r3, [r3, #24]
 800fbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fbac:	68fa      	ldr	r2, [r7, #12]
 800fbae:	4b37      	ldr	r3, [pc, #220]	; (800fc8c <TIM_OC1_SetConfig+0x108>)
 800fbb0:	4013      	ands	r3, r2
 800fbb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f023 0303 	bic.w	r3, r3, #3
 800fbba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	f023 0302 	bic.w	r3, r3, #2
 800fbcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4a2d      	ldr	r2, [pc, #180]	; (800fc90 <TIM_OC1_SetConfig+0x10c>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d00f      	beq.n	800fc00 <TIM_OC1_SetConfig+0x7c>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a2c      	ldr	r2, [pc, #176]	; (800fc94 <TIM_OC1_SetConfig+0x110>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d00b      	beq.n	800fc00 <TIM_OC1_SetConfig+0x7c>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4a2b      	ldr	r2, [pc, #172]	; (800fc98 <TIM_OC1_SetConfig+0x114>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d007      	beq.n	800fc00 <TIM_OC1_SetConfig+0x7c>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4a2a      	ldr	r2, [pc, #168]	; (800fc9c <TIM_OC1_SetConfig+0x118>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d003      	beq.n	800fc00 <TIM_OC1_SetConfig+0x7c>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	4a29      	ldr	r2, [pc, #164]	; (800fca0 <TIM_OC1_SetConfig+0x11c>)
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d10c      	bne.n	800fc1a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	f023 0308 	bic.w	r3, r3, #8
 800fc06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	697a      	ldr	r2, [r7, #20]
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	f023 0304 	bic.w	r3, r3, #4
 800fc18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4a1c      	ldr	r2, [pc, #112]	; (800fc90 <TIM_OC1_SetConfig+0x10c>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d00f      	beq.n	800fc42 <TIM_OC1_SetConfig+0xbe>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4a1b      	ldr	r2, [pc, #108]	; (800fc94 <TIM_OC1_SetConfig+0x110>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d00b      	beq.n	800fc42 <TIM_OC1_SetConfig+0xbe>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4a1a      	ldr	r2, [pc, #104]	; (800fc98 <TIM_OC1_SetConfig+0x114>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d007      	beq.n	800fc42 <TIM_OC1_SetConfig+0xbe>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4a19      	ldr	r2, [pc, #100]	; (800fc9c <TIM_OC1_SetConfig+0x118>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d003      	beq.n	800fc42 <TIM_OC1_SetConfig+0xbe>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4a18      	ldr	r2, [pc, #96]	; (800fca0 <TIM_OC1_SetConfig+0x11c>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d111      	bne.n	800fc66 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	695b      	ldr	r3, [r3, #20]
 800fc56:	693a      	ldr	r2, [r7, #16]
 800fc58:	4313      	orrs	r3, r2
 800fc5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	699b      	ldr	r3, [r3, #24]
 800fc60:	693a      	ldr	r2, [r7, #16]
 800fc62:	4313      	orrs	r3, r2
 800fc64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	693a      	ldr	r2, [r7, #16]
 800fc6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	685a      	ldr	r2, [r3, #4]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	621a      	str	r2, [r3, #32]
}
 800fc80:	bf00      	nop
 800fc82:	371c      	adds	r7, #28
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr
 800fc8c:	fffeff8f 	.word	0xfffeff8f
 800fc90:	40010000 	.word	0x40010000
 800fc94:	40010400 	.word	0x40010400
 800fc98:	40014000 	.word	0x40014000
 800fc9c:	40014400 	.word	0x40014400
 800fca0:	40014800 	.word	0x40014800

0800fca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b087      	sub	sp, #28
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6a1b      	ldr	r3, [r3, #32]
 800fcb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a1b      	ldr	r3, [r3, #32]
 800fcb8:	f023 0210 	bic.w	r2, r3, #16
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	699b      	ldr	r3, [r3, #24]
 800fcca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	4b34      	ldr	r3, [pc, #208]	; (800fda0 <TIM_OC2_SetConfig+0xfc>)
 800fcd0:	4013      	ands	r3, r2
 800fcd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	021b      	lsls	r3, r3, #8
 800fce2:	68fa      	ldr	r2, [r7, #12]
 800fce4:	4313      	orrs	r3, r2
 800fce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	f023 0320 	bic.w	r3, r3, #32
 800fcee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	011b      	lsls	r3, r3, #4
 800fcf6:	697a      	ldr	r2, [r7, #20]
 800fcf8:	4313      	orrs	r3, r2
 800fcfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	4a29      	ldr	r2, [pc, #164]	; (800fda4 <TIM_OC2_SetConfig+0x100>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d003      	beq.n	800fd0c <TIM_OC2_SetConfig+0x68>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4a28      	ldr	r2, [pc, #160]	; (800fda8 <TIM_OC2_SetConfig+0x104>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d10d      	bne.n	800fd28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	011b      	lsls	r3, r3, #4
 800fd1a:	697a      	ldr	r2, [r7, #20]
 800fd1c:	4313      	orrs	r3, r2
 800fd1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4a1e      	ldr	r2, [pc, #120]	; (800fda4 <TIM_OC2_SetConfig+0x100>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d00f      	beq.n	800fd50 <TIM_OC2_SetConfig+0xac>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	4a1d      	ldr	r2, [pc, #116]	; (800fda8 <TIM_OC2_SetConfig+0x104>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	d00b      	beq.n	800fd50 <TIM_OC2_SetConfig+0xac>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	4a1c      	ldr	r2, [pc, #112]	; (800fdac <TIM_OC2_SetConfig+0x108>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d007      	beq.n	800fd50 <TIM_OC2_SetConfig+0xac>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4a1b      	ldr	r2, [pc, #108]	; (800fdb0 <TIM_OC2_SetConfig+0x10c>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d003      	beq.n	800fd50 <TIM_OC2_SetConfig+0xac>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	4a1a      	ldr	r2, [pc, #104]	; (800fdb4 <TIM_OC2_SetConfig+0x110>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d113      	bne.n	800fd78 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	695b      	ldr	r3, [r3, #20]
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	693a      	ldr	r2, [r7, #16]
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	699b      	ldr	r3, [r3, #24]
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	4313      	orrs	r3, r2
 800fd76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	693a      	ldr	r2, [r7, #16]
 800fd7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	68fa      	ldr	r2, [r7, #12]
 800fd82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	685a      	ldr	r2, [r3, #4]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	621a      	str	r2, [r3, #32]
}
 800fd92:	bf00      	nop
 800fd94:	371c      	adds	r7, #28
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	feff8fff 	.word	0xfeff8fff
 800fda4:	40010000 	.word	0x40010000
 800fda8:	40010400 	.word	0x40010400
 800fdac:	40014000 	.word	0x40014000
 800fdb0:	40014400 	.word	0x40014400
 800fdb4:	40014800 	.word	0x40014800

0800fdb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b087      	sub	sp, #28
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a1b      	ldr	r3, [r3, #32]
 800fdc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a1b      	ldr	r3, [r3, #32]
 800fdcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	69db      	ldr	r3, [r3, #28]
 800fdde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fde0:	68fa      	ldr	r2, [r7, #12]
 800fde2:	4b33      	ldr	r3, [pc, #204]	; (800feb0 <TIM_OC3_SetConfig+0xf8>)
 800fde4:	4013      	ands	r3, r2
 800fde6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f023 0303 	bic.w	r3, r3, #3
 800fdee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fe00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	689b      	ldr	r3, [r3, #8]
 800fe06:	021b      	lsls	r3, r3, #8
 800fe08:	697a      	ldr	r2, [r7, #20]
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	4a28      	ldr	r2, [pc, #160]	; (800feb4 <TIM_OC3_SetConfig+0xfc>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d003      	beq.n	800fe1e <TIM_OC3_SetConfig+0x66>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4a27      	ldr	r2, [pc, #156]	; (800feb8 <TIM_OC3_SetConfig+0x100>)
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d10d      	bne.n	800fe3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fe24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	021b      	lsls	r3, r3, #8
 800fe2c:	697a      	ldr	r2, [r7, #20]
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fe38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4a1d      	ldr	r2, [pc, #116]	; (800feb4 <TIM_OC3_SetConfig+0xfc>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d00f      	beq.n	800fe62 <TIM_OC3_SetConfig+0xaa>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	4a1c      	ldr	r2, [pc, #112]	; (800feb8 <TIM_OC3_SetConfig+0x100>)
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d00b      	beq.n	800fe62 <TIM_OC3_SetConfig+0xaa>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4a1b      	ldr	r2, [pc, #108]	; (800febc <TIM_OC3_SetConfig+0x104>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d007      	beq.n	800fe62 <TIM_OC3_SetConfig+0xaa>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4a1a      	ldr	r2, [pc, #104]	; (800fec0 <TIM_OC3_SetConfig+0x108>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d003      	beq.n	800fe62 <TIM_OC3_SetConfig+0xaa>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4a19      	ldr	r2, [pc, #100]	; (800fec4 <TIM_OC3_SetConfig+0x10c>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d113      	bne.n	800fe8a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fe70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	695b      	ldr	r3, [r3, #20]
 800fe76:	011b      	lsls	r3, r3, #4
 800fe78:	693a      	ldr	r2, [r7, #16]
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	699b      	ldr	r3, [r3, #24]
 800fe82:	011b      	lsls	r3, r3, #4
 800fe84:	693a      	ldr	r2, [r7, #16]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	693a      	ldr	r2, [r7, #16]
 800fe8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	68fa      	ldr	r2, [r7, #12]
 800fe94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	685a      	ldr	r2, [r3, #4]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	697a      	ldr	r2, [r7, #20]
 800fea2:	621a      	str	r2, [r3, #32]
}
 800fea4:	bf00      	nop
 800fea6:	371c      	adds	r7, #28
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr
 800feb0:	fffeff8f 	.word	0xfffeff8f
 800feb4:	40010000 	.word	0x40010000
 800feb8:	40010400 	.word	0x40010400
 800febc:	40014000 	.word	0x40014000
 800fec0:	40014400 	.word	0x40014400
 800fec4:	40014800 	.word	0x40014800

0800fec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fec8:	b480      	push	{r7}
 800feca:	b087      	sub	sp, #28
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6a1b      	ldr	r3, [r3, #32]
 800fed6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6a1b      	ldr	r3, [r3, #32]
 800fedc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	69db      	ldr	r3, [r3, #28]
 800feee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fef0:	68fa      	ldr	r2, [r7, #12]
 800fef2:	4b24      	ldr	r3, [pc, #144]	; (800ff84 <TIM_OC4_SetConfig+0xbc>)
 800fef4:	4013      	ands	r3, r2
 800fef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fefe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	021b      	lsls	r3, r3, #8
 800ff06:	68fa      	ldr	r2, [r7, #12]
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ff12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	689b      	ldr	r3, [r3, #8]
 800ff18:	031b      	lsls	r3, r3, #12
 800ff1a:	693a      	ldr	r2, [r7, #16]
 800ff1c:	4313      	orrs	r3, r2
 800ff1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	4a19      	ldr	r2, [pc, #100]	; (800ff88 <TIM_OC4_SetConfig+0xc0>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d00f      	beq.n	800ff48 <TIM_OC4_SetConfig+0x80>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4a18      	ldr	r2, [pc, #96]	; (800ff8c <TIM_OC4_SetConfig+0xc4>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d00b      	beq.n	800ff48 <TIM_OC4_SetConfig+0x80>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4a17      	ldr	r2, [pc, #92]	; (800ff90 <TIM_OC4_SetConfig+0xc8>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d007      	beq.n	800ff48 <TIM_OC4_SetConfig+0x80>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4a16      	ldr	r2, [pc, #88]	; (800ff94 <TIM_OC4_SetConfig+0xcc>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d003      	beq.n	800ff48 <TIM_OC4_SetConfig+0x80>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	4a15      	ldr	r2, [pc, #84]	; (800ff98 <TIM_OC4_SetConfig+0xd0>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d109      	bne.n	800ff5c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ff4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	695b      	ldr	r3, [r3, #20]
 800ff54:	019b      	lsls	r3, r3, #6
 800ff56:	697a      	ldr	r2, [r7, #20]
 800ff58:	4313      	orrs	r3, r2
 800ff5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	697a      	ldr	r2, [r7, #20]
 800ff60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	68fa      	ldr	r2, [r7, #12]
 800ff66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	685a      	ldr	r2, [r3, #4]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	693a      	ldr	r2, [r7, #16]
 800ff74:	621a      	str	r2, [r3, #32]
}
 800ff76:	bf00      	nop
 800ff78:	371c      	adds	r7, #28
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	feff8fff 	.word	0xfeff8fff
 800ff88:	40010000 	.word	0x40010000
 800ff8c:	40010400 	.word	0x40010400
 800ff90:	40014000 	.word	0x40014000
 800ff94:	40014400 	.word	0x40014400
 800ff98:	40014800 	.word	0x40014800

0800ff9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b087      	sub	sp, #28
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6a1b      	ldr	r3, [r3, #32]
 800ffaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a1b      	ldr	r3, [r3, #32]
 800ffb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ffc4:	68fa      	ldr	r2, [r7, #12]
 800ffc6:	4b21      	ldr	r3, [pc, #132]	; (801004c <TIM_OC5_SetConfig+0xb0>)
 800ffc8:	4013      	ands	r3, r2
 800ffca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	68fa      	ldr	r2, [r7, #12]
 800ffd2:	4313      	orrs	r3, r2
 800ffd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ffdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	689b      	ldr	r3, [r3, #8]
 800ffe2:	041b      	lsls	r3, r3, #16
 800ffe4:	693a      	ldr	r2, [r7, #16]
 800ffe6:	4313      	orrs	r3, r2
 800ffe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4a18      	ldr	r2, [pc, #96]	; (8010050 <TIM_OC5_SetConfig+0xb4>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d00f      	beq.n	8010012 <TIM_OC5_SetConfig+0x76>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4a17      	ldr	r2, [pc, #92]	; (8010054 <TIM_OC5_SetConfig+0xb8>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d00b      	beq.n	8010012 <TIM_OC5_SetConfig+0x76>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4a16      	ldr	r2, [pc, #88]	; (8010058 <TIM_OC5_SetConfig+0xbc>)
 800fffe:	4293      	cmp	r3, r2
 8010000:	d007      	beq.n	8010012 <TIM_OC5_SetConfig+0x76>
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	4a15      	ldr	r2, [pc, #84]	; (801005c <TIM_OC5_SetConfig+0xc0>)
 8010006:	4293      	cmp	r3, r2
 8010008:	d003      	beq.n	8010012 <TIM_OC5_SetConfig+0x76>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	4a14      	ldr	r2, [pc, #80]	; (8010060 <TIM_OC5_SetConfig+0xc4>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d109      	bne.n	8010026 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	695b      	ldr	r3, [r3, #20]
 801001e:	021b      	lsls	r3, r3, #8
 8010020:	697a      	ldr	r2, [r7, #20]
 8010022:	4313      	orrs	r3, r2
 8010024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	697a      	ldr	r2, [r7, #20]
 801002a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	68fa      	ldr	r2, [r7, #12]
 8010030:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	685a      	ldr	r2, [r3, #4]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	693a      	ldr	r2, [r7, #16]
 801003e:	621a      	str	r2, [r3, #32]
}
 8010040:	bf00      	nop
 8010042:	371c      	adds	r7, #28
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr
 801004c:	fffeff8f 	.word	0xfffeff8f
 8010050:	40010000 	.word	0x40010000
 8010054:	40010400 	.word	0x40010400
 8010058:	40014000 	.word	0x40014000
 801005c:	40014400 	.word	0x40014400
 8010060:	40014800 	.word	0x40014800

08010064 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010064:	b480      	push	{r7}
 8010066:	b087      	sub	sp, #28
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6a1b      	ldr	r3, [r3, #32]
 8010072:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6a1b      	ldr	r3, [r3, #32]
 8010078:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801008a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801008c:	68fa      	ldr	r2, [r7, #12]
 801008e:	4b22      	ldr	r3, [pc, #136]	; (8010118 <TIM_OC6_SetConfig+0xb4>)
 8010090:	4013      	ands	r3, r2
 8010092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	021b      	lsls	r3, r3, #8
 801009a:	68fa      	ldr	r2, [r7, #12]
 801009c:	4313      	orrs	r3, r2
 801009e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80100a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	051b      	lsls	r3, r3, #20
 80100ae:	693a      	ldr	r2, [r7, #16]
 80100b0:	4313      	orrs	r3, r2
 80100b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4a19      	ldr	r2, [pc, #100]	; (801011c <TIM_OC6_SetConfig+0xb8>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d00f      	beq.n	80100dc <TIM_OC6_SetConfig+0x78>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	4a18      	ldr	r2, [pc, #96]	; (8010120 <TIM_OC6_SetConfig+0xbc>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d00b      	beq.n	80100dc <TIM_OC6_SetConfig+0x78>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	4a17      	ldr	r2, [pc, #92]	; (8010124 <TIM_OC6_SetConfig+0xc0>)
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d007      	beq.n	80100dc <TIM_OC6_SetConfig+0x78>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	4a16      	ldr	r2, [pc, #88]	; (8010128 <TIM_OC6_SetConfig+0xc4>)
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d003      	beq.n	80100dc <TIM_OC6_SetConfig+0x78>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	4a15      	ldr	r2, [pc, #84]	; (801012c <TIM_OC6_SetConfig+0xc8>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d109      	bne.n	80100f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80100e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	695b      	ldr	r3, [r3, #20]
 80100e8:	029b      	lsls	r3, r3, #10
 80100ea:	697a      	ldr	r2, [r7, #20]
 80100ec:	4313      	orrs	r3, r2
 80100ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	697a      	ldr	r2, [r7, #20]
 80100f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68fa      	ldr	r2, [r7, #12]
 80100fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	685a      	ldr	r2, [r3, #4]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	693a      	ldr	r2, [r7, #16]
 8010108:	621a      	str	r2, [r3, #32]
}
 801010a:	bf00      	nop
 801010c:	371c      	adds	r7, #28
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	feff8fff 	.word	0xfeff8fff
 801011c:	40010000 	.word	0x40010000
 8010120:	40010400 	.word	0x40010400
 8010124:	40014000 	.word	0x40014000
 8010128:	40014400 	.word	0x40014400
 801012c:	40014800 	.word	0x40014800

08010130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010130:	b480      	push	{r7}
 8010132:	b087      	sub	sp, #28
 8010134:	af00      	add	r7, sp, #0
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	6a1b      	ldr	r3, [r3, #32]
 8010140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6a1b      	ldr	r3, [r3, #32]
 8010146:	f023 0201 	bic.w	r2, r3, #1
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	699b      	ldr	r3, [r3, #24]
 8010152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801015a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	011b      	lsls	r3, r3, #4
 8010160:	693a      	ldr	r2, [r7, #16]
 8010162:	4313      	orrs	r3, r2
 8010164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	f023 030a 	bic.w	r3, r3, #10
 801016c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801016e:	697a      	ldr	r2, [r7, #20]
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	4313      	orrs	r3, r2
 8010174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	693a      	ldr	r2, [r7, #16]
 801017a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	621a      	str	r2, [r3, #32]
}
 8010182:	bf00      	nop
 8010184:	371c      	adds	r7, #28
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801018e:	b480      	push	{r7}
 8010190:	b087      	sub	sp, #28
 8010192:	af00      	add	r7, sp, #0
 8010194:	60f8      	str	r0, [r7, #12]
 8010196:	60b9      	str	r1, [r7, #8]
 8010198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	6a1b      	ldr	r3, [r3, #32]
 801019e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	6a1b      	ldr	r3, [r3, #32]
 80101a4:	f023 0210 	bic.w	r2, r3, #16
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	699b      	ldr	r3, [r3, #24]
 80101b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80101b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	031b      	lsls	r3, r3, #12
 80101be:	693a      	ldr	r2, [r7, #16]
 80101c0:	4313      	orrs	r3, r2
 80101c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80101ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	011b      	lsls	r3, r3, #4
 80101d0:	697a      	ldr	r2, [r7, #20]
 80101d2:	4313      	orrs	r3, r2
 80101d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	693a      	ldr	r2, [r7, #16]
 80101da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	697a      	ldr	r2, [r7, #20]
 80101e0:	621a      	str	r2, [r3, #32]
}
 80101e2:	bf00      	nop
 80101e4:	371c      	adds	r7, #28
 80101e6:	46bd      	mov	sp, r7
 80101e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ec:	4770      	bx	lr
	...

080101f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b085      	sub	sp, #20
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	689b      	ldr	r3, [r3, #8]
 80101fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010200:	68fa      	ldr	r2, [r7, #12]
 8010202:	4b09      	ldr	r3, [pc, #36]	; (8010228 <TIM_ITRx_SetConfig+0x38>)
 8010204:	4013      	ands	r3, r2
 8010206:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	4313      	orrs	r3, r2
 801020e:	f043 0307 	orr.w	r3, r3, #7
 8010212:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	68fa      	ldr	r2, [r7, #12]
 8010218:	609a      	str	r2, [r3, #8]
}
 801021a:	bf00      	nop
 801021c:	3714      	adds	r7, #20
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	ffcfff8f 	.word	0xffcfff8f

0801022c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801022c:	b480      	push	{r7}
 801022e:	b087      	sub	sp, #28
 8010230:	af00      	add	r7, sp, #0
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	60b9      	str	r1, [r7, #8]
 8010236:	607a      	str	r2, [r7, #4]
 8010238:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	689b      	ldr	r3, [r3, #8]
 801023e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010246:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	021a      	lsls	r2, r3, #8
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	431a      	orrs	r2, r3
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	4313      	orrs	r3, r2
 8010254:	697a      	ldr	r2, [r7, #20]
 8010256:	4313      	orrs	r3, r2
 8010258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	697a      	ldr	r2, [r7, #20]
 801025e:	609a      	str	r2, [r3, #8]
}
 8010260:	bf00      	nop
 8010262:	371c      	adds	r7, #28
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801026c:	b480      	push	{r7}
 801026e:	b087      	sub	sp, #28
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	f003 031f 	and.w	r3, r3, #31
 801027e:	2201      	movs	r2, #1
 8010280:	fa02 f303 	lsl.w	r3, r2, r3
 8010284:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6a1a      	ldr	r2, [r3, #32]
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	43db      	mvns	r3, r3
 801028e:	401a      	ands	r2, r3
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	6a1a      	ldr	r2, [r3, #32]
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	f003 031f 	and.w	r3, r3, #31
 801029e:	6879      	ldr	r1, [r7, #4]
 80102a0:	fa01 f303 	lsl.w	r3, r1, r3
 80102a4:	431a      	orrs	r2, r3
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	621a      	str	r2, [r3, #32]
}
 80102aa:	bf00      	nop
 80102ac:	371c      	adds	r7, #28
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr
	...

080102b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b085      	sub	sp, #20
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d101      	bne.n	80102d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80102cc:	2302      	movs	r3, #2
 80102ce:	e06d      	b.n	80103ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2201      	movs	r2, #1
 80102d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2202      	movs	r2, #2
 80102dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4a30      	ldr	r2, [pc, #192]	; (80103b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d004      	beq.n	8010304 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4a2f      	ldr	r2, [pc, #188]	; (80103bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d108      	bne.n	8010316 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801030a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	68fa      	ldr	r2, [r7, #12]
 8010312:	4313      	orrs	r3, r2
 8010314:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801031c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	68fa      	ldr	r2, [r7, #12]
 8010324:	4313      	orrs	r3, r2
 8010326:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	68fa      	ldr	r2, [r7, #12]
 801032e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4a20      	ldr	r2, [pc, #128]	; (80103b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d022      	beq.n	8010380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010342:	d01d      	beq.n	8010380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4a1d      	ldr	r2, [pc, #116]	; (80103c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d018      	beq.n	8010380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4a1c      	ldr	r2, [pc, #112]	; (80103c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010354:	4293      	cmp	r3, r2
 8010356:	d013      	beq.n	8010380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4a1a      	ldr	r2, [pc, #104]	; (80103c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d00e      	beq.n	8010380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	4a15      	ldr	r2, [pc, #84]	; (80103bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d009      	beq.n	8010380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a16      	ldr	r2, [pc, #88]	; (80103cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d004      	beq.n	8010380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	4a15      	ldr	r2, [pc, #84]	; (80103d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801037c:	4293      	cmp	r3, r2
 801037e:	d10c      	bne.n	801039a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010386:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	689b      	ldr	r3, [r3, #8]
 801038c:	68ba      	ldr	r2, [r7, #8]
 801038e:	4313      	orrs	r3, r2
 8010390:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	68ba      	ldr	r2, [r7, #8]
 8010398:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2201      	movs	r2, #1
 801039e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2200      	movs	r2, #0
 80103a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80103aa:	2300      	movs	r3, #0
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3714      	adds	r7, #20
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr
 80103b8:	40010000 	.word	0x40010000
 80103bc:	40010400 	.word	0x40010400
 80103c0:	40000400 	.word	0x40000400
 80103c4:	40000800 	.word	0x40000800
 80103c8:	40000c00 	.word	0x40000c00
 80103cc:	40001800 	.word	0x40001800
 80103d0:	40014000 	.word	0x40014000

080103d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b085      	sub	sp, #20
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80103de:	2300      	movs	r3, #0
 80103e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d101      	bne.n	80103f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80103ec:	2302      	movs	r3, #2
 80103ee:	e065      	b.n	80104bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2201      	movs	r2, #1
 80103f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	4313      	orrs	r3, r2
 8010404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	689b      	ldr	r3, [r3, #8]
 8010410:	4313      	orrs	r3, r2
 8010412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	4313      	orrs	r3, r2
 8010420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4313      	orrs	r3, r2
 801042e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	691b      	ldr	r3, [r3, #16]
 801043a:	4313      	orrs	r3, r2
 801043c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	695b      	ldr	r3, [r3, #20]
 8010448:	4313      	orrs	r3, r2
 801044a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010456:	4313      	orrs	r3, r2
 8010458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	699b      	ldr	r3, [r3, #24]
 8010464:	041b      	lsls	r3, r3, #16
 8010466:	4313      	orrs	r3, r2
 8010468:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	4a16      	ldr	r2, [pc, #88]	; (80104c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010470:	4293      	cmp	r3, r2
 8010472:	d004      	beq.n	801047e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4a14      	ldr	r2, [pc, #80]	; (80104cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801047a:	4293      	cmp	r3, r2
 801047c:	d115      	bne.n	80104aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010488:	051b      	lsls	r3, r3, #20
 801048a:	4313      	orrs	r3, r2
 801048c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	69db      	ldr	r3, [r3, #28]
 8010498:	4313      	orrs	r3, r2
 801049a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	6a1b      	ldr	r3, [r3, #32]
 80104a6:	4313      	orrs	r3, r2
 80104a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	68fa      	ldr	r2, [r7, #12]
 80104b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2200      	movs	r2, #0
 80104b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80104ba:	2300      	movs	r3, #0
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3714      	adds	r7, #20
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr
 80104c8:	40010000 	.word	0x40010000
 80104cc:	40010400 	.word	0x40010400

080104d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80104d8:	bf00      	nop
 80104da:	370c      	adds	r7, #12
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr

080104e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80104e4:	b480      	push	{r7}
 80104e6:	b083      	sub	sp, #12
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80104ec:	bf00      	nop
 80104ee:	370c      	adds	r7, #12
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010500:	bf00      	nop
 8010502:	370c      	adds	r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr

0801050c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d101      	bne.n	801051e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801051a:	2301      	movs	r3, #1
 801051c:	e042      	b.n	80105a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010524:	2b00      	cmp	r3, #0
 8010526:	d106      	bne.n	8010536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f7f3 fbcb 	bl	8003ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2224      	movs	r2, #36	; 0x24
 801053a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f022 0201 	bic.w	r2, r2, #1
 801054c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010552:	2b00      	cmp	r3, #0
 8010554:	d002      	beq.n	801055c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f001 fc42 	bl	8011de0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 fed7 	bl	8011310 <UART_SetConfig>
 8010562:	4603      	mov	r3, r0
 8010564:	2b01      	cmp	r3, #1
 8010566:	d101      	bne.n	801056c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010568:	2301      	movs	r3, #1
 801056a:	e01b      	b.n	80105a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	685a      	ldr	r2, [r3, #4]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801057a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	689a      	ldr	r2, [r3, #8]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801058a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f042 0201 	orr.w	r2, r2, #1
 801059a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f001 fcc1 	bl	8011f24 <UART_CheckIdleState>
 80105a2:	4603      	mov	r3, r0
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b08a      	sub	sp, #40	; 0x28
 80105b0:	af02      	add	r7, sp, #8
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	603b      	str	r3, [r7, #0]
 80105b8:	4613      	mov	r3, r2
 80105ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105c2:	2b20      	cmp	r3, #32
 80105c4:	d17b      	bne.n	80106be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d002      	beq.n	80105d2 <HAL_UART_Transmit+0x26>
 80105cc:	88fb      	ldrh	r3, [r7, #6]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d101      	bne.n	80105d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80105d2:	2301      	movs	r3, #1
 80105d4:	e074      	b.n	80106c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2200      	movs	r2, #0
 80105da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2221      	movs	r2, #33	; 0x21
 80105e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80105e6:	f7f3 ff1b 	bl	8004420 <HAL_GetTick>
 80105ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	88fa      	ldrh	r2, [r7, #6]
 80105f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	88fa      	ldrh	r2, [r7, #6]
 80105f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010604:	d108      	bne.n	8010618 <HAL_UART_Transmit+0x6c>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	691b      	ldr	r3, [r3, #16]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d104      	bne.n	8010618 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801060e:	2300      	movs	r3, #0
 8010610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	61bb      	str	r3, [r7, #24]
 8010616:	e003      	b.n	8010620 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801061c:	2300      	movs	r3, #0
 801061e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010620:	e030      	b.n	8010684 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	9300      	str	r3, [sp, #0]
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	2200      	movs	r2, #0
 801062a:	2180      	movs	r1, #128	; 0x80
 801062c:	68f8      	ldr	r0, [r7, #12]
 801062e:	f001 fd23 	bl	8012078 <UART_WaitOnFlagUntilTimeout>
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	d005      	beq.n	8010644 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2220      	movs	r2, #32
 801063c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010640:	2303      	movs	r3, #3
 8010642:	e03d      	b.n	80106c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010644:	69fb      	ldr	r3, [r7, #28]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d10b      	bne.n	8010662 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	881b      	ldrh	r3, [r3, #0]
 801064e:	461a      	mov	r2, r3
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010658:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	3302      	adds	r3, #2
 801065e:	61bb      	str	r3, [r7, #24]
 8010660:	e007      	b.n	8010672 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010662:	69fb      	ldr	r3, [r7, #28]
 8010664:	781a      	ldrb	r2, [r3, #0]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	3301      	adds	r3, #1
 8010670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010678:	b29b      	uxth	r3, r3
 801067a:	3b01      	subs	r3, #1
 801067c:	b29a      	uxth	r2, r3
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801068a:	b29b      	uxth	r3, r3
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1c8      	bne.n	8010622 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	2200      	movs	r2, #0
 8010698:	2140      	movs	r1, #64	; 0x40
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	f001 fcec 	bl	8012078 <UART_WaitOnFlagUntilTimeout>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d005      	beq.n	80106b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	2220      	movs	r2, #32
 80106aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80106ae:	2303      	movs	r3, #3
 80106b0:	e006      	b.n	80106c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2220      	movs	r2, #32
 80106b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80106ba:	2300      	movs	r3, #0
 80106bc:	e000      	b.n	80106c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80106be:	2302      	movs	r3, #2
  }
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3720      	adds	r7, #32
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}

080106c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b08a      	sub	sp, #40	; 0x28
 80106cc:	af02      	add	r7, sp, #8
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	603b      	str	r3, [r7, #0]
 80106d4:	4613      	mov	r3, r2
 80106d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106de:	2b20      	cmp	r3, #32
 80106e0:	f040 80b5 	bne.w	801084e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d002      	beq.n	80106f0 <HAL_UART_Receive+0x28>
 80106ea:	88fb      	ldrh	r3, [r7, #6]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d101      	bne.n	80106f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80106f0:	2301      	movs	r3, #1
 80106f2:	e0ad      	b.n	8010850 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	2200      	movs	r2, #0
 80106f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2222      	movs	r2, #34	; 0x22
 8010700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2200      	movs	r2, #0
 8010708:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801070a:	f7f3 fe89 	bl	8004420 <HAL_GetTick>
 801070e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	88fa      	ldrh	r2, [r7, #6]
 8010714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	88fa      	ldrh	r2, [r7, #6]
 801071c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	689b      	ldr	r3, [r3, #8]
 8010724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010728:	d10e      	bne.n	8010748 <HAL_UART_Receive+0x80>
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	691b      	ldr	r3, [r3, #16]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d105      	bne.n	801073e <HAL_UART_Receive+0x76>
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010738:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801073c:	e02d      	b.n	801079a <HAL_UART_Receive+0xd2>
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	22ff      	movs	r2, #255	; 0xff
 8010742:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010746:	e028      	b.n	801079a <HAL_UART_Receive+0xd2>
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10d      	bne.n	801076c <HAL_UART_Receive+0xa4>
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	691b      	ldr	r3, [r3, #16]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d104      	bne.n	8010762 <HAL_UART_Receive+0x9a>
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	22ff      	movs	r2, #255	; 0xff
 801075c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010760:	e01b      	b.n	801079a <HAL_UART_Receive+0xd2>
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	227f      	movs	r2, #127	; 0x7f
 8010766:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801076a:	e016      	b.n	801079a <HAL_UART_Receive+0xd2>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	689b      	ldr	r3, [r3, #8]
 8010770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010774:	d10d      	bne.n	8010792 <HAL_UART_Receive+0xca>
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	691b      	ldr	r3, [r3, #16]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d104      	bne.n	8010788 <HAL_UART_Receive+0xc0>
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	227f      	movs	r2, #127	; 0x7f
 8010782:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010786:	e008      	b.n	801079a <HAL_UART_Receive+0xd2>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	223f      	movs	r2, #63	; 0x3f
 801078c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010790:	e003      	b.n	801079a <HAL_UART_Receive+0xd2>
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2200      	movs	r2, #0
 8010796:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	689b      	ldr	r3, [r3, #8]
 80107a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107aa:	d108      	bne.n	80107be <HAL_UART_Receive+0xf6>
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	691b      	ldr	r3, [r3, #16]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d104      	bne.n	80107be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80107b4:	2300      	movs	r3, #0
 80107b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	61bb      	str	r3, [r7, #24]
 80107bc:	e003      	b.n	80107c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80107c2:	2300      	movs	r3, #0
 80107c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80107c6:	e036      	b.n	8010836 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	2200      	movs	r2, #0
 80107d0:	2120      	movs	r1, #32
 80107d2:	68f8      	ldr	r0, [r7, #12]
 80107d4:	f001 fc50 	bl	8012078 <UART_WaitOnFlagUntilTimeout>
 80107d8:	4603      	mov	r3, r0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d005      	beq.n	80107ea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	2220      	movs	r2, #32
 80107e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80107e6:	2303      	movs	r3, #3
 80107e8:	e032      	b.n	8010850 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d10c      	bne.n	801080a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	8a7b      	ldrh	r3, [r7, #18]
 80107fa:	4013      	ands	r3, r2
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	3302      	adds	r3, #2
 8010806:	61bb      	str	r3, [r7, #24]
 8010808:	e00c      	b.n	8010824 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010810:	b2da      	uxtb	r2, r3
 8010812:	8a7b      	ldrh	r3, [r7, #18]
 8010814:	b2db      	uxtb	r3, r3
 8010816:	4013      	ands	r3, r2
 8010818:	b2da      	uxtb	r2, r3
 801081a:	69fb      	ldr	r3, [r7, #28]
 801081c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	3301      	adds	r3, #1
 8010822:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801082a:	b29b      	uxth	r3, r3
 801082c:	3b01      	subs	r3, #1
 801082e:	b29a      	uxth	r2, r3
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801083c:	b29b      	uxth	r3, r3
 801083e:	2b00      	cmp	r3, #0
 8010840:	d1c2      	bne.n	80107c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2220      	movs	r2, #32
 8010846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801084a:	2300      	movs	r3, #0
 801084c:	e000      	b.n	8010850 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801084e:	2302      	movs	r3, #2
  }
}
 8010850:	4618      	mov	r0, r3
 8010852:	3720      	adds	r7, #32
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}

08010858 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b08a      	sub	sp, #40	; 0x28
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	4613      	mov	r3, r2
 8010864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801086c:	2b20      	cmp	r3, #32
 801086e:	d137      	bne.n	80108e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d002      	beq.n	801087c <HAL_UART_Receive_IT+0x24>
 8010876:	88fb      	ldrh	r3, [r7, #6]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d101      	bne.n	8010880 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801087c:	2301      	movs	r3, #1
 801087e:	e030      	b.n	80108e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2200      	movs	r2, #0
 8010884:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	4a18      	ldr	r2, [pc, #96]	; (80108ec <HAL_UART_Receive_IT+0x94>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d01f      	beq.n	80108d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801089a:	2b00      	cmp	r3, #0
 801089c:	d018      	beq.n	80108d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	e853 3f00 	ldrex	r3, [r3]
 80108aa:	613b      	str	r3, [r7, #16]
   return(result);
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80108b2:	627b      	str	r3, [r7, #36]	; 0x24
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	461a      	mov	r2, r3
 80108ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108bc:	623b      	str	r3, [r7, #32]
 80108be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c0:	69f9      	ldr	r1, [r7, #28]
 80108c2:	6a3a      	ldr	r2, [r7, #32]
 80108c4:	e841 2300 	strex	r3, r2, [r1]
 80108c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80108ca:	69bb      	ldr	r3, [r7, #24]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1e6      	bne.n	801089e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80108d0:	88fb      	ldrh	r3, [r7, #6]
 80108d2:	461a      	mov	r2, r3
 80108d4:	68b9      	ldr	r1, [r7, #8]
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f001 fc3c 	bl	8012154 <UART_Start_Receive_IT>
 80108dc:	4603      	mov	r3, r0
 80108de:	e000      	b.n	80108e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80108e0:	2302      	movs	r3, #2
  }
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3728      	adds	r7, #40	; 0x28
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
 80108ea:	bf00      	nop
 80108ec:	58000c00 	.word	0x58000c00

080108f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b08a      	sub	sp, #40	; 0x28
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	4613      	mov	r3, r2
 80108fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010904:	2b20      	cmp	r3, #32
 8010906:	d167      	bne.n	80109d8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d002      	beq.n	8010914 <HAL_UART_Transmit_DMA+0x24>
 801090e:	88fb      	ldrh	r3, [r7, #6]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d101      	bne.n	8010918 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010914:	2301      	movs	r3, #1
 8010916:	e060      	b.n	80109da <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	68ba      	ldr	r2, [r7, #8]
 801091c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	88fa      	ldrh	r2, [r7, #6]
 8010922:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	88fa      	ldrh	r2, [r7, #6]
 801092a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	2200      	movs	r2, #0
 8010932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2221      	movs	r2, #33	; 0x21
 801093a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010942:	2b00      	cmp	r3, #0
 8010944:	d028      	beq.n	8010998 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801094a:	4a26      	ldr	r2, [pc, #152]	; (80109e4 <HAL_UART_Transmit_DMA+0xf4>)
 801094c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010952:	4a25      	ldr	r2, [pc, #148]	; (80109e8 <HAL_UART_Transmit_DMA+0xf8>)
 8010954:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801095a:	4a24      	ldr	r2, [pc, #144]	; (80109ec <HAL_UART_Transmit_DMA+0xfc>)
 801095c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010962:	2200      	movs	r2, #0
 8010964:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801096e:	4619      	mov	r1, r3
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	3328      	adds	r3, #40	; 0x28
 8010976:	461a      	mov	r2, r3
 8010978:	88fb      	ldrh	r3, [r7, #6]
 801097a:	f7f6 f9d5 	bl	8006d28 <HAL_DMA_Start_IT>
 801097e:	4603      	mov	r3, r0
 8010980:	2b00      	cmp	r3, #0
 8010982:	d009      	beq.n	8010998 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2210      	movs	r2, #16
 8010988:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2220      	movs	r2, #32
 8010990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010994:	2301      	movs	r3, #1
 8010996:	e020      	b.n	80109da <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2240      	movs	r2, #64	; 0x40
 801099e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	3308      	adds	r3, #8
 80109a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	e853 3f00 	ldrex	r3, [r3]
 80109ae:	613b      	str	r3, [r7, #16]
   return(result);
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109b6:	627b      	str	r3, [r7, #36]	; 0x24
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	3308      	adds	r3, #8
 80109be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109c0:	623a      	str	r2, [r7, #32]
 80109c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109c4:	69f9      	ldr	r1, [r7, #28]
 80109c6:	6a3a      	ldr	r2, [r7, #32]
 80109c8:	e841 2300 	strex	r3, r2, [r1]
 80109cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d1e5      	bne.n	80109a0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80109d4:	2300      	movs	r3, #0
 80109d6:	e000      	b.n	80109da <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80109d8:	2302      	movs	r3, #2
  }
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3728      	adds	r7, #40	; 0x28
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	080124e9 	.word	0x080124e9
 80109e8:	0801257f 	.word	0x0801257f
 80109ec:	0801259b 	.word	0x0801259b

080109f0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b09a      	sub	sp, #104	; 0x68
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a00:	e853 3f00 	ldrex	r3, [r3]
 8010a04:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	461a      	mov	r2, r3
 8010a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a16:	657b      	str	r3, [r7, #84]	; 0x54
 8010a18:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010a1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a1e:	e841 2300 	strex	r3, r2, [r1]
 8010a22:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d1e6      	bne.n	80109f8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	3308      	adds	r3, #8
 8010a30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a34:	e853 3f00 	ldrex	r3, [r3]
 8010a38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a3c:	4b46      	ldr	r3, [pc, #280]	; (8010b58 <HAL_UART_AbortReceive+0x168>)
 8010a3e:	4013      	ands	r3, r2
 8010a40:	663b      	str	r3, [r7, #96]	; 0x60
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	3308      	adds	r3, #8
 8010a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a4a:	643a      	str	r2, [r7, #64]	; 0x40
 8010a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a52:	e841 2300 	strex	r3, r2, [r1]
 8010a56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d1e5      	bne.n	8010a2a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	d118      	bne.n	8010a98 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a6c:	6a3b      	ldr	r3, [r7, #32]
 8010a6e:	e853 3f00 	ldrex	r3, [r3]
 8010a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	f023 0310 	bic.w	r3, r3, #16
 8010a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	461a      	mov	r2, r3
 8010a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a86:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a8c:	e841 2300 	strex	r3, r2, [r1]
 8010a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d1e6      	bne.n	8010a66 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	689b      	ldr	r3, [r3, #8]
 8010a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010aa2:	2b40      	cmp	r3, #64	; 0x40
 8010aa4:	d13b      	bne.n	8010b1e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	3308      	adds	r3, #8
 8010aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	e853 3f00 	ldrex	r3, [r3]
 8010ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010abc:	65bb      	str	r3, [r7, #88]	; 0x58
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	3308      	adds	r3, #8
 8010ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ac6:	61ba      	str	r2, [r7, #24]
 8010ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aca:	6979      	ldr	r1, [r7, #20]
 8010acc:	69ba      	ldr	r2, [r7, #24]
 8010ace:	e841 2300 	strex	r3, r2, [r1]
 8010ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d1e5      	bne.n	8010aa6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d01c      	beq.n	8010b1e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aea:	2200      	movs	r2, #0
 8010aec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7f6 fb81 	bl	80071fc <HAL_DMA_Abort>
 8010afa:	4603      	mov	r3, r0
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d00e      	beq.n	8010b1e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7f8 f806 	bl	8008b18 <HAL_DMA_GetError>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	2b20      	cmp	r3, #32
 8010b10:	d105      	bne.n	8010b1e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2210      	movs	r2, #16
 8010b16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8010b1a:	2303      	movs	r3, #3
 8010b1c:	e017      	b.n	8010b4e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	220f      	movs	r2, #15
 8010b2c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	699a      	ldr	r2, [r3, #24]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f042 0208 	orr.w	r2, r2, #8
 8010b3c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2220      	movs	r2, #32
 8010b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010b4c:	2300      	movs	r3, #0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3768      	adds	r7, #104	; 0x68
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	effffffe 	.word	0xeffffffe

08010b5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b0ba      	sub	sp, #232	; 0xe8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	69db      	ldr	r3, [r3, #28]
 8010b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010b82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010b86:	f640 030f 	movw	r3, #2063	; 0x80f
 8010b8a:	4013      	ands	r3, r2
 8010b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d11b      	bne.n	8010bd0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b9c:	f003 0320 	and.w	r3, r3, #32
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d015      	beq.n	8010bd0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ba8:	f003 0320 	and.w	r3, r3, #32
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d105      	bne.n	8010bbc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d009      	beq.n	8010bd0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	f000 8377 	beq.w	80112b4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	4798      	blx	r3
      }
      return;
 8010bce:	e371      	b.n	80112b4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	f000 8123 	beq.w	8010e20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010bda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010bde:	4b8d      	ldr	r3, [pc, #564]	; (8010e14 <HAL_UART_IRQHandler+0x2b8>)
 8010be0:	4013      	ands	r3, r2
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d106      	bne.n	8010bf4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010be6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010bea:	4b8b      	ldr	r3, [pc, #556]	; (8010e18 <HAL_UART_IRQHandler+0x2bc>)
 8010bec:	4013      	ands	r3, r2
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f000 8116 	beq.w	8010e20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bf8:	f003 0301 	and.w	r3, r3, #1
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d011      	beq.n	8010c24 <HAL_UART_IRQHandler+0xc8>
 8010c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d00b      	beq.n	8010c24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2201      	movs	r2, #1
 8010c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c1a:	f043 0201 	orr.w	r2, r3, #1
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c28:	f003 0302 	and.w	r3, r3, #2
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d011      	beq.n	8010c54 <HAL_UART_IRQHandler+0xf8>
 8010c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00b      	beq.n	8010c54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2202      	movs	r2, #2
 8010c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c4a:	f043 0204 	orr.w	r2, r3, #4
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c58:	f003 0304 	and.w	r3, r3, #4
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d011      	beq.n	8010c84 <HAL_UART_IRQHandler+0x128>
 8010c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c64:	f003 0301 	and.w	r3, r3, #1
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d00b      	beq.n	8010c84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2204      	movs	r2, #4
 8010c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c7a:	f043 0202 	orr.w	r2, r3, #2
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c88:	f003 0308 	and.w	r3, r3, #8
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d017      	beq.n	8010cc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c94:	f003 0320 	and.w	r3, r3, #32
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d105      	bne.n	8010ca8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010c9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010ca0:	4b5c      	ldr	r3, [pc, #368]	; (8010e14 <HAL_UART_IRQHandler+0x2b8>)
 8010ca2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d00b      	beq.n	8010cc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2208      	movs	r2, #8
 8010cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cb6:	f043 0208 	orr.w	r2, r3, #8
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d012      	beq.n	8010cf2 <HAL_UART_IRQHandler+0x196>
 8010ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00c      	beq.n	8010cf2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ce8:	f043 0220 	orr.w	r2, r3, #32
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	f000 82dd 	beq.w	80112b8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d02:	f003 0320 	and.w	r3, r3, #32
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d013      	beq.n	8010d32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d0e:	f003 0320 	and.w	r3, r3, #32
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d105      	bne.n	8010d22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d007      	beq.n	8010d32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d003      	beq.n	8010d32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	689b      	ldr	r3, [r3, #8]
 8010d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d46:	2b40      	cmp	r3, #64	; 0x40
 8010d48:	d005      	beq.n	8010d56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010d4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d054      	beq.n	8010e00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f001 fb60 	bl	801241c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d66:	2b40      	cmp	r3, #64	; 0x40
 8010d68:	d146      	bne.n	8010df8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	3308      	adds	r3, #8
 8010d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d78:	e853 3f00 	ldrex	r3, [r3]
 8010d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	3308      	adds	r3, #8
 8010d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010d96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010da6:	e841 2300 	strex	r3, r2, [r1]
 8010daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d1d9      	bne.n	8010d6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d017      	beq.n	8010df0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dc6:	4a15      	ldr	r2, [pc, #84]	; (8010e1c <HAL_UART_IRQHandler+0x2c0>)
 8010dc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7f6 fd31 	bl	8007838 <HAL_DMA_Abort_IT>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d019      	beq.n	8010e10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010dea:	4610      	mov	r0, r2
 8010dec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dee:	e00f      	b.n	8010e10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 fa77 	bl	80112e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010df6:	e00b      	b.n	8010e10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f000 fa73 	bl	80112e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dfe:	e007      	b.n	8010e10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f000 fa6f 	bl	80112e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010e0e:	e253      	b.n	80112b8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e10:	bf00      	nop
    return;
 8010e12:	e251      	b.n	80112b8 <HAL_UART_IRQHandler+0x75c>
 8010e14:	10000001 	.word	0x10000001
 8010e18:	04000120 	.word	0x04000120
 8010e1c:	0801261b 	.word	0x0801261b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	f040 81e7 	bne.w	80111f8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e2e:	f003 0310 	and.w	r3, r3, #16
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f000 81e0 	beq.w	80111f8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e3c:	f003 0310 	and.w	r3, r3, #16
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f000 81d9 	beq.w	80111f8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	2210      	movs	r2, #16
 8010e4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	689b      	ldr	r3, [r3, #8]
 8010e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e58:	2b40      	cmp	r3, #64	; 0x40
 8010e5a:	f040 8151 	bne.w	8011100 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	4a96      	ldr	r2, [pc, #600]	; (80110c0 <HAL_UART_IRQHandler+0x564>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d068      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4a93      	ldr	r2, [pc, #588]	; (80110c4 <HAL_UART_IRQHandler+0x568>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d061      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	4a91      	ldr	r2, [pc, #580]	; (80110c8 <HAL_UART_IRQHandler+0x56c>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d05a      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4a8e      	ldr	r2, [pc, #568]	; (80110cc <HAL_UART_IRQHandler+0x570>)
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d053      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4a8c      	ldr	r2, [pc, #560]	; (80110d0 <HAL_UART_IRQHandler+0x574>)
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	d04c      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	4a89      	ldr	r2, [pc, #548]	; (80110d4 <HAL_UART_IRQHandler+0x578>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d045      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a87      	ldr	r2, [pc, #540]	; (80110d8 <HAL_UART_IRQHandler+0x57c>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d03e      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4a84      	ldr	r2, [pc, #528]	; (80110dc <HAL_UART_IRQHandler+0x580>)
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d037      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4a82      	ldr	r2, [pc, #520]	; (80110e0 <HAL_UART_IRQHandler+0x584>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d030      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4a7f      	ldr	r2, [pc, #508]	; (80110e4 <HAL_UART_IRQHandler+0x588>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d029      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	4a7d      	ldr	r2, [pc, #500]	; (80110e8 <HAL_UART_IRQHandler+0x58c>)
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	d022      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a7a      	ldr	r2, [pc, #488]	; (80110ec <HAL_UART_IRQHandler+0x590>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d01b      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	4a78      	ldr	r2, [pc, #480]	; (80110f0 <HAL_UART_IRQHandler+0x594>)
 8010f10:	4293      	cmp	r3, r2
 8010f12:	d014      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	4a75      	ldr	r2, [pc, #468]	; (80110f4 <HAL_UART_IRQHandler+0x598>)
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d00d      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	4a73      	ldr	r2, [pc, #460]	; (80110f8 <HAL_UART_IRQHandler+0x59c>)
 8010f2c:	4293      	cmp	r3, r2
 8010f2e:	d006      	beq.n	8010f3e <HAL_UART_IRQHandler+0x3e2>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4a70      	ldr	r2, [pc, #448]	; (80110fc <HAL_UART_IRQHandler+0x5a0>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d106      	bne.n	8010f4c <HAL_UART_IRQHandler+0x3f0>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	e005      	b.n	8010f58 <HAL_UART_IRQHandler+0x3fc>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	685b      	ldr	r3, [r3, #4]
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010f5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	f000 81ab 	beq.w	80112bc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010f70:	429a      	cmp	r2, r3
 8010f72:	f080 81a3 	bcs.w	80112bc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010f7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f86:	69db      	ldr	r3, [r3, #28]
 8010f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f8c:	f000 8087 	beq.w	801109e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f9c:	e853 3f00 	ldrex	r3, [r3]
 8010fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010fbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010fca:	e841 2300 	strex	r3, r2, [r1]
 8010fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d1da      	bne.n	8010f90 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	3308      	adds	r3, #8
 8010fe0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010fe4:	e853 3f00 	ldrex	r3, [r3]
 8010fe8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010fec:	f023 0301 	bic.w	r3, r3, #1
 8010ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	3308      	adds	r3, #8
 8010ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010ffe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011002:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011004:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011006:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801100a:	e841 2300 	strex	r3, r2, [r1]
 801100e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011012:	2b00      	cmp	r3, #0
 8011014:	d1e1      	bne.n	8010fda <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	3308      	adds	r3, #8
 801101c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801101e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011020:	e853 3f00 	ldrex	r3, [r3]
 8011024:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801102c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	3308      	adds	r3, #8
 8011036:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801103a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801103c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801103e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011040:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011042:	e841 2300 	strex	r3, r2, [r1]
 8011046:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801104a:	2b00      	cmp	r3, #0
 801104c:	d1e3      	bne.n	8011016 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2220      	movs	r2, #32
 8011052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2200      	movs	r2, #0
 801105a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011064:	e853 3f00 	ldrex	r3, [r3]
 8011068:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801106a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801106c:	f023 0310 	bic.w	r3, r3, #16
 8011070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	461a      	mov	r2, r3
 801107a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801107e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011080:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011082:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011084:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011086:	e841 2300 	strex	r3, r2, [r1]
 801108a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801108c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801108e:	2b00      	cmp	r3, #0
 8011090:	d1e4      	bne.n	801105c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011098:	4618      	mov	r0, r3
 801109a:	f7f6 f8af 	bl	80071fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2202      	movs	r2, #2
 80110a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	4619      	mov	r1, r3
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 f91d 	bl	80112f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80110be:	e0fd      	b.n	80112bc <HAL_UART_IRQHandler+0x760>
 80110c0:	40020010 	.word	0x40020010
 80110c4:	40020028 	.word	0x40020028
 80110c8:	40020040 	.word	0x40020040
 80110cc:	40020058 	.word	0x40020058
 80110d0:	40020070 	.word	0x40020070
 80110d4:	40020088 	.word	0x40020088
 80110d8:	400200a0 	.word	0x400200a0
 80110dc:	400200b8 	.word	0x400200b8
 80110e0:	40020410 	.word	0x40020410
 80110e4:	40020428 	.word	0x40020428
 80110e8:	40020440 	.word	0x40020440
 80110ec:	40020458 	.word	0x40020458
 80110f0:	40020470 	.word	0x40020470
 80110f4:	40020488 	.word	0x40020488
 80110f8:	400204a0 	.word	0x400204a0
 80110fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801110c:	b29b      	uxth	r3, r3
 801110e:	1ad3      	subs	r3, r2, r3
 8011110:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801111a:	b29b      	uxth	r3, r3
 801111c:	2b00      	cmp	r3, #0
 801111e:	f000 80cf 	beq.w	80112c0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8011122:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011126:	2b00      	cmp	r3, #0
 8011128:	f000 80ca 	beq.w	80112c0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011134:	e853 3f00 	ldrex	r3, [r3]
 8011138:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801113a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801113c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011140:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	461a      	mov	r2, r3
 801114a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801114e:	647b      	str	r3, [r7, #68]	; 0x44
 8011150:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011152:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011156:	e841 2300 	strex	r3, r2, [r1]
 801115a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801115c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801115e:	2b00      	cmp	r3, #0
 8011160:	d1e4      	bne.n	801112c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	3308      	adds	r3, #8
 8011168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116c:	e853 3f00 	ldrex	r3, [r3]
 8011170:	623b      	str	r3, [r7, #32]
   return(result);
 8011172:	6a3a      	ldr	r2, [r7, #32]
 8011174:	4b55      	ldr	r3, [pc, #340]	; (80112cc <HAL_UART_IRQHandler+0x770>)
 8011176:	4013      	ands	r3, r2
 8011178:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	3308      	adds	r3, #8
 8011182:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011186:	633a      	str	r2, [r7, #48]	; 0x30
 8011188:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801118a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801118c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801118e:	e841 2300 	strex	r3, r2, [r1]
 8011192:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011196:	2b00      	cmp	r3, #0
 8011198:	d1e3      	bne.n	8011162 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2220      	movs	r2, #32
 801119e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	e853 3f00 	ldrex	r3, [r3]
 80111ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f023 0310 	bic.w	r3, r3, #16
 80111c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	461a      	mov	r2, r3
 80111cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80111d0:	61fb      	str	r3, [r7, #28]
 80111d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111d4:	69b9      	ldr	r1, [r7, #24]
 80111d6:	69fa      	ldr	r2, [r7, #28]
 80111d8:	e841 2300 	strex	r3, r2, [r1]
 80111dc:	617b      	str	r3, [r7, #20]
   return(result);
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d1e4      	bne.n	80111ae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2202      	movs	r2, #2
 80111e8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80111ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80111ee:	4619      	mov	r1, r3
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f000 f881 	bl	80112f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80111f6:	e063      	b.n	80112c0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80111f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011200:	2b00      	cmp	r3, #0
 8011202:	d00e      	beq.n	8011222 <HAL_UART_IRQHandler+0x6c6>
 8011204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801120c:	2b00      	cmp	r3, #0
 801120e:	d008      	beq.n	8011222 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f001 ff5a 	bl	80130d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011220:	e051      	b.n	80112c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801122a:	2b00      	cmp	r3, #0
 801122c:	d014      	beq.n	8011258 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801122e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011236:	2b00      	cmp	r3, #0
 8011238:	d105      	bne.n	8011246 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801123a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801123e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011242:	2b00      	cmp	r3, #0
 8011244:	d008      	beq.n	8011258 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801124a:	2b00      	cmp	r3, #0
 801124c:	d03a      	beq.n	80112c4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	4798      	blx	r3
    }
    return;
 8011256:	e035      	b.n	80112c4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801125c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011260:	2b00      	cmp	r3, #0
 8011262:	d009      	beq.n	8011278 <HAL_UART_IRQHandler+0x71c>
 8011264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801126c:	2b00      	cmp	r3, #0
 801126e:	d003      	beq.n	8011278 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f001 f9e8 	bl	8012646 <UART_EndTransmit_IT>
    return;
 8011276:	e026      	b.n	80112c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801127c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011280:	2b00      	cmp	r3, #0
 8011282:	d009      	beq.n	8011298 <HAL_UART_IRQHandler+0x73c>
 8011284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011288:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801128c:	2b00      	cmp	r3, #0
 801128e:	d003      	beq.n	8011298 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f001 ff33 	bl	80130fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011296:	e016      	b.n	80112c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801129c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d010      	beq.n	80112c6 <HAL_UART_IRQHandler+0x76a>
 80112a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	da0c      	bge.n	80112c6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f001 ff1b 	bl	80130e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80112b2:	e008      	b.n	80112c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80112b4:	bf00      	nop
 80112b6:	e006      	b.n	80112c6 <HAL_UART_IRQHandler+0x76a>
    return;
 80112b8:	bf00      	nop
 80112ba:	e004      	b.n	80112c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80112bc:	bf00      	nop
 80112be:	e002      	b.n	80112c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80112c0:	bf00      	nop
 80112c2:	e000      	b.n	80112c6 <HAL_UART_IRQHandler+0x76a>
    return;
 80112c4:	bf00      	nop
  }
}
 80112c6:	37e8      	adds	r7, #232	; 0xe8
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}
 80112cc:	effffffe 	.word	0xeffffffe

080112d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80112d0:	b480      	push	{r7}
 80112d2:	b083      	sub	sp, #12
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80112d8:	bf00      	nop
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr

080112e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80112ec:	bf00      	nop
 80112ee:	370c      	adds	r7, #12
 80112f0:	46bd      	mov	sp, r7
 80112f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f6:	4770      	bx	lr

080112f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b083      	sub	sp, #12
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	460b      	mov	r3, r1
 8011302:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011304:	bf00      	nop
 8011306:	370c      	adds	r7, #12
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr

08011310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011314:	b092      	sub	sp, #72	; 0x48
 8011316:	af00      	add	r7, sp, #0
 8011318:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801131a:	2300      	movs	r3, #0
 801131c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	689a      	ldr	r2, [r3, #8]
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	691b      	ldr	r3, [r3, #16]
 8011328:	431a      	orrs	r2, r3
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	695b      	ldr	r3, [r3, #20]
 801132e:	431a      	orrs	r2, r3
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	69db      	ldr	r3, [r3, #28]
 8011334:	4313      	orrs	r3, r2
 8011336:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	4bbe      	ldr	r3, [pc, #760]	; (8011638 <UART_SetConfig+0x328>)
 8011340:	4013      	ands	r3, r2
 8011342:	697a      	ldr	r2, [r7, #20]
 8011344:	6812      	ldr	r2, [r2, #0]
 8011346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011348:	430b      	orrs	r3, r1
 801134a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	68da      	ldr	r2, [r3, #12]
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	430a      	orrs	r2, r1
 8011360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	699b      	ldr	r3, [r3, #24]
 8011366:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	4ab3      	ldr	r2, [pc, #716]	; (801163c <UART_SetConfig+0x32c>)
 801136e:	4293      	cmp	r3, r2
 8011370:	d004      	beq.n	801137c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	6a1b      	ldr	r3, [r3, #32]
 8011376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011378:	4313      	orrs	r3, r2
 801137a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	689a      	ldr	r2, [r3, #8]
 8011382:	4baf      	ldr	r3, [pc, #700]	; (8011640 <UART_SetConfig+0x330>)
 8011384:	4013      	ands	r3, r2
 8011386:	697a      	ldr	r2, [r7, #20]
 8011388:	6812      	ldr	r2, [r2, #0]
 801138a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801138c:	430b      	orrs	r3, r1
 801138e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011396:	f023 010f 	bic.w	r1, r3, #15
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	430a      	orrs	r2, r1
 80113a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	4aa6      	ldr	r2, [pc, #664]	; (8011644 <UART_SetConfig+0x334>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d177      	bne.n	80114a0 <UART_SetConfig+0x190>
 80113b0:	4ba5      	ldr	r3, [pc, #660]	; (8011648 <UART_SetConfig+0x338>)
 80113b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80113b8:	2b28      	cmp	r3, #40	; 0x28
 80113ba:	d86d      	bhi.n	8011498 <UART_SetConfig+0x188>
 80113bc:	a201      	add	r2, pc, #4	; (adr r2, 80113c4 <UART_SetConfig+0xb4>)
 80113be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c2:	bf00      	nop
 80113c4:	08011469 	.word	0x08011469
 80113c8:	08011499 	.word	0x08011499
 80113cc:	08011499 	.word	0x08011499
 80113d0:	08011499 	.word	0x08011499
 80113d4:	08011499 	.word	0x08011499
 80113d8:	08011499 	.word	0x08011499
 80113dc:	08011499 	.word	0x08011499
 80113e0:	08011499 	.word	0x08011499
 80113e4:	08011471 	.word	0x08011471
 80113e8:	08011499 	.word	0x08011499
 80113ec:	08011499 	.word	0x08011499
 80113f0:	08011499 	.word	0x08011499
 80113f4:	08011499 	.word	0x08011499
 80113f8:	08011499 	.word	0x08011499
 80113fc:	08011499 	.word	0x08011499
 8011400:	08011499 	.word	0x08011499
 8011404:	08011479 	.word	0x08011479
 8011408:	08011499 	.word	0x08011499
 801140c:	08011499 	.word	0x08011499
 8011410:	08011499 	.word	0x08011499
 8011414:	08011499 	.word	0x08011499
 8011418:	08011499 	.word	0x08011499
 801141c:	08011499 	.word	0x08011499
 8011420:	08011499 	.word	0x08011499
 8011424:	08011481 	.word	0x08011481
 8011428:	08011499 	.word	0x08011499
 801142c:	08011499 	.word	0x08011499
 8011430:	08011499 	.word	0x08011499
 8011434:	08011499 	.word	0x08011499
 8011438:	08011499 	.word	0x08011499
 801143c:	08011499 	.word	0x08011499
 8011440:	08011499 	.word	0x08011499
 8011444:	08011489 	.word	0x08011489
 8011448:	08011499 	.word	0x08011499
 801144c:	08011499 	.word	0x08011499
 8011450:	08011499 	.word	0x08011499
 8011454:	08011499 	.word	0x08011499
 8011458:	08011499 	.word	0x08011499
 801145c:	08011499 	.word	0x08011499
 8011460:	08011499 	.word	0x08011499
 8011464:	08011491 	.word	0x08011491
 8011468:	2301      	movs	r3, #1
 801146a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146e:	e222      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011470:	2304      	movs	r3, #4
 8011472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011476:	e21e      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011478:	2308      	movs	r3, #8
 801147a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147e:	e21a      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011480:	2310      	movs	r3, #16
 8011482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011486:	e216      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011488:	2320      	movs	r3, #32
 801148a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801148e:	e212      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011490:	2340      	movs	r3, #64	; 0x40
 8011492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011496:	e20e      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011498:	2380      	movs	r3, #128	; 0x80
 801149a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149e:	e20a      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	4a69      	ldr	r2, [pc, #420]	; (801164c <UART_SetConfig+0x33c>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d130      	bne.n	801150c <UART_SetConfig+0x1fc>
 80114aa:	4b67      	ldr	r3, [pc, #412]	; (8011648 <UART_SetConfig+0x338>)
 80114ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ae:	f003 0307 	and.w	r3, r3, #7
 80114b2:	2b05      	cmp	r3, #5
 80114b4:	d826      	bhi.n	8011504 <UART_SetConfig+0x1f4>
 80114b6:	a201      	add	r2, pc, #4	; (adr r2, 80114bc <UART_SetConfig+0x1ac>)
 80114b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114bc:	080114d5 	.word	0x080114d5
 80114c0:	080114dd 	.word	0x080114dd
 80114c4:	080114e5 	.word	0x080114e5
 80114c8:	080114ed 	.word	0x080114ed
 80114cc:	080114f5 	.word	0x080114f5
 80114d0:	080114fd 	.word	0x080114fd
 80114d4:	2300      	movs	r3, #0
 80114d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114da:	e1ec      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80114dc:	2304      	movs	r3, #4
 80114de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114e2:	e1e8      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80114e4:	2308      	movs	r3, #8
 80114e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ea:	e1e4      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80114ec:	2310      	movs	r3, #16
 80114ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114f2:	e1e0      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80114f4:	2320      	movs	r3, #32
 80114f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114fa:	e1dc      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80114fc:	2340      	movs	r3, #64	; 0x40
 80114fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011502:	e1d8      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011504:	2380      	movs	r3, #128	; 0x80
 8011506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801150a:	e1d4      	b.n	80118b6 <UART_SetConfig+0x5a6>
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4a4f      	ldr	r2, [pc, #316]	; (8011650 <UART_SetConfig+0x340>)
 8011512:	4293      	cmp	r3, r2
 8011514:	d130      	bne.n	8011578 <UART_SetConfig+0x268>
 8011516:	4b4c      	ldr	r3, [pc, #304]	; (8011648 <UART_SetConfig+0x338>)
 8011518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801151a:	f003 0307 	and.w	r3, r3, #7
 801151e:	2b05      	cmp	r3, #5
 8011520:	d826      	bhi.n	8011570 <UART_SetConfig+0x260>
 8011522:	a201      	add	r2, pc, #4	; (adr r2, 8011528 <UART_SetConfig+0x218>)
 8011524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011528:	08011541 	.word	0x08011541
 801152c:	08011549 	.word	0x08011549
 8011530:	08011551 	.word	0x08011551
 8011534:	08011559 	.word	0x08011559
 8011538:	08011561 	.word	0x08011561
 801153c:	08011569 	.word	0x08011569
 8011540:	2300      	movs	r3, #0
 8011542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011546:	e1b6      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011548:	2304      	movs	r3, #4
 801154a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154e:	e1b2      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011550:	2308      	movs	r3, #8
 8011552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011556:	e1ae      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011558:	2310      	movs	r3, #16
 801155a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155e:	e1aa      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011560:	2320      	movs	r3, #32
 8011562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011566:	e1a6      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011568:	2340      	movs	r3, #64	; 0x40
 801156a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156e:	e1a2      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011570:	2380      	movs	r3, #128	; 0x80
 8011572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011576:	e19e      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4a35      	ldr	r2, [pc, #212]	; (8011654 <UART_SetConfig+0x344>)
 801157e:	4293      	cmp	r3, r2
 8011580:	d130      	bne.n	80115e4 <UART_SetConfig+0x2d4>
 8011582:	4b31      	ldr	r3, [pc, #196]	; (8011648 <UART_SetConfig+0x338>)
 8011584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011586:	f003 0307 	and.w	r3, r3, #7
 801158a:	2b05      	cmp	r3, #5
 801158c:	d826      	bhi.n	80115dc <UART_SetConfig+0x2cc>
 801158e:	a201      	add	r2, pc, #4	; (adr r2, 8011594 <UART_SetConfig+0x284>)
 8011590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011594:	080115ad 	.word	0x080115ad
 8011598:	080115b5 	.word	0x080115b5
 801159c:	080115bd 	.word	0x080115bd
 80115a0:	080115c5 	.word	0x080115c5
 80115a4:	080115cd 	.word	0x080115cd
 80115a8:	080115d5 	.word	0x080115d5
 80115ac:	2300      	movs	r3, #0
 80115ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115b2:	e180      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80115b4:	2304      	movs	r3, #4
 80115b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ba:	e17c      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80115bc:	2308      	movs	r3, #8
 80115be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115c2:	e178      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80115c4:	2310      	movs	r3, #16
 80115c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ca:	e174      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80115cc:	2320      	movs	r3, #32
 80115ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115d2:	e170      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80115d4:	2340      	movs	r3, #64	; 0x40
 80115d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115da:	e16c      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80115dc:	2380      	movs	r3, #128	; 0x80
 80115de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115e2:	e168      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4a1b      	ldr	r2, [pc, #108]	; (8011658 <UART_SetConfig+0x348>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d142      	bne.n	8011674 <UART_SetConfig+0x364>
 80115ee:	4b16      	ldr	r3, [pc, #88]	; (8011648 <UART_SetConfig+0x338>)
 80115f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115f2:	f003 0307 	and.w	r3, r3, #7
 80115f6:	2b05      	cmp	r3, #5
 80115f8:	d838      	bhi.n	801166c <UART_SetConfig+0x35c>
 80115fa:	a201      	add	r2, pc, #4	; (adr r2, 8011600 <UART_SetConfig+0x2f0>)
 80115fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011600:	08011619 	.word	0x08011619
 8011604:	08011621 	.word	0x08011621
 8011608:	08011629 	.word	0x08011629
 801160c:	08011631 	.word	0x08011631
 8011610:	0801165d 	.word	0x0801165d
 8011614:	08011665 	.word	0x08011665
 8011618:	2300      	movs	r3, #0
 801161a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801161e:	e14a      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011620:	2304      	movs	r3, #4
 8011622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011626:	e146      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011628:	2308      	movs	r3, #8
 801162a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801162e:	e142      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011630:	2310      	movs	r3, #16
 8011632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011636:	e13e      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011638:	cfff69f3 	.word	0xcfff69f3
 801163c:	58000c00 	.word	0x58000c00
 8011640:	11fff4ff 	.word	0x11fff4ff
 8011644:	40011000 	.word	0x40011000
 8011648:	58024400 	.word	0x58024400
 801164c:	40004400 	.word	0x40004400
 8011650:	40004800 	.word	0x40004800
 8011654:	40004c00 	.word	0x40004c00
 8011658:	40005000 	.word	0x40005000
 801165c:	2320      	movs	r3, #32
 801165e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011662:	e128      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011664:	2340      	movs	r3, #64	; 0x40
 8011666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801166a:	e124      	b.n	80118b6 <UART_SetConfig+0x5a6>
 801166c:	2380      	movs	r3, #128	; 0x80
 801166e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011672:	e120      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4acb      	ldr	r2, [pc, #812]	; (80119a8 <UART_SetConfig+0x698>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d176      	bne.n	801176c <UART_SetConfig+0x45c>
 801167e:	4bcb      	ldr	r3, [pc, #812]	; (80119ac <UART_SetConfig+0x69c>)
 8011680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011686:	2b28      	cmp	r3, #40	; 0x28
 8011688:	d86c      	bhi.n	8011764 <UART_SetConfig+0x454>
 801168a:	a201      	add	r2, pc, #4	; (adr r2, 8011690 <UART_SetConfig+0x380>)
 801168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011690:	08011735 	.word	0x08011735
 8011694:	08011765 	.word	0x08011765
 8011698:	08011765 	.word	0x08011765
 801169c:	08011765 	.word	0x08011765
 80116a0:	08011765 	.word	0x08011765
 80116a4:	08011765 	.word	0x08011765
 80116a8:	08011765 	.word	0x08011765
 80116ac:	08011765 	.word	0x08011765
 80116b0:	0801173d 	.word	0x0801173d
 80116b4:	08011765 	.word	0x08011765
 80116b8:	08011765 	.word	0x08011765
 80116bc:	08011765 	.word	0x08011765
 80116c0:	08011765 	.word	0x08011765
 80116c4:	08011765 	.word	0x08011765
 80116c8:	08011765 	.word	0x08011765
 80116cc:	08011765 	.word	0x08011765
 80116d0:	08011745 	.word	0x08011745
 80116d4:	08011765 	.word	0x08011765
 80116d8:	08011765 	.word	0x08011765
 80116dc:	08011765 	.word	0x08011765
 80116e0:	08011765 	.word	0x08011765
 80116e4:	08011765 	.word	0x08011765
 80116e8:	08011765 	.word	0x08011765
 80116ec:	08011765 	.word	0x08011765
 80116f0:	0801174d 	.word	0x0801174d
 80116f4:	08011765 	.word	0x08011765
 80116f8:	08011765 	.word	0x08011765
 80116fc:	08011765 	.word	0x08011765
 8011700:	08011765 	.word	0x08011765
 8011704:	08011765 	.word	0x08011765
 8011708:	08011765 	.word	0x08011765
 801170c:	08011765 	.word	0x08011765
 8011710:	08011755 	.word	0x08011755
 8011714:	08011765 	.word	0x08011765
 8011718:	08011765 	.word	0x08011765
 801171c:	08011765 	.word	0x08011765
 8011720:	08011765 	.word	0x08011765
 8011724:	08011765 	.word	0x08011765
 8011728:	08011765 	.word	0x08011765
 801172c:	08011765 	.word	0x08011765
 8011730:	0801175d 	.word	0x0801175d
 8011734:	2301      	movs	r3, #1
 8011736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801173a:	e0bc      	b.n	80118b6 <UART_SetConfig+0x5a6>
 801173c:	2304      	movs	r3, #4
 801173e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011742:	e0b8      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011744:	2308      	movs	r3, #8
 8011746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801174a:	e0b4      	b.n	80118b6 <UART_SetConfig+0x5a6>
 801174c:	2310      	movs	r3, #16
 801174e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011752:	e0b0      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011754:	2320      	movs	r3, #32
 8011756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801175a:	e0ac      	b.n	80118b6 <UART_SetConfig+0x5a6>
 801175c:	2340      	movs	r3, #64	; 0x40
 801175e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011762:	e0a8      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011764:	2380      	movs	r3, #128	; 0x80
 8011766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801176a:	e0a4      	b.n	80118b6 <UART_SetConfig+0x5a6>
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	4a8f      	ldr	r2, [pc, #572]	; (80119b0 <UART_SetConfig+0x6a0>)
 8011772:	4293      	cmp	r3, r2
 8011774:	d130      	bne.n	80117d8 <UART_SetConfig+0x4c8>
 8011776:	4b8d      	ldr	r3, [pc, #564]	; (80119ac <UART_SetConfig+0x69c>)
 8011778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801177a:	f003 0307 	and.w	r3, r3, #7
 801177e:	2b05      	cmp	r3, #5
 8011780:	d826      	bhi.n	80117d0 <UART_SetConfig+0x4c0>
 8011782:	a201      	add	r2, pc, #4	; (adr r2, 8011788 <UART_SetConfig+0x478>)
 8011784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011788:	080117a1 	.word	0x080117a1
 801178c:	080117a9 	.word	0x080117a9
 8011790:	080117b1 	.word	0x080117b1
 8011794:	080117b9 	.word	0x080117b9
 8011798:	080117c1 	.word	0x080117c1
 801179c:	080117c9 	.word	0x080117c9
 80117a0:	2300      	movs	r3, #0
 80117a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117a6:	e086      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80117a8:	2304      	movs	r3, #4
 80117aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ae:	e082      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80117b0:	2308      	movs	r3, #8
 80117b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117b6:	e07e      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80117b8:	2310      	movs	r3, #16
 80117ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117be:	e07a      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80117c0:	2320      	movs	r3, #32
 80117c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117c6:	e076      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80117c8:	2340      	movs	r3, #64	; 0x40
 80117ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ce:	e072      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80117d0:	2380      	movs	r3, #128	; 0x80
 80117d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117d6:	e06e      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	4a75      	ldr	r2, [pc, #468]	; (80119b4 <UART_SetConfig+0x6a4>)
 80117de:	4293      	cmp	r3, r2
 80117e0:	d130      	bne.n	8011844 <UART_SetConfig+0x534>
 80117e2:	4b72      	ldr	r3, [pc, #456]	; (80119ac <UART_SetConfig+0x69c>)
 80117e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117e6:	f003 0307 	and.w	r3, r3, #7
 80117ea:	2b05      	cmp	r3, #5
 80117ec:	d826      	bhi.n	801183c <UART_SetConfig+0x52c>
 80117ee:	a201      	add	r2, pc, #4	; (adr r2, 80117f4 <UART_SetConfig+0x4e4>)
 80117f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f4:	0801180d 	.word	0x0801180d
 80117f8:	08011815 	.word	0x08011815
 80117fc:	0801181d 	.word	0x0801181d
 8011800:	08011825 	.word	0x08011825
 8011804:	0801182d 	.word	0x0801182d
 8011808:	08011835 	.word	0x08011835
 801180c:	2300      	movs	r3, #0
 801180e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011812:	e050      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011814:	2304      	movs	r3, #4
 8011816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801181a:	e04c      	b.n	80118b6 <UART_SetConfig+0x5a6>
 801181c:	2308      	movs	r3, #8
 801181e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011822:	e048      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011824:	2310      	movs	r3, #16
 8011826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801182a:	e044      	b.n	80118b6 <UART_SetConfig+0x5a6>
 801182c:	2320      	movs	r3, #32
 801182e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011832:	e040      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011834:	2340      	movs	r3, #64	; 0x40
 8011836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801183a:	e03c      	b.n	80118b6 <UART_SetConfig+0x5a6>
 801183c:	2380      	movs	r3, #128	; 0x80
 801183e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011842:	e038      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	4a5b      	ldr	r2, [pc, #364]	; (80119b8 <UART_SetConfig+0x6a8>)
 801184a:	4293      	cmp	r3, r2
 801184c:	d130      	bne.n	80118b0 <UART_SetConfig+0x5a0>
 801184e:	4b57      	ldr	r3, [pc, #348]	; (80119ac <UART_SetConfig+0x69c>)
 8011850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011852:	f003 0307 	and.w	r3, r3, #7
 8011856:	2b05      	cmp	r3, #5
 8011858:	d826      	bhi.n	80118a8 <UART_SetConfig+0x598>
 801185a:	a201      	add	r2, pc, #4	; (adr r2, 8011860 <UART_SetConfig+0x550>)
 801185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011860:	08011879 	.word	0x08011879
 8011864:	08011881 	.word	0x08011881
 8011868:	08011889 	.word	0x08011889
 801186c:	08011891 	.word	0x08011891
 8011870:	08011899 	.word	0x08011899
 8011874:	080118a1 	.word	0x080118a1
 8011878:	2302      	movs	r3, #2
 801187a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801187e:	e01a      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011880:	2304      	movs	r3, #4
 8011882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011886:	e016      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011888:	2308      	movs	r3, #8
 801188a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801188e:	e012      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011890:	2310      	movs	r3, #16
 8011892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011896:	e00e      	b.n	80118b6 <UART_SetConfig+0x5a6>
 8011898:	2320      	movs	r3, #32
 801189a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801189e:	e00a      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80118a0:	2340      	movs	r3, #64	; 0x40
 80118a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118a6:	e006      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80118a8:	2380      	movs	r3, #128	; 0x80
 80118aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ae:	e002      	b.n	80118b6 <UART_SetConfig+0x5a6>
 80118b0:	2380      	movs	r3, #128	; 0x80
 80118b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4a3f      	ldr	r2, [pc, #252]	; (80119b8 <UART_SetConfig+0x6a8>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	f040 80f8 	bne.w	8011ab2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80118c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80118c6:	2b20      	cmp	r3, #32
 80118c8:	dc46      	bgt.n	8011958 <UART_SetConfig+0x648>
 80118ca:	2b02      	cmp	r3, #2
 80118cc:	f2c0 8082 	blt.w	80119d4 <UART_SetConfig+0x6c4>
 80118d0:	3b02      	subs	r3, #2
 80118d2:	2b1e      	cmp	r3, #30
 80118d4:	d87e      	bhi.n	80119d4 <UART_SetConfig+0x6c4>
 80118d6:	a201      	add	r2, pc, #4	; (adr r2, 80118dc <UART_SetConfig+0x5cc>)
 80118d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118dc:	0801195f 	.word	0x0801195f
 80118e0:	080119d5 	.word	0x080119d5
 80118e4:	08011967 	.word	0x08011967
 80118e8:	080119d5 	.word	0x080119d5
 80118ec:	080119d5 	.word	0x080119d5
 80118f0:	080119d5 	.word	0x080119d5
 80118f4:	08011977 	.word	0x08011977
 80118f8:	080119d5 	.word	0x080119d5
 80118fc:	080119d5 	.word	0x080119d5
 8011900:	080119d5 	.word	0x080119d5
 8011904:	080119d5 	.word	0x080119d5
 8011908:	080119d5 	.word	0x080119d5
 801190c:	080119d5 	.word	0x080119d5
 8011910:	080119d5 	.word	0x080119d5
 8011914:	08011987 	.word	0x08011987
 8011918:	080119d5 	.word	0x080119d5
 801191c:	080119d5 	.word	0x080119d5
 8011920:	080119d5 	.word	0x080119d5
 8011924:	080119d5 	.word	0x080119d5
 8011928:	080119d5 	.word	0x080119d5
 801192c:	080119d5 	.word	0x080119d5
 8011930:	080119d5 	.word	0x080119d5
 8011934:	080119d5 	.word	0x080119d5
 8011938:	080119d5 	.word	0x080119d5
 801193c:	080119d5 	.word	0x080119d5
 8011940:	080119d5 	.word	0x080119d5
 8011944:	080119d5 	.word	0x080119d5
 8011948:	080119d5 	.word	0x080119d5
 801194c:	080119d5 	.word	0x080119d5
 8011950:	080119d5 	.word	0x080119d5
 8011954:	080119c7 	.word	0x080119c7
 8011958:	2b40      	cmp	r3, #64	; 0x40
 801195a:	d037      	beq.n	80119cc <UART_SetConfig+0x6bc>
 801195c:	e03a      	b.n	80119d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801195e:	f7fb fce5 	bl	800d32c <HAL_RCCEx_GetD3PCLK1Freq>
 8011962:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011964:	e03c      	b.n	80119e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801196a:	4618      	mov	r0, r3
 801196c:	f7fb fcf4 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011974:	e034      	b.n	80119e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011976:	f107 0318 	add.w	r3, r7, #24
 801197a:	4618      	mov	r0, r3
 801197c:	f7fb fe40 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011984:	e02c      	b.n	80119e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011986:	4b09      	ldr	r3, [pc, #36]	; (80119ac <UART_SetConfig+0x69c>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	f003 0320 	and.w	r3, r3, #32
 801198e:	2b00      	cmp	r3, #0
 8011990:	d016      	beq.n	80119c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011992:	4b06      	ldr	r3, [pc, #24]	; (80119ac <UART_SetConfig+0x69c>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	08db      	lsrs	r3, r3, #3
 8011998:	f003 0303 	and.w	r3, r3, #3
 801199c:	4a07      	ldr	r2, [pc, #28]	; (80119bc <UART_SetConfig+0x6ac>)
 801199e:	fa22 f303 	lsr.w	r3, r2, r3
 80119a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80119a4:	e01c      	b.n	80119e0 <UART_SetConfig+0x6d0>
 80119a6:	bf00      	nop
 80119a8:	40011400 	.word	0x40011400
 80119ac:	58024400 	.word	0x58024400
 80119b0:	40007800 	.word	0x40007800
 80119b4:	40007c00 	.word	0x40007c00
 80119b8:	58000c00 	.word	0x58000c00
 80119bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80119c0:	4b9d      	ldr	r3, [pc, #628]	; (8011c38 <UART_SetConfig+0x928>)
 80119c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119c4:	e00c      	b.n	80119e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80119c6:	4b9d      	ldr	r3, [pc, #628]	; (8011c3c <UART_SetConfig+0x92c>)
 80119c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119ca:	e009      	b.n	80119e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80119cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119d2:	e005      	b.n	80119e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80119d4:	2300      	movs	r3, #0
 80119d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80119d8:	2301      	movs	r3, #1
 80119da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80119de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80119e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f000 81de 	beq.w	8011da4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ec:	4a94      	ldr	r2, [pc, #592]	; (8011c40 <UART_SetConfig+0x930>)
 80119ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80119f2:	461a      	mov	r2, r3
 80119f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80119fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	685a      	ldr	r2, [r3, #4]
 8011a00:	4613      	mov	r3, r2
 8011a02:	005b      	lsls	r3, r3, #1
 8011a04:	4413      	add	r3, r2
 8011a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d305      	bcc.n	8011a18 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d903      	bls.n	8011a20 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011a18:	2301      	movs	r3, #1
 8011a1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011a1e:	e1c1      	b.n	8011da4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a22:	2200      	movs	r2, #0
 8011a24:	60bb      	str	r3, [r7, #8]
 8011a26:	60fa      	str	r2, [r7, #12]
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2c:	4a84      	ldr	r2, [pc, #528]	; (8011c40 <UART_SetConfig+0x930>)
 8011a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	2200      	movs	r2, #0
 8011a36:	603b      	str	r3, [r7, #0]
 8011a38:	607a      	str	r2, [r7, #4]
 8011a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011a42:	f7ee fc4d 	bl	80002e0 <__aeabi_uldivmod>
 8011a46:	4602      	mov	r2, r0
 8011a48:	460b      	mov	r3, r1
 8011a4a:	4610      	mov	r0, r2
 8011a4c:	4619      	mov	r1, r3
 8011a4e:	f04f 0200 	mov.w	r2, #0
 8011a52:	f04f 0300 	mov.w	r3, #0
 8011a56:	020b      	lsls	r3, r1, #8
 8011a58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011a5c:	0202      	lsls	r2, r0, #8
 8011a5e:	6979      	ldr	r1, [r7, #20]
 8011a60:	6849      	ldr	r1, [r1, #4]
 8011a62:	0849      	lsrs	r1, r1, #1
 8011a64:	2000      	movs	r0, #0
 8011a66:	460c      	mov	r4, r1
 8011a68:	4605      	mov	r5, r0
 8011a6a:	eb12 0804 	adds.w	r8, r2, r4
 8011a6e:	eb43 0905 	adc.w	r9, r3, r5
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	469a      	mov	sl, r3
 8011a7a:	4693      	mov	fp, r2
 8011a7c:	4652      	mov	r2, sl
 8011a7e:	465b      	mov	r3, fp
 8011a80:	4640      	mov	r0, r8
 8011a82:	4649      	mov	r1, r9
 8011a84:	f7ee fc2c 	bl	80002e0 <__aeabi_uldivmod>
 8011a88:	4602      	mov	r2, r0
 8011a8a:	460b      	mov	r3, r1
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a96:	d308      	bcc.n	8011aaa <UART_SetConfig+0x79a>
 8011a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a9e:	d204      	bcs.n	8011aaa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011aa6:	60da      	str	r2, [r3, #12]
 8011aa8:	e17c      	b.n	8011da4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011aaa:	2301      	movs	r3, #1
 8011aac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011ab0:	e178      	b.n	8011da4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	69db      	ldr	r3, [r3, #28]
 8011ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011aba:	f040 80c5 	bne.w	8011c48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011abe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011ac2:	2b20      	cmp	r3, #32
 8011ac4:	dc48      	bgt.n	8011b58 <UART_SetConfig+0x848>
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	db7b      	blt.n	8011bc2 <UART_SetConfig+0x8b2>
 8011aca:	2b20      	cmp	r3, #32
 8011acc:	d879      	bhi.n	8011bc2 <UART_SetConfig+0x8b2>
 8011ace:	a201      	add	r2, pc, #4	; (adr r2, 8011ad4 <UART_SetConfig+0x7c4>)
 8011ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ad4:	08011b5f 	.word	0x08011b5f
 8011ad8:	08011b67 	.word	0x08011b67
 8011adc:	08011bc3 	.word	0x08011bc3
 8011ae0:	08011bc3 	.word	0x08011bc3
 8011ae4:	08011b6f 	.word	0x08011b6f
 8011ae8:	08011bc3 	.word	0x08011bc3
 8011aec:	08011bc3 	.word	0x08011bc3
 8011af0:	08011bc3 	.word	0x08011bc3
 8011af4:	08011b7f 	.word	0x08011b7f
 8011af8:	08011bc3 	.word	0x08011bc3
 8011afc:	08011bc3 	.word	0x08011bc3
 8011b00:	08011bc3 	.word	0x08011bc3
 8011b04:	08011bc3 	.word	0x08011bc3
 8011b08:	08011bc3 	.word	0x08011bc3
 8011b0c:	08011bc3 	.word	0x08011bc3
 8011b10:	08011bc3 	.word	0x08011bc3
 8011b14:	08011b8f 	.word	0x08011b8f
 8011b18:	08011bc3 	.word	0x08011bc3
 8011b1c:	08011bc3 	.word	0x08011bc3
 8011b20:	08011bc3 	.word	0x08011bc3
 8011b24:	08011bc3 	.word	0x08011bc3
 8011b28:	08011bc3 	.word	0x08011bc3
 8011b2c:	08011bc3 	.word	0x08011bc3
 8011b30:	08011bc3 	.word	0x08011bc3
 8011b34:	08011bc3 	.word	0x08011bc3
 8011b38:	08011bc3 	.word	0x08011bc3
 8011b3c:	08011bc3 	.word	0x08011bc3
 8011b40:	08011bc3 	.word	0x08011bc3
 8011b44:	08011bc3 	.word	0x08011bc3
 8011b48:	08011bc3 	.word	0x08011bc3
 8011b4c:	08011bc3 	.word	0x08011bc3
 8011b50:	08011bc3 	.word	0x08011bc3
 8011b54:	08011bb5 	.word	0x08011bb5
 8011b58:	2b40      	cmp	r3, #64	; 0x40
 8011b5a:	d02e      	beq.n	8011bba <UART_SetConfig+0x8aa>
 8011b5c:	e031      	b.n	8011bc2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b5e:	f7f9 fbed 	bl	800b33c <HAL_RCC_GetPCLK1Freq>
 8011b62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b64:	e033      	b.n	8011bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011b66:	f7f9 fbff 	bl	800b368 <HAL_RCC_GetPCLK2Freq>
 8011b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b6c:	e02f      	b.n	8011bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fb fbf0 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b7c:	e027      	b.n	8011bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b7e:	f107 0318 	add.w	r3, r7, #24
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7fb fd3c 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b8c:	e01f      	b.n	8011bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b8e:	4b2d      	ldr	r3, [pc, #180]	; (8011c44 <UART_SetConfig+0x934>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f003 0320 	and.w	r3, r3, #32
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d009      	beq.n	8011bae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011b9a:	4b2a      	ldr	r3, [pc, #168]	; (8011c44 <UART_SetConfig+0x934>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	08db      	lsrs	r3, r3, #3
 8011ba0:	f003 0303 	and.w	r3, r3, #3
 8011ba4:	4a24      	ldr	r2, [pc, #144]	; (8011c38 <UART_SetConfig+0x928>)
 8011ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8011baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011bac:	e00f      	b.n	8011bce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011bae:	4b22      	ldr	r3, [pc, #136]	; (8011c38 <UART_SetConfig+0x928>)
 8011bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bb2:	e00c      	b.n	8011bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011bb4:	4b21      	ldr	r3, [pc, #132]	; (8011c3c <UART_SetConfig+0x92c>)
 8011bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bb8:	e009      	b.n	8011bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bc0:	e005      	b.n	8011bce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011bcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	f000 80e7 	beq.w	8011da4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bda:	4a19      	ldr	r2, [pc, #100]	; (8011c40 <UART_SetConfig+0x930>)
 8011bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011be0:	461a      	mov	r2, r3
 8011be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011be8:	005a      	lsls	r2, r3, #1
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	085b      	lsrs	r3, r3, #1
 8011bf0:	441a      	add	r2, r3
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bfa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfe:	2b0f      	cmp	r3, #15
 8011c00:	d916      	bls.n	8011c30 <UART_SetConfig+0x920>
 8011c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c08:	d212      	bcs.n	8011c30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c0c:	b29b      	uxth	r3, r3
 8011c0e:	f023 030f 	bic.w	r3, r3, #15
 8011c12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c16:	085b      	lsrs	r3, r3, #1
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	f003 0307 	and.w	r3, r3, #7
 8011c1e:	b29a      	uxth	r2, r3
 8011c20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011c22:	4313      	orrs	r3, r2
 8011c24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011c2c:	60da      	str	r2, [r3, #12]
 8011c2e:	e0b9      	b.n	8011da4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011c30:	2301      	movs	r3, #1
 8011c32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011c36:	e0b5      	b.n	8011da4 <UART_SetConfig+0xa94>
 8011c38:	03d09000 	.word	0x03d09000
 8011c3c:	003d0900 	.word	0x003d0900
 8011c40:	08017bb0 	.word	0x08017bb0
 8011c44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c4c:	2b20      	cmp	r3, #32
 8011c4e:	dc49      	bgt.n	8011ce4 <UART_SetConfig+0x9d4>
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	db7c      	blt.n	8011d4e <UART_SetConfig+0xa3e>
 8011c54:	2b20      	cmp	r3, #32
 8011c56:	d87a      	bhi.n	8011d4e <UART_SetConfig+0xa3e>
 8011c58:	a201      	add	r2, pc, #4	; (adr r2, 8011c60 <UART_SetConfig+0x950>)
 8011c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c5e:	bf00      	nop
 8011c60:	08011ceb 	.word	0x08011ceb
 8011c64:	08011cf3 	.word	0x08011cf3
 8011c68:	08011d4f 	.word	0x08011d4f
 8011c6c:	08011d4f 	.word	0x08011d4f
 8011c70:	08011cfb 	.word	0x08011cfb
 8011c74:	08011d4f 	.word	0x08011d4f
 8011c78:	08011d4f 	.word	0x08011d4f
 8011c7c:	08011d4f 	.word	0x08011d4f
 8011c80:	08011d0b 	.word	0x08011d0b
 8011c84:	08011d4f 	.word	0x08011d4f
 8011c88:	08011d4f 	.word	0x08011d4f
 8011c8c:	08011d4f 	.word	0x08011d4f
 8011c90:	08011d4f 	.word	0x08011d4f
 8011c94:	08011d4f 	.word	0x08011d4f
 8011c98:	08011d4f 	.word	0x08011d4f
 8011c9c:	08011d4f 	.word	0x08011d4f
 8011ca0:	08011d1b 	.word	0x08011d1b
 8011ca4:	08011d4f 	.word	0x08011d4f
 8011ca8:	08011d4f 	.word	0x08011d4f
 8011cac:	08011d4f 	.word	0x08011d4f
 8011cb0:	08011d4f 	.word	0x08011d4f
 8011cb4:	08011d4f 	.word	0x08011d4f
 8011cb8:	08011d4f 	.word	0x08011d4f
 8011cbc:	08011d4f 	.word	0x08011d4f
 8011cc0:	08011d4f 	.word	0x08011d4f
 8011cc4:	08011d4f 	.word	0x08011d4f
 8011cc8:	08011d4f 	.word	0x08011d4f
 8011ccc:	08011d4f 	.word	0x08011d4f
 8011cd0:	08011d4f 	.word	0x08011d4f
 8011cd4:	08011d4f 	.word	0x08011d4f
 8011cd8:	08011d4f 	.word	0x08011d4f
 8011cdc:	08011d4f 	.word	0x08011d4f
 8011ce0:	08011d41 	.word	0x08011d41
 8011ce4:	2b40      	cmp	r3, #64	; 0x40
 8011ce6:	d02e      	beq.n	8011d46 <UART_SetConfig+0xa36>
 8011ce8:	e031      	b.n	8011d4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011cea:	f7f9 fb27 	bl	800b33c <HAL_RCC_GetPCLK1Freq>
 8011cee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011cf0:	e033      	b.n	8011d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011cf2:	f7f9 fb39 	bl	800b368 <HAL_RCC_GetPCLK2Freq>
 8011cf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011cf8:	e02f      	b.n	8011d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fb fb2a 	bl	800d358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d08:	e027      	b.n	8011d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d0a:	f107 0318 	add.w	r3, r7, #24
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fb fc76 	bl	800d600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d18:	e01f      	b.n	8011d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d1a:	4b2d      	ldr	r3, [pc, #180]	; (8011dd0 <UART_SetConfig+0xac0>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f003 0320 	and.w	r3, r3, #32
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d009      	beq.n	8011d3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011d26:	4b2a      	ldr	r3, [pc, #168]	; (8011dd0 <UART_SetConfig+0xac0>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	08db      	lsrs	r3, r3, #3
 8011d2c:	f003 0303 	and.w	r3, r3, #3
 8011d30:	4a28      	ldr	r2, [pc, #160]	; (8011dd4 <UART_SetConfig+0xac4>)
 8011d32:	fa22 f303 	lsr.w	r3, r2, r3
 8011d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d38:	e00f      	b.n	8011d5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011d3a:	4b26      	ldr	r3, [pc, #152]	; (8011dd4 <UART_SetConfig+0xac4>)
 8011d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d3e:	e00c      	b.n	8011d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d40:	4b25      	ldr	r3, [pc, #148]	; (8011dd8 <UART_SetConfig+0xac8>)
 8011d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d44:	e009      	b.n	8011d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d4c:	e005      	b.n	8011d5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011d52:	2301      	movs	r3, #1
 8011d54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011d58:	bf00      	nop
    }

    if (pclk != 0U)
 8011d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d021      	beq.n	8011da4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d64:	4a1d      	ldr	r2, [pc, #116]	; (8011ddc <UART_SetConfig+0xacc>)
 8011d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d6a:	461a      	mov	r2, r3
 8011d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	085b      	lsrs	r3, r3, #1
 8011d78:	441a      	add	r2, r3
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d86:	2b0f      	cmp	r3, #15
 8011d88:	d909      	bls.n	8011d9e <UART_SetConfig+0xa8e>
 8011d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d90:	d205      	bcs.n	8011d9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d94:	b29a      	uxth	r2, r3
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	60da      	str	r2, [r3, #12]
 8011d9c:	e002      	b.n	8011da4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011d9e:	2301      	movs	r3, #1
 8011da0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	2201      	movs	r2, #1
 8011da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	2201      	movs	r2, #1
 8011db0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	2200      	movs	r2, #0
 8011db8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011dc0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3748      	adds	r7, #72	; 0x48
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011dce:	bf00      	nop
 8011dd0:	58024400 	.word	0x58024400
 8011dd4:	03d09000 	.word	0x03d09000
 8011dd8:	003d0900 	.word	0x003d0900
 8011ddc:	08017bb0 	.word	0x08017bb0

08011de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011de0:	b480      	push	{r7}
 8011de2:	b083      	sub	sp, #12
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dec:	f003 0308 	and.w	r3, r3, #8
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d00a      	beq.n	8011e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	430a      	orrs	r2, r1
 8011e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e0e:	f003 0301 	and.w	r3, r3, #1
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d00a      	beq.n	8011e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	430a      	orrs	r2, r1
 8011e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e30:	f003 0302 	and.w	r3, r3, #2
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d00a      	beq.n	8011e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	430a      	orrs	r2, r1
 8011e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e52:	f003 0304 	and.w	r3, r3, #4
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d00a      	beq.n	8011e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	430a      	orrs	r2, r1
 8011e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e74:	f003 0310 	and.w	r3, r3, #16
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d00a      	beq.n	8011e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	430a      	orrs	r2, r1
 8011e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e96:	f003 0320 	and.w	r3, r3, #32
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00a      	beq.n	8011eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	689b      	ldr	r3, [r3, #8]
 8011ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	430a      	orrs	r2, r1
 8011eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d01a      	beq.n	8011ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	430a      	orrs	r2, r1
 8011ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ede:	d10a      	bne.n	8011ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	430a      	orrs	r2, r1
 8011ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d00a      	beq.n	8011f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	430a      	orrs	r2, r1
 8011f16:	605a      	str	r2, [r3, #4]
  }
}
 8011f18:	bf00      	nop
 8011f1a:	370c      	adds	r7, #12
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr

08011f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b098      	sub	sp, #96	; 0x60
 8011f28:	af02      	add	r7, sp, #8
 8011f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011f34:	f7f2 fa74 	bl	8004420 <HAL_GetTick>
 8011f38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	f003 0308 	and.w	r3, r3, #8
 8011f44:	2b08      	cmp	r3, #8
 8011f46:	d12f      	bne.n	8011fa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011f4c:	9300      	str	r3, [sp, #0]
 8011f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f50:	2200      	movs	r2, #0
 8011f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f000 f88e 	bl	8012078 <UART_WaitOnFlagUntilTimeout>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d022      	beq.n	8011fa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6a:	e853 3f00 	ldrex	r3, [r3]
 8011f6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f76:	653b      	str	r3, [r7, #80]	; 0x50
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f80:	647b      	str	r3, [r7, #68]	; 0x44
 8011f82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f88:	e841 2300 	strex	r3, r2, [r1]
 8011f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d1e6      	bne.n	8011f62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2220      	movs	r2, #32
 8011f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011fa4:	2303      	movs	r3, #3
 8011fa6:	e063      	b.n	8012070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f003 0304 	and.w	r3, r3, #4
 8011fb2:	2b04      	cmp	r3, #4
 8011fb4:	d149      	bne.n	801204a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011fb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011fba:	9300      	str	r3, [sp, #0]
 8011fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 f857 	bl	8012078 <UART_WaitOnFlagUntilTimeout>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d03c      	beq.n	801204a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd8:	e853 3f00 	ldrex	r3, [r3]
 8011fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8011fde:	6a3b      	ldr	r3, [r7, #32]
 8011fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	461a      	mov	r2, r3
 8011fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fee:	633b      	str	r3, [r7, #48]	; 0x30
 8011ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ff6:	e841 2300 	strex	r3, r2, [r1]
 8011ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d1e6      	bne.n	8011fd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	3308      	adds	r3, #8
 8012008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	e853 3f00 	ldrex	r3, [r3]
 8012010:	60fb      	str	r3, [r7, #12]
   return(result);
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	f023 0301 	bic.w	r3, r3, #1
 8012018:	64bb      	str	r3, [r7, #72]	; 0x48
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	3308      	adds	r3, #8
 8012020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012022:	61fa      	str	r2, [r7, #28]
 8012024:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012026:	69b9      	ldr	r1, [r7, #24]
 8012028:	69fa      	ldr	r2, [r7, #28]
 801202a:	e841 2300 	strex	r3, r2, [r1]
 801202e:	617b      	str	r3, [r7, #20]
   return(result);
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d1e5      	bne.n	8012002 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2220      	movs	r2, #32
 801203a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2200      	movs	r2, #0
 8012042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012046:	2303      	movs	r3, #3
 8012048:	e012      	b.n	8012070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2220      	movs	r2, #32
 801204e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2220      	movs	r2, #32
 8012056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2200      	movs	r2, #0
 8012064:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2200      	movs	r2, #0
 801206a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801206e:	2300      	movs	r3, #0
}
 8012070:	4618      	mov	r0, r3
 8012072:	3758      	adds	r7, #88	; 0x58
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
 801207e:	60f8      	str	r0, [r7, #12]
 8012080:	60b9      	str	r1, [r7, #8]
 8012082:	603b      	str	r3, [r7, #0]
 8012084:	4613      	mov	r3, r2
 8012086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012088:	e04f      	b.n	801212a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801208a:	69bb      	ldr	r3, [r7, #24]
 801208c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012090:	d04b      	beq.n	801212a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012092:	f7f2 f9c5 	bl	8004420 <HAL_GetTick>
 8012096:	4602      	mov	r2, r0
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	1ad3      	subs	r3, r2, r3
 801209c:	69ba      	ldr	r2, [r7, #24]
 801209e:	429a      	cmp	r2, r3
 80120a0:	d302      	bcc.n	80120a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80120a2:	69bb      	ldr	r3, [r7, #24]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d101      	bne.n	80120ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80120a8:	2303      	movs	r3, #3
 80120aa:	e04e      	b.n	801214a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f003 0304 	and.w	r3, r3, #4
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d037      	beq.n	801212a <UART_WaitOnFlagUntilTimeout+0xb2>
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	2b80      	cmp	r3, #128	; 0x80
 80120be:	d034      	beq.n	801212a <UART_WaitOnFlagUntilTimeout+0xb2>
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	2b40      	cmp	r3, #64	; 0x40
 80120c4:	d031      	beq.n	801212a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	69db      	ldr	r3, [r3, #28]
 80120cc:	f003 0308 	and.w	r3, r3, #8
 80120d0:	2b08      	cmp	r3, #8
 80120d2:	d110      	bne.n	80120f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2208      	movs	r2, #8
 80120da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80120dc:	68f8      	ldr	r0, [r7, #12]
 80120de:	f000 f99d 	bl	801241c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	2208      	movs	r2, #8
 80120e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	2200      	movs	r2, #0
 80120ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80120f2:	2301      	movs	r3, #1
 80120f4:	e029      	b.n	801214a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	69db      	ldr	r3, [r3, #28]
 80120fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012104:	d111      	bne.n	801212a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801210e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f000 f983 	bl	801241c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2220      	movs	r2, #32
 801211a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2200      	movs	r2, #0
 8012122:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012126:	2303      	movs	r3, #3
 8012128:	e00f      	b.n	801214a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	69da      	ldr	r2, [r3, #28]
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	4013      	ands	r3, r2
 8012134:	68ba      	ldr	r2, [r7, #8]
 8012136:	429a      	cmp	r2, r3
 8012138:	bf0c      	ite	eq
 801213a:	2301      	moveq	r3, #1
 801213c:	2300      	movne	r3, #0
 801213e:	b2db      	uxtb	r3, r3
 8012140:	461a      	mov	r2, r3
 8012142:	79fb      	ldrb	r3, [r7, #7]
 8012144:	429a      	cmp	r2, r3
 8012146:	d0a0      	beq.n	801208a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012148:	2300      	movs	r3, #0
}
 801214a:	4618      	mov	r0, r3
 801214c:	3710      	adds	r7, #16
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
	...

08012154 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012154:	b480      	push	{r7}
 8012156:	b0a3      	sub	sp, #140	; 0x8c
 8012158:	af00      	add	r7, sp, #0
 801215a:	60f8      	str	r0, [r7, #12]
 801215c:	60b9      	str	r1, [r7, #8]
 801215e:	4613      	mov	r3, r2
 8012160:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	68ba      	ldr	r2, [r7, #8]
 8012166:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	88fa      	ldrh	r2, [r7, #6]
 801216c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	88fa      	ldrh	r2, [r7, #6]
 8012174:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	2200      	movs	r2, #0
 801217c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	689b      	ldr	r3, [r3, #8]
 8012182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012186:	d10e      	bne.n	80121a6 <UART_Start_Receive_IT+0x52>
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	691b      	ldr	r3, [r3, #16]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d105      	bne.n	801219c <UART_Start_Receive_IT+0x48>
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012196:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801219a:	e02d      	b.n	80121f8 <UART_Start_Receive_IT+0xa4>
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	22ff      	movs	r2, #255	; 0xff
 80121a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121a4:	e028      	b.n	80121f8 <UART_Start_Receive_IT+0xa4>
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	689b      	ldr	r3, [r3, #8]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d10d      	bne.n	80121ca <UART_Start_Receive_IT+0x76>
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	691b      	ldr	r3, [r3, #16]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d104      	bne.n	80121c0 <UART_Start_Receive_IT+0x6c>
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	22ff      	movs	r2, #255	; 0xff
 80121ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121be:	e01b      	b.n	80121f8 <UART_Start_Receive_IT+0xa4>
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	227f      	movs	r2, #127	; 0x7f
 80121c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121c8:	e016      	b.n	80121f8 <UART_Start_Receive_IT+0xa4>
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	689b      	ldr	r3, [r3, #8]
 80121ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80121d2:	d10d      	bne.n	80121f0 <UART_Start_Receive_IT+0x9c>
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	691b      	ldr	r3, [r3, #16]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d104      	bne.n	80121e6 <UART_Start_Receive_IT+0x92>
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	227f      	movs	r2, #127	; 0x7f
 80121e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121e4:	e008      	b.n	80121f8 <UART_Start_Receive_IT+0xa4>
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	223f      	movs	r2, #63	; 0x3f
 80121ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121ee:	e003      	b.n	80121f8 <UART_Start_Receive_IT+0xa4>
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	2200      	movs	r2, #0
 80121f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2200      	movs	r2, #0
 80121fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2222      	movs	r2, #34	; 0x22
 8012204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	3308      	adds	r3, #8
 801220e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012212:	e853 3f00 	ldrex	r3, [r3]
 8012216:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801221a:	f043 0301 	orr.w	r3, r3, #1
 801221e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	3308      	adds	r3, #8
 8012228:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801222c:	673a      	str	r2, [r7, #112]	; 0x70
 801222e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012230:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012232:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012234:	e841 2300 	strex	r3, r2, [r1]
 8012238:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801223a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801223c:	2b00      	cmp	r3, #0
 801223e:	d1e3      	bne.n	8012208 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012248:	d14f      	bne.n	80122ea <UART_Start_Receive_IT+0x196>
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012250:	88fa      	ldrh	r2, [r7, #6]
 8012252:	429a      	cmp	r2, r3
 8012254:	d349      	bcc.n	80122ea <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	689b      	ldr	r3, [r3, #8]
 801225a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801225e:	d107      	bne.n	8012270 <UART_Start_Receive_IT+0x11c>
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	691b      	ldr	r3, [r3, #16]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d103      	bne.n	8012270 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	4a47      	ldr	r2, [pc, #284]	; (8012388 <UART_Start_Receive_IT+0x234>)
 801226c:	675a      	str	r2, [r3, #116]	; 0x74
 801226e:	e002      	b.n	8012276 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	4a46      	ldr	r2, [pc, #280]	; (801238c <UART_Start_Receive_IT+0x238>)
 8012274:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	691b      	ldr	r3, [r3, #16]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d01a      	beq.n	80122b4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012286:	e853 3f00 	ldrex	r3, [r3]
 801228a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801228c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	461a      	mov	r2, r3
 801229c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80122a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80122a2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80122a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80122a8:	e841 2300 	strex	r3, r2, [r1]
 80122ac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80122ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d1e4      	bne.n	801227e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	3308      	adds	r3, #8
 80122ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122be:	e853 3f00 	ldrex	r3, [r3]
 80122c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80122ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	3308      	adds	r3, #8
 80122d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80122d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80122d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80122da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122dc:	e841 2300 	strex	r3, r2, [r1]
 80122e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80122e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d1e5      	bne.n	80122b4 <UART_Start_Receive_IT+0x160>
 80122e8:	e046      	b.n	8012378 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	689b      	ldr	r3, [r3, #8]
 80122ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80122f2:	d107      	bne.n	8012304 <UART_Start_Receive_IT+0x1b0>
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	691b      	ldr	r3, [r3, #16]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d103      	bne.n	8012304 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	4a24      	ldr	r2, [pc, #144]	; (8012390 <UART_Start_Receive_IT+0x23c>)
 8012300:	675a      	str	r2, [r3, #116]	; 0x74
 8012302:	e002      	b.n	801230a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	4a23      	ldr	r2, [pc, #140]	; (8012394 <UART_Start_Receive_IT+0x240>)
 8012308:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	691b      	ldr	r3, [r3, #16]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d019      	beq.n	8012346 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231a:	e853 3f00 	ldrex	r3, [r3]
 801231e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012322:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8012326:	677b      	str	r3, [r7, #116]	; 0x74
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	461a      	mov	r2, r3
 801232e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012330:	637b      	str	r3, [r7, #52]	; 0x34
 8012332:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012338:	e841 2300 	strex	r3, r2, [r1]
 801233c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012340:	2b00      	cmp	r3, #0
 8012342:	d1e6      	bne.n	8012312 <UART_Start_Receive_IT+0x1be>
 8012344:	e018      	b.n	8012378 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	e853 3f00 	ldrex	r3, [r3]
 8012352:	613b      	str	r3, [r7, #16]
   return(result);
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	f043 0320 	orr.w	r3, r3, #32
 801235a:	67bb      	str	r3, [r7, #120]	; 0x78
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	461a      	mov	r2, r3
 8012362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012364:	623b      	str	r3, [r7, #32]
 8012366:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012368:	69f9      	ldr	r1, [r7, #28]
 801236a:	6a3a      	ldr	r2, [r7, #32]
 801236c:	e841 2300 	strex	r3, r2, [r1]
 8012370:	61bb      	str	r3, [r7, #24]
   return(result);
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d1e6      	bne.n	8012346 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012378:	2300      	movs	r3, #0
}
 801237a:	4618      	mov	r0, r3
 801237c:	378c      	adds	r7, #140	; 0x8c
 801237e:	46bd      	mov	sp, r7
 8012380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012384:	4770      	bx	lr
 8012386:	bf00      	nop
 8012388:	08012d6d 	.word	0x08012d6d
 801238c:	08012a0d 	.word	0x08012a0d
 8012390:	08012855 	.word	0x08012855
 8012394:	0801269d 	.word	0x0801269d

08012398 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012398:	b480      	push	{r7}
 801239a:	b08f      	sub	sp, #60	; 0x3c
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123a6:	6a3b      	ldr	r3, [r7, #32]
 80123a8:	e853 3f00 	ldrex	r3, [r3]
 80123ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80123ae:	69fb      	ldr	r3, [r7, #28]
 80123b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80123b4:	637b      	str	r3, [r7, #52]	; 0x34
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	461a      	mov	r2, r3
 80123bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123c6:	e841 2300 	strex	r3, r2, [r1]
 80123ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80123cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d1e6      	bne.n	80123a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	3308      	adds	r3, #8
 80123d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	e853 3f00 	ldrex	r3, [r3]
 80123e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80123e8:	633b      	str	r3, [r7, #48]	; 0x30
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	3308      	adds	r3, #8
 80123f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123f2:	61ba      	str	r2, [r7, #24]
 80123f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123f6:	6979      	ldr	r1, [r7, #20]
 80123f8:	69ba      	ldr	r2, [r7, #24]
 80123fa:	e841 2300 	strex	r3, r2, [r1]
 80123fe:	613b      	str	r3, [r7, #16]
   return(result);
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d1e5      	bne.n	80123d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2220      	movs	r2, #32
 801240a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801240e:	bf00      	nop
 8012410:	373c      	adds	r7, #60	; 0x3c
 8012412:	46bd      	mov	sp, r7
 8012414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012418:	4770      	bx	lr
	...

0801241c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801241c:	b480      	push	{r7}
 801241e:	b095      	sub	sp, #84	; 0x54
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801242a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801242c:	e853 3f00 	ldrex	r3, [r3]
 8012430:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012438:	64fb      	str	r3, [r7, #76]	; 0x4c
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	461a      	mov	r2, r3
 8012440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012442:	643b      	str	r3, [r7, #64]	; 0x40
 8012444:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801244a:	e841 2300 	strex	r3, r2, [r1]
 801244e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012452:	2b00      	cmp	r3, #0
 8012454:	d1e6      	bne.n	8012424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	3308      	adds	r3, #8
 801245c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801245e:	6a3b      	ldr	r3, [r7, #32]
 8012460:	e853 3f00 	ldrex	r3, [r3]
 8012464:	61fb      	str	r3, [r7, #28]
   return(result);
 8012466:	69fa      	ldr	r2, [r7, #28]
 8012468:	4b1e      	ldr	r3, [pc, #120]	; (80124e4 <UART_EndRxTransfer+0xc8>)
 801246a:	4013      	ands	r3, r2
 801246c:	64bb      	str	r3, [r7, #72]	; 0x48
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	3308      	adds	r3, #8
 8012474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012476:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012478:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801247a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801247c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801247e:	e841 2300 	strex	r3, r2, [r1]
 8012482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012486:	2b00      	cmp	r3, #0
 8012488:	d1e5      	bne.n	8012456 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801248e:	2b01      	cmp	r3, #1
 8012490:	d118      	bne.n	80124c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	e853 3f00 	ldrex	r3, [r3]
 801249e:	60bb      	str	r3, [r7, #8]
   return(result);
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	f023 0310 	bic.w	r3, r3, #16
 80124a6:	647b      	str	r3, [r7, #68]	; 0x44
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	461a      	mov	r2, r3
 80124ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124b0:	61bb      	str	r3, [r7, #24]
 80124b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124b4:	6979      	ldr	r1, [r7, #20]
 80124b6:	69ba      	ldr	r2, [r7, #24]
 80124b8:	e841 2300 	strex	r3, r2, [r1]
 80124bc:	613b      	str	r3, [r7, #16]
   return(result);
 80124be:	693b      	ldr	r3, [r7, #16]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d1e6      	bne.n	8012492 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2220      	movs	r2, #32
 80124c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2200      	movs	r2, #0
 80124d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2200      	movs	r2, #0
 80124d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80124d8:	bf00      	nop
 80124da:	3754      	adds	r7, #84	; 0x54
 80124dc:	46bd      	mov	sp, r7
 80124de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e2:	4770      	bx	lr
 80124e4:	effffffe 	.word	0xeffffffe

080124e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b090      	sub	sp, #64	; 0x40
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124f4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	69db      	ldr	r3, [r3, #28]
 80124fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124fe:	d037      	beq.n	8012570 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8012500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012502:	2200      	movs	r2, #0
 8012504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	3308      	adds	r3, #8
 801250e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012512:	e853 3f00 	ldrex	r3, [r3]
 8012516:	623b      	str	r3, [r7, #32]
   return(result);
 8012518:	6a3b      	ldr	r3, [r7, #32]
 801251a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801251e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	3308      	adds	r3, #8
 8012526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012528:	633a      	str	r2, [r7, #48]	; 0x30
 801252a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801252c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801252e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012530:	e841 2300 	strex	r3, r2, [r1]
 8012534:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012538:	2b00      	cmp	r3, #0
 801253a:	d1e5      	bne.n	8012508 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801253c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	e853 3f00 	ldrex	r3, [r3]
 8012548:	60fb      	str	r3, [r7, #12]
   return(result);
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012550:	637b      	str	r3, [r7, #52]	; 0x34
 8012552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	461a      	mov	r2, r3
 8012558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801255a:	61fb      	str	r3, [r7, #28]
 801255c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801255e:	69b9      	ldr	r1, [r7, #24]
 8012560:	69fa      	ldr	r2, [r7, #28]
 8012562:	e841 2300 	strex	r3, r2, [r1]
 8012566:	617b      	str	r3, [r7, #20]
   return(result);
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d1e6      	bne.n	801253c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801256e:	e002      	b.n	8012576 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8012570:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012572:	f7ef fca3 	bl	8001ebc <HAL_UART_TxCpltCallback>
}
 8012576:	bf00      	nop
 8012578:	3740      	adds	r7, #64	; 0x40
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801257e:	b580      	push	{r7, lr}
 8012580:	b084      	sub	sp, #16
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801258a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801258c:	68f8      	ldr	r0, [r7, #12]
 801258e:	f7fe fe9f 	bl	80112d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012592:	bf00      	nop
 8012594:	3710      	adds	r7, #16
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}

0801259a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801259a:	b580      	push	{r7, lr}
 801259c:	b086      	sub	sp, #24
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80125ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80125b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	689b      	ldr	r3, [r3, #8]
 80125be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125c2:	2b80      	cmp	r3, #128	; 0x80
 80125c4:	d109      	bne.n	80125da <UART_DMAError+0x40>
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	2b21      	cmp	r3, #33	; 0x21
 80125ca:	d106      	bne.n	80125da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	2200      	movs	r2, #0
 80125d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80125d4:	6978      	ldr	r0, [r7, #20]
 80125d6:	f7ff fedf 	bl	8012398 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125e4:	2b40      	cmp	r3, #64	; 0x40
 80125e6:	d109      	bne.n	80125fc <UART_DMAError+0x62>
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	2b22      	cmp	r3, #34	; 0x22
 80125ec:	d106      	bne.n	80125fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	2200      	movs	r2, #0
 80125f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80125f6:	6978      	ldr	r0, [r7, #20]
 80125f8:	f7ff ff10 	bl	801241c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012602:	f043 0210 	orr.w	r2, r3, #16
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801260c:	6978      	ldr	r0, [r7, #20]
 801260e:	f7fe fe69 	bl	80112e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012612:	bf00      	nop
 8012614:	3718      	adds	r7, #24
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}

0801261a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801261a:	b580      	push	{r7, lr}
 801261c:	b084      	sub	sp, #16
 801261e:	af00      	add	r7, sp, #0
 8012620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2200      	movs	r2, #0
 801262c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2200      	movs	r2, #0
 8012634:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012638:	68f8      	ldr	r0, [r7, #12]
 801263a:	f7fe fe53 	bl	80112e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801263e:	bf00      	nop
 8012640:	3710      	adds	r7, #16
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}

08012646 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012646:	b580      	push	{r7, lr}
 8012648:	b088      	sub	sp, #32
 801264a:	af00      	add	r7, sp, #0
 801264c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	e853 3f00 	ldrex	r3, [r3]
 801265a:	60bb      	str	r3, [r7, #8]
   return(result);
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012662:	61fb      	str	r3, [r7, #28]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	461a      	mov	r2, r3
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	61bb      	str	r3, [r7, #24]
 801266e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012670:	6979      	ldr	r1, [r7, #20]
 8012672:	69ba      	ldr	r2, [r7, #24]
 8012674:	e841 2300 	strex	r3, r2, [r1]
 8012678:	613b      	str	r3, [r7, #16]
   return(result);
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d1e6      	bne.n	801264e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2220      	movs	r2, #32
 8012684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f7ef fc14 	bl	8001ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012694:	bf00      	nop
 8012696:	3720      	adds	r7, #32
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b09c      	sub	sp, #112	; 0x70
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126b4:	2b22      	cmp	r3, #34	; 0x22
 80126b6:	f040 80be 	bne.w	8012836 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80126c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80126c8:	b2d9      	uxtb	r1, r3
 80126ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80126ce:	b2da      	uxtb	r2, r3
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126d4:	400a      	ands	r2, r1
 80126d6:	b2d2      	uxtb	r2, r2
 80126d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126de:	1c5a      	adds	r2, r3, #1
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	3b01      	subs	r3, #1
 80126ee:	b29a      	uxth	r2, r3
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126fc:	b29b      	uxth	r3, r3
 80126fe:	2b00      	cmp	r3, #0
 8012700:	f040 80a1 	bne.w	8012846 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801270c:	e853 3f00 	ldrex	r3, [r3]
 8012710:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012714:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012718:	66bb      	str	r3, [r7, #104]	; 0x68
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	461a      	mov	r2, r3
 8012720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012722:	65bb      	str	r3, [r7, #88]	; 0x58
 8012724:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012726:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012728:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801272a:	e841 2300 	strex	r3, r2, [r1]
 801272e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012732:	2b00      	cmp	r3, #0
 8012734:	d1e6      	bne.n	8012704 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	3308      	adds	r3, #8
 801273c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012740:	e853 3f00 	ldrex	r3, [r3]
 8012744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012748:	f023 0301 	bic.w	r3, r3, #1
 801274c:	667b      	str	r3, [r7, #100]	; 0x64
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	3308      	adds	r3, #8
 8012754:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012756:	647a      	str	r2, [r7, #68]	; 0x44
 8012758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801275a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801275c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801275e:	e841 2300 	strex	r3, r2, [r1]
 8012762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012766:	2b00      	cmp	r3, #0
 8012768:	d1e5      	bne.n	8012736 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2220      	movs	r2, #32
 801276e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2200      	movs	r2, #0
 8012776:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2200      	movs	r2, #0
 801277c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	4a33      	ldr	r2, [pc, #204]	; (8012850 <UART_RxISR_8BIT+0x1b4>)
 8012784:	4293      	cmp	r3, r2
 8012786:	d01f      	beq.n	80127c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012792:	2b00      	cmp	r3, #0
 8012794:	d018      	beq.n	80127c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279e:	e853 3f00 	ldrex	r3, [r3]
 80127a2:	623b      	str	r3, [r7, #32]
   return(result);
 80127a4:	6a3b      	ldr	r3, [r7, #32]
 80127a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80127aa:	663b      	str	r3, [r7, #96]	; 0x60
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	461a      	mov	r2, r3
 80127b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127b4:	633b      	str	r3, [r7, #48]	; 0x30
 80127b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127bc:	e841 2300 	strex	r3, r2, [r1]
 80127c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80127c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d1e6      	bne.n	8012796 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	d12e      	bne.n	801282e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2200      	movs	r2, #0
 80127d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	e853 3f00 	ldrex	r3, [r3]
 80127e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	f023 0310 	bic.w	r3, r3, #16
 80127ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	461a      	mov	r2, r3
 80127f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80127f4:	61fb      	str	r3, [r7, #28]
 80127f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127f8:	69b9      	ldr	r1, [r7, #24]
 80127fa:	69fa      	ldr	r2, [r7, #28]
 80127fc:	e841 2300 	strex	r3, r2, [r1]
 8012800:	617b      	str	r3, [r7, #20]
   return(result);
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d1e6      	bne.n	80127d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	69db      	ldr	r3, [r3, #28]
 801280e:	f003 0310 	and.w	r3, r3, #16
 8012812:	2b10      	cmp	r3, #16
 8012814:	d103      	bne.n	801281e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	2210      	movs	r2, #16
 801281c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012824:	4619      	mov	r1, r3
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f7fe fd66 	bl	80112f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801282c:	e00b      	b.n	8012846 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f7ee fef2 	bl	8001618 <HAL_UART_RxCpltCallback>
}
 8012834:	e007      	b.n	8012846 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	699a      	ldr	r2, [r3, #24]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	f042 0208 	orr.w	r2, r2, #8
 8012844:	619a      	str	r2, [r3, #24]
}
 8012846:	bf00      	nop
 8012848:	3770      	adds	r7, #112	; 0x70
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	58000c00 	.word	0x58000c00

08012854 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b09c      	sub	sp, #112	; 0x70
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012862:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801286c:	2b22      	cmp	r3, #34	; 0x22
 801286e:	f040 80be 	bne.w	80129ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012878:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012880:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012882:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012886:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801288a:	4013      	ands	r3, r2
 801288c:	b29a      	uxth	r2, r3
 801288e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012890:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012896:	1c9a      	adds	r2, r3, #2
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	3b01      	subs	r3, #1
 80128a6:	b29a      	uxth	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128b4:	b29b      	uxth	r3, r3
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	f040 80a1 	bne.w	80129fe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128c4:	e853 3f00 	ldrex	r3, [r3]
 80128c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80128ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80128d0:	667b      	str	r3, [r7, #100]	; 0x64
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	461a      	mov	r2, r3
 80128d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128da:	657b      	str	r3, [r7, #84]	; 0x54
 80128dc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80128e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80128e2:	e841 2300 	strex	r3, r2, [r1]
 80128e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80128e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d1e6      	bne.n	80128bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	3308      	adds	r3, #8
 80128f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128f8:	e853 3f00 	ldrex	r3, [r3]
 80128fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80128fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012900:	f023 0301 	bic.w	r3, r3, #1
 8012904:	663b      	str	r3, [r7, #96]	; 0x60
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	3308      	adds	r3, #8
 801290c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801290e:	643a      	str	r2, [r7, #64]	; 0x40
 8012910:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012916:	e841 2300 	strex	r3, r2, [r1]
 801291a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291e:	2b00      	cmp	r3, #0
 8012920:	d1e5      	bne.n	80128ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2220      	movs	r2, #32
 8012926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2200      	movs	r2, #0
 801292e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	4a33      	ldr	r2, [pc, #204]	; (8012a08 <UART_RxISR_16BIT+0x1b4>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d01f      	beq.n	8012980 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801294a:	2b00      	cmp	r3, #0
 801294c:	d018      	beq.n	8012980 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012954:	6a3b      	ldr	r3, [r7, #32]
 8012956:	e853 3f00 	ldrex	r3, [r3]
 801295a:	61fb      	str	r3, [r7, #28]
   return(result);
 801295c:	69fb      	ldr	r3, [r7, #28]
 801295e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	461a      	mov	r2, r3
 801296a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801296c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801296e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012974:	e841 2300 	strex	r3, r2, [r1]
 8012978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297c:	2b00      	cmp	r3, #0
 801297e:	d1e6      	bne.n	801294e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012984:	2b01      	cmp	r3, #1
 8012986:	d12e      	bne.n	80129e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	e853 3f00 	ldrex	r3, [r3]
 801299a:	60bb      	str	r3, [r7, #8]
   return(result);
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	f023 0310 	bic.w	r3, r3, #16
 80129a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	461a      	mov	r2, r3
 80129aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129ac:	61bb      	str	r3, [r7, #24]
 80129ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129b0:	6979      	ldr	r1, [r7, #20]
 80129b2:	69ba      	ldr	r2, [r7, #24]
 80129b4:	e841 2300 	strex	r3, r2, [r1]
 80129b8:	613b      	str	r3, [r7, #16]
   return(result);
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d1e6      	bne.n	801298e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	69db      	ldr	r3, [r3, #28]
 80129c6:	f003 0310 	and.w	r3, r3, #16
 80129ca:	2b10      	cmp	r3, #16
 80129cc:	d103      	bne.n	80129d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	2210      	movs	r2, #16
 80129d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129dc:	4619      	mov	r1, r3
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f7fe fc8a 	bl	80112f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80129e4:	e00b      	b.n	80129fe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f7ee fe16 	bl	8001618 <HAL_UART_RxCpltCallback>
}
 80129ec:	e007      	b.n	80129fe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	699a      	ldr	r2, [r3, #24]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f042 0208 	orr.w	r2, r2, #8
 80129fc:	619a      	str	r2, [r3, #24]
}
 80129fe:	bf00      	nop
 8012a00:	3770      	adds	r7, #112	; 0x70
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
 8012a06:	bf00      	nop
 8012a08:	58000c00 	.word	0x58000c00

08012a0c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b0ac      	sub	sp, #176	; 0xb0
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a1a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	69db      	ldr	r3, [r3, #28]
 8012a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	689b      	ldr	r3, [r3, #8]
 8012a38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a42:	2b22      	cmp	r3, #34	; 0x22
 8012a44:	f040 8180 	bne.w	8012d48 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a4e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a52:	e123      	b.n	8012c9c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a5a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012a5e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012a62:	b2d9      	uxtb	r1, r3
 8012a64:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012a68:	b2da      	uxtb	r2, r3
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a6e:	400a      	ands	r2, r1
 8012a70:	b2d2      	uxtb	r2, r2
 8012a72:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a78:	1c5a      	adds	r2, r3, #1
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	3b01      	subs	r3, #1
 8012a88:	b29a      	uxth	r2, r3
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	69db      	ldr	r3, [r3, #28]
 8012a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a9e:	f003 0307 	and.w	r3, r3, #7
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d053      	beq.n	8012b4e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012aaa:	f003 0301 	and.w	r3, r3, #1
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d011      	beq.n	8012ad6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012ab2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d00b      	beq.n	8012ad6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012acc:	f043 0201 	orr.w	r2, r3, #1
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ada:	f003 0302 	and.w	r3, r3, #2
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d011      	beq.n	8012b06 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012ae6:	f003 0301 	and.w	r3, r3, #1
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d00b      	beq.n	8012b06 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	2202      	movs	r2, #2
 8012af4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012afc:	f043 0204 	orr.w	r2, r3, #4
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012b0a:	f003 0304 	and.w	r3, r3, #4
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d011      	beq.n	8012b36 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012b16:	f003 0301 	and.w	r3, r3, #1
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d00b      	beq.n	8012b36 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	2204      	movs	r2, #4
 8012b24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b2c:	f043 0202 	orr.w	r2, r3, #2
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d006      	beq.n	8012b4e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f7fe fbcf 	bl	80112e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2200      	movs	r2, #0
 8012b4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	f040 80a0 	bne.w	8012c9c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b64:	e853 3f00 	ldrex	r3, [r3]
 8012b68:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	461a      	mov	r2, r3
 8012b7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012b80:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b82:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012b84:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012b86:	e841 2300 	strex	r3, r2, [r1]
 8012b8a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d1e4      	bne.n	8012b5c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	3308      	adds	r3, #8
 8012b98:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b9c:	e853 3f00 	ldrex	r3, [r3]
 8012ba0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012ba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ba4:	4b6e      	ldr	r3, [pc, #440]	; (8012d60 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012ba6:	4013      	ands	r3, r2
 8012ba8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	3308      	adds	r3, #8
 8012bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012bb6:	66ba      	str	r2, [r7, #104]	; 0x68
 8012bb8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012bbe:	e841 2300 	strex	r3, r2, [r1]
 8012bc2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d1e3      	bne.n	8012b92 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2220      	movs	r2, #32
 8012bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	4a60      	ldr	r2, [pc, #384]	; (8012d64 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012be4:	4293      	cmp	r3, r2
 8012be6:	d021      	beq.n	8012c2c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d01a      	beq.n	8012c2c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bfe:	e853 3f00 	ldrex	r3, [r3]
 8012c02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012c0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	461a      	mov	r2, r3
 8012c14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012c18:	657b      	str	r3, [r7, #84]	; 0x54
 8012c1a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012c20:	e841 2300 	strex	r3, r2, [r1]
 8012c24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d1e4      	bne.n	8012bf6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d130      	bne.n	8012c96 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c42:	e853 3f00 	ldrex	r3, [r3]
 8012c46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4a:	f023 0310 	bic.w	r3, r3, #16
 8012c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	461a      	mov	r2, r3
 8012c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012c5c:	643b      	str	r3, [r7, #64]	; 0x40
 8012c5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c64:	e841 2300 	strex	r3, r2, [r1]
 8012c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d1e4      	bne.n	8012c3a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	69db      	ldr	r3, [r3, #28]
 8012c76:	f003 0310 	and.w	r3, r3, #16
 8012c7a:	2b10      	cmp	r3, #16
 8012c7c:	d103      	bne.n	8012c86 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2210      	movs	r2, #16
 8012c84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c8c:	4619      	mov	r1, r3
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f7fe fb32 	bl	80112f8 <HAL_UARTEx_RxEventCallback>
 8012c94:	e002      	b.n	8012c9c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f7ee fcbe 	bl	8001618 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c9c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d006      	beq.n	8012cb2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ca8:	f003 0320 	and.w	r3, r3, #32
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	f47f aed1 	bne.w	8012a54 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012cb8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012cbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d049      	beq.n	8012d58 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012cca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	d242      	bcs.n	8012d58 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	3308      	adds	r3, #8
 8012cd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cda:	6a3b      	ldr	r3, [r7, #32]
 8012cdc:	e853 3f00 	ldrex	r3, [r3]
 8012ce0:	61fb      	str	r3, [r7, #28]
   return(result);
 8012ce2:	69fb      	ldr	r3, [r7, #28]
 8012ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	3308      	adds	r3, #8
 8012cf2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012cfe:	e841 2300 	strex	r3, r2, [r1]
 8012d02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d1e3      	bne.n	8012cd2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4a16      	ldr	r2, [pc, #88]	; (8012d68 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012d0e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	e853 3f00 	ldrex	r3, [r3]
 8012d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	f043 0320 	orr.w	r3, r3, #32
 8012d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d32:	61bb      	str	r3, [r7, #24]
 8012d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d36:	6979      	ldr	r1, [r7, #20]
 8012d38:	69ba      	ldr	r2, [r7, #24]
 8012d3a:	e841 2300 	strex	r3, r2, [r1]
 8012d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d1e4      	bne.n	8012d10 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012d46:	e007      	b.n	8012d58 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	699a      	ldr	r2, [r3, #24]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	f042 0208 	orr.w	r2, r2, #8
 8012d56:	619a      	str	r2, [r3, #24]
}
 8012d58:	bf00      	nop
 8012d5a:	37b0      	adds	r7, #176	; 0xb0
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	effffffe 	.word	0xeffffffe
 8012d64:	58000c00 	.word	0x58000c00
 8012d68:	0801269d 	.word	0x0801269d

08012d6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b0ae      	sub	sp, #184	; 0xb8
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012d7a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	69db      	ldr	r3, [r3, #28]
 8012d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	689b      	ldr	r3, [r3, #8]
 8012d98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012da2:	2b22      	cmp	r3, #34	; 0x22
 8012da4:	f040 8184 	bne.w	80130b0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012dae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012db2:	e127      	b.n	8013004 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012dc6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012dca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012dce:	4013      	ands	r3, r2
 8012dd0:	b29a      	uxth	r2, r3
 8012dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012dd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ddc:	1c9a      	adds	r2, r3, #2
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	3b01      	subs	r3, #1
 8012dec:	b29a      	uxth	r2, r3
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	69db      	ldr	r3, [r3, #28]
 8012dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e02:	f003 0307 	and.w	r3, r3, #7
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d053      	beq.n	8012eb2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012e0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e0e:	f003 0301 	and.w	r3, r3, #1
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d011      	beq.n	8012e3a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d00b      	beq.n	8012e3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	2201      	movs	r2, #1
 8012e28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e30:	f043 0201 	orr.w	r2, r3, #1
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e3e:	f003 0302 	and.w	r3, r3, #2
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d011      	beq.n	8012e6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012e46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012e4a:	f003 0301 	and.w	r3, r3, #1
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d00b      	beq.n	8012e6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	2202      	movs	r2, #2
 8012e58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e60:	f043 0204 	orr.w	r2, r3, #4
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e6e:	f003 0304 	and.w	r3, r3, #4
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d011      	beq.n	8012e9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012e76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012e7a:	f003 0301 	and.w	r3, r3, #1
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d00b      	beq.n	8012e9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	2204      	movs	r2, #4
 8012e88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e90:	f043 0202 	orr.w	r2, r3, #2
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d006      	beq.n	8012eb2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f7fe fa1d 	bl	80112e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2200      	movs	r2, #0
 8012eae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012eb8:	b29b      	uxth	r3, r3
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	f040 80a2 	bne.w	8013004 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ec8:	e853 3f00 	ldrex	r3, [r3]
 8012ecc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	461a      	mov	r2, r3
 8012ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012ee2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012ee6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ee8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012eee:	e841 2300 	strex	r3, r2, [r1]
 8012ef2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d1e2      	bne.n	8012ec0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	3308      	adds	r3, #8
 8012f00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f04:	e853 3f00 	ldrex	r3, [r3]
 8012f08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012f0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012f0c:	4b6e      	ldr	r3, [pc, #440]	; (80130c8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012f0e:	4013      	ands	r3, r2
 8012f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	3308      	adds	r3, #8
 8012f1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012f1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012f20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012f24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012f26:	e841 2300 	strex	r3, r2, [r1]
 8012f2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d1e3      	bne.n	8012efa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2220      	movs	r2, #32
 8012f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2200      	movs	r2, #0
 8012f44:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	4a60      	ldr	r2, [pc, #384]	; (80130cc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d021      	beq.n	8012f94 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d01a      	beq.n	8012f94 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f66:	e853 3f00 	ldrex	r3, [r3]
 8012f6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012f72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012f80:	65bb      	str	r3, [r7, #88]	; 0x58
 8012f82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012f86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f88:	e841 2300 	strex	r3, r2, [r1]
 8012f8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d1e4      	bne.n	8012f5e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	d130      	bne.n	8012ffe <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012faa:	e853 3f00 	ldrex	r3, [r3]
 8012fae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fb2:	f023 0310 	bic.w	r3, r3, #16
 8012fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8012fc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fcc:	e841 2300 	strex	r3, r2, [r1]
 8012fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d1e4      	bne.n	8012fa2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	69db      	ldr	r3, [r3, #28]
 8012fde:	f003 0310 	and.w	r3, r3, #16
 8012fe2:	2b10      	cmp	r3, #16
 8012fe4:	d103      	bne.n	8012fee <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2210      	movs	r2, #16
 8012fec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f7fe f97e 	bl	80112f8 <HAL_UARTEx_RxEventCallback>
 8012ffc:	e002      	b.n	8013004 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f7ee fb0a 	bl	8001618 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013004:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8013008:	2b00      	cmp	r3, #0
 801300a:	d006      	beq.n	801301a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801300c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013010:	f003 0320 	and.w	r3, r3, #32
 8013014:	2b00      	cmp	r3, #0
 8013016:	f47f aecd 	bne.w	8012db4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013020:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013024:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013028:	2b00      	cmp	r3, #0
 801302a:	d049      	beq.n	80130c0 <UART_RxISR_16BIT_FIFOEN+0x354>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013032:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8013036:	429a      	cmp	r2, r3
 8013038:	d242      	bcs.n	80130c0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	3308      	adds	r3, #8
 8013040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013044:	e853 3f00 	ldrex	r3, [r3]
 8013048:	623b      	str	r3, [r7, #32]
   return(result);
 801304a:	6a3b      	ldr	r3, [r7, #32]
 801304c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	3308      	adds	r3, #8
 801305a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801305e:	633a      	str	r2, [r7, #48]	; 0x30
 8013060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013066:	e841 2300 	strex	r3, r2, [r1]
 801306a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801306e:	2b00      	cmp	r3, #0
 8013070:	d1e3      	bne.n	801303a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	4a16      	ldr	r2, [pc, #88]	; (80130d0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8013076:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	e853 3f00 	ldrex	r3, [r3]
 8013084:	60fb      	str	r3, [r7, #12]
   return(result);
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	f043 0320 	orr.w	r3, r3, #32
 801308c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	461a      	mov	r2, r3
 8013096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801309a:	61fb      	str	r3, [r7, #28]
 801309c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801309e:	69b9      	ldr	r1, [r7, #24]
 80130a0:	69fa      	ldr	r2, [r7, #28]
 80130a2:	e841 2300 	strex	r3, r2, [r1]
 80130a6:	617b      	str	r3, [r7, #20]
   return(result);
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d1e4      	bne.n	8013078 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80130ae:	e007      	b.n	80130c0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	699a      	ldr	r2, [r3, #24]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	f042 0208 	orr.w	r2, r2, #8
 80130be:	619a      	str	r2, [r3, #24]
}
 80130c0:	bf00      	nop
 80130c2:	37b8      	adds	r7, #184	; 0xb8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	effffffe 	.word	0xeffffffe
 80130cc:	58000c00 	.word	0x58000c00
 80130d0:	08012855 	.word	0x08012855

080130d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80130d4:	b480      	push	{r7}
 80130d6:	b083      	sub	sp, #12
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80130dc:	bf00      	nop
 80130de:	370c      	adds	r7, #12
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr

080130e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80130f0:	bf00      	nop
 80130f2:	370c      	adds	r7, #12
 80130f4:	46bd      	mov	sp, r7
 80130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fa:	4770      	bx	lr

080130fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80130fc:	b480      	push	{r7}
 80130fe:	b083      	sub	sp, #12
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013104:	bf00      	nop
 8013106:	370c      	adds	r7, #12
 8013108:	46bd      	mov	sp, r7
 801310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310e:	4770      	bx	lr

08013110 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8013110:	b480      	push	{r7}
 8013112:	b089      	sub	sp, #36	; 0x24
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801311e:	2b01      	cmp	r3, #1
 8013120:	d101      	bne.n	8013126 <HAL_UARTEx_EnableStopMode+0x16>
 8013122:	2302      	movs	r3, #2
 8013124:	e021      	b.n	801316a <HAL_UARTEx_EnableStopMode+0x5a>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2201      	movs	r2, #1
 801312a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	e853 3f00 	ldrex	r3, [r3]
 801313a:	60bb      	str	r3, [r7, #8]
   return(result);
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	f043 0302 	orr.w	r3, r3, #2
 8013142:	61fb      	str	r3, [r7, #28]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	461a      	mov	r2, r3
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	61bb      	str	r3, [r7, #24]
 801314e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013150:	6979      	ldr	r1, [r7, #20]
 8013152:	69ba      	ldr	r2, [r7, #24]
 8013154:	e841 2300 	strex	r3, r2, [r1]
 8013158:	613b      	str	r3, [r7, #16]
   return(result);
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d1e6      	bne.n	801312e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2200      	movs	r2, #0
 8013164:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013168:	2300      	movs	r3, #0
}
 801316a:	4618      	mov	r0, r3
 801316c:	3724      	adds	r7, #36	; 0x24
 801316e:	46bd      	mov	sp, r7
 8013170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013174:	4770      	bx	lr

08013176 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8013176:	b580      	push	{r7, lr}
 8013178:	b084      	sub	sp, #16
 801317a:	af00      	add	r7, sp, #0
 801317c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013184:	2b01      	cmp	r3, #1
 8013186:	d101      	bne.n	801318c <HAL_UARTEx_EnableFifoMode+0x16>
 8013188:	2302      	movs	r3, #2
 801318a:	e02b      	b.n	80131e4 <HAL_UARTEx_EnableFifoMode+0x6e>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2201      	movs	r2, #1
 8013190:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2224      	movs	r2, #36	; 0x24
 8013198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	681a      	ldr	r2, [r3, #0]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	f022 0201 	bic.w	r2, r2, #1
 80131b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80131ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80131c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	68fa      	ldr	r2, [r7, #12]
 80131ca:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	f000 f8c3 	bl	8013358 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2220      	movs	r2, #32
 80131d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2200      	movs	r2, #0
 80131de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80131e2:	2300      	movs	r3, #0
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3710      	adds	r7, #16
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80131ec:	b480      	push	{r7}
 80131ee:	b085      	sub	sp, #20
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80131fa:	2b01      	cmp	r3, #1
 80131fc:	d101      	bne.n	8013202 <HAL_UARTEx_DisableFifoMode+0x16>
 80131fe:	2302      	movs	r3, #2
 8013200:	e027      	b.n	8013252 <HAL_UARTEx_DisableFifoMode+0x66>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2201      	movs	r2, #1
 8013206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2224      	movs	r2, #36	; 0x24
 801320e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	681a      	ldr	r2, [r3, #0]
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	f022 0201 	bic.w	r2, r2, #1
 8013228:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013230:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2200      	movs	r2, #0
 8013236:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	68fa      	ldr	r2, [r7, #12]
 801323e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2220      	movs	r2, #32
 8013244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2200      	movs	r2, #0
 801324c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013250:	2300      	movs	r3, #0
}
 8013252:	4618      	mov	r0, r3
 8013254:	3714      	adds	r7, #20
 8013256:	46bd      	mov	sp, r7
 8013258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325c:	4770      	bx	lr

0801325e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801325e:	b580      	push	{r7, lr}
 8013260:	b084      	sub	sp, #16
 8013262:	af00      	add	r7, sp, #0
 8013264:	6078      	str	r0, [r7, #4]
 8013266:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801326e:	2b01      	cmp	r3, #1
 8013270:	d101      	bne.n	8013276 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013272:	2302      	movs	r3, #2
 8013274:	e02d      	b.n	80132d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2201      	movs	r2, #1
 801327a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2224      	movs	r2, #36	; 0x24
 8013282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	f022 0201 	bic.w	r2, r2, #1
 801329c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	689b      	ldr	r3, [r3, #8]
 80132a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	683a      	ldr	r2, [r7, #0]
 80132ae:	430a      	orrs	r2, r1
 80132b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f000 f850 	bl	8013358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	68fa      	ldr	r2, [r7, #12]
 80132be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2220      	movs	r2, #32
 80132c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2200      	movs	r2, #0
 80132cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80132d0:	2300      	movs	r3, #0
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3710      	adds	r7, #16
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}

080132da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80132da:	b580      	push	{r7, lr}
 80132dc:	b084      	sub	sp, #16
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
 80132e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80132ea:	2b01      	cmp	r3, #1
 80132ec:	d101      	bne.n	80132f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80132ee:	2302      	movs	r3, #2
 80132f0:	e02d      	b.n	801334e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2201      	movs	r2, #1
 80132f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2224      	movs	r2, #36	; 0x24
 80132fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	f022 0201 	bic.w	r2, r2, #1
 8013318:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	689b      	ldr	r3, [r3, #8]
 8013320:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	683a      	ldr	r2, [r7, #0]
 801332a:	430a      	orrs	r2, r1
 801332c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f000 f812 	bl	8013358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	68fa      	ldr	r2, [r7, #12]
 801333a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2220      	movs	r2, #32
 8013340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2200      	movs	r2, #0
 8013348:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801334c:	2300      	movs	r3, #0
}
 801334e:	4618      	mov	r0, r3
 8013350:	3710      	adds	r7, #16
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
	...

08013358 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013358:	b480      	push	{r7}
 801335a:	b085      	sub	sp, #20
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013364:	2b00      	cmp	r3, #0
 8013366:	d108      	bne.n	801337a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2201      	movs	r2, #1
 801336c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2201      	movs	r2, #1
 8013374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013378:	e031      	b.n	80133de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801337a:	2310      	movs	r3, #16
 801337c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801337e:	2310      	movs	r3, #16
 8013380:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	689b      	ldr	r3, [r3, #8]
 8013388:	0e5b      	lsrs	r3, r3, #25
 801338a:	b2db      	uxtb	r3, r3
 801338c:	f003 0307 	and.w	r3, r3, #7
 8013390:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	689b      	ldr	r3, [r3, #8]
 8013398:	0f5b      	lsrs	r3, r3, #29
 801339a:	b2db      	uxtb	r3, r3
 801339c:	f003 0307 	and.w	r3, r3, #7
 80133a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80133a2:	7bbb      	ldrb	r3, [r7, #14]
 80133a4:	7b3a      	ldrb	r2, [r7, #12]
 80133a6:	4911      	ldr	r1, [pc, #68]	; (80133ec <UARTEx_SetNbDataToProcess+0x94>)
 80133a8:	5c8a      	ldrb	r2, [r1, r2]
 80133aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80133ae:	7b3a      	ldrb	r2, [r7, #12]
 80133b0:	490f      	ldr	r1, [pc, #60]	; (80133f0 <UARTEx_SetNbDataToProcess+0x98>)
 80133b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80133b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80133b8:	b29a      	uxth	r2, r3
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80133c0:	7bfb      	ldrb	r3, [r7, #15]
 80133c2:	7b7a      	ldrb	r2, [r7, #13]
 80133c4:	4909      	ldr	r1, [pc, #36]	; (80133ec <UARTEx_SetNbDataToProcess+0x94>)
 80133c6:	5c8a      	ldrb	r2, [r1, r2]
 80133c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80133cc:	7b7a      	ldrb	r2, [r7, #13]
 80133ce:	4908      	ldr	r1, [pc, #32]	; (80133f0 <UARTEx_SetNbDataToProcess+0x98>)
 80133d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80133d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80133de:	bf00      	nop
 80133e0:	3714      	adds	r7, #20
 80133e2:	46bd      	mov	sp, r7
 80133e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e8:	4770      	bx	lr
 80133ea:	bf00      	nop
 80133ec:	08017bc8 	.word	0x08017bc8
 80133f0:	08017bd0 	.word	0x08017bd0

080133f4 <__NVIC_SetPriority>:
{
 80133f4:	b480      	push	{r7}
 80133f6:	b083      	sub	sp, #12
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	4603      	mov	r3, r0
 80133fc:	6039      	str	r1, [r7, #0]
 80133fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013404:	2b00      	cmp	r3, #0
 8013406:	db0a      	blt.n	801341e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	b2da      	uxtb	r2, r3
 801340c:	490c      	ldr	r1, [pc, #48]	; (8013440 <__NVIC_SetPriority+0x4c>)
 801340e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013412:	0112      	lsls	r2, r2, #4
 8013414:	b2d2      	uxtb	r2, r2
 8013416:	440b      	add	r3, r1
 8013418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801341c:	e00a      	b.n	8013434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801341e:	683b      	ldr	r3, [r7, #0]
 8013420:	b2da      	uxtb	r2, r3
 8013422:	4908      	ldr	r1, [pc, #32]	; (8013444 <__NVIC_SetPriority+0x50>)
 8013424:	88fb      	ldrh	r3, [r7, #6]
 8013426:	f003 030f 	and.w	r3, r3, #15
 801342a:	3b04      	subs	r3, #4
 801342c:	0112      	lsls	r2, r2, #4
 801342e:	b2d2      	uxtb	r2, r2
 8013430:	440b      	add	r3, r1
 8013432:	761a      	strb	r2, [r3, #24]
}
 8013434:	bf00      	nop
 8013436:	370c      	adds	r7, #12
 8013438:	46bd      	mov	sp, r7
 801343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343e:	4770      	bx	lr
 8013440:	e000e100 	.word	0xe000e100
 8013444:	e000ed00 	.word	0xe000ed00

08013448 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013448:	b580      	push	{r7, lr}
 801344a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801344c:	4b05      	ldr	r3, [pc, #20]	; (8013464 <SysTick_Handler+0x1c>)
 801344e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013450:	f002 fb92 	bl	8015b78 <xTaskGetSchedulerState>
 8013454:	4603      	mov	r3, r0
 8013456:	2b01      	cmp	r3, #1
 8013458:	d001      	beq.n	801345e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801345a:	f003 f9b5 	bl	80167c8 <xPortSysTickHandler>
  }
}
 801345e:	bf00      	nop
 8013460:	bd80      	pop	{r7, pc}
 8013462:	bf00      	nop
 8013464:	e000e010 	.word	0xe000e010

08013468 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013468:	b580      	push	{r7, lr}
 801346a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801346c:	2100      	movs	r1, #0
 801346e:	f06f 0004 	mvn.w	r0, #4
 8013472:	f7ff ffbf 	bl	80133f4 <__NVIC_SetPriority>
#endif
}
 8013476:	bf00      	nop
 8013478:	bd80      	pop	{r7, pc}
	...

0801347c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013482:	f3ef 8305 	mrs	r3, IPSR
 8013486:	603b      	str	r3, [r7, #0]
  return(result);
 8013488:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801348a:	2b00      	cmp	r3, #0
 801348c:	d003      	beq.n	8013496 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801348e:	f06f 0305 	mvn.w	r3, #5
 8013492:	607b      	str	r3, [r7, #4]
 8013494:	e00c      	b.n	80134b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013496:	4b0a      	ldr	r3, [pc, #40]	; (80134c0 <osKernelInitialize+0x44>)
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d105      	bne.n	80134aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801349e:	4b08      	ldr	r3, [pc, #32]	; (80134c0 <osKernelInitialize+0x44>)
 80134a0:	2201      	movs	r2, #1
 80134a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80134a4:	2300      	movs	r3, #0
 80134a6:	607b      	str	r3, [r7, #4]
 80134a8:	e002      	b.n	80134b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80134aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80134b0:	687b      	ldr	r3, [r7, #4]
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	370c      	adds	r7, #12
 80134b6:	46bd      	mov	sp, r7
 80134b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134bc:	4770      	bx	lr
 80134be:	bf00      	nop
 80134c0:	24000c90 	.word	0x24000c90

080134c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134ca:	f3ef 8305 	mrs	r3, IPSR
 80134ce:	603b      	str	r3, [r7, #0]
  return(result);
 80134d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d003      	beq.n	80134de <osKernelStart+0x1a>
    stat = osErrorISR;
 80134d6:	f06f 0305 	mvn.w	r3, #5
 80134da:	607b      	str	r3, [r7, #4]
 80134dc:	e010      	b.n	8013500 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80134de:	4b0b      	ldr	r3, [pc, #44]	; (801350c <osKernelStart+0x48>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	2b01      	cmp	r3, #1
 80134e4:	d109      	bne.n	80134fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80134e6:	f7ff ffbf 	bl	8013468 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80134ea:	4b08      	ldr	r3, [pc, #32]	; (801350c <osKernelStart+0x48>)
 80134ec:	2202      	movs	r2, #2
 80134ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80134f0:	f001 fe54 	bl	801519c <vTaskStartScheduler>
      stat = osOK;
 80134f4:	2300      	movs	r3, #0
 80134f6:	607b      	str	r3, [r7, #4]
 80134f8:	e002      	b.n	8013500 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80134fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013500:	687b      	ldr	r3, [r7, #4]
}
 8013502:	4618      	mov	r0, r3
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	24000c90 	.word	0x24000c90

08013510 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013510:	b580      	push	{r7, lr}
 8013512:	b08e      	sub	sp, #56	; 0x38
 8013514:	af04      	add	r7, sp, #16
 8013516:	60f8      	str	r0, [r7, #12]
 8013518:	60b9      	str	r1, [r7, #8]
 801351a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801351c:	2300      	movs	r3, #0
 801351e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013520:	f3ef 8305 	mrs	r3, IPSR
 8013524:	617b      	str	r3, [r7, #20]
  return(result);
 8013526:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013528:	2b00      	cmp	r3, #0
 801352a:	d17e      	bne.n	801362a <osThreadNew+0x11a>
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d07b      	beq.n	801362a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013532:	2380      	movs	r3, #128	; 0x80
 8013534:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013536:	2318      	movs	r3, #24
 8013538:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801353a:	2300      	movs	r3, #0
 801353c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801353e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013542:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d045      	beq.n	80135d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d002      	beq.n	8013558 <osThreadNew+0x48>
        name = attr->name;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	699b      	ldr	r3, [r3, #24]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d002      	beq.n	8013566 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	699b      	ldr	r3, [r3, #24]
 8013564:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013566:	69fb      	ldr	r3, [r7, #28]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d008      	beq.n	801357e <osThreadNew+0x6e>
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	2b38      	cmp	r3, #56	; 0x38
 8013570:	d805      	bhi.n	801357e <osThreadNew+0x6e>
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	f003 0301 	and.w	r3, r3, #1
 801357a:	2b00      	cmp	r3, #0
 801357c:	d001      	beq.n	8013582 <osThreadNew+0x72>
        return (NULL);
 801357e:	2300      	movs	r3, #0
 8013580:	e054      	b.n	801362c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	695b      	ldr	r3, [r3, #20]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d003      	beq.n	8013592 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	695b      	ldr	r3, [r3, #20]
 801358e:	089b      	lsrs	r3, r3, #2
 8013590:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	689b      	ldr	r3, [r3, #8]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d00e      	beq.n	80135b8 <osThreadNew+0xa8>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	68db      	ldr	r3, [r3, #12]
 801359e:	2b5b      	cmp	r3, #91	; 0x5b
 80135a0:	d90a      	bls.n	80135b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d006      	beq.n	80135b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	695b      	ldr	r3, [r3, #20]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d002      	beq.n	80135b8 <osThreadNew+0xa8>
        mem = 1;
 80135b2:	2301      	movs	r3, #1
 80135b4:	61bb      	str	r3, [r7, #24]
 80135b6:	e010      	b.n	80135da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	689b      	ldr	r3, [r3, #8]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d10c      	bne.n	80135da <osThreadNew+0xca>
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	68db      	ldr	r3, [r3, #12]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d108      	bne.n	80135da <osThreadNew+0xca>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	691b      	ldr	r3, [r3, #16]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d104      	bne.n	80135da <osThreadNew+0xca>
          mem = 0;
 80135d0:	2300      	movs	r3, #0
 80135d2:	61bb      	str	r3, [r7, #24]
 80135d4:	e001      	b.n	80135da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80135d6:	2300      	movs	r3, #0
 80135d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80135da:	69bb      	ldr	r3, [r7, #24]
 80135dc:	2b01      	cmp	r3, #1
 80135de:	d110      	bne.n	8013602 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80135e4:	687a      	ldr	r2, [r7, #4]
 80135e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80135e8:	9202      	str	r2, [sp, #8]
 80135ea:	9301      	str	r3, [sp, #4]
 80135ec:	69fb      	ldr	r3, [r7, #28]
 80135ee:	9300      	str	r3, [sp, #0]
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	6a3a      	ldr	r2, [r7, #32]
 80135f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135f6:	68f8      	ldr	r0, [r7, #12]
 80135f8:	f001 fbfa 	bl	8014df0 <xTaskCreateStatic>
 80135fc:	4603      	mov	r3, r0
 80135fe:	613b      	str	r3, [r7, #16]
 8013600:	e013      	b.n	801362a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013602:	69bb      	ldr	r3, [r7, #24]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d110      	bne.n	801362a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013608:	6a3b      	ldr	r3, [r7, #32]
 801360a:	b29a      	uxth	r2, r3
 801360c:	f107 0310 	add.w	r3, r7, #16
 8013610:	9301      	str	r3, [sp, #4]
 8013612:	69fb      	ldr	r3, [r7, #28]
 8013614:	9300      	str	r3, [sp, #0]
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f001 fc45 	bl	8014eaa <xTaskCreate>
 8013620:	4603      	mov	r3, r0
 8013622:	2b01      	cmp	r3, #1
 8013624:	d001      	beq.n	801362a <osThreadNew+0x11a>
            hTask = NULL;
 8013626:	2300      	movs	r3, #0
 8013628:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801362a:	693b      	ldr	r3, [r7, #16]
}
 801362c:	4618      	mov	r0, r3
 801362e:	3728      	adds	r7, #40	; 0x28
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}

08013634 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013634:	b480      	push	{r7}
 8013636:	b083      	sub	sp, #12
 8013638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801363a:	f3ef 8305 	mrs	r3, IPSR
 801363e:	603b      	str	r3, [r7, #0]
  return(result);
 8013640:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013642:	2b00      	cmp	r3, #0
 8013644:	d003      	beq.n	801364e <osThreadYield+0x1a>
    stat = osErrorISR;
 8013646:	f06f 0305 	mvn.w	r3, #5
 801364a:	607b      	str	r3, [r7, #4]
 801364c:	e009      	b.n	8013662 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801364e:	2300      	movs	r3, #0
 8013650:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8013652:	4b07      	ldr	r3, [pc, #28]	; (8013670 <osThreadYield+0x3c>)
 8013654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013658:	601a      	str	r2, [r3, #0]
 801365a:	f3bf 8f4f 	dsb	sy
 801365e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8013662:	687b      	ldr	r3, [r7, #4]
}
 8013664:	4618      	mov	r0, r3
 8013666:	370c      	adds	r7, #12
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr
 8013670:	e000ed04 	.word	0xe000ed04

08013674 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801367c:	f3ef 8305 	mrs	r3, IPSR
 8013680:	60bb      	str	r3, [r7, #8]
  return(result);
 8013682:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013684:	2b00      	cmp	r3, #0
 8013686:	d003      	beq.n	8013690 <osDelay+0x1c>
    stat = osErrorISR;
 8013688:	f06f 0305 	mvn.w	r3, #5
 801368c:	60fb      	str	r3, [r7, #12]
 801368e:	e007      	b.n	80136a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013690:	2300      	movs	r3, #0
 8013692:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d002      	beq.n	80136a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f001 fd4a 	bl	8015134 <vTaskDelay>
    }
  }

  return (stat);
 80136a0:	68fb      	ldr	r3, [r7, #12]
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3710      	adds	r7, #16
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}

080136aa <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80136aa:	b580      	push	{r7, lr}
 80136ac:	b086      	sub	sp, #24
 80136ae:	af00      	add	r7, sp, #0
 80136b0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80136b2:	2300      	movs	r3, #0
 80136b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80136b6:	f3ef 8305 	mrs	r3, IPSR
 80136ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80136bc:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d12d      	bne.n	801371e <osEventFlagsNew+0x74>
    mem = -1;
 80136c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136c6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d015      	beq.n	80136fa <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	689b      	ldr	r3, [r3, #8]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d006      	beq.n	80136e4 <osEventFlagsNew+0x3a>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	68db      	ldr	r3, [r3, #12]
 80136da:	2b1f      	cmp	r3, #31
 80136dc:	d902      	bls.n	80136e4 <osEventFlagsNew+0x3a>
        mem = 1;
 80136de:	2301      	movs	r3, #1
 80136e0:	613b      	str	r3, [r7, #16]
 80136e2:	e00c      	b.n	80136fe <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	689b      	ldr	r3, [r3, #8]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d108      	bne.n	80136fe <osEventFlagsNew+0x54>
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	68db      	ldr	r3, [r3, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d104      	bne.n	80136fe <osEventFlagsNew+0x54>
          mem = 0;
 80136f4:	2300      	movs	r3, #0
 80136f6:	613b      	str	r3, [r7, #16]
 80136f8:	e001      	b.n	80136fe <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80136fa:	2300      	movs	r3, #0
 80136fc:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	2b01      	cmp	r3, #1
 8013702:	d106      	bne.n	8013712 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	689b      	ldr	r3, [r3, #8]
 8013708:	4618      	mov	r0, r3
 801370a:	f000 fa6f 	bl	8013bec <xEventGroupCreateStatic>
 801370e:	6178      	str	r0, [r7, #20]
 8013710:	e005      	b.n	801371e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013712:	693b      	ldr	r3, [r7, #16]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d102      	bne.n	801371e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013718:	f000 fa9f 	bl	8013c5a <xEventGroupCreate>
 801371c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801371e:	697b      	ldr	r3, [r7, #20]
}
 8013720:	4618      	mov	r0, r3
 8013722:	3718      	adds	r7, #24
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013728:	b580      	push	{r7, lr}
 801372a:	b086      	sub	sp, #24
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d004      	beq.n	8013746 <osEventFlagsSet+0x1e>
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013742:	2b00      	cmp	r3, #0
 8013744:	d003      	beq.n	801374e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013746:	f06f 0303 	mvn.w	r3, #3
 801374a:	617b      	str	r3, [r7, #20]
 801374c:	e028      	b.n	80137a0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801374e:	f3ef 8305 	mrs	r3, IPSR
 8013752:	60fb      	str	r3, [r7, #12]
  return(result);
 8013754:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013756:	2b00      	cmp	r3, #0
 8013758:	d01d      	beq.n	8013796 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801375a:	2300      	movs	r3, #0
 801375c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801375e:	f107 0308 	add.w	r3, r7, #8
 8013762:	461a      	mov	r2, r3
 8013764:	6839      	ldr	r1, [r7, #0]
 8013766:	6938      	ldr	r0, [r7, #16]
 8013768:	f000 fc98 	bl	801409c <xEventGroupSetBitsFromISR>
 801376c:	4603      	mov	r3, r0
 801376e:	2b00      	cmp	r3, #0
 8013770:	d103      	bne.n	801377a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8013772:	f06f 0302 	mvn.w	r3, #2
 8013776:	617b      	str	r3, [r7, #20]
 8013778:	e012      	b.n	80137a0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d00d      	beq.n	80137a0 <osEventFlagsSet+0x78>
 8013784:	4b09      	ldr	r3, [pc, #36]	; (80137ac <osEventFlagsSet+0x84>)
 8013786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801378a:	601a      	str	r2, [r3, #0]
 801378c:	f3bf 8f4f 	dsb	sy
 8013790:	f3bf 8f6f 	isb	sy
 8013794:	e004      	b.n	80137a0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013796:	6839      	ldr	r1, [r7, #0]
 8013798:	6938      	ldr	r0, [r7, #16]
 801379a:	f000 fbb7 	bl	8013f0c <xEventGroupSetBits>
 801379e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80137a0:	697b      	ldr	r3, [r7, #20]
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3718      	adds	r7, #24
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}
 80137aa:	bf00      	nop
 80137ac:	e000ed04 	.word	0xe000ed04

080137b0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b086      	sub	sp, #24
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d004      	beq.n	80137ce <osEventFlagsClear+0x1e>
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d003      	beq.n	80137d6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80137ce:	f06f 0303 	mvn.w	r3, #3
 80137d2:	617b      	str	r3, [r7, #20]
 80137d4:	e019      	b.n	801380a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137d6:	f3ef 8305 	mrs	r3, IPSR
 80137da:	60fb      	str	r3, [r7, #12]
  return(result);
 80137dc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d00e      	beq.n	8013800 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80137e2:	6938      	ldr	r0, [r7, #16]
 80137e4:	f000 fb6e 	bl	8013ec4 <xEventGroupGetBitsFromISR>
 80137e8:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80137ea:	6839      	ldr	r1, [r7, #0]
 80137ec:	6938      	ldr	r0, [r7, #16]
 80137ee:	f000 fb55 	bl	8013e9c <xEventGroupClearBitsFromISR>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d108      	bne.n	801380a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80137f8:	f06f 0302 	mvn.w	r3, #2
 80137fc:	617b      	str	r3, [r7, #20]
 80137fe:	e004      	b.n	801380a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8013800:	6839      	ldr	r1, [r7, #0]
 8013802:	6938      	ldr	r0, [r7, #16]
 8013804:	f000 fb12 	bl	8013e2c <xEventGroupClearBits>
 8013808:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801380a:	697b      	ldr	r3, [r7, #20]
}
 801380c:	4618      	mov	r0, r3
 801380e:	3718      	adds	r7, #24
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}

08013814 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8013814:	b580      	push	{r7, lr}
 8013816:	b08c      	sub	sp, #48	; 0x30
 8013818:	af02      	add	r7, sp, #8
 801381a:	60f8      	str	r0, [r7, #12]
 801381c:	60b9      	str	r1, [r7, #8]
 801381e:	607a      	str	r2, [r7, #4]
 8013820:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013826:	69bb      	ldr	r3, [r7, #24]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d004      	beq.n	8013836 <osEventFlagsWait+0x22>
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013832:	2b00      	cmp	r3, #0
 8013834:	d003      	beq.n	801383e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8013836:	f06f 0303 	mvn.w	r3, #3
 801383a:	61fb      	str	r3, [r7, #28]
 801383c:	e04b      	b.n	80138d6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801383e:	f3ef 8305 	mrs	r3, IPSR
 8013842:	617b      	str	r3, [r7, #20]
  return(result);
 8013844:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013846:	2b00      	cmp	r3, #0
 8013848:	d003      	beq.n	8013852 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801384a:	f06f 0305 	mvn.w	r3, #5
 801384e:	61fb      	str	r3, [r7, #28]
 8013850:	e041      	b.n	80138d6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f003 0301 	and.w	r3, r3, #1
 8013858:	2b00      	cmp	r3, #0
 801385a:	d002      	beq.n	8013862 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801385c:	2301      	movs	r3, #1
 801385e:	627b      	str	r3, [r7, #36]	; 0x24
 8013860:	e001      	b.n	8013866 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013862:	2300      	movs	r3, #0
 8013864:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f003 0302 	and.w	r3, r3, #2
 801386c:	2b00      	cmp	r3, #0
 801386e:	d002      	beq.n	8013876 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013870:	2300      	movs	r3, #0
 8013872:	623b      	str	r3, [r7, #32]
 8013874:	e001      	b.n	801387a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013876:	2301      	movs	r3, #1
 8013878:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	9300      	str	r3, [sp, #0]
 801387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013880:	6a3a      	ldr	r2, [r7, #32]
 8013882:	68b9      	ldr	r1, [r7, #8]
 8013884:	69b8      	ldr	r0, [r7, #24]
 8013886:	f000 fa03 	bl	8013c90 <xEventGroupWaitBits>
 801388a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f003 0301 	and.w	r3, r3, #1
 8013892:	2b00      	cmp	r3, #0
 8013894:	d010      	beq.n	80138b8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013896:	68ba      	ldr	r2, [r7, #8]
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	4013      	ands	r3, r2
 801389c:	68ba      	ldr	r2, [r7, #8]
 801389e:	429a      	cmp	r2, r3
 80138a0:	d019      	beq.n	80138d6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d003      	beq.n	80138b0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80138a8:	f06f 0301 	mvn.w	r3, #1
 80138ac:	61fb      	str	r3, [r7, #28]
 80138ae:	e012      	b.n	80138d6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80138b0:	f06f 0302 	mvn.w	r3, #2
 80138b4:	61fb      	str	r3, [r7, #28]
 80138b6:	e00e      	b.n	80138d6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80138b8:	68ba      	ldr	r2, [r7, #8]
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	4013      	ands	r3, r2
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d109      	bne.n	80138d6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d003      	beq.n	80138d0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80138c8:	f06f 0301 	mvn.w	r3, #1
 80138cc:	61fb      	str	r3, [r7, #28]
 80138ce:	e002      	b.n	80138d6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80138d0:	f06f 0302 	mvn.w	r3, #2
 80138d4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80138d6:	69fb      	ldr	r3, [r7, #28]
}
 80138d8:	4618      	mov	r0, r3
 80138da:	3728      	adds	r7, #40	; 0x28
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}

080138e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b08a      	sub	sp, #40	; 0x28
 80138e4:	af02      	add	r7, sp, #8
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80138ec:	2300      	movs	r3, #0
 80138ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80138f0:	f3ef 8305 	mrs	r3, IPSR
 80138f4:	613b      	str	r3, [r7, #16]
  return(result);
 80138f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d15f      	bne.n	80139bc <osMessageQueueNew+0xdc>
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d05c      	beq.n	80139bc <osMessageQueueNew+0xdc>
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d059      	beq.n	80139bc <osMessageQueueNew+0xdc>
    mem = -1;
 8013908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801390c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d029      	beq.n	8013968 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	689b      	ldr	r3, [r3, #8]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d012      	beq.n	8013942 <osMessageQueueNew+0x62>
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	68db      	ldr	r3, [r3, #12]
 8013920:	2b4f      	cmp	r3, #79	; 0x4f
 8013922:	d90e      	bls.n	8013942 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013928:	2b00      	cmp	r3, #0
 801392a:	d00a      	beq.n	8013942 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	695a      	ldr	r2, [r3, #20]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	68b9      	ldr	r1, [r7, #8]
 8013934:	fb01 f303 	mul.w	r3, r1, r3
 8013938:	429a      	cmp	r2, r3
 801393a:	d302      	bcc.n	8013942 <osMessageQueueNew+0x62>
        mem = 1;
 801393c:	2301      	movs	r3, #1
 801393e:	61bb      	str	r3, [r7, #24]
 8013940:	e014      	b.n	801396c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	689b      	ldr	r3, [r3, #8]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d110      	bne.n	801396c <osMessageQueueNew+0x8c>
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	68db      	ldr	r3, [r3, #12]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d10c      	bne.n	801396c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013956:	2b00      	cmp	r3, #0
 8013958:	d108      	bne.n	801396c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	695b      	ldr	r3, [r3, #20]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d104      	bne.n	801396c <osMessageQueueNew+0x8c>
          mem = 0;
 8013962:	2300      	movs	r3, #0
 8013964:	61bb      	str	r3, [r7, #24]
 8013966:	e001      	b.n	801396c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8013968:	2300      	movs	r3, #0
 801396a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801396c:	69bb      	ldr	r3, [r7, #24]
 801396e:	2b01      	cmp	r3, #1
 8013970:	d10b      	bne.n	801398a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	691a      	ldr	r2, [r3, #16]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	689b      	ldr	r3, [r3, #8]
 801397a:	2100      	movs	r1, #0
 801397c:	9100      	str	r1, [sp, #0]
 801397e:	68b9      	ldr	r1, [r7, #8]
 8013980:	68f8      	ldr	r0, [r7, #12]
 8013982:	f000 fcbb 	bl	80142fc <xQueueGenericCreateStatic>
 8013986:	61f8      	str	r0, [r7, #28]
 8013988:	e008      	b.n	801399c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801398a:	69bb      	ldr	r3, [r7, #24]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d105      	bne.n	801399c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8013990:	2200      	movs	r2, #0
 8013992:	68b9      	ldr	r1, [r7, #8]
 8013994:	68f8      	ldr	r0, [r7, #12]
 8013996:	f000 fd29 	bl	80143ec <xQueueGenericCreate>
 801399a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801399c:	69fb      	ldr	r3, [r7, #28]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d00c      	beq.n	80139bc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d003      	beq.n	80139b0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	617b      	str	r3, [r7, #20]
 80139ae:	e001      	b.n	80139b4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80139b0:	2300      	movs	r3, #0
 80139b2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80139b4:	6979      	ldr	r1, [r7, #20]
 80139b6:	69f8      	ldr	r0, [r7, #28]
 80139b8:	f001 f9bc 	bl	8014d34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80139bc:	69fb      	ldr	r3, [r7, #28]
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3720      	adds	r7, #32
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}
	...

080139c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b088      	sub	sp, #32
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	60b9      	str	r1, [r7, #8]
 80139d2:	603b      	str	r3, [r7, #0]
 80139d4:	4613      	mov	r3, r2
 80139d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80139dc:	2300      	movs	r3, #0
 80139de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80139e0:	f3ef 8305 	mrs	r3, IPSR
 80139e4:	617b      	str	r3, [r7, #20]
  return(result);
 80139e6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d028      	beq.n	8013a3e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80139ec:	69bb      	ldr	r3, [r7, #24]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d005      	beq.n	80139fe <osMessageQueuePut+0x36>
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d002      	beq.n	80139fe <osMessageQueuePut+0x36>
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d003      	beq.n	8013a06 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80139fe:	f06f 0303 	mvn.w	r3, #3
 8013a02:	61fb      	str	r3, [r7, #28]
 8013a04:	e038      	b.n	8013a78 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8013a06:	2300      	movs	r3, #0
 8013a08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013a0a:	f107 0210 	add.w	r2, r7, #16
 8013a0e:	2300      	movs	r3, #0
 8013a10:	68b9      	ldr	r1, [r7, #8]
 8013a12:	69b8      	ldr	r0, [r7, #24]
 8013a14:	f000 fe46 	bl	80146a4 <xQueueGenericSendFromISR>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d003      	beq.n	8013a26 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8013a1e:	f06f 0302 	mvn.w	r3, #2
 8013a22:	61fb      	str	r3, [r7, #28]
 8013a24:	e028      	b.n	8013a78 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d025      	beq.n	8013a78 <osMessageQueuePut+0xb0>
 8013a2c:	4b15      	ldr	r3, [pc, #84]	; (8013a84 <osMessageQueuePut+0xbc>)
 8013a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a32:	601a      	str	r2, [r3, #0]
 8013a34:	f3bf 8f4f 	dsb	sy
 8013a38:	f3bf 8f6f 	isb	sy
 8013a3c:	e01c      	b.n	8013a78 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013a3e:	69bb      	ldr	r3, [r7, #24]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d002      	beq.n	8013a4a <osMessageQueuePut+0x82>
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d103      	bne.n	8013a52 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8013a4a:	f06f 0303 	mvn.w	r3, #3
 8013a4e:	61fb      	str	r3, [r7, #28]
 8013a50:	e012      	b.n	8013a78 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013a52:	2300      	movs	r3, #0
 8013a54:	683a      	ldr	r2, [r7, #0]
 8013a56:	68b9      	ldr	r1, [r7, #8]
 8013a58:	69b8      	ldr	r0, [r7, #24]
 8013a5a:	f000 fd25 	bl	80144a8 <xQueueGenericSend>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2b01      	cmp	r3, #1
 8013a62:	d009      	beq.n	8013a78 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d003      	beq.n	8013a72 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8013a6a:	f06f 0301 	mvn.w	r3, #1
 8013a6e:	61fb      	str	r3, [r7, #28]
 8013a70:	e002      	b.n	8013a78 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8013a72:	f06f 0302 	mvn.w	r3, #2
 8013a76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013a78:	69fb      	ldr	r3, [r7, #28]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3720      	adds	r7, #32
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	e000ed04 	.word	0xe000ed04

08013a88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b088      	sub	sp, #32
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	60f8      	str	r0, [r7, #12]
 8013a90:	60b9      	str	r1, [r7, #8]
 8013a92:	607a      	str	r2, [r7, #4]
 8013a94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a9e:	f3ef 8305 	mrs	r3, IPSR
 8013aa2:	617b      	str	r3, [r7, #20]
  return(result);
 8013aa4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d028      	beq.n	8013afc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013aaa:	69bb      	ldr	r3, [r7, #24]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d005      	beq.n	8013abc <osMessageQueueGet+0x34>
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d002      	beq.n	8013abc <osMessageQueueGet+0x34>
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d003      	beq.n	8013ac4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013abc:	f06f 0303 	mvn.w	r3, #3
 8013ac0:	61fb      	str	r3, [r7, #28]
 8013ac2:	e037      	b.n	8013b34 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013ac8:	f107 0310 	add.w	r3, r7, #16
 8013acc:	461a      	mov	r2, r3
 8013ace:	68b9      	ldr	r1, [r7, #8]
 8013ad0:	69b8      	ldr	r0, [r7, #24]
 8013ad2:	f000 ff63 	bl	801499c <xQueueReceiveFromISR>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	2b01      	cmp	r3, #1
 8013ada:	d003      	beq.n	8013ae4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013adc:	f06f 0302 	mvn.w	r3, #2
 8013ae0:	61fb      	str	r3, [r7, #28]
 8013ae2:	e027      	b.n	8013b34 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d024      	beq.n	8013b34 <osMessageQueueGet+0xac>
 8013aea:	4b15      	ldr	r3, [pc, #84]	; (8013b40 <osMessageQueueGet+0xb8>)
 8013aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013af0:	601a      	str	r2, [r3, #0]
 8013af2:	f3bf 8f4f 	dsb	sy
 8013af6:	f3bf 8f6f 	isb	sy
 8013afa:	e01b      	b.n	8013b34 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013afc:	69bb      	ldr	r3, [r7, #24]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d002      	beq.n	8013b08 <osMessageQueueGet+0x80>
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d103      	bne.n	8013b10 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013b08:	f06f 0303 	mvn.w	r3, #3
 8013b0c:	61fb      	str	r3, [r7, #28]
 8013b0e:	e011      	b.n	8013b34 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013b10:	683a      	ldr	r2, [r7, #0]
 8013b12:	68b9      	ldr	r1, [r7, #8]
 8013b14:	69b8      	ldr	r0, [r7, #24]
 8013b16:	f000 fe61 	bl	80147dc <xQueueReceive>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d009      	beq.n	8013b34 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d003      	beq.n	8013b2e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8013b26:	f06f 0301 	mvn.w	r3, #1
 8013b2a:	61fb      	str	r3, [r7, #28]
 8013b2c:	e002      	b.n	8013b34 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8013b2e:	f06f 0302 	mvn.w	r3, #2
 8013b32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013b34:	69fb      	ldr	r3, [r7, #28]
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	3720      	adds	r7, #32
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}
 8013b3e:	bf00      	nop
 8013b40:	e000ed04 	.word	0xe000ed04

08013b44 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b086      	sub	sp, #24
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8013b50:	693b      	ldr	r3, [r7, #16]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d102      	bne.n	8013b5c <osMessageQueueGetCount+0x18>
    count = 0U;
 8013b56:	2300      	movs	r3, #0
 8013b58:	617b      	str	r3, [r7, #20]
 8013b5a:	e00e      	b.n	8013b7a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b5c:	f3ef 8305 	mrs	r3, IPSR
 8013b60:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b62:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d004      	beq.n	8013b72 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8013b68:	6938      	ldr	r0, [r7, #16]
 8013b6a:	f000 ffb5 	bl	8014ad8 <uxQueueMessagesWaitingFromISR>
 8013b6e:	6178      	str	r0, [r7, #20]
 8013b70:	e003      	b.n	8013b7a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8013b72:	6938      	ldr	r0, [r7, #16]
 8013b74:	f000 ff92 	bl	8014a9c <uxQueueMessagesWaiting>
 8013b78:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8013b7a:	697b      	ldr	r3, [r7, #20]
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3718      	adds	r7, #24
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}

08013b84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013b84:	b480      	push	{r7}
 8013b86:	b085      	sub	sp, #20
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	60b9      	str	r1, [r7, #8]
 8013b8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	4a07      	ldr	r2, [pc, #28]	; (8013bb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8013b94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	4a06      	ldr	r2, [pc, #24]	; (8013bb4 <vApplicationGetIdleTaskMemory+0x30>)
 8013b9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2280      	movs	r2, #128	; 0x80
 8013ba0:	601a      	str	r2, [r3, #0]
}
 8013ba2:	bf00      	nop
 8013ba4:	3714      	adds	r7, #20
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bac:	4770      	bx	lr
 8013bae:	bf00      	nop
 8013bb0:	24000c94 	.word	0x24000c94
 8013bb4:	24000cf0 	.word	0x24000cf0

08013bb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013bb8:	b480      	push	{r7}
 8013bba:	b085      	sub	sp, #20
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	60f8      	str	r0, [r7, #12]
 8013bc0:	60b9      	str	r1, [r7, #8]
 8013bc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	4a07      	ldr	r2, [pc, #28]	; (8013be4 <vApplicationGetTimerTaskMemory+0x2c>)
 8013bc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	4a06      	ldr	r2, [pc, #24]	; (8013be8 <vApplicationGetTimerTaskMemory+0x30>)
 8013bce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013bd6:	601a      	str	r2, [r3, #0]
}
 8013bd8:	bf00      	nop
 8013bda:	3714      	adds	r7, #20
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be2:	4770      	bx	lr
 8013be4:	24000ef0 	.word	0x24000ef0
 8013be8:	24000f4c 	.word	0x24000f4c

08013bec <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b086      	sub	sp, #24
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d10a      	bne.n	8013c10 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfe:	f383 8811 	msr	BASEPRI, r3
 8013c02:	f3bf 8f6f 	isb	sy
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013c0c:	bf00      	nop
 8013c0e:	e7fe      	b.n	8013c0e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013c10:	2320      	movs	r3, #32
 8013c12:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	2b20      	cmp	r3, #32
 8013c18:	d00a      	beq.n	8013c30 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1e:	f383 8811 	msr	BASEPRI, r3
 8013c22:	f3bf 8f6f 	isb	sy
 8013c26:	f3bf 8f4f 	dsb	sy
 8013c2a:	60fb      	str	r3, [r7, #12]
}
 8013c2c:	bf00      	nop
 8013c2e:	e7fe      	b.n	8013c2e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d00a      	beq.n	8013c50 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	3304      	adds	r3, #4
 8013c44:	4618      	mov	r0, r3
 8013c46:	f000 fa3d 	bl	80140c4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013c50:	697b      	ldr	r3, [r7, #20]
	}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3718      	adds	r7, #24
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}

08013c5a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013c5a:	b580      	push	{r7, lr}
 8013c5c:	b082      	sub	sp, #8
 8013c5e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013c60:	2020      	movs	r0, #32
 8013c62:	f002 fe41 	bl	80168e8 <pvPortMalloc>
 8013c66:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d00a      	beq.n	8013c84 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2200      	movs	r2, #0
 8013c72:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	3304      	adds	r3, #4
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f000 fa23 	bl	80140c4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2200      	movs	r2, #0
 8013c82:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013c84:	687b      	ldr	r3, [r7, #4]
	}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3708      	adds	r7, #8
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
	...

08013c90 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b090      	sub	sp, #64	; 0x40
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	60f8      	str	r0, [r7, #12]
 8013c98:	60b9      	str	r1, [r7, #8]
 8013c9a:	607a      	str	r2, [r7, #4]
 8013c9c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d10a      	bne.n	8013cc6 <xEventGroupWaitBits+0x36>
	__asm volatile
 8013cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb4:	f383 8811 	msr	BASEPRI, r3
 8013cb8:	f3bf 8f6f 	isb	sy
 8013cbc:	f3bf 8f4f 	dsb	sy
 8013cc0:	623b      	str	r3, [r7, #32]
}
 8013cc2:	bf00      	nop
 8013cc4:	e7fe      	b.n	8013cc4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d00a      	beq.n	8013ce6 <xEventGroupWaitBits+0x56>
	__asm volatile
 8013cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd4:	f383 8811 	msr	BASEPRI, r3
 8013cd8:	f3bf 8f6f 	isb	sy
 8013cdc:	f3bf 8f4f 	dsb	sy
 8013ce0:	61fb      	str	r3, [r7, #28]
}
 8013ce2:	bf00      	nop
 8013ce4:	e7fe      	b.n	8013ce4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013ce6:	68bb      	ldr	r3, [r7, #8]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d10a      	bne.n	8013d02 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf0:	f383 8811 	msr	BASEPRI, r3
 8013cf4:	f3bf 8f6f 	isb	sy
 8013cf8:	f3bf 8f4f 	dsb	sy
 8013cfc:	61bb      	str	r3, [r7, #24]
}
 8013cfe:	bf00      	nop
 8013d00:	e7fe      	b.n	8013d00 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013d02:	f001 ff39 	bl	8015b78 <xTaskGetSchedulerState>
 8013d06:	4603      	mov	r3, r0
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d102      	bne.n	8013d12 <xEventGroupWaitBits+0x82>
 8013d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d101      	bne.n	8013d16 <xEventGroupWaitBits+0x86>
 8013d12:	2301      	movs	r3, #1
 8013d14:	e000      	b.n	8013d18 <xEventGroupWaitBits+0x88>
 8013d16:	2300      	movs	r3, #0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d10a      	bne.n	8013d32 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d20:	f383 8811 	msr	BASEPRI, r3
 8013d24:	f3bf 8f6f 	isb	sy
 8013d28:	f3bf 8f4f 	dsb	sy
 8013d2c:	617b      	str	r3, [r7, #20]
}
 8013d2e:	bf00      	nop
 8013d30:	e7fe      	b.n	8013d30 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013d32:	f001 fa99 	bl	8015268 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013d3c:	683a      	ldr	r2, [r7, #0]
 8013d3e:	68b9      	ldr	r1, [r7, #8]
 8013d40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d42:	f000 f988 	bl	8014056 <prvTestWaitCondition>
 8013d46:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d00e      	beq.n	8013d6c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d50:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013d52:	2300      	movs	r3, #0
 8013d54:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d028      	beq.n	8013dae <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	43db      	mvns	r3, r3
 8013d64:	401a      	ands	r2, r3
 8013d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d68:	601a      	str	r2, [r3, #0]
 8013d6a:	e020      	b.n	8013dae <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d104      	bne.n	8013d7c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d74:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013d76:	2301      	movs	r3, #1
 8013d78:	633b      	str	r3, [r7, #48]	; 0x30
 8013d7a:	e018      	b.n	8013dae <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d003      	beq.n	8013d8a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013d88:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d003      	beq.n	8013d98 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013d96:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d9a:	1d18      	adds	r0, r3, #4
 8013d9c:	68ba      	ldr	r2, [r7, #8]
 8013d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da0:	4313      	orrs	r3, r2
 8013da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013da4:	4619      	mov	r1, r3
 8013da6:	f001 fc5f 	bl	8015668 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013daa:	2300      	movs	r3, #0
 8013dac:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013dae:	f001 fa69 	bl	8015284 <xTaskResumeAll>
 8013db2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d031      	beq.n	8013e1e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d107      	bne.n	8013dd0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013dc0:	4b19      	ldr	r3, [pc, #100]	; (8013e28 <xEventGroupWaitBits+0x198>)
 8013dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dc6:	601a      	str	r2, [r3, #0]
 8013dc8:	f3bf 8f4f 	dsb	sy
 8013dcc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013dd0:	f001 ff5e 	bl	8015c90 <uxTaskResetEventItemValue>
 8013dd4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d11a      	bne.n	8013e16 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013de0:	f002 fc60 	bl	80166a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013dea:	683a      	ldr	r2, [r7, #0]
 8013dec:	68b9      	ldr	r1, [r7, #8]
 8013dee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013df0:	f000 f931 	bl	8014056 <prvTestWaitCondition>
 8013df4:	4603      	mov	r3, r0
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d009      	beq.n	8013e0e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d006      	beq.n	8013e0e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e02:	681a      	ldr	r2, [r3, #0]
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	43db      	mvns	r3, r3
 8013e08:	401a      	ands	r2, r3
 8013e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e0c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013e0e:	2301      	movs	r3, #1
 8013e10:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013e12:	f002 fc77 	bl	8016704 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	3740      	adds	r7, #64	; 0x40
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}
 8013e28:	e000ed04 	.word	0xe000ed04

08013e2c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b086      	sub	sp, #24
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
 8013e34:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d10a      	bne.n	8013e56 <xEventGroupClearBits+0x2a>
	__asm volatile
 8013e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e44:	f383 8811 	msr	BASEPRI, r3
 8013e48:	f3bf 8f6f 	isb	sy
 8013e4c:	f3bf 8f4f 	dsb	sy
 8013e50:	60fb      	str	r3, [r7, #12]
}
 8013e52:	bf00      	nop
 8013e54:	e7fe      	b.n	8013e54 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d00a      	beq.n	8013e76 <xEventGroupClearBits+0x4a>
	__asm volatile
 8013e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e64:	f383 8811 	msr	BASEPRI, r3
 8013e68:	f3bf 8f6f 	isb	sy
 8013e6c:	f3bf 8f4f 	dsb	sy
 8013e70:	60bb      	str	r3, [r7, #8]
}
 8013e72:	bf00      	nop
 8013e74:	e7fe      	b.n	8013e74 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013e76:	f002 fc15 	bl	80166a4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	681a      	ldr	r2, [r3, #0]
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	43db      	mvns	r3, r3
 8013e88:	401a      	ands	r2, r3
 8013e8a:	697b      	ldr	r3, [r7, #20]
 8013e8c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013e8e:	f002 fc39 	bl	8016704 <vPortExitCritical>

	return uxReturn;
 8013e92:	693b      	ldr	r3, [r7, #16]
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	3718      	adds	r7, #24
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}

08013e9c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	683a      	ldr	r2, [r7, #0]
 8013eaa:	6879      	ldr	r1, [r7, #4]
 8013eac:	4804      	ldr	r0, [pc, #16]	; (8013ec0 <xEventGroupClearBitsFromISR+0x24>)
 8013eae:	f002 faa9 	bl	8016404 <xTimerPendFunctionCallFromISR>
 8013eb2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
	}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3710      	adds	r7, #16
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	0801403d 	.word	0x0801403d

08013ec4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b089      	sub	sp, #36	; 0x24
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013ed0:	f3ef 8211 	mrs	r2, BASEPRI
 8013ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed8:	f383 8811 	msr	BASEPRI, r3
 8013edc:	f3bf 8f6f 	isb	sy
 8013ee0:	f3bf 8f4f 	dsb	sy
 8013ee4:	60fa      	str	r2, [r7, #12]
 8013ee6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013eea:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013eec:	69fb      	ldr	r3, [r7, #28]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	617b      	str	r3, [r7, #20]
 8013ef2:	69bb      	ldr	r3, [r7, #24]
 8013ef4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013ef6:	693b      	ldr	r3, [r7, #16]
 8013ef8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013efc:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013efe:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013f00:	4618      	mov	r0, r3
 8013f02:	3724      	adds	r7, #36	; 0x24
 8013f04:	46bd      	mov	sp, r7
 8013f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0a:	4770      	bx	lr

08013f0c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b08e      	sub	sp, #56	; 0x38
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013f16:	2300      	movs	r3, #0
 8013f18:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d10a      	bne.n	8013f3e <xEventGroupSetBits+0x32>
	__asm volatile
 8013f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f2c:	f383 8811 	msr	BASEPRI, r3
 8013f30:	f3bf 8f6f 	isb	sy
 8013f34:	f3bf 8f4f 	dsb	sy
 8013f38:	613b      	str	r3, [r7, #16]
}
 8013f3a:	bf00      	nop
 8013f3c:	e7fe      	b.n	8013f3c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d00a      	beq.n	8013f5e <xEventGroupSetBits+0x52>
	__asm volatile
 8013f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f4c:	f383 8811 	msr	BASEPRI, r3
 8013f50:	f3bf 8f6f 	isb	sy
 8013f54:	f3bf 8f4f 	dsb	sy
 8013f58:	60fb      	str	r3, [r7, #12]
}
 8013f5a:	bf00      	nop
 8013f5c:	e7fe      	b.n	8013f5c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f60:	3304      	adds	r3, #4
 8013f62:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f66:	3308      	adds	r3, #8
 8013f68:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013f6a:	f001 f97d 	bl	8015268 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f70:	68db      	ldr	r3, [r3, #12]
 8013f72:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	431a      	orrs	r2, r3
 8013f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013f80:	e03c      	b.n	8013ffc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f84:	685b      	ldr	r3, [r3, #4]
 8013f86:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013f92:	69bb      	ldr	r3, [r7, #24]
 8013f94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013f98:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013fa0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d108      	bne.n	8013fbe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fae:	681a      	ldr	r2, [r3, #0]
 8013fb0:	69bb      	ldr	r3, [r7, #24]
 8013fb2:	4013      	ands	r3, r2
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d00b      	beq.n	8013fd0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013fb8:	2301      	movs	r3, #1
 8013fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013fbc:	e008      	b.n	8013fd0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	69bb      	ldr	r3, [r7, #24]
 8013fc4:	4013      	ands	r3, r2
 8013fc6:	69ba      	ldr	r2, [r7, #24]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d101      	bne.n	8013fd0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d010      	beq.n	8013ff8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d003      	beq.n	8013fe8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fe2:	69bb      	ldr	r3, [r7, #24]
 8013fe4:	4313      	orrs	r3, r2
 8013fe6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013ff4:	f001 fc04 	bl	8015800 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013ff8:	69fb      	ldr	r3, [r7, #28]
 8013ffa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ffe:	6a3b      	ldr	r3, [r7, #32]
 8014000:	429a      	cmp	r2, r3
 8014002:	d1be      	bne.n	8013f82 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8014004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400a:	43db      	mvns	r3, r3
 801400c:	401a      	ands	r2, r3
 801400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014010:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8014012:	f001 f937 	bl	8015284 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8014016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014018:	681b      	ldr	r3, [r3, #0]
}
 801401a:	4618      	mov	r0, r3
 801401c:	3738      	adds	r7, #56	; 0x38
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}

08014022 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8014022:	b580      	push	{r7, lr}
 8014024:	b082      	sub	sp, #8
 8014026:	af00      	add	r7, sp, #0
 8014028:	6078      	str	r0, [r7, #4]
 801402a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801402c:	6839      	ldr	r1, [r7, #0]
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f7ff ff6c 	bl	8013f0c <xEventGroupSetBits>
}
 8014034:	bf00      	nop
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}

0801403c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8014046:	6839      	ldr	r1, [r7, #0]
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f7ff feef 	bl	8013e2c <xEventGroupClearBits>
}
 801404e:	bf00      	nop
 8014050:	3708      	adds	r7, #8
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}

08014056 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8014056:	b480      	push	{r7}
 8014058:	b087      	sub	sp, #28
 801405a:	af00      	add	r7, sp, #0
 801405c:	60f8      	str	r0, [r7, #12]
 801405e:	60b9      	str	r1, [r7, #8]
 8014060:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8014062:	2300      	movs	r3, #0
 8014064:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d107      	bne.n	801407c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801406c:	68fa      	ldr	r2, [r7, #12]
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	4013      	ands	r3, r2
 8014072:	2b00      	cmp	r3, #0
 8014074:	d00a      	beq.n	801408c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8014076:	2301      	movs	r3, #1
 8014078:	617b      	str	r3, [r7, #20]
 801407a:	e007      	b.n	801408c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801407c:	68fa      	ldr	r2, [r7, #12]
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	4013      	ands	r3, r2
 8014082:	68ba      	ldr	r2, [r7, #8]
 8014084:	429a      	cmp	r2, r3
 8014086:	d101      	bne.n	801408c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8014088:	2301      	movs	r3, #1
 801408a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801408c:	697b      	ldr	r3, [r7, #20]
}
 801408e:	4618      	mov	r0, r3
 8014090:	371c      	adds	r7, #28
 8014092:	46bd      	mov	sp, r7
 8014094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014098:	4770      	bx	lr
	...

0801409c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801409c:	b580      	push	{r7, lr}
 801409e:	b086      	sub	sp, #24
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	60b9      	str	r1, [r7, #8]
 80140a6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	68ba      	ldr	r2, [r7, #8]
 80140ac:	68f9      	ldr	r1, [r7, #12]
 80140ae:	4804      	ldr	r0, [pc, #16]	; (80140c0 <xEventGroupSetBitsFromISR+0x24>)
 80140b0:	f002 f9a8 	bl	8016404 <xTimerPendFunctionCallFromISR>
 80140b4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80140b6:	697b      	ldr	r3, [r7, #20]
	}
 80140b8:	4618      	mov	r0, r3
 80140ba:	3718      	adds	r7, #24
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}
 80140c0:	08014023 	.word	0x08014023

080140c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80140c4:	b480      	push	{r7}
 80140c6:	b083      	sub	sp, #12
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f103 0208 	add.w	r2, r3, #8
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80140dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f103 0208 	add.w	r2, r3, #8
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f103 0208 	add.w	r2, r3, #8
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2200      	movs	r2, #0
 80140f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80140f8:	bf00      	nop
 80140fa:	370c      	adds	r7, #12
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr

08014104 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014104:	b480      	push	{r7}
 8014106:	b083      	sub	sp, #12
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2200      	movs	r2, #0
 8014110:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014112:	bf00      	nop
 8014114:	370c      	adds	r7, #12
 8014116:	46bd      	mov	sp, r7
 8014118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411c:	4770      	bx	lr

0801411e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801411e:	b480      	push	{r7}
 8014120:	b085      	sub	sp, #20
 8014122:	af00      	add	r7, sp, #0
 8014124:	6078      	str	r0, [r7, #4]
 8014126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	68fa      	ldr	r2, [r7, #12]
 8014132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	689a      	ldr	r2, [r3, #8]
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	689b      	ldr	r3, [r3, #8]
 8014140:	683a      	ldr	r2, [r7, #0]
 8014142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	683a      	ldr	r2, [r7, #0]
 8014148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	687a      	ldr	r2, [r7, #4]
 801414e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	1c5a      	adds	r2, r3, #1
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	601a      	str	r2, [r3, #0]
}
 801415a:	bf00      	nop
 801415c:	3714      	adds	r7, #20
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr

08014166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014166:	b480      	push	{r7}
 8014168:	b085      	sub	sp, #20
 801416a:	af00      	add	r7, sp, #0
 801416c:	6078      	str	r0, [r7, #4]
 801416e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801417c:	d103      	bne.n	8014186 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	691b      	ldr	r3, [r3, #16]
 8014182:	60fb      	str	r3, [r7, #12]
 8014184:	e00c      	b.n	80141a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	3308      	adds	r3, #8
 801418a:	60fb      	str	r3, [r7, #12]
 801418c:	e002      	b.n	8014194 <vListInsert+0x2e>
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	60fb      	str	r3, [r7, #12]
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	685b      	ldr	r3, [r3, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	429a      	cmp	r2, r3
 801419e:	d2f6      	bcs.n	801418e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	685a      	ldr	r2, [r3, #4]
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	683a      	ldr	r2, [r7, #0]
 80141ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	68fa      	ldr	r2, [r7, #12]
 80141b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	683a      	ldr	r2, [r7, #0]
 80141ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	1c5a      	adds	r2, r3, #1
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	601a      	str	r2, [r3, #0]
}
 80141cc:	bf00      	nop
 80141ce:	3714      	adds	r7, #20
 80141d0:	46bd      	mov	sp, r7
 80141d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d6:	4770      	bx	lr

080141d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80141d8:	b480      	push	{r7}
 80141da:	b085      	sub	sp, #20
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	691b      	ldr	r3, [r3, #16]
 80141e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	6892      	ldr	r2, [r2, #8]
 80141ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	689b      	ldr	r3, [r3, #8]
 80141f4:	687a      	ldr	r2, [r7, #4]
 80141f6:	6852      	ldr	r2, [r2, #4]
 80141f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	687a      	ldr	r2, [r7, #4]
 8014200:	429a      	cmp	r2, r3
 8014202:	d103      	bne.n	801420c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	689a      	ldr	r2, [r3, #8]
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2200      	movs	r2, #0
 8014210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	1e5a      	subs	r2, r3, #1
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	681b      	ldr	r3, [r3, #0]
}
 8014220:	4618      	mov	r0, r3
 8014222:	3714      	adds	r7, #20
 8014224:	46bd      	mov	sp, r7
 8014226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422a:	4770      	bx	lr

0801422c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d10a      	bne.n	8014256 <xQueueGenericReset+0x2a>
	__asm volatile
 8014240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014244:	f383 8811 	msr	BASEPRI, r3
 8014248:	f3bf 8f6f 	isb	sy
 801424c:	f3bf 8f4f 	dsb	sy
 8014250:	60bb      	str	r3, [r7, #8]
}
 8014252:	bf00      	nop
 8014254:	e7fe      	b.n	8014254 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014256:	f002 fa25 	bl	80166a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	681a      	ldr	r2, [r3, #0]
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014262:	68f9      	ldr	r1, [r7, #12]
 8014264:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014266:	fb01 f303 	mul.w	r3, r1, r3
 801426a:	441a      	add	r2, r3
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2200      	movs	r2, #0
 8014274:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014286:	3b01      	subs	r3, #1
 8014288:	68f9      	ldr	r1, [r7, #12]
 801428a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801428c:	fb01 f303 	mul.w	r3, r1, r3
 8014290:	441a      	add	r2, r3
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	22ff      	movs	r2, #255	; 0xff
 801429a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	22ff      	movs	r2, #255	; 0xff
 80142a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d114      	bne.n	80142d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	691b      	ldr	r3, [r3, #16]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d01a      	beq.n	80142ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	3310      	adds	r3, #16
 80142b8:	4618      	mov	r0, r3
 80142ba:	f001 fa3d 	bl	8015738 <xTaskRemoveFromEventList>
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d012      	beq.n	80142ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80142c4:	4b0c      	ldr	r3, [pc, #48]	; (80142f8 <xQueueGenericReset+0xcc>)
 80142c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142ca:	601a      	str	r2, [r3, #0]
 80142cc:	f3bf 8f4f 	dsb	sy
 80142d0:	f3bf 8f6f 	isb	sy
 80142d4:	e009      	b.n	80142ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	3310      	adds	r3, #16
 80142da:	4618      	mov	r0, r3
 80142dc:	f7ff fef2 	bl	80140c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	3324      	adds	r3, #36	; 0x24
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7ff feed 	bl	80140c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80142ea:	f002 fa0b 	bl	8016704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80142ee:	2301      	movs	r3, #1
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	3710      	adds	r7, #16
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}
 80142f8:	e000ed04 	.word	0xe000ed04

080142fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b08e      	sub	sp, #56	; 0x38
 8014300:	af02      	add	r7, sp, #8
 8014302:	60f8      	str	r0, [r7, #12]
 8014304:	60b9      	str	r1, [r7, #8]
 8014306:	607a      	str	r2, [r7, #4]
 8014308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d10a      	bne.n	8014326 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014314:	f383 8811 	msr	BASEPRI, r3
 8014318:	f3bf 8f6f 	isb	sy
 801431c:	f3bf 8f4f 	dsb	sy
 8014320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014322:	bf00      	nop
 8014324:	e7fe      	b.n	8014324 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d10a      	bne.n	8014342 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014330:	f383 8811 	msr	BASEPRI, r3
 8014334:	f3bf 8f6f 	isb	sy
 8014338:	f3bf 8f4f 	dsb	sy
 801433c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801433e:	bf00      	nop
 8014340:	e7fe      	b.n	8014340 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d002      	beq.n	801434e <xQueueGenericCreateStatic+0x52>
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d001      	beq.n	8014352 <xQueueGenericCreateStatic+0x56>
 801434e:	2301      	movs	r3, #1
 8014350:	e000      	b.n	8014354 <xQueueGenericCreateStatic+0x58>
 8014352:	2300      	movs	r3, #0
 8014354:	2b00      	cmp	r3, #0
 8014356:	d10a      	bne.n	801436e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801435c:	f383 8811 	msr	BASEPRI, r3
 8014360:	f3bf 8f6f 	isb	sy
 8014364:	f3bf 8f4f 	dsb	sy
 8014368:	623b      	str	r3, [r7, #32]
}
 801436a:	bf00      	nop
 801436c:	e7fe      	b.n	801436c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d102      	bne.n	801437a <xQueueGenericCreateStatic+0x7e>
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d101      	bne.n	801437e <xQueueGenericCreateStatic+0x82>
 801437a:	2301      	movs	r3, #1
 801437c:	e000      	b.n	8014380 <xQueueGenericCreateStatic+0x84>
 801437e:	2300      	movs	r3, #0
 8014380:	2b00      	cmp	r3, #0
 8014382:	d10a      	bne.n	801439a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014388:	f383 8811 	msr	BASEPRI, r3
 801438c:	f3bf 8f6f 	isb	sy
 8014390:	f3bf 8f4f 	dsb	sy
 8014394:	61fb      	str	r3, [r7, #28]
}
 8014396:	bf00      	nop
 8014398:	e7fe      	b.n	8014398 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801439a:	2350      	movs	r3, #80	; 0x50
 801439c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	2b50      	cmp	r3, #80	; 0x50
 80143a2:	d00a      	beq.n	80143ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80143a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143a8:	f383 8811 	msr	BASEPRI, r3
 80143ac:	f3bf 8f6f 	isb	sy
 80143b0:	f3bf 8f4f 	dsb	sy
 80143b4:	61bb      	str	r3, [r7, #24]
}
 80143b6:	bf00      	nop
 80143b8:	e7fe      	b.n	80143b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80143ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80143c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d00d      	beq.n	80143e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80143c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c8:	2201      	movs	r2, #1
 80143ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80143ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80143d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d4:	9300      	str	r3, [sp, #0]
 80143d6:	4613      	mov	r3, r2
 80143d8:	687a      	ldr	r2, [r7, #4]
 80143da:	68b9      	ldr	r1, [r7, #8]
 80143dc:	68f8      	ldr	r0, [r7, #12]
 80143de:	f000 f83f 	bl	8014460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80143e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3730      	adds	r7, #48	; 0x30
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b08a      	sub	sp, #40	; 0x28
 80143f0:	af02      	add	r7, sp, #8
 80143f2:	60f8      	str	r0, [r7, #12]
 80143f4:	60b9      	str	r1, [r7, #8]
 80143f6:	4613      	mov	r3, r2
 80143f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d10a      	bne.n	8014416 <xQueueGenericCreate+0x2a>
	__asm volatile
 8014400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014404:	f383 8811 	msr	BASEPRI, r3
 8014408:	f3bf 8f6f 	isb	sy
 801440c:	f3bf 8f4f 	dsb	sy
 8014410:	613b      	str	r3, [r7, #16]
}
 8014412:	bf00      	nop
 8014414:	e7fe      	b.n	8014414 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	68ba      	ldr	r2, [r7, #8]
 801441a:	fb02 f303 	mul.w	r3, r2, r3
 801441e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	3350      	adds	r3, #80	; 0x50
 8014424:	4618      	mov	r0, r3
 8014426:	f002 fa5f 	bl	80168e8 <pvPortMalloc>
 801442a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801442c:	69bb      	ldr	r3, [r7, #24]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d011      	beq.n	8014456 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014432:	69bb      	ldr	r3, [r7, #24]
 8014434:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	3350      	adds	r3, #80	; 0x50
 801443a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801443c:	69bb      	ldr	r3, [r7, #24]
 801443e:	2200      	movs	r2, #0
 8014440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014444:	79fa      	ldrb	r2, [r7, #7]
 8014446:	69bb      	ldr	r3, [r7, #24]
 8014448:	9300      	str	r3, [sp, #0]
 801444a:	4613      	mov	r3, r2
 801444c:	697a      	ldr	r2, [r7, #20]
 801444e:	68b9      	ldr	r1, [r7, #8]
 8014450:	68f8      	ldr	r0, [r7, #12]
 8014452:	f000 f805 	bl	8014460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014456:	69bb      	ldr	r3, [r7, #24]
	}
 8014458:	4618      	mov	r0, r3
 801445a:	3720      	adds	r7, #32
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b084      	sub	sp, #16
 8014464:	af00      	add	r7, sp, #0
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	60b9      	str	r1, [r7, #8]
 801446a:	607a      	str	r2, [r7, #4]
 801446c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d103      	bne.n	801447c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014474:	69bb      	ldr	r3, [r7, #24]
 8014476:	69ba      	ldr	r2, [r7, #24]
 8014478:	601a      	str	r2, [r3, #0]
 801447a:	e002      	b.n	8014482 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	687a      	ldr	r2, [r7, #4]
 8014480:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014482:	69bb      	ldr	r3, [r7, #24]
 8014484:	68fa      	ldr	r2, [r7, #12]
 8014486:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014488:	69bb      	ldr	r3, [r7, #24]
 801448a:	68ba      	ldr	r2, [r7, #8]
 801448c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801448e:	2101      	movs	r1, #1
 8014490:	69b8      	ldr	r0, [r7, #24]
 8014492:	f7ff fecb 	bl	801422c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014496:	69bb      	ldr	r3, [r7, #24]
 8014498:	78fa      	ldrb	r2, [r7, #3]
 801449a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801449e:	bf00      	nop
 80144a0:	3710      	adds	r7, #16
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
	...

080144a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b08e      	sub	sp, #56	; 0x38
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	60f8      	str	r0, [r7, #12]
 80144b0:	60b9      	str	r1, [r7, #8]
 80144b2:	607a      	str	r2, [r7, #4]
 80144b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80144b6:	2300      	movs	r3, #0
 80144b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80144be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d10a      	bne.n	80144da <xQueueGenericSend+0x32>
	__asm volatile
 80144c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c8:	f383 8811 	msr	BASEPRI, r3
 80144cc:	f3bf 8f6f 	isb	sy
 80144d0:	f3bf 8f4f 	dsb	sy
 80144d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80144d6:	bf00      	nop
 80144d8:	e7fe      	b.n	80144d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d103      	bne.n	80144e8 <xQueueGenericSend+0x40>
 80144e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d101      	bne.n	80144ec <xQueueGenericSend+0x44>
 80144e8:	2301      	movs	r3, #1
 80144ea:	e000      	b.n	80144ee <xQueueGenericSend+0x46>
 80144ec:	2300      	movs	r3, #0
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d10a      	bne.n	8014508 <xQueueGenericSend+0x60>
	__asm volatile
 80144f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f6:	f383 8811 	msr	BASEPRI, r3
 80144fa:	f3bf 8f6f 	isb	sy
 80144fe:	f3bf 8f4f 	dsb	sy
 8014502:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014504:	bf00      	nop
 8014506:	e7fe      	b.n	8014506 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	2b02      	cmp	r3, #2
 801450c:	d103      	bne.n	8014516 <xQueueGenericSend+0x6e>
 801450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014512:	2b01      	cmp	r3, #1
 8014514:	d101      	bne.n	801451a <xQueueGenericSend+0x72>
 8014516:	2301      	movs	r3, #1
 8014518:	e000      	b.n	801451c <xQueueGenericSend+0x74>
 801451a:	2300      	movs	r3, #0
 801451c:	2b00      	cmp	r3, #0
 801451e:	d10a      	bne.n	8014536 <xQueueGenericSend+0x8e>
	__asm volatile
 8014520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014524:	f383 8811 	msr	BASEPRI, r3
 8014528:	f3bf 8f6f 	isb	sy
 801452c:	f3bf 8f4f 	dsb	sy
 8014530:	623b      	str	r3, [r7, #32]
}
 8014532:	bf00      	nop
 8014534:	e7fe      	b.n	8014534 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014536:	f001 fb1f 	bl	8015b78 <xTaskGetSchedulerState>
 801453a:	4603      	mov	r3, r0
 801453c:	2b00      	cmp	r3, #0
 801453e:	d102      	bne.n	8014546 <xQueueGenericSend+0x9e>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d101      	bne.n	801454a <xQueueGenericSend+0xa2>
 8014546:	2301      	movs	r3, #1
 8014548:	e000      	b.n	801454c <xQueueGenericSend+0xa4>
 801454a:	2300      	movs	r3, #0
 801454c:	2b00      	cmp	r3, #0
 801454e:	d10a      	bne.n	8014566 <xQueueGenericSend+0xbe>
	__asm volatile
 8014550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014554:	f383 8811 	msr	BASEPRI, r3
 8014558:	f3bf 8f6f 	isb	sy
 801455c:	f3bf 8f4f 	dsb	sy
 8014560:	61fb      	str	r3, [r7, #28]
}
 8014562:	bf00      	nop
 8014564:	e7fe      	b.n	8014564 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014566:	f002 f89d 	bl	80166a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014572:	429a      	cmp	r2, r3
 8014574:	d302      	bcc.n	801457c <xQueueGenericSend+0xd4>
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	2b02      	cmp	r3, #2
 801457a:	d129      	bne.n	80145d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801457c:	683a      	ldr	r2, [r7, #0]
 801457e:	68b9      	ldr	r1, [r7, #8]
 8014580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014582:	f000 fac7 	bl	8014b14 <prvCopyDataToQueue>
 8014586:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801458c:	2b00      	cmp	r3, #0
 801458e:	d010      	beq.n	80145b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014592:	3324      	adds	r3, #36	; 0x24
 8014594:	4618      	mov	r0, r3
 8014596:	f001 f8cf 	bl	8015738 <xTaskRemoveFromEventList>
 801459a:	4603      	mov	r3, r0
 801459c:	2b00      	cmp	r3, #0
 801459e:	d013      	beq.n	80145c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80145a0:	4b3f      	ldr	r3, [pc, #252]	; (80146a0 <xQueueGenericSend+0x1f8>)
 80145a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145a6:	601a      	str	r2, [r3, #0]
 80145a8:	f3bf 8f4f 	dsb	sy
 80145ac:	f3bf 8f6f 	isb	sy
 80145b0:	e00a      	b.n	80145c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80145b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d007      	beq.n	80145c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80145b8:	4b39      	ldr	r3, [pc, #228]	; (80146a0 <xQueueGenericSend+0x1f8>)
 80145ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145be:	601a      	str	r2, [r3, #0]
 80145c0:	f3bf 8f4f 	dsb	sy
 80145c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80145c8:	f002 f89c 	bl	8016704 <vPortExitCritical>
				return pdPASS;
 80145cc:	2301      	movs	r3, #1
 80145ce:	e063      	b.n	8014698 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d103      	bne.n	80145de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80145d6:	f002 f895 	bl	8016704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80145da:	2300      	movs	r3, #0
 80145dc:	e05c      	b.n	8014698 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80145de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d106      	bne.n	80145f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80145e4:	f107 0314 	add.w	r3, r7, #20
 80145e8:	4618      	mov	r0, r3
 80145ea:	f001 f96b 	bl	80158c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80145ee:	2301      	movs	r3, #1
 80145f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80145f2:	f002 f887 	bl	8016704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80145f6:	f000 fe37 	bl	8015268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80145fa:	f002 f853 	bl	80166a4 <vPortEnterCritical>
 80145fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014604:	b25b      	sxtb	r3, r3
 8014606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801460a:	d103      	bne.n	8014614 <xQueueGenericSend+0x16c>
 801460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801460e:	2200      	movs	r2, #0
 8014610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801461a:	b25b      	sxtb	r3, r3
 801461c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014620:	d103      	bne.n	801462a <xQueueGenericSend+0x182>
 8014622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014624:	2200      	movs	r2, #0
 8014626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801462a:	f002 f86b 	bl	8016704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801462e:	1d3a      	adds	r2, r7, #4
 8014630:	f107 0314 	add.w	r3, r7, #20
 8014634:	4611      	mov	r1, r2
 8014636:	4618      	mov	r0, r3
 8014638:	f001 f95a 	bl	80158f0 <xTaskCheckForTimeOut>
 801463c:	4603      	mov	r3, r0
 801463e:	2b00      	cmp	r3, #0
 8014640:	d124      	bne.n	801468c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014644:	f000 fb5e 	bl	8014d04 <prvIsQueueFull>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	d018      	beq.n	8014680 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014650:	3310      	adds	r3, #16
 8014652:	687a      	ldr	r2, [r7, #4]
 8014654:	4611      	mov	r1, r2
 8014656:	4618      	mov	r0, r3
 8014658:	f000 ffe2 	bl	8015620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801465c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801465e:	f000 fae9 	bl	8014c34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014662:	f000 fe0f 	bl	8015284 <xTaskResumeAll>
 8014666:	4603      	mov	r3, r0
 8014668:	2b00      	cmp	r3, #0
 801466a:	f47f af7c 	bne.w	8014566 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801466e:	4b0c      	ldr	r3, [pc, #48]	; (80146a0 <xQueueGenericSend+0x1f8>)
 8014670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014674:	601a      	str	r2, [r3, #0]
 8014676:	f3bf 8f4f 	dsb	sy
 801467a:	f3bf 8f6f 	isb	sy
 801467e:	e772      	b.n	8014566 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014682:	f000 fad7 	bl	8014c34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014686:	f000 fdfd 	bl	8015284 <xTaskResumeAll>
 801468a:	e76c      	b.n	8014566 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801468c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801468e:	f000 fad1 	bl	8014c34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014692:	f000 fdf7 	bl	8015284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014696:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014698:	4618      	mov	r0, r3
 801469a:	3738      	adds	r7, #56	; 0x38
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}
 80146a0:	e000ed04 	.word	0xe000ed04

080146a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b090      	sub	sp, #64	; 0x40
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	60f8      	str	r0, [r7, #12]
 80146ac:	60b9      	str	r1, [r7, #8]
 80146ae:	607a      	str	r2, [r7, #4]
 80146b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80146b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d10a      	bne.n	80146d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80146bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c0:	f383 8811 	msr	BASEPRI, r3
 80146c4:	f3bf 8f6f 	isb	sy
 80146c8:	f3bf 8f4f 	dsb	sy
 80146cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80146ce:	bf00      	nop
 80146d0:	e7fe      	b.n	80146d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d103      	bne.n	80146e0 <xQueueGenericSendFromISR+0x3c>
 80146d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d101      	bne.n	80146e4 <xQueueGenericSendFromISR+0x40>
 80146e0:	2301      	movs	r3, #1
 80146e2:	e000      	b.n	80146e6 <xQueueGenericSendFromISR+0x42>
 80146e4:	2300      	movs	r3, #0
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d10a      	bne.n	8014700 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80146ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ee:	f383 8811 	msr	BASEPRI, r3
 80146f2:	f3bf 8f6f 	isb	sy
 80146f6:	f3bf 8f4f 	dsb	sy
 80146fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80146fc:	bf00      	nop
 80146fe:	e7fe      	b.n	80146fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	2b02      	cmp	r3, #2
 8014704:	d103      	bne.n	801470e <xQueueGenericSendFromISR+0x6a>
 8014706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801470a:	2b01      	cmp	r3, #1
 801470c:	d101      	bne.n	8014712 <xQueueGenericSendFromISR+0x6e>
 801470e:	2301      	movs	r3, #1
 8014710:	e000      	b.n	8014714 <xQueueGenericSendFromISR+0x70>
 8014712:	2300      	movs	r3, #0
 8014714:	2b00      	cmp	r3, #0
 8014716:	d10a      	bne.n	801472e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801471c:	f383 8811 	msr	BASEPRI, r3
 8014720:	f3bf 8f6f 	isb	sy
 8014724:	f3bf 8f4f 	dsb	sy
 8014728:	623b      	str	r3, [r7, #32]
}
 801472a:	bf00      	nop
 801472c:	e7fe      	b.n	801472c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801472e:	f002 f89b 	bl	8016868 <vPortValidateInterruptPriority>
	__asm volatile
 8014732:	f3ef 8211 	mrs	r2, BASEPRI
 8014736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801473a:	f383 8811 	msr	BASEPRI, r3
 801473e:	f3bf 8f6f 	isb	sy
 8014742:	f3bf 8f4f 	dsb	sy
 8014746:	61fa      	str	r2, [r7, #28]
 8014748:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801474a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801474c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014756:	429a      	cmp	r2, r3
 8014758:	d302      	bcc.n	8014760 <xQueueGenericSendFromISR+0xbc>
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	2b02      	cmp	r3, #2
 801475e:	d12f      	bne.n	80147c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801476e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014770:	683a      	ldr	r2, [r7, #0]
 8014772:	68b9      	ldr	r1, [r7, #8]
 8014774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014776:	f000 f9cd 	bl	8014b14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801477a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801477e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014782:	d112      	bne.n	80147aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014788:	2b00      	cmp	r3, #0
 801478a:	d016      	beq.n	80147ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801478e:	3324      	adds	r3, #36	; 0x24
 8014790:	4618      	mov	r0, r3
 8014792:	f000 ffd1 	bl	8015738 <xTaskRemoveFromEventList>
 8014796:	4603      	mov	r3, r0
 8014798:	2b00      	cmp	r3, #0
 801479a:	d00e      	beq.n	80147ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d00b      	beq.n	80147ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	2201      	movs	r2, #1
 80147a6:	601a      	str	r2, [r3, #0]
 80147a8:	e007      	b.n	80147ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80147aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80147ae:	3301      	adds	r3, #1
 80147b0:	b2db      	uxtb	r3, r3
 80147b2:	b25a      	sxtb	r2, r3
 80147b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80147ba:	2301      	movs	r3, #1
 80147bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80147be:	e001      	b.n	80147c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80147c0:	2300      	movs	r3, #0
 80147c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80147c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147c6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	f383 8811 	msr	BASEPRI, r3
}
 80147ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80147d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3740      	adds	r7, #64	; 0x40
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
	...

080147dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b08c      	sub	sp, #48	; 0x30
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80147e8:	2300      	movs	r3, #0
 80147ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80147f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d10a      	bne.n	801480c <xQueueReceive+0x30>
	__asm volatile
 80147f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fa:	f383 8811 	msr	BASEPRI, r3
 80147fe:	f3bf 8f6f 	isb	sy
 8014802:	f3bf 8f4f 	dsb	sy
 8014806:	623b      	str	r3, [r7, #32]
}
 8014808:	bf00      	nop
 801480a:	e7fe      	b.n	801480a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d103      	bne.n	801481a <xQueueReceive+0x3e>
 8014812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014816:	2b00      	cmp	r3, #0
 8014818:	d101      	bne.n	801481e <xQueueReceive+0x42>
 801481a:	2301      	movs	r3, #1
 801481c:	e000      	b.n	8014820 <xQueueReceive+0x44>
 801481e:	2300      	movs	r3, #0
 8014820:	2b00      	cmp	r3, #0
 8014822:	d10a      	bne.n	801483a <xQueueReceive+0x5e>
	__asm volatile
 8014824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014828:	f383 8811 	msr	BASEPRI, r3
 801482c:	f3bf 8f6f 	isb	sy
 8014830:	f3bf 8f4f 	dsb	sy
 8014834:	61fb      	str	r3, [r7, #28]
}
 8014836:	bf00      	nop
 8014838:	e7fe      	b.n	8014838 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801483a:	f001 f99d 	bl	8015b78 <xTaskGetSchedulerState>
 801483e:	4603      	mov	r3, r0
 8014840:	2b00      	cmp	r3, #0
 8014842:	d102      	bne.n	801484a <xQueueReceive+0x6e>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d101      	bne.n	801484e <xQueueReceive+0x72>
 801484a:	2301      	movs	r3, #1
 801484c:	e000      	b.n	8014850 <xQueueReceive+0x74>
 801484e:	2300      	movs	r3, #0
 8014850:	2b00      	cmp	r3, #0
 8014852:	d10a      	bne.n	801486a <xQueueReceive+0x8e>
	__asm volatile
 8014854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014858:	f383 8811 	msr	BASEPRI, r3
 801485c:	f3bf 8f6f 	isb	sy
 8014860:	f3bf 8f4f 	dsb	sy
 8014864:	61bb      	str	r3, [r7, #24]
}
 8014866:	bf00      	nop
 8014868:	e7fe      	b.n	8014868 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801486a:	f001 ff1b 	bl	80166a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014872:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014876:	2b00      	cmp	r3, #0
 8014878:	d01f      	beq.n	80148ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801487a:	68b9      	ldr	r1, [r7, #8]
 801487c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801487e:	f000 f9b3 	bl	8014be8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014884:	1e5a      	subs	r2, r3, #1
 8014886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014888:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801488c:	691b      	ldr	r3, [r3, #16]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d00f      	beq.n	80148b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014894:	3310      	adds	r3, #16
 8014896:	4618      	mov	r0, r3
 8014898:	f000 ff4e 	bl	8015738 <xTaskRemoveFromEventList>
 801489c:	4603      	mov	r3, r0
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d007      	beq.n	80148b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80148a2:	4b3d      	ldr	r3, [pc, #244]	; (8014998 <xQueueReceive+0x1bc>)
 80148a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148a8:	601a      	str	r2, [r3, #0]
 80148aa:	f3bf 8f4f 	dsb	sy
 80148ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80148b2:	f001 ff27 	bl	8016704 <vPortExitCritical>
				return pdPASS;
 80148b6:	2301      	movs	r3, #1
 80148b8:	e069      	b.n	801498e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d103      	bne.n	80148c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80148c0:	f001 ff20 	bl	8016704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80148c4:	2300      	movs	r3, #0
 80148c6:	e062      	b.n	801498e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80148c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d106      	bne.n	80148dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80148ce:	f107 0310 	add.w	r3, r7, #16
 80148d2:	4618      	mov	r0, r3
 80148d4:	f000 fff6 	bl	80158c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80148d8:	2301      	movs	r3, #1
 80148da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80148dc:	f001 ff12 	bl	8016704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80148e0:	f000 fcc2 	bl	8015268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80148e4:	f001 fede 	bl	80166a4 <vPortEnterCritical>
 80148e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148ee:	b25b      	sxtb	r3, r3
 80148f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148f4:	d103      	bne.n	80148fe <xQueueReceive+0x122>
 80148f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f8:	2200      	movs	r2, #0
 80148fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80148fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014904:	b25b      	sxtb	r3, r3
 8014906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801490a:	d103      	bne.n	8014914 <xQueueReceive+0x138>
 801490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801490e:	2200      	movs	r2, #0
 8014910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014914:	f001 fef6 	bl	8016704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014918:	1d3a      	adds	r2, r7, #4
 801491a:	f107 0310 	add.w	r3, r7, #16
 801491e:	4611      	mov	r1, r2
 8014920:	4618      	mov	r0, r3
 8014922:	f000 ffe5 	bl	80158f0 <xTaskCheckForTimeOut>
 8014926:	4603      	mov	r3, r0
 8014928:	2b00      	cmp	r3, #0
 801492a:	d123      	bne.n	8014974 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801492c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801492e:	f000 f9d3 	bl	8014cd8 <prvIsQueueEmpty>
 8014932:	4603      	mov	r3, r0
 8014934:	2b00      	cmp	r3, #0
 8014936:	d017      	beq.n	8014968 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493a:	3324      	adds	r3, #36	; 0x24
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	4611      	mov	r1, r2
 8014940:	4618      	mov	r0, r3
 8014942:	f000 fe6d 	bl	8015620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014948:	f000 f974 	bl	8014c34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801494c:	f000 fc9a 	bl	8015284 <xTaskResumeAll>
 8014950:	4603      	mov	r3, r0
 8014952:	2b00      	cmp	r3, #0
 8014954:	d189      	bne.n	801486a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014956:	4b10      	ldr	r3, [pc, #64]	; (8014998 <xQueueReceive+0x1bc>)
 8014958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801495c:	601a      	str	r2, [r3, #0]
 801495e:	f3bf 8f4f 	dsb	sy
 8014962:	f3bf 8f6f 	isb	sy
 8014966:	e780      	b.n	801486a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801496a:	f000 f963 	bl	8014c34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801496e:	f000 fc89 	bl	8015284 <xTaskResumeAll>
 8014972:	e77a      	b.n	801486a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014976:	f000 f95d 	bl	8014c34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801497a:	f000 fc83 	bl	8015284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801497e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014980:	f000 f9aa 	bl	8014cd8 <prvIsQueueEmpty>
 8014984:	4603      	mov	r3, r0
 8014986:	2b00      	cmp	r3, #0
 8014988:	f43f af6f 	beq.w	801486a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801498c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801498e:	4618      	mov	r0, r3
 8014990:	3730      	adds	r7, #48	; 0x30
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
 8014996:	bf00      	nop
 8014998:	e000ed04 	.word	0xe000ed04

0801499c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b08e      	sub	sp, #56	; 0x38
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	60b9      	str	r1, [r7, #8]
 80149a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80149ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d10a      	bne.n	80149c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80149b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b6:	f383 8811 	msr	BASEPRI, r3
 80149ba:	f3bf 8f6f 	isb	sy
 80149be:	f3bf 8f4f 	dsb	sy
 80149c2:	623b      	str	r3, [r7, #32]
}
 80149c4:	bf00      	nop
 80149c6:	e7fe      	b.n	80149c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d103      	bne.n	80149d6 <xQueueReceiveFromISR+0x3a>
 80149ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d101      	bne.n	80149da <xQueueReceiveFromISR+0x3e>
 80149d6:	2301      	movs	r3, #1
 80149d8:	e000      	b.n	80149dc <xQueueReceiveFromISR+0x40>
 80149da:	2300      	movs	r3, #0
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d10a      	bne.n	80149f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80149e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e4:	f383 8811 	msr	BASEPRI, r3
 80149e8:	f3bf 8f6f 	isb	sy
 80149ec:	f3bf 8f4f 	dsb	sy
 80149f0:	61fb      	str	r3, [r7, #28]
}
 80149f2:	bf00      	nop
 80149f4:	e7fe      	b.n	80149f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80149f6:	f001 ff37 	bl	8016868 <vPortValidateInterruptPriority>
	__asm volatile
 80149fa:	f3ef 8211 	mrs	r2, BASEPRI
 80149fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a02:	f383 8811 	msr	BASEPRI, r3
 8014a06:	f3bf 8f6f 	isb	sy
 8014a0a:	f3bf 8f4f 	dsb	sy
 8014a0e:	61ba      	str	r2, [r7, #24]
 8014a10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014a12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d02f      	beq.n	8014a82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014a2c:	68b9      	ldr	r1, [r7, #8]
 8014a2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a30:	f000 f8da 	bl	8014be8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a36:	1e5a      	subs	r2, r3, #1
 8014a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014a3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a44:	d112      	bne.n	8014a6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a48:	691b      	ldr	r3, [r3, #16]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d016      	beq.n	8014a7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a50:	3310      	adds	r3, #16
 8014a52:	4618      	mov	r0, r3
 8014a54:	f000 fe70 	bl	8015738 <xTaskRemoveFromEventList>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d00e      	beq.n	8014a7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d00b      	beq.n	8014a7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	2201      	movs	r2, #1
 8014a68:	601a      	str	r2, [r3, #0]
 8014a6a:	e007      	b.n	8014a7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a70:	3301      	adds	r3, #1
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	b25a      	sxtb	r2, r3
 8014a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8014a80:	e001      	b.n	8014a86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014a82:	2300      	movs	r3, #0
 8014a84:	637b      	str	r3, [r7, #52]	; 0x34
 8014a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014a8a:	693b      	ldr	r3, [r7, #16]
 8014a8c:	f383 8811 	msr	BASEPRI, r3
}
 8014a90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3738      	adds	r7, #56	; 0x38
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}

08014a9c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b084      	sub	sp, #16
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d10a      	bne.n	8014ac0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8014aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aae:	f383 8811 	msr	BASEPRI, r3
 8014ab2:	f3bf 8f6f 	isb	sy
 8014ab6:	f3bf 8f4f 	dsb	sy
 8014aba:	60bb      	str	r3, [r7, #8]
}
 8014abc:	bf00      	nop
 8014abe:	e7fe      	b.n	8014abe <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8014ac0:	f001 fdf0 	bl	80166a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ac8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8014aca:	f001 fe1b 	bl	8016704 <vPortExitCritical>

	return uxReturn;
 8014ace:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3710      	adds	r7, #16
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8014ad8:	b480      	push	{r7}
 8014ada:	b087      	sub	sp, #28
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d10a      	bne.n	8014b00 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8014aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aee:	f383 8811 	msr	BASEPRI, r3
 8014af2:	f3bf 8f6f 	isb	sy
 8014af6:	f3bf 8f4f 	dsb	sy
 8014afa:	60fb      	str	r3, [r7, #12]
}
 8014afc:	bf00      	nop
 8014afe:	e7fe      	b.n	8014afe <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b04:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8014b06:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014b08:	4618      	mov	r0, r3
 8014b0a:	371c      	adds	r7, #28
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr

08014b14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b086      	sub	sp, #24
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	60b9      	str	r1, [r7, #8]
 8014b1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014b20:	2300      	movs	r3, #0
 8014b22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d10d      	bne.n	8014b4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d14d      	bne.n	8014bd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f001 f838 	bl	8015bb4 <xTaskPriorityDisinherit>
 8014b44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	2200      	movs	r2, #0
 8014b4a:	609a      	str	r2, [r3, #8]
 8014b4c:	e043      	b.n	8014bd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d119      	bne.n	8014b88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	6858      	ldr	r0, [r3, #4]
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b5c:	461a      	mov	r2, r3
 8014b5e:	68b9      	ldr	r1, [r7, #8]
 8014b60:	f002 f8e6 	bl	8016d30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	685a      	ldr	r2, [r3, #4]
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b6c:	441a      	add	r2, r3
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	685a      	ldr	r2, [r3, #4]
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	689b      	ldr	r3, [r3, #8]
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	d32b      	bcc.n	8014bd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681a      	ldr	r2, [r3, #0]
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	605a      	str	r2, [r3, #4]
 8014b86:	e026      	b.n	8014bd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	68d8      	ldr	r0, [r3, #12]
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b90:	461a      	mov	r2, r3
 8014b92:	68b9      	ldr	r1, [r7, #8]
 8014b94:	f002 f8cc 	bl	8016d30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	68da      	ldr	r2, [r3, #12]
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ba0:	425b      	negs	r3, r3
 8014ba2:	441a      	add	r2, r3
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	68da      	ldr	r2, [r3, #12]
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d207      	bcs.n	8014bc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	689a      	ldr	r2, [r3, #8]
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bbc:	425b      	negs	r3, r3
 8014bbe:	441a      	add	r2, r3
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2b02      	cmp	r3, #2
 8014bc8:	d105      	bne.n	8014bd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014bca:	693b      	ldr	r3, [r7, #16]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d002      	beq.n	8014bd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014bd0:	693b      	ldr	r3, [r7, #16]
 8014bd2:	3b01      	subs	r3, #1
 8014bd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	1c5a      	adds	r2, r3, #1
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014bde:	697b      	ldr	r3, [r7, #20]
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3718      	adds	r7, #24
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d018      	beq.n	8014c2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	68da      	ldr	r2, [r3, #12]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c02:	441a      	add	r2, r3
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	68da      	ldr	r2, [r3, #12]
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	689b      	ldr	r3, [r3, #8]
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d303      	bcc.n	8014c1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	681a      	ldr	r2, [r3, #0]
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	68d9      	ldr	r1, [r3, #12]
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c24:	461a      	mov	r2, r3
 8014c26:	6838      	ldr	r0, [r7, #0]
 8014c28:	f002 f882 	bl	8016d30 <memcpy>
	}
}
 8014c2c:	bf00      	nop
 8014c2e:	3708      	adds	r7, #8
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}

08014c34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014c3c:	f001 fd32 	bl	80166a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014c46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014c48:	e011      	b.n	8014c6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d012      	beq.n	8014c78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	3324      	adds	r3, #36	; 0x24
 8014c56:	4618      	mov	r0, r3
 8014c58:	f000 fd6e 	bl	8015738 <xTaskRemoveFromEventList>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d001      	beq.n	8014c66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014c62:	f000 fea7 	bl	80159b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014c66:	7bfb      	ldrb	r3, [r7, #15]
 8014c68:	3b01      	subs	r3, #1
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	dce9      	bgt.n	8014c4a <prvUnlockQueue+0x16>
 8014c76:	e000      	b.n	8014c7a <prvUnlockQueue+0x46>
					break;
 8014c78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	22ff      	movs	r2, #255	; 0xff
 8014c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014c82:	f001 fd3f 	bl	8016704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014c86:	f001 fd0d 	bl	80166a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014c92:	e011      	b.n	8014cb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	691b      	ldr	r3, [r3, #16]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d012      	beq.n	8014cc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	3310      	adds	r3, #16
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f000 fd49 	bl	8015738 <xTaskRemoveFromEventList>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d001      	beq.n	8014cb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014cac:	f000 fe82 	bl	80159b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014cb0:	7bbb      	ldrb	r3, [r7, #14]
 8014cb2:	3b01      	subs	r3, #1
 8014cb4:	b2db      	uxtb	r3, r3
 8014cb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014cb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	dce9      	bgt.n	8014c94 <prvUnlockQueue+0x60>
 8014cc0:	e000      	b.n	8014cc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014cc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	22ff      	movs	r2, #255	; 0xff
 8014cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014ccc:	f001 fd1a 	bl	8016704 <vPortExitCritical>
}
 8014cd0:	bf00      	nop
 8014cd2:	3710      	adds	r7, #16
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014ce0:	f001 fce0 	bl	80166a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d102      	bne.n	8014cf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014cec:	2301      	movs	r3, #1
 8014cee:	60fb      	str	r3, [r7, #12]
 8014cf0:	e001      	b.n	8014cf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014cf6:	f001 fd05 	bl	8016704 <vPortExitCritical>

	return xReturn;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3710      	adds	r7, #16
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}

08014d04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b084      	sub	sp, #16
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014d0c:	f001 fcca 	bl	80166a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d102      	bne.n	8014d22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	60fb      	str	r3, [r7, #12]
 8014d20:	e001      	b.n	8014d26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014d22:	2300      	movs	r3, #0
 8014d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014d26:	f001 fced 	bl	8016704 <vPortExitCritical>

	return xReturn;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3710      	adds	r7, #16
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014d34:	b480      	push	{r7}
 8014d36:	b085      	sub	sp, #20
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014d3e:	2300      	movs	r3, #0
 8014d40:	60fb      	str	r3, [r7, #12]
 8014d42:	e014      	b.n	8014d6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014d44:	4a0f      	ldr	r2, [pc, #60]	; (8014d84 <vQueueAddToRegistry+0x50>)
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d10b      	bne.n	8014d68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014d50:	490c      	ldr	r1, [pc, #48]	; (8014d84 <vQueueAddToRegistry+0x50>)
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	683a      	ldr	r2, [r7, #0]
 8014d56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014d5a:	4a0a      	ldr	r2, [pc, #40]	; (8014d84 <vQueueAddToRegistry+0x50>)
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	00db      	lsls	r3, r3, #3
 8014d60:	4413      	add	r3, r2
 8014d62:	687a      	ldr	r2, [r7, #4]
 8014d64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014d66:	e006      	b.n	8014d76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	3301      	adds	r3, #1
 8014d6c:	60fb      	str	r3, [r7, #12]
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	2b07      	cmp	r3, #7
 8014d72:	d9e7      	bls.n	8014d44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014d74:	bf00      	nop
 8014d76:	bf00      	nop
 8014d78:	3714      	adds	r7, #20
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d80:	4770      	bx	lr
 8014d82:	bf00      	nop
 8014d84:	2400134c 	.word	0x2400134c

08014d88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b086      	sub	sp, #24
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	60f8      	str	r0, [r7, #12]
 8014d90:	60b9      	str	r1, [r7, #8]
 8014d92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014d98:	f001 fc84 	bl	80166a4 <vPortEnterCritical>
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014da2:	b25b      	sxtb	r3, r3
 8014da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014da8:	d103      	bne.n	8014db2 <vQueueWaitForMessageRestricted+0x2a>
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	2200      	movs	r2, #0
 8014dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014db8:	b25b      	sxtb	r3, r3
 8014dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014dbe:	d103      	bne.n	8014dc8 <vQueueWaitForMessageRestricted+0x40>
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014dc8:	f001 fc9c 	bl	8016704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d106      	bne.n	8014de2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	3324      	adds	r3, #36	; 0x24
 8014dd8:	687a      	ldr	r2, [r7, #4]
 8014dda:	68b9      	ldr	r1, [r7, #8]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f000 fc7f 	bl	80156e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014de2:	6978      	ldr	r0, [r7, #20]
 8014de4:	f7ff ff26 	bl	8014c34 <prvUnlockQueue>
	}
 8014de8:	bf00      	nop
 8014dea:	3718      	adds	r7, #24
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b08e      	sub	sp, #56	; 0x38
 8014df4:	af04      	add	r7, sp, #16
 8014df6:	60f8      	str	r0, [r7, #12]
 8014df8:	60b9      	str	r1, [r7, #8]
 8014dfa:	607a      	str	r2, [r7, #4]
 8014dfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d10a      	bne.n	8014e1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8014e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e08:	f383 8811 	msr	BASEPRI, r3
 8014e0c:	f3bf 8f6f 	isb	sy
 8014e10:	f3bf 8f4f 	dsb	sy
 8014e14:	623b      	str	r3, [r7, #32]
}
 8014e16:	bf00      	nop
 8014e18:	e7fe      	b.n	8014e18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d10a      	bne.n	8014e36 <xTaskCreateStatic+0x46>
	__asm volatile
 8014e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e24:	f383 8811 	msr	BASEPRI, r3
 8014e28:	f3bf 8f6f 	isb	sy
 8014e2c:	f3bf 8f4f 	dsb	sy
 8014e30:	61fb      	str	r3, [r7, #28]
}
 8014e32:	bf00      	nop
 8014e34:	e7fe      	b.n	8014e34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014e36:	235c      	movs	r3, #92	; 0x5c
 8014e38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014e3a:	693b      	ldr	r3, [r7, #16]
 8014e3c:	2b5c      	cmp	r3, #92	; 0x5c
 8014e3e:	d00a      	beq.n	8014e56 <xTaskCreateStatic+0x66>
	__asm volatile
 8014e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e44:	f383 8811 	msr	BASEPRI, r3
 8014e48:	f3bf 8f6f 	isb	sy
 8014e4c:	f3bf 8f4f 	dsb	sy
 8014e50:	61bb      	str	r3, [r7, #24]
}
 8014e52:	bf00      	nop
 8014e54:	e7fe      	b.n	8014e54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014e56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d01e      	beq.n	8014e9c <xTaskCreateStatic+0xac>
 8014e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d01b      	beq.n	8014e9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e70:	2202      	movs	r2, #2
 8014e72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014e76:	2300      	movs	r3, #0
 8014e78:	9303      	str	r3, [sp, #12]
 8014e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e7c:	9302      	str	r3, [sp, #8]
 8014e7e:	f107 0314 	add.w	r3, r7, #20
 8014e82:	9301      	str	r3, [sp, #4]
 8014e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e86:	9300      	str	r3, [sp, #0]
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	68b9      	ldr	r1, [r7, #8]
 8014e8e:	68f8      	ldr	r0, [r7, #12]
 8014e90:	f000 f850 	bl	8014f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e96:	f000 f8dd 	bl	8015054 <prvAddNewTaskToReadyList>
 8014e9a:	e001      	b.n	8014ea0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014ea0:	697b      	ldr	r3, [r7, #20]
	}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3728      	adds	r7, #40	; 0x28
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}

08014eaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014eaa:	b580      	push	{r7, lr}
 8014eac:	b08c      	sub	sp, #48	; 0x30
 8014eae:	af04      	add	r7, sp, #16
 8014eb0:	60f8      	str	r0, [r7, #12]
 8014eb2:	60b9      	str	r1, [r7, #8]
 8014eb4:	603b      	str	r3, [r7, #0]
 8014eb6:	4613      	mov	r3, r2
 8014eb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014eba:	88fb      	ldrh	r3, [r7, #6]
 8014ebc:	009b      	lsls	r3, r3, #2
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f001 fd12 	bl	80168e8 <pvPortMalloc>
 8014ec4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d00e      	beq.n	8014eea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014ecc:	205c      	movs	r0, #92	; 0x5c
 8014ece:	f001 fd0b 	bl	80168e8 <pvPortMalloc>
 8014ed2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014ed4:	69fb      	ldr	r3, [r7, #28]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d003      	beq.n	8014ee2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014eda:	69fb      	ldr	r3, [r7, #28]
 8014edc:	697a      	ldr	r2, [r7, #20]
 8014ede:	631a      	str	r2, [r3, #48]	; 0x30
 8014ee0:	e005      	b.n	8014eee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014ee2:	6978      	ldr	r0, [r7, #20]
 8014ee4:	f001 fdcc 	bl	8016a80 <vPortFree>
 8014ee8:	e001      	b.n	8014eee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014eea:	2300      	movs	r3, #0
 8014eec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014eee:	69fb      	ldr	r3, [r7, #28]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d017      	beq.n	8014f24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014ef4:	69fb      	ldr	r3, [r7, #28]
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014efc:	88fa      	ldrh	r2, [r7, #6]
 8014efe:	2300      	movs	r3, #0
 8014f00:	9303      	str	r3, [sp, #12]
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	9302      	str	r3, [sp, #8]
 8014f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f08:	9301      	str	r3, [sp, #4]
 8014f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f0c:	9300      	str	r3, [sp, #0]
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	68b9      	ldr	r1, [r7, #8]
 8014f12:	68f8      	ldr	r0, [r7, #12]
 8014f14:	f000 f80e 	bl	8014f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014f18:	69f8      	ldr	r0, [r7, #28]
 8014f1a:	f000 f89b 	bl	8015054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014f1e:	2301      	movs	r3, #1
 8014f20:	61bb      	str	r3, [r7, #24]
 8014f22:	e002      	b.n	8014f2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014f2a:	69bb      	ldr	r3, [r7, #24]
	}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3720      	adds	r7, #32
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b088      	sub	sp, #32
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	60f8      	str	r0, [r7, #12]
 8014f3c:	60b9      	str	r1, [r7, #8]
 8014f3e:	607a      	str	r2, [r7, #4]
 8014f40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	009b      	lsls	r3, r3, #2
 8014f4a:	461a      	mov	r2, r3
 8014f4c:	21a5      	movs	r1, #165	; 0xa5
 8014f4e:	f001 fefd 	bl	8016d4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014f56:	6879      	ldr	r1, [r7, #4]
 8014f58:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014f5c:	440b      	add	r3, r1
 8014f5e:	009b      	lsls	r3, r3, #2
 8014f60:	4413      	add	r3, r2
 8014f62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014f64:	69bb      	ldr	r3, [r7, #24]
 8014f66:	f023 0307 	bic.w	r3, r3, #7
 8014f6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014f6c:	69bb      	ldr	r3, [r7, #24]
 8014f6e:	f003 0307 	and.w	r3, r3, #7
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d00a      	beq.n	8014f8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f7a:	f383 8811 	msr	BASEPRI, r3
 8014f7e:	f3bf 8f6f 	isb	sy
 8014f82:	f3bf 8f4f 	dsb	sy
 8014f86:	617b      	str	r3, [r7, #20]
}
 8014f88:	bf00      	nop
 8014f8a:	e7fe      	b.n	8014f8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d01f      	beq.n	8014fd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014f92:	2300      	movs	r3, #0
 8014f94:	61fb      	str	r3, [r7, #28]
 8014f96:	e012      	b.n	8014fbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014f98:	68ba      	ldr	r2, [r7, #8]
 8014f9a:	69fb      	ldr	r3, [r7, #28]
 8014f9c:	4413      	add	r3, r2
 8014f9e:	7819      	ldrb	r1, [r3, #0]
 8014fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	4413      	add	r3, r2
 8014fa6:	3334      	adds	r3, #52	; 0x34
 8014fa8:	460a      	mov	r2, r1
 8014faa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014fac:	68ba      	ldr	r2, [r7, #8]
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	4413      	add	r3, r2
 8014fb2:	781b      	ldrb	r3, [r3, #0]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d006      	beq.n	8014fc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014fb8:	69fb      	ldr	r3, [r7, #28]
 8014fba:	3301      	adds	r3, #1
 8014fbc:	61fb      	str	r3, [r7, #28]
 8014fbe:	69fb      	ldr	r3, [r7, #28]
 8014fc0:	2b0f      	cmp	r3, #15
 8014fc2:	d9e9      	bls.n	8014f98 <prvInitialiseNewTask+0x64>
 8014fc4:	e000      	b.n	8014fc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8014fc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fca:	2200      	movs	r2, #0
 8014fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014fd0:	e003      	b.n	8014fda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fdc:	2b37      	cmp	r3, #55	; 0x37
 8014fde:	d901      	bls.n	8014fe4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014fe0:	2337      	movs	r3, #55	; 0x37
 8014fe2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fe8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff8:	3304      	adds	r3, #4
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7ff f882 	bl	8014104 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015002:	3318      	adds	r3, #24
 8015004:	4618      	mov	r0, r3
 8015006:	f7ff f87d 	bl	8014104 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801500c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801500e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015018:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801501e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015022:	2200      	movs	r2, #0
 8015024:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015028:	2200      	movs	r2, #0
 801502a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801502e:	683a      	ldr	r2, [r7, #0]
 8015030:	68f9      	ldr	r1, [r7, #12]
 8015032:	69b8      	ldr	r0, [r7, #24]
 8015034:	f001 fa06 	bl	8016444 <pxPortInitialiseStack>
 8015038:	4602      	mov	r2, r0
 801503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015040:	2b00      	cmp	r3, #0
 8015042:	d002      	beq.n	801504a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801504a:	bf00      	nop
 801504c:	3720      	adds	r7, #32
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
	...

08015054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801505c:	f001 fb22 	bl	80166a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015060:	4b2d      	ldr	r3, [pc, #180]	; (8015118 <prvAddNewTaskToReadyList+0xc4>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	3301      	adds	r3, #1
 8015066:	4a2c      	ldr	r2, [pc, #176]	; (8015118 <prvAddNewTaskToReadyList+0xc4>)
 8015068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801506a:	4b2c      	ldr	r3, [pc, #176]	; (801511c <prvAddNewTaskToReadyList+0xc8>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d109      	bne.n	8015086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015072:	4a2a      	ldr	r2, [pc, #168]	; (801511c <prvAddNewTaskToReadyList+0xc8>)
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015078:	4b27      	ldr	r3, [pc, #156]	; (8015118 <prvAddNewTaskToReadyList+0xc4>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b01      	cmp	r3, #1
 801507e:	d110      	bne.n	80150a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015080:	f000 fcbc 	bl	80159fc <prvInitialiseTaskLists>
 8015084:	e00d      	b.n	80150a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015086:	4b26      	ldr	r3, [pc, #152]	; (8015120 <prvAddNewTaskToReadyList+0xcc>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d109      	bne.n	80150a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801508e:	4b23      	ldr	r3, [pc, #140]	; (801511c <prvAddNewTaskToReadyList+0xc8>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015098:	429a      	cmp	r2, r3
 801509a:	d802      	bhi.n	80150a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801509c:	4a1f      	ldr	r2, [pc, #124]	; (801511c <prvAddNewTaskToReadyList+0xc8>)
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80150a2:	4b20      	ldr	r3, [pc, #128]	; (8015124 <prvAddNewTaskToReadyList+0xd0>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	3301      	adds	r3, #1
 80150a8:	4a1e      	ldr	r2, [pc, #120]	; (8015124 <prvAddNewTaskToReadyList+0xd0>)
 80150aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80150ac:	4b1d      	ldr	r3, [pc, #116]	; (8015124 <prvAddNewTaskToReadyList+0xd0>)
 80150ae:	681a      	ldr	r2, [r3, #0]
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150b8:	4b1b      	ldr	r3, [pc, #108]	; (8015128 <prvAddNewTaskToReadyList+0xd4>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	429a      	cmp	r2, r3
 80150be:	d903      	bls.n	80150c8 <prvAddNewTaskToReadyList+0x74>
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150c4:	4a18      	ldr	r2, [pc, #96]	; (8015128 <prvAddNewTaskToReadyList+0xd4>)
 80150c6:	6013      	str	r3, [r2, #0]
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150cc:	4613      	mov	r3, r2
 80150ce:	009b      	lsls	r3, r3, #2
 80150d0:	4413      	add	r3, r2
 80150d2:	009b      	lsls	r3, r3, #2
 80150d4:	4a15      	ldr	r2, [pc, #84]	; (801512c <prvAddNewTaskToReadyList+0xd8>)
 80150d6:	441a      	add	r2, r3
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	3304      	adds	r3, #4
 80150dc:	4619      	mov	r1, r3
 80150de:	4610      	mov	r0, r2
 80150e0:	f7ff f81d 	bl	801411e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80150e4:	f001 fb0e 	bl	8016704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80150e8:	4b0d      	ldr	r3, [pc, #52]	; (8015120 <prvAddNewTaskToReadyList+0xcc>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d00e      	beq.n	801510e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80150f0:	4b0a      	ldr	r3, [pc, #40]	; (801511c <prvAddNewTaskToReadyList+0xc8>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d207      	bcs.n	801510e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80150fe:	4b0c      	ldr	r3, [pc, #48]	; (8015130 <prvAddNewTaskToReadyList+0xdc>)
 8015100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015104:	601a      	str	r2, [r3, #0]
 8015106:	f3bf 8f4f 	dsb	sy
 801510a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801510e:	bf00      	nop
 8015110:	3708      	adds	r7, #8
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}
 8015116:	bf00      	nop
 8015118:	24001860 	.word	0x24001860
 801511c:	2400138c 	.word	0x2400138c
 8015120:	2400186c 	.word	0x2400186c
 8015124:	2400187c 	.word	0x2400187c
 8015128:	24001868 	.word	0x24001868
 801512c:	24001390 	.word	0x24001390
 8015130:	e000ed04 	.word	0xe000ed04

08015134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015134:	b580      	push	{r7, lr}
 8015136:	b084      	sub	sp, #16
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801513c:	2300      	movs	r3, #0
 801513e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d017      	beq.n	8015176 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015146:	4b13      	ldr	r3, [pc, #76]	; (8015194 <vTaskDelay+0x60>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d00a      	beq.n	8015164 <vTaskDelay+0x30>
	__asm volatile
 801514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015152:	f383 8811 	msr	BASEPRI, r3
 8015156:	f3bf 8f6f 	isb	sy
 801515a:	f3bf 8f4f 	dsb	sy
 801515e:	60bb      	str	r3, [r7, #8]
}
 8015160:	bf00      	nop
 8015162:	e7fe      	b.n	8015162 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015164:	f000 f880 	bl	8015268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015168:	2100      	movs	r1, #0
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f000 fda8 	bl	8015cc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015170:	f000 f888 	bl	8015284 <xTaskResumeAll>
 8015174:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d107      	bne.n	801518c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801517c:	4b06      	ldr	r3, [pc, #24]	; (8015198 <vTaskDelay+0x64>)
 801517e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015182:	601a      	str	r2, [r3, #0]
 8015184:	f3bf 8f4f 	dsb	sy
 8015188:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801518c:	bf00      	nop
 801518e:	3710      	adds	r7, #16
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}
 8015194:	24001888 	.word	0x24001888
 8015198:	e000ed04 	.word	0xe000ed04

0801519c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b08a      	sub	sp, #40	; 0x28
 80151a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80151a6:	2300      	movs	r3, #0
 80151a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80151aa:	463a      	mov	r2, r7
 80151ac:	1d39      	adds	r1, r7, #4
 80151ae:	f107 0308 	add.w	r3, r7, #8
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7fe fce6 	bl	8013b84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80151b8:	6839      	ldr	r1, [r7, #0]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	68ba      	ldr	r2, [r7, #8]
 80151be:	9202      	str	r2, [sp, #8]
 80151c0:	9301      	str	r3, [sp, #4]
 80151c2:	2300      	movs	r3, #0
 80151c4:	9300      	str	r3, [sp, #0]
 80151c6:	2300      	movs	r3, #0
 80151c8:	460a      	mov	r2, r1
 80151ca:	4921      	ldr	r1, [pc, #132]	; (8015250 <vTaskStartScheduler+0xb4>)
 80151cc:	4821      	ldr	r0, [pc, #132]	; (8015254 <vTaskStartScheduler+0xb8>)
 80151ce:	f7ff fe0f 	bl	8014df0 <xTaskCreateStatic>
 80151d2:	4603      	mov	r3, r0
 80151d4:	4a20      	ldr	r2, [pc, #128]	; (8015258 <vTaskStartScheduler+0xbc>)
 80151d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80151d8:	4b1f      	ldr	r3, [pc, #124]	; (8015258 <vTaskStartScheduler+0xbc>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d002      	beq.n	80151e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80151e0:	2301      	movs	r3, #1
 80151e2:	617b      	str	r3, [r7, #20]
 80151e4:	e001      	b.n	80151ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80151e6:	2300      	movs	r3, #0
 80151e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	2b01      	cmp	r3, #1
 80151ee:	d102      	bne.n	80151f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80151f0:	f000 fdba 	bl	8015d68 <xTimerCreateTimerTask>
 80151f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d116      	bne.n	801522a <vTaskStartScheduler+0x8e>
	__asm volatile
 80151fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015200:	f383 8811 	msr	BASEPRI, r3
 8015204:	f3bf 8f6f 	isb	sy
 8015208:	f3bf 8f4f 	dsb	sy
 801520c:	613b      	str	r3, [r7, #16]
}
 801520e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015210:	4b12      	ldr	r3, [pc, #72]	; (801525c <vTaskStartScheduler+0xc0>)
 8015212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015216:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015218:	4b11      	ldr	r3, [pc, #68]	; (8015260 <vTaskStartScheduler+0xc4>)
 801521a:	2201      	movs	r2, #1
 801521c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801521e:	4b11      	ldr	r3, [pc, #68]	; (8015264 <vTaskStartScheduler+0xc8>)
 8015220:	2200      	movs	r2, #0
 8015222:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015224:	f001 f99c 	bl	8016560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015228:	e00e      	b.n	8015248 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801522a:	697b      	ldr	r3, [r7, #20]
 801522c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015230:	d10a      	bne.n	8015248 <vTaskStartScheduler+0xac>
	__asm volatile
 8015232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015236:	f383 8811 	msr	BASEPRI, r3
 801523a:	f3bf 8f6f 	isb	sy
 801523e:	f3bf 8f4f 	dsb	sy
 8015242:	60fb      	str	r3, [r7, #12]
}
 8015244:	bf00      	nop
 8015246:	e7fe      	b.n	8015246 <vTaskStartScheduler+0xaa>
}
 8015248:	bf00      	nop
 801524a:	3718      	adds	r7, #24
 801524c:	46bd      	mov	sp, r7
 801524e:	bd80      	pop	{r7, pc}
 8015250:	080179d0 	.word	0x080179d0
 8015254:	080159cd 	.word	0x080159cd
 8015258:	24001884 	.word	0x24001884
 801525c:	24001880 	.word	0x24001880
 8015260:	2400186c 	.word	0x2400186c
 8015264:	24001864 	.word	0x24001864

08015268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015268:	b480      	push	{r7}
 801526a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801526c:	4b04      	ldr	r3, [pc, #16]	; (8015280 <vTaskSuspendAll+0x18>)
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	3301      	adds	r3, #1
 8015272:	4a03      	ldr	r2, [pc, #12]	; (8015280 <vTaskSuspendAll+0x18>)
 8015274:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015276:	bf00      	nop
 8015278:	46bd      	mov	sp, r7
 801527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527e:	4770      	bx	lr
 8015280:	24001888 	.word	0x24001888

08015284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801528a:	2300      	movs	r3, #0
 801528c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801528e:	2300      	movs	r3, #0
 8015290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015292:	4b42      	ldr	r3, [pc, #264]	; (801539c <xTaskResumeAll+0x118>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d10a      	bne.n	80152b0 <xTaskResumeAll+0x2c>
	__asm volatile
 801529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801529e:	f383 8811 	msr	BASEPRI, r3
 80152a2:	f3bf 8f6f 	isb	sy
 80152a6:	f3bf 8f4f 	dsb	sy
 80152aa:	603b      	str	r3, [r7, #0]
}
 80152ac:	bf00      	nop
 80152ae:	e7fe      	b.n	80152ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80152b0:	f001 f9f8 	bl	80166a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80152b4:	4b39      	ldr	r3, [pc, #228]	; (801539c <xTaskResumeAll+0x118>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	3b01      	subs	r3, #1
 80152ba:	4a38      	ldr	r2, [pc, #224]	; (801539c <xTaskResumeAll+0x118>)
 80152bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80152be:	4b37      	ldr	r3, [pc, #220]	; (801539c <xTaskResumeAll+0x118>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d162      	bne.n	801538c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80152c6:	4b36      	ldr	r3, [pc, #216]	; (80153a0 <xTaskResumeAll+0x11c>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d05e      	beq.n	801538c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80152ce:	e02f      	b.n	8015330 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152d0:	4b34      	ldr	r3, [pc, #208]	; (80153a4 <xTaskResumeAll+0x120>)
 80152d2:	68db      	ldr	r3, [r3, #12]
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	3318      	adds	r3, #24
 80152dc:	4618      	mov	r0, r3
 80152de:	f7fe ff7b 	bl	80141d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	3304      	adds	r3, #4
 80152e6:	4618      	mov	r0, r3
 80152e8:	f7fe ff76 	bl	80141d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152f0:	4b2d      	ldr	r3, [pc, #180]	; (80153a8 <xTaskResumeAll+0x124>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d903      	bls.n	8015300 <xTaskResumeAll+0x7c>
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152fc:	4a2a      	ldr	r2, [pc, #168]	; (80153a8 <xTaskResumeAll+0x124>)
 80152fe:	6013      	str	r3, [r2, #0]
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015304:	4613      	mov	r3, r2
 8015306:	009b      	lsls	r3, r3, #2
 8015308:	4413      	add	r3, r2
 801530a:	009b      	lsls	r3, r3, #2
 801530c:	4a27      	ldr	r2, [pc, #156]	; (80153ac <xTaskResumeAll+0x128>)
 801530e:	441a      	add	r2, r3
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	3304      	adds	r3, #4
 8015314:	4619      	mov	r1, r3
 8015316:	4610      	mov	r0, r2
 8015318:	f7fe ff01 	bl	801411e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015320:	4b23      	ldr	r3, [pc, #140]	; (80153b0 <xTaskResumeAll+0x12c>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015326:	429a      	cmp	r2, r3
 8015328:	d302      	bcc.n	8015330 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801532a:	4b22      	ldr	r3, [pc, #136]	; (80153b4 <xTaskResumeAll+0x130>)
 801532c:	2201      	movs	r2, #1
 801532e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015330:	4b1c      	ldr	r3, [pc, #112]	; (80153a4 <xTaskResumeAll+0x120>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d1cb      	bne.n	80152d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d001      	beq.n	8015342 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801533e:	f000 fbfb 	bl	8015b38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015342:	4b1d      	ldr	r3, [pc, #116]	; (80153b8 <xTaskResumeAll+0x134>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d010      	beq.n	8015370 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801534e:	f000 f847 	bl	80153e0 <xTaskIncrementTick>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d002      	beq.n	801535e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015358:	4b16      	ldr	r3, [pc, #88]	; (80153b4 <xTaskResumeAll+0x130>)
 801535a:	2201      	movs	r2, #1
 801535c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	3b01      	subs	r3, #1
 8015362:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d1f1      	bne.n	801534e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801536a:	4b13      	ldr	r3, [pc, #76]	; (80153b8 <xTaskResumeAll+0x134>)
 801536c:	2200      	movs	r2, #0
 801536e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015370:	4b10      	ldr	r3, [pc, #64]	; (80153b4 <xTaskResumeAll+0x130>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d009      	beq.n	801538c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015378:	2301      	movs	r3, #1
 801537a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801537c:	4b0f      	ldr	r3, [pc, #60]	; (80153bc <xTaskResumeAll+0x138>)
 801537e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015382:	601a      	str	r2, [r3, #0]
 8015384:	f3bf 8f4f 	dsb	sy
 8015388:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801538c:	f001 f9ba 	bl	8016704 <vPortExitCritical>

	return xAlreadyYielded;
 8015390:	68bb      	ldr	r3, [r7, #8]
}
 8015392:	4618      	mov	r0, r3
 8015394:	3710      	adds	r7, #16
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}
 801539a:	bf00      	nop
 801539c:	24001888 	.word	0x24001888
 80153a0:	24001860 	.word	0x24001860
 80153a4:	24001820 	.word	0x24001820
 80153a8:	24001868 	.word	0x24001868
 80153ac:	24001390 	.word	0x24001390
 80153b0:	2400138c 	.word	0x2400138c
 80153b4:	24001874 	.word	0x24001874
 80153b8:	24001870 	.word	0x24001870
 80153bc:	e000ed04 	.word	0xe000ed04

080153c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80153c0:	b480      	push	{r7}
 80153c2:	b083      	sub	sp, #12
 80153c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80153c6:	4b05      	ldr	r3, [pc, #20]	; (80153dc <xTaskGetTickCount+0x1c>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80153cc:	687b      	ldr	r3, [r7, #4]
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	370c      	adds	r7, #12
 80153d2:	46bd      	mov	sp, r7
 80153d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d8:	4770      	bx	lr
 80153da:	bf00      	nop
 80153dc:	24001864 	.word	0x24001864

080153e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b086      	sub	sp, #24
 80153e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80153e6:	2300      	movs	r3, #0
 80153e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153ea:	4b53      	ldr	r3, [pc, #332]	; (8015538 <xTaskIncrementTick+0x158>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	f040 8095 	bne.w	801551e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80153f4:	4b51      	ldr	r3, [pc, #324]	; (801553c <xTaskIncrementTick+0x15c>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	3301      	adds	r3, #1
 80153fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80153fc:	4a4f      	ldr	r2, [pc, #316]	; (801553c <xTaskIncrementTick+0x15c>)
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015402:	693b      	ldr	r3, [r7, #16]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d120      	bne.n	801544a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015408:	4b4d      	ldr	r3, [pc, #308]	; (8015540 <xTaskIncrementTick+0x160>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d00a      	beq.n	8015428 <xTaskIncrementTick+0x48>
	__asm volatile
 8015412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015416:	f383 8811 	msr	BASEPRI, r3
 801541a:	f3bf 8f6f 	isb	sy
 801541e:	f3bf 8f4f 	dsb	sy
 8015422:	603b      	str	r3, [r7, #0]
}
 8015424:	bf00      	nop
 8015426:	e7fe      	b.n	8015426 <xTaskIncrementTick+0x46>
 8015428:	4b45      	ldr	r3, [pc, #276]	; (8015540 <xTaskIncrementTick+0x160>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	60fb      	str	r3, [r7, #12]
 801542e:	4b45      	ldr	r3, [pc, #276]	; (8015544 <xTaskIncrementTick+0x164>)
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	4a43      	ldr	r2, [pc, #268]	; (8015540 <xTaskIncrementTick+0x160>)
 8015434:	6013      	str	r3, [r2, #0]
 8015436:	4a43      	ldr	r2, [pc, #268]	; (8015544 <xTaskIncrementTick+0x164>)
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	6013      	str	r3, [r2, #0]
 801543c:	4b42      	ldr	r3, [pc, #264]	; (8015548 <xTaskIncrementTick+0x168>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	3301      	adds	r3, #1
 8015442:	4a41      	ldr	r2, [pc, #260]	; (8015548 <xTaskIncrementTick+0x168>)
 8015444:	6013      	str	r3, [r2, #0]
 8015446:	f000 fb77 	bl	8015b38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801544a:	4b40      	ldr	r3, [pc, #256]	; (801554c <xTaskIncrementTick+0x16c>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	693a      	ldr	r2, [r7, #16]
 8015450:	429a      	cmp	r2, r3
 8015452:	d349      	bcc.n	80154e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015454:	4b3a      	ldr	r3, [pc, #232]	; (8015540 <xTaskIncrementTick+0x160>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d104      	bne.n	8015468 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801545e:	4b3b      	ldr	r3, [pc, #236]	; (801554c <xTaskIncrementTick+0x16c>)
 8015460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015464:	601a      	str	r2, [r3, #0]
					break;
 8015466:	e03f      	b.n	80154e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015468:	4b35      	ldr	r3, [pc, #212]	; (8015540 <xTaskIncrementTick+0x160>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	68db      	ldr	r3, [r3, #12]
 801546e:	68db      	ldr	r3, [r3, #12]
 8015470:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015478:	693a      	ldr	r2, [r7, #16]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	429a      	cmp	r2, r3
 801547e:	d203      	bcs.n	8015488 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015480:	4a32      	ldr	r2, [pc, #200]	; (801554c <xTaskIncrementTick+0x16c>)
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015486:	e02f      	b.n	80154e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	3304      	adds	r3, #4
 801548c:	4618      	mov	r0, r3
 801548e:	f7fe fea3 	bl	80141d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015492:	68bb      	ldr	r3, [r7, #8]
 8015494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015496:	2b00      	cmp	r3, #0
 8015498:	d004      	beq.n	80154a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	3318      	adds	r3, #24
 801549e:	4618      	mov	r0, r3
 80154a0:	f7fe fe9a 	bl	80141d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154a8:	4b29      	ldr	r3, [pc, #164]	; (8015550 <xTaskIncrementTick+0x170>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d903      	bls.n	80154b8 <xTaskIncrementTick+0xd8>
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154b4:	4a26      	ldr	r2, [pc, #152]	; (8015550 <xTaskIncrementTick+0x170>)
 80154b6:	6013      	str	r3, [r2, #0]
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154bc:	4613      	mov	r3, r2
 80154be:	009b      	lsls	r3, r3, #2
 80154c0:	4413      	add	r3, r2
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	4a23      	ldr	r2, [pc, #140]	; (8015554 <xTaskIncrementTick+0x174>)
 80154c6:	441a      	add	r2, r3
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	3304      	adds	r3, #4
 80154cc:	4619      	mov	r1, r3
 80154ce:	4610      	mov	r0, r2
 80154d0:	f7fe fe25 	bl	801411e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154d8:	4b1f      	ldr	r3, [pc, #124]	; (8015558 <xTaskIncrementTick+0x178>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154de:	429a      	cmp	r2, r3
 80154e0:	d3b8      	bcc.n	8015454 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80154e2:	2301      	movs	r3, #1
 80154e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80154e6:	e7b5      	b.n	8015454 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80154e8:	4b1b      	ldr	r3, [pc, #108]	; (8015558 <xTaskIncrementTick+0x178>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ee:	4919      	ldr	r1, [pc, #100]	; (8015554 <xTaskIncrementTick+0x174>)
 80154f0:	4613      	mov	r3, r2
 80154f2:	009b      	lsls	r3, r3, #2
 80154f4:	4413      	add	r3, r2
 80154f6:	009b      	lsls	r3, r3, #2
 80154f8:	440b      	add	r3, r1
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	d901      	bls.n	8015504 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015500:	2301      	movs	r3, #1
 8015502:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8015504:	4b15      	ldr	r3, [pc, #84]	; (801555c <xTaskIncrementTick+0x17c>)
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d101      	bne.n	8015510 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801550c:	f7eb fc24 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015510:	4b13      	ldr	r3, [pc, #76]	; (8015560 <xTaskIncrementTick+0x180>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d009      	beq.n	801552c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8015518:	2301      	movs	r3, #1
 801551a:	617b      	str	r3, [r7, #20]
 801551c:	e006      	b.n	801552c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801551e:	4b0f      	ldr	r3, [pc, #60]	; (801555c <xTaskIncrementTick+0x17c>)
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	3301      	adds	r3, #1
 8015524:	4a0d      	ldr	r2, [pc, #52]	; (801555c <xTaskIncrementTick+0x17c>)
 8015526:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8015528:	f7eb fc16 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 801552c:	697b      	ldr	r3, [r7, #20]
}
 801552e:	4618      	mov	r0, r3
 8015530:	3718      	adds	r7, #24
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
 8015536:	bf00      	nop
 8015538:	24001888 	.word	0x24001888
 801553c:	24001864 	.word	0x24001864
 8015540:	24001818 	.word	0x24001818
 8015544:	2400181c 	.word	0x2400181c
 8015548:	24001878 	.word	0x24001878
 801554c:	24001880 	.word	0x24001880
 8015550:	24001868 	.word	0x24001868
 8015554:	24001390 	.word	0x24001390
 8015558:	2400138c 	.word	0x2400138c
 801555c:	24001870 	.word	0x24001870
 8015560:	24001874 	.word	0x24001874

08015564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015564:	b480      	push	{r7}
 8015566:	b085      	sub	sp, #20
 8015568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801556a:	4b28      	ldr	r3, [pc, #160]	; (801560c <vTaskSwitchContext+0xa8>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d003      	beq.n	801557a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015572:	4b27      	ldr	r3, [pc, #156]	; (8015610 <vTaskSwitchContext+0xac>)
 8015574:	2201      	movs	r2, #1
 8015576:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015578:	e041      	b.n	80155fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801557a:	4b25      	ldr	r3, [pc, #148]	; (8015610 <vTaskSwitchContext+0xac>)
 801557c:	2200      	movs	r2, #0
 801557e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015580:	4b24      	ldr	r3, [pc, #144]	; (8015614 <vTaskSwitchContext+0xb0>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	60fb      	str	r3, [r7, #12]
 8015586:	e010      	b.n	80155aa <vTaskSwitchContext+0x46>
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d10a      	bne.n	80155a4 <vTaskSwitchContext+0x40>
	__asm volatile
 801558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015592:	f383 8811 	msr	BASEPRI, r3
 8015596:	f3bf 8f6f 	isb	sy
 801559a:	f3bf 8f4f 	dsb	sy
 801559e:	607b      	str	r3, [r7, #4]
}
 80155a0:	bf00      	nop
 80155a2:	e7fe      	b.n	80155a2 <vTaskSwitchContext+0x3e>
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	3b01      	subs	r3, #1
 80155a8:	60fb      	str	r3, [r7, #12]
 80155aa:	491b      	ldr	r1, [pc, #108]	; (8015618 <vTaskSwitchContext+0xb4>)
 80155ac:	68fa      	ldr	r2, [r7, #12]
 80155ae:	4613      	mov	r3, r2
 80155b0:	009b      	lsls	r3, r3, #2
 80155b2:	4413      	add	r3, r2
 80155b4:	009b      	lsls	r3, r3, #2
 80155b6:	440b      	add	r3, r1
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d0e4      	beq.n	8015588 <vTaskSwitchContext+0x24>
 80155be:	68fa      	ldr	r2, [r7, #12]
 80155c0:	4613      	mov	r3, r2
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	4413      	add	r3, r2
 80155c6:	009b      	lsls	r3, r3, #2
 80155c8:	4a13      	ldr	r2, [pc, #76]	; (8015618 <vTaskSwitchContext+0xb4>)
 80155ca:	4413      	add	r3, r2
 80155cc:	60bb      	str	r3, [r7, #8]
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	685a      	ldr	r2, [r3, #4]
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	605a      	str	r2, [r3, #4]
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	685a      	ldr	r2, [r3, #4]
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	3308      	adds	r3, #8
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d104      	bne.n	80155ee <vTaskSwitchContext+0x8a>
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	685a      	ldr	r2, [r3, #4]
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	605a      	str	r2, [r3, #4]
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	685b      	ldr	r3, [r3, #4]
 80155f2:	68db      	ldr	r3, [r3, #12]
 80155f4:	4a09      	ldr	r2, [pc, #36]	; (801561c <vTaskSwitchContext+0xb8>)
 80155f6:	6013      	str	r3, [r2, #0]
 80155f8:	4a06      	ldr	r2, [pc, #24]	; (8015614 <vTaskSwitchContext+0xb0>)
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	6013      	str	r3, [r2, #0]
}
 80155fe:	bf00      	nop
 8015600:	3714      	adds	r7, #20
 8015602:	46bd      	mov	sp, r7
 8015604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015608:	4770      	bx	lr
 801560a:	bf00      	nop
 801560c:	24001888 	.word	0x24001888
 8015610:	24001874 	.word	0x24001874
 8015614:	24001868 	.word	0x24001868
 8015618:	24001390 	.word	0x24001390
 801561c:	2400138c 	.word	0x2400138c

08015620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b084      	sub	sp, #16
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d10a      	bne.n	8015646 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015634:	f383 8811 	msr	BASEPRI, r3
 8015638:	f3bf 8f6f 	isb	sy
 801563c:	f3bf 8f4f 	dsb	sy
 8015640:	60fb      	str	r3, [r7, #12]
}
 8015642:	bf00      	nop
 8015644:	e7fe      	b.n	8015644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015646:	4b07      	ldr	r3, [pc, #28]	; (8015664 <vTaskPlaceOnEventList+0x44>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	3318      	adds	r3, #24
 801564c:	4619      	mov	r1, r3
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f7fe fd89 	bl	8014166 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015654:	2101      	movs	r1, #1
 8015656:	6838      	ldr	r0, [r7, #0]
 8015658:	f000 fb32 	bl	8015cc0 <prvAddCurrentTaskToDelayedList>
}
 801565c:	bf00      	nop
 801565e:	3710      	adds	r7, #16
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	2400138c 	.word	0x2400138c

08015668 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b086      	sub	sp, #24
 801566c:	af00      	add	r7, sp, #0
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	60b9      	str	r1, [r7, #8]
 8015672:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d10a      	bne.n	8015690 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801567e:	f383 8811 	msr	BASEPRI, r3
 8015682:	f3bf 8f6f 	isb	sy
 8015686:	f3bf 8f4f 	dsb	sy
 801568a:	617b      	str	r3, [r7, #20]
}
 801568c:	bf00      	nop
 801568e:	e7fe      	b.n	801568e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8015690:	4b11      	ldr	r3, [pc, #68]	; (80156d8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d10a      	bne.n	80156ae <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801569c:	f383 8811 	msr	BASEPRI, r3
 80156a0:	f3bf 8f6f 	isb	sy
 80156a4:	f3bf 8f4f 	dsb	sy
 80156a8:	613b      	str	r3, [r7, #16]
}
 80156aa:	bf00      	nop
 80156ac:	e7fe      	b.n	80156ac <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80156ae:	4b0b      	ldr	r3, [pc, #44]	; (80156dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	68ba      	ldr	r2, [r7, #8]
 80156b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80156b8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80156ba:	4b08      	ldr	r3, [pc, #32]	; (80156dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	3318      	adds	r3, #24
 80156c0:	4619      	mov	r1, r3
 80156c2:	68f8      	ldr	r0, [r7, #12]
 80156c4:	f7fe fd2b 	bl	801411e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80156c8:	2101      	movs	r1, #1
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f000 faf8 	bl	8015cc0 <prvAddCurrentTaskToDelayedList>
}
 80156d0:	bf00      	nop
 80156d2:	3718      	adds	r7, #24
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	24001888 	.word	0x24001888
 80156dc:	2400138c 	.word	0x2400138c

080156e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b086      	sub	sp, #24
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	60f8      	str	r0, [r7, #12]
 80156e8:	60b9      	str	r1, [r7, #8]
 80156ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d10a      	bne.n	8015708 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80156f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f6:	f383 8811 	msr	BASEPRI, r3
 80156fa:	f3bf 8f6f 	isb	sy
 80156fe:	f3bf 8f4f 	dsb	sy
 8015702:	617b      	str	r3, [r7, #20]
}
 8015704:	bf00      	nop
 8015706:	e7fe      	b.n	8015706 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015708:	4b0a      	ldr	r3, [pc, #40]	; (8015734 <vTaskPlaceOnEventListRestricted+0x54>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	3318      	adds	r3, #24
 801570e:	4619      	mov	r1, r3
 8015710:	68f8      	ldr	r0, [r7, #12]
 8015712:	f7fe fd04 	bl	801411e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d002      	beq.n	8015722 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801571c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015720:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015722:	6879      	ldr	r1, [r7, #4]
 8015724:	68b8      	ldr	r0, [r7, #8]
 8015726:	f000 facb 	bl	8015cc0 <prvAddCurrentTaskToDelayedList>
	}
 801572a:	bf00      	nop
 801572c:	3718      	adds	r7, #24
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	2400138c 	.word	0x2400138c

08015738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b086      	sub	sp, #24
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	68db      	ldr	r3, [r3, #12]
 8015744:	68db      	ldr	r3, [r3, #12]
 8015746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d10a      	bne.n	8015764 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015752:	f383 8811 	msr	BASEPRI, r3
 8015756:	f3bf 8f6f 	isb	sy
 801575a:	f3bf 8f4f 	dsb	sy
 801575e:	60fb      	str	r3, [r7, #12]
}
 8015760:	bf00      	nop
 8015762:	e7fe      	b.n	8015762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015764:	693b      	ldr	r3, [r7, #16]
 8015766:	3318      	adds	r3, #24
 8015768:	4618      	mov	r0, r3
 801576a:	f7fe fd35 	bl	80141d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801576e:	4b1e      	ldr	r3, [pc, #120]	; (80157e8 <xTaskRemoveFromEventList+0xb0>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d11d      	bne.n	80157b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015776:	693b      	ldr	r3, [r7, #16]
 8015778:	3304      	adds	r3, #4
 801577a:	4618      	mov	r0, r3
 801577c:	f7fe fd2c 	bl	80141d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015784:	4b19      	ldr	r3, [pc, #100]	; (80157ec <xTaskRemoveFromEventList+0xb4>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	429a      	cmp	r2, r3
 801578a:	d903      	bls.n	8015794 <xTaskRemoveFromEventList+0x5c>
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015790:	4a16      	ldr	r2, [pc, #88]	; (80157ec <xTaskRemoveFromEventList+0xb4>)
 8015792:	6013      	str	r3, [r2, #0]
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015798:	4613      	mov	r3, r2
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	4413      	add	r3, r2
 801579e:	009b      	lsls	r3, r3, #2
 80157a0:	4a13      	ldr	r2, [pc, #76]	; (80157f0 <xTaskRemoveFromEventList+0xb8>)
 80157a2:	441a      	add	r2, r3
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	3304      	adds	r3, #4
 80157a8:	4619      	mov	r1, r3
 80157aa:	4610      	mov	r0, r2
 80157ac:	f7fe fcb7 	bl	801411e <vListInsertEnd>
 80157b0:	e005      	b.n	80157be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80157b2:	693b      	ldr	r3, [r7, #16]
 80157b4:	3318      	adds	r3, #24
 80157b6:	4619      	mov	r1, r3
 80157b8:	480e      	ldr	r0, [pc, #56]	; (80157f4 <xTaskRemoveFromEventList+0xbc>)
 80157ba:	f7fe fcb0 	bl	801411e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80157be:	693b      	ldr	r3, [r7, #16]
 80157c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157c2:	4b0d      	ldr	r3, [pc, #52]	; (80157f8 <xTaskRemoveFromEventList+0xc0>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d905      	bls.n	80157d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80157cc:	2301      	movs	r3, #1
 80157ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80157d0:	4b0a      	ldr	r3, [pc, #40]	; (80157fc <xTaskRemoveFromEventList+0xc4>)
 80157d2:	2201      	movs	r2, #1
 80157d4:	601a      	str	r2, [r3, #0]
 80157d6:	e001      	b.n	80157dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80157d8:	2300      	movs	r3, #0
 80157da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80157dc:	697b      	ldr	r3, [r7, #20]
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3718      	adds	r7, #24
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	24001888 	.word	0x24001888
 80157ec:	24001868 	.word	0x24001868
 80157f0:	24001390 	.word	0x24001390
 80157f4:	24001820 	.word	0x24001820
 80157f8:	2400138c 	.word	0x2400138c
 80157fc:	24001874 	.word	0x24001874

08015800 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b086      	sub	sp, #24
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801580a:	4b29      	ldr	r3, [pc, #164]	; (80158b0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d10a      	bne.n	8015828 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8015812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015816:	f383 8811 	msr	BASEPRI, r3
 801581a:	f3bf 8f6f 	isb	sy
 801581e:	f3bf 8f4f 	dsb	sy
 8015822:	613b      	str	r3, [r7, #16]
}
 8015824:	bf00      	nop
 8015826:	e7fe      	b.n	8015826 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d10a      	bne.n	8015854 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015842:	f383 8811 	msr	BASEPRI, r3
 8015846:	f3bf 8f6f 	isb	sy
 801584a:	f3bf 8f4f 	dsb	sy
 801584e:	60fb      	str	r3, [r7, #12]
}
 8015850:	bf00      	nop
 8015852:	e7fe      	b.n	8015852 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f7fe fcbf 	bl	80141d8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	3304      	adds	r3, #4
 801585e:	4618      	mov	r0, r3
 8015860:	f7fe fcba 	bl	80141d8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015868:	4b12      	ldr	r3, [pc, #72]	; (80158b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	429a      	cmp	r2, r3
 801586e:	d903      	bls.n	8015878 <vTaskRemoveFromUnorderedEventList+0x78>
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015874:	4a0f      	ldr	r2, [pc, #60]	; (80158b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015876:	6013      	str	r3, [r2, #0]
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801587c:	4613      	mov	r3, r2
 801587e:	009b      	lsls	r3, r3, #2
 8015880:	4413      	add	r3, r2
 8015882:	009b      	lsls	r3, r3, #2
 8015884:	4a0c      	ldr	r2, [pc, #48]	; (80158b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015886:	441a      	add	r2, r3
 8015888:	697b      	ldr	r3, [r7, #20]
 801588a:	3304      	adds	r3, #4
 801588c:	4619      	mov	r1, r3
 801588e:	4610      	mov	r0, r2
 8015890:	f7fe fc45 	bl	801411e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015894:	697b      	ldr	r3, [r7, #20]
 8015896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015898:	4b08      	ldr	r3, [pc, #32]	; (80158bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801589e:	429a      	cmp	r2, r3
 80158a0:	d902      	bls.n	80158a8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80158a2:	4b07      	ldr	r3, [pc, #28]	; (80158c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80158a4:	2201      	movs	r2, #1
 80158a6:	601a      	str	r2, [r3, #0]
	}
}
 80158a8:	bf00      	nop
 80158aa:	3718      	adds	r7, #24
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	24001888 	.word	0x24001888
 80158b4:	24001868 	.word	0x24001868
 80158b8:	24001390 	.word	0x24001390
 80158bc:	2400138c 	.word	0x2400138c
 80158c0:	24001874 	.word	0x24001874

080158c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80158cc:	4b06      	ldr	r3, [pc, #24]	; (80158e8 <vTaskInternalSetTimeOutState+0x24>)
 80158ce:	681a      	ldr	r2, [r3, #0]
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80158d4:	4b05      	ldr	r3, [pc, #20]	; (80158ec <vTaskInternalSetTimeOutState+0x28>)
 80158d6:	681a      	ldr	r2, [r3, #0]
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	605a      	str	r2, [r3, #4]
}
 80158dc:	bf00      	nop
 80158de:	370c      	adds	r7, #12
 80158e0:	46bd      	mov	sp, r7
 80158e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e6:	4770      	bx	lr
 80158e8:	24001878 	.word	0x24001878
 80158ec:	24001864 	.word	0x24001864

080158f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b088      	sub	sp, #32
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
 80158f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d10a      	bne.n	8015916 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015904:	f383 8811 	msr	BASEPRI, r3
 8015908:	f3bf 8f6f 	isb	sy
 801590c:	f3bf 8f4f 	dsb	sy
 8015910:	613b      	str	r3, [r7, #16]
}
 8015912:	bf00      	nop
 8015914:	e7fe      	b.n	8015914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d10a      	bne.n	8015932 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015920:	f383 8811 	msr	BASEPRI, r3
 8015924:	f3bf 8f6f 	isb	sy
 8015928:	f3bf 8f4f 	dsb	sy
 801592c:	60fb      	str	r3, [r7, #12]
}
 801592e:	bf00      	nop
 8015930:	e7fe      	b.n	8015930 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015932:	f000 feb7 	bl	80166a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015936:	4b1d      	ldr	r3, [pc, #116]	; (80159ac <xTaskCheckForTimeOut+0xbc>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	69ba      	ldr	r2, [r7, #24]
 8015942:	1ad3      	subs	r3, r2, r3
 8015944:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801594e:	d102      	bne.n	8015956 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015950:	2300      	movs	r3, #0
 8015952:	61fb      	str	r3, [r7, #28]
 8015954:	e023      	b.n	801599e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681a      	ldr	r2, [r3, #0]
 801595a:	4b15      	ldr	r3, [pc, #84]	; (80159b0 <xTaskCheckForTimeOut+0xc0>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	429a      	cmp	r2, r3
 8015960:	d007      	beq.n	8015972 <xTaskCheckForTimeOut+0x82>
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	685b      	ldr	r3, [r3, #4]
 8015966:	69ba      	ldr	r2, [r7, #24]
 8015968:	429a      	cmp	r2, r3
 801596a:	d302      	bcc.n	8015972 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801596c:	2301      	movs	r3, #1
 801596e:	61fb      	str	r3, [r7, #28]
 8015970:	e015      	b.n	801599e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015972:	683b      	ldr	r3, [r7, #0]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	697a      	ldr	r2, [r7, #20]
 8015978:	429a      	cmp	r2, r3
 801597a:	d20b      	bcs.n	8015994 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	681a      	ldr	r2, [r3, #0]
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	1ad2      	subs	r2, r2, r3
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015988:	6878      	ldr	r0, [r7, #4]
 801598a:	f7ff ff9b 	bl	80158c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801598e:	2300      	movs	r3, #0
 8015990:	61fb      	str	r3, [r7, #28]
 8015992:	e004      	b.n	801599e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	2200      	movs	r2, #0
 8015998:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801599a:	2301      	movs	r3, #1
 801599c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801599e:	f000 feb1 	bl	8016704 <vPortExitCritical>

	return xReturn;
 80159a2:	69fb      	ldr	r3, [r7, #28]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3720      	adds	r7, #32
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	24001864 	.word	0x24001864
 80159b0:	24001878 	.word	0x24001878

080159b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80159b4:	b480      	push	{r7}
 80159b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80159b8:	4b03      	ldr	r3, [pc, #12]	; (80159c8 <vTaskMissedYield+0x14>)
 80159ba:	2201      	movs	r2, #1
 80159bc:	601a      	str	r2, [r3, #0]
}
 80159be:	bf00      	nop
 80159c0:	46bd      	mov	sp, r7
 80159c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c6:	4770      	bx	lr
 80159c8:	24001874 	.word	0x24001874

080159cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80159d4:	f000 f852 	bl	8015a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80159d8:	4b06      	ldr	r3, [pc, #24]	; (80159f4 <prvIdleTask+0x28>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2b01      	cmp	r3, #1
 80159de:	d9f9      	bls.n	80159d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80159e0:	4b05      	ldr	r3, [pc, #20]	; (80159f8 <prvIdleTask+0x2c>)
 80159e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159e6:	601a      	str	r2, [r3, #0]
 80159e8:	f3bf 8f4f 	dsb	sy
 80159ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80159f0:	e7f0      	b.n	80159d4 <prvIdleTask+0x8>
 80159f2:	bf00      	nop
 80159f4:	24001390 	.word	0x24001390
 80159f8:	e000ed04 	.word	0xe000ed04

080159fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b082      	sub	sp, #8
 8015a00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015a02:	2300      	movs	r3, #0
 8015a04:	607b      	str	r3, [r7, #4]
 8015a06:	e00c      	b.n	8015a22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015a08:	687a      	ldr	r2, [r7, #4]
 8015a0a:	4613      	mov	r3, r2
 8015a0c:	009b      	lsls	r3, r3, #2
 8015a0e:	4413      	add	r3, r2
 8015a10:	009b      	lsls	r3, r3, #2
 8015a12:	4a12      	ldr	r2, [pc, #72]	; (8015a5c <prvInitialiseTaskLists+0x60>)
 8015a14:	4413      	add	r3, r2
 8015a16:	4618      	mov	r0, r3
 8015a18:	f7fe fb54 	bl	80140c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	3301      	adds	r3, #1
 8015a20:	607b      	str	r3, [r7, #4]
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	2b37      	cmp	r3, #55	; 0x37
 8015a26:	d9ef      	bls.n	8015a08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015a28:	480d      	ldr	r0, [pc, #52]	; (8015a60 <prvInitialiseTaskLists+0x64>)
 8015a2a:	f7fe fb4b 	bl	80140c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015a2e:	480d      	ldr	r0, [pc, #52]	; (8015a64 <prvInitialiseTaskLists+0x68>)
 8015a30:	f7fe fb48 	bl	80140c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015a34:	480c      	ldr	r0, [pc, #48]	; (8015a68 <prvInitialiseTaskLists+0x6c>)
 8015a36:	f7fe fb45 	bl	80140c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015a3a:	480c      	ldr	r0, [pc, #48]	; (8015a6c <prvInitialiseTaskLists+0x70>)
 8015a3c:	f7fe fb42 	bl	80140c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015a40:	480b      	ldr	r0, [pc, #44]	; (8015a70 <prvInitialiseTaskLists+0x74>)
 8015a42:	f7fe fb3f 	bl	80140c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015a46:	4b0b      	ldr	r3, [pc, #44]	; (8015a74 <prvInitialiseTaskLists+0x78>)
 8015a48:	4a05      	ldr	r2, [pc, #20]	; (8015a60 <prvInitialiseTaskLists+0x64>)
 8015a4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015a4c:	4b0a      	ldr	r3, [pc, #40]	; (8015a78 <prvInitialiseTaskLists+0x7c>)
 8015a4e:	4a05      	ldr	r2, [pc, #20]	; (8015a64 <prvInitialiseTaskLists+0x68>)
 8015a50:	601a      	str	r2, [r3, #0]
}
 8015a52:	bf00      	nop
 8015a54:	3708      	adds	r7, #8
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop
 8015a5c:	24001390 	.word	0x24001390
 8015a60:	240017f0 	.word	0x240017f0
 8015a64:	24001804 	.word	0x24001804
 8015a68:	24001820 	.word	0x24001820
 8015a6c:	24001834 	.word	0x24001834
 8015a70:	2400184c 	.word	0x2400184c
 8015a74:	24001818 	.word	0x24001818
 8015a78:	2400181c 	.word	0x2400181c

08015a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015a82:	e019      	b.n	8015ab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015a84:	f000 fe0e 	bl	80166a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a88:	4b10      	ldr	r3, [pc, #64]	; (8015acc <prvCheckTasksWaitingTermination+0x50>)
 8015a8a:	68db      	ldr	r3, [r3, #12]
 8015a8c:	68db      	ldr	r3, [r3, #12]
 8015a8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	3304      	adds	r3, #4
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7fe fb9f 	bl	80141d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015a9a:	4b0d      	ldr	r3, [pc, #52]	; (8015ad0 <prvCheckTasksWaitingTermination+0x54>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	3b01      	subs	r3, #1
 8015aa0:	4a0b      	ldr	r2, [pc, #44]	; (8015ad0 <prvCheckTasksWaitingTermination+0x54>)
 8015aa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015aa4:	4b0b      	ldr	r3, [pc, #44]	; (8015ad4 <prvCheckTasksWaitingTermination+0x58>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	3b01      	subs	r3, #1
 8015aaa:	4a0a      	ldr	r2, [pc, #40]	; (8015ad4 <prvCheckTasksWaitingTermination+0x58>)
 8015aac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015aae:	f000 fe29 	bl	8016704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f000 f810 	bl	8015ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015ab8:	4b06      	ldr	r3, [pc, #24]	; (8015ad4 <prvCheckTasksWaitingTermination+0x58>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d1e1      	bne.n	8015a84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015ac0:	bf00      	nop
 8015ac2:	bf00      	nop
 8015ac4:	3708      	adds	r7, #8
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	24001834 	.word	0x24001834
 8015ad0:	24001860 	.word	0x24001860
 8015ad4:	24001848 	.word	0x24001848

08015ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b084      	sub	sp, #16
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d108      	bne.n	8015afc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015aee:	4618      	mov	r0, r3
 8015af0:	f000 ffc6 	bl	8016a80 <vPortFree>
				vPortFree( pxTCB );
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f000 ffc3 	bl	8016a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015afa:	e018      	b.n	8015b2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015b02:	2b01      	cmp	r3, #1
 8015b04:	d103      	bne.n	8015b0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f000 ffba 	bl	8016a80 <vPortFree>
	}
 8015b0c:	e00f      	b.n	8015b2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015b14:	2b02      	cmp	r3, #2
 8015b16:	d00a      	beq.n	8015b2e <prvDeleteTCB+0x56>
	__asm volatile
 8015b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b1c:	f383 8811 	msr	BASEPRI, r3
 8015b20:	f3bf 8f6f 	isb	sy
 8015b24:	f3bf 8f4f 	dsb	sy
 8015b28:	60fb      	str	r3, [r7, #12]
}
 8015b2a:	bf00      	nop
 8015b2c:	e7fe      	b.n	8015b2c <prvDeleteTCB+0x54>
	}
 8015b2e:	bf00      	nop
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
	...

08015b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b083      	sub	sp, #12
 8015b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b3e:	4b0c      	ldr	r3, [pc, #48]	; (8015b70 <prvResetNextTaskUnblockTime+0x38>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d104      	bne.n	8015b52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015b48:	4b0a      	ldr	r3, [pc, #40]	; (8015b74 <prvResetNextTaskUnblockTime+0x3c>)
 8015b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015b50:	e008      	b.n	8015b64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b52:	4b07      	ldr	r3, [pc, #28]	; (8015b70 <prvResetNextTaskUnblockTime+0x38>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	68db      	ldr	r3, [r3, #12]
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	685b      	ldr	r3, [r3, #4]
 8015b60:	4a04      	ldr	r2, [pc, #16]	; (8015b74 <prvResetNextTaskUnblockTime+0x3c>)
 8015b62:	6013      	str	r3, [r2, #0]
}
 8015b64:	bf00      	nop
 8015b66:	370c      	adds	r7, #12
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6e:	4770      	bx	lr
 8015b70:	24001818 	.word	0x24001818
 8015b74:	24001880 	.word	0x24001880

08015b78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015b78:	b480      	push	{r7}
 8015b7a:	b083      	sub	sp, #12
 8015b7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015b7e:	4b0b      	ldr	r3, [pc, #44]	; (8015bac <xTaskGetSchedulerState+0x34>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d102      	bne.n	8015b8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015b86:	2301      	movs	r3, #1
 8015b88:	607b      	str	r3, [r7, #4]
 8015b8a:	e008      	b.n	8015b9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b8c:	4b08      	ldr	r3, [pc, #32]	; (8015bb0 <xTaskGetSchedulerState+0x38>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d102      	bne.n	8015b9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015b94:	2302      	movs	r3, #2
 8015b96:	607b      	str	r3, [r7, #4]
 8015b98:	e001      	b.n	8015b9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015b9e:	687b      	ldr	r3, [r7, #4]
	}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	370c      	adds	r7, #12
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr
 8015bac:	2400186c 	.word	0x2400186c
 8015bb0:	24001888 	.word	0x24001888

08015bb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b086      	sub	sp, #24
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d056      	beq.n	8015c78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015bca:	4b2e      	ldr	r3, [pc, #184]	; (8015c84 <xTaskPriorityDisinherit+0xd0>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	693a      	ldr	r2, [r7, #16]
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d00a      	beq.n	8015bea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd8:	f383 8811 	msr	BASEPRI, r3
 8015bdc:	f3bf 8f6f 	isb	sy
 8015be0:	f3bf 8f4f 	dsb	sy
 8015be4:	60fb      	str	r3, [r7, #12]
}
 8015be6:	bf00      	nop
 8015be8:	e7fe      	b.n	8015be8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d10a      	bne.n	8015c08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf6:	f383 8811 	msr	BASEPRI, r3
 8015bfa:	f3bf 8f6f 	isb	sy
 8015bfe:	f3bf 8f4f 	dsb	sy
 8015c02:	60bb      	str	r3, [r7, #8]
}
 8015c04:	bf00      	nop
 8015c06:	e7fe      	b.n	8015c06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015c08:	693b      	ldr	r3, [r7, #16]
 8015c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c0c:	1e5a      	subs	r2, r3, #1
 8015c0e:	693b      	ldr	r3, [r7, #16]
 8015c10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c16:	693b      	ldr	r3, [r7, #16]
 8015c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d02c      	beq.n	8015c78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d128      	bne.n	8015c78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	3304      	adds	r3, #4
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7fe fad4 	bl	80141d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c48:	4b0f      	ldr	r3, [pc, #60]	; (8015c88 <xTaskPriorityDisinherit+0xd4>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d903      	bls.n	8015c58 <xTaskPriorityDisinherit+0xa4>
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c54:	4a0c      	ldr	r2, [pc, #48]	; (8015c88 <xTaskPriorityDisinherit+0xd4>)
 8015c56:	6013      	str	r3, [r2, #0]
 8015c58:	693b      	ldr	r3, [r7, #16]
 8015c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	4413      	add	r3, r2
 8015c62:	009b      	lsls	r3, r3, #2
 8015c64:	4a09      	ldr	r2, [pc, #36]	; (8015c8c <xTaskPriorityDisinherit+0xd8>)
 8015c66:	441a      	add	r2, r3
 8015c68:	693b      	ldr	r3, [r7, #16]
 8015c6a:	3304      	adds	r3, #4
 8015c6c:	4619      	mov	r1, r3
 8015c6e:	4610      	mov	r0, r2
 8015c70:	f7fe fa55 	bl	801411e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015c74:	2301      	movs	r3, #1
 8015c76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015c78:	697b      	ldr	r3, [r7, #20]
	}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3718      	adds	r7, #24
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}
 8015c82:	bf00      	nop
 8015c84:	2400138c 	.word	0x2400138c
 8015c88:	24001868 	.word	0x24001868
 8015c8c:	24001390 	.word	0x24001390

08015c90 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015c90:	b480      	push	{r7}
 8015c92:	b083      	sub	sp, #12
 8015c94:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015c96:	4b09      	ldr	r3, [pc, #36]	; (8015cbc <uxTaskResetEventItemValue+0x2c>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	699b      	ldr	r3, [r3, #24]
 8015c9c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c9e:	4b07      	ldr	r3, [pc, #28]	; (8015cbc <uxTaskResetEventItemValue+0x2c>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ca4:	4b05      	ldr	r3, [pc, #20]	; (8015cbc <uxTaskResetEventItemValue+0x2c>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015cac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015cae:	687b      	ldr	r3, [r7, #4]
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	370c      	adds	r7, #12
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cba:	4770      	bx	lr
 8015cbc:	2400138c 	.word	0x2400138c

08015cc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b084      	sub	sp, #16
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
 8015cc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015cca:	4b21      	ldr	r3, [pc, #132]	; (8015d50 <prvAddCurrentTaskToDelayedList+0x90>)
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015cd0:	4b20      	ldr	r3, [pc, #128]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	3304      	adds	r3, #4
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7fe fa7e 	bl	80141d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ce2:	d10a      	bne.n	8015cfa <prvAddCurrentTaskToDelayedList+0x3a>
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d007      	beq.n	8015cfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015cea:	4b1a      	ldr	r3, [pc, #104]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	3304      	adds	r3, #4
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	4819      	ldr	r0, [pc, #100]	; (8015d58 <prvAddCurrentTaskToDelayedList+0x98>)
 8015cf4:	f7fe fa13 	bl	801411e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015cf8:	e026      	b.n	8015d48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015cfa:	68fa      	ldr	r2, [r7, #12]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	4413      	add	r3, r2
 8015d00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015d02:	4b14      	ldr	r3, [pc, #80]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	68ba      	ldr	r2, [r7, #8]
 8015d08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015d0a:	68ba      	ldr	r2, [r7, #8]
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	d209      	bcs.n	8015d26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d12:	4b12      	ldr	r3, [pc, #72]	; (8015d5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8015d14:	681a      	ldr	r2, [r3, #0]
 8015d16:	4b0f      	ldr	r3, [pc, #60]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	3304      	adds	r3, #4
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	4610      	mov	r0, r2
 8015d20:	f7fe fa21 	bl	8014166 <vListInsert>
}
 8015d24:	e010      	b.n	8015d48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d26:	4b0e      	ldr	r3, [pc, #56]	; (8015d60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015d28:	681a      	ldr	r2, [r3, #0]
 8015d2a:	4b0a      	ldr	r3, [pc, #40]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	3304      	adds	r3, #4
 8015d30:	4619      	mov	r1, r3
 8015d32:	4610      	mov	r0, r2
 8015d34:	f7fe fa17 	bl	8014166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015d38:	4b0a      	ldr	r3, [pc, #40]	; (8015d64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	68ba      	ldr	r2, [r7, #8]
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d202      	bcs.n	8015d48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015d42:	4a08      	ldr	r2, [pc, #32]	; (8015d64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	6013      	str	r3, [r2, #0]
}
 8015d48:	bf00      	nop
 8015d4a:	3710      	adds	r7, #16
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}
 8015d50:	24001864 	.word	0x24001864
 8015d54:	2400138c 	.word	0x2400138c
 8015d58:	2400184c 	.word	0x2400184c
 8015d5c:	2400181c 	.word	0x2400181c
 8015d60:	24001818 	.word	0x24001818
 8015d64:	24001880 	.word	0x24001880

08015d68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b08a      	sub	sp, #40	; 0x28
 8015d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015d72:	f000 fb07 	bl	8016384 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015d76:	4b1c      	ldr	r3, [pc, #112]	; (8015de8 <xTimerCreateTimerTask+0x80>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d021      	beq.n	8015dc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015d82:	2300      	movs	r3, #0
 8015d84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015d86:	1d3a      	adds	r2, r7, #4
 8015d88:	f107 0108 	add.w	r1, r7, #8
 8015d8c:	f107 030c 	add.w	r3, r7, #12
 8015d90:	4618      	mov	r0, r3
 8015d92:	f7fd ff11 	bl	8013bb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015d96:	6879      	ldr	r1, [r7, #4]
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	68fa      	ldr	r2, [r7, #12]
 8015d9c:	9202      	str	r2, [sp, #8]
 8015d9e:	9301      	str	r3, [sp, #4]
 8015da0:	2302      	movs	r3, #2
 8015da2:	9300      	str	r3, [sp, #0]
 8015da4:	2300      	movs	r3, #0
 8015da6:	460a      	mov	r2, r1
 8015da8:	4910      	ldr	r1, [pc, #64]	; (8015dec <xTimerCreateTimerTask+0x84>)
 8015daa:	4811      	ldr	r0, [pc, #68]	; (8015df0 <xTimerCreateTimerTask+0x88>)
 8015dac:	f7ff f820 	bl	8014df0 <xTaskCreateStatic>
 8015db0:	4603      	mov	r3, r0
 8015db2:	4a10      	ldr	r2, [pc, #64]	; (8015df4 <xTimerCreateTimerTask+0x8c>)
 8015db4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015db6:	4b0f      	ldr	r3, [pc, #60]	; (8015df4 <xTimerCreateTimerTask+0x8c>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d001      	beq.n	8015dc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015dc2:	697b      	ldr	r3, [r7, #20]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d10a      	bne.n	8015dde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dcc:	f383 8811 	msr	BASEPRI, r3
 8015dd0:	f3bf 8f6f 	isb	sy
 8015dd4:	f3bf 8f4f 	dsb	sy
 8015dd8:	613b      	str	r3, [r7, #16]
}
 8015dda:	bf00      	nop
 8015ddc:	e7fe      	b.n	8015ddc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015dde:	697b      	ldr	r3, [r7, #20]
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3718      	adds	r7, #24
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}
 8015de8:	240018bc 	.word	0x240018bc
 8015dec:	080179d8 	.word	0x080179d8
 8015df0:	08015f2d 	.word	0x08015f2d
 8015df4:	240018c0 	.word	0x240018c0

08015df8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b08a      	sub	sp, #40	; 0x28
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	60f8      	str	r0, [r7, #12]
 8015e00:	60b9      	str	r1, [r7, #8]
 8015e02:	607a      	str	r2, [r7, #4]
 8015e04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015e06:	2300      	movs	r3, #0
 8015e08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d10a      	bne.n	8015e26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e14:	f383 8811 	msr	BASEPRI, r3
 8015e18:	f3bf 8f6f 	isb	sy
 8015e1c:	f3bf 8f4f 	dsb	sy
 8015e20:	623b      	str	r3, [r7, #32]
}
 8015e22:	bf00      	nop
 8015e24:	e7fe      	b.n	8015e24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015e26:	4b1a      	ldr	r3, [pc, #104]	; (8015e90 <xTimerGenericCommand+0x98>)
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d02a      	beq.n	8015e84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015e3a:	68bb      	ldr	r3, [r7, #8]
 8015e3c:	2b05      	cmp	r3, #5
 8015e3e:	dc18      	bgt.n	8015e72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015e40:	f7ff fe9a 	bl	8015b78 <xTaskGetSchedulerState>
 8015e44:	4603      	mov	r3, r0
 8015e46:	2b02      	cmp	r3, #2
 8015e48:	d109      	bne.n	8015e5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015e4a:	4b11      	ldr	r3, [pc, #68]	; (8015e90 <xTimerGenericCommand+0x98>)
 8015e4c:	6818      	ldr	r0, [r3, #0]
 8015e4e:	f107 0110 	add.w	r1, r7, #16
 8015e52:	2300      	movs	r3, #0
 8015e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e56:	f7fe fb27 	bl	80144a8 <xQueueGenericSend>
 8015e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8015e5c:	e012      	b.n	8015e84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015e5e:	4b0c      	ldr	r3, [pc, #48]	; (8015e90 <xTimerGenericCommand+0x98>)
 8015e60:	6818      	ldr	r0, [r3, #0]
 8015e62:	f107 0110 	add.w	r1, r7, #16
 8015e66:	2300      	movs	r3, #0
 8015e68:	2200      	movs	r2, #0
 8015e6a:	f7fe fb1d 	bl	80144a8 <xQueueGenericSend>
 8015e6e:	6278      	str	r0, [r7, #36]	; 0x24
 8015e70:	e008      	b.n	8015e84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015e72:	4b07      	ldr	r3, [pc, #28]	; (8015e90 <xTimerGenericCommand+0x98>)
 8015e74:	6818      	ldr	r0, [r3, #0]
 8015e76:	f107 0110 	add.w	r1, r7, #16
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	683a      	ldr	r2, [r7, #0]
 8015e7e:	f7fe fc11 	bl	80146a4 <xQueueGenericSendFromISR>
 8015e82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3728      	adds	r7, #40	; 0x28
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}
 8015e8e:	bf00      	nop
 8015e90:	240018bc 	.word	0x240018bc

08015e94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b088      	sub	sp, #32
 8015e98:	af02      	add	r7, sp, #8
 8015e9a:	6078      	str	r0, [r7, #4]
 8015e9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e9e:	4b22      	ldr	r3, [pc, #136]	; (8015f28 <prvProcessExpiredTimer+0x94>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	68db      	ldr	r3, [r3, #12]
 8015ea4:	68db      	ldr	r3, [r3, #12]
 8015ea6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015ea8:	697b      	ldr	r3, [r7, #20]
 8015eaa:	3304      	adds	r3, #4
 8015eac:	4618      	mov	r0, r3
 8015eae:	f7fe f993 	bl	80141d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015eb8:	f003 0304 	and.w	r3, r3, #4
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d022      	beq.n	8015f06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	699a      	ldr	r2, [r3, #24]
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	18d1      	adds	r1, r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	683a      	ldr	r2, [r7, #0]
 8015ecc:	6978      	ldr	r0, [r7, #20]
 8015ece:	f000 f8d1 	bl	8016074 <prvInsertTimerInActiveList>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d01f      	beq.n	8015f18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ed8:	2300      	movs	r3, #0
 8015eda:	9300      	str	r3, [sp, #0]
 8015edc:	2300      	movs	r3, #0
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	2100      	movs	r1, #0
 8015ee2:	6978      	ldr	r0, [r7, #20]
 8015ee4:	f7ff ff88 	bl	8015df8 <xTimerGenericCommand>
 8015ee8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d113      	bne.n	8015f18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ef4:	f383 8811 	msr	BASEPRI, r3
 8015ef8:	f3bf 8f6f 	isb	sy
 8015efc:	f3bf 8f4f 	dsb	sy
 8015f00:	60fb      	str	r3, [r7, #12]
}
 8015f02:	bf00      	nop
 8015f04:	e7fe      	b.n	8015f04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f0c:	f023 0301 	bic.w	r3, r3, #1
 8015f10:	b2da      	uxtb	r2, r3
 8015f12:	697b      	ldr	r3, [r7, #20]
 8015f14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	6a1b      	ldr	r3, [r3, #32]
 8015f1c:	6978      	ldr	r0, [r7, #20]
 8015f1e:	4798      	blx	r3
}
 8015f20:	bf00      	nop
 8015f22:	3718      	adds	r7, #24
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}
 8015f28:	240018b4 	.word	0x240018b4

08015f2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015f34:	f107 0308 	add.w	r3, r7, #8
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f000 f857 	bl	8015fec <prvGetNextExpireTime>
 8015f3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015f40:	68bb      	ldr	r3, [r7, #8]
 8015f42:	4619      	mov	r1, r3
 8015f44:	68f8      	ldr	r0, [r7, #12]
 8015f46:	f000 f803 	bl	8015f50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015f4a:	f000 f8d5 	bl	80160f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015f4e:	e7f1      	b.n	8015f34 <prvTimerTask+0x8>

08015f50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b084      	sub	sp, #16
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
 8015f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015f5a:	f7ff f985 	bl	8015268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015f5e:	f107 0308 	add.w	r3, r7, #8
 8015f62:	4618      	mov	r0, r3
 8015f64:	f000 f866 	bl	8016034 <prvSampleTimeNow>
 8015f68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015f6a:	68bb      	ldr	r3, [r7, #8]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d130      	bne.n	8015fd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d10a      	bne.n	8015f8c <prvProcessTimerOrBlockTask+0x3c>
 8015f76:	687a      	ldr	r2, [r7, #4]
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d806      	bhi.n	8015f8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015f7e:	f7ff f981 	bl	8015284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015f82:	68f9      	ldr	r1, [r7, #12]
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f7ff ff85 	bl	8015e94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015f8a:	e024      	b.n	8015fd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d008      	beq.n	8015fa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015f92:	4b13      	ldr	r3, [pc, #76]	; (8015fe0 <prvProcessTimerOrBlockTask+0x90>)
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d101      	bne.n	8015fa0 <prvProcessTimerOrBlockTask+0x50>
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	e000      	b.n	8015fa2 <prvProcessTimerOrBlockTask+0x52>
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015fa4:	4b0f      	ldr	r3, [pc, #60]	; (8015fe4 <prvProcessTimerOrBlockTask+0x94>)
 8015fa6:	6818      	ldr	r0, [r3, #0]
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	1ad3      	subs	r3, r2, r3
 8015fae:	683a      	ldr	r2, [r7, #0]
 8015fb0:	4619      	mov	r1, r3
 8015fb2:	f7fe fee9 	bl	8014d88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015fb6:	f7ff f965 	bl	8015284 <xTaskResumeAll>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d10a      	bne.n	8015fd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015fc0:	4b09      	ldr	r3, [pc, #36]	; (8015fe8 <prvProcessTimerOrBlockTask+0x98>)
 8015fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fc6:	601a      	str	r2, [r3, #0]
 8015fc8:	f3bf 8f4f 	dsb	sy
 8015fcc:	f3bf 8f6f 	isb	sy
}
 8015fd0:	e001      	b.n	8015fd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015fd2:	f7ff f957 	bl	8015284 <xTaskResumeAll>
}
 8015fd6:	bf00      	nop
 8015fd8:	3710      	adds	r7, #16
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop
 8015fe0:	240018b8 	.word	0x240018b8
 8015fe4:	240018bc 	.word	0x240018bc
 8015fe8:	e000ed04 	.word	0xe000ed04

08015fec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015fec:	b480      	push	{r7}
 8015fee:	b085      	sub	sp, #20
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015ff4:	4b0e      	ldr	r3, [pc, #56]	; (8016030 <prvGetNextExpireTime+0x44>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d101      	bne.n	8016002 <prvGetNextExpireTime+0x16>
 8015ffe:	2201      	movs	r2, #1
 8016000:	e000      	b.n	8016004 <prvGetNextExpireTime+0x18>
 8016002:	2200      	movs	r2, #0
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d105      	bne.n	801601c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016010:	4b07      	ldr	r3, [pc, #28]	; (8016030 <prvGetNextExpireTime+0x44>)
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	68db      	ldr	r3, [r3, #12]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	60fb      	str	r3, [r7, #12]
 801601a:	e001      	b.n	8016020 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801601c:	2300      	movs	r3, #0
 801601e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016020:	68fb      	ldr	r3, [r7, #12]
}
 8016022:	4618      	mov	r0, r3
 8016024:	3714      	adds	r7, #20
 8016026:	46bd      	mov	sp, r7
 8016028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602c:	4770      	bx	lr
 801602e:	bf00      	nop
 8016030:	240018b4 	.word	0x240018b4

08016034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801603c:	f7ff f9c0 	bl	80153c0 <xTaskGetTickCount>
 8016040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016042:	4b0b      	ldr	r3, [pc, #44]	; (8016070 <prvSampleTimeNow+0x3c>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	68fa      	ldr	r2, [r7, #12]
 8016048:	429a      	cmp	r2, r3
 801604a:	d205      	bcs.n	8016058 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801604c:	f000 f936 	bl	80162bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2201      	movs	r2, #1
 8016054:	601a      	str	r2, [r3, #0]
 8016056:	e002      	b.n	801605e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2200      	movs	r2, #0
 801605c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801605e:	4a04      	ldr	r2, [pc, #16]	; (8016070 <prvSampleTimeNow+0x3c>)
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016064:	68fb      	ldr	r3, [r7, #12]
}
 8016066:	4618      	mov	r0, r3
 8016068:	3710      	adds	r7, #16
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	240018c4 	.word	0x240018c4

08016074 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b086      	sub	sp, #24
 8016078:	af00      	add	r7, sp, #0
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	60b9      	str	r1, [r7, #8]
 801607e:	607a      	str	r2, [r7, #4]
 8016080:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016082:	2300      	movs	r3, #0
 8016084:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	68ba      	ldr	r2, [r7, #8]
 801608a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	68fa      	ldr	r2, [r7, #12]
 8016090:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016092:	68ba      	ldr	r2, [r7, #8]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	429a      	cmp	r2, r3
 8016098:	d812      	bhi.n	80160c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801609a:	687a      	ldr	r2, [r7, #4]
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	1ad2      	subs	r2, r2, r3
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	699b      	ldr	r3, [r3, #24]
 80160a4:	429a      	cmp	r2, r3
 80160a6:	d302      	bcc.n	80160ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80160a8:	2301      	movs	r3, #1
 80160aa:	617b      	str	r3, [r7, #20]
 80160ac:	e01b      	b.n	80160e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80160ae:	4b10      	ldr	r3, [pc, #64]	; (80160f0 <prvInsertTimerInActiveList+0x7c>)
 80160b0:	681a      	ldr	r2, [r3, #0]
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	3304      	adds	r3, #4
 80160b6:	4619      	mov	r1, r3
 80160b8:	4610      	mov	r0, r2
 80160ba:	f7fe f854 	bl	8014166 <vListInsert>
 80160be:	e012      	b.n	80160e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d206      	bcs.n	80160d6 <prvInsertTimerInActiveList+0x62>
 80160c8:	68ba      	ldr	r2, [r7, #8]
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d302      	bcc.n	80160d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80160d0:	2301      	movs	r3, #1
 80160d2:	617b      	str	r3, [r7, #20]
 80160d4:	e007      	b.n	80160e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80160d6:	4b07      	ldr	r3, [pc, #28]	; (80160f4 <prvInsertTimerInActiveList+0x80>)
 80160d8:	681a      	ldr	r2, [r3, #0]
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	3304      	adds	r3, #4
 80160de:	4619      	mov	r1, r3
 80160e0:	4610      	mov	r0, r2
 80160e2:	f7fe f840 	bl	8014166 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80160e6:	697b      	ldr	r3, [r7, #20]
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	3718      	adds	r7, #24
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}
 80160f0:	240018b8 	.word	0x240018b8
 80160f4:	240018b4 	.word	0x240018b4

080160f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b08e      	sub	sp, #56	; 0x38
 80160fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80160fe:	e0ca      	b.n	8016296 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	2b00      	cmp	r3, #0
 8016104:	da18      	bge.n	8016138 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016106:	1d3b      	adds	r3, r7, #4
 8016108:	3304      	adds	r3, #4
 801610a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610e:	2b00      	cmp	r3, #0
 8016110:	d10a      	bne.n	8016128 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8016112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016116:	f383 8811 	msr	BASEPRI, r3
 801611a:	f3bf 8f6f 	isb	sy
 801611e:	f3bf 8f4f 	dsb	sy
 8016122:	61fb      	str	r3, [r7, #28]
}
 8016124:	bf00      	nop
 8016126:	e7fe      	b.n	8016126 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801612e:	6850      	ldr	r0, [r2, #4]
 8016130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016132:	6892      	ldr	r2, [r2, #8]
 8016134:	4611      	mov	r1, r2
 8016136:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	2b00      	cmp	r3, #0
 801613c:	f2c0 80aa 	blt.w	8016294 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016146:	695b      	ldr	r3, [r3, #20]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d004      	beq.n	8016156 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801614e:	3304      	adds	r3, #4
 8016150:	4618      	mov	r0, r3
 8016152:	f7fe f841 	bl	80141d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016156:	463b      	mov	r3, r7
 8016158:	4618      	mov	r0, r3
 801615a:	f7ff ff6b 	bl	8016034 <prvSampleTimeNow>
 801615e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2b09      	cmp	r3, #9
 8016164:	f200 8097 	bhi.w	8016296 <prvProcessReceivedCommands+0x19e>
 8016168:	a201      	add	r2, pc, #4	; (adr r2, 8016170 <prvProcessReceivedCommands+0x78>)
 801616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801616e:	bf00      	nop
 8016170:	08016199 	.word	0x08016199
 8016174:	08016199 	.word	0x08016199
 8016178:	08016199 	.word	0x08016199
 801617c:	0801620d 	.word	0x0801620d
 8016180:	08016221 	.word	0x08016221
 8016184:	0801626b 	.word	0x0801626b
 8016188:	08016199 	.word	0x08016199
 801618c:	08016199 	.word	0x08016199
 8016190:	0801620d 	.word	0x0801620d
 8016194:	08016221 	.word	0x08016221
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801619a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801619e:	f043 0301 	orr.w	r3, r3, #1
 80161a2:	b2da      	uxtb	r2, r3
 80161a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80161aa:	68ba      	ldr	r2, [r7, #8]
 80161ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ae:	699b      	ldr	r3, [r3, #24]
 80161b0:	18d1      	adds	r1, r2, r3
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161b8:	f7ff ff5c 	bl	8016074 <prvInsertTimerInActiveList>
 80161bc:	4603      	mov	r3, r0
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d069      	beq.n	8016296 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80161c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c4:	6a1b      	ldr	r3, [r3, #32]
 80161c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80161ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161d0:	f003 0304 	and.w	r3, r3, #4
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d05e      	beq.n	8016296 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80161d8:	68ba      	ldr	r2, [r7, #8]
 80161da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161dc:	699b      	ldr	r3, [r3, #24]
 80161de:	441a      	add	r2, r3
 80161e0:	2300      	movs	r3, #0
 80161e2:	9300      	str	r3, [sp, #0]
 80161e4:	2300      	movs	r3, #0
 80161e6:	2100      	movs	r1, #0
 80161e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161ea:	f7ff fe05 	bl	8015df8 <xTimerGenericCommand>
 80161ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80161f0:	6a3b      	ldr	r3, [r7, #32]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d14f      	bne.n	8016296 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80161f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161fa:	f383 8811 	msr	BASEPRI, r3
 80161fe:	f3bf 8f6f 	isb	sy
 8016202:	f3bf 8f4f 	dsb	sy
 8016206:	61bb      	str	r3, [r7, #24]
}
 8016208:	bf00      	nop
 801620a:	e7fe      	b.n	801620a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016212:	f023 0301 	bic.w	r3, r3, #1
 8016216:	b2da      	uxtb	r2, r3
 8016218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801621a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801621e:	e03a      	b.n	8016296 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016226:	f043 0301 	orr.w	r3, r3, #1
 801622a:	b2da      	uxtb	r2, r3
 801622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801622e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016232:	68ba      	ldr	r2, [r7, #8]
 8016234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016236:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801623a:	699b      	ldr	r3, [r3, #24]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d10a      	bne.n	8016256 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8016240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016244:	f383 8811 	msr	BASEPRI, r3
 8016248:	f3bf 8f6f 	isb	sy
 801624c:	f3bf 8f4f 	dsb	sy
 8016250:	617b      	str	r3, [r7, #20]
}
 8016252:	bf00      	nop
 8016254:	e7fe      	b.n	8016254 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016258:	699a      	ldr	r2, [r3, #24]
 801625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801625c:	18d1      	adds	r1, r2, r3
 801625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016264:	f7ff ff06 	bl	8016074 <prvInsertTimerInActiveList>
					break;
 8016268:	e015      	b.n	8016296 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801626c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016270:	f003 0302 	and.w	r3, r3, #2
 8016274:	2b00      	cmp	r3, #0
 8016276:	d103      	bne.n	8016280 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801627a:	f000 fc01 	bl	8016a80 <vPortFree>
 801627e:	e00a      	b.n	8016296 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016286:	f023 0301 	bic.w	r3, r3, #1
 801628a:	b2da      	uxtb	r2, r3
 801628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801628e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016292:	e000      	b.n	8016296 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016294:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016296:	4b08      	ldr	r3, [pc, #32]	; (80162b8 <prvProcessReceivedCommands+0x1c0>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	1d39      	adds	r1, r7, #4
 801629c:	2200      	movs	r2, #0
 801629e:	4618      	mov	r0, r3
 80162a0:	f7fe fa9c 	bl	80147dc <xQueueReceive>
 80162a4:	4603      	mov	r3, r0
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	f47f af2a 	bne.w	8016100 <prvProcessReceivedCommands+0x8>
	}
}
 80162ac:	bf00      	nop
 80162ae:	bf00      	nop
 80162b0:	3730      	adds	r7, #48	; 0x30
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	240018bc 	.word	0x240018bc

080162bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b088      	sub	sp, #32
 80162c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80162c2:	e048      	b.n	8016356 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80162c4:	4b2d      	ldr	r3, [pc, #180]	; (801637c <prvSwitchTimerLists+0xc0>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	68db      	ldr	r3, [r3, #12]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162ce:	4b2b      	ldr	r3, [pc, #172]	; (801637c <prvSwitchTimerLists+0xc0>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	68db      	ldr	r3, [r3, #12]
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	3304      	adds	r3, #4
 80162dc:	4618      	mov	r0, r3
 80162de:	f7fd ff7b 	bl	80141d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	6a1b      	ldr	r3, [r3, #32]
 80162e6:	68f8      	ldr	r0, [r7, #12]
 80162e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80162f0:	f003 0304 	and.w	r3, r3, #4
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d02e      	beq.n	8016356 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	699b      	ldr	r3, [r3, #24]
 80162fc:	693a      	ldr	r2, [r7, #16]
 80162fe:	4413      	add	r3, r2
 8016300:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016302:	68ba      	ldr	r2, [r7, #8]
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	429a      	cmp	r2, r3
 8016308:	d90e      	bls.n	8016328 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	68ba      	ldr	r2, [r7, #8]
 801630e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	68fa      	ldr	r2, [r7, #12]
 8016314:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016316:	4b19      	ldr	r3, [pc, #100]	; (801637c <prvSwitchTimerLists+0xc0>)
 8016318:	681a      	ldr	r2, [r3, #0]
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	3304      	adds	r3, #4
 801631e:	4619      	mov	r1, r3
 8016320:	4610      	mov	r0, r2
 8016322:	f7fd ff20 	bl	8014166 <vListInsert>
 8016326:	e016      	b.n	8016356 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016328:	2300      	movs	r3, #0
 801632a:	9300      	str	r3, [sp, #0]
 801632c:	2300      	movs	r3, #0
 801632e:	693a      	ldr	r2, [r7, #16]
 8016330:	2100      	movs	r1, #0
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	f7ff fd60 	bl	8015df8 <xTimerGenericCommand>
 8016338:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d10a      	bne.n	8016356 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8016340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016344:	f383 8811 	msr	BASEPRI, r3
 8016348:	f3bf 8f6f 	isb	sy
 801634c:	f3bf 8f4f 	dsb	sy
 8016350:	603b      	str	r3, [r7, #0]
}
 8016352:	bf00      	nop
 8016354:	e7fe      	b.n	8016354 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016356:	4b09      	ldr	r3, [pc, #36]	; (801637c <prvSwitchTimerLists+0xc0>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d1b1      	bne.n	80162c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016360:	4b06      	ldr	r3, [pc, #24]	; (801637c <prvSwitchTimerLists+0xc0>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016366:	4b06      	ldr	r3, [pc, #24]	; (8016380 <prvSwitchTimerLists+0xc4>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	4a04      	ldr	r2, [pc, #16]	; (801637c <prvSwitchTimerLists+0xc0>)
 801636c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801636e:	4a04      	ldr	r2, [pc, #16]	; (8016380 <prvSwitchTimerLists+0xc4>)
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	6013      	str	r3, [r2, #0]
}
 8016374:	bf00      	nop
 8016376:	3718      	adds	r7, #24
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}
 801637c:	240018b4 	.word	0x240018b4
 8016380:	240018b8 	.word	0x240018b8

08016384 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b082      	sub	sp, #8
 8016388:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801638a:	f000 f98b 	bl	80166a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801638e:	4b15      	ldr	r3, [pc, #84]	; (80163e4 <prvCheckForValidListAndQueue+0x60>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d120      	bne.n	80163d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016396:	4814      	ldr	r0, [pc, #80]	; (80163e8 <prvCheckForValidListAndQueue+0x64>)
 8016398:	f7fd fe94 	bl	80140c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801639c:	4813      	ldr	r0, [pc, #76]	; (80163ec <prvCheckForValidListAndQueue+0x68>)
 801639e:	f7fd fe91 	bl	80140c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80163a2:	4b13      	ldr	r3, [pc, #76]	; (80163f0 <prvCheckForValidListAndQueue+0x6c>)
 80163a4:	4a10      	ldr	r2, [pc, #64]	; (80163e8 <prvCheckForValidListAndQueue+0x64>)
 80163a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80163a8:	4b12      	ldr	r3, [pc, #72]	; (80163f4 <prvCheckForValidListAndQueue+0x70>)
 80163aa:	4a10      	ldr	r2, [pc, #64]	; (80163ec <prvCheckForValidListAndQueue+0x68>)
 80163ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80163ae:	2300      	movs	r3, #0
 80163b0:	9300      	str	r3, [sp, #0]
 80163b2:	4b11      	ldr	r3, [pc, #68]	; (80163f8 <prvCheckForValidListAndQueue+0x74>)
 80163b4:	4a11      	ldr	r2, [pc, #68]	; (80163fc <prvCheckForValidListAndQueue+0x78>)
 80163b6:	2110      	movs	r1, #16
 80163b8:	200a      	movs	r0, #10
 80163ba:	f7fd ff9f 	bl	80142fc <xQueueGenericCreateStatic>
 80163be:	4603      	mov	r3, r0
 80163c0:	4a08      	ldr	r2, [pc, #32]	; (80163e4 <prvCheckForValidListAndQueue+0x60>)
 80163c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80163c4:	4b07      	ldr	r3, [pc, #28]	; (80163e4 <prvCheckForValidListAndQueue+0x60>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d005      	beq.n	80163d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80163cc:	4b05      	ldr	r3, [pc, #20]	; (80163e4 <prvCheckForValidListAndQueue+0x60>)
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	490b      	ldr	r1, [pc, #44]	; (8016400 <prvCheckForValidListAndQueue+0x7c>)
 80163d2:	4618      	mov	r0, r3
 80163d4:	f7fe fcae 	bl	8014d34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80163d8:	f000 f994 	bl	8016704 <vPortExitCritical>
}
 80163dc:	bf00      	nop
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	240018bc 	.word	0x240018bc
 80163e8:	2400188c 	.word	0x2400188c
 80163ec:	240018a0 	.word	0x240018a0
 80163f0:	240018b4 	.word	0x240018b4
 80163f4:	240018b8 	.word	0x240018b8
 80163f8:	24001968 	.word	0x24001968
 80163fc:	240018c8 	.word	0x240018c8
 8016400:	080179e0 	.word	0x080179e0

08016404 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016404:	b580      	push	{r7, lr}
 8016406:	b08a      	sub	sp, #40	; 0x28
 8016408:	af00      	add	r7, sp, #0
 801640a:	60f8      	str	r0, [r7, #12]
 801640c:	60b9      	str	r1, [r7, #8]
 801640e:	607a      	str	r2, [r7, #4]
 8016410:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8016412:	f06f 0301 	mvn.w	r3, #1
 8016416:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016424:	4b06      	ldr	r3, [pc, #24]	; (8016440 <xTimerPendFunctionCallFromISR+0x3c>)
 8016426:	6818      	ldr	r0, [r3, #0]
 8016428:	f107 0114 	add.w	r1, r7, #20
 801642c:	2300      	movs	r3, #0
 801642e:	683a      	ldr	r2, [r7, #0]
 8016430:	f7fe f938 	bl	80146a4 <xQueueGenericSendFromISR>
 8016434:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8016436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8016438:	4618      	mov	r0, r3
 801643a:	3728      	adds	r7, #40	; 0x28
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}
 8016440:	240018bc 	.word	0x240018bc

08016444 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016444:	b480      	push	{r7}
 8016446:	b085      	sub	sp, #20
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	3b04      	subs	r3, #4
 8016454:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801645c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	3b04      	subs	r3, #4
 8016462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	f023 0201 	bic.w	r2, r3, #1
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	3b04      	subs	r3, #4
 8016472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016474:	4a0c      	ldr	r2, [pc, #48]	; (80164a8 <pxPortInitialiseStack+0x64>)
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	3b14      	subs	r3, #20
 801647e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016480:	687a      	ldr	r2, [r7, #4]
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	3b04      	subs	r3, #4
 801648a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	f06f 0202 	mvn.w	r2, #2
 8016492:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	3b20      	subs	r3, #32
 8016498:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801649a:	68fb      	ldr	r3, [r7, #12]
}
 801649c:	4618      	mov	r0, r3
 801649e:	3714      	adds	r7, #20
 80164a0:	46bd      	mov	sp, r7
 80164a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a6:	4770      	bx	lr
 80164a8:	080164ad 	.word	0x080164ad

080164ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80164ac:	b480      	push	{r7}
 80164ae:	b085      	sub	sp, #20
 80164b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80164b6:	4b12      	ldr	r3, [pc, #72]	; (8016500 <prvTaskExitError+0x54>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80164be:	d00a      	beq.n	80164d6 <prvTaskExitError+0x2a>
	__asm volatile
 80164c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c4:	f383 8811 	msr	BASEPRI, r3
 80164c8:	f3bf 8f6f 	isb	sy
 80164cc:	f3bf 8f4f 	dsb	sy
 80164d0:	60fb      	str	r3, [r7, #12]
}
 80164d2:	bf00      	nop
 80164d4:	e7fe      	b.n	80164d4 <prvTaskExitError+0x28>
	__asm volatile
 80164d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164da:	f383 8811 	msr	BASEPRI, r3
 80164de:	f3bf 8f6f 	isb	sy
 80164e2:	f3bf 8f4f 	dsb	sy
 80164e6:	60bb      	str	r3, [r7, #8]
}
 80164e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80164ea:	bf00      	nop
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d0fc      	beq.n	80164ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80164f2:	bf00      	nop
 80164f4:	bf00      	nop
 80164f6:	3714      	adds	r7, #20
 80164f8:	46bd      	mov	sp, r7
 80164fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fe:	4770      	bx	lr
 8016500:	24000098 	.word	0x24000098
	...

08016510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016510:	4b07      	ldr	r3, [pc, #28]	; (8016530 <pxCurrentTCBConst2>)
 8016512:	6819      	ldr	r1, [r3, #0]
 8016514:	6808      	ldr	r0, [r1, #0]
 8016516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801651a:	f380 8809 	msr	PSP, r0
 801651e:	f3bf 8f6f 	isb	sy
 8016522:	f04f 0000 	mov.w	r0, #0
 8016526:	f380 8811 	msr	BASEPRI, r0
 801652a:	4770      	bx	lr
 801652c:	f3af 8000 	nop.w

08016530 <pxCurrentTCBConst2>:
 8016530:	2400138c 	.word	0x2400138c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016534:	bf00      	nop
 8016536:	bf00      	nop

08016538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016538:	4808      	ldr	r0, [pc, #32]	; (801655c <prvPortStartFirstTask+0x24>)
 801653a:	6800      	ldr	r0, [r0, #0]
 801653c:	6800      	ldr	r0, [r0, #0]
 801653e:	f380 8808 	msr	MSP, r0
 8016542:	f04f 0000 	mov.w	r0, #0
 8016546:	f380 8814 	msr	CONTROL, r0
 801654a:	b662      	cpsie	i
 801654c:	b661      	cpsie	f
 801654e:	f3bf 8f4f 	dsb	sy
 8016552:	f3bf 8f6f 	isb	sy
 8016556:	df00      	svc	0
 8016558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801655a:	bf00      	nop
 801655c:	e000ed08 	.word	0xe000ed08

08016560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b086      	sub	sp, #24
 8016564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016566:	4b46      	ldr	r3, [pc, #280]	; (8016680 <xPortStartScheduler+0x120>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	4a46      	ldr	r2, [pc, #280]	; (8016684 <xPortStartScheduler+0x124>)
 801656c:	4293      	cmp	r3, r2
 801656e:	d10a      	bne.n	8016586 <xPortStartScheduler+0x26>
	__asm volatile
 8016570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016574:	f383 8811 	msr	BASEPRI, r3
 8016578:	f3bf 8f6f 	isb	sy
 801657c:	f3bf 8f4f 	dsb	sy
 8016580:	613b      	str	r3, [r7, #16]
}
 8016582:	bf00      	nop
 8016584:	e7fe      	b.n	8016584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016586:	4b3e      	ldr	r3, [pc, #248]	; (8016680 <xPortStartScheduler+0x120>)
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	4a3f      	ldr	r2, [pc, #252]	; (8016688 <xPortStartScheduler+0x128>)
 801658c:	4293      	cmp	r3, r2
 801658e:	d10a      	bne.n	80165a6 <xPortStartScheduler+0x46>
	__asm volatile
 8016590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016594:	f383 8811 	msr	BASEPRI, r3
 8016598:	f3bf 8f6f 	isb	sy
 801659c:	f3bf 8f4f 	dsb	sy
 80165a0:	60fb      	str	r3, [r7, #12]
}
 80165a2:	bf00      	nop
 80165a4:	e7fe      	b.n	80165a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80165a6:	4b39      	ldr	r3, [pc, #228]	; (801668c <xPortStartScheduler+0x12c>)
 80165a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	781b      	ldrb	r3, [r3, #0]
 80165ae:	b2db      	uxtb	r3, r3
 80165b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80165b2:	697b      	ldr	r3, [r7, #20]
 80165b4:	22ff      	movs	r2, #255	; 0xff
 80165b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	781b      	ldrb	r3, [r3, #0]
 80165bc:	b2db      	uxtb	r3, r3
 80165be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80165c0:	78fb      	ldrb	r3, [r7, #3]
 80165c2:	b2db      	uxtb	r3, r3
 80165c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80165c8:	b2da      	uxtb	r2, r3
 80165ca:	4b31      	ldr	r3, [pc, #196]	; (8016690 <xPortStartScheduler+0x130>)
 80165cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80165ce:	4b31      	ldr	r3, [pc, #196]	; (8016694 <xPortStartScheduler+0x134>)
 80165d0:	2207      	movs	r2, #7
 80165d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165d4:	e009      	b.n	80165ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80165d6:	4b2f      	ldr	r3, [pc, #188]	; (8016694 <xPortStartScheduler+0x134>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	3b01      	subs	r3, #1
 80165dc:	4a2d      	ldr	r2, [pc, #180]	; (8016694 <xPortStartScheduler+0x134>)
 80165de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80165e0:	78fb      	ldrb	r3, [r7, #3]
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	005b      	lsls	r3, r3, #1
 80165e6:	b2db      	uxtb	r3, r3
 80165e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165ea:	78fb      	ldrb	r3, [r7, #3]
 80165ec:	b2db      	uxtb	r3, r3
 80165ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165f2:	2b80      	cmp	r3, #128	; 0x80
 80165f4:	d0ef      	beq.n	80165d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80165f6:	4b27      	ldr	r3, [pc, #156]	; (8016694 <xPortStartScheduler+0x134>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	f1c3 0307 	rsb	r3, r3, #7
 80165fe:	2b04      	cmp	r3, #4
 8016600:	d00a      	beq.n	8016618 <xPortStartScheduler+0xb8>
	__asm volatile
 8016602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016606:	f383 8811 	msr	BASEPRI, r3
 801660a:	f3bf 8f6f 	isb	sy
 801660e:	f3bf 8f4f 	dsb	sy
 8016612:	60bb      	str	r3, [r7, #8]
}
 8016614:	bf00      	nop
 8016616:	e7fe      	b.n	8016616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016618:	4b1e      	ldr	r3, [pc, #120]	; (8016694 <xPortStartScheduler+0x134>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	021b      	lsls	r3, r3, #8
 801661e:	4a1d      	ldr	r2, [pc, #116]	; (8016694 <xPortStartScheduler+0x134>)
 8016620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016622:	4b1c      	ldr	r3, [pc, #112]	; (8016694 <xPortStartScheduler+0x134>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801662a:	4a1a      	ldr	r2, [pc, #104]	; (8016694 <xPortStartScheduler+0x134>)
 801662c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	b2da      	uxtb	r2, r3
 8016632:	697b      	ldr	r3, [r7, #20]
 8016634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016636:	4b18      	ldr	r3, [pc, #96]	; (8016698 <xPortStartScheduler+0x138>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	4a17      	ldr	r2, [pc, #92]	; (8016698 <xPortStartScheduler+0x138>)
 801663c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016642:	4b15      	ldr	r3, [pc, #84]	; (8016698 <xPortStartScheduler+0x138>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	4a14      	ldr	r2, [pc, #80]	; (8016698 <xPortStartScheduler+0x138>)
 8016648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801664c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801664e:	f000 f8dd 	bl	801680c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016652:	4b12      	ldr	r3, [pc, #72]	; (801669c <xPortStartScheduler+0x13c>)
 8016654:	2200      	movs	r2, #0
 8016656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016658:	f000 f8fc 	bl	8016854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801665c:	4b10      	ldr	r3, [pc, #64]	; (80166a0 <xPortStartScheduler+0x140>)
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	4a0f      	ldr	r2, [pc, #60]	; (80166a0 <xPortStartScheduler+0x140>)
 8016662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016668:	f7ff ff66 	bl	8016538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801666c:	f7fe ff7a 	bl	8015564 <vTaskSwitchContext>
	prvTaskExitError();
 8016670:	f7ff ff1c 	bl	80164ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016674:	2300      	movs	r3, #0
}
 8016676:	4618      	mov	r0, r3
 8016678:	3718      	adds	r7, #24
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}
 801667e:	bf00      	nop
 8016680:	e000ed00 	.word	0xe000ed00
 8016684:	410fc271 	.word	0x410fc271
 8016688:	410fc270 	.word	0x410fc270
 801668c:	e000e400 	.word	0xe000e400
 8016690:	240019b8 	.word	0x240019b8
 8016694:	240019bc 	.word	0x240019bc
 8016698:	e000ed20 	.word	0xe000ed20
 801669c:	24000098 	.word	0x24000098
 80166a0:	e000ef34 	.word	0xe000ef34

080166a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
	__asm volatile
 80166aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ae:	f383 8811 	msr	BASEPRI, r3
 80166b2:	f3bf 8f6f 	isb	sy
 80166b6:	f3bf 8f4f 	dsb	sy
 80166ba:	607b      	str	r3, [r7, #4]
}
 80166bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80166be:	4b0f      	ldr	r3, [pc, #60]	; (80166fc <vPortEnterCritical+0x58>)
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	3301      	adds	r3, #1
 80166c4:	4a0d      	ldr	r2, [pc, #52]	; (80166fc <vPortEnterCritical+0x58>)
 80166c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80166c8:	4b0c      	ldr	r3, [pc, #48]	; (80166fc <vPortEnterCritical+0x58>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	2b01      	cmp	r3, #1
 80166ce:	d10f      	bne.n	80166f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80166d0:	4b0b      	ldr	r3, [pc, #44]	; (8016700 <vPortEnterCritical+0x5c>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d00a      	beq.n	80166f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80166da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166de:	f383 8811 	msr	BASEPRI, r3
 80166e2:	f3bf 8f6f 	isb	sy
 80166e6:	f3bf 8f4f 	dsb	sy
 80166ea:	603b      	str	r3, [r7, #0]
}
 80166ec:	bf00      	nop
 80166ee:	e7fe      	b.n	80166ee <vPortEnterCritical+0x4a>
	}
}
 80166f0:	bf00      	nop
 80166f2:	370c      	adds	r7, #12
 80166f4:	46bd      	mov	sp, r7
 80166f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fa:	4770      	bx	lr
 80166fc:	24000098 	.word	0x24000098
 8016700:	e000ed04 	.word	0xe000ed04

08016704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016704:	b480      	push	{r7}
 8016706:	b083      	sub	sp, #12
 8016708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801670a:	4b12      	ldr	r3, [pc, #72]	; (8016754 <vPortExitCritical+0x50>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d10a      	bne.n	8016728 <vPortExitCritical+0x24>
	__asm volatile
 8016712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016716:	f383 8811 	msr	BASEPRI, r3
 801671a:	f3bf 8f6f 	isb	sy
 801671e:	f3bf 8f4f 	dsb	sy
 8016722:	607b      	str	r3, [r7, #4]
}
 8016724:	bf00      	nop
 8016726:	e7fe      	b.n	8016726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016728:	4b0a      	ldr	r3, [pc, #40]	; (8016754 <vPortExitCritical+0x50>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	3b01      	subs	r3, #1
 801672e:	4a09      	ldr	r2, [pc, #36]	; (8016754 <vPortExitCritical+0x50>)
 8016730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016732:	4b08      	ldr	r3, [pc, #32]	; (8016754 <vPortExitCritical+0x50>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d105      	bne.n	8016746 <vPortExitCritical+0x42>
 801673a:	2300      	movs	r3, #0
 801673c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	f383 8811 	msr	BASEPRI, r3
}
 8016744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016746:	bf00      	nop
 8016748:	370c      	adds	r7, #12
 801674a:	46bd      	mov	sp, r7
 801674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016750:	4770      	bx	lr
 8016752:	bf00      	nop
 8016754:	24000098 	.word	0x24000098
	...

08016760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016760:	f3ef 8009 	mrs	r0, PSP
 8016764:	f3bf 8f6f 	isb	sy
 8016768:	4b15      	ldr	r3, [pc, #84]	; (80167c0 <pxCurrentTCBConst>)
 801676a:	681a      	ldr	r2, [r3, #0]
 801676c:	f01e 0f10 	tst.w	lr, #16
 8016770:	bf08      	it	eq
 8016772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801677a:	6010      	str	r0, [r2, #0]
 801677c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016784:	f380 8811 	msr	BASEPRI, r0
 8016788:	f3bf 8f4f 	dsb	sy
 801678c:	f3bf 8f6f 	isb	sy
 8016790:	f7fe fee8 	bl	8015564 <vTaskSwitchContext>
 8016794:	f04f 0000 	mov.w	r0, #0
 8016798:	f380 8811 	msr	BASEPRI, r0
 801679c:	bc09      	pop	{r0, r3}
 801679e:	6819      	ldr	r1, [r3, #0]
 80167a0:	6808      	ldr	r0, [r1, #0]
 80167a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a6:	f01e 0f10 	tst.w	lr, #16
 80167aa:	bf08      	it	eq
 80167ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80167b0:	f380 8809 	msr	PSP, r0
 80167b4:	f3bf 8f6f 	isb	sy
 80167b8:	4770      	bx	lr
 80167ba:	bf00      	nop
 80167bc:	f3af 8000 	nop.w

080167c0 <pxCurrentTCBConst>:
 80167c0:	2400138c 	.word	0x2400138c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80167c4:	bf00      	nop
 80167c6:	bf00      	nop

080167c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af00      	add	r7, sp, #0
	__asm volatile
 80167ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167d2:	f383 8811 	msr	BASEPRI, r3
 80167d6:	f3bf 8f6f 	isb	sy
 80167da:	f3bf 8f4f 	dsb	sy
 80167de:	607b      	str	r3, [r7, #4]
}
 80167e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80167e2:	f7fe fdfd 	bl	80153e0 <xTaskIncrementTick>
 80167e6:	4603      	mov	r3, r0
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d003      	beq.n	80167f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80167ec:	4b06      	ldr	r3, [pc, #24]	; (8016808 <xPortSysTickHandler+0x40>)
 80167ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167f2:	601a      	str	r2, [r3, #0]
 80167f4:	2300      	movs	r3, #0
 80167f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	f383 8811 	msr	BASEPRI, r3
}
 80167fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016800:	bf00      	nop
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}
 8016808:	e000ed04 	.word	0xe000ed04

0801680c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801680c:	b480      	push	{r7}
 801680e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016810:	4b0b      	ldr	r3, [pc, #44]	; (8016840 <vPortSetupTimerInterrupt+0x34>)
 8016812:	2200      	movs	r2, #0
 8016814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016816:	4b0b      	ldr	r3, [pc, #44]	; (8016844 <vPortSetupTimerInterrupt+0x38>)
 8016818:	2200      	movs	r2, #0
 801681a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801681c:	4b0a      	ldr	r3, [pc, #40]	; (8016848 <vPortSetupTimerInterrupt+0x3c>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	4a0a      	ldr	r2, [pc, #40]	; (801684c <vPortSetupTimerInterrupt+0x40>)
 8016822:	fba2 2303 	umull	r2, r3, r2, r3
 8016826:	099b      	lsrs	r3, r3, #6
 8016828:	4a09      	ldr	r2, [pc, #36]	; (8016850 <vPortSetupTimerInterrupt+0x44>)
 801682a:	3b01      	subs	r3, #1
 801682c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801682e:	4b04      	ldr	r3, [pc, #16]	; (8016840 <vPortSetupTimerInterrupt+0x34>)
 8016830:	2207      	movs	r2, #7
 8016832:	601a      	str	r2, [r3, #0]
}
 8016834:	bf00      	nop
 8016836:	46bd      	mov	sp, r7
 8016838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683c:	4770      	bx	lr
 801683e:	bf00      	nop
 8016840:	e000e010 	.word	0xe000e010
 8016844:	e000e018 	.word	0xe000e018
 8016848:	24000088 	.word	0x24000088
 801684c:	10624dd3 	.word	0x10624dd3
 8016850:	e000e014 	.word	0xe000e014

08016854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016864 <vPortEnableVFP+0x10>
 8016858:	6801      	ldr	r1, [r0, #0]
 801685a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801685e:	6001      	str	r1, [r0, #0]
 8016860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016862:	bf00      	nop
 8016864:	e000ed88 	.word	0xe000ed88

08016868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016868:	b480      	push	{r7}
 801686a:	b085      	sub	sp, #20
 801686c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801686e:	f3ef 8305 	mrs	r3, IPSR
 8016872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	2b0f      	cmp	r3, #15
 8016878:	d914      	bls.n	80168a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801687a:	4a17      	ldr	r2, [pc, #92]	; (80168d8 <vPortValidateInterruptPriority+0x70>)
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	4413      	add	r3, r2
 8016880:	781b      	ldrb	r3, [r3, #0]
 8016882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016884:	4b15      	ldr	r3, [pc, #84]	; (80168dc <vPortValidateInterruptPriority+0x74>)
 8016886:	781b      	ldrb	r3, [r3, #0]
 8016888:	7afa      	ldrb	r2, [r7, #11]
 801688a:	429a      	cmp	r2, r3
 801688c:	d20a      	bcs.n	80168a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016892:	f383 8811 	msr	BASEPRI, r3
 8016896:	f3bf 8f6f 	isb	sy
 801689a:	f3bf 8f4f 	dsb	sy
 801689e:	607b      	str	r3, [r7, #4]
}
 80168a0:	bf00      	nop
 80168a2:	e7fe      	b.n	80168a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80168a4:	4b0e      	ldr	r3, [pc, #56]	; (80168e0 <vPortValidateInterruptPriority+0x78>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80168ac:	4b0d      	ldr	r3, [pc, #52]	; (80168e4 <vPortValidateInterruptPriority+0x7c>)
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d90a      	bls.n	80168ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80168b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168b8:	f383 8811 	msr	BASEPRI, r3
 80168bc:	f3bf 8f6f 	isb	sy
 80168c0:	f3bf 8f4f 	dsb	sy
 80168c4:	603b      	str	r3, [r7, #0]
}
 80168c6:	bf00      	nop
 80168c8:	e7fe      	b.n	80168c8 <vPortValidateInterruptPriority+0x60>
	}
 80168ca:	bf00      	nop
 80168cc:	3714      	adds	r7, #20
 80168ce:	46bd      	mov	sp, r7
 80168d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop
 80168d8:	e000e3f0 	.word	0xe000e3f0
 80168dc:	240019b8 	.word	0x240019b8
 80168e0:	e000ed0c 	.word	0xe000ed0c
 80168e4:	240019bc 	.word	0x240019bc

080168e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b08a      	sub	sp, #40	; 0x28
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80168f0:	2300      	movs	r3, #0
 80168f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80168f4:	f7fe fcb8 	bl	8015268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80168f8:	4b5b      	ldr	r3, [pc, #364]	; (8016a68 <pvPortMalloc+0x180>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d101      	bne.n	8016904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016900:	f000 f920 	bl	8016b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016904:	4b59      	ldr	r3, [pc, #356]	; (8016a6c <pvPortMalloc+0x184>)
 8016906:	681a      	ldr	r2, [r3, #0]
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	4013      	ands	r3, r2
 801690c:	2b00      	cmp	r3, #0
 801690e:	f040 8093 	bne.w	8016a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d01d      	beq.n	8016954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016918:	2208      	movs	r2, #8
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	4413      	add	r3, r2
 801691e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f003 0307 	and.w	r3, r3, #7
 8016926:	2b00      	cmp	r3, #0
 8016928:	d014      	beq.n	8016954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f023 0307 	bic.w	r3, r3, #7
 8016930:	3308      	adds	r3, #8
 8016932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f003 0307 	and.w	r3, r3, #7
 801693a:	2b00      	cmp	r3, #0
 801693c:	d00a      	beq.n	8016954 <pvPortMalloc+0x6c>
	__asm volatile
 801693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016942:	f383 8811 	msr	BASEPRI, r3
 8016946:	f3bf 8f6f 	isb	sy
 801694a:	f3bf 8f4f 	dsb	sy
 801694e:	617b      	str	r3, [r7, #20]
}
 8016950:	bf00      	nop
 8016952:	e7fe      	b.n	8016952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d06e      	beq.n	8016a38 <pvPortMalloc+0x150>
 801695a:	4b45      	ldr	r3, [pc, #276]	; (8016a70 <pvPortMalloc+0x188>)
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	687a      	ldr	r2, [r7, #4]
 8016960:	429a      	cmp	r2, r3
 8016962:	d869      	bhi.n	8016a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016964:	4b43      	ldr	r3, [pc, #268]	; (8016a74 <pvPortMalloc+0x18c>)
 8016966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016968:	4b42      	ldr	r3, [pc, #264]	; (8016a74 <pvPortMalloc+0x18c>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801696e:	e004      	b.n	801697a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	687a      	ldr	r2, [r7, #4]
 8016980:	429a      	cmp	r2, r3
 8016982:	d903      	bls.n	801698c <pvPortMalloc+0xa4>
 8016984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d1f1      	bne.n	8016970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801698c:	4b36      	ldr	r3, [pc, #216]	; (8016a68 <pvPortMalloc+0x180>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016992:	429a      	cmp	r2, r3
 8016994:	d050      	beq.n	8016a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016996:	6a3b      	ldr	r3, [r7, #32]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	2208      	movs	r2, #8
 801699c:	4413      	add	r3, r2
 801699e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80169a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a2:	681a      	ldr	r2, [r3, #0]
 80169a4:	6a3b      	ldr	r3, [r7, #32]
 80169a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80169a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169aa:	685a      	ldr	r2, [r3, #4]
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	1ad2      	subs	r2, r2, r3
 80169b0:	2308      	movs	r3, #8
 80169b2:	005b      	lsls	r3, r3, #1
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d91f      	bls.n	80169f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80169b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	4413      	add	r3, r2
 80169be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80169c0:	69bb      	ldr	r3, [r7, #24]
 80169c2:	f003 0307 	and.w	r3, r3, #7
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d00a      	beq.n	80169e0 <pvPortMalloc+0xf8>
	__asm volatile
 80169ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ce:	f383 8811 	msr	BASEPRI, r3
 80169d2:	f3bf 8f6f 	isb	sy
 80169d6:	f3bf 8f4f 	dsb	sy
 80169da:	613b      	str	r3, [r7, #16]
}
 80169dc:	bf00      	nop
 80169de:	e7fe      	b.n	80169de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80169e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e2:	685a      	ldr	r2, [r3, #4]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	1ad2      	subs	r2, r2, r3
 80169e8:	69bb      	ldr	r3, [r7, #24]
 80169ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	687a      	ldr	r2, [r7, #4]
 80169f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80169f2:	69b8      	ldr	r0, [r7, #24]
 80169f4:	f000 f908 	bl	8016c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80169f8:	4b1d      	ldr	r3, [pc, #116]	; (8016a70 <pvPortMalloc+0x188>)
 80169fa:	681a      	ldr	r2, [r3, #0]
 80169fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169fe:	685b      	ldr	r3, [r3, #4]
 8016a00:	1ad3      	subs	r3, r2, r3
 8016a02:	4a1b      	ldr	r2, [pc, #108]	; (8016a70 <pvPortMalloc+0x188>)
 8016a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016a06:	4b1a      	ldr	r3, [pc, #104]	; (8016a70 <pvPortMalloc+0x188>)
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	4b1b      	ldr	r3, [pc, #108]	; (8016a78 <pvPortMalloc+0x190>)
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	429a      	cmp	r2, r3
 8016a10:	d203      	bcs.n	8016a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016a12:	4b17      	ldr	r3, [pc, #92]	; (8016a70 <pvPortMalloc+0x188>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	4a18      	ldr	r2, [pc, #96]	; (8016a78 <pvPortMalloc+0x190>)
 8016a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1c:	685a      	ldr	r2, [r3, #4]
 8016a1e:	4b13      	ldr	r3, [pc, #76]	; (8016a6c <pvPortMalloc+0x184>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	431a      	orrs	r2, r3
 8016a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016a2e:	4b13      	ldr	r3, [pc, #76]	; (8016a7c <pvPortMalloc+0x194>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	3301      	adds	r3, #1
 8016a34:	4a11      	ldr	r2, [pc, #68]	; (8016a7c <pvPortMalloc+0x194>)
 8016a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016a38:	f7fe fc24 	bl	8015284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a3c:	69fb      	ldr	r3, [r7, #28]
 8016a3e:	f003 0307 	and.w	r3, r3, #7
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d00a      	beq.n	8016a5c <pvPortMalloc+0x174>
	__asm volatile
 8016a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a4a:	f383 8811 	msr	BASEPRI, r3
 8016a4e:	f3bf 8f6f 	isb	sy
 8016a52:	f3bf 8f4f 	dsb	sy
 8016a56:	60fb      	str	r3, [r7, #12]
}
 8016a58:	bf00      	nop
 8016a5a:	e7fe      	b.n	8016a5a <pvPortMalloc+0x172>
	return pvReturn;
 8016a5c:	69fb      	ldr	r3, [r7, #28]
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3728      	adds	r7, #40	; 0x28
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	240055c8 	.word	0x240055c8
 8016a6c:	240055dc 	.word	0x240055dc
 8016a70:	240055cc 	.word	0x240055cc
 8016a74:	240055c0 	.word	0x240055c0
 8016a78:	240055d0 	.word	0x240055d0
 8016a7c:	240055d4 	.word	0x240055d4

08016a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b086      	sub	sp, #24
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d04d      	beq.n	8016b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016a92:	2308      	movs	r3, #8
 8016a94:	425b      	negs	r3, r3
 8016a96:	697a      	ldr	r2, [r7, #20]
 8016a98:	4413      	add	r3, r2
 8016a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	685a      	ldr	r2, [r3, #4]
 8016aa4:	4b24      	ldr	r3, [pc, #144]	; (8016b38 <vPortFree+0xb8>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	4013      	ands	r3, r2
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d10a      	bne.n	8016ac4 <vPortFree+0x44>
	__asm volatile
 8016aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab2:	f383 8811 	msr	BASEPRI, r3
 8016ab6:	f3bf 8f6f 	isb	sy
 8016aba:	f3bf 8f4f 	dsb	sy
 8016abe:	60fb      	str	r3, [r7, #12]
}
 8016ac0:	bf00      	nop
 8016ac2:	e7fe      	b.n	8016ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d00a      	beq.n	8016ae2 <vPortFree+0x62>
	__asm volatile
 8016acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad0:	f383 8811 	msr	BASEPRI, r3
 8016ad4:	f3bf 8f6f 	isb	sy
 8016ad8:	f3bf 8f4f 	dsb	sy
 8016adc:	60bb      	str	r3, [r7, #8]
}
 8016ade:	bf00      	nop
 8016ae0:	e7fe      	b.n	8016ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ae2:	693b      	ldr	r3, [r7, #16]
 8016ae4:	685a      	ldr	r2, [r3, #4]
 8016ae6:	4b14      	ldr	r3, [pc, #80]	; (8016b38 <vPortFree+0xb8>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	4013      	ands	r3, r2
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d01e      	beq.n	8016b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d11a      	bne.n	8016b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	685a      	ldr	r2, [r3, #4]
 8016afc:	4b0e      	ldr	r3, [pc, #56]	; (8016b38 <vPortFree+0xb8>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	43db      	mvns	r3, r3
 8016b02:	401a      	ands	r2, r3
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016b08:	f7fe fbae 	bl	8015268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	685a      	ldr	r2, [r3, #4]
 8016b10:	4b0a      	ldr	r3, [pc, #40]	; (8016b3c <vPortFree+0xbc>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	4413      	add	r3, r2
 8016b16:	4a09      	ldr	r2, [pc, #36]	; (8016b3c <vPortFree+0xbc>)
 8016b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016b1a:	6938      	ldr	r0, [r7, #16]
 8016b1c:	f000 f874 	bl	8016c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016b20:	4b07      	ldr	r3, [pc, #28]	; (8016b40 <vPortFree+0xc0>)
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	3301      	adds	r3, #1
 8016b26:	4a06      	ldr	r2, [pc, #24]	; (8016b40 <vPortFree+0xc0>)
 8016b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016b2a:	f7fe fbab 	bl	8015284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016b2e:	bf00      	nop
 8016b30:	3718      	adds	r7, #24
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}
 8016b36:	bf00      	nop
 8016b38:	240055dc 	.word	0x240055dc
 8016b3c:	240055cc 	.word	0x240055cc
 8016b40:	240055d8 	.word	0x240055d8

08016b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016b44:	b480      	push	{r7}
 8016b46:	b085      	sub	sp, #20
 8016b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016b4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016b50:	4b27      	ldr	r3, [pc, #156]	; (8016bf0 <prvHeapInit+0xac>)
 8016b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	f003 0307 	and.w	r3, r3, #7
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00c      	beq.n	8016b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	3307      	adds	r3, #7
 8016b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	f023 0307 	bic.w	r3, r3, #7
 8016b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016b6c:	68ba      	ldr	r2, [r7, #8]
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	1ad3      	subs	r3, r2, r3
 8016b72:	4a1f      	ldr	r2, [pc, #124]	; (8016bf0 <prvHeapInit+0xac>)
 8016b74:	4413      	add	r3, r2
 8016b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016b7c:	4a1d      	ldr	r2, [pc, #116]	; (8016bf4 <prvHeapInit+0xb0>)
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016b82:	4b1c      	ldr	r3, [pc, #112]	; (8016bf4 <prvHeapInit+0xb0>)
 8016b84:	2200      	movs	r2, #0
 8016b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	68ba      	ldr	r2, [r7, #8]
 8016b8c:	4413      	add	r3, r2
 8016b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016b90:	2208      	movs	r2, #8
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	1a9b      	subs	r3, r3, r2
 8016b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	f023 0307 	bic.w	r3, r3, #7
 8016b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	4a15      	ldr	r2, [pc, #84]	; (8016bf8 <prvHeapInit+0xb4>)
 8016ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016ba6:	4b14      	ldr	r3, [pc, #80]	; (8016bf8 <prvHeapInit+0xb4>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	2200      	movs	r2, #0
 8016bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016bae:	4b12      	ldr	r3, [pc, #72]	; (8016bf8 <prvHeapInit+0xb4>)
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	68fa      	ldr	r2, [r7, #12]
 8016bbe:	1ad2      	subs	r2, r2, r3
 8016bc0:	683b      	ldr	r3, [r7, #0]
 8016bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016bc4:	4b0c      	ldr	r3, [pc, #48]	; (8016bf8 <prvHeapInit+0xb4>)
 8016bc6:	681a      	ldr	r2, [r3, #0]
 8016bc8:	683b      	ldr	r3, [r7, #0]
 8016bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016bcc:	683b      	ldr	r3, [r7, #0]
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	4a0a      	ldr	r2, [pc, #40]	; (8016bfc <prvHeapInit+0xb8>)
 8016bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	685b      	ldr	r3, [r3, #4]
 8016bd8:	4a09      	ldr	r2, [pc, #36]	; (8016c00 <prvHeapInit+0xbc>)
 8016bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016bdc:	4b09      	ldr	r3, [pc, #36]	; (8016c04 <prvHeapInit+0xc0>)
 8016bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016be2:	601a      	str	r2, [r3, #0]
}
 8016be4:	bf00      	nop
 8016be6:	3714      	adds	r7, #20
 8016be8:	46bd      	mov	sp, r7
 8016bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bee:	4770      	bx	lr
 8016bf0:	240019c0 	.word	0x240019c0
 8016bf4:	240055c0 	.word	0x240055c0
 8016bf8:	240055c8 	.word	0x240055c8
 8016bfc:	240055d0 	.word	0x240055d0
 8016c00:	240055cc 	.word	0x240055cc
 8016c04:	240055dc 	.word	0x240055dc

08016c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016c08:	b480      	push	{r7}
 8016c0a:	b085      	sub	sp, #20
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016c10:	4b28      	ldr	r3, [pc, #160]	; (8016cb4 <prvInsertBlockIntoFreeList+0xac>)
 8016c12:	60fb      	str	r3, [r7, #12]
 8016c14:	e002      	b.n	8016c1c <prvInsertBlockIntoFreeList+0x14>
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	60fb      	str	r3, [r7, #12]
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	687a      	ldr	r2, [r7, #4]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d8f7      	bhi.n	8016c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	685b      	ldr	r3, [r3, #4]
 8016c2e:	68ba      	ldr	r2, [r7, #8]
 8016c30:	4413      	add	r3, r2
 8016c32:	687a      	ldr	r2, [r7, #4]
 8016c34:	429a      	cmp	r2, r3
 8016c36:	d108      	bne.n	8016c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	685a      	ldr	r2, [r3, #4]
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	685b      	ldr	r3, [r3, #4]
 8016c40:	441a      	add	r2, r3
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	685b      	ldr	r3, [r3, #4]
 8016c52:	68ba      	ldr	r2, [r7, #8]
 8016c54:	441a      	add	r2, r3
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d118      	bne.n	8016c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	681a      	ldr	r2, [r3, #0]
 8016c62:	4b15      	ldr	r3, [pc, #84]	; (8016cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d00d      	beq.n	8016c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	685a      	ldr	r2, [r3, #4]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	685b      	ldr	r3, [r3, #4]
 8016c74:	441a      	add	r2, r3
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	601a      	str	r2, [r3, #0]
 8016c84:	e008      	b.n	8016c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016c86:	4b0c      	ldr	r3, [pc, #48]	; (8016cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8016c88:	681a      	ldr	r2, [r3, #0]
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	601a      	str	r2, [r3, #0]
 8016c8e:	e003      	b.n	8016c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	681a      	ldr	r2, [r3, #0]
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016c98:	68fa      	ldr	r2, [r7, #12]
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d002      	beq.n	8016ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	687a      	ldr	r2, [r7, #4]
 8016ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016ca6:	bf00      	nop
 8016ca8:	3714      	adds	r7, #20
 8016caa:	46bd      	mov	sp, r7
 8016cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb0:	4770      	bx	lr
 8016cb2:	bf00      	nop
 8016cb4:	240055c0 	.word	0x240055c0
 8016cb8:	240055c8 	.word	0x240055c8

08016cbc <__errno>:
 8016cbc:	4b01      	ldr	r3, [pc, #4]	; (8016cc4 <__errno+0x8>)
 8016cbe:	6818      	ldr	r0, [r3, #0]
 8016cc0:	4770      	bx	lr
 8016cc2:	bf00      	nop
 8016cc4:	2400009c 	.word	0x2400009c

08016cc8 <__libc_init_array>:
 8016cc8:	b570      	push	{r4, r5, r6, lr}
 8016cca:	4d0d      	ldr	r5, [pc, #52]	; (8016d00 <__libc_init_array+0x38>)
 8016ccc:	4c0d      	ldr	r4, [pc, #52]	; (8016d04 <__libc_init_array+0x3c>)
 8016cce:	1b64      	subs	r4, r4, r5
 8016cd0:	10a4      	asrs	r4, r4, #2
 8016cd2:	2600      	movs	r6, #0
 8016cd4:	42a6      	cmp	r6, r4
 8016cd6:	d109      	bne.n	8016cec <__libc_init_array+0x24>
 8016cd8:	4d0b      	ldr	r5, [pc, #44]	; (8016d08 <__libc_init_array+0x40>)
 8016cda:	4c0c      	ldr	r4, [pc, #48]	; (8016d0c <__libc_init_array+0x44>)
 8016cdc:	f000 fd3c 	bl	8017758 <_init>
 8016ce0:	1b64      	subs	r4, r4, r5
 8016ce2:	10a4      	asrs	r4, r4, #2
 8016ce4:	2600      	movs	r6, #0
 8016ce6:	42a6      	cmp	r6, r4
 8016ce8:	d105      	bne.n	8016cf6 <__libc_init_array+0x2e>
 8016cea:	bd70      	pop	{r4, r5, r6, pc}
 8016cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cf0:	4798      	blx	r3
 8016cf2:	3601      	adds	r6, #1
 8016cf4:	e7ee      	b.n	8016cd4 <__libc_init_array+0xc>
 8016cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cfa:	4798      	blx	r3
 8016cfc:	3601      	adds	r6, #1
 8016cfe:	e7f2      	b.n	8016ce6 <__libc_init_array+0x1e>
 8016d00:	08017c44 	.word	0x08017c44
 8016d04:	08017c44 	.word	0x08017c44
 8016d08:	08017c44 	.word	0x08017c44
 8016d0c:	08017c48 	.word	0x08017c48

08016d10 <malloc>:
 8016d10:	4b02      	ldr	r3, [pc, #8]	; (8016d1c <malloc+0xc>)
 8016d12:	4601      	mov	r1, r0
 8016d14:	6818      	ldr	r0, [r3, #0]
 8016d16:	f000 b88d 	b.w	8016e34 <_malloc_r>
 8016d1a:	bf00      	nop
 8016d1c:	2400009c 	.word	0x2400009c

08016d20 <free>:
 8016d20:	4b02      	ldr	r3, [pc, #8]	; (8016d2c <free+0xc>)
 8016d22:	4601      	mov	r1, r0
 8016d24:	6818      	ldr	r0, [r3, #0]
 8016d26:	f000 b819 	b.w	8016d5c <_free_r>
 8016d2a:	bf00      	nop
 8016d2c:	2400009c 	.word	0x2400009c

08016d30 <memcpy>:
 8016d30:	440a      	add	r2, r1
 8016d32:	4291      	cmp	r1, r2
 8016d34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016d38:	d100      	bne.n	8016d3c <memcpy+0xc>
 8016d3a:	4770      	bx	lr
 8016d3c:	b510      	push	{r4, lr}
 8016d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d46:	4291      	cmp	r1, r2
 8016d48:	d1f9      	bne.n	8016d3e <memcpy+0xe>
 8016d4a:	bd10      	pop	{r4, pc}

08016d4c <memset>:
 8016d4c:	4402      	add	r2, r0
 8016d4e:	4603      	mov	r3, r0
 8016d50:	4293      	cmp	r3, r2
 8016d52:	d100      	bne.n	8016d56 <memset+0xa>
 8016d54:	4770      	bx	lr
 8016d56:	f803 1b01 	strb.w	r1, [r3], #1
 8016d5a:	e7f9      	b.n	8016d50 <memset+0x4>

08016d5c <_free_r>:
 8016d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d5e:	2900      	cmp	r1, #0
 8016d60:	d044      	beq.n	8016dec <_free_r+0x90>
 8016d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d66:	9001      	str	r0, [sp, #4]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8016d6e:	bfb8      	it	lt
 8016d70:	18e4      	addlt	r4, r4, r3
 8016d72:	f000 fc39 	bl	80175e8 <__malloc_lock>
 8016d76:	4a1e      	ldr	r2, [pc, #120]	; (8016df0 <_free_r+0x94>)
 8016d78:	9801      	ldr	r0, [sp, #4]
 8016d7a:	6813      	ldr	r3, [r2, #0]
 8016d7c:	b933      	cbnz	r3, 8016d8c <_free_r+0x30>
 8016d7e:	6063      	str	r3, [r4, #4]
 8016d80:	6014      	str	r4, [r2, #0]
 8016d82:	b003      	add	sp, #12
 8016d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d88:	f000 bc34 	b.w	80175f4 <__malloc_unlock>
 8016d8c:	42a3      	cmp	r3, r4
 8016d8e:	d908      	bls.n	8016da2 <_free_r+0x46>
 8016d90:	6825      	ldr	r5, [r4, #0]
 8016d92:	1961      	adds	r1, r4, r5
 8016d94:	428b      	cmp	r3, r1
 8016d96:	bf01      	itttt	eq
 8016d98:	6819      	ldreq	r1, [r3, #0]
 8016d9a:	685b      	ldreq	r3, [r3, #4]
 8016d9c:	1949      	addeq	r1, r1, r5
 8016d9e:	6021      	streq	r1, [r4, #0]
 8016da0:	e7ed      	b.n	8016d7e <_free_r+0x22>
 8016da2:	461a      	mov	r2, r3
 8016da4:	685b      	ldr	r3, [r3, #4]
 8016da6:	b10b      	cbz	r3, 8016dac <_free_r+0x50>
 8016da8:	42a3      	cmp	r3, r4
 8016daa:	d9fa      	bls.n	8016da2 <_free_r+0x46>
 8016dac:	6811      	ldr	r1, [r2, #0]
 8016dae:	1855      	adds	r5, r2, r1
 8016db0:	42a5      	cmp	r5, r4
 8016db2:	d10b      	bne.n	8016dcc <_free_r+0x70>
 8016db4:	6824      	ldr	r4, [r4, #0]
 8016db6:	4421      	add	r1, r4
 8016db8:	1854      	adds	r4, r2, r1
 8016dba:	42a3      	cmp	r3, r4
 8016dbc:	6011      	str	r1, [r2, #0]
 8016dbe:	d1e0      	bne.n	8016d82 <_free_r+0x26>
 8016dc0:	681c      	ldr	r4, [r3, #0]
 8016dc2:	685b      	ldr	r3, [r3, #4]
 8016dc4:	6053      	str	r3, [r2, #4]
 8016dc6:	4421      	add	r1, r4
 8016dc8:	6011      	str	r1, [r2, #0]
 8016dca:	e7da      	b.n	8016d82 <_free_r+0x26>
 8016dcc:	d902      	bls.n	8016dd4 <_free_r+0x78>
 8016dce:	230c      	movs	r3, #12
 8016dd0:	6003      	str	r3, [r0, #0]
 8016dd2:	e7d6      	b.n	8016d82 <_free_r+0x26>
 8016dd4:	6825      	ldr	r5, [r4, #0]
 8016dd6:	1961      	adds	r1, r4, r5
 8016dd8:	428b      	cmp	r3, r1
 8016dda:	bf04      	itt	eq
 8016ddc:	6819      	ldreq	r1, [r3, #0]
 8016dde:	685b      	ldreq	r3, [r3, #4]
 8016de0:	6063      	str	r3, [r4, #4]
 8016de2:	bf04      	itt	eq
 8016de4:	1949      	addeq	r1, r1, r5
 8016de6:	6021      	streq	r1, [r4, #0]
 8016de8:	6054      	str	r4, [r2, #4]
 8016dea:	e7ca      	b.n	8016d82 <_free_r+0x26>
 8016dec:	b003      	add	sp, #12
 8016dee:	bd30      	pop	{r4, r5, pc}
 8016df0:	240055e0 	.word	0x240055e0

08016df4 <sbrk_aligned>:
 8016df4:	b570      	push	{r4, r5, r6, lr}
 8016df6:	4e0e      	ldr	r6, [pc, #56]	; (8016e30 <sbrk_aligned+0x3c>)
 8016df8:	460c      	mov	r4, r1
 8016dfa:	6831      	ldr	r1, [r6, #0]
 8016dfc:	4605      	mov	r5, r0
 8016dfe:	b911      	cbnz	r1, 8016e06 <sbrk_aligned+0x12>
 8016e00:	f000 f902 	bl	8017008 <_sbrk_r>
 8016e04:	6030      	str	r0, [r6, #0]
 8016e06:	4621      	mov	r1, r4
 8016e08:	4628      	mov	r0, r5
 8016e0a:	f000 f8fd 	bl	8017008 <_sbrk_r>
 8016e0e:	1c43      	adds	r3, r0, #1
 8016e10:	d00a      	beq.n	8016e28 <sbrk_aligned+0x34>
 8016e12:	1cc4      	adds	r4, r0, #3
 8016e14:	f024 0403 	bic.w	r4, r4, #3
 8016e18:	42a0      	cmp	r0, r4
 8016e1a:	d007      	beq.n	8016e2c <sbrk_aligned+0x38>
 8016e1c:	1a21      	subs	r1, r4, r0
 8016e1e:	4628      	mov	r0, r5
 8016e20:	f000 f8f2 	bl	8017008 <_sbrk_r>
 8016e24:	3001      	adds	r0, #1
 8016e26:	d101      	bne.n	8016e2c <sbrk_aligned+0x38>
 8016e28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016e2c:	4620      	mov	r0, r4
 8016e2e:	bd70      	pop	{r4, r5, r6, pc}
 8016e30:	240055e4 	.word	0x240055e4

08016e34 <_malloc_r>:
 8016e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e38:	1ccd      	adds	r5, r1, #3
 8016e3a:	f025 0503 	bic.w	r5, r5, #3
 8016e3e:	3508      	adds	r5, #8
 8016e40:	2d0c      	cmp	r5, #12
 8016e42:	bf38      	it	cc
 8016e44:	250c      	movcc	r5, #12
 8016e46:	2d00      	cmp	r5, #0
 8016e48:	4607      	mov	r7, r0
 8016e4a:	db01      	blt.n	8016e50 <_malloc_r+0x1c>
 8016e4c:	42a9      	cmp	r1, r5
 8016e4e:	d905      	bls.n	8016e5c <_malloc_r+0x28>
 8016e50:	230c      	movs	r3, #12
 8016e52:	603b      	str	r3, [r7, #0]
 8016e54:	2600      	movs	r6, #0
 8016e56:	4630      	mov	r0, r6
 8016e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e5c:	4e2e      	ldr	r6, [pc, #184]	; (8016f18 <_malloc_r+0xe4>)
 8016e5e:	f000 fbc3 	bl	80175e8 <__malloc_lock>
 8016e62:	6833      	ldr	r3, [r6, #0]
 8016e64:	461c      	mov	r4, r3
 8016e66:	bb34      	cbnz	r4, 8016eb6 <_malloc_r+0x82>
 8016e68:	4629      	mov	r1, r5
 8016e6a:	4638      	mov	r0, r7
 8016e6c:	f7ff ffc2 	bl	8016df4 <sbrk_aligned>
 8016e70:	1c43      	adds	r3, r0, #1
 8016e72:	4604      	mov	r4, r0
 8016e74:	d14d      	bne.n	8016f12 <_malloc_r+0xde>
 8016e76:	6834      	ldr	r4, [r6, #0]
 8016e78:	4626      	mov	r6, r4
 8016e7a:	2e00      	cmp	r6, #0
 8016e7c:	d140      	bne.n	8016f00 <_malloc_r+0xcc>
 8016e7e:	6823      	ldr	r3, [r4, #0]
 8016e80:	4631      	mov	r1, r6
 8016e82:	4638      	mov	r0, r7
 8016e84:	eb04 0803 	add.w	r8, r4, r3
 8016e88:	f000 f8be 	bl	8017008 <_sbrk_r>
 8016e8c:	4580      	cmp	r8, r0
 8016e8e:	d13a      	bne.n	8016f06 <_malloc_r+0xd2>
 8016e90:	6821      	ldr	r1, [r4, #0]
 8016e92:	3503      	adds	r5, #3
 8016e94:	1a6d      	subs	r5, r5, r1
 8016e96:	f025 0503 	bic.w	r5, r5, #3
 8016e9a:	3508      	adds	r5, #8
 8016e9c:	2d0c      	cmp	r5, #12
 8016e9e:	bf38      	it	cc
 8016ea0:	250c      	movcc	r5, #12
 8016ea2:	4629      	mov	r1, r5
 8016ea4:	4638      	mov	r0, r7
 8016ea6:	f7ff ffa5 	bl	8016df4 <sbrk_aligned>
 8016eaa:	3001      	adds	r0, #1
 8016eac:	d02b      	beq.n	8016f06 <_malloc_r+0xd2>
 8016eae:	6823      	ldr	r3, [r4, #0]
 8016eb0:	442b      	add	r3, r5
 8016eb2:	6023      	str	r3, [r4, #0]
 8016eb4:	e00e      	b.n	8016ed4 <_malloc_r+0xa0>
 8016eb6:	6822      	ldr	r2, [r4, #0]
 8016eb8:	1b52      	subs	r2, r2, r5
 8016eba:	d41e      	bmi.n	8016efa <_malloc_r+0xc6>
 8016ebc:	2a0b      	cmp	r2, #11
 8016ebe:	d916      	bls.n	8016eee <_malloc_r+0xba>
 8016ec0:	1961      	adds	r1, r4, r5
 8016ec2:	42a3      	cmp	r3, r4
 8016ec4:	6025      	str	r5, [r4, #0]
 8016ec6:	bf18      	it	ne
 8016ec8:	6059      	strne	r1, [r3, #4]
 8016eca:	6863      	ldr	r3, [r4, #4]
 8016ecc:	bf08      	it	eq
 8016ece:	6031      	streq	r1, [r6, #0]
 8016ed0:	5162      	str	r2, [r4, r5]
 8016ed2:	604b      	str	r3, [r1, #4]
 8016ed4:	4638      	mov	r0, r7
 8016ed6:	f104 060b 	add.w	r6, r4, #11
 8016eda:	f000 fb8b 	bl	80175f4 <__malloc_unlock>
 8016ede:	f026 0607 	bic.w	r6, r6, #7
 8016ee2:	1d23      	adds	r3, r4, #4
 8016ee4:	1af2      	subs	r2, r6, r3
 8016ee6:	d0b6      	beq.n	8016e56 <_malloc_r+0x22>
 8016ee8:	1b9b      	subs	r3, r3, r6
 8016eea:	50a3      	str	r3, [r4, r2]
 8016eec:	e7b3      	b.n	8016e56 <_malloc_r+0x22>
 8016eee:	6862      	ldr	r2, [r4, #4]
 8016ef0:	42a3      	cmp	r3, r4
 8016ef2:	bf0c      	ite	eq
 8016ef4:	6032      	streq	r2, [r6, #0]
 8016ef6:	605a      	strne	r2, [r3, #4]
 8016ef8:	e7ec      	b.n	8016ed4 <_malloc_r+0xa0>
 8016efa:	4623      	mov	r3, r4
 8016efc:	6864      	ldr	r4, [r4, #4]
 8016efe:	e7b2      	b.n	8016e66 <_malloc_r+0x32>
 8016f00:	4634      	mov	r4, r6
 8016f02:	6876      	ldr	r6, [r6, #4]
 8016f04:	e7b9      	b.n	8016e7a <_malloc_r+0x46>
 8016f06:	230c      	movs	r3, #12
 8016f08:	603b      	str	r3, [r7, #0]
 8016f0a:	4638      	mov	r0, r7
 8016f0c:	f000 fb72 	bl	80175f4 <__malloc_unlock>
 8016f10:	e7a1      	b.n	8016e56 <_malloc_r+0x22>
 8016f12:	6025      	str	r5, [r4, #0]
 8016f14:	e7de      	b.n	8016ed4 <_malloc_r+0xa0>
 8016f16:	bf00      	nop
 8016f18:	240055e0 	.word	0x240055e0

08016f1c <_puts_r>:
 8016f1c:	b570      	push	{r4, r5, r6, lr}
 8016f1e:	460e      	mov	r6, r1
 8016f20:	4605      	mov	r5, r0
 8016f22:	b118      	cbz	r0, 8016f2c <_puts_r+0x10>
 8016f24:	6983      	ldr	r3, [r0, #24]
 8016f26:	b90b      	cbnz	r3, 8016f2c <_puts_r+0x10>
 8016f28:	f000 fa58 	bl	80173dc <__sinit>
 8016f2c:	69ab      	ldr	r3, [r5, #24]
 8016f2e:	68ac      	ldr	r4, [r5, #8]
 8016f30:	b913      	cbnz	r3, 8016f38 <_puts_r+0x1c>
 8016f32:	4628      	mov	r0, r5
 8016f34:	f000 fa52 	bl	80173dc <__sinit>
 8016f38:	4b2c      	ldr	r3, [pc, #176]	; (8016fec <_puts_r+0xd0>)
 8016f3a:	429c      	cmp	r4, r3
 8016f3c:	d120      	bne.n	8016f80 <_puts_r+0x64>
 8016f3e:	686c      	ldr	r4, [r5, #4]
 8016f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f42:	07db      	lsls	r3, r3, #31
 8016f44:	d405      	bmi.n	8016f52 <_puts_r+0x36>
 8016f46:	89a3      	ldrh	r3, [r4, #12]
 8016f48:	0598      	lsls	r0, r3, #22
 8016f4a:	d402      	bmi.n	8016f52 <_puts_r+0x36>
 8016f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f4e:	f000 fae3 	bl	8017518 <__retarget_lock_acquire_recursive>
 8016f52:	89a3      	ldrh	r3, [r4, #12]
 8016f54:	0719      	lsls	r1, r3, #28
 8016f56:	d51d      	bpl.n	8016f94 <_puts_r+0x78>
 8016f58:	6923      	ldr	r3, [r4, #16]
 8016f5a:	b1db      	cbz	r3, 8016f94 <_puts_r+0x78>
 8016f5c:	3e01      	subs	r6, #1
 8016f5e:	68a3      	ldr	r3, [r4, #8]
 8016f60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016f64:	3b01      	subs	r3, #1
 8016f66:	60a3      	str	r3, [r4, #8]
 8016f68:	bb39      	cbnz	r1, 8016fba <_puts_r+0x9e>
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	da38      	bge.n	8016fe0 <_puts_r+0xc4>
 8016f6e:	4622      	mov	r2, r4
 8016f70:	210a      	movs	r1, #10
 8016f72:	4628      	mov	r0, r5
 8016f74:	f000 f858 	bl	8017028 <__swbuf_r>
 8016f78:	3001      	adds	r0, #1
 8016f7a:	d011      	beq.n	8016fa0 <_puts_r+0x84>
 8016f7c:	250a      	movs	r5, #10
 8016f7e:	e011      	b.n	8016fa4 <_puts_r+0x88>
 8016f80:	4b1b      	ldr	r3, [pc, #108]	; (8016ff0 <_puts_r+0xd4>)
 8016f82:	429c      	cmp	r4, r3
 8016f84:	d101      	bne.n	8016f8a <_puts_r+0x6e>
 8016f86:	68ac      	ldr	r4, [r5, #8]
 8016f88:	e7da      	b.n	8016f40 <_puts_r+0x24>
 8016f8a:	4b1a      	ldr	r3, [pc, #104]	; (8016ff4 <_puts_r+0xd8>)
 8016f8c:	429c      	cmp	r4, r3
 8016f8e:	bf08      	it	eq
 8016f90:	68ec      	ldreq	r4, [r5, #12]
 8016f92:	e7d5      	b.n	8016f40 <_puts_r+0x24>
 8016f94:	4621      	mov	r1, r4
 8016f96:	4628      	mov	r0, r5
 8016f98:	f000 f898 	bl	80170cc <__swsetup_r>
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	d0dd      	beq.n	8016f5c <_puts_r+0x40>
 8016fa0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016fa6:	07da      	lsls	r2, r3, #31
 8016fa8:	d405      	bmi.n	8016fb6 <_puts_r+0x9a>
 8016faa:	89a3      	ldrh	r3, [r4, #12]
 8016fac:	059b      	lsls	r3, r3, #22
 8016fae:	d402      	bmi.n	8016fb6 <_puts_r+0x9a>
 8016fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fb2:	f000 fab2 	bl	801751a <__retarget_lock_release_recursive>
 8016fb6:	4628      	mov	r0, r5
 8016fb8:	bd70      	pop	{r4, r5, r6, pc}
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	da04      	bge.n	8016fc8 <_puts_r+0xac>
 8016fbe:	69a2      	ldr	r2, [r4, #24]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	dc06      	bgt.n	8016fd2 <_puts_r+0xb6>
 8016fc4:	290a      	cmp	r1, #10
 8016fc6:	d004      	beq.n	8016fd2 <_puts_r+0xb6>
 8016fc8:	6823      	ldr	r3, [r4, #0]
 8016fca:	1c5a      	adds	r2, r3, #1
 8016fcc:	6022      	str	r2, [r4, #0]
 8016fce:	7019      	strb	r1, [r3, #0]
 8016fd0:	e7c5      	b.n	8016f5e <_puts_r+0x42>
 8016fd2:	4622      	mov	r2, r4
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f000 f827 	bl	8017028 <__swbuf_r>
 8016fda:	3001      	adds	r0, #1
 8016fdc:	d1bf      	bne.n	8016f5e <_puts_r+0x42>
 8016fde:	e7df      	b.n	8016fa0 <_puts_r+0x84>
 8016fe0:	6823      	ldr	r3, [r4, #0]
 8016fe2:	250a      	movs	r5, #10
 8016fe4:	1c5a      	adds	r2, r3, #1
 8016fe6:	6022      	str	r2, [r4, #0]
 8016fe8:	701d      	strb	r5, [r3, #0]
 8016fea:	e7db      	b.n	8016fa4 <_puts_r+0x88>
 8016fec:	08017bfc 	.word	0x08017bfc
 8016ff0:	08017c1c 	.word	0x08017c1c
 8016ff4:	08017bdc 	.word	0x08017bdc

08016ff8 <puts>:
 8016ff8:	4b02      	ldr	r3, [pc, #8]	; (8017004 <puts+0xc>)
 8016ffa:	4601      	mov	r1, r0
 8016ffc:	6818      	ldr	r0, [r3, #0]
 8016ffe:	f7ff bf8d 	b.w	8016f1c <_puts_r>
 8017002:	bf00      	nop
 8017004:	2400009c 	.word	0x2400009c

08017008 <_sbrk_r>:
 8017008:	b538      	push	{r3, r4, r5, lr}
 801700a:	4d06      	ldr	r5, [pc, #24]	; (8017024 <_sbrk_r+0x1c>)
 801700c:	2300      	movs	r3, #0
 801700e:	4604      	mov	r4, r0
 8017010:	4608      	mov	r0, r1
 8017012:	602b      	str	r3, [r5, #0]
 8017014:	f7ec f986 	bl	8003324 <_sbrk>
 8017018:	1c43      	adds	r3, r0, #1
 801701a:	d102      	bne.n	8017022 <_sbrk_r+0x1a>
 801701c:	682b      	ldr	r3, [r5, #0]
 801701e:	b103      	cbz	r3, 8017022 <_sbrk_r+0x1a>
 8017020:	6023      	str	r3, [r4, #0]
 8017022:	bd38      	pop	{r3, r4, r5, pc}
 8017024:	240055ec 	.word	0x240055ec

08017028 <__swbuf_r>:
 8017028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801702a:	460e      	mov	r6, r1
 801702c:	4614      	mov	r4, r2
 801702e:	4605      	mov	r5, r0
 8017030:	b118      	cbz	r0, 801703a <__swbuf_r+0x12>
 8017032:	6983      	ldr	r3, [r0, #24]
 8017034:	b90b      	cbnz	r3, 801703a <__swbuf_r+0x12>
 8017036:	f000 f9d1 	bl	80173dc <__sinit>
 801703a:	4b21      	ldr	r3, [pc, #132]	; (80170c0 <__swbuf_r+0x98>)
 801703c:	429c      	cmp	r4, r3
 801703e:	d12b      	bne.n	8017098 <__swbuf_r+0x70>
 8017040:	686c      	ldr	r4, [r5, #4]
 8017042:	69a3      	ldr	r3, [r4, #24]
 8017044:	60a3      	str	r3, [r4, #8]
 8017046:	89a3      	ldrh	r3, [r4, #12]
 8017048:	071a      	lsls	r2, r3, #28
 801704a:	d52f      	bpl.n	80170ac <__swbuf_r+0x84>
 801704c:	6923      	ldr	r3, [r4, #16]
 801704e:	b36b      	cbz	r3, 80170ac <__swbuf_r+0x84>
 8017050:	6923      	ldr	r3, [r4, #16]
 8017052:	6820      	ldr	r0, [r4, #0]
 8017054:	1ac0      	subs	r0, r0, r3
 8017056:	6963      	ldr	r3, [r4, #20]
 8017058:	b2f6      	uxtb	r6, r6
 801705a:	4283      	cmp	r3, r0
 801705c:	4637      	mov	r7, r6
 801705e:	dc04      	bgt.n	801706a <__swbuf_r+0x42>
 8017060:	4621      	mov	r1, r4
 8017062:	4628      	mov	r0, r5
 8017064:	f000 f926 	bl	80172b4 <_fflush_r>
 8017068:	bb30      	cbnz	r0, 80170b8 <__swbuf_r+0x90>
 801706a:	68a3      	ldr	r3, [r4, #8]
 801706c:	3b01      	subs	r3, #1
 801706e:	60a3      	str	r3, [r4, #8]
 8017070:	6823      	ldr	r3, [r4, #0]
 8017072:	1c5a      	adds	r2, r3, #1
 8017074:	6022      	str	r2, [r4, #0]
 8017076:	701e      	strb	r6, [r3, #0]
 8017078:	6963      	ldr	r3, [r4, #20]
 801707a:	3001      	adds	r0, #1
 801707c:	4283      	cmp	r3, r0
 801707e:	d004      	beq.n	801708a <__swbuf_r+0x62>
 8017080:	89a3      	ldrh	r3, [r4, #12]
 8017082:	07db      	lsls	r3, r3, #31
 8017084:	d506      	bpl.n	8017094 <__swbuf_r+0x6c>
 8017086:	2e0a      	cmp	r6, #10
 8017088:	d104      	bne.n	8017094 <__swbuf_r+0x6c>
 801708a:	4621      	mov	r1, r4
 801708c:	4628      	mov	r0, r5
 801708e:	f000 f911 	bl	80172b4 <_fflush_r>
 8017092:	b988      	cbnz	r0, 80170b8 <__swbuf_r+0x90>
 8017094:	4638      	mov	r0, r7
 8017096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017098:	4b0a      	ldr	r3, [pc, #40]	; (80170c4 <__swbuf_r+0x9c>)
 801709a:	429c      	cmp	r4, r3
 801709c:	d101      	bne.n	80170a2 <__swbuf_r+0x7a>
 801709e:	68ac      	ldr	r4, [r5, #8]
 80170a0:	e7cf      	b.n	8017042 <__swbuf_r+0x1a>
 80170a2:	4b09      	ldr	r3, [pc, #36]	; (80170c8 <__swbuf_r+0xa0>)
 80170a4:	429c      	cmp	r4, r3
 80170a6:	bf08      	it	eq
 80170a8:	68ec      	ldreq	r4, [r5, #12]
 80170aa:	e7ca      	b.n	8017042 <__swbuf_r+0x1a>
 80170ac:	4621      	mov	r1, r4
 80170ae:	4628      	mov	r0, r5
 80170b0:	f000 f80c 	bl	80170cc <__swsetup_r>
 80170b4:	2800      	cmp	r0, #0
 80170b6:	d0cb      	beq.n	8017050 <__swbuf_r+0x28>
 80170b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80170bc:	e7ea      	b.n	8017094 <__swbuf_r+0x6c>
 80170be:	bf00      	nop
 80170c0:	08017bfc 	.word	0x08017bfc
 80170c4:	08017c1c 	.word	0x08017c1c
 80170c8:	08017bdc 	.word	0x08017bdc

080170cc <__swsetup_r>:
 80170cc:	4b32      	ldr	r3, [pc, #200]	; (8017198 <__swsetup_r+0xcc>)
 80170ce:	b570      	push	{r4, r5, r6, lr}
 80170d0:	681d      	ldr	r5, [r3, #0]
 80170d2:	4606      	mov	r6, r0
 80170d4:	460c      	mov	r4, r1
 80170d6:	b125      	cbz	r5, 80170e2 <__swsetup_r+0x16>
 80170d8:	69ab      	ldr	r3, [r5, #24]
 80170da:	b913      	cbnz	r3, 80170e2 <__swsetup_r+0x16>
 80170dc:	4628      	mov	r0, r5
 80170de:	f000 f97d 	bl	80173dc <__sinit>
 80170e2:	4b2e      	ldr	r3, [pc, #184]	; (801719c <__swsetup_r+0xd0>)
 80170e4:	429c      	cmp	r4, r3
 80170e6:	d10f      	bne.n	8017108 <__swsetup_r+0x3c>
 80170e8:	686c      	ldr	r4, [r5, #4]
 80170ea:	89a3      	ldrh	r3, [r4, #12]
 80170ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80170f0:	0719      	lsls	r1, r3, #28
 80170f2:	d42c      	bmi.n	801714e <__swsetup_r+0x82>
 80170f4:	06dd      	lsls	r5, r3, #27
 80170f6:	d411      	bmi.n	801711c <__swsetup_r+0x50>
 80170f8:	2309      	movs	r3, #9
 80170fa:	6033      	str	r3, [r6, #0]
 80170fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017100:	81a3      	strh	r3, [r4, #12]
 8017102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017106:	e03e      	b.n	8017186 <__swsetup_r+0xba>
 8017108:	4b25      	ldr	r3, [pc, #148]	; (80171a0 <__swsetup_r+0xd4>)
 801710a:	429c      	cmp	r4, r3
 801710c:	d101      	bne.n	8017112 <__swsetup_r+0x46>
 801710e:	68ac      	ldr	r4, [r5, #8]
 8017110:	e7eb      	b.n	80170ea <__swsetup_r+0x1e>
 8017112:	4b24      	ldr	r3, [pc, #144]	; (80171a4 <__swsetup_r+0xd8>)
 8017114:	429c      	cmp	r4, r3
 8017116:	bf08      	it	eq
 8017118:	68ec      	ldreq	r4, [r5, #12]
 801711a:	e7e6      	b.n	80170ea <__swsetup_r+0x1e>
 801711c:	0758      	lsls	r0, r3, #29
 801711e:	d512      	bpl.n	8017146 <__swsetup_r+0x7a>
 8017120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017122:	b141      	cbz	r1, 8017136 <__swsetup_r+0x6a>
 8017124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017128:	4299      	cmp	r1, r3
 801712a:	d002      	beq.n	8017132 <__swsetup_r+0x66>
 801712c:	4630      	mov	r0, r6
 801712e:	f7ff fe15 	bl	8016d5c <_free_r>
 8017132:	2300      	movs	r3, #0
 8017134:	6363      	str	r3, [r4, #52]	; 0x34
 8017136:	89a3      	ldrh	r3, [r4, #12]
 8017138:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801713c:	81a3      	strh	r3, [r4, #12]
 801713e:	2300      	movs	r3, #0
 8017140:	6063      	str	r3, [r4, #4]
 8017142:	6923      	ldr	r3, [r4, #16]
 8017144:	6023      	str	r3, [r4, #0]
 8017146:	89a3      	ldrh	r3, [r4, #12]
 8017148:	f043 0308 	orr.w	r3, r3, #8
 801714c:	81a3      	strh	r3, [r4, #12]
 801714e:	6923      	ldr	r3, [r4, #16]
 8017150:	b94b      	cbnz	r3, 8017166 <__swsetup_r+0x9a>
 8017152:	89a3      	ldrh	r3, [r4, #12]
 8017154:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801715c:	d003      	beq.n	8017166 <__swsetup_r+0x9a>
 801715e:	4621      	mov	r1, r4
 8017160:	4630      	mov	r0, r6
 8017162:	f000 fa01 	bl	8017568 <__smakebuf_r>
 8017166:	89a0      	ldrh	r0, [r4, #12]
 8017168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801716c:	f010 0301 	ands.w	r3, r0, #1
 8017170:	d00a      	beq.n	8017188 <__swsetup_r+0xbc>
 8017172:	2300      	movs	r3, #0
 8017174:	60a3      	str	r3, [r4, #8]
 8017176:	6963      	ldr	r3, [r4, #20]
 8017178:	425b      	negs	r3, r3
 801717a:	61a3      	str	r3, [r4, #24]
 801717c:	6923      	ldr	r3, [r4, #16]
 801717e:	b943      	cbnz	r3, 8017192 <__swsetup_r+0xc6>
 8017180:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017184:	d1ba      	bne.n	80170fc <__swsetup_r+0x30>
 8017186:	bd70      	pop	{r4, r5, r6, pc}
 8017188:	0781      	lsls	r1, r0, #30
 801718a:	bf58      	it	pl
 801718c:	6963      	ldrpl	r3, [r4, #20]
 801718e:	60a3      	str	r3, [r4, #8]
 8017190:	e7f4      	b.n	801717c <__swsetup_r+0xb0>
 8017192:	2000      	movs	r0, #0
 8017194:	e7f7      	b.n	8017186 <__swsetup_r+0xba>
 8017196:	bf00      	nop
 8017198:	2400009c 	.word	0x2400009c
 801719c:	08017bfc 	.word	0x08017bfc
 80171a0:	08017c1c 	.word	0x08017c1c
 80171a4:	08017bdc 	.word	0x08017bdc

080171a8 <__sflush_r>:
 80171a8:	898a      	ldrh	r2, [r1, #12]
 80171aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171ae:	4605      	mov	r5, r0
 80171b0:	0710      	lsls	r0, r2, #28
 80171b2:	460c      	mov	r4, r1
 80171b4:	d458      	bmi.n	8017268 <__sflush_r+0xc0>
 80171b6:	684b      	ldr	r3, [r1, #4]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	dc05      	bgt.n	80171c8 <__sflush_r+0x20>
 80171bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80171be:	2b00      	cmp	r3, #0
 80171c0:	dc02      	bgt.n	80171c8 <__sflush_r+0x20>
 80171c2:	2000      	movs	r0, #0
 80171c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80171ca:	2e00      	cmp	r6, #0
 80171cc:	d0f9      	beq.n	80171c2 <__sflush_r+0x1a>
 80171ce:	2300      	movs	r3, #0
 80171d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80171d4:	682f      	ldr	r7, [r5, #0]
 80171d6:	602b      	str	r3, [r5, #0]
 80171d8:	d032      	beq.n	8017240 <__sflush_r+0x98>
 80171da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80171dc:	89a3      	ldrh	r3, [r4, #12]
 80171de:	075a      	lsls	r2, r3, #29
 80171e0:	d505      	bpl.n	80171ee <__sflush_r+0x46>
 80171e2:	6863      	ldr	r3, [r4, #4]
 80171e4:	1ac0      	subs	r0, r0, r3
 80171e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80171e8:	b10b      	cbz	r3, 80171ee <__sflush_r+0x46>
 80171ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80171ec:	1ac0      	subs	r0, r0, r3
 80171ee:	2300      	movs	r3, #0
 80171f0:	4602      	mov	r2, r0
 80171f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80171f4:	6a21      	ldr	r1, [r4, #32]
 80171f6:	4628      	mov	r0, r5
 80171f8:	47b0      	blx	r6
 80171fa:	1c43      	adds	r3, r0, #1
 80171fc:	89a3      	ldrh	r3, [r4, #12]
 80171fe:	d106      	bne.n	801720e <__sflush_r+0x66>
 8017200:	6829      	ldr	r1, [r5, #0]
 8017202:	291d      	cmp	r1, #29
 8017204:	d82c      	bhi.n	8017260 <__sflush_r+0xb8>
 8017206:	4a2a      	ldr	r2, [pc, #168]	; (80172b0 <__sflush_r+0x108>)
 8017208:	40ca      	lsrs	r2, r1
 801720a:	07d6      	lsls	r6, r2, #31
 801720c:	d528      	bpl.n	8017260 <__sflush_r+0xb8>
 801720e:	2200      	movs	r2, #0
 8017210:	6062      	str	r2, [r4, #4]
 8017212:	04d9      	lsls	r1, r3, #19
 8017214:	6922      	ldr	r2, [r4, #16]
 8017216:	6022      	str	r2, [r4, #0]
 8017218:	d504      	bpl.n	8017224 <__sflush_r+0x7c>
 801721a:	1c42      	adds	r2, r0, #1
 801721c:	d101      	bne.n	8017222 <__sflush_r+0x7a>
 801721e:	682b      	ldr	r3, [r5, #0]
 8017220:	b903      	cbnz	r3, 8017224 <__sflush_r+0x7c>
 8017222:	6560      	str	r0, [r4, #84]	; 0x54
 8017224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017226:	602f      	str	r7, [r5, #0]
 8017228:	2900      	cmp	r1, #0
 801722a:	d0ca      	beq.n	80171c2 <__sflush_r+0x1a>
 801722c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017230:	4299      	cmp	r1, r3
 8017232:	d002      	beq.n	801723a <__sflush_r+0x92>
 8017234:	4628      	mov	r0, r5
 8017236:	f7ff fd91 	bl	8016d5c <_free_r>
 801723a:	2000      	movs	r0, #0
 801723c:	6360      	str	r0, [r4, #52]	; 0x34
 801723e:	e7c1      	b.n	80171c4 <__sflush_r+0x1c>
 8017240:	6a21      	ldr	r1, [r4, #32]
 8017242:	2301      	movs	r3, #1
 8017244:	4628      	mov	r0, r5
 8017246:	47b0      	blx	r6
 8017248:	1c41      	adds	r1, r0, #1
 801724a:	d1c7      	bne.n	80171dc <__sflush_r+0x34>
 801724c:	682b      	ldr	r3, [r5, #0]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d0c4      	beq.n	80171dc <__sflush_r+0x34>
 8017252:	2b1d      	cmp	r3, #29
 8017254:	d001      	beq.n	801725a <__sflush_r+0xb2>
 8017256:	2b16      	cmp	r3, #22
 8017258:	d101      	bne.n	801725e <__sflush_r+0xb6>
 801725a:	602f      	str	r7, [r5, #0]
 801725c:	e7b1      	b.n	80171c2 <__sflush_r+0x1a>
 801725e:	89a3      	ldrh	r3, [r4, #12]
 8017260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017264:	81a3      	strh	r3, [r4, #12]
 8017266:	e7ad      	b.n	80171c4 <__sflush_r+0x1c>
 8017268:	690f      	ldr	r7, [r1, #16]
 801726a:	2f00      	cmp	r7, #0
 801726c:	d0a9      	beq.n	80171c2 <__sflush_r+0x1a>
 801726e:	0793      	lsls	r3, r2, #30
 8017270:	680e      	ldr	r6, [r1, #0]
 8017272:	bf08      	it	eq
 8017274:	694b      	ldreq	r3, [r1, #20]
 8017276:	600f      	str	r7, [r1, #0]
 8017278:	bf18      	it	ne
 801727a:	2300      	movne	r3, #0
 801727c:	eba6 0807 	sub.w	r8, r6, r7
 8017280:	608b      	str	r3, [r1, #8]
 8017282:	f1b8 0f00 	cmp.w	r8, #0
 8017286:	dd9c      	ble.n	80171c2 <__sflush_r+0x1a>
 8017288:	6a21      	ldr	r1, [r4, #32]
 801728a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801728c:	4643      	mov	r3, r8
 801728e:	463a      	mov	r2, r7
 8017290:	4628      	mov	r0, r5
 8017292:	47b0      	blx	r6
 8017294:	2800      	cmp	r0, #0
 8017296:	dc06      	bgt.n	80172a6 <__sflush_r+0xfe>
 8017298:	89a3      	ldrh	r3, [r4, #12]
 801729a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801729e:	81a3      	strh	r3, [r4, #12]
 80172a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172a4:	e78e      	b.n	80171c4 <__sflush_r+0x1c>
 80172a6:	4407      	add	r7, r0
 80172a8:	eba8 0800 	sub.w	r8, r8, r0
 80172ac:	e7e9      	b.n	8017282 <__sflush_r+0xda>
 80172ae:	bf00      	nop
 80172b0:	20400001 	.word	0x20400001

080172b4 <_fflush_r>:
 80172b4:	b538      	push	{r3, r4, r5, lr}
 80172b6:	690b      	ldr	r3, [r1, #16]
 80172b8:	4605      	mov	r5, r0
 80172ba:	460c      	mov	r4, r1
 80172bc:	b913      	cbnz	r3, 80172c4 <_fflush_r+0x10>
 80172be:	2500      	movs	r5, #0
 80172c0:	4628      	mov	r0, r5
 80172c2:	bd38      	pop	{r3, r4, r5, pc}
 80172c4:	b118      	cbz	r0, 80172ce <_fflush_r+0x1a>
 80172c6:	6983      	ldr	r3, [r0, #24]
 80172c8:	b90b      	cbnz	r3, 80172ce <_fflush_r+0x1a>
 80172ca:	f000 f887 	bl	80173dc <__sinit>
 80172ce:	4b14      	ldr	r3, [pc, #80]	; (8017320 <_fflush_r+0x6c>)
 80172d0:	429c      	cmp	r4, r3
 80172d2:	d11b      	bne.n	801730c <_fflush_r+0x58>
 80172d4:	686c      	ldr	r4, [r5, #4]
 80172d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d0ef      	beq.n	80172be <_fflush_r+0xa>
 80172de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80172e0:	07d0      	lsls	r0, r2, #31
 80172e2:	d404      	bmi.n	80172ee <_fflush_r+0x3a>
 80172e4:	0599      	lsls	r1, r3, #22
 80172e6:	d402      	bmi.n	80172ee <_fflush_r+0x3a>
 80172e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172ea:	f000 f915 	bl	8017518 <__retarget_lock_acquire_recursive>
 80172ee:	4628      	mov	r0, r5
 80172f0:	4621      	mov	r1, r4
 80172f2:	f7ff ff59 	bl	80171a8 <__sflush_r>
 80172f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80172f8:	07da      	lsls	r2, r3, #31
 80172fa:	4605      	mov	r5, r0
 80172fc:	d4e0      	bmi.n	80172c0 <_fflush_r+0xc>
 80172fe:	89a3      	ldrh	r3, [r4, #12]
 8017300:	059b      	lsls	r3, r3, #22
 8017302:	d4dd      	bmi.n	80172c0 <_fflush_r+0xc>
 8017304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017306:	f000 f908 	bl	801751a <__retarget_lock_release_recursive>
 801730a:	e7d9      	b.n	80172c0 <_fflush_r+0xc>
 801730c:	4b05      	ldr	r3, [pc, #20]	; (8017324 <_fflush_r+0x70>)
 801730e:	429c      	cmp	r4, r3
 8017310:	d101      	bne.n	8017316 <_fflush_r+0x62>
 8017312:	68ac      	ldr	r4, [r5, #8]
 8017314:	e7df      	b.n	80172d6 <_fflush_r+0x22>
 8017316:	4b04      	ldr	r3, [pc, #16]	; (8017328 <_fflush_r+0x74>)
 8017318:	429c      	cmp	r4, r3
 801731a:	bf08      	it	eq
 801731c:	68ec      	ldreq	r4, [r5, #12]
 801731e:	e7da      	b.n	80172d6 <_fflush_r+0x22>
 8017320:	08017bfc 	.word	0x08017bfc
 8017324:	08017c1c 	.word	0x08017c1c
 8017328:	08017bdc 	.word	0x08017bdc

0801732c <std>:
 801732c:	2300      	movs	r3, #0
 801732e:	b510      	push	{r4, lr}
 8017330:	4604      	mov	r4, r0
 8017332:	e9c0 3300 	strd	r3, r3, [r0]
 8017336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801733a:	6083      	str	r3, [r0, #8]
 801733c:	8181      	strh	r1, [r0, #12]
 801733e:	6643      	str	r3, [r0, #100]	; 0x64
 8017340:	81c2      	strh	r2, [r0, #14]
 8017342:	6183      	str	r3, [r0, #24]
 8017344:	4619      	mov	r1, r3
 8017346:	2208      	movs	r2, #8
 8017348:	305c      	adds	r0, #92	; 0x5c
 801734a:	f7ff fcff 	bl	8016d4c <memset>
 801734e:	4b05      	ldr	r3, [pc, #20]	; (8017364 <std+0x38>)
 8017350:	6263      	str	r3, [r4, #36]	; 0x24
 8017352:	4b05      	ldr	r3, [pc, #20]	; (8017368 <std+0x3c>)
 8017354:	62a3      	str	r3, [r4, #40]	; 0x28
 8017356:	4b05      	ldr	r3, [pc, #20]	; (801736c <std+0x40>)
 8017358:	62e3      	str	r3, [r4, #44]	; 0x2c
 801735a:	4b05      	ldr	r3, [pc, #20]	; (8017370 <std+0x44>)
 801735c:	6224      	str	r4, [r4, #32]
 801735e:	6323      	str	r3, [r4, #48]	; 0x30
 8017360:	bd10      	pop	{r4, pc}
 8017362:	bf00      	nop
 8017364:	08017601 	.word	0x08017601
 8017368:	08017623 	.word	0x08017623
 801736c:	0801765b 	.word	0x0801765b
 8017370:	0801767f 	.word	0x0801767f

08017374 <_cleanup_r>:
 8017374:	4901      	ldr	r1, [pc, #4]	; (801737c <_cleanup_r+0x8>)
 8017376:	f000 b8af 	b.w	80174d8 <_fwalk_reent>
 801737a:	bf00      	nop
 801737c:	080172b5 	.word	0x080172b5

08017380 <__sfmoreglue>:
 8017380:	b570      	push	{r4, r5, r6, lr}
 8017382:	2268      	movs	r2, #104	; 0x68
 8017384:	1e4d      	subs	r5, r1, #1
 8017386:	4355      	muls	r5, r2
 8017388:	460e      	mov	r6, r1
 801738a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801738e:	f7ff fd51 	bl	8016e34 <_malloc_r>
 8017392:	4604      	mov	r4, r0
 8017394:	b140      	cbz	r0, 80173a8 <__sfmoreglue+0x28>
 8017396:	2100      	movs	r1, #0
 8017398:	e9c0 1600 	strd	r1, r6, [r0]
 801739c:	300c      	adds	r0, #12
 801739e:	60a0      	str	r0, [r4, #8]
 80173a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80173a4:	f7ff fcd2 	bl	8016d4c <memset>
 80173a8:	4620      	mov	r0, r4
 80173aa:	bd70      	pop	{r4, r5, r6, pc}

080173ac <__sfp_lock_acquire>:
 80173ac:	4801      	ldr	r0, [pc, #4]	; (80173b4 <__sfp_lock_acquire+0x8>)
 80173ae:	f000 b8b3 	b.w	8017518 <__retarget_lock_acquire_recursive>
 80173b2:	bf00      	nop
 80173b4:	240055e9 	.word	0x240055e9

080173b8 <__sfp_lock_release>:
 80173b8:	4801      	ldr	r0, [pc, #4]	; (80173c0 <__sfp_lock_release+0x8>)
 80173ba:	f000 b8ae 	b.w	801751a <__retarget_lock_release_recursive>
 80173be:	bf00      	nop
 80173c0:	240055e9 	.word	0x240055e9

080173c4 <__sinit_lock_acquire>:
 80173c4:	4801      	ldr	r0, [pc, #4]	; (80173cc <__sinit_lock_acquire+0x8>)
 80173c6:	f000 b8a7 	b.w	8017518 <__retarget_lock_acquire_recursive>
 80173ca:	bf00      	nop
 80173cc:	240055ea 	.word	0x240055ea

080173d0 <__sinit_lock_release>:
 80173d0:	4801      	ldr	r0, [pc, #4]	; (80173d8 <__sinit_lock_release+0x8>)
 80173d2:	f000 b8a2 	b.w	801751a <__retarget_lock_release_recursive>
 80173d6:	bf00      	nop
 80173d8:	240055ea 	.word	0x240055ea

080173dc <__sinit>:
 80173dc:	b510      	push	{r4, lr}
 80173de:	4604      	mov	r4, r0
 80173e0:	f7ff fff0 	bl	80173c4 <__sinit_lock_acquire>
 80173e4:	69a3      	ldr	r3, [r4, #24]
 80173e6:	b11b      	cbz	r3, 80173f0 <__sinit+0x14>
 80173e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173ec:	f7ff bff0 	b.w	80173d0 <__sinit_lock_release>
 80173f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80173f4:	6523      	str	r3, [r4, #80]	; 0x50
 80173f6:	4b13      	ldr	r3, [pc, #76]	; (8017444 <__sinit+0x68>)
 80173f8:	4a13      	ldr	r2, [pc, #76]	; (8017448 <__sinit+0x6c>)
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80173fe:	42a3      	cmp	r3, r4
 8017400:	bf04      	itt	eq
 8017402:	2301      	moveq	r3, #1
 8017404:	61a3      	streq	r3, [r4, #24]
 8017406:	4620      	mov	r0, r4
 8017408:	f000 f820 	bl	801744c <__sfp>
 801740c:	6060      	str	r0, [r4, #4]
 801740e:	4620      	mov	r0, r4
 8017410:	f000 f81c 	bl	801744c <__sfp>
 8017414:	60a0      	str	r0, [r4, #8]
 8017416:	4620      	mov	r0, r4
 8017418:	f000 f818 	bl	801744c <__sfp>
 801741c:	2200      	movs	r2, #0
 801741e:	60e0      	str	r0, [r4, #12]
 8017420:	2104      	movs	r1, #4
 8017422:	6860      	ldr	r0, [r4, #4]
 8017424:	f7ff ff82 	bl	801732c <std>
 8017428:	68a0      	ldr	r0, [r4, #8]
 801742a:	2201      	movs	r2, #1
 801742c:	2109      	movs	r1, #9
 801742e:	f7ff ff7d 	bl	801732c <std>
 8017432:	68e0      	ldr	r0, [r4, #12]
 8017434:	2202      	movs	r2, #2
 8017436:	2112      	movs	r1, #18
 8017438:	f7ff ff78 	bl	801732c <std>
 801743c:	2301      	movs	r3, #1
 801743e:	61a3      	str	r3, [r4, #24]
 8017440:	e7d2      	b.n	80173e8 <__sinit+0xc>
 8017442:	bf00      	nop
 8017444:	08017bd8 	.word	0x08017bd8
 8017448:	08017375 	.word	0x08017375

0801744c <__sfp>:
 801744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801744e:	4607      	mov	r7, r0
 8017450:	f7ff ffac 	bl	80173ac <__sfp_lock_acquire>
 8017454:	4b1e      	ldr	r3, [pc, #120]	; (80174d0 <__sfp+0x84>)
 8017456:	681e      	ldr	r6, [r3, #0]
 8017458:	69b3      	ldr	r3, [r6, #24]
 801745a:	b913      	cbnz	r3, 8017462 <__sfp+0x16>
 801745c:	4630      	mov	r0, r6
 801745e:	f7ff ffbd 	bl	80173dc <__sinit>
 8017462:	3648      	adds	r6, #72	; 0x48
 8017464:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017468:	3b01      	subs	r3, #1
 801746a:	d503      	bpl.n	8017474 <__sfp+0x28>
 801746c:	6833      	ldr	r3, [r6, #0]
 801746e:	b30b      	cbz	r3, 80174b4 <__sfp+0x68>
 8017470:	6836      	ldr	r6, [r6, #0]
 8017472:	e7f7      	b.n	8017464 <__sfp+0x18>
 8017474:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017478:	b9d5      	cbnz	r5, 80174b0 <__sfp+0x64>
 801747a:	4b16      	ldr	r3, [pc, #88]	; (80174d4 <__sfp+0x88>)
 801747c:	60e3      	str	r3, [r4, #12]
 801747e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017482:	6665      	str	r5, [r4, #100]	; 0x64
 8017484:	f000 f847 	bl	8017516 <__retarget_lock_init_recursive>
 8017488:	f7ff ff96 	bl	80173b8 <__sfp_lock_release>
 801748c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017490:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017494:	6025      	str	r5, [r4, #0]
 8017496:	61a5      	str	r5, [r4, #24]
 8017498:	2208      	movs	r2, #8
 801749a:	4629      	mov	r1, r5
 801749c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80174a0:	f7ff fc54 	bl	8016d4c <memset>
 80174a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80174a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80174ac:	4620      	mov	r0, r4
 80174ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174b0:	3468      	adds	r4, #104	; 0x68
 80174b2:	e7d9      	b.n	8017468 <__sfp+0x1c>
 80174b4:	2104      	movs	r1, #4
 80174b6:	4638      	mov	r0, r7
 80174b8:	f7ff ff62 	bl	8017380 <__sfmoreglue>
 80174bc:	4604      	mov	r4, r0
 80174be:	6030      	str	r0, [r6, #0]
 80174c0:	2800      	cmp	r0, #0
 80174c2:	d1d5      	bne.n	8017470 <__sfp+0x24>
 80174c4:	f7ff ff78 	bl	80173b8 <__sfp_lock_release>
 80174c8:	230c      	movs	r3, #12
 80174ca:	603b      	str	r3, [r7, #0]
 80174cc:	e7ee      	b.n	80174ac <__sfp+0x60>
 80174ce:	bf00      	nop
 80174d0:	08017bd8 	.word	0x08017bd8
 80174d4:	ffff0001 	.word	0xffff0001

080174d8 <_fwalk_reent>:
 80174d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174dc:	4606      	mov	r6, r0
 80174de:	4688      	mov	r8, r1
 80174e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80174e4:	2700      	movs	r7, #0
 80174e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80174ea:	f1b9 0901 	subs.w	r9, r9, #1
 80174ee:	d505      	bpl.n	80174fc <_fwalk_reent+0x24>
 80174f0:	6824      	ldr	r4, [r4, #0]
 80174f2:	2c00      	cmp	r4, #0
 80174f4:	d1f7      	bne.n	80174e6 <_fwalk_reent+0xe>
 80174f6:	4638      	mov	r0, r7
 80174f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174fc:	89ab      	ldrh	r3, [r5, #12]
 80174fe:	2b01      	cmp	r3, #1
 8017500:	d907      	bls.n	8017512 <_fwalk_reent+0x3a>
 8017502:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017506:	3301      	adds	r3, #1
 8017508:	d003      	beq.n	8017512 <_fwalk_reent+0x3a>
 801750a:	4629      	mov	r1, r5
 801750c:	4630      	mov	r0, r6
 801750e:	47c0      	blx	r8
 8017510:	4307      	orrs	r7, r0
 8017512:	3568      	adds	r5, #104	; 0x68
 8017514:	e7e9      	b.n	80174ea <_fwalk_reent+0x12>

08017516 <__retarget_lock_init_recursive>:
 8017516:	4770      	bx	lr

08017518 <__retarget_lock_acquire_recursive>:
 8017518:	4770      	bx	lr

0801751a <__retarget_lock_release_recursive>:
 801751a:	4770      	bx	lr

0801751c <__swhatbuf_r>:
 801751c:	b570      	push	{r4, r5, r6, lr}
 801751e:	460e      	mov	r6, r1
 8017520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017524:	2900      	cmp	r1, #0
 8017526:	b096      	sub	sp, #88	; 0x58
 8017528:	4614      	mov	r4, r2
 801752a:	461d      	mov	r5, r3
 801752c:	da08      	bge.n	8017540 <__swhatbuf_r+0x24>
 801752e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017532:	2200      	movs	r2, #0
 8017534:	602a      	str	r2, [r5, #0]
 8017536:	061a      	lsls	r2, r3, #24
 8017538:	d410      	bmi.n	801755c <__swhatbuf_r+0x40>
 801753a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801753e:	e00e      	b.n	801755e <__swhatbuf_r+0x42>
 8017540:	466a      	mov	r2, sp
 8017542:	f000 f8c3 	bl	80176cc <_fstat_r>
 8017546:	2800      	cmp	r0, #0
 8017548:	dbf1      	blt.n	801752e <__swhatbuf_r+0x12>
 801754a:	9a01      	ldr	r2, [sp, #4]
 801754c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017550:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017554:	425a      	negs	r2, r3
 8017556:	415a      	adcs	r2, r3
 8017558:	602a      	str	r2, [r5, #0]
 801755a:	e7ee      	b.n	801753a <__swhatbuf_r+0x1e>
 801755c:	2340      	movs	r3, #64	; 0x40
 801755e:	2000      	movs	r0, #0
 8017560:	6023      	str	r3, [r4, #0]
 8017562:	b016      	add	sp, #88	; 0x58
 8017564:	bd70      	pop	{r4, r5, r6, pc}
	...

08017568 <__smakebuf_r>:
 8017568:	898b      	ldrh	r3, [r1, #12]
 801756a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801756c:	079d      	lsls	r5, r3, #30
 801756e:	4606      	mov	r6, r0
 8017570:	460c      	mov	r4, r1
 8017572:	d507      	bpl.n	8017584 <__smakebuf_r+0x1c>
 8017574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017578:	6023      	str	r3, [r4, #0]
 801757a:	6123      	str	r3, [r4, #16]
 801757c:	2301      	movs	r3, #1
 801757e:	6163      	str	r3, [r4, #20]
 8017580:	b002      	add	sp, #8
 8017582:	bd70      	pop	{r4, r5, r6, pc}
 8017584:	ab01      	add	r3, sp, #4
 8017586:	466a      	mov	r2, sp
 8017588:	f7ff ffc8 	bl	801751c <__swhatbuf_r>
 801758c:	9900      	ldr	r1, [sp, #0]
 801758e:	4605      	mov	r5, r0
 8017590:	4630      	mov	r0, r6
 8017592:	f7ff fc4f 	bl	8016e34 <_malloc_r>
 8017596:	b948      	cbnz	r0, 80175ac <__smakebuf_r+0x44>
 8017598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801759c:	059a      	lsls	r2, r3, #22
 801759e:	d4ef      	bmi.n	8017580 <__smakebuf_r+0x18>
 80175a0:	f023 0303 	bic.w	r3, r3, #3
 80175a4:	f043 0302 	orr.w	r3, r3, #2
 80175a8:	81a3      	strh	r3, [r4, #12]
 80175aa:	e7e3      	b.n	8017574 <__smakebuf_r+0xc>
 80175ac:	4b0d      	ldr	r3, [pc, #52]	; (80175e4 <__smakebuf_r+0x7c>)
 80175ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80175b0:	89a3      	ldrh	r3, [r4, #12]
 80175b2:	6020      	str	r0, [r4, #0]
 80175b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175b8:	81a3      	strh	r3, [r4, #12]
 80175ba:	9b00      	ldr	r3, [sp, #0]
 80175bc:	6163      	str	r3, [r4, #20]
 80175be:	9b01      	ldr	r3, [sp, #4]
 80175c0:	6120      	str	r0, [r4, #16]
 80175c2:	b15b      	cbz	r3, 80175dc <__smakebuf_r+0x74>
 80175c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175c8:	4630      	mov	r0, r6
 80175ca:	f000 f891 	bl	80176f0 <_isatty_r>
 80175ce:	b128      	cbz	r0, 80175dc <__smakebuf_r+0x74>
 80175d0:	89a3      	ldrh	r3, [r4, #12]
 80175d2:	f023 0303 	bic.w	r3, r3, #3
 80175d6:	f043 0301 	orr.w	r3, r3, #1
 80175da:	81a3      	strh	r3, [r4, #12]
 80175dc:	89a0      	ldrh	r0, [r4, #12]
 80175de:	4305      	orrs	r5, r0
 80175e0:	81a5      	strh	r5, [r4, #12]
 80175e2:	e7cd      	b.n	8017580 <__smakebuf_r+0x18>
 80175e4:	08017375 	.word	0x08017375

080175e8 <__malloc_lock>:
 80175e8:	4801      	ldr	r0, [pc, #4]	; (80175f0 <__malloc_lock+0x8>)
 80175ea:	f7ff bf95 	b.w	8017518 <__retarget_lock_acquire_recursive>
 80175ee:	bf00      	nop
 80175f0:	240055e8 	.word	0x240055e8

080175f4 <__malloc_unlock>:
 80175f4:	4801      	ldr	r0, [pc, #4]	; (80175fc <__malloc_unlock+0x8>)
 80175f6:	f7ff bf90 	b.w	801751a <__retarget_lock_release_recursive>
 80175fa:	bf00      	nop
 80175fc:	240055e8 	.word	0x240055e8

08017600 <__sread>:
 8017600:	b510      	push	{r4, lr}
 8017602:	460c      	mov	r4, r1
 8017604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017608:	f000 f894 	bl	8017734 <_read_r>
 801760c:	2800      	cmp	r0, #0
 801760e:	bfab      	itete	ge
 8017610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017612:	89a3      	ldrhlt	r3, [r4, #12]
 8017614:	181b      	addge	r3, r3, r0
 8017616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801761a:	bfac      	ite	ge
 801761c:	6563      	strge	r3, [r4, #84]	; 0x54
 801761e:	81a3      	strhlt	r3, [r4, #12]
 8017620:	bd10      	pop	{r4, pc}

08017622 <__swrite>:
 8017622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017626:	461f      	mov	r7, r3
 8017628:	898b      	ldrh	r3, [r1, #12]
 801762a:	05db      	lsls	r3, r3, #23
 801762c:	4605      	mov	r5, r0
 801762e:	460c      	mov	r4, r1
 8017630:	4616      	mov	r6, r2
 8017632:	d505      	bpl.n	8017640 <__swrite+0x1e>
 8017634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017638:	2302      	movs	r3, #2
 801763a:	2200      	movs	r2, #0
 801763c:	f000 f868 	bl	8017710 <_lseek_r>
 8017640:	89a3      	ldrh	r3, [r4, #12]
 8017642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801764a:	81a3      	strh	r3, [r4, #12]
 801764c:	4632      	mov	r2, r6
 801764e:	463b      	mov	r3, r7
 8017650:	4628      	mov	r0, r5
 8017652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017656:	f000 b817 	b.w	8017688 <_write_r>

0801765a <__sseek>:
 801765a:	b510      	push	{r4, lr}
 801765c:	460c      	mov	r4, r1
 801765e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017662:	f000 f855 	bl	8017710 <_lseek_r>
 8017666:	1c43      	adds	r3, r0, #1
 8017668:	89a3      	ldrh	r3, [r4, #12]
 801766a:	bf15      	itete	ne
 801766c:	6560      	strne	r0, [r4, #84]	; 0x54
 801766e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017676:	81a3      	strheq	r3, [r4, #12]
 8017678:	bf18      	it	ne
 801767a:	81a3      	strhne	r3, [r4, #12]
 801767c:	bd10      	pop	{r4, pc}

0801767e <__sclose>:
 801767e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017682:	f000 b813 	b.w	80176ac <_close_r>
	...

08017688 <_write_r>:
 8017688:	b538      	push	{r3, r4, r5, lr}
 801768a:	4d07      	ldr	r5, [pc, #28]	; (80176a8 <_write_r+0x20>)
 801768c:	4604      	mov	r4, r0
 801768e:	4608      	mov	r0, r1
 8017690:	4611      	mov	r1, r2
 8017692:	2200      	movs	r2, #0
 8017694:	602a      	str	r2, [r5, #0]
 8017696:	461a      	mov	r2, r3
 8017698:	f7eb fdf3 	bl	8003282 <_write>
 801769c:	1c43      	adds	r3, r0, #1
 801769e:	d102      	bne.n	80176a6 <_write_r+0x1e>
 80176a0:	682b      	ldr	r3, [r5, #0]
 80176a2:	b103      	cbz	r3, 80176a6 <_write_r+0x1e>
 80176a4:	6023      	str	r3, [r4, #0]
 80176a6:	bd38      	pop	{r3, r4, r5, pc}
 80176a8:	240055ec 	.word	0x240055ec

080176ac <_close_r>:
 80176ac:	b538      	push	{r3, r4, r5, lr}
 80176ae:	4d06      	ldr	r5, [pc, #24]	; (80176c8 <_close_r+0x1c>)
 80176b0:	2300      	movs	r3, #0
 80176b2:	4604      	mov	r4, r0
 80176b4:	4608      	mov	r0, r1
 80176b6:	602b      	str	r3, [r5, #0]
 80176b8:	f7eb fdff 	bl	80032ba <_close>
 80176bc:	1c43      	adds	r3, r0, #1
 80176be:	d102      	bne.n	80176c6 <_close_r+0x1a>
 80176c0:	682b      	ldr	r3, [r5, #0]
 80176c2:	b103      	cbz	r3, 80176c6 <_close_r+0x1a>
 80176c4:	6023      	str	r3, [r4, #0]
 80176c6:	bd38      	pop	{r3, r4, r5, pc}
 80176c8:	240055ec 	.word	0x240055ec

080176cc <_fstat_r>:
 80176cc:	b538      	push	{r3, r4, r5, lr}
 80176ce:	4d07      	ldr	r5, [pc, #28]	; (80176ec <_fstat_r+0x20>)
 80176d0:	2300      	movs	r3, #0
 80176d2:	4604      	mov	r4, r0
 80176d4:	4608      	mov	r0, r1
 80176d6:	4611      	mov	r1, r2
 80176d8:	602b      	str	r3, [r5, #0]
 80176da:	f7eb fdfa 	bl	80032d2 <_fstat>
 80176de:	1c43      	adds	r3, r0, #1
 80176e0:	d102      	bne.n	80176e8 <_fstat_r+0x1c>
 80176e2:	682b      	ldr	r3, [r5, #0]
 80176e4:	b103      	cbz	r3, 80176e8 <_fstat_r+0x1c>
 80176e6:	6023      	str	r3, [r4, #0]
 80176e8:	bd38      	pop	{r3, r4, r5, pc}
 80176ea:	bf00      	nop
 80176ec:	240055ec 	.word	0x240055ec

080176f0 <_isatty_r>:
 80176f0:	b538      	push	{r3, r4, r5, lr}
 80176f2:	4d06      	ldr	r5, [pc, #24]	; (801770c <_isatty_r+0x1c>)
 80176f4:	2300      	movs	r3, #0
 80176f6:	4604      	mov	r4, r0
 80176f8:	4608      	mov	r0, r1
 80176fa:	602b      	str	r3, [r5, #0]
 80176fc:	f7eb fdf9 	bl	80032f2 <_isatty>
 8017700:	1c43      	adds	r3, r0, #1
 8017702:	d102      	bne.n	801770a <_isatty_r+0x1a>
 8017704:	682b      	ldr	r3, [r5, #0]
 8017706:	b103      	cbz	r3, 801770a <_isatty_r+0x1a>
 8017708:	6023      	str	r3, [r4, #0]
 801770a:	bd38      	pop	{r3, r4, r5, pc}
 801770c:	240055ec 	.word	0x240055ec

08017710 <_lseek_r>:
 8017710:	b538      	push	{r3, r4, r5, lr}
 8017712:	4d07      	ldr	r5, [pc, #28]	; (8017730 <_lseek_r+0x20>)
 8017714:	4604      	mov	r4, r0
 8017716:	4608      	mov	r0, r1
 8017718:	4611      	mov	r1, r2
 801771a:	2200      	movs	r2, #0
 801771c:	602a      	str	r2, [r5, #0]
 801771e:	461a      	mov	r2, r3
 8017720:	f7eb fdf2 	bl	8003308 <_lseek>
 8017724:	1c43      	adds	r3, r0, #1
 8017726:	d102      	bne.n	801772e <_lseek_r+0x1e>
 8017728:	682b      	ldr	r3, [r5, #0]
 801772a:	b103      	cbz	r3, 801772e <_lseek_r+0x1e>
 801772c:	6023      	str	r3, [r4, #0]
 801772e:	bd38      	pop	{r3, r4, r5, pc}
 8017730:	240055ec 	.word	0x240055ec

08017734 <_read_r>:
 8017734:	b538      	push	{r3, r4, r5, lr}
 8017736:	4d07      	ldr	r5, [pc, #28]	; (8017754 <_read_r+0x20>)
 8017738:	4604      	mov	r4, r0
 801773a:	4608      	mov	r0, r1
 801773c:	4611      	mov	r1, r2
 801773e:	2200      	movs	r2, #0
 8017740:	602a      	str	r2, [r5, #0]
 8017742:	461a      	mov	r2, r3
 8017744:	f7eb fd80 	bl	8003248 <_read>
 8017748:	1c43      	adds	r3, r0, #1
 801774a:	d102      	bne.n	8017752 <_read_r+0x1e>
 801774c:	682b      	ldr	r3, [r5, #0]
 801774e:	b103      	cbz	r3, 8017752 <_read_r+0x1e>
 8017750:	6023      	str	r3, [r4, #0]
 8017752:	bd38      	pop	{r3, r4, r5, pc}
 8017754:	240055ec 	.word	0x240055ec

08017758 <_init>:
 8017758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801775a:	bf00      	nop
 801775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801775e:	bc08      	pop	{r3}
 8017760:	469e      	mov	lr, r3
 8017762:	4770      	bx	lr

08017764 <_fini>:
 8017764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017766:	bf00      	nop
 8017768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801776a:	bc08      	pop	{r3}
 801776c:	469e      	mov	lr, r3
 801776e:	4770      	bx	lr
