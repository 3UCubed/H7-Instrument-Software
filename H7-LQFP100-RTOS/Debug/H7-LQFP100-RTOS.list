
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08016cc0  08016cc0  00026cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017158  08017158  00027158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017160  08017160  00027160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017164  08017164  00027164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  24000000  08017168  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000050f0  24000100  08017264  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240051f0  08017264  000351f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b07b  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007098  00000000  00000000  0006b1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028d0  00000000  00000000  00072240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000025e8  00000000  00000000  00074b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044ab0  00000000  00000000  000770f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c8fa  00000000  00000000  000bbba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194dec  00000000  00000000  000f84a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028d28e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b1e4  00000000  00000000  0028d2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016ca8 	.word	0x08016ca8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08016ca8 	.word	0x08016ca8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 ff67 	bl	800453c <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fda4 	bl	80021c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 f882 	bl	800578c <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fd97 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 f9c5 	bl	8004a44 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fd7e 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 f9b7 	bl	8004a44 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fd70 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 f9a9 	bl	8004a44 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fd62 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 f99b 	bl	8004a44 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fd54 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 f98c 	bl	8004a44 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fd45 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 f97d 	bl	8004a44 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fd36 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 f96e 	bl	8004a44 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fd27 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 f95f 	bl	8004a44 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fd18 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 f950 	bl	8004a44 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fd09 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 f941 	bl	8004a44 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fcfa 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 f932 	bl	8004a44 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fceb 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 fe4f 	bl	800453c <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fc8c 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 f8ba 	bl	8004a44 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fc73 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 f8ac 	bl	8004a44 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fc65 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 f89e 	bl	8004a44 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fc57 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 f890 	bl	8004a44 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fc49 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 fad2 	bl	8008fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 fac6 	bl	8008fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 faba 	bl	8008fa4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fc4d 	bl	8006314 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fb9e 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fb08 	bl	80040f4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fb02 	bl	80040f4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fbed 	bl	8006314 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fb3e 	bl	80021c0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f015 fb85 	bl	801629c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 ffb5 	bl	8005b08 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fb0c 	bl	80021c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 f9d0 	bl	8005f68 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 faf7 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 f9a5 	bl	8008fa4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fb38 	bl	8006314 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fa89 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 fefa 	bl	8005ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 ff11 	bl	8005aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 fed1 	bl	8005ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 fee8 	bl	8005aec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 fec9 	bl	8005ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 fee0 	bl	8005aec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 fec1 	bl	8005ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 fed8 	bl	8005aec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f004 feb9 	bl	8005ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f004 fed0 	bl	8005aec <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24000428 	.word	0x24000428

08000d74 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d90:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <MX_FREERTOS_Init+0x98>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4824      	ldr	r0, [pc, #144]	; (8000e28 <MX_FREERTOS_Init+0x9c>)
 8000d96:	f012 f8b3 	bl	8012f00 <osThreadNew>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <MX_FREERTOS_Init+0xa0>)
 8000d9e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <MX_FREERTOS_Init+0xa4>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4823      	ldr	r0, [pc, #140]	; (8000e34 <MX_FREERTOS_Init+0xa8>)
 8000da6:	f012 f8ab 	bl	8012f00 <osThreadNew>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <MX_FREERTOS_Init+0xac>)
 8000dae:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000db0:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <MX_FREERTOS_Init+0xb0>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <MX_FREERTOS_Init+0xb4>)
 8000db6:	f012 f8a3 	bl	8012f00 <osThreadNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <MX_FREERTOS_Init+0xb8>)
 8000dbe:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <MX_FREERTOS_Init+0xbc>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4821      	ldr	r0, [pc, #132]	; (8000e4c <MX_FREERTOS_Init+0xc0>)
 8000dc6:	f012 f89b 	bl	8012f00 <osThreadNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <MX_FREERTOS_Init+0xc4>)
 8000dce:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <MX_FREERTOS_Init+0xc8>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4820      	ldr	r0, [pc, #128]	; (8000e58 <MX_FREERTOS_Init+0xcc>)
 8000dd6:	f012 f893 	bl	8012f00 <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <MX_FREERTOS_Init+0xd0>)
 8000dde:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <MX_FREERTOS_Init+0xd4>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	481f      	ldr	r0, [pc, #124]	; (8000e64 <MX_FREERTOS_Init+0xd8>)
 8000de6:	f012 f88b 	bl	8012f00 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <MX_FREERTOS_Init+0xdc>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <MX_FREERTOS_Init+0xe0>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	481e      	ldr	r0, [pc, #120]	; (8000e70 <MX_FREERTOS_Init+0xe4>)
 8000df6:	f012 f883 	bl	8012f00 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <MX_FREERTOS_Init+0xe8>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <MX_FREERTOS_Init+0xec>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	481d      	ldr	r0, [pc, #116]	; (8000e7c <MX_FREERTOS_Init+0xf0>)
 8000e06:	f012 f87b 	bl	8012f00 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_FREERTOS_Init+0xf4>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <MX_FREERTOS_Init+0xf8>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <MX_FREERTOS_Init+0xfc>)
 8000e16:	f012 f873 	bl	8012f00 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <MX_FREERTOS_Init+0x100>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	08016f28 	.word	0x08016f28
 8000e28:	08000e91 	.word	0x08000e91
 8000e2c:	24000360 	.word	0x24000360
 8000e30:	08016f4c 	.word	0x08016f4c
 8000e34:	08000eb9 	.word	0x08000eb9
 8000e38:	24000364 	.word	0x24000364
 8000e3c:	08016f70 	.word	0x08016f70
 8000e40:	08000ee1 	.word	0x08000ee1
 8000e44:	24000368 	.word	0x24000368
 8000e48:	08016f94 	.word	0x08016f94
 8000e4c:	08000f09 	.word	0x08000f09
 8000e50:	2400036c 	.word	0x2400036c
 8000e54:	08016fb8 	.word	0x08016fb8
 8000e58:	08000f81 	.word	0x08000f81
 8000e5c:	24000370 	.word	0x24000370
 8000e60:	08016fdc 	.word	0x08016fdc
 8000e64:	08000ff9 	.word	0x08000ff9
 8000e68:	24000374 	.word	0x24000374
 8000e6c:	08017000 	.word	0x08017000
 8000e70:	080010a5 	.word	0x080010a5
 8000e74:	24000378 	.word	0x24000378
 8000e78:	08017024 	.word	0x08017024
 8000e7c:	080010d5 	.word	0x080010d5
 8000e80:	2400037c 	.word	0x2400037c
 8000e84:	08017048 	.word	0x08017048
 8000e88:	080011b5 	.word	0x080011b5
 8000e8c:	24000380 	.word	0x24000380

08000e90 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <PMT_init+0x24>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	f012 f9ae 	bl	8013204 <osEventFlagsWait>

		create_pmt_packet();
 8000ea8:	f001 f990 	bl	80021cc <create_pmt_packet>

		osThreadYield();
 8000eac:	f012 f8ba 	bl	8013024 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb0:	e7f2      	b.n	8000e98 <PMT_init+0x8>
 8000eb2:	bf00      	nop
 8000eb4:	240003d8 	.word	0x240003d8

08000eb8 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <ERPA_init+0x24>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2102      	movs	r1, #2
 8000ecc:	f012 f99a 	bl	8013204 <osEventFlagsWait>

		create_erpa_packet();
 8000ed0:	f001 f9c2 	bl	8002258 <create_erpa_packet>

		osThreadYield();
 8000ed4:	f012 f8a6 	bl	8013024 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ed8:	e7f2      	b.n	8000ec0 <ERPA_init+0x8>
 8000eda:	bf00      	nop
 8000edc:	240003d8 	.word	0x240003d8

08000ee0 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HK_init+0x24>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	f012 f986 	bl	8013204 <osEventFlagsWait>

		create_hk_packet();
 8000ef8:	f001 fa0c 	bl	8002314 <create_hk_packet>

		osThreadYield();
 8000efc:	f012 f892 	bl	8013024 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f00:	e7f2      	b.n	8000ee8 <HK_init+0x8>
 8000f02:	bf00      	nop
 8000f04:	240003d8 	.word	0x240003d8

08000f08 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <AUTOINIT_init+0x70>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	f012 f972 	bl	8013204 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e012      	b.n	8000f4c <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <AUTOINIT_init+0x74>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <AUTOINIT_init+0x74>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4413      	add	r3, r2
 8000f36:	889b      	ldrh	r3, [r3, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f008 f9fa 	bl	8009334 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f012 f88f 	bl	8013064 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	dde9      	ble.n	8000f26 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f52:	2308      	movs	r3, #8
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e008      	b.n	8000f6a <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 ff92 	bl	8003e88 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b0d      	cmp	r3, #13
 8000f6e:	ddf3      	ble.n	8000f58 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f70:	f012 f858 	bl	8013024 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f74:	e7cc      	b.n	8000f10 <AUTOINIT_init+0x8>
 8000f76:	bf00      	nop
 8000f78:	240003dc 	.word	0x240003dc
 8000f7c:	0801706c 	.word	0x0801706c

08000f80 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <AUTODEINIT_init+0x70>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f90:	2200      	movs	r2, #0
 8000f92:	2108      	movs	r1, #8
 8000f94:	f012 f936 	bl	8013204 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f98:	230d      	movs	r3, #13
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e008      	b.n	8000fb0 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 ff6f 	bl	8003e88 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	dcf3      	bgt.n	8000f9e <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	e012      	b.n	8000fe2 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <AUTODEINIT_init+0x74>)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <AUTODEINIT_init+0x74>)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4413      	add	r3, r2
 8000fcc:	889b      	ldrh	r3, [r3, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f008 f9af 	bl	8009334 <HAL_GPIO_WritePin>
			osDelay(100);
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	f012 f844 	bl	8013064 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dae9      	bge.n	8000fbc <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fe8:	f012 f81c 	bl	8013024 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fec:	e7cc      	b.n	8000f88 <AUTODEINIT_init+0x8>
 8000fee:	bf00      	nop
 8000ff0:	240003dc 	.word	0x240003dc
 8000ff4:	0801706c 	.word	0x0801706c

08000ff8 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <Voltage_Monitor_init+0xa8>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001008:	2200      	movs	r2, #0
 800100a:	2101      	movs	r1, #1
 800100c:	f012 f8fa 	bl	8013204 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8001010:	f002 ff64 	bl	8003edc <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 8001014:	f002 ff58 	bl	8003ec8 <get_rail_monitor>
 8001018:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e03b      	b.n	8001098 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	461a      	mov	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	789b      	ldrb	r3, [r3, #2]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d02d      	beq.n	8001092 <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4413      	add	r3, r2
 8001046:	8898      	ldrh	r0, [r3, #4]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	461a      	mov	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4413      	add	r3, r2
 8001058:	891b      	ldrh	r3, [r3, #8]
 800105a:	4619      	mov	r1, r3
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	461a      	mov	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4413      	add	r3, r2
 800106c:	88db      	ldrh	r3, [r3, #6]
 800106e:	461a      	mov	r2, r3
 8001070:	f002 ff96 	bl	8003fa0 <in_range>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10b      	bne.n	8001092 <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	785a      	ldrb	r2, [r3, #1]
 800108c:	3201      	adds	r2, #1
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b11      	cmp	r3, #17
 800109c:	ddc0      	ble.n	8001020 <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800109e:	e7af      	b.n	8001000 <Voltage_Monitor_init+0x8>
 80010a0:	240003dc 	.word	0x240003dc

080010a4 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <STOP_init+0x2c>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	f012 f8a4 	bl	8013204 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <STOP_init+0x2c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2102      	movs	r1, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f012 f86c 	bl	80131a0 <osEventFlagsClear>

	  enter_stop();
 80010c8:	f001 f85c 	bl	8002184 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010cc:	e7ee      	b.n	80010ac <STOP_init+0x8>
 80010ce:	bf00      	nop
 80010d0:	240003dc 	.word	0x240003dc

080010d4 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <Science_init+0xc0>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	f012 f88c 	bl	8013204 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e012      	b.n	8001118 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80010f2:	4a29      	ldr	r2, [pc, #164]	; (8001198 <Science_init+0xc4>)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <Science_init+0xc4>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f008 f914 	bl	8009334 <HAL_GPIO_WritePin>
			osDelay(200);
 800110c:	20c8      	movs	r0, #200	; 0xc8
 800110e:	f011 ffa9 	bl	8013064 <osDelay>
		for (int i = 0; i < 9; i++) {
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b08      	cmp	r3, #8
 800111c:	dde9      	ble.n	80010f2 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800111e:	2308      	movs	r3, #8
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	e008      	b.n	8001136 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2101      	movs	r1, #1
 800112a:	4618      	mov	r0, r3
 800112c:	f002 feac 	bl	8003e88 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3301      	adds	r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b10      	cmp	r3, #16
 800113a:	ddf3      	ble.n	8001124 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8001140:	2300      	movs	r3, #0
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2320      	movs	r3, #32
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <Science_init+0xc8>)
 8001148:	2100      	movs	r1, #0
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <Science_init+0xcc>)
 800114c:	f004 fd56 	bl	8005bfc <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <Science_init+0xd0>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 8001156:	210c      	movs	r1, #12
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <Science_init+0xd4>)
 800115a:	f00d fcef 	bl	800eb3c <HAL_TIM_OC_Start_IT>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 800115e:	2100      	movs	r1, #0
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <Science_init+0xd8>)
 8001162:	f00d fceb 	bl	800eb3c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <Science_init+0xdc>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2104      	movs	r1, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f011 ffd3 	bl	8013118 <osEventFlagsSet>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <Science_init+0xdc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2102      	movs	r1, #2
 8001178:	4618      	mov	r0, r3
 800117a:	f011 ffcd 	bl	8013118 <osEventFlagsSet>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <Science_init+0xdc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f011 ffc7 	bl	8013118 <osEventFlagsSet>
  __ASM volatile ("cpsie i" : : : "memory");
 800118a:	b662      	cpsie	i
}
 800118c:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 800118e:	f011 ff49 	bl	8013024 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001192:	e7a3      	b.n	80010dc <Science_init+0x8>
 8001194:	240003e0 	.word	0x240003e0
 8001198:	0801706c 	.word	0x0801706c
 800119c:	24000000 	.word	0x24000000
 80011a0:	240002d4 	.word	0x240002d4
 80011a4:	24000424 	.word	0x24000424
 80011a8:	24000634 	.word	0x24000634
 80011ac:	240005e8 	.word	0x240005e8
 80011b0:	240003d8 	.word	0x240003d8

080011b4 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <Idle_init+0x8c>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c4:	2200      	movs	r2, #0
 80011c6:	2102      	movs	r1, #2
 80011c8:	f012 f81c 	bl	8013204 <osEventFlagsWait>


		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet off
 80011cc:	210c      	movs	r1, #12
 80011ce:	481d      	ldr	r0, [pc, #116]	; (8001244 <Idle_init+0x90>)
 80011d0:	f00d fe0e 	bl	800edf0 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80011d4:	2100      	movs	r1, #0
 80011d6:	481c      	ldr	r0, [pc, #112]	; (8001248 <Idle_init+0x94>)
 80011d8:	f00d fe0a 	bl	800edf0 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <Idle_init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80011e2:	2100      	movs	r1, #0
 80011e4:	481a      	ldr	r0, [pc, #104]	; (8001250 <Idle_init+0x9c>)
 80011e6:	f004 fdc9 	bl	8005d7c <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011ea:	2310      	movs	r3, #16
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e008      	b.n	8001202 <Idle_init+0x4e>
			set_rail_monitor_enable(i, 0);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fe46 	bl	8003e88 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3b01      	subs	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b07      	cmp	r3, #7
 8001206:	dcf3      	bgt.n	80011f0 <Idle_init+0x3c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8001208:	2308      	movs	r3, #8
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	e012      	b.n	8001234 <Idle_init+0x80>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <Idle_init+0xa0>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <Idle_init+0xa0>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	f008 f886 	bl	8009334 <HAL_GPIO_WritePin>
			osDelay(200);
 8001228:	20c8      	movs	r0, #200	; 0xc8
 800122a:	f011 ff1b 	bl	8013064 <osDelay>
		for (int i = 8; i >= 0; i--) {
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3b01      	subs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	dae9      	bge.n	800120e <Idle_init+0x5a>
		}

		// Yield thread control
		osThreadYield();
 800123a:	f011 fef3 	bl	8013024 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800123e:	e7bd      	b.n	80011bc <Idle_init+0x8>
 8001240:	240003e0 	.word	0x240003e0
 8001244:	24000634 	.word	0x24000634
 8001248:	240005e8 	.word	0x240005e8
 800124c:	24000424 	.word	0x24000424
 8001250:	240002d4 	.word	0x240002d4
 8001254:	0801706c 	.word	0x0801706c

08001258 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <MX_GPIO_Init+0xe8>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	4a32      	ldr	r2, [pc, #200]	; (8001340 <MX_GPIO_Init+0xe8>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <MX_GPIO_Init+0xe8>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128c:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <MX_GPIO_Init+0xe8>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a2b      	ldr	r2, [pc, #172]	; (8001340 <MX_GPIO_Init+0xe8>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <MX_GPIO_Init+0xe8>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a23      	ldr	r2, [pc, #140]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_GPIO_Init+0xec>)
 80012ee:	f008 f821 	bl	8009334 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2164      	movs	r1, #100	; 0x64
 80012f6:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_GPIO_Init+0xf0>)
 80012f8:	f008 f81c 	bl	8009334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012fc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001300:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	480b      	ldr	r0, [pc, #44]	; (8001344 <MX_GPIO_Init+0xec>)
 8001316:	f007 fe45 	bl	8008fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800131a:	2364      	movs	r3, #100	; 0x64
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001322:	2302      	movs	r3, #2
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_GPIO_Init+0xf0>)
 8001332:	f007 fe37 	bl	8008fa4 <HAL_GPIO_Init>

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	58024400 	.word	0x58024400
 8001344:	58020800 	.word	0x58020800
 8001348:	58020400 	.word	0x58020400

0800134c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001352:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <MX_I2C1_Init+0x7c>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001358:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <MX_I2C1_Init+0x80>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <MX_I2C1_Init+0x78>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001364:	2201      	movs	r2, #1
 8001366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_I2C1_Init+0x78>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C1_Init+0x78>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001388:	f007 ffee 	bl	8009368 <HAL_I2C_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001392:	f000 ff15 	bl	80021c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <MX_I2C1_Init+0x78>)
 800139a:	f008 fd35 	bl	8009e08 <HAL_I2CEx_ConfigAnalogFilter>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013a4:	f000 ff0c 	bl	80021c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_I2C1_Init+0x78>)
 80013ac:	f008 fd77 	bl	8009e9e <HAL_I2CEx_ConfigDigitalFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 ff03 	bl	80021c0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f008 fdbc 	bl	8009f38 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	24000384 	.word	0x24000384
 80013c8:	40005400 	.word	0x40005400
 80013cc:	0020081f 	.word	0x0020081f

080013d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0ba      	sub	sp, #232	; 0xe8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	22c0      	movs	r2, #192	; 0xc0
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f014 ff53 	bl	801629c <memset>
  if(i2cHandle->Instance==I2C1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a27      	ldr	r2, [pc, #156]	; (8001498 <HAL_I2C_MspInit+0xc8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d146      	bne.n	800148e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001400:	f04f 0208 	mov.w	r2, #8
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4618      	mov	r0, r3
 8001418:	f009 fe50 	bl	800b0bc <HAL_RCCEx_PeriphCLKConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001422:	f000 fecd 	bl	80021c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_I2C_MspInit+0xcc>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001444:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144c:	2312      	movs	r3, #18
 800144e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800145e:	2304      	movs	r3, #4
 8001460:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <HAL_I2C_MspInit+0xd0>)
 800146c:	f007 fd9a 	bl	8008fa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800148e:	bf00      	nop
 8001490:	37e8      	adds	r7, #232	; 0xe8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40005400 	.word	0x40005400
 800149c:	58024400 	.word	0x58024400
 80014a0:	58020400 	.word	0x58020400

080014a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014a8:	f3bf 8f4f 	dsb	sy
}
 80014ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <__NVIC_SystemReset+0x24>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014b6:	4904      	ldr	r1, [pc, #16]	; (80014c8 <__NVIC_SystemReset+0x24>)
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_SystemReset+0x28>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014be:	f3bf 8f4f 	dsb	sy
}
 80014c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <__NVIC_SystemReset+0x20>
 80014c8:	e000ed00 	.word	0xe000ed00
 80014cc:	05fa0004 	.word	0x05fa0004

080014d0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d106      	bne.n	80014ee <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f011 fe16 	bl	8013118 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80014ec:	e023      	b.n	8001536 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	else if (htim == &htim2) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a15      	ldr	r2, [pc, #84]	; (8001548 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d106      	bne.n	8001504 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2102      	movs	r1, #2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f011 fe0b 	bl	8013118 <osEventFlagsSet>
}
 8001502:	e018      	b.n	8001536 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a11      	ldr	r2, [pc, #68]	; (800154c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d111      	bne.n	8001530 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	4618      	mov	r0, r3
 8001514:	f011 fe00 	bl	8013118 <osEventFlagsSet>
		if (HK_ENABLED){
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2104      	movs	r1, #4
 8001528:	4618      	mov	r0, r3
 800152a:	f011 fdf5 	bl	8013118 <osEventFlagsSet>
}
 800152e:	e002      	b.n	8001536 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8001530:	4809      	ldr	r0, [pc, #36]	; (8001558 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001532:	f014 ff29 	bl	8016388 <puts>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	240005e8 	.word	0x240005e8
 8001544:	240003d8 	.word	0x240003d8
 8001548:	24000634 	.word	0x24000634
 800154c:	24000680 	.word	0x24000680
 8001550:	240003dc 	.word	0x240003dc
 8001554:	24000424 	.word	0x24000424
 8001558:	08016d38 	.word	0x08016d38

0800155c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af02      	add	r7, sp, #8
 8001562:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	49f2      	ldr	r1, [pc, #968]	; (8001930 <HAL_UART_RxCpltCallback+0x3d4>)
 8001568:	48f2      	ldr	r0, [pc, #968]	; (8001934 <HAL_UART_RxCpltCallback+0x3d8>)
 800156a:	f00e ffc7 	bl	80104fc <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800156e:	4bf0      	ldr	r3, [pc, #960]	; (8001930 <HAL_UART_RxCpltCallback+0x3d4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2be0      	cmp	r3, #224	; 0xe0
 8001578:	f200 8419 	bhi.w	8001dae <HAL_UART_RxCpltCallback+0x852>
 800157c:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <HAL_UART_RxCpltCallback+0x28>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	0800191d 	.word	0x0800191d
 8001588:	08001961 	.word	0x08001961
 800158c:	080019d1 	.word	0x080019d1
 8001590:	08001a0b 	.word	0x08001a0b
 8001594:	08001a43 	.word	0x08001a43
 8001598:	08001a7d 	.word	0x08001a7d
 800159c:	08001ab9 	.word	0x08001ab9
 80015a0:	08001af5 	.word	0x08001af5
 80015a4:	08001b2f 	.word	0x08001b2f
 80015a8:	08001b63 	.word	0x08001b63
 80015ac:	08001b8f 	.word	0x08001b8f
 80015b0:	08001bbb 	.word	0x08001bbb
 80015b4:	08001be5 	.word	0x08001be5
 80015b8:	08001cc1 	.word	0x08001cc1
 80015bc:	08001d29 	.word	0x08001d29
 80015c0:	08001d51 	.word	0x08001d51
 80015c4:	08001909 	.word	0x08001909
 80015c8:	08001945 	.word	0x08001945
 80015cc:	080019b3 	.word	0x080019b3
 80015d0:	080019ef 	.word	0x080019ef
 80015d4:	08001a27 	.word	0x08001a27
 80015d8:	08001a5f 	.word	0x08001a5f
 80015dc:	08001a9b 	.word	0x08001a9b
 80015e0:	08001ad7 	.word	0x08001ad7
 80015e4:	08001b13 	.word	0x08001b13
 80015e8:	08001b4b 	.word	0x08001b4b
 80015ec:	08001b73 	.word	0x08001b73
 80015f0:	08001b9f 	.word	0x08001b9f
 80015f4:	08001bcb 	.word	0x08001bcb
 80015f8:	08001bf3 	.word	0x08001bf3
 80015fc:	08001d01 	.word	0x08001d01
 8001600:	08001daf 	.word	0x08001daf
 8001604:	08001daf 	.word	0x08001daf
 8001608:	08001daf 	.word	0x08001daf
 800160c:	08001daf 	.word	0x08001daf
 8001610:	08001daf 	.word	0x08001daf
 8001614:	08001daf 	.word	0x08001daf
 8001618:	08001daf 	.word	0x08001daf
 800161c:	08001daf 	.word	0x08001daf
 8001620:	08001daf 	.word	0x08001daf
 8001624:	08001daf 	.word	0x08001daf
 8001628:	08001daf 	.word	0x08001daf
 800162c:	08001daf 	.word	0x08001daf
 8001630:	08001daf 	.word	0x08001daf
 8001634:	08001daf 	.word	0x08001daf
 8001638:	08001daf 	.word	0x08001daf
 800163c:	08001daf 	.word	0x08001daf
 8001640:	08001daf 	.word	0x08001daf
 8001644:	08001daf 	.word	0x08001daf
 8001648:	08001daf 	.word	0x08001daf
 800164c:	08001daf 	.word	0x08001daf
 8001650:	08001daf 	.word	0x08001daf
 8001654:	08001daf 	.word	0x08001daf
 8001658:	08001daf 	.word	0x08001daf
 800165c:	08001daf 	.word	0x08001daf
 8001660:	08001daf 	.word	0x08001daf
 8001664:	08001daf 	.word	0x08001daf
 8001668:	08001daf 	.word	0x08001daf
 800166c:	08001daf 	.word	0x08001daf
 8001670:	08001daf 	.word	0x08001daf
 8001674:	08001daf 	.word	0x08001daf
 8001678:	08001daf 	.word	0x08001daf
 800167c:	08001daf 	.word	0x08001daf
 8001680:	08001daf 	.word	0x08001daf
 8001684:	08001daf 	.word	0x08001daf
 8001688:	08001daf 	.word	0x08001daf
 800168c:	08001daf 	.word	0x08001daf
 8001690:	08001daf 	.word	0x08001daf
 8001694:	08001daf 	.word	0x08001daf
 8001698:	08001daf 	.word	0x08001daf
 800169c:	08001daf 	.word	0x08001daf
 80016a0:	08001daf 	.word	0x08001daf
 80016a4:	08001daf 	.word	0x08001daf
 80016a8:	08001daf 	.word	0x08001daf
 80016ac:	08001daf 	.word	0x08001daf
 80016b0:	08001daf 	.word	0x08001daf
 80016b4:	08001daf 	.word	0x08001daf
 80016b8:	08001daf 	.word	0x08001daf
 80016bc:	08001daf 	.word	0x08001daf
 80016c0:	08001daf 	.word	0x08001daf
 80016c4:	08001daf 	.word	0x08001daf
 80016c8:	08001daf 	.word	0x08001daf
 80016cc:	08001daf 	.word	0x08001daf
 80016d0:	08001daf 	.word	0x08001daf
 80016d4:	08001daf 	.word	0x08001daf
 80016d8:	08001daf 	.word	0x08001daf
 80016dc:	08001daf 	.word	0x08001daf
 80016e0:	08001daf 	.word	0x08001daf
 80016e4:	08001daf 	.word	0x08001daf
 80016e8:	08001daf 	.word	0x08001daf
 80016ec:	08001daf 	.word	0x08001daf
 80016f0:	08001daf 	.word	0x08001daf
 80016f4:	08001daf 	.word	0x08001daf
 80016f8:	08001daf 	.word	0x08001daf
 80016fc:	08001daf 	.word	0x08001daf
 8001700:	08001daf 	.word	0x08001daf
 8001704:	08001daf 	.word	0x08001daf
 8001708:	08001daf 	.word	0x08001daf
 800170c:	08001daf 	.word	0x08001daf
 8001710:	08001daf 	.word	0x08001daf
 8001714:	08001daf 	.word	0x08001daf
 8001718:	08001daf 	.word	0x08001daf
 800171c:	08001daf 	.word	0x08001daf
 8001720:	08001daf 	.word	0x08001daf
 8001724:	08001daf 	.word	0x08001daf
 8001728:	08001daf 	.word	0x08001daf
 800172c:	08001daf 	.word	0x08001daf
 8001730:	08001daf 	.word	0x08001daf
 8001734:	08001daf 	.word	0x08001daf
 8001738:	08001daf 	.word	0x08001daf
 800173c:	08001daf 	.word	0x08001daf
 8001740:	08001daf 	.word	0x08001daf
 8001744:	08001daf 	.word	0x08001daf
 8001748:	08001daf 	.word	0x08001daf
 800174c:	08001daf 	.word	0x08001daf
 8001750:	08001daf 	.word	0x08001daf
 8001754:	08001daf 	.word	0x08001daf
 8001758:	08001daf 	.word	0x08001daf
 800175c:	08001daf 	.word	0x08001daf
 8001760:	08001daf 	.word	0x08001daf
 8001764:	08001daf 	.word	0x08001daf
 8001768:	08001daf 	.word	0x08001daf
 800176c:	08001daf 	.word	0x08001daf
 8001770:	08001daf 	.word	0x08001daf
 8001774:	08001daf 	.word	0x08001daf
 8001778:	08001daf 	.word	0x08001daf
 800177c:	08001daf 	.word	0x08001daf
 8001780:	08001daf 	.word	0x08001daf
 8001784:	08001daf 	.word	0x08001daf
 8001788:	08001daf 	.word	0x08001daf
 800178c:	08001daf 	.word	0x08001daf
 8001790:	08001daf 	.word	0x08001daf
 8001794:	08001daf 	.word	0x08001daf
 8001798:	08001daf 	.word	0x08001daf
 800179c:	08001daf 	.word	0x08001daf
 80017a0:	08001daf 	.word	0x08001daf
 80017a4:	08001daf 	.word	0x08001daf
 80017a8:	08001daf 	.word	0x08001daf
 80017ac:	08001daf 	.word	0x08001daf
 80017b0:	08001daf 	.word	0x08001daf
 80017b4:	08001daf 	.word	0x08001daf
 80017b8:	08001daf 	.word	0x08001daf
 80017bc:	08001daf 	.word	0x08001daf
 80017c0:	08001daf 	.word	0x08001daf
 80017c4:	08001daf 	.word	0x08001daf
 80017c8:	08001daf 	.word	0x08001daf
 80017cc:	08001daf 	.word	0x08001daf
 80017d0:	08001daf 	.word	0x08001daf
 80017d4:	08001daf 	.word	0x08001daf
 80017d8:	08001daf 	.word	0x08001daf
 80017dc:	08001daf 	.word	0x08001daf
 80017e0:	08001daf 	.word	0x08001daf
 80017e4:	08001daf 	.word	0x08001daf
 80017e8:	08001daf 	.word	0x08001daf
 80017ec:	08001daf 	.word	0x08001daf
 80017f0:	08001daf 	.word	0x08001daf
 80017f4:	08001daf 	.word	0x08001daf
 80017f8:	08001daf 	.word	0x08001daf
 80017fc:	08001daf 	.word	0x08001daf
 8001800:	08001daf 	.word	0x08001daf
 8001804:	08001daf 	.word	0x08001daf
 8001808:	08001daf 	.word	0x08001daf
 800180c:	08001daf 	.word	0x08001daf
 8001810:	08001daf 	.word	0x08001daf
 8001814:	08001daf 	.word	0x08001daf
 8001818:	08001daf 	.word	0x08001daf
 800181c:	08001daf 	.word	0x08001daf
 8001820:	08001daf 	.word	0x08001daf
 8001824:	08001daf 	.word	0x08001daf
 8001828:	08001daf 	.word	0x08001daf
 800182c:	08001daf 	.word	0x08001daf
 8001830:	08001daf 	.word	0x08001daf
 8001834:	08001daf 	.word	0x08001daf
 8001838:	08001daf 	.word	0x08001daf
 800183c:	08001daf 	.word	0x08001daf
 8001840:	08001d8d 	.word	0x08001d8d
 8001844:	08001daf 	.word	0x08001daf
 8001848:	08001daf 	.word	0x08001daf
 800184c:	08001daf 	.word	0x08001daf
 8001850:	08001daf 	.word	0x08001daf
 8001854:	08001daf 	.word	0x08001daf
 8001858:	08001daf 	.word	0x08001daf
 800185c:	08001daf 	.word	0x08001daf
 8001860:	08001daf 	.word	0x08001daf
 8001864:	08001daf 	.word	0x08001daf
 8001868:	08001daf 	.word	0x08001daf
 800186c:	08001daf 	.word	0x08001daf
 8001870:	08001daf 	.word	0x08001daf
 8001874:	08001daf 	.word	0x08001daf
 8001878:	08001daf 	.word	0x08001daf
 800187c:	08001daf 	.word	0x08001daf
 8001880:	08001d93 	.word	0x08001d93
 8001884:	08001daf 	.word	0x08001daf
 8001888:	08001daf 	.word	0x08001daf
 800188c:	08001daf 	.word	0x08001daf
 8001890:	08001daf 	.word	0x08001daf
 8001894:	08001daf 	.word	0x08001daf
 8001898:	08001daf 	.word	0x08001daf
 800189c:	08001daf 	.word	0x08001daf
 80018a0:	08001daf 	.word	0x08001daf
 80018a4:	08001daf 	.word	0x08001daf
 80018a8:	08001daf 	.word	0x08001daf
 80018ac:	08001daf 	.word	0x08001daf
 80018b0:	08001daf 	.word	0x08001daf
 80018b4:	08001daf 	.word	0x08001daf
 80018b8:	08001daf 	.word	0x08001daf
 80018bc:	08001daf 	.word	0x08001daf
 80018c0:	08001da1 	.word	0x08001da1
 80018c4:	08001d79 	.word	0x08001d79
 80018c8:	08001daf 	.word	0x08001daf
 80018cc:	08001daf 	.word	0x08001daf
 80018d0:	08001daf 	.word	0x08001daf
 80018d4:	08001daf 	.word	0x08001daf
 80018d8:	08001daf 	.word	0x08001daf
 80018dc:	08001daf 	.word	0x08001daf
 80018e0:	08001daf 	.word	0x08001daf
 80018e4:	08001daf 	.word	0x08001daf
 80018e8:	08001daf 	.word	0x08001daf
 80018ec:	08001daf 	.word	0x08001daf
 80018f0:	08001daf 	.word	0x08001daf
 80018f4:	08001daf 	.word	0x08001daf
 80018f8:	08001daf 	.word	0x08001daf
 80018fc:	08001daf 	.word	0x08001daf
 8001900:	08001daf 	.word	0x08001daf
 8001904:	08001d65 	.word	0x08001d65
	case 0x10: {
		printf("SDN1 ON\n");
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <HAL_UART_RxCpltCallback+0x3dc>)
 800190a:	f014 fd3d 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_UART_RxCpltCallback+0x3e0>)
 8001910:	2104      	movs	r1, #4
 8001912:	2201      	movs	r2, #1
 8001914:	4618      	mov	r0, r3
 8001916:	f007 fd0d 	bl	8009334 <HAL_GPIO_WritePin>
		break;
 800191a:	e253      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <HAL_UART_RxCpltCallback+0x3e4>)
 800191e:	f014 fd33 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_UART_RxCpltCallback+0x3e0>)
 8001924:	2104      	movs	r1, #4
 8001926:	2200      	movs	r2, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f007 fd03 	bl	8009334 <HAL_GPIO_WritePin>
		break;
 800192e:	e249      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
 8001930:	240003e4 	.word	0x240003e4
 8001934:	240006cc 	.word	0x240006cc
 8001938:	08016d50 	.word	0x08016d50
 800193c:	58020400 	.word	0x58020400
 8001940:	08016d58 	.word	0x08016d58
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001944:	48bb      	ldr	r0, [pc, #748]	; (8001c34 <HAL_UART_RxCpltCallback+0x6d8>)
 8001946:	f014 fd1f 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800194a:	4bbb      	ldr	r3, [pc, #748]	; (8001c38 <HAL_UART_RxCpltCallback+0x6dc>)
 800194c:	2120      	movs	r1, #32
 800194e:	2201      	movs	r2, #1
 8001950:	4618      	mov	r0, r3
 8001952:	f007 fcef 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8001956:	2101      	movs	r1, #1
 8001958:	2008      	movs	r0, #8
 800195a:	f002 fa95 	bl	8003e88 <set_rail_monitor_enable>
		break;
 800195e:	e231      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001960:	48b6      	ldr	r0, [pc, #728]	; (8001c3c <HAL_UART_RxCpltCallback+0x6e0>)
 8001962:	f014 fd11 	bl	8016388 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8001966:	2308      	movs	r3, #8
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e00f      	b.n	800198c <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800196c:	4ab4      	ldr	r2, [pc, #720]	; (8001c40 <HAL_UART_RxCpltCallback+0x6e4>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001974:	4ab2      	ldr	r2, [pc, #712]	; (8001c40 <HAL_UART_RxCpltCallback+0x6e4>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	889b      	ldrh	r3, [r3, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	4619      	mov	r1, r3
 8001982:	f007 fcd7 	bl	8009334 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3b01      	subs	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	dcec      	bgt.n	800196c <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001992:	2310      	movs	r3, #16
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e008      	b.n	80019aa <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fa72 	bl	8003e88 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b07      	cmp	r3, #7
 80019ae:	dcf3      	bgt.n	8001998 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80019b0:	e208      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80019b2:	48a4      	ldr	r0, [pc, #656]	; (8001c44 <HAL_UART_RxCpltCallback+0x6e8>)
 80019b4:	f014 fce8 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80019b8:	4ba3      	ldr	r3, [pc, #652]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	2201      	movs	r2, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f007 fcb7 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80019c6:	2101      	movs	r1, #1
 80019c8:	2009      	movs	r0, #9
 80019ca:	f002 fa5d 	bl	8003e88 <set_rail_monitor_enable>

		break;
 80019ce:	e1f9      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80019d0:	489e      	ldr	r0, [pc, #632]	; (8001c4c <HAL_UART_RxCpltCallback+0x6f0>)
 80019d2:	f014 fcd9 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80019d6:	4b9c      	ldr	r3, [pc, #624]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 80019d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019dc:	2200      	movs	r2, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f007 fca8 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80019e4:	2100      	movs	r1, #0
 80019e6:	2009      	movs	r0, #9
 80019e8:	f002 fa4e 	bl	8003e88 <set_rail_monitor_enable>
		break;
 80019ec:	e1ea      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80019ee:	4898      	ldr	r0, [pc, #608]	; (8001c50 <HAL_UART_RxCpltCallback+0x6f4>)
 80019f0:	f014 fcca 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 80019f4:	4b94      	ldr	r3, [pc, #592]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	2201      	movs	r2, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f007 fc9a 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001a00:	2101      	movs	r1, #1
 8001a02:	200a      	movs	r0, #10
 8001a04:	f002 fa40 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001a08:	e1dc      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001a0a:	4892      	ldr	r0, [pc, #584]	; (8001c54 <HAL_UART_RxCpltCallback+0x6f8>)
 8001a0c:	f014 fcbc 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001a10:	4b8d      	ldr	r3, [pc, #564]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	2200      	movs	r2, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f007 fc8c 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	200a      	movs	r0, #10
 8001a20:	f002 fa32 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001a24:	e1ce      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001a26:	488c      	ldr	r0, [pc, #560]	; (8001c58 <HAL_UART_RxCpltCallback+0x6fc>)
 8001a28:	f014 fcae 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001a2c:	4b86      	ldr	r3, [pc, #536]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a2e:	2140      	movs	r1, #64	; 0x40
 8001a30:	2201      	movs	r2, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f007 fc7e 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	200b      	movs	r0, #11
 8001a3c:	f002 fa24 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001a40:	e1c0      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001a42:	4886      	ldr	r0, [pc, #536]	; (8001c5c <HAL_UART_RxCpltCallback+0x700>)
 8001a44:	f014 fca0 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001a48:	4b7f      	ldr	r3, [pc, #508]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f007 fc70 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001a54:	2100      	movs	r1, #0
 8001a56:	200b      	movs	r0, #11
 8001a58:	f002 fa16 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001a5c:	e1b2      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001a5e:	4880      	ldr	r0, [pc, #512]	; (8001c60 <HAL_UART_RxCpltCallback+0x704>)
 8001a60:	f014 fc92 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001a64:	4b78      	ldr	r3, [pc, #480]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 fc61 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001a72:	2101      	movs	r1, #1
 8001a74:	200c      	movs	r0, #12
 8001a76:	f002 fa07 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001a7a:	e1a3      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001a7c:	4879      	ldr	r0, [pc, #484]	; (8001c64 <HAL_UART_RxCpltCallback+0x708>)
 8001a7e:	f014 fc83 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001a82:	4b71      	ldr	r3, [pc, #452]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f007 fc52 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001a90:	2100      	movs	r1, #0
 8001a92:	200c      	movs	r0, #12
 8001a94:	f002 f9f8 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001a98:	e194      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001a9a:	4873      	ldr	r0, [pc, #460]	; (8001c68 <HAL_UART_RxCpltCallback+0x70c>)
 8001a9c:	f014 fc74 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001aa0:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f007 fc43 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	200d      	movs	r0, #13
 8001ab2:	f002 f9e9 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001ab6:	e185      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001ab8:	486c      	ldr	r0, [pc, #432]	; (8001c6c <HAL_UART_RxCpltCallback+0x710>)
 8001aba:	f014 fc65 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001abe:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f007 fc34 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001acc:	2100      	movs	r1, #0
 8001ace:	200d      	movs	r0, #13
 8001ad0:	f002 f9da 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001ad4:	e176      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001ad6:	4866      	ldr	r0, [pc, #408]	; (8001c70 <HAL_UART_RxCpltCallback+0x714>)
 8001ad8:	f014 fc56 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001adc:	4b5a      	ldr	r3, [pc, #360]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 fc25 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001aea:	2101      	movs	r1, #1
 8001aec:	200f      	movs	r0, #15
 8001aee:	f002 f9cb 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001af2:	e167      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001af4:	485f      	ldr	r0, [pc, #380]	; (8001c74 <HAL_UART_RxCpltCallback+0x718>)
 8001af6:	f014 fc47 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001afa:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001afc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b00:	2200      	movs	r2, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f007 fc16 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f002 f9bc 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001b10:	e158      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001b12:	4859      	ldr	r0, [pc, #356]	; (8001c78 <HAL_UART_RxCpltCallback+0x71c>)
 8001b14:	f014 fc38 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001b18:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b1a:	2140      	movs	r1, #64	; 0x40
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 fc08 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001b24:	2101      	movs	r1, #1
 8001b26:	2010      	movs	r0, #16
 8001b28:	f002 f9ae 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001b2c:	e14a      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001b2e:	4853      	ldr	r0, [pc, #332]	; (8001c7c <HAL_UART_RxCpltCallback+0x720>)
 8001b30:	f014 fc2a 	bl	8016388 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001b34:	4b40      	ldr	r3, [pc, #256]	; (8001c38 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b36:	2140      	movs	r1, #64	; 0x40
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f007 fbfa 	bl	8009334 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001b40:	2100      	movs	r1, #0
 8001b42:	2010      	movs	r0, #16
 8001b44:	f002 f9a0 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001b48:	e13c      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001b4a:	484d      	ldr	r0, [pc, #308]	; (8001c80 <HAL_UART_RxCpltCallback+0x724>)
 8001b4c:	f014 fc1c 	bl	8016388 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2320      	movs	r3, #32
 8001b56:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <HAL_UART_RxCpltCallback+0x728>)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	484b      	ldr	r0, [pc, #300]	; (8001c88 <HAL_UART_RxCpltCallback+0x72c>)
 8001b5c:	f004 f84e 	bl	8005bfc <HAL_DAC_Start_DMA>
		break;
 8001b60:	e130      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001b62:	484a      	ldr	r0, [pc, #296]	; (8001c8c <HAL_UART_RxCpltCallback+0x730>)
 8001b64:	f014 fc10 	bl	8016388 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4847      	ldr	r0, [pc, #284]	; (8001c88 <HAL_UART_RxCpltCallback+0x72c>)
 8001b6c:	f004 f906 	bl	8005d7c <HAL_DAC_Stop_DMA>
		break;
 8001b70:	e128      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001b72:	4847      	ldr	r0, [pc, #284]	; (8001c90 <HAL_UART_RxCpltCallback+0x734>)
 8001b74:	f014 fc08 	bl	8016388 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001b78:	210c      	movs	r1, #12
 8001b7a:	4846      	ldr	r0, [pc, #280]	; (8001c94 <HAL_UART_RxCpltCallback+0x738>)
 8001b7c:	f00c ffde 	bl	800eb3c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001b80:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <HAL_UART_RxCpltCallback+0x73c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2102      	movs	r1, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f011 fac6 	bl	8013118 <osEventFlagsSet>
		break;
 8001b8c:	e11a      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001b8e:	4843      	ldr	r0, [pc, #268]	; (8001c9c <HAL_UART_RxCpltCallback+0x740>)
 8001b90:	f014 fbfa 	bl	8016388 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001b94:	210c      	movs	r1, #12
 8001b96:	483f      	ldr	r0, [pc, #252]	; (8001c94 <HAL_UART_RxCpltCallback+0x738>)
 8001b98:	f00d f92a 	bl	800edf0 <HAL_TIM_OC_Stop_IT>
		break;
 8001b9c:	e112      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001b9e:	4840      	ldr	r0, [pc, #256]	; (8001ca0 <HAL_UART_RxCpltCallback+0x744>)
 8001ba0:	f014 fbf2 	bl	8016388 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	483f      	ldr	r0, [pc, #252]	; (8001ca4 <HAL_UART_RxCpltCallback+0x748>)
 8001ba8:	f00c ffc8 	bl	800eb3c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001bac:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <HAL_UART_RxCpltCallback+0x73c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f011 fab0 	bl	8013118 <osEventFlagsSet>
		break;
 8001bb8:	e104      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001bba:	483b      	ldr	r0, [pc, #236]	; (8001ca8 <HAL_UART_RxCpltCallback+0x74c>)
 8001bbc:	f014 fbe4 	bl	8016388 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4838      	ldr	r0, [pc, #224]	; (8001ca4 <HAL_UART_RxCpltCallback+0x748>)
 8001bc4:	f00d f914 	bl	800edf0 <HAL_TIM_OC_Stop_IT>
		break;
 8001bc8:	e0fc      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001bca:	4838      	ldr	r0, [pc, #224]	; (8001cac <HAL_UART_RxCpltCallback+0x750>)
 8001bcc:	f014 fbdc 	bl	8016388 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001bd0:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_UART_RxCpltCallback+0x73c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f011 fa9e 	bl	8013118 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_UART_RxCpltCallback+0x754>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
		break;
 8001be2:	e0ef      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001be4:	4833      	ldr	r0, [pc, #204]	; (8001cb4 <HAL_UART_RxCpltCallback+0x758>)
 8001be6:	f014 fbcf 	bl	8016388 <puts>
		HK_ENABLED = 0;
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_UART_RxCpltCallback+0x754>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
		break;
 8001bf0:	e0e8      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001bf2:	4831      	ldr	r0, [pc, #196]	; (8001cb8 <HAL_UART_RxCpltCallback+0x75c>)
 8001bf4:	f014 fbc8 	bl	8016388 <puts>
		if (step < 14) {
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <HAL_UART_RxCpltCallback+0x760>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b0d      	cmp	r3, #13
 8001c00:	f200 80d9 	bhi.w	8001db6 <HAL_UART_RxCpltCallback+0x85a>
			step += 2;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_UART_RxCpltCallback+0x760>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_UART_RxCpltCallback+0x760>)
 8001c10:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_UART_RxCpltCallback+0x760>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_UART_RxCpltCallback+0x728>)
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	4818      	ldr	r0, [pc, #96]	; (8001c88 <HAL_UART_RxCpltCallback+0x72c>)
 8001c26:	f004 f94c 	bl	8005ec2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4816      	ldr	r0, [pc, #88]	; (8001c88 <HAL_UART_RxCpltCallback+0x72c>)
 8001c2e:	f003 ff8d 	bl	8005b4c <HAL_DAC_Start>
		}
		break;
 8001c32:	e0c0      	b.n	8001db6 <HAL_UART_RxCpltCallback+0x85a>
 8001c34:	08016d64 	.word	0x08016d64
 8001c38:	58020400 	.word	0x58020400
 8001c3c:	08016d70 	.word	0x08016d70
 8001c40:	0801706c 	.word	0x0801706c
 8001c44:	08016d7c 	.word	0x08016d7c
 8001c48:	58020800 	.word	0x58020800
 8001c4c:	08016d88 	.word	0x08016d88
 8001c50:	08016d98 	.word	0x08016d98
 8001c54:	08016da4 	.word	0x08016da4
 8001c58:	08016db0 	.word	0x08016db0
 8001c5c:	08016dbc 	.word	0x08016dbc
 8001c60:	08016dcc 	.word	0x08016dcc
 8001c64:	08016dd8 	.word	0x08016dd8
 8001c68:	08016de4 	.word	0x08016de4
 8001c6c:	08016df0 	.word	0x08016df0
 8001c70:	08016dfc 	.word	0x08016dfc
 8001c74:	08016e0c 	.word	0x08016e0c
 8001c78:	08016e1c 	.word	0x08016e1c
 8001c7c:	08016e28 	.word	0x08016e28
 8001c80:	08016e38 	.word	0x08016e38
 8001c84:	24000000 	.word	0x24000000
 8001c88:	240002d4 	.word	0x240002d4
 8001c8c:	08016e48 	.word	0x08016e48
 8001c90:	08016e58 	.word	0x08016e58
 8001c94:	24000634 	.word	0x24000634
 8001c98:	240003d8 	.word	0x240003d8
 8001c9c:	08016e60 	.word	0x08016e60
 8001ca0:	08016e6c 	.word	0x08016e6c
 8001ca4:	240005e8 	.word	0x240005e8
 8001ca8:	08016e74 	.word	0x08016e74
 8001cac:	08016e7c 	.word	0x08016e7c
 8001cb0:	24000424 	.word	0x24000424
 8001cb4:	08016e84 	.word	0x08016e84
 8001cb8:	08016e8c 	.word	0x08016e8c
 8001cbc:	24000425 	.word	0x24000425
	}
	case 0x0D: {
		printf("Step Down\n");
 8001cc0:	4842      	ldr	r0, [pc, #264]	; (8001dcc <HAL_UART_RxCpltCallback+0x870>)
 8001cc2:	f014 fb61 	bl	8016388 <puts>
		if (step > 1) {
 8001cc6:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <HAL_UART_RxCpltCallback+0x874>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d974      	bls.n	8001dba <HAL_UART_RxCpltCallback+0x85e>
			step -= 2;
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_UART_RxCpltCallback+0x874>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3b02      	subs	r3, #2
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_UART_RxCpltCallback+0x874>)
 8001cdc:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001cde:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <HAL_UART_RxCpltCallback+0x874>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_UART_RxCpltCallback+0x878>)
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4839      	ldr	r0, [pc, #228]	; (8001dd8 <HAL_UART_RxCpltCallback+0x87c>)
 8001cf2:	f004 f8e6 	bl	8005ec2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4837      	ldr	r0, [pc, #220]	; (8001dd8 <HAL_UART_RxCpltCallback+0x87c>)
 8001cfa:	f003 ff27 	bl	8005b4c <HAL_DAC_Start>
		}
		break;
 8001cfe:	e05c      	b.n	8001dba <HAL_UART_RxCpltCallback+0x85e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001d00:	4836      	ldr	r0, [pc, #216]	; (8001ddc <HAL_UART_RxCpltCallback+0x880>)
 8001d02:	f014 fb41 	bl	8016388 <puts>
		if (cadence <= 50000) {
 8001d06:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d855      	bhi.n	8001dbe <HAL_UART_RxCpltCallback+0x862>
			cadence *= 2;
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d1a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d20:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d26:	e04a      	b.n	8001dbe <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001d28:	482e      	ldr	r0, [pc, #184]	; (8001de4 <HAL_UART_RxCpltCallback+0x888>)
 8001d2a:	f014 fb2d 	bl	8016388 <puts>
		if (cadence >= 6250) {
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f641 0269 	movw	r2, #6249	; 0x1869
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d943      	bls.n	8001dc2 <HAL_UART_RxCpltCallback+0x866>
			cadence /= 2;
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	4a27      	ldr	r2, [pc, #156]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d42:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d4e:	e038      	b.n	8001dc2 <HAL_UART_RxCpltCallback+0x866>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001d50:	4825      	ldr	r0, [pc, #148]	; (8001de8 <HAL_UART_RxCpltCallback+0x88c>)
 8001d52:	f014 fb19 	bl	8016388 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_UART_RxCpltCallback+0x890>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f011 f9db 	bl	8013118 <osEventFlagsSet>
		break;
 8001d62:	e02f      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001d64:	4822      	ldr	r0, [pc, #136]	; (8001df0 <HAL_UART_RxCpltCallback+0x894>)
 8001d66:	f014 fb0f 	bl	8016388 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_UART_RxCpltCallback+0x890>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4618      	mov	r0, r3
 8001d72:	f011 f9d1 	bl	8013118 <osEventFlagsSet>
		break;
 8001d76:	e025      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001d78:	481e      	ldr	r0, [pc, #120]	; (8001df4 <HAL_UART_RxCpltCallback+0x898>)
 8001d7a:	f014 fb05 	bl	8016388 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_UART_RxCpltCallback+0x890>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2108      	movs	r1, #8
 8001d84:	4618      	mov	r0, r3
 8001d86:	f011 f9c7 	bl	8013118 <osEventFlagsSet>
		break;
 8001d8a:	e01b      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xAF: {
		sync();
 8001d8c:	f000 f960 	bl	8002050 <sync>
		break;
 8001d90:	e018      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_UART_RxCpltCallback+0x89c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2101      	movs	r1, #1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f011 f9bd 	bl	8013118 <osEventFlagsSet>
		break;
 8001d9e:	e011      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_UART_RxCpltCallback+0x89c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2102      	movs	r1, #2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f011 f9b6 	bl	8013118 <osEventFlagsSet>
		break;
 8001dac:	e00a      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	default: {
		printf("Unknown Command\n");
 8001dae:	4813      	ldr	r0, [pc, #76]	; (8001dfc <HAL_UART_RxCpltCallback+0x8a0>)
 8001db0:	f014 faea 	bl	8016388 <puts>
		break;
 8001db4:	e006      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001db6:	bf00      	nop
 8001db8:	e004      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dba:	bf00      	nop
 8001dbc:	e002      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dbe:	bf00      	nop
 8001dc0:	e000      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dc2:	bf00      	nop
	}
	}
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	08016e94 	.word	0x08016e94
 8001dd0:	24000425 	.word	0x24000425
 8001dd4:	24000000 	.word	0x24000000
 8001dd8:	240002d4 	.word	0x240002d4
 8001ddc:	08016ea0 	.word	0x08016ea0
 8001de0:	24000080 	.word	0x24000080
 8001de4:	08016eac 	.word	0x08016eac
 8001de8:	08016eb8 	.word	0x08016eb8
 8001dec:	240003dc 	.word	0x240003dc
 8001df0:	08016ec8 	.word	0x08016ec8
 8001df4:	08016ed4 	.word	0x08016ed4
 8001df8:	240003e0 	.word	0x240003e0
 8001dfc:	08016ee0 	.word	0x08016ee0

08001e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e04:	f002 f90e 	bl	8004024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e08:	f000 f826 	bl	8001e58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e0c:	f000 f8a4 	bl	8001f58 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e10:	f7ff fa22 	bl	8001258 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e14:	f7fe ff68 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001e18:	f001 fae4 	bl	80033e4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001e1c:	f001 fd6c 	bl	80038f8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001e20:	f7ff fa94 	bl	800134c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001e24:	f000 fe36 	bl	8002a94 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001e28:	f001 fa66 	bl	80032f8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001e2c:	f001 f9b6 	bl	800319c <MX_TIM1_Init>
  MX_ADC3_Init();
 8001e30:	f7fe fcfa 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001e34:	f7fe fbd6 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001e38:	f7fe fea2 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001e3c:	f000 fdd2 	bl	80029e4 <MX_SPI1_Init>
  MX_RTC_Init();
 8001e40:	f000 fbb6 	bl	80025b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001e44:	f000 f8b8 	bl	8001fb8 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e48:	f011 f810 	bl	8012e6c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e4c:	f7fe ff9e 	bl	8000d8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e50:	f011 f830 	bl	8012eb4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001e54:	e7fe      	b.n	8001e54 <main+0x54>
	...

08001e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b09c      	sub	sp, #112	; 0x70
 8001e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e62:	224c      	movs	r2, #76	; 0x4c
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f014 fa18 	bl	801629c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2220      	movs	r2, #32
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f014 fa12 	bl	801629c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f008 f8bd 	bl	8009ff8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <SystemClock_Config+0xf8>)
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	4a32      	ldr	r2, [pc, #200]	; (8001f50 <SystemClock_Config+0xf8>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e8e:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <SystemClock_Config+0xf8>)
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <SystemClock_Config+0xfc>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ea0:	4a2c      	ldr	r2, [pc, #176]	; (8001f54 <SystemClock_Config+0xfc>)
 8001ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <SystemClock_Config+0xfc>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001eb4:	bf00      	nop
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <SystemClock_Config+0xfc>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec2:	d1f8      	bne.n	8001eb6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001ece:	2309      	movs	r3, #9
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed2:	2340      	movs	r3, #64	; 0x40
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eda:	2302      	movs	r3, #2
 8001edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f02:	4618      	mov	r0, r3
 8001f04:	f008 f8b2 	bl	800a06c <HAL_RCC_OscConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001f0e:	f000 f957 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f12:	233f      	movs	r3, #63	; 0x3f
 8001f14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f16:	2303      	movs	r3, #3
 8001f18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f26:	2340      	movs	r3, #64	; 0x40
 8001f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2102      	movs	r1, #2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f008 fcf2 	bl	800a920 <HAL_RCC_ClockConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001f42:	f000 f93d 	bl	80021c0 <Error_Handler>
  }
}
 8001f46:	bf00      	nop
 8001f48:	3770      	adds	r7, #112	; 0x70
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	58000400 	.word	0x58000400
 8001f54:	58024800 	.word	0x58024800

08001f58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0b0      	sub	sp, #192	; 0xc0
 8001f5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5e:	463b      	mov	r3, r7
 8001f60:	22c0      	movs	r2, #192	; 0xc0
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f014 f999 	bl	801629c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f76:	2304      	movs	r3, #4
 8001f78:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f82:	2302      	movs	r3, #2
 8001f84:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f86:	2302      	movs	r3, #2
 8001f88:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f009 f88c 	bl	800b0bc <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001faa:	f000 f909 	bl	80021c0 <Error_Handler>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	37c0      	adds	r7, #192	; 0xc0
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f011 f86c 	bl	801309a <osEventFlagsNew>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <system_setup+0x80>)
 8001fc6:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <system_setup+0x80>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d100      	bne.n	8001fd2 <system_setup+0x1a>
        while (1);
 8001fd0:	e7fe      	b.n	8001fd0 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f011 f861 	bl	801309a <osEventFlagsNew>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a18      	ldr	r2, [pc, #96]	; (800203c <system_setup+0x84>)
 8001fdc:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <system_setup+0x84>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d100      	bne.n	8001fe8 <system_setup+0x30>
        while (1);
 8001fe6:	e7fe      	b.n	8001fe6 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f011 f856 	bl	801309a <osEventFlagsNew>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a13      	ldr	r2, [pc, #76]	; (8002040 <system_setup+0x88>)
 8001ff2:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <system_setup+0x88>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d100      	bne.n	8001ffe <system_setup+0x46>
        while (1);
 8001ffc:	e7fe      	b.n	8001ffc <system_setup+0x44>
    }



	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001ffe:	f001 fd85 	bl	8003b0c <voltage_monitor_init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d100      	bne.n	800200a <system_setup+0x52>
		while (1);
 8002008:	e7fe      	b.n	8002008 <system_setup+0x50>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800200a:	2100      	movs	r1, #0
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <system_setup+0x8c>)
 800200e:	f00c fd95 	bl	800eb3c <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8002012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002016:	f44f 729c 	mov.w	r2, #312	; 0x138
 800201a:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 800201c:	f000 fb5a 	bl	80026d4 <init_adc_dma>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d100      	bne.n	8002028 <system_setup+0x70>
		while (1);
 8002026:	e7fe      	b.n	8002026 <system_setup+0x6e>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002028:	2201      	movs	r2, #1
 800202a:	4907      	ldr	r1, [pc, #28]	; (8002048 <system_setup+0x90>)
 800202c:	4807      	ldr	r0, [pc, #28]	; (800204c <system_setup+0x94>)
 800202e:	f00e fa65 	bl	80104fc <HAL_UART_Receive_IT>

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	240003d8 	.word	0x240003d8
 800203c:	240003dc 	.word	0x240003dc
 8002040:	240003e0 	.word	0x240003e0
 8002044:	24000680 	.word	0x24000680
 8002048:	240003e4 	.word	0x240003e4
 800204c:	240006cc 	.word	0x240006cc

08002050 <sync>:

void sync() {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	send_ACK();
 8002056:	f000 f821 	bl	800209c <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <sync+0x44>)
 800205c:	f00e fa9a 	bl	8010594 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002060:	2364      	movs	r3, #100	; 0x64
 8002062:	2209      	movs	r2, #9
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <sync+0x48>)
 8002066:	480b      	ldr	r0, [pc, #44]	; (8002094 <sync+0x44>)
 8002068:	f00e f980 	bl	801036c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <sync+0x48>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	2bff      	cmp	r3, #255	; 0xff
 8002076:	d1f3      	bne.n	8002060 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8002078:	4807      	ldr	r0, [pc, #28]	; (8002098 <sync+0x48>)
 800207a:	f001 fb7b 	bl	8003774 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800207e:	2201      	movs	r2, #1
 8002080:	4905      	ldr	r1, [pc, #20]	; (8002098 <sync+0x48>)
 8002082:	4804      	ldr	r0, [pc, #16]	; (8002094 <sync+0x44>)
 8002084:	f00e fa3a 	bl	80104fc <HAL_UART_Receive_IT>

	send_ACK();
 8002088:	f000 f808 	bl	800209c <send_ACK>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	240006cc 	.word	0x240006cc
 8002098:	240003e4 	.word	0x240003e4

0800209c <send_ACK>:

void send_ACK() {
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <send_ACK+0x1c>)
 80020a2:	22ff      	movs	r2, #255	; 0xff
 80020a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80020a6:	2364      	movs	r3, #100	; 0x64
 80020a8:	2201      	movs	r2, #1
 80020aa:	4903      	ldr	r1, [pc, #12]	; (80020b8 <send_ACK+0x1c>)
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <send_ACK+0x20>)
 80020ae:	f00e f8cf 	bl	8010250 <HAL_UART_Transmit>
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2400042c 	.word	0x2400042c
 80020bc:	240006cc 	.word	0x240006cc

080020c0 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80020c6:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <get_current_step+0xc0>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d04a      	beq.n	800216c <get_current_step+0xac>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020dc:	da48      	bge.n	8002170 <get_current_step+0xb0>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d03f      	beq.n	8002168 <get_current_step+0xa8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020ee:	4293      	cmp	r3, r2
 80020f0:	dc3e      	bgt.n	8002170 <get_current_step+0xb0>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f640 421f 	movw	r2, #3103	; 0xc1f
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d033      	beq.n	8002164 <get_current_step+0xa4>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002102:	da35      	bge.n	8002170 <get_current_step+0xb0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800210a:	4293      	cmp	r3, r2
 800210c:	d028      	beq.n	8002160 <get_current_step+0xa0>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002114:	4293      	cmp	r3, r2
 8002116:	dc2b      	bgt.n	8002170 <get_current_step+0xb0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f240 7245 	movw	r2, #1861	; 0x745
 800211e:	4293      	cmp	r3, r2
 8002120:	d01c      	beq.n	800215c <get_current_step+0x9c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f240 7245 	movw	r2, #1861	; 0x745
 8002128:	4293      	cmp	r3, r2
 800212a:	dc21      	bgt.n	8002170 <get_current_step+0xb0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002132:	4293      	cmp	r3, r2
 8002134:	d010      	beq.n	8002158 <get_current_step+0x98>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800213c:	4293      	cmp	r3, r2
 800213e:	dc17      	bgt.n	8002170 <get_current_step+0xb0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d004      	beq.n	8002150 <get_current_step+0x90>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 800214c:	d002      	beq.n	8002154 <get_current_step+0x94>
 800214e:	e00f      	b.n	8002170 <get_current_step+0xb0>
	case 0:
		return 0;
 8002150:	2300      	movs	r3, #0
 8002152:	e00e      	b.n	8002172 <get_current_step+0xb2>
	case 620:
		return 1;
 8002154:	2301      	movs	r3, #1
 8002156:	e00c      	b.n	8002172 <get_current_step+0xb2>
	case 1241:
		return 2;
 8002158:	2302      	movs	r3, #2
 800215a:	e00a      	b.n	8002172 <get_current_step+0xb2>
	case 1861:
		return 3;
 800215c:	2303      	movs	r3, #3
 800215e:	e008      	b.n	8002172 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002160:	2304      	movs	r3, #4
 8002162:	e006      	b.n	8002172 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002164:	2305      	movs	r3, #5
 8002166:	e004      	b.n	8002172 <get_current_step+0xb2>
	case 3723:
		return 6;
 8002168:	2306      	movs	r3, #6
 800216a:	e002      	b.n	8002172 <get_current_step+0xb2>
	case 4095:
		return 7;
 800216c:	2307      	movs	r3, #7
 800216e:	e000      	b.n	8002172 <get_current_step+0xb2>
	default:
		return -1;
 8002170:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40007400 	.word	0x40007400

08002184 <enter_stop>:

void enter_stop() {
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	  send_ACK();
 8002188:	f7ff ff88 	bl	800209c <send_ACK>

	  vTaskSuspendAll();
 800218c:	f012 fb1c 	bl	80147c8 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002190:	2101      	movs	r1, #1
 8002192:	2001      	movs	r0, #1
 8002194:	f007 fef4 	bl	8009f80 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8002198:	f7ff f984 	bl	80014a4 <__NVIC_SystemReset>

0800219c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021ae:	f001 ff75 	bl	800409c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40001000 	.word	0x40001000

080021c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021c8:	e7fe      	b.n	80021c8 <Error_Handler+0x8>
	...

080021cc <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021d2:	bf00      	nop
 80021d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d8:	481c      	ldr	r0, [pc, #112]	; (800224c <create_pmt_packet+0x80>)
 80021da:	f007 f893 	bl	8009304 <HAL_GPIO_ReadPin>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f7      	bne.n	80021d4 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 fa2a 	bl	8003640 <get_uptime>
	sample_pmt_spi(pmt_spi);
 80021ec:	f107 0308 	add.w	r3, r7, #8
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 faaf 	bl	8002754 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80021f6:	23bb      	movs	r3, #187	; 0xbb
 80021f8:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 80021fa:	23bb      	movs	r3, #187	; 0xbb
 80021fc:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <create_pmt_packet+0x84>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	b29b      	uxth	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <create_pmt_packet+0x84>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8002212:	7a3b      	ldrb	r3, [r7, #8]
 8002214:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8002216:	7a7b      	ldrb	r3, [r7, #9]
 8002218:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 800221a:	793b      	ldrb	r3, [r7, #4]
 800221c:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 800221e:	797b      	ldrb	r3, [r7, #5]
 8002220:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8002222:	79bb      	ldrb	r3, [r7, #6]
 8002224:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 800222a:	f107 010c 	add.w	r1, r7, #12
 800222e:	2364      	movs	r3, #100	; 0x64
 8002230:	220a      	movs	r2, #10
 8002232:	4808      	ldr	r0, [pc, #32]	; (8002254 <create_pmt_packet+0x88>)
 8002234:	f00e f80c 	bl	8010250 <HAL_UART_Transmit>

	pmt_seq++;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <create_pmt_packet+0x84>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <create_pmt_packet+0x84>)
 8002242:	801a      	strh	r2, [r3, #0]
}
 8002244:	bf00      	nop
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	58020000 	.word	0x58020000
 8002250:	2400042e 	.word	0x2400042e
 8002254:	240006cc 	.word	0x240006cc

08002258 <create_erpa_packet>:


void create_erpa_packet() {
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800225e:	bf00      	nop
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	4828      	ldr	r0, [pc, #160]	; (8002308 <create_erpa_packet+0xb0>)
 8002266:	f007 f84d 	bl	8009304 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f7      	bne.n	8002260 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002270:	23ff      	movs	r3, #255	; 0xff
 8002272:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	4618      	mov	r0, r3
 8002278:	f001 f9e2 	bl	8003640 <get_uptime>
	sweep_step = get_current_step();
 800227c:	f7ff ff20 	bl	80020c0 <get_current_step>
 8002280:	4603      	mov	r3, r0
 8002282:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fa87 	bl	800279c <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	4618      	mov	r0, r3
 8002294:	f000 faa6 	bl	80027e4 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002298:	23aa      	movs	r3, #170	; 0xaa
 800229a:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 800229c:	23aa      	movs	r3, #170	; 0xaa
 800229e:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <create_erpa_packet+0xb4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <create_erpa_packet+0xb4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <create_erpa_packet+0xb4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80022bc:	7ffb      	ldrb	r3, [r7, #31]
 80022be:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80022c0:	893b      	ldrh	r3, [r7, #8]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80022ca:	893b      	ldrh	r3, [r7, #8]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80022d0:	7b3b      	ldrb	r3, [r7, #12]
 80022d2:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80022d8:	793b      	ldrb	r3, [r7, #4]
 80022da:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80022dc:	797b      	ldrb	r3, [r7, #5]
 80022de:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80022e0:	79bb      	ldrb	r3, [r7, #6]
 80022e2:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80022e8:	f107 0110 	add.w	r1, r7, #16
 80022ec:	2364      	movs	r3, #100	; 0x64
 80022ee:	220e      	movs	r2, #14
 80022f0:	4807      	ldr	r0, [pc, #28]	; (8002310 <create_erpa_packet+0xb8>)
 80022f2:	f00d ffad 	bl	8010250 <HAL_UART_Transmit>

	erpa_seq++;
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <create_erpa_packet+0xb4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a03      	ldr	r2, [pc, #12]	; (800230c <create_erpa_packet+0xb4>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	58020400 	.word	0x58020400
 800230c:	24000430 	.word	0x24000430
 8002310:	240006cc 	.word	0x240006cc

08002314 <create_hk_packet>:


void create_hk_packet() {
 8002314:	b580      	push	{r7, lr}
 8002316:	b094      	sub	sp, #80	; 0x50
 8002318:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4618      	mov	r0, r3
 800231e:	f001 f98f 	bl	8003640 <get_uptime>
	get_timestamp(timestamp);
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	4618      	mov	r0, r3
 8002328:	f001 f9d4 	bl	80036d4 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 800232c:	f001 fdcc 	bl	8003ec8 <get_rail_monitor>
 8002330:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002332:	23cc      	movs	r3, #204	; 0xcc
 8002334:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002336:	23cc      	movs	r3, #204	; 0xcc
 8002338:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800233a:	4b9b      	ldr	r3, [pc, #620]	; (80025a8 <create_hk_packet+0x294>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b29b      	uxth	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002346:	4b98      	ldr	r3, [pc, #608]	; (80025a8 <create_hk_packet+0x294>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 800234e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002350:	889b      	ldrh	r3, [r3, #4]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	b29b      	uxth	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 800235a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235c:	889b      	ldrh	r3, [r3, #4]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002364:	330a      	adds	r3, #10
 8002366:	889b      	ldrh	r3, [r3, #4]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	b29b      	uxth	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002372:	330a      	adds	r3, #10
 8002374:	889b      	ldrh	r3, [r3, #4]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 800237a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800237c:	3314      	adds	r3, #20
 800237e:	889b      	ldrh	r3, [r3, #4]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	b29b      	uxth	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238a:	3314      	adds	r3, #20
 800238c:	889b      	ldrh	r3, [r3, #4]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002394:	331e      	adds	r3, #30
 8002396:	889b      	ldrh	r3, [r3, #4]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b29b      	uxth	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80023a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a2:	331e      	adds	r3, #30
 80023a4:	889b      	ldrh	r3, [r3, #4]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ac:	3328      	adds	r3, #40	; 0x28
 80023ae:	889b      	ldrh	r3, [r3, #4]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80023ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023bc:	3328      	adds	r3, #40	; 0x28
 80023be:	889b      	ldrh	r3, [r3, #4]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80023c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c8:	3332      	adds	r3, #50	; 0x32
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 80023d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d8:	3332      	adds	r3, #50	; 0x32
 80023da:	889b      	ldrh	r3, [r3, #4]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 80023e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e4:	333c      	adds	r3, #60	; 0x3c
 80023e6:	889b      	ldrh	r3, [r3, #4]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	333c      	adds	r3, #60	; 0x3c
 80023f6:	889b      	ldrh	r3, [r3, #4]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 80023fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002400:	3346      	adds	r3, #70	; 0x46
 8002402:	889b      	ldrh	r3, [r3, #4]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	b29b      	uxth	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 800240e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002410:	3346      	adds	r3, #70	; 0x46
 8002412:	889b      	ldrh	r3, [r3, #4]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 800241a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241c:	3350      	adds	r3, #80	; 0x50
 800241e:	889b      	ldrh	r3, [r3, #4]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29b      	uxth	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 800242a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242c:	3350      	adds	r3, #80	; 0x50
 800242e:	889b      	ldrh	r3, [r3, #4]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002438:	335a      	adds	r3, #90	; 0x5a
 800243a:	889b      	ldrh	r3, [r3, #4]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	b29b      	uxth	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8002446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002448:	335a      	adds	r3, #90	; 0x5a
 800244a:	889b      	ldrh	r3, [r3, #4]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002454:	3364      	adds	r3, #100	; 0x64
 8002456:	889b      	ldrh	r3, [r3, #4]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b29b      	uxth	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8002462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002464:	3364      	adds	r3, #100	; 0x64
 8002466:	889b      	ldrh	r3, [r3, #4]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 800246e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002470:	336e      	adds	r3, #110	; 0x6e
 8002472:	889b      	ldrh	r3, [r3, #4]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	b29b      	uxth	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 800247e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002480:	336e      	adds	r3, #110	; 0x6e
 8002482:	889b      	ldrh	r3, [r3, #4]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 800248a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248c:	3378      	adds	r3, #120	; 0x78
 800248e:	889b      	ldrh	r3, [r3, #4]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b29b      	uxth	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 800249a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249c:	3378      	adds	r3, #120	; 0x78
 800249e:	889b      	ldrh	r3, [r3, #4]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	3382      	adds	r3, #130	; 0x82
 80024aa:	889b      	ldrh	r3, [r3, #4]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80024b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b8:	3382      	adds	r3, #130	; 0x82
 80024ba:	889b      	ldrh	r3, [r3, #4]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80024c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c4:	338c      	adds	r3, #140	; 0x8c
 80024c6:	889b      	ldrh	r3, [r3, #4]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 80024d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d4:	338c      	adds	r3, #140	; 0x8c
 80024d6:	889b      	ldrh	r3, [r3, #4]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 80024de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e0:	3396      	adds	r3, #150	; 0x96
 80024e2:	889b      	ldrh	r3, [r3, #4]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	3396      	adds	r3, #150	; 0x96
 80024f2:	889b      	ldrh	r3, [r3, #4]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	33a0      	adds	r3, #160	; 0xa0
 80024fe:	889b      	ldrh	r3, [r3, #4]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b29b      	uxth	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	33a0      	adds	r3, #160	; 0xa0
 800250e:	889b      	ldrh	r3, [r3, #4]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002518:	33aa      	adds	r3, #170	; 0xaa
 800251a:	889b      	ldrh	r3, [r3, #4]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	b29b      	uxth	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8002526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002528:	33aa      	adds	r3, #170	; 0xaa
 800252a:	889b      	ldrh	r3, [r3, #4]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8002532:	7a3b      	ldrb	r3, [r7, #8]
 8002534:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8002538:	7a7b      	ldrb	r3, [r7, #9]
 800253a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 800253e:	7abb      	ldrb	r3, [r7, #10]
 8002540:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 800254a:	7b3b      	ldrb	r3, [r7, #12]
 800254c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8002550:	7b7b      	ldrb	r3, [r7, #13]
 8002552:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8002556:	7bbb      	ldrb	r3, [r7, #14]
 8002558:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8002562:	7c3b      	ldrb	r3, [r7, #16]
 8002564:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8002568:	7c7b      	ldrb	r3, [r7, #17]
 800256a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 800256e:	793b      	ldrb	r3, [r7, #4]
 8002570:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8002574:	797b      	ldrb	r3, [r7, #5]
 8002576:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 800257a:	79bb      	ldrb	r3, [r7, #6]
 800257c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8002586:	f107 0114 	add.w	r1, r7, #20
 800258a:	2364      	movs	r3, #100	; 0x64
 800258c:	2236      	movs	r2, #54	; 0x36
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <create_hk_packet+0x298>)
 8002590:	f00d fe5e 	bl	8010250 <HAL_UART_Transmit>

	hk_seq++;
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <create_hk_packet+0x294>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b02      	ldr	r3, [pc, #8]	; (80025a8 <create_hk_packet+0x294>)
 800259e:	801a      	strh	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	3750      	adds	r7, #80	; 0x50
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	24000434 	.word	0x24000434
 80025ac:	240006cc 	.word	0x240006cc

080025b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80025c4:	2300      	movs	r3, #0
 80025c6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025c8:	4b26      	ldr	r3, [pc, #152]	; (8002664 <MX_RTC_Init+0xb4>)
 80025ca:	4a27      	ldr	r2, [pc, #156]	; (8002668 <MX_RTC_Init+0xb8>)
 80025cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <MX_RTC_Init+0xb4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <MX_RTC_Init+0xb4>)
 80025d6:	2263      	movs	r2, #99	; 0x63
 80025d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <MX_RTC_Init+0xb4>)
 80025dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80025e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <MX_RTC_Init+0xb4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <MX_RTC_Init+0xb4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <MX_RTC_Init+0xb4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <MX_RTC_Init+0xb4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025fa:	481a      	ldr	r0, [pc, #104]	; (8002664 <MX_RTC_Init+0xb4>)
 80025fc:	f00b fa5c 	bl	800dab8 <HAL_RTC_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002606:	f7ff fddb 	bl	80021c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800260a:	2300      	movs	r3, #0
 800260c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800260e:	2300      	movs	r3, #0
 8002610:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002612:	2300      	movs	r3, #0
 8002614:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2201      	movs	r2, #1
 8002622:	4619      	mov	r1, r3
 8002624:	480f      	ldr	r0, [pc, #60]	; (8002664 <MX_RTC_Init+0xb4>)
 8002626:	f00b fac9 	bl	800dbbc <HAL_RTC_SetTime>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002630:	f7ff fdc6 	bl	80021c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002634:	2301      	movs	r3, #1
 8002636:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002638:	2301      	movs	r3, #1
 800263a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800263c:	2301      	movs	r3, #1
 800263e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002640:	2300      	movs	r3, #0
 8002642:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002644:	463b      	mov	r3, r7
 8002646:	2201      	movs	r2, #1
 8002648:	4619      	mov	r1, r3
 800264a:	4806      	ldr	r0, [pc, #24]	; (8002664 <MX_RTC_Init+0xb4>)
 800264c:	f00b fbb0 	bl	800ddb0 <HAL_RTC_SetDate>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002656:	f7ff fdb3 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	24000438 	.word	0x24000438
 8002668:	58004000 	.word	0x58004000

0800266c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0b2      	sub	sp, #200	; 0xc8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	22c0      	movs	r2, #192	; 0xc0
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f013 fe0d 	bl	801629c <memset>
  if(rtcHandle->Instance==RTC)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <HAL_RTC_MspInit+0x5c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d118      	bne.n	80026be <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800268c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RTC_MspInit+0x60>)
 800269a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269e:	f107 0308 	add.w	r3, r7, #8
 80026a2:	4618      	mov	r0, r3
 80026a4:	f008 fd0a 	bl	800b0bc <HAL_RCCEx_PeriphCLKConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80026ae:	f7ff fd87 	bl	80021c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_RTC_MspInit+0x64>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <HAL_RTC_MspInit+0x64>)
 80026b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026be:	bf00      	nop
 80026c0:	37c8      	adds	r7, #200	; 0xc8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	58004000 	.word	0x58004000
 80026cc:	00019300 	.word	0x00019300
 80026d0:	58024400 	.word	0x58024400

080026d4 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80026de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026e6:	4817      	ldr	r0, [pc, #92]	; (8002744 <init_adc_dma+0x70>)
 80026e8:	f002 ffec 	bl	80056c4 <HAL_ADCEx_Calibration_Start>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80026f2:	f7ff fd65 	bl	80021c0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80026f6:	220b      	movs	r2, #11
 80026f8:	4913      	ldr	r1, [pc, #76]	; (8002748 <init_adc_dma+0x74>)
 80026fa:	4812      	ldr	r0, [pc, #72]	; (8002744 <init_adc_dma+0x70>)
 80026fc:	f002 f8c0 	bl	8004880 <HAL_ADC_Start_DMA>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002706:	f7ff fd5b 	bl	80021c0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800270a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800270e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002712:	480e      	ldr	r0, [pc, #56]	; (800274c <init_adc_dma+0x78>)
 8002714:	f002 ffd6 	bl	80056c4 <HAL_ADCEx_Calibration_Start>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800271e:	f7ff fd4f 	bl	80021c0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002722:	2204      	movs	r2, #4
 8002724:	490a      	ldr	r1, [pc, #40]	; (8002750 <init_adc_dma+0x7c>)
 8002726:	4809      	ldr	r0, [pc, #36]	; (800274c <init_adc_dma+0x78>)
 8002728:	f002 f8aa 	bl	8004880 <HAL_ADC_Start_DMA>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002732:	f7ff fd45 	bl	80021c0 <Error_Handler>
	}
	status = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	71fb      	strb	r3, [r7, #7]

	return status;
 800273a:	79fb      	ldrb	r3, [r7, #7]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2400011c 	.word	0x2400011c
 8002748:	24000460 	.word	0x24000460
 800274c:	24000180 	.word	0x24000180
 8002750:	24000480 	.word	0x24000480

08002754 <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 800275c:	f107 010c 	add.w	r1, r7, #12
 8002760:	2301      	movs	r3, #1
 8002762:	2201      	movs	r2, #1
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <sample_pmt_spi+0x44>)
 8002766:	f00b fded 	bl	800e344 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 800276e:	7b7b      	ldrb	r3, [r7, #13]
 8002770:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <sample_pmt_spi+0x44>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <sample_pmt_spi+0x44>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002780:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7bba      	ldrb	r2, [r7, #14]
 8002786:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3301      	adds	r3, #1
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	701a      	strb	r2, [r3, #0]
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	24000488 	.word	0x24000488

0800279c <sample_erpa_spi>:

void sample_erpa_spi(uint8_t *buffer) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 80027a4:	f107 010c 	add.w	r1, r7, #12
 80027a8:	2364      	movs	r3, #100	; 0x64
 80027aa:	2201      	movs	r2, #1
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <sample_erpa_spi+0x44>)
 80027ae:	f00b fdc9 	bl	800e344 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 80027b6:	7b7b      	ldrb	r3, [r7, #13]
 80027b8:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <sample_erpa_spi+0x44>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <sample_erpa_spi+0x44>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c8:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7bba      	ldrb	r2, [r7, #14]
 80027ce:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3301      	adds	r3, #1
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	701a      	strb	r2, [r3, #0]
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	24000510 	.word	0x24000510

080027e4 <sample_erpa_adc>:

void sample_erpa_adc(uint16_t *buffer) {
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <sample_erpa_adc+0x20>)
 80027ee:	885b      	ldrh	r3, [r3, #2]
 80027f0:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	89fa      	ldrh	r2, [r7, #14]
 80027f6:	801a      	strh	r2, [r3, #0]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	24000460 	.word	0x24000460

08002808 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002810:	2390      	movs	r3, #144	; 0x90
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f8a2 	bl	800295c <poll_i2c_sensor>
 8002818:	4603      	mov	r3, r0
 800281a:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 800281c:	2394      	movs	r3, #148	; 0x94
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f89c 	bl	800295c <poll_i2c_sensor>
 8002824:	4603      	mov	r3, r0
 8002826:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8002828:	2392      	movs	r3, #146	; 0x92
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f896 	bl	800295c <poll_i2c_sensor>
 8002830:	4603      	mov	r3, r0
 8002832:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002834:	2396      	movs	r3, #150	; 0x96
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f890 	bl	800295c <poll_i2c_sensor>
 800283c:	4603      	mov	r3, r0
 800283e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	89fa      	ldrh	r2, [r7, #14]
 8002844:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3302      	adds	r3, #2
 800284a:	89ba      	ldrh	r2, [r7, #12]
 800284c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	897a      	ldrh	r2, [r7, #10]
 8002854:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3306      	adds	r3, #6
 800285a:	893a      	ldrh	r2, [r7, #8]
 800285c:	801a      	strh	r2, [r3, #0]
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <sample_hk_adc1+0xa0>)
 8002872:	8a9b      	ldrh	r3, [r3, #20]
 8002874:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <sample_hk_adc1+0xa0>)
 8002878:	8a1b      	ldrh	r3, [r3, #16]
 800287a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <sample_hk_adc1+0xa0>)
 800287e:	899b      	ldrh	r3, [r3, #12]
 8002880:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <sample_hk_adc1+0xa0>)
 8002884:	8a5b      	ldrh	r3, [r3, #18]
 8002886:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002888:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <sample_hk_adc1+0xa0>)
 800288a:	889b      	ldrh	r3, [r3, #4]
 800288c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <sample_hk_adc1+0xa0>)
 8002890:	88db      	ldrh	r3, [r3, #6]
 8002892:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002894:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <sample_hk_adc1+0xa0>)
 8002896:	89db      	ldrh	r3, [r3, #14]
 8002898:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <sample_hk_adc1+0xa0>)
 800289c:	891b      	ldrh	r3, [r3, #8]
 800289e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <sample_hk_adc1+0xa0>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80028a6:	4b18      	ldr	r3, [pc, #96]	; (8002908 <sample_hk_adc1+0xa0>)
 80028a8:	895b      	ldrh	r3, [r3, #10]
 80028aa:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8bfa      	ldrh	r2, [r7, #30]
 80028b0:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3302      	adds	r3, #2
 80028b6:	8bba      	ldrh	r2, [r7, #28]
 80028b8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3304      	adds	r3, #4
 80028be:	8b7a      	ldrh	r2, [r7, #26]
 80028c0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3306      	adds	r3, #6
 80028c6:	8b3a      	ldrh	r2, [r7, #24]
 80028c8:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3308      	adds	r3, #8
 80028ce:	8afa      	ldrh	r2, [r7, #22]
 80028d0:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	330a      	adds	r3, #10
 80028d6:	8aba      	ldrh	r2, [r7, #20]
 80028d8:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	330c      	adds	r3, #12
 80028de:	8a7a      	ldrh	r2, [r7, #18]
 80028e0:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	330e      	adds	r3, #14
 80028e6:	8a3a      	ldrh	r2, [r7, #16]
 80028e8:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3310      	adds	r3, #16
 80028ee:	89fa      	ldrh	r2, [r7, #14]
 80028f0:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3312      	adds	r3, #18
 80028f6:	89ba      	ldrh	r2, [r7, #12]
 80028f8:	801a      	strh	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	24000460 	.word	0x24000460

0800290c <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <sample_hk_adc3+0x4c>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <sample_hk_adc3+0x4c>)
 800291c:	885b      	ldrh	r3, [r3, #2]
 800291e:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002920:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <sample_hk_adc3+0x4c>)
 8002922:	889b      	ldrh	r3, [r3, #4]
 8002924:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <sample_hk_adc3+0x4c>)
 8002928:	88db      	ldrh	r3, [r3, #6]
 800292a:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	89fa      	ldrh	r2, [r7, #14]
 8002930:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3302      	adds	r3, #2
 8002936:	89ba      	ldrh	r2, [r7, #12]
 8002938:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	897a      	ldrh	r2, [r7, #10]
 8002940:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3306      	adds	r3, #6
 8002946:	893a      	ldrh	r2, [r7, #8]
 8002948:	801a      	strh	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	24000480 	.word	0x24000480

0800295c <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af02      	add	r7, sp, #8
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8002966:	2300      	movs	r3, #0
 8002968:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	b299      	uxth	r1, r3
 800296e:	f107 0208 	add.w	r2, r7, #8
 8002972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2301      	movs	r3, #1
 800297a:	4817      	ldr	r0, [pc, #92]	; (80029d8 <poll_i2c_sensor+0x7c>)
 800297c:	f006 fd90 	bl	80094a0 <HAL_I2C_Master_Transmit>
 8002980:	4603      	mov	r3, r0
 8002982:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002984:	7b7b      	ldrb	r3, [r7, #13]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 800298a:	4814      	ldr	r0, [pc, #80]	; (80029dc <poll_i2c_sensor+0x80>)
 800298c:	f013 fcfc 	bl	8016388 <puts>
 8002990:	e01c      	b.n	80029cc <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	b299      	uxth	r1, r3
 8002996:	f107 0208 	add.w	r2, r7, #8
 800299a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2302      	movs	r3, #2
 80029a2:	480d      	ldr	r0, [pc, #52]	; (80029d8 <poll_i2c_sensor+0x7c>)
 80029a4:	f006 fe94 	bl	80096d0 <HAL_I2C_Master_Receive>
 80029a8:	4603      	mov	r3, r0
 80029aa:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80029ac:	7b7b      	ldrb	r3, [r7, #13]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80029b2:	480b      	ldr	r0, [pc, #44]	; (80029e0 <poll_i2c_sensor+0x84>)
 80029b4:	f013 fce8 	bl	8016388 <puts>
 80029b8:	e008      	b.n	80029cc <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 80029ba:	7a3b      	ldrb	r3, [r7, #8]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 80029c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029c4:	7a7a      	ldrb	r2, [r7, #9]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	10db      	asrs	r3, r3, #3
 80029ca:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80029cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	24000384 	.word	0x24000384
 80029dc:	08016ef0 	.word	0x08016ef0
 80029e0:	08016f00 	.word	0x08016f00

080029e4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <MX_SPI1_Init+0xa8>)
 80029ea:	4a29      	ldr	r2, [pc, #164]	; (8002a90 <MX_SPI1_Init+0xac>)
 80029ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <MX_SPI1_Init+0xa8>)
 80029f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80029f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80029f6:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <MX_SPI1_Init+0xa8>)
 80029f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80029fc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a00:	220f      	movs	r2, #15
 8002a02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a1a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002a1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a26:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a3e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a76:	4805      	ldr	r0, [pc, #20]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a78:	f00b fb40 	bl	800e0fc <HAL_SPI_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002a82:	f7ff fb9d 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	24000488 	.word	0x24000488
 8002a90:	40013000 	.word	0x40013000

08002a94 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <MX_SPI2_Init+0xac>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a9e:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002aa0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002aa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002aa6:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002aa8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002aac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab4:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ac2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ac6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002aca:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002ace:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002adc:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b28:	f00b fae8 	bl	800e0fc <HAL_SPI_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002b32:	f7ff fb45 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	24000510 	.word	0x24000510
 8002b40:	40003800 	.word	0x40003800

08002b44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0bc      	sub	sp, #240	; 0xf0
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b5c:	f107 0318 	add.w	r3, r7, #24
 8002b60:	22c0      	movs	r2, #192	; 0xc0
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f013 fb99 	bl	801629c <memset>
  if(spiHandle->Instance==SPI1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a4c      	ldr	r2, [pc, #304]	; (8002ca0 <HAL_SPI_MspInit+0x15c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d145      	bne.n	8002c00 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002b74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b84:	f107 0318 	add.w	r3, r7, #24
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f008 fa97 	bl	800b0bc <HAL_RCCEx_PeriphCLKConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002b94:	f7ff fb14 	bl	80021c0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b98:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b9e:	4a41      	ldr	r2, [pc, #260]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ba8:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bbc:	4a39      	ldr	r2, [pc, #228]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002bd4:	2318      	movs	r3, #24
 8002bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bec:	2305      	movs	r3, #5
 8002bee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	482b      	ldr	r0, [pc, #172]	; (8002ca8 <HAL_SPI_MspInit+0x164>)
 8002bfa:	f006 f9d3 	bl	8008fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002bfe:	e04a      	b.n	8002c96 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <HAL_SPI_MspInit+0x168>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d145      	bne.n	8002c96 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1a:	f107 0318 	add.w	r3, r7, #24
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f008 fa4c 	bl	800b0bc <HAL_RCCEx_PeriphCLKConfig>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002c2a:	f7ff fac9 	bl	80021c0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c34:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4c:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c52:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002c6a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c84:	2305      	movs	r3, #5
 8002c86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <HAL_SPI_MspInit+0x164>)
 8002c92:	f006 f987 	bl	8008fa4 <HAL_GPIO_Init>
}
 8002c96:	bf00      	nop
 8002c98:	37f0      	adds	r7, #240	; 0xf0
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40013000 	.word	0x40013000
 8002ca4:	58024400 	.word	0x58024400
 8002ca8:	58020400 	.word	0x58020400
 8002cac:	40003800 	.word	0x40003800

08002cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_MspInit+0x38>)
 8002cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_MspInit+0x38>)
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_MspInit+0x38>)
 8002cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	f06f 0001 	mvn.w	r0, #1
 8002cdc:	f002 feec 	bl	8005ab8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	58024400 	.word	0x58024400

08002cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b090      	sub	sp, #64	; 0x40
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	d827      	bhi.n	8002d4a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	2036      	movs	r0, #54	; 0x36
 8002d00:	f002 feda 	bl	8005ab8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d04:	2036      	movs	r0, #54	; 0x36
 8002d06:	f002 fef1 	bl	8005aec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002d0a:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <HAL_InitTick+0xc4>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_InitTick+0xc8>)
 8002d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d16:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <HAL_InitTick+0xc8>)
 8002d18:	f043 0310 	orr.w	r3, r3, #16
 8002d1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_InitTick+0xc8>)
 8002d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d2e:	f107 0210 	add.w	r2, r7, #16
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f008 f97d 	bl	800b038 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_InitTick+0x6a>
 8002d48:	e001      	b.n	8002d4e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e02b      	b.n	8002da6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d4e:	f008 f947 	bl	800afe0 <HAL_RCC_GetPCLK1Freq>
 8002d52:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002d54:	e004      	b.n	8002d60 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d56:	f008 f943 	bl	800afe0 <HAL_RCC_GetPCLK1Freq>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d62:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <HAL_InitTick+0xcc>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <HAL_InitTick+0xd4>)
 8002d72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d8e:	480b      	ldr	r0, [pc, #44]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d90:	f00b fe05 	bl	800e99e <HAL_TIM_Base_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d9a:	4808      	ldr	r0, [pc, #32]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d9c:	f00b fe56 	bl	800ea4c <HAL_TIM_Base_Start_IT>
 8002da0:	4603      	mov	r3, r0
 8002da2:	e000      	b.n	8002da6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3740      	adds	r7, #64	; 0x40
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2400008c 	.word	0x2400008c
 8002db4:	58024400 	.word	0x58024400
 8002db8:	431bde83 	.word	0x431bde83
 8002dbc:	24000598 	.word	0x24000598
 8002dc0:	40001000 	.word	0x40001000

08002dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002dc8:	e7fe      	b.n	8002dc8 <NMI_Handler+0x4>

08002dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <HardFault_Handler+0x4>

08002dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <MemManage_Handler+0x4>

08002dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <BusFault_Handler+0x4>

08002ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <UsageFault_Handler+0x4>

08002de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <DMA1_Stream0_IRQHandler+0x10>)
 8002df6:	f004 fdb7 	bl	8007968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	240001e4 	.word	0x240001e4

08002e04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <DMA1_Stream1_IRQHandler+0x10>)
 8002e0a:	f004 fdad 	bl	8007968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2400025c 	.word	0x2400025c

08002e18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <DMA1_Stream2_IRQHandler+0x10>)
 8002e1e:	f004 fda3 	bl	8007968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	24000760 	.word	0x24000760

08002e2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002e30:	4802      	ldr	r0, [pc, #8]	; (8002e3c <DMA1_Stream5_IRQHandler+0x10>)
 8002e32:	f004 fd99 	bl	8007968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	240002e8 	.word	0x240002e8

08002e40 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <TIM1_BRK_IRQHandler+0x10>)
 8002e46:	f00c f918 	bl	800f07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	240005e8 	.word	0x240005e8

08002e54 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <TIM1_UP_IRQHandler+0x10>)
 8002e5a:	f00c f90e 	bl	800f07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	240005e8 	.word	0x240005e8

08002e68 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002e6e:	f00c f904 	bl	800f07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	240005e8 	.word	0x240005e8

08002e7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <TIM1_CC_IRQHandler+0x10>)
 8002e82:	f00c f8fa 	bl	800f07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	240005e8 	.word	0x240005e8

08002e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <TIM2_IRQHandler+0x10>)
 8002e96:	f00c f8f0 	bl	800f07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	24000634 	.word	0x24000634

08002ea4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <TIM3_IRQHandler+0x10>)
 8002eaa:	f00c f8e6 	bl	800f07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	24000680 	.word	0x24000680

08002eb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <USART1_IRQHandler+0x10>)
 8002ebe:	f00d fc1f 	bl	8010700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	240006cc 	.word	0x240006cc

08002ecc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <TIM6_DAC_IRQHandler+0x20>)
 8002ed2:	791b      	ldrb	r3, [r3, #4]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002eda:	4804      	ldr	r0, [pc, #16]	; (8002eec <TIM6_DAC_IRQHandler+0x20>)
 8002edc:	f002 ff9b 	bl	8005e16 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002ee0:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <TIM6_DAC_IRQHandler+0x24>)
 8002ee2:	f00c f8ca 	bl	800f07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	240002d4 	.word	0x240002d4
 8002ef0:	24000598 	.word	0x24000598

08002ef4 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <ITM_SendChar+0x48>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <ITM_SendChar+0x48>)
 8002f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f08:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <ITM_SendChar+0x4c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <ITM_SendChar+0x4c>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002f16:	bf00      	nop
 8002f18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f8      	beq.n	8002f18 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002f26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	6013      	str	r3, [r2, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000edfc 	.word	0xe000edfc
 8002f40:	e0000e00 	.word	0xe0000e00

08002f44 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	e00a      	b.n	8002f6c <_read+0x28>
		*ptr++ = __io_getchar();
 8002f56:	f3af 8000 	nop.w
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60ba      	str	r2, [r7, #8]
 8002f62:	b2ca      	uxtb	r2, r1
 8002f64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	dbf0      	blt.n	8002f56 <_read+0x12>
	}

	return len;
 8002f74:	687b      	ldr	r3, [r7, #4]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e009      	b.n	8002fa4 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	60ba      	str	r2, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ffab 	bl	8002ef4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dbf1      	blt.n	8002f90 <_write+0x12>
	}
	return len;
 8002fac:	687b      	ldr	r3, [r7, #4]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_close>:

int _close(int file) {
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <_fstat>:

int _fstat(int file, struct stat *st) {
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fde:	605a      	str	r2, [r3, #4]
	return 0;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <_isatty>:

int _isatty(int file) {
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <_sbrk+0x64>)
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <_sbrk+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <_sbrk+0x40>
		errno = ENOMEM;
 8003050:	f013 f8ec 	bl	801622c <__errno>
 8003054:	4603      	mov	r3, r0
 8003056:	220c      	movs	r2, #12
 8003058:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800305e:	e009      	b.n	8003074 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	4a05      	ldr	r2, [pc, #20]	; (8003084 <_sbrk+0x64>)
 8003070:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	24080000 	.word	0x24080000
 8003080:	00000400 	.word	0x00000400
 8003084:	240005e4 	.word	0x240005e4
 8003088:	240051f0 	.word	0x240051f0

0800308c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003090:	4b37      	ldr	r3, [pc, #220]	; (8003170 <SystemInit+0xe4>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	4a36      	ldr	r2, [pc, #216]	; (8003170 <SystemInit+0xe4>)
 8003098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800309c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80030a0:	4b34      	ldr	r3, [pc, #208]	; (8003174 <SystemInit+0xe8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d807      	bhi.n	80030bc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <SystemInit+0xe8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 030f 	bic.w	r3, r3, #15
 80030b4:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <SystemInit+0xe8>)
 80030b6:	f043 0307 	orr.w	r3, r3, #7
 80030ba:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <SystemInit+0xec>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <SystemInit+0xec>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <SystemInit+0xec>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <SystemInit+0xec>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4929      	ldr	r1, [pc, #164]	; (8003178 <SystemInit+0xec>)
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <SystemInit+0xf0>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <SystemInit+0xe8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80030e6:	4b23      	ldr	r3, [pc, #140]	; (8003174 <SystemInit+0xe8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 030f 	bic.w	r3, r3, #15
 80030ee:	4a21      	ldr	r2, [pc, #132]	; (8003174 <SystemInit+0xe8>)
 80030f0:	f043 0307 	orr.w	r3, r3, #7
 80030f4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80030f6:	4b20      	ldr	r3, [pc, #128]	; (8003178 <SystemInit+0xec>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <SystemInit+0xec>)
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <SystemInit+0xec>)
 8003104:	2200      	movs	r2, #0
 8003106:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <SystemInit+0xec>)
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <SystemInit+0xf4>)
 800310c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800310e:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <SystemInit+0xec>)
 8003110:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <SystemInit+0xf8>)
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <SystemInit+0xec>)
 8003116:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <SystemInit+0xfc>)
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <SystemInit+0xec>)
 800311c:	2200      	movs	r2, #0
 800311e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003120:	4b15      	ldr	r3, [pc, #84]	; (8003178 <SystemInit+0xec>)
 8003122:	4a19      	ldr	r2, [pc, #100]	; (8003188 <SystemInit+0xfc>)
 8003124:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003126:	4b14      	ldr	r3, [pc, #80]	; (8003178 <SystemInit+0xec>)
 8003128:	2200      	movs	r2, #0
 800312a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <SystemInit+0xec>)
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <SystemInit+0xfc>)
 8003130:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <SystemInit+0xec>)
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <SystemInit+0xec>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <SystemInit+0xec>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <SystemInit+0xec>)
 8003146:	2200      	movs	r2, #0
 8003148:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <SystemInit+0x100>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <SystemInit+0x104>)
 8003150:	4013      	ands	r3, r2
 8003152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003156:	d202      	bcs.n	800315e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <SystemInit+0x108>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <SystemInit+0x10c>)
 8003160:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003164:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000ed00 	.word	0xe000ed00
 8003174:	52002000 	.word	0x52002000
 8003178:	58024400 	.word	0x58024400
 800317c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003180:	02020200 	.word	0x02020200
 8003184:	01ff0000 	.word	0x01ff0000
 8003188:	01010280 	.word	0x01010280
 800318c:	5c001000 	.word	0x5c001000
 8003190:	ffff0000 	.word	0xffff0000
 8003194:	51008108 	.word	0x51008108
 8003198:	52004000 	.word	0x52004000

0800319c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b09a      	sub	sp, #104	; 0x68
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
 80031cc:	615a      	str	r2, [r3, #20]
 80031ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	222c      	movs	r2, #44	; 0x2c
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f013 f860 	bl	801629c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031dc:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031de:	4a45      	ldr	r2, [pc, #276]	; (80032f4 <MX_TIM1_Init+0x158>)
 80031e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031e4:	2263      	movs	r2, #99	; 0x63
 80031e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e8:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80031ee:	4b40      	ldr	r3, [pc, #256]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031f0:	f24f 4223 	movw	r2, #62499	; 0xf423
 80031f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031fc:	4b3c      	ldr	r3, [pc, #240]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031fe:	2200      	movs	r2, #0
 8003200:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003202:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <MX_TIM1_Init+0x154>)
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003208:	4839      	ldr	r0, [pc, #228]	; (80032f0 <MX_TIM1_Init+0x154>)
 800320a:	f00b fbc8 	bl	800e99e <HAL_TIM_Base_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003214:	f7fe ffd4 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800321c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800321e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003222:	4619      	mov	r1, r3
 8003224:	4832      	ldr	r0, [pc, #200]	; (80032f0 <MX_TIM1_Init+0x154>)
 8003226:	f00c f943 	bl	800f4b0 <HAL_TIM_ConfigClockSource>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003230:	f7fe ffc6 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003234:	482e      	ldr	r0, [pc, #184]	; (80032f0 <MX_TIM1_Init+0x154>)
 8003236:	f00b febf 	bl	800efb8 <HAL_TIM_PWM_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003240:	f7fe ffbe 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003248:	2300      	movs	r3, #0
 800324a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003250:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003254:	4619      	mov	r1, r3
 8003256:	4826      	ldr	r0, [pc, #152]	; (80032f0 <MX_TIM1_Init+0x154>)
 8003258:	f00c fe80 	bl	800ff5c <HAL_TIMEx_MasterConfigSynchronization>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003262:	f7fe ffad 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003266:	2360      	movs	r3, #96	; 0x60
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800326a:	f240 13df 	movw	r3, #479	; 0x1df
 800326e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003270:	2300      	movs	r3, #0
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003274:	2300      	movs	r3, #0
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003278:	2300      	movs	r3, #0
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800327c:	2300      	movs	r3, #0
 800327e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003280:	2300      	movs	r3, #0
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003288:	2200      	movs	r2, #0
 800328a:	4619      	mov	r1, r3
 800328c:	4818      	ldr	r0, [pc, #96]	; (80032f0 <MX_TIM1_Init+0x154>)
 800328e:	f00b fffb 	bl	800f288 <HAL_TIM_PWM_ConfigChannel>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003298:	f7fe ff92 	bl	80021c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800329c:	2300      	movs	r3, #0
 800329e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80032be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	4619      	mov	r1, r3
 80032d0:	4807      	ldr	r0, [pc, #28]	; (80032f0 <MX_TIM1_Init+0x154>)
 80032d2:	f00c fed1 	bl	8010078 <HAL_TIMEx_ConfigBreakDeadTime>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80032dc:	f7fe ff70 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032e0:	4803      	ldr	r0, [pc, #12]	; (80032f0 <MX_TIM1_Init+0x154>)
 80032e2:	f000 f949 	bl	8003578 <HAL_TIM_MspPostInit>

}
 80032e6:	bf00      	nop
 80032e8:	3768      	adds	r7, #104	; 0x68
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	240005e8 	.word	0x240005e8
 80032f4:	40010000 	.word	0x40010000

080032f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003318:	463b      	mov	r3, r7
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	611a      	str	r2, [r3, #16]
 8003326:	615a      	str	r2, [r3, #20]
 8003328:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800332a:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <MX_TIM2_Init+0xe8>)
 800332c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003330:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8003332:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003334:	2263      	movs	r2, #99	; 0x63
 8003336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <MX_TIM2_Init+0xe8>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800333e:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003340:	f640 4234 	movw	r2, #3124	; 0xc34
 8003344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003346:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800334c:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <MX_TIM2_Init+0xe8>)
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003352:	4823      	ldr	r0, [pc, #140]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003354:	f00b fb23 	bl	800e99e <HAL_TIM_Base_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800335e:	f7fe ff2f 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336c:	4619      	mov	r1, r3
 800336e:	481c      	ldr	r0, [pc, #112]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003370:	f00c f89e 	bl	800f4b0 <HAL_TIM_ConfigClockSource>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800337a:	f7fe ff21 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800337e:	4818      	ldr	r0, [pc, #96]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003380:	f00b fe1a 	bl	800efb8 <HAL_TIM_PWM_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800338a:	f7fe ff19 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800338e:	2320      	movs	r3, #32
 8003390:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003396:	f107 031c 	add.w	r3, r7, #28
 800339a:	4619      	mov	r1, r3
 800339c:	4810      	ldr	r0, [pc, #64]	; (80033e0 <MX_TIM2_Init+0xe8>)
 800339e:	f00c fddd 	bl	800ff5c <HAL_TIMEx_MasterConfigSynchronization>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80033a8:	f7fe ff0a 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ac:	2360      	movs	r3, #96	; 0x60
 80033ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033bc:	463b      	mov	r3, r7
 80033be:	220c      	movs	r2, #12
 80033c0:	4619      	mov	r1, r3
 80033c2:	4807      	ldr	r0, [pc, #28]	; (80033e0 <MX_TIM2_Init+0xe8>)
 80033c4:	f00b ff60 	bl	800f288 <HAL_TIM_PWM_ConfigChannel>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80033ce:	f7fe fef7 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80033d2:	4803      	ldr	r0, [pc, #12]	; (80033e0 <MX_TIM2_Init+0xe8>)
 80033d4:	f000 f8d0 	bl	8003578 <HAL_TIM_MspPostInit>

}
 80033d8:	bf00      	nop
 80033da:	3738      	adds	r7, #56	; 0x38
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	24000634 	.word	0x24000634

080033e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ea:	f107 0310 	add.w	r3, r7, #16
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <MX_TIM3_Init+0x94>)
 8003404:	4a1d      	ldr	r2, [pc, #116]	; (800347c <MX_TIM3_Init+0x98>)
 8003406:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <MX_TIM3_Init+0x94>)
 800340a:	22c7      	movs	r2, #199	; 0xc7
 800340c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <MX_TIM3_Init+0x94>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <MX_TIM3_Init+0x94>)
 8003416:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800341a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341c:	4b16      	ldr	r3, [pc, #88]	; (8003478 <MX_TIM3_Init+0x94>)
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <MX_TIM3_Init+0x94>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003428:	4813      	ldr	r0, [pc, #76]	; (8003478 <MX_TIM3_Init+0x94>)
 800342a:	f00b fab8 	bl	800e99e <HAL_TIM_Base_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003434:	f7fe fec4 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800343e:	f107 0310 	add.w	r3, r7, #16
 8003442:	4619      	mov	r1, r3
 8003444:	480c      	ldr	r0, [pc, #48]	; (8003478 <MX_TIM3_Init+0x94>)
 8003446:	f00c f833 	bl	800f4b0 <HAL_TIM_ConfigClockSource>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003450:	f7fe feb6 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	4619      	mov	r1, r3
 8003460:	4805      	ldr	r0, [pc, #20]	; (8003478 <MX_TIM3_Init+0x94>)
 8003462:	f00c fd7b 	bl	800ff5c <HAL_TIMEx_MasterConfigSynchronization>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800346c:	f7fe fea8 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	24000680 	.word	0x24000680
 800347c:	40000400 	.word	0x40000400

08003480 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a37      	ldr	r2, [pc, #220]	; (800356c <HAL_TIM_Base_MspInit+0xec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d12f      	bne.n	80034f2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 8003494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003498:	4a35      	ldr	r2, [pc, #212]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 80034a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80034b0:	2200      	movs	r2, #0
 80034b2:	2105      	movs	r1, #5
 80034b4:	2018      	movs	r0, #24
 80034b6:	f002 faff 	bl	8005ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80034ba:	2018      	movs	r0, #24
 80034bc:	f002 fb16 	bl	8005aec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80034c0:	2200      	movs	r2, #0
 80034c2:	2105      	movs	r1, #5
 80034c4:	2019      	movs	r0, #25
 80034c6:	f002 faf7 	bl	8005ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80034ca:	2019      	movs	r0, #25
 80034cc:	f002 fb0e 	bl	8005aec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80034d0:	2200      	movs	r2, #0
 80034d2:	2105      	movs	r1, #5
 80034d4:	201a      	movs	r0, #26
 80034d6:	f002 faef 	bl	8005ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80034da:	201a      	movs	r0, #26
 80034dc:	f002 fb06 	bl	8005aec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2105      	movs	r1, #5
 80034e4:	201b      	movs	r0, #27
 80034e6:	f002 fae7 	bl	8005ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80034ea:	201b      	movs	r0, #27
 80034ec:	f002 fafe 	bl	8005aec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80034f0:	e038      	b.n	8003564 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d117      	bne.n	800352c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034fc:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 80034fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003502:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 800350e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800351a:	2200      	movs	r2, #0
 800351c:	2105      	movs	r1, #5
 800351e:	201c      	movs	r0, #28
 8003520:	f002 faca 	bl	8005ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003524:	201c      	movs	r0, #28
 8003526:	f002 fae1 	bl	8005aec <HAL_NVIC_EnableIRQ>
}
 800352a:	e01b      	b.n	8003564 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a10      	ldr	r2, [pc, #64]	; (8003574 <HAL_TIM_Base_MspInit+0xf4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d116      	bne.n	8003564 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 8003538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800353c:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 8003548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003554:	2200      	movs	r2, #0
 8003556:	2105      	movs	r1, #5
 8003558:	201d      	movs	r0, #29
 800355a:	f002 faad 	bl	8005ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800355e:	201d      	movs	r0, #29
 8003560:	f002 fac4 	bl	8005aec <HAL_NVIC_EnableIRQ>
}
 8003564:	bf00      	nop
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40010000 	.word	0x40010000
 8003570:	58024400 	.word	0x58024400
 8003574:	40000400 	.word	0x40000400

08003578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <HAL_TIM_MspPostInit+0xb8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d120      	bne.n	80035dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 800359c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a0:	4a24      	ldr	r2, [pc, #144]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 80035ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c6:	2300      	movs	r3, #0
 80035c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4818      	ldr	r0, [pc, #96]	; (8003638 <HAL_TIM_MspPostInit+0xc0>)
 80035d6:	f005 fce5 	bl	8008fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035da:	e024      	b.n	8003626 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e4:	d11f      	bne.n	8003626 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 80035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ec:	4a11      	ldr	r2, [pc, #68]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 80035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003616:	2301      	movs	r3, #1
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	4619      	mov	r1, r3
 8003620:	4806      	ldr	r0, [pc, #24]	; (800363c <HAL_TIM_MspPostInit+0xc4>)
 8003622:	f005 fcbf 	bl	8008fa4 <HAL_GPIO_Init>
}
 8003626:	bf00      	nop
 8003628:	3728      	adds	r7, #40	; 0x28
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40010000 	.word	0x40010000
 8003634:	58024400 	.word	0x58024400
 8003638:	58020000 	.word	0x58020000
 800363c:	58020400 	.word	0x58020400

08003640 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <get_uptime+0x88>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8003652:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <get_uptime+0x8c>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <get_uptime+0x88>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	429a      	cmp	r2, r3
 8003660:	d005      	beq.n	800366e <get_uptime+0x2e>
		ms = uptime_millis;
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <get_uptime+0x88>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <get_uptime+0x8c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003674:	fb03 f202 	mul.w	r2, r3, r2
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <get_uptime+0x8c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	3301      	adds	r3, #1
 800367e:	4914      	ldr	r1, [pc, #80]	; (80036d0 <get_uptime+0x90>)
 8003680:	fba1 1303 	umull	r1, r3, r1, r3
 8003684:	099b      	lsrs	r3, r3, #6
 8003686:	6939      	ldr	r1, [r7, #16]
 8003688:	fbb1 f3f3 	udiv	r3, r1, r3
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	0e1b      	lsrs	r3, r3, #24
 8003694:	b2da      	uxtb	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	0c1a      	lsrs	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3301      	adds	r3, #1
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	0a1a      	lsrs	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3302      	adds	r3, #2
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3303      	adds	r3, #3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	24000428 	.word	0x24000428
 80036cc:	e000e010 	.word	0xe000e010
 80036d0:	10624dd3 	.word	0x10624dd3

080036d4 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80036dc:	f107 0310 	add.w	r3, r7, #16
 80036e0:	2200      	movs	r2, #0
 80036e2:	4619      	mov	r1, r3
 80036e4:	4821      	ldr	r0, [pc, #132]	; (800376c <get_timestamp+0x98>)
 80036e6:	f00a fb07 	bl	800dcf8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80036ea:	f107 030c 	add.w	r3, r7, #12
 80036ee:	2200      	movs	r2, #0
 80036f0:	4619      	mov	r1, r3
 80036f2:	481e      	ldr	r0, [pc, #120]	; (800376c <get_timestamp+0x98>)
 80036f4:	f00a fbe4 	bl	800dec0 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2264      	movs	r2, #100	; 0x64
 80036fc:	fb03 f202 	mul.w	r2, r3, r2
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <get_timestamp+0x9c>)
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3301      	adds	r3, #1
 8003710:	7b7a      	ldrb	r2, [r7, #13]
 8003712:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3302      	adds	r3, #2
 8003718:	7bba      	ldrb	r2, [r7, #14]
 800371a:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3303      	adds	r3, #3
 8003720:	7c3a      	ldrb	r2, [r7, #16]
 8003722:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	7c7a      	ldrb	r2, [r7, #17]
 800372a:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3305      	adds	r3, #5
 8003730:	7cba      	ldrb	r2, [r7, #18]
 8003732:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	0e1a      	lsrs	r2, r3, #24
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3306      	adds	r3, #6
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	0c1a      	lsrs	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3307      	adds	r3, #7
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	0a1a      	lsrs	r2, r3, #8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3308      	adds	r3, #8
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3309      	adds	r3, #9
 800375c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	3728      	adds	r7, #40	; 0x28
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	24000438 	.word	0x24000438
 8003770:	000f4240 	.word	0x000f4240

08003774 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	; 0x30
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	785b      	ldrb	r3, [r3, #1]
 8003780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	789b      	ldrb	r3, [r3, #2]
 8003788:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	78db      	ldrb	r3, [r3, #3]
 8003790:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	791b      	ldrb	r3, [r3, #4]
 8003798:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	795b      	ldrb	r3, [r3, #5]
 80037a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	799b      	ldrb	r3, [r3, #6]
 80037a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3307      	adds	r3, #7
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	b21a      	sxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3308      	adds	r3, #8
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b21b      	sxth	r3, r3
 80037be:	4313      	orrs	r3, r2
 80037c0:	b21b      	sxth	r3, r3
 80037c2:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 80037c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80037cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80037d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80037d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80037dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80037e0:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 80037e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037e6:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80037e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80037ec:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80037ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037f0:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80037f2:	f107 0320 	add.w	r3, r7, #32
 80037f6:	2200      	movs	r2, #0
 80037f8:	4619      	mov	r1, r3
 80037fa:	480b      	ldr	r0, [pc, #44]	; (8003828 <calibrateRTC+0xb4>)
 80037fc:	f00a fad8 	bl	800ddb0 <HAL_RTC_SetDate>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8003806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <calibrateRTC+0x9e>
		Error_Handler();
 800380e:	f7fe fcd7 	bl	80021c0 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8003812:	f107 030c 	add.w	r3, r7, #12
 8003816:	2200      	movs	r2, #0
 8003818:	4619      	mov	r1, r3
 800381a:	4803      	ldr	r0, [pc, #12]	; (8003828 <calibrateRTC+0xb4>)
 800381c:	f000 f806 	bl	800382c <RTC_SetTime>
}
 8003820:	bf00      	nop
 8003822:	3730      	adds	r7, #48	; 0x30
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	24000438 	.word	0x24000438

0800382c <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <RTC_SetTime+0x1a>
 8003842:	2302      	movs	r3, #2
 8003844:	e051      	b.n	80038ea <RTC_SetTime+0xbe>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2202      	movs	r2, #2
 8003852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	22ca      	movs	r2, #202	; 0xca
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2253      	movs	r2, #83	; 0x53
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f00a fb9c 	bl	800dfa4 <RTC_EnterInitMode>
 800386c:	4603      	mov	r3, r0
 800386e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d129      	bne.n	80038ca <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2200      	movs	r2, #0
 800387a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f00a fc01 	bl	800e088 <RTC_ByteToBcd2>
 8003886:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8003888:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	4618      	mov	r0, r3
 8003890:	f00a fbfa 	bl	800e088 <RTC_ByteToBcd2>
 8003894:	4603      	mov	r3, r0
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	789b      	ldrb	r3, [r3, #2]
 800389e:	4618      	mov	r0, r3
 80038a0:	f00a fbf2 	bl	800e088 <RTC_ByteToBcd2>
 80038a4:	4603      	mov	r3, r0
 80038a6:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	78db      	ldrb	r3, [r3, #3]
 80038ae:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	6939      	ldr	r1, [r7, #16]
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <RTC_SetTime+0xc8>)
 80038bc:	400b      	ands	r3, r1
 80038be:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f00a fba3 	bl	800e00c <RTC_ExitInitMode>
 80038c6:	4603      	mov	r3, r0
 80038c8:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	22ff      	movs	r2, #255	; 0xff
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d103      	bne.n	80038e0 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]

}
 80038ea:	4618      	mov	r0, r3
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd90      	pop	{r4, r7, pc}
 80038f2:	bf00      	nop
 80038f4:	007f7f7f 	.word	0x007f7f7f

080038f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038fc:	4b30      	ldr	r3, [pc, #192]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 80038fe:	4a31      	ldr	r2, [pc, #196]	; (80039c4 <MX_USART1_UART_Init+0xcc>)
 8003900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003902:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003904:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003912:	2200      	movs	r2, #0
 8003914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800391e:	220c      	movs	r2, #12
 8003920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003922:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003936:	2200      	movs	r2, #0
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800393a:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800393c:	2200      	movs	r2, #0
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003940:	481f      	ldr	r0, [pc, #124]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003942:	f00c fc35 	bl	80101b0 <HAL_UART_Init>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800394c:	f7fe fc38 	bl	80021c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003950:	2100      	movs	r1, #0
 8003952:	481b      	ldr	r0, [pc, #108]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003954:	f00f f97b 	bl	8012c4e <HAL_UARTEx_SetTxFifoThreshold>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800395e:	f7fe fc2f 	bl	80021c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003962:	2100      	movs	r1, #0
 8003964:	4816      	ldr	r0, [pc, #88]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003966:	f00f f9b0 	bl	8012cca <HAL_UARTEx_SetRxFifoThreshold>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003970:	f7fe fc26 	bl	80021c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003974:	4812      	ldr	r0, [pc, #72]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003976:	f00f f931 	bl	8012bdc <HAL_UARTEx_DisableFifoMode>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003980:	f7fe fc1e 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8003984:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003988:	480d      	ldr	r0, [pc, #52]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800398a:	f00f f99e 	bl	8012cca <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800398e:	480c      	ldr	r0, [pc, #48]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003990:	f00f f8e9 	bl	8012b66 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8003994:	480a      	ldr	r0, [pc, #40]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003996:	f00f f8b3 	bl	8012b00 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039a8:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80039b8:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	240006cc 	.word	0x240006cc
 80039c4:	40011000 	.word	0x40011000

080039c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b0ba      	sub	sp, #232	; 0xe8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039e0:	f107 0310 	add.w	r3, r7, #16
 80039e4:	22c0      	movs	r2, #192	; 0xc0
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f012 fc57 	bl	801629c <memset>
  if(uartHandle->Instance==USART1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a41      	ldr	r2, [pc, #260]	; (8003af8 <HAL_UART_MspInit+0x130>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d17b      	bne.n	8003af0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039f8:	f04f 0201 	mov.w	r2, #1
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003a04:	2318      	movs	r3, #24
 8003a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a0a:	f107 0310 	add.w	r3, r7, #16
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f007 fb54 	bl	800b0bc <HAL_RCCEx_PeriphCLKConfig>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003a1a:	f7fe fbd1 	bl	80021c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a1e:	4b37      	ldr	r3, [pc, #220]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a24:	4a35      	ldr	r2, [pc, #212]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a26:	f043 0310 	orr.w	r3, r3, #16
 8003a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a2e:	4b33      	ldr	r3, [pc, #204]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3c:	4b2f      	ldr	r3, [pc, #188]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a42:	4a2e      	ldr	r2, [pc, #184]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a62:	2302      	movs	r3, #2
 8003a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a74:	2307      	movs	r3, #7
 8003a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a7e:	4619      	mov	r1, r3
 8003a80:	481f      	ldr	r0, [pc, #124]	; (8003b00 <HAL_UART_MspInit+0x138>)
 8003a82:	f005 fa8f 	bl	8008fa4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003a86:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003a88:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <HAL_UART_MspInit+0x140>)
 8003a8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003a8e:	222a      	movs	r2, #42	; 0x2a
 8003a90:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a92:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003a94:	2240      	movs	r2, #64	; 0x40
 8003a96:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a9e:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aa4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aac:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ab8:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003ac4:	480f      	ldr	r0, [pc, #60]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003ac6:	f002 fc25 	bl	8006314 <HAL_DMA_Init>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003ad0:	f7fe fb76 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003ad8:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ada:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2105      	movs	r1, #5
 8003ae4:	2025      	movs	r0, #37	; 0x25
 8003ae6:	f001 ffe7 	bl	8005ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003aea:	2025      	movs	r0, #37	; 0x25
 8003aec:	f001 fffe 	bl	8005aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003af0:	bf00      	nop
 8003af2:	37e8      	adds	r7, #232	; 0xe8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40011000 	.word	0x40011000
 8003afc:	58024400 	.word	0x58024400
 8003b00:	58020000 	.word	0x58020000
 8003b04:	24000760 	.word	0x24000760
 8003b08:	40020040 	.word	0x40020040

08003b0c <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003b16:	4bc2      	ldr	r3, [pc, #776]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003b1c:	4bc0      	ldr	r3, [pc, #768]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003b22:	4bbf      	ldr	r3, [pc, #764]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003b28:	4bbd      	ldr	r3, [pc, #756]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b2e:	4bbc      	ldr	r3, [pc, #752]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b30:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b34:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003b36:	4bba      	ldr	r3, [pc, #744]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003b3c:	4bb8      	ldr	r3, [pc, #736]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003b42:	4bb7      	ldr	r3, [pc, #732]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003b48:	4bb5      	ldr	r3, [pc, #724]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003b4e:	4bb4      	ldr	r3, [pc, #720]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b54:	4bb2      	ldr	r3, [pc, #712]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b56:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b5a:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003b5c:	4bb0      	ldr	r3, [pc, #704]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003b62:	4baf      	ldr	r3, [pc, #700]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b64:	2202      	movs	r2, #2
 8003b66:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003b68:	4bad      	ldr	r3, [pc, #692]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003b6e:	4bac      	ldr	r3, [pc, #688]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003b74:	4baa      	ldr	r3, [pc, #680]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b7a:	4ba9      	ldr	r3, [pc, #676]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b80:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003b82:	4ba7      	ldr	r3, [pc, #668]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003b88:	4ba5      	ldr	r3, [pc, #660]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003b8e:	4ba4      	ldr	r3, [pc, #656]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003b94:	4ba2      	ldr	r3, [pc, #648]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003b9c:	4ba0      	ldr	r3, [pc, #640]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003ba2:	4b9f      	ldr	r3, [pc, #636]	; (8003e20 <voltage_monitor_init+0x314>)
 8003ba4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ba8:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003baa:	4b9d      	ldr	r3, [pc, #628]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003bb0:	4b9b      	ldr	r3, [pc, #620]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003bb8:	4b99      	ldr	r3, [pc, #612]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003bc0:	4b97      	ldr	r3, [pc, #604]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003bc8:	4b95      	ldr	r3, [pc, #596]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003bce:	4b94      	ldr	r3, [pc, #592]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bd0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bd4:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003bd6:	4b92      	ldr	r3, [pc, #584]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003bdc:	4b90      	ldr	r3, [pc, #576]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bde:	2205      	movs	r2, #5
 8003be0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003be4:	4b8e      	ldr	r3, [pc, #568]	; (8003e20 <voltage_monitor_init+0x314>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003bec:	4b8c      	ldr	r3, [pc, #560]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003bf4:	4b8a      	ldr	r3, [pc, #552]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003bfa:	4b89      	ldr	r3, [pc, #548]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bfc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c00:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003c02:	4b87      	ldr	r3, [pc, #540]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003c08:	4b85      	ldr	r3, [pc, #532]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c0a:	2206      	movs	r2, #6
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003c10:	4b83      	ldr	r3, [pc, #524]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003c18:	4b81      	ldr	r3, [pc, #516]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003c20:	4b7f      	ldr	r3, [pc, #508]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c28:	4b7d      	ldr	r3, [pc, #500]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c2e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003c32:	4b7b      	ldr	r3, [pc, #492]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003c3a:	4b79      	ldr	r3, [pc, #484]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003c42:	4b77      	ldr	r3, [pc, #476]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003c4a:	4b75      	ldr	r3, [pc, #468]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003c52:	4b73      	ldr	r3, [pc, #460]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c5a:	4b71      	ldr	r3, [pc, #452]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003c64:	4b6e      	ldr	r3, [pc, #440]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003c6c:	4b6c      	ldr	r3, [pc, #432]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c6e:	2208      	movs	r2, #8
 8003c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003c74:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003c7c:	4b68      	ldr	r3, [pc, #416]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003c84:	4b66      	ldr	r3, [pc, #408]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003c8c:	4b64      	ldr	r3, [pc, #400]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c8e:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003c92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003c96:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c98:	f640 3283 	movw	r2, #2947	; 0xb83
 8003c9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003ca0:	4b5f      	ldr	r3, [pc, #380]	; (8003e20 <voltage_monitor_init+0x314>)
 8003ca2:	2209      	movs	r2, #9
 8003ca4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003ca8:	4b5d      	ldr	r3, [pc, #372]	; (8003e20 <voltage_monitor_init+0x314>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003cb0:	4b5b      	ldr	r3, [pc, #364]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003cb8:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003cc0:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cc2:	f640 7245 	movw	r2, #3909	; 0xf45
 8003cc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003cca:	4b55      	ldr	r3, [pc, #340]	; (8003e20 <voltage_monitor_init+0x314>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003cd2:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003cda:	4b51      	ldr	r3, [pc, #324]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003ce2:	4b4f      	ldr	r3, [pc, #316]	; (8003e20 <voltage_monitor_init+0x314>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003cea:	4b4d      	ldr	r3, [pc, #308]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003cf2:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cf4:	f640 7245 	movw	r2, #3909	; 0xf45
 8003cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003cfc:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cfe:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003d02:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003d06:	4b46      	ldr	r3, [pc, #280]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d08:	220b      	movs	r2, #11
 8003d0a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003d0e:	4b44      	ldr	r3, [pc, #272]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003d16:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003d1e:	4b40      	ldr	r3, [pc, #256]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d28:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003d2c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003d30:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d32:	f640 6276 	movw	r2, #3702	; 0xe76
 8003d36:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003d3a:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d3c:	220c      	movs	r2, #12
 8003d3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003d42:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003d4a:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003d52:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d5c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003d60:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003d64:	4b2e      	ldr	r3, [pc, #184]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d6e:	220d      	movs	r2, #13
 8003d70:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003d84:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d8e:	f640 7238 	movw	r2, #3896	; 0xf38
 8003d92:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d98:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003d9c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003da0:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <voltage_monitor_init+0x314>)
 8003da2:	220e      	movs	r2, #14
 8003da4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003da8:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <voltage_monitor_init+0x314>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <voltage_monitor_init+0x314>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dc2:	f640 7245 	movw	r2, #3909	; 0xf45
 8003dc6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dcc:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003dd0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <voltage_monitor_init+0x314>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <voltage_monitor_init+0x314>)
 8003df6:	f241 0264 	movw	r2, #4196	; 0x1064
 8003dfa:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <voltage_monitor_init+0x314>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <voltage_monitor_init+0x314>)
 8003e08:	2210      	movs	r2, #16
 8003e0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8003e0e:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <voltage_monitor_init+0x314>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003e16:	4b02      	ldr	r3, [pc, #8]	; (8003e20 <voltage_monitor_init+0x314>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003e1e:	e001      	b.n	8003e24 <voltage_monitor_init+0x318>
 8003e20:	240007d8 	.word	0x240007d8
	rail_monitor[RAIL_n800v].data = 0;
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003e2c:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e2e:	f640 5208 	movw	r2, #3336	; 0xd08
 8003e32:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e38:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003e3c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e42:	2211      	movs	r2, #17
 8003e44:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e62:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e66:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	71fb      	strb	r3, [r7, #7]

	return status;
 8003e76:	79fb      	ldrb	r3, [r7, #7]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	240007d8 	.word	0x240007d8

08003e88 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460a      	mov	r2, r1
 8003e92:	71fb      	strb	r3, [r7, #7]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003e9c:	79fa      	ldrb	r2, [r7, #7]
 8003e9e:	4909      	ldr	r1, [pc, #36]	; (8003ec4 <set_rail_monitor_enable+0x3c>)
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3302      	adds	r3, #2
 8003eac:	79ba      	ldrb	r2, [r7, #6]
 8003eae:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]

	return status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	240007d8 	.word	0x240007d8

08003ec8 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
	return rail_monitor;
 8003ecc:	4b02      	ldr	r3, [pc, #8]	; (8003ed8 <get_rail_monitor+0x10>)
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	240007d8 	.word	0x240007d8

08003edc <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8003ee8:	463b      	mov	r3, r7
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe fc8c 	bl	8002808 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8003ef0:	f107 0310 	add.w	r3, r7, #16
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe fcb7 	bl	8002868 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8003efa:	f107 0308 	add.w	r3, r7, #8
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fd04 	bl	800290c <sample_hk_adc3>
 8003f04:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8003f06:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f08:	809a      	strh	r2, [r3, #4]
 8003f0a:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8003f0c:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f0e:	81da      	strh	r2, [r3, #14]
 8003f10:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8003f12:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f14:	831a      	strh	r2, [r3, #24]
 8003f16:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8003f18:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f1a:	845a      	strh	r2, [r3, #34]	; 0x22
 8003f1c:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f20:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003f22:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f26:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f28:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8003f30:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003f38:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8003f3a:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003f40:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8003f42:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8003f48:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8003f50:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f54:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8003f58:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f5c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8003f60:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f64:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003f68:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f6c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8003f70:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f74:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8003f78:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f7c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003f80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <set_rail_monitor+0xc0>)
 8003f84:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8003f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3728      	adds	r7, #40	; 0x28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	240007d8 	.word	0x240007d8

08003fa0 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8003fae:	89fb      	ldrh	r3, [r7, #14]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	db05      	blt.n	8003fc2 <in_range+0x22>
 8003fb6:	89fb      	ldrh	r3, [r7, #14]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	dc01      	bgt.n	8003fc2 <in_range+0x22>
		return 1;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <in_range+0x24>
	}
	return 0;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004008 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fd4:	f7ff f85a 	bl	800308c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fd8:	480c      	ldr	r0, [pc, #48]	; (800400c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fda:	490d      	ldr	r1, [pc, #52]	; (8004010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fdc:	4a0d      	ldr	r2, [pc, #52]	; (8004014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe0:	e002      	b.n	8003fe8 <LoopCopyDataInit>

08003fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fe6:	3304      	adds	r3, #4

08003fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fec:	d3f9      	bcc.n	8003fe2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ff0:	4c0a      	ldr	r4, [pc, #40]	; (800401c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ff4:	e001      	b.n	8003ffa <LoopFillZerobss>

08003ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ff8:	3204      	adds	r2, #4

08003ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ffc:	d3fb      	bcc.n	8003ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ffe:	f012 f91b 	bl	8016238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004002:	f7fd fefd 	bl	8001e00 <main>
  bx  lr
 8004006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004008:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800400c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004010:	240000fc 	.word	0x240000fc
  ldr r2, =_sidata
 8004014:	08017168 	.word	0x08017168
  ldr r2, =_sbss
 8004018:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 800401c:	240051f0 	.word	0x240051f0

08004020 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004020:	e7fe      	b.n	8004020 <ADC3_IRQHandler>
	...

08004024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800402a:	2003      	movs	r0, #3
 800402c:	f001 fd39 	bl	8005aa2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004030:	f006 fe2c 	bl	800ac8c <HAL_RCC_GetSysClockFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b15      	ldr	r3, [pc, #84]	; (800408c <HAL_Init+0x68>)
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	4913      	ldr	r1, [pc, #76]	; (8004090 <HAL_Init+0x6c>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
 800404c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <HAL_Init+0x68>)
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	4a0e      	ldr	r2, [pc, #56]	; (8004090 <HAL_Init+0x6c>)
 8004058:	5cd3      	ldrb	r3, [r2, r3]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
 8004064:	4a0b      	ldr	r2, [pc, #44]	; (8004094 <HAL_Init+0x70>)
 8004066:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004068:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <HAL_Init+0x74>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800406e:	2005      	movs	r0, #5
 8004070:	f7fe fe3c 	bl	8002cec <HAL_InitTick>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e002      	b.n	8004084 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800407e:	f7fe fe17 	bl	8002cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	58024400 	.word	0x58024400
 8004090:	080170b4 	.word	0x080170b4
 8004094:	24000088 	.word	0x24000088
 8004098:	24000084 	.word	0x24000084

0800409c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_IncTick+0x20>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_IncTick+0x24>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4413      	add	r3, r2
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <HAL_IncTick+0x24>)
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	24000090 	.word	0x24000090
 80040c0:	2400088c 	.word	0x2400088c

080040c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return uwTick;
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <HAL_GetTick+0x14>)
 80040ca:	681b      	ldr	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	2400088c 	.word	0x2400088c

080040dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_GetREVID+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	0c1b      	lsrs	r3, r3, #16
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	5c001000 	.word	0x5c001000

080040f4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	43db      	mvns	r3, r3
 8004106:	401a      	ands	r2, r3
 8004108:	4904      	ldr	r1, [pc, #16]	; (800411c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	58000400 	.word	0x58000400

08004120 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	609a      	str	r2, [r3, #8]
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3360      	adds	r3, #96	; 0x60
 800419a:	461a      	mov	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	430b      	orrs	r3, r1
 80041b6:	431a      	orrs	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	611a      	str	r2, [r3, #16]
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b087      	sub	sp, #28
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3360      	adds	r3, #96	; 0x60
 800420a:	461a      	mov	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	431a      	orrs	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	601a      	str	r2, [r3, #0]
  }
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3330      	adds	r3, #48	; 0x30
 8004266:	461a      	mov	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	f003 030c 	and.w	r3, r3, #12
 8004272:	4413      	add	r3, r2
 8004274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	211f      	movs	r1, #31
 8004282:	fa01 f303 	lsl.w	r3, r1, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	401a      	ands	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0e9b      	lsrs	r3, r3, #26
 800428e:	f003 011f 	and.w	r1, r3, #31
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	431a      	orrs	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f023 0203 	bic.w	r2, r3, #3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	60da      	str	r2, [r3, #12]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3314      	adds	r3, #20
 80042e4:	461a      	mov	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	0e5b      	lsrs	r3, r3, #25
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	4413      	add	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	0d1b      	lsrs	r3, r3, #20
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2107      	movs	r1, #7
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	401a      	ands	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	0d1b      	lsrs	r3, r3, #20
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	431a      	orrs	r2, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004344:	43db      	mvns	r3, r3
 8004346:	401a      	ands	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0318 	and.w	r3, r3, #24
 800434e:	4908      	ldr	r1, [pc, #32]	; (8004370 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004350:	40d9      	lsrs	r1, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	400b      	ands	r3, r1
 8004356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800435a:	431a      	orrs	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	000fffff 	.word	0x000fffff

08004374 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 031f 	and.w	r3, r3, #31
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800439e:	4013      	ands	r3, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6093      	str	r3, [r2, #8]
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	5fffffc0 	.word	0x5fffffc0

080043b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c8:	d101      	bne.n	80043ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <LL_ADC_EnableInternalRegulator+0x24>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	6fffffc0 	.word	0x6fffffc0

08004404 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004418:	d101      	bne.n	800441e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <LL_ADC_Enable+0x24>)
 800443a:	4013      	ands	r3, r2
 800443c:	f043 0201 	orr.w	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	7fffffc0 	.word	0x7fffffc0

08004454 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <LL_ADC_Disable+0x24>)
 8004462:	4013      	ands	r3, r2
 8004464:	f043 0202 	orr.w	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	7fffffc0 	.word	0x7fffffc0

0800447c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <LL_ADC_IsEnabled+0x18>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <LL_ADC_IsEnabled+0x1a>
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d101      	bne.n	80044ba <LL_ADC_IsDisableOngoing+0x18>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <LL_ADC_IsDisableOngoing+0x1a>
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <LL_ADC_REG_StartConversion+0x24>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	f043 0204 	orr.w	r2, r3, #4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	7fffffc0 	.word	0x7fffffc0

080044f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d101      	bne.n	8004508 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b08      	cmp	r3, #8
 8004528:	d101      	bne.n	800452e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800453c:	b590      	push	{r4, r7, lr}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004548:	2300      	movs	r3, #0
 800454a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e18f      	b.n	8004876 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fc f9f1 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff ff19 	bl	80043b4 <LL_ADC_IsDeepPowerDownEnabled>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d004      	beq.n	8004592 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff feff 	bl	8004390 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff ff34 	bl	8004404 <LL_ADC_IsInternalRegulatorEnabled>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d114      	bne.n	80045cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff ff18 	bl	80043dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ac:	4b87      	ldr	r3, [pc, #540]	; (80047cc <HAL_ADC_Init+0x290>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	099b      	lsrs	r3, r3, #6
 80045b2:	4a87      	ldr	r2, [pc, #540]	; (80047d0 <HAL_ADC_Init+0x294>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	3301      	adds	r3, #1
 80045bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045be:	e002      	b.n	80045c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f9      	bne.n	80045c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ff17 	bl	8004404 <LL_ADC_IsInternalRegulatorEnabled>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10d      	bne.n	80045f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	f043 0210 	orr.w	r2, r3, #16
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f043 0201 	orr.w	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ff77 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8004602:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	f040 8129 	bne.w	8004864 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f040 8125 	bne.w	8004864 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004622:	f043 0202 	orr.w	r2, r3, #2
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff ff24 	bl	800447c <LL_ADC_IsEnabled>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d136      	bne.n	80046a8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a65      	ldr	r2, [pc, #404]	; (80047d4 <HAL_ADC_Init+0x298>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d004      	beq.n	800464e <HAL_ADC_Init+0x112>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a63      	ldr	r2, [pc, #396]	; (80047d8 <HAL_ADC_Init+0x29c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10e      	bne.n	800466c <HAL_ADC_Init+0x130>
 800464e:	4861      	ldr	r0, [pc, #388]	; (80047d4 <HAL_ADC_Init+0x298>)
 8004650:	f7ff ff14 	bl	800447c <LL_ADC_IsEnabled>
 8004654:	4604      	mov	r4, r0
 8004656:	4860      	ldr	r0, [pc, #384]	; (80047d8 <HAL_ADC_Init+0x29c>)
 8004658:	f7ff ff10 	bl	800447c <LL_ADC_IsEnabled>
 800465c:	4603      	mov	r3, r0
 800465e:	4323      	orrs	r3, r4
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e008      	b.n	800467e <HAL_ADC_Init+0x142>
 800466c:	485b      	ldr	r0, [pc, #364]	; (80047dc <HAL_ADC_Init+0x2a0>)
 800466e:	f7ff ff05 	bl	800447c <LL_ADC_IsEnabled>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d012      	beq.n	80046a8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a53      	ldr	r2, [pc, #332]	; (80047d4 <HAL_ADC_Init+0x298>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_ADC_Init+0x15a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a51      	ldr	r2, [pc, #324]	; (80047d8 <HAL_ADC_Init+0x29c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d101      	bne.n	800469a <HAL_ADC_Init+0x15e>
 8004696:	4a52      	ldr	r2, [pc, #328]	; (80047e0 <HAL_ADC_Init+0x2a4>)
 8004698:	e000      	b.n	800469c <HAL_ADC_Init+0x160>
 800469a:	4a52      	ldr	r2, [pc, #328]	; (80047e4 <HAL_ADC_Init+0x2a8>)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f7ff fd3c 	bl	8004120 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80046a8:	f7ff fd18 	bl	80040dc <HAL_GetREVID>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d914      	bls.n	80046e0 <HAL_ADC_Init+0x1a4>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d110      	bne.n	80046e0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7d5b      	ldrb	r3, [r3, #21]
 80046c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	7f1b      	ldrb	r3, [r3, #28]
 80046d4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046d6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046d8:	f043 030c 	orr.w	r3, r3, #12
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e00d      	b.n	80046fc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	7d5b      	ldrb	r3, [r3, #21]
 80046e4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046ea:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046f0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	7f1b      	ldrb	r3, [r3, #28]
 80046f6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	7f1b      	ldrb	r3, [r3, #28]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d106      	bne.n	8004712 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	3b01      	subs	r3, #1
 800470a:	045b      	lsls	r3, r3, #17
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4313      	orrs	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <HAL_ADC_Init+0x2ac>)
 8004736:	4013      	ands	r3, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	69b9      	ldr	r1, [r7, #24]
 800473e:	430b      	orrs	r3, r1
 8004740:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fed2 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 800474c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fedf 	bl	8004516 <LL_ADC_INJ_IsConversionOngoing>
 8004758:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d15f      	bne.n	8004820 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d15c      	bne.n	8004820 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	7d1b      	ldrb	r3, [r3, #20]
 800476a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_ADC_Init+0x2b0>)
 800477c:	4013      	ands	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	69b9      	ldr	r1, [r7, #24]
 8004784:	430b      	orrs	r3, r1
 8004786:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800478e:	2b01      	cmp	r3, #1
 8004790:	d130      	bne.n	80047f4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <HAL_ADC_Init+0x2b4>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047a6:	3a01      	subs	r2, #1
 80047a8:	0411      	lsls	r1, r2, #16
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047ae:	4311      	orrs	r1, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047b4:	4311      	orrs	r1, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047ba:	430a      	orrs	r2, r1
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	611a      	str	r2, [r3, #16]
 80047c8:	e01c      	b.n	8004804 <HAL_ADC_Init+0x2c8>
 80047ca:	bf00      	nop
 80047cc:	24000084 	.word	0x24000084
 80047d0:	053e2d63 	.word	0x053e2d63
 80047d4:	40022000 	.word	0x40022000
 80047d8:	40022100 	.word	0x40022100
 80047dc:	58026000 	.word	0x58026000
 80047e0:	40022300 	.word	0x40022300
 80047e4:	58026300 	.word	0x58026300
 80047e8:	fff0c003 	.word	0xfff0c003
 80047ec:	ffffbffc 	.word	0xffffbffc
 80047f0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fdec 	bl	80053f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d10c      	bne.n	8004842 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	f023 010f 	bic.w	r1, r3, #15
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	1e5a      	subs	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
 8004840:	e007      	b.n	8004852 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 020f 	bic.w	r2, r2, #15
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	f043 0201 	orr.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	655a      	str	r2, [r3, #84]	; 0x54
 8004862:	e007      	b.n	8004874 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f043 0210 	orr.w	r2, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004874:	7ffb      	ldrb	r3, [r7, #31]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3724      	adds	r7, #36	; 0x24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd90      	pop	{r4, r7, pc}
 800487e:	bf00      	nop

08004880 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a55      	ldr	r2, [pc, #340]	; (80049e8 <HAL_ADC_Start_DMA+0x168>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_ADC_Start_DMA+0x20>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a54      	ldr	r2, [pc, #336]	; (80049ec <HAL_ADC_Start_DMA+0x16c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d101      	bne.n	80048a4 <HAL_ADC_Start_DMA+0x24>
 80048a0:	4b53      	ldr	r3, [pc, #332]	; (80049f0 <HAL_ADC_Start_DMA+0x170>)
 80048a2:	e000      	b.n	80048a6 <HAL_ADC_Start_DMA+0x26>
 80048a4:	4b53      	ldr	r3, [pc, #332]	; (80049f4 <HAL_ADC_Start_DMA+0x174>)
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fd64 	bl	8004374 <LL_ADC_GetMultimode>
 80048ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fe1c 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 808c 	bne.w	80049d8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_ADC_Start_DMA+0x4e>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e087      	b.n	80049de <HAL_ADC_Start_DMA+0x15e>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d002      	beq.n	80048e8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b09      	cmp	r3, #9
 80048e6:	d170      	bne.n	80049ca <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fc07 	bl	80050fc <ADC_Enable>
 80048ee:	4603      	mov	r3, r0
 80048f0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d163      	bne.n	80049c0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048fc:	4b3e      	ldr	r3, [pc, #248]	; (80049f8 <HAL_ADC_Start_DMA+0x178>)
 80048fe:	4013      	ands	r3, r2
 8004900:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a37      	ldr	r2, [pc, #220]	; (80049ec <HAL_ADC_Start_DMA+0x16c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d002      	beq.n	8004918 <HAL_ADC_Start_DMA+0x98>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	e000      	b.n	800491a <HAL_ADC_Start_DMA+0x9a>
 8004918:	4b33      	ldr	r3, [pc, #204]	; (80049e8 <HAL_ADC_Start_DMA+0x168>)
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	4293      	cmp	r3, r2
 8004920:	d002      	beq.n	8004928 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d006      	beq.n	800494e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	f023 0206 	bic.w	r2, r3, #6
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	659a      	str	r2, [r3, #88]	; 0x58
 800494c:	e002      	b.n	8004954 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004958:	4a28      	ldr	r2, [pc, #160]	; (80049fc <HAL_ADC_Start_DMA+0x17c>)
 800495a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <HAL_ADC_Start_DMA+0x180>)
 8004962:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004968:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <HAL_ADC_Start_DMA+0x184>)
 800496a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	221c      	movs	r2, #28
 8004972:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0210 	orr.w	r2, r2, #16
 800498a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f7ff fc89 	bl	80042ae <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3340      	adds	r3, #64	; 0x40
 80049a6:	4619      	mov	r1, r3
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f002 f80e 	bl	80069cc <HAL_DMA_Start_IT>
 80049b0:	4603      	mov	r3, r0
 80049b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fd85 	bl	80044c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80049be:	e00d      	b.n	80049dc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80049c8:	e008      	b.n	80049dc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049d6:	e001      	b.n	80049dc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
 80049da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40022000 	.word	0x40022000
 80049ec:	40022100 	.word	0x40022100
 80049f0:	40022300 	.word	0x40022300
 80049f4:	58026300 	.word	0x58026300
 80049f8:	fffff0fe 	.word	0xfffff0fe
 80049fc:	080052cf 	.word	0x080052cf
 8004a00:	080053a7 	.word	0x080053a7
 8004a04:	080053c3 	.word	0x080053c3

08004a08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b0a1      	sub	sp, #132	; 0x84
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4a65      	ldr	r2, [pc, #404]	; (8004bf4 <HAL_ADC_ConfigChannel+0x1b0>)
 8004a5e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x2a>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e32e      	b.n	80050cc <HAL_ADC_ConfigChannel+0x688>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fd38 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 8313 	bne.w	80050ae <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	db2c      	blt.n	8004aea <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d108      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x6a>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0e9b      	lsrs	r3, r3, #26
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	e016      	b.n	8004adc <HAL_ADC_ConfigChannel+0x98>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab6:	fa93 f3a3 	rbit	r3, r3
 8004aba:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004abe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004ac6:	2320      	movs	r3, #32
 8004ac8:	e003      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	69d1      	ldr	r1, [r2, #28]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f7ff fbad 	bl	8004256 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fcf5 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8004b06:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fd02 	bl	8004516 <LL_ADC_INJ_IsConversionOngoing>
 8004b12:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 80b8 	bne.w	8004c8c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f040 80b4 	bne.w	8004c8c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	6819      	ldr	r1, [r3, #0]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	461a      	mov	r2, r3
 8004b32:	f7ff fbcf 	bl	80042d4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b36:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <HAL_ADC_ConfigChannel+0x1b4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b42:	d10b      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x118>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	089b      	lsrs	r3, r3, #2
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	e01d      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x154>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <HAL_ADC_ConfigChannel+0x13e>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	e00a      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x154>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	089b      	lsrs	r3, r3, #2
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d02c      	beq.n	8004bfc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6919      	ldr	r1, [r3, #16]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bb0:	f7ff faea 	bl	8004188 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	6919      	ldr	r1, [r3, #16]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	7e5b      	ldrb	r3, [r3, #25]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d102      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x186>
 8004bc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bc8:	e000      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x188>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f7ff fb14 	bl	80041fa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6919      	ldr	r1, [r3, #16]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	7e1b      	ldrb	r3, [r3, #24]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d102      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x1a4>
 8004be2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004be6:	e000      	b.n	8004bea <HAL_ADC_ConfigChannel+0x1a6>
 8004be8:	2300      	movs	r3, #0
 8004bea:	461a      	mov	r2, r3
 8004bec:	f7ff faec 	bl	80041c8 <LL_ADC_SetDataRightShift>
 8004bf0:	e04c      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x248>
 8004bf2:	bf00      	nop
 8004bf4:	47ff0000 	.word	0x47ff0000
 8004bf8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	069b      	lsls	r3, r3, #26
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d107      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c1e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	069b      	lsls	r3, r3, #26
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d107      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c42:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	069b      	lsls	r3, r3, #26
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d107      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c66:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	069b      	lsls	r3, r3, #26
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d107      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c8a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff fbf3 	bl	800447c <LL_ADC_IsEnabled>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f040 8211 	bne.w	80050c0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6819      	ldr	r1, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f7ff fb3e 	bl	800432c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4aa1      	ldr	r2, [pc, #644]	; (8004f3c <HAL_ADC_ConfigChannel+0x4f8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	f040 812e 	bne.w	8004f18 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x2a0>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	0e9b      	lsrs	r3, r3, #26
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2b09      	cmp	r3, #9
 8004cda:	bf94      	ite	ls
 8004cdc:	2301      	movls	r3, #1
 8004cde:	2300      	movhi	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e019      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x2d4>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cec:	fa93 f3a3 	rbit	r3, r3
 8004cf0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	e003      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d02:	fab3 f383 	clz	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	2b09      	cmp	r3, #9
 8004d10:	bf94      	ite	ls
 8004d12:	2301      	movls	r3, #1
 8004d14:	2300      	movhi	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d079      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d107      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x2f4>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	0e9b      	lsrs	r3, r3, #26
 8004d2e:	3301      	adds	r3, #1
 8004d30:	069b      	lsls	r3, r3, #26
 8004d32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d36:	e015      	b.n	8004d64 <HAL_ADC_ConfigChannel+0x320>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d48:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004d50:	2320      	movs	r3, #32
 8004d52:	e003      	b.n	8004d5c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	069b      	lsls	r3, r3, #26
 8004d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x340>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	0e9b      	lsrs	r3, r3, #26
 8004d76:	3301      	adds	r3, #1
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d82:	e017      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x370>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8c:	fa93 f3a3 	rbit	r3, r3
 8004d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d94:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	e003      	b.n	8004da8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da2:	fab3 f383 	clz	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	3301      	adds	r3, #1
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	2101      	movs	r1, #1
 8004db0:	fa01 f303 	lsl.w	r3, r1, r3
 8004db4:	ea42 0103 	orr.w	r1, r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <HAL_ADC_ConfigChannel+0x396>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	0e9b      	lsrs	r3, r3, #26
 8004dca:	3301      	adds	r3, #1
 8004dcc:	f003 021f 	and.w	r2, r3, #31
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	4413      	add	r3, r2
 8004dd6:	051b      	lsls	r3, r3, #20
 8004dd8:	e018      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x3c8>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de2:	fa93 f3a3 	rbit	r3, r3
 8004de6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004df2:	2320      	movs	r3, #32
 8004df4:	e003      	b.n	8004dfe <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	fab3 f383 	clz	r3, r3
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f003 021f 	and.w	r2, r3, #31
 8004e04:	4613      	mov	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4413      	add	r3, r2
 8004e0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	e07e      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d107      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x3e8>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	0e9b      	lsrs	r3, r3, #26
 8004e22:	3301      	adds	r3, #1
 8004e24:	069b      	lsls	r3, r3, #26
 8004e26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e2a:	e015      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x414>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	fa93 f3a3 	rbit	r3, r3
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004e44:	2320      	movs	r3, #32
 8004e46:	e003      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	fab3 f383 	clz	r3, r3
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	3301      	adds	r3, #1
 8004e52:	069b      	lsls	r3, r3, #26
 8004e54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x434>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	0e9b      	lsrs	r3, r3, #26
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	2101      	movs	r1, #1
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	e017      	b.n	8004ea8 <HAL_ADC_ConfigChannel+0x464>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	fa93 f3a3 	rbit	r3, r3
 8004e84:	61bb      	str	r3, [r7, #24]
  return result;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004e90:	2320      	movs	r3, #32
 8004e92:	e003      	b.n	8004e9c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	fab3 f383 	clz	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	ea42 0103 	orr.w	r1, r2, r3
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10d      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x490>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	0e9b      	lsrs	r3, r3, #26
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	f003 021f 	and.w	r2, r3, #31
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	3b1e      	subs	r3, #30
 8004ecc:	051b      	lsls	r3, r3, #20
 8004ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	e01b      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x4c8>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	fa93 f3a3 	rbit	r3, r3
 8004ee0:	60fb      	str	r3, [r7, #12]
  return result;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004eec:	2320      	movs	r3, #32
 8004eee:	e003      	b.n	8004ef8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	fab3 f383 	clz	r3, r3
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f003 021f 	and.w	r2, r3, #31
 8004efe:	4613      	mov	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4413      	add	r3, r2
 8004f04:	3b1e      	subs	r3, #30
 8004f06:	051b      	lsls	r3, r3, #20
 8004f08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	6892      	ldr	r2, [r2, #8]
 8004f12:	4619      	mov	r1, r3
 8004f14:	f7ff f9de 	bl	80042d4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f280 80cf 	bge.w	80050c0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a06      	ldr	r2, [pc, #24]	; (8004f40 <HAL_ADC_ConfigChannel+0x4fc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_ADC_ConfigChannel+0x4f2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a04      	ldr	r2, [pc, #16]	; (8004f44 <HAL_ADC_ConfigChannel+0x500>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d10a      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x508>
 8004f36:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <HAL_ADC_ConfigChannel+0x504>)
 8004f38:	e009      	b.n	8004f4e <HAL_ADC_ConfigChannel+0x50a>
 8004f3a:	bf00      	nop
 8004f3c:	47ff0000 	.word	0x47ff0000
 8004f40:	40022000 	.word	0x40022000
 8004f44:	40022100 	.word	0x40022100
 8004f48:	40022300 	.word	0x40022300
 8004f4c:	4b61      	ldr	r3, [pc, #388]	; (80050d4 <HAL_ADC_ConfigChannel+0x690>)
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff f90c 	bl	800416c <LL_ADC_GetCommonPathInternalCh>
 8004f54:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a5f      	ldr	r2, [pc, #380]	; (80050d8 <HAL_ADC_ConfigChannel+0x694>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_ADC_ConfigChannel+0x526>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a5d      	ldr	r2, [pc, #372]	; (80050dc <HAL_ADC_ConfigChannel+0x698>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d10e      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x544>
 8004f6a:	485b      	ldr	r0, [pc, #364]	; (80050d8 <HAL_ADC_ConfigChannel+0x694>)
 8004f6c:	f7ff fa86 	bl	800447c <LL_ADC_IsEnabled>
 8004f70:	4604      	mov	r4, r0
 8004f72:	485a      	ldr	r0, [pc, #360]	; (80050dc <HAL_ADC_ConfigChannel+0x698>)
 8004f74:	f7ff fa82 	bl	800447c <LL_ADC_IsEnabled>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	4323      	orrs	r3, r4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	e008      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x556>
 8004f88:	4855      	ldr	r0, [pc, #340]	; (80050e0 <HAL_ADC_ConfigChannel+0x69c>)
 8004f8a:	f7ff fa77 	bl	800447c <LL_ADC_IsEnabled>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d07d      	beq.n	800509a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a50      	ldr	r2, [pc, #320]	; (80050e4 <HAL_ADC_ConfigChannel+0x6a0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d130      	bne.n	800500a <HAL_ADC_ConfigChannel+0x5c6>
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d12b      	bne.n	800500a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a4a      	ldr	r2, [pc, #296]	; (80050e0 <HAL_ADC_ConfigChannel+0x69c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	f040 8081 	bne.w	80050c0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a45      	ldr	r2, [pc, #276]	; (80050d8 <HAL_ADC_ConfigChannel+0x694>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_ADC_ConfigChannel+0x58e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a43      	ldr	r2, [pc, #268]	; (80050dc <HAL_ADC_ConfigChannel+0x698>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x592>
 8004fd2:	4a45      	ldr	r2, [pc, #276]	; (80050e8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004fd4:	e000      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x594>
 8004fd6:	4a3f      	ldr	r2, [pc, #252]	; (80050d4 <HAL_ADC_ConfigChannel+0x690>)
 8004fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f7ff f8b0 	bl	8004146 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fe6:	4b41      	ldr	r3, [pc, #260]	; (80050ec <HAL_ADC_ConfigChannel+0x6a8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	099b      	lsrs	r3, r3, #6
 8004fec:	4a40      	ldr	r2, [pc, #256]	; (80050f0 <HAL_ADC_ConfigChannel+0x6ac>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	099b      	lsrs	r3, r3, #6
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ffa:	e002      	b.n	8005002 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f9      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005008:	e05a      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a39      	ldr	r2, [pc, #228]	; (80050f4 <HAL_ADC_ConfigChannel+0x6b0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d11e      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x60e>
 8005014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d119      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a2f      	ldr	r2, [pc, #188]	; (80050e0 <HAL_ADC_ConfigChannel+0x69c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d14b      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <HAL_ADC_ConfigChannel+0x694>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_ADC_ConfigChannel+0x5f8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a29      	ldr	r2, [pc, #164]	; (80050dc <HAL_ADC_ConfigChannel+0x698>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d101      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x5fc>
 800503c:	4a2a      	ldr	r2, [pc, #168]	; (80050e8 <HAL_ADC_ConfigChannel+0x6a4>)
 800503e:	e000      	b.n	8005042 <HAL_ADC_ConfigChannel+0x5fe>
 8005040:	4a24      	ldr	r2, [pc, #144]	; (80050d4 <HAL_ADC_ConfigChannel+0x690>)
 8005042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005044:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f7ff f87b 	bl	8004146 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005050:	e036      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a28      	ldr	r2, [pc, #160]	; (80050f8 <HAL_ADC_ConfigChannel+0x6b4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d131      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x67c>
 800505c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d12c      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1d      	ldr	r2, [pc, #116]	; (80050e0 <HAL_ADC_ConfigChannel+0x69c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d127      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <HAL_ADC_ConfigChannel+0x694>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_ADC_ConfigChannel+0x640>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a17      	ldr	r2, [pc, #92]	; (80050dc <HAL_ADC_ConfigChannel+0x698>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <HAL_ADC_ConfigChannel+0x644>
 8005084:	4a18      	ldr	r2, [pc, #96]	; (80050e8 <HAL_ADC_ConfigChannel+0x6a4>)
 8005086:	e000      	b.n	800508a <HAL_ADC_ConfigChannel+0x646>
 8005088:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <HAL_ADC_ConfigChannel+0x690>)
 800508a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f7ff f857 	bl	8004146 <LL_ADC_SetCommonPathInternalCh>
 8005098:	e012      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80050ac:	e008      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	f043 0220 	orr.w	r2, r3, #32
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80050c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3784      	adds	r7, #132	; 0x84
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd90      	pop	{r4, r7, pc}
 80050d4:	58026300 	.word	0x58026300
 80050d8:	40022000 	.word	0x40022000
 80050dc:	40022100 	.word	0x40022100
 80050e0:	58026000 	.word	0x58026000
 80050e4:	cb840000 	.word	0xcb840000
 80050e8:	40022300 	.word	0x40022300
 80050ec:	24000084 	.word	0x24000084
 80050f0:	053e2d63 	.word	0x053e2d63
 80050f4:	c7520000 	.word	0xc7520000
 80050f8:	cfb80000 	.word	0xcfb80000

080050fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff f9b7 	bl	800447c <LL_ADC_IsEnabled>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d16e      	bne.n	80051f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	4b38      	ldr	r3, [pc, #224]	; (80051fc <ADC_Enable+0x100>)
 800511c:	4013      	ands	r3, r2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00d      	beq.n	800513e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	f043 0210 	orr.w	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005132:	f043 0201 	orr.w	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e05a      	b.n	80051f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff f972 	bl	800442c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005148:	f7fe ffbc 	bl	80040c4 <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2b      	ldr	r2, [pc, #172]	; (8005200 <ADC_Enable+0x104>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <ADC_Enable+0x66>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a29      	ldr	r2, [pc, #164]	; (8005204 <ADC_Enable+0x108>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d101      	bne.n	8005166 <ADC_Enable+0x6a>
 8005162:	4b29      	ldr	r3, [pc, #164]	; (8005208 <ADC_Enable+0x10c>)
 8005164:	e000      	b.n	8005168 <ADC_Enable+0x6c>
 8005166:	4b29      	ldr	r3, [pc, #164]	; (800520c <ADC_Enable+0x110>)
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff f903 	bl	8004374 <LL_ADC_GetMultimode>
 800516e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a23      	ldr	r2, [pc, #140]	; (8005204 <ADC_Enable+0x108>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d002      	beq.n	8005180 <ADC_Enable+0x84>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	e000      	b.n	8005182 <ADC_Enable+0x86>
 8005180:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <ADC_Enable+0x104>)
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	4293      	cmp	r3, r2
 8005188:	d02c      	beq.n	80051e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d130      	bne.n	80051f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005190:	e028      	b.n	80051e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff f970 	bl	800447c <LL_ADC_IsEnabled>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff f940 	bl	800442c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051ac:	f7fe ff8a 	bl	80040c4 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d914      	bls.n	80051e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d00d      	beq.n	80051e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051cc:	f043 0210 	orr.w	r2, r3, #16
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	f043 0201 	orr.w	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e007      	b.n	80051f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d1cf      	bne.n	8005192 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	8000003f 	.word	0x8000003f
 8005200:	40022000 	.word	0x40022000
 8005204:	40022100 	.word	0x40022100
 8005208:	40022300 	.word	0x40022300
 800520c:	58026300 	.word	0x58026300

08005210 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff f940 	bl	80044a2 <LL_ADC_IsDisableOngoing>
 8005222:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff f927 	bl	800447c <LL_ADC_IsEnabled>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d047      	beq.n	80052c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d144      	bne.n	80052c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 030d 	and.w	r3, r3, #13
 8005244:	2b01      	cmp	r3, #1
 8005246:	d10c      	bne.n	8005262 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff f901 	bl	8004454 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2203      	movs	r2, #3
 8005258:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800525a:	f7fe ff33 	bl	80040c4 <HAL_GetTick>
 800525e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005260:	e029      	b.n	80052b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	f043 0210 	orr.w	r2, r3, #16
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	f043 0201 	orr.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e023      	b.n	80052c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800527e:	f7fe ff21 	bl	80040c4 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d914      	bls.n	80052b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00d      	beq.n	80052b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	f043 0210 	orr.w	r2, r3, #16
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052aa:	f043 0201 	orr.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e007      	b.n	80052c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1dc      	bne.n	800527e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d14b      	bne.n	8005380 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d021      	beq.n	8005346 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe ff92 	bl	8004230 <LL_ADC_REG_IsTriggerSourceSWStart>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d032      	beq.n	8005378 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d12b      	bne.n	8005378 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d11f      	bne.n	8005378 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533c:	f043 0201 	orr.w	r2, r3, #1
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	655a      	str	r2, [r3, #84]	; 0x54
 8005344:	e018      	b.n	8005378 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d111      	bne.n	8005378 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d105      	bne.n	8005378 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005370:	f043 0201 	orr.w	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff fb45 	bl	8004a08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800537e:	e00e      	b.n	800539e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fb4f 	bl	8004a30 <HAL_ADC_ErrorCallback>
}
 8005392:	e004      	b.n	800539e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	4798      	blx	r3
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fb31 	bl	8004a1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	f043 0204 	orr.w	r2, r3, #4
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff fb21 	bl	8004a30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a7a      	ldr	r2, [pc, #488]	; (80055f0 <ADC_ConfigureBoostMode+0x1f8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <ADC_ConfigureBoostMode+0x1c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a79      	ldr	r2, [pc, #484]	; (80055f4 <ADC_ConfigureBoostMode+0x1fc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d109      	bne.n	8005428 <ADC_ConfigureBoostMode+0x30>
 8005414:	4b78      	ldr	r3, [pc, #480]	; (80055f8 <ADC_ConfigureBoostMode+0x200>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800541c:	2b00      	cmp	r3, #0
 800541e:	bf14      	ite	ne
 8005420:	2301      	movne	r3, #1
 8005422:	2300      	moveq	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	e008      	b.n	800543a <ADC_ConfigureBoostMode+0x42>
 8005428:	4b74      	ldr	r3, [pc, #464]	; (80055fc <ADC_ConfigureBoostMode+0x204>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01c      	beq.n	8005478 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800543e:	f005 fd9f 	bl	800af80 <HAL_RCC_GetHCLKFreq>
 8005442:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800544c:	d010      	beq.n	8005470 <ADC_ConfigureBoostMode+0x78>
 800544e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005452:	d873      	bhi.n	800553c <ADC_ConfigureBoostMode+0x144>
 8005454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005458:	d002      	beq.n	8005460 <ADC_ConfigureBoostMode+0x68>
 800545a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800545e:	d16d      	bne.n	800553c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	0c1b      	lsrs	r3, r3, #16
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	60fb      	str	r3, [r7, #12]
        break;
 800546e:	e068      	b.n	8005542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	089b      	lsrs	r3, r3, #2
 8005474:	60fb      	str	r3, [r7, #12]
        break;
 8005476:	e064      	b.n	8005542 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005478:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800547c:	f04f 0100 	mov.w	r1, #0
 8005480:	f007 f826 	bl	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005484:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800548e:	d051      	beq.n	8005534 <ADC_ConfigureBoostMode+0x13c>
 8005490:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005494:	d854      	bhi.n	8005540 <ADC_ConfigureBoostMode+0x148>
 8005496:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800549a:	d047      	beq.n	800552c <ADC_ConfigureBoostMode+0x134>
 800549c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80054a0:	d84e      	bhi.n	8005540 <ADC_ConfigureBoostMode+0x148>
 80054a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054a6:	d03d      	beq.n	8005524 <ADC_ConfigureBoostMode+0x12c>
 80054a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054ac:	d848      	bhi.n	8005540 <ADC_ConfigureBoostMode+0x148>
 80054ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054b2:	d033      	beq.n	800551c <ADC_ConfigureBoostMode+0x124>
 80054b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054b8:	d842      	bhi.n	8005540 <ADC_ConfigureBoostMode+0x148>
 80054ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054be:	d029      	beq.n	8005514 <ADC_ConfigureBoostMode+0x11c>
 80054c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054c4:	d83c      	bhi.n	8005540 <ADC_ConfigureBoostMode+0x148>
 80054c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054ca:	d01a      	beq.n	8005502 <ADC_ConfigureBoostMode+0x10a>
 80054cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054d0:	d836      	bhi.n	8005540 <ADC_ConfigureBoostMode+0x148>
 80054d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054d6:	d014      	beq.n	8005502 <ADC_ConfigureBoostMode+0x10a>
 80054d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054dc:	d830      	bhi.n	8005540 <ADC_ConfigureBoostMode+0x148>
 80054de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e2:	d00e      	beq.n	8005502 <ADC_ConfigureBoostMode+0x10a>
 80054e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e8:	d82a      	bhi.n	8005540 <ADC_ConfigureBoostMode+0x148>
 80054ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054ee:	d008      	beq.n	8005502 <ADC_ConfigureBoostMode+0x10a>
 80054f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054f4:	d824      	bhi.n	8005540 <ADC_ConfigureBoostMode+0x148>
 80054f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054fa:	d002      	beq.n	8005502 <ADC_ConfigureBoostMode+0x10a>
 80054fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005500:	d11e      	bne.n	8005540 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	0c9b      	lsrs	r3, r3, #18
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	60fb      	str	r3, [r7, #12]
        break;
 8005512:	e016      	b.n	8005542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	60fb      	str	r3, [r7, #12]
        break;
 800551a:	e012      	b.n	8005542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	60fb      	str	r3, [r7, #12]
        break;
 8005522:	e00e      	b.n	8005542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	60fb      	str	r3, [r7, #12]
        break;
 800552a:	e00a      	b.n	8005542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	09db      	lsrs	r3, r3, #7
 8005530:	60fb      	str	r3, [r7, #12]
        break;
 8005532:	e006      	b.n	8005542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	60fb      	str	r3, [r7, #12]
        break;
 800553a:	e002      	b.n	8005542 <ADC_ConfigureBoostMode+0x14a>
        break;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005540:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005542:	f7fe fdcb 	bl	80040dc <HAL_GetREVID>
 8005546:	4603      	mov	r3, r0
 8005548:	f241 0203 	movw	r2, #4099	; 0x1003
 800554c:	4293      	cmp	r3, r2
 800554e:	d815      	bhi.n	800557c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <ADC_ConfigureBoostMode+0x208>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d908      	bls.n	800556a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005566:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005568:	e03e      	b.n	80055e8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005578:	609a      	str	r2, [r3, #8]
}
 800557a:	e035      	b.n	80055e8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	085b      	lsrs	r3, r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a1f      	ldr	r2, [pc, #124]	; (8005604 <ADC_ConfigureBoostMode+0x20c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d808      	bhi.n	800559c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005598:	609a      	str	r2, [r3, #8]
}
 800559a:	e025      	b.n	80055e8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a1a      	ldr	r2, [pc, #104]	; (8005608 <ADC_ConfigureBoostMode+0x210>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d80a      	bhi.n	80055ba <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b6:	609a      	str	r2, [r3, #8]
}
 80055b8:	e016      	b.n	80055e8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <ADC_ConfigureBoostMode+0x214>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d80a      	bhi.n	80055d8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d4:	609a      	str	r2, [r3, #8]
}
 80055d6:	e007      	b.n	80055e8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80055e6:	609a      	str	r2, [r3, #8]
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40022000 	.word	0x40022000
 80055f4:	40022100 	.word	0x40022100
 80055f8:	40022300 	.word	0x40022300
 80055fc:	58026300 	.word	0x58026300
 8005600:	01312d00 	.word	0x01312d00
 8005604:	005f5e10 	.word	0x005f5e10
 8005608:	00bebc20 	.word	0x00bebc20
 800560c:	017d7840 	.word	0x017d7840

08005610 <LL_ADC_IsEnabled>:
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <LL_ADC_IsEnabled+0x18>
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <LL_ADC_IsEnabled+0x1a>
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <LL_ADC_StartCalibration>:
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	4b09      	ldr	r3, [pc, #36]	; (8005670 <LL_ADC_StartCalibration+0x38>)
 800564a:	4013      	ands	r3, r2
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005658:	430a      	orrs	r2, r1
 800565a:	4313      	orrs	r3, r2
 800565c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	609a      	str	r2, [r3, #8]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	3ffeffc0 	.word	0x3ffeffc0

08005674 <LL_ADC_IsCalibrationOnGoing>:
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005688:	d101      	bne.n	800568e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <LL_ADC_REG_IsConversionOngoing>:
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d101      	bne.n	80056b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80056de:	2302      	movs	r3, #2
 80056e0:	e04c      	b.n	800577c <HAL_ADCEx_Calibration_Start+0xb8>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7ff fd90 	bl	8005210 <ADC_Disable>
 80056f0:	4603      	mov	r3, r0
 80056f2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d135      	bne.n	8005766 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056fe:	4b21      	ldr	r3, [pc, #132]	; (8005784 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005700:	4013      	ands	r3, r2
 8005702:	f043 0202 	orr.w	r2, r3, #2
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff ff90 	bl	8005638 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005718:	e014      	b.n	8005744 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3301      	adds	r3, #1
 800571e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4a19      	ldr	r2, [pc, #100]	; (8005788 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d30d      	bcc.n	8005744 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572c:	f023 0312 	bic.w	r3, r3, #18
 8005730:	f043 0210 	orr.w	r2, r3, #16
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e01b      	b.n	800577c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff ff93 	bl	8005674 <LL_ADC_IsCalibrationOnGoing>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e2      	bne.n	800571a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005758:	f023 0303 	bic.w	r3, r3, #3
 800575c:	f043 0201 	orr.w	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	655a      	str	r2, [r3, #84]	; 0x54
 8005764:	e005      	b.n	8005772 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576a:	f043 0210 	orr.w	r2, r3, #16
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800577a:	7dfb      	ldrb	r3, [r7, #23]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	ffffeefd 	.word	0xffffeefd
 8005788:	25c3f800 	.word	0x25c3f800

0800578c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800578c:	b590      	push	{r4, r7, lr}
 800578e:	b09f      	sub	sp, #124	; 0x7c
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e0be      	b.n	8005928 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80057b2:	2300      	movs	r3, #0
 80057b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a5c      	ldr	r2, [pc, #368]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d102      	bne.n	80057ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057c4:	4b5b      	ldr	r3, [pc, #364]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057c6:	60bb      	str	r3, [r7, #8]
 80057c8:	e001      	b.n	80057ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80057ca:	2300      	movs	r3, #0
 80057cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10b      	bne.n	80057ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	f043 0220 	orr.w	r2, r3, #32
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e09d      	b.n	8005928 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff ff54 	bl	800569c <LL_ADC_REG_IsConversionOngoing>
 80057f4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff ff4e 	bl	800569c <LL_ADC_REG_IsConversionOngoing>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d17f      	bne.n	8005906 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005808:	2b00      	cmp	r3, #0
 800580a:	d17c      	bne.n	8005906 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a47      	ldr	r2, [pc, #284]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a46      	ldr	r2, [pc, #280]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d101      	bne.n	8005824 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005820:	4b45      	ldr	r3, [pc, #276]	; (8005938 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005822:	e000      	b.n	8005826 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005824:	4b45      	ldr	r3, [pc, #276]	; (800593c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005826:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d039      	beq.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	431a      	orrs	r2, r3
 800583e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005840:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a3a      	ldr	r2, [pc, #232]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a38      	ldr	r2, [pc, #224]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10e      	bne.n	8005874 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005856:	4836      	ldr	r0, [pc, #216]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005858:	f7ff feda 	bl	8005610 <LL_ADC_IsEnabled>
 800585c:	4604      	mov	r4, r0
 800585e:	4835      	ldr	r0, [pc, #212]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005860:	f7ff fed6 	bl	8005610 <LL_ADC_IsEnabled>
 8005864:	4603      	mov	r3, r0
 8005866:	4323      	orrs	r3, r4
 8005868:	2b00      	cmp	r3, #0
 800586a:	bf0c      	ite	eq
 800586c:	2301      	moveq	r3, #1
 800586e:	2300      	movne	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e008      	b.n	8005886 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005874:	4832      	ldr	r0, [pc, #200]	; (8005940 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005876:	f7ff fecb 	bl	8005610 <LL_ADC_IsEnabled>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	bf0c      	ite	eq
 8005880:	2301      	moveq	r3, #1
 8005882:	2300      	movne	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d047      	beq.n	800591a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800588a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	4b2d      	ldr	r3, [pc, #180]	; (8005944 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005890:	4013      	ands	r3, r2
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	6811      	ldr	r1, [r2, #0]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	6892      	ldr	r2, [r2, #8]
 800589a:	430a      	orrs	r2, r1
 800589c:	431a      	orrs	r2, r3
 800589e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058a2:	e03a      	b.n	800591a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80058a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d004      	beq.n	80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d10e      	bne.n	80058e2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80058c4:	481a      	ldr	r0, [pc, #104]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058c6:	f7ff fea3 	bl	8005610 <LL_ADC_IsEnabled>
 80058ca:	4604      	mov	r4, r0
 80058cc:	4819      	ldr	r0, [pc, #100]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058ce:	f7ff fe9f 	bl	8005610 <LL_ADC_IsEnabled>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4323      	orrs	r3, r4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bf0c      	ite	eq
 80058da:	2301      	moveq	r3, #1
 80058dc:	2300      	movne	r3, #0
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	e008      	b.n	80058f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80058e2:	4817      	ldr	r0, [pc, #92]	; (8005940 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80058e4:	f7ff fe94 	bl	8005610 <LL_ADC_IsEnabled>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bf0c      	ite	eq
 80058ee:	2301      	moveq	r3, #1
 80058f0:	2300      	movne	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d010      	beq.n	800591a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	4b11      	ldr	r3, [pc, #68]	; (8005944 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80058fe:	4013      	ands	r3, r2
 8005900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005902:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005904:	e009      	b.n	800591a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590a:	f043 0220 	orr.w	r2, r3, #32
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005918:	e000      	b.n	800591c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800591a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005924:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005928:	4618      	mov	r0, r3
 800592a:	377c      	adds	r7, #124	; 0x7c
 800592c:	46bd      	mov	sp, r7
 800592e:	bd90      	pop	{r4, r7, pc}
 8005930:	40022000 	.word	0x40022000
 8005934:	40022100 	.word	0x40022100
 8005938:	40022300 	.word	0x40022300
 800593c:	58026300 	.word	0x58026300
 8005940:	58026000 	.word	0x58026000
 8005944:	fffff0e0 	.word	0xfffff0e0

08005948 <__NVIC_SetPriorityGrouping>:
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <__NVIC_SetPriorityGrouping+0x40>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005964:	4013      	ands	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005970:	4b06      	ldr	r3, [pc, #24]	; (800598c <__NVIC_SetPriorityGrouping+0x44>)
 8005972:	4313      	orrs	r3, r2
 8005974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005976:	4a04      	ldr	r2, [pc, #16]	; (8005988 <__NVIC_SetPriorityGrouping+0x40>)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	60d3      	str	r3, [r2, #12]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	e000ed00 	.word	0xe000ed00
 800598c:	05fa0000 	.word	0x05fa0000

08005990 <__NVIC_GetPriorityGrouping>:
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005994:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	f003 0307 	and.w	r3, r3, #7
}
 800599e:	4618      	mov	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	e000ed00 	.word	0xe000ed00

080059ac <__NVIC_EnableIRQ>:
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	db0b      	blt.n	80059d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	f003 021f 	and.w	r2, r3, #31
 80059c4:	4907      	ldr	r1, [pc, #28]	; (80059e4 <__NVIC_EnableIRQ+0x38>)
 80059c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	2001      	movs	r0, #1
 80059ce:	fa00 f202 	lsl.w	r2, r0, r2
 80059d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	e000e100 	.word	0xe000e100

080059e8 <__NVIC_SetPriority>:
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	6039      	str	r1, [r7, #0]
 80059f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	db0a      	blt.n	8005a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	490c      	ldr	r1, [pc, #48]	; (8005a34 <__NVIC_SetPriority+0x4c>)
 8005a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a06:	0112      	lsls	r2, r2, #4
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a10:	e00a      	b.n	8005a28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	4908      	ldr	r1, [pc, #32]	; (8005a38 <__NVIC_SetPriority+0x50>)
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	3b04      	subs	r3, #4
 8005a20:	0112      	lsls	r2, r2, #4
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	440b      	add	r3, r1
 8005a26:	761a      	strb	r2, [r3, #24]
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	e000e100 	.word	0xe000e100
 8005a38:	e000ed00 	.word	0xe000ed00

08005a3c <NVIC_EncodePriority>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b089      	sub	sp, #36	; 0x24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f1c3 0307 	rsb	r3, r3, #7
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	bf28      	it	cs
 8005a5a:	2304      	movcs	r3, #4
 8005a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	3304      	adds	r3, #4
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d902      	bls.n	8005a6c <NVIC_EncodePriority+0x30>
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3b03      	subs	r3, #3
 8005a6a:	e000      	b.n	8005a6e <NVIC_EncodePriority+0x32>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43da      	mvns	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	401a      	ands	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8e:	43d9      	mvns	r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a94:	4313      	orrs	r3, r2
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3724      	adds	r7, #36	; 0x24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ff4c 	bl	8005948 <__NVIC_SetPriorityGrouping>
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ac6:	f7ff ff63 	bl	8005990 <__NVIC_GetPriorityGrouping>
 8005aca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	6978      	ldr	r0, [r7, #20]
 8005ad2:	f7ff ffb3 	bl	8005a3c <NVIC_EncodePriority>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005adc:	4611      	mov	r1, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff ff82 	bl	80059e8 <__NVIC_SetPriority>
}
 8005ae4:	bf00      	nop
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff ff56 	bl	80059ac <__NVIC_EnableIRQ>
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e014      	b.n	8005b44 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	791b      	ldrb	r3, [r3, #4]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d105      	bne.n	8005b30 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fb f85a 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e046      	b.n	8005bee <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	795b      	ldrb	r3, [r3, #5]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_DAC_Start+0x20>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e040      	b.n	8005bee <HAL_DAC_Start+0xa2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6819      	ldr	r1, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2201      	movs	r2, #1
 8005b86:	409a      	lsls	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10f      	bne.n	8005bb6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d11d      	bne.n	8005be0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	605a      	str	r2, [r3, #4]
 8005bb4:	e014      	b.n	8005be0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d107      	bne.n	8005be0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0202 	orr.w	r2, r2, #2
 8005bde:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0a2      	b.n	8005d5a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	795b      	ldrb	r3, [r3, #5]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_DAC_Start_DMA+0x24>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e09c      	b.n	8005d5a <HAL_DAC_Start_DMA+0x15e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d129      	bne.n	8005c86 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	4a4b      	ldr	r2, [pc, #300]	; (8005d64 <HAL_DAC_Start_DMA+0x168>)
 8005c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	4a4a      	ldr	r2, [pc, #296]	; (8005d68 <HAL_DAC_Start_DMA+0x16c>)
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	4a49      	ldr	r2, [pc, #292]	; (8005d6c <HAL_DAC_Start_DMA+0x170>)
 8005c48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c58:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_DAC_Start_DMA+0x6c>
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d005      	beq.n	8005c72 <HAL_DAC_Start_DMA+0x76>
 8005c66:	e009      	b.n	8005c7c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	613b      	str	r3, [r7, #16]
        break;
 8005c70:	e033      	b.n	8005cda <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	330c      	adds	r3, #12
 8005c78:	613b      	str	r3, [r7, #16]
        break;
 8005c7a:	e02e      	b.n	8005cda <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3310      	adds	r3, #16
 8005c82:	613b      	str	r3, [r7, #16]
        break;
 8005c84:	e029      	b.n	8005cda <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	4a39      	ldr	r2, [pc, #228]	; (8005d70 <HAL_DAC_Start_DMA+0x174>)
 8005c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	4a38      	ldr	r2, [pc, #224]	; (8005d74 <HAL_DAC_Start_DMA+0x178>)
 8005c94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	4a37      	ldr	r2, [pc, #220]	; (8005d78 <HAL_DAC_Start_DMA+0x17c>)
 8005c9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005cac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_DAC_Start_DMA+0xc0>
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d005      	beq.n	8005cc6 <HAL_DAC_Start_DMA+0xca>
 8005cba:	e009      	b.n	8005cd0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	613b      	str	r3, [r7, #16]
        break;
 8005cc4:	e009      	b.n	8005cda <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3318      	adds	r3, #24
 8005ccc:	613b      	str	r3, [r7, #16]
        break;
 8005cce:	e004      	b.n	8005cda <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	331c      	adds	r3, #28
 8005cd6:	613b      	str	r3, [r7, #16]
        break;
 8005cd8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d111      	bne.n	8005d04 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6898      	ldr	r0, [r3, #8]
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	f000 fe67 	bl	80069cc <HAL_DMA_Start_IT>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	75fb      	strb	r3, [r7, #23]
 8005d02:	e010      	b.n	8005d26 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005d12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68d8      	ldr	r0, [r3, #12]
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	f000 fe55 	bl	80069cc <HAL_DMA_Start_IT>
 8005d22:	4603      	mov	r3, r0
 8005d24:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10c      	bne.n	8005d4c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6819      	ldr	r1, [r3, #0]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2201      	movs	r2, #1
 8005d40:	409a      	lsls	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e005      	b.n	8005d58 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f043 0204 	orr.w	r2, r3, #4
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	080061ed 	.word	0x080061ed
 8005d68:	0800620f 	.word	0x0800620f
 8005d6c:	0800622b 	.word	0x0800622b
 8005d70:	080062a9 	.word	0x080062a9
 8005d74:	080062cb 	.word	0x080062cb
 8005d78:	080062e7 	.word	0x080062e7

08005d7c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e03e      	b.n	8005e0e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6819      	ldr	r1, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	43da      	mvns	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	400a      	ands	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2201      	movs	r2, #1
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	43da      	mvns	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	400a      	ands	r2, r1
 8005dc8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10d      	bne.n	8005dec <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 f863 	bl	8006ea0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e00c      	b.n	8005e06 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 f855 	bl	8006ea0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005e04:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01d      	beq.n	8005e74 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d018      	beq.n	8005e74 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2204      	movs	r2, #4
 8005e46:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f043 0201 	orr.w	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e6c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f86f 	bl	8005f52 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01d      	beq.n	8005eba <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d018      	beq.n	8005eba <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f043 0202 	orr.w	r2, r3, #2
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005ea2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005eb2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f9ed 	bl	8006294 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b087      	sub	sp, #28
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e015      	b.n	8005f0a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e004      	b.n	8005f00 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4413      	add	r3, r2
 8005efc:	3314      	adds	r3, #20
 8005efe:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	461a      	mov	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <HAL_DAC_ConfigChannel+0x1e>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e12a      	b.n	80061e0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	795b      	ldrb	r3, [r3, #5]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_DAC_ConfigChannel+0x2e>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e124      	b.n	80061e0 <HAL_DAC_ConfigChannel+0x278>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d17a      	bne.n	80060a0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005faa:	f7fe f88b 	bl	80040c4 <HAL_GetTick>
 8005fae:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d13d      	bne.n	8006032 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fb6:	e018      	b.n	8005fea <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fb8:	f7fe f884 	bl	80040c4 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d911      	bls.n	8005fea <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fcc:	4b86      	ldr	r3, [pc, #536]	; (80061e8 <HAL_DAC_ConfigChannel+0x280>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f043 0208 	orr.w	r2, r3, #8
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e0fa      	b.n	80061e0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff0:	4b7d      	ldr	r3, [pc, #500]	; (80061e8 <HAL_DAC_ConfigChannel+0x280>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1df      	bne.n	8005fb8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	6992      	ldr	r2, [r2, #24]
 8006000:	641a      	str	r2, [r3, #64]	; 0x40
 8006002:	e020      	b.n	8006046 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006004:	f7fe f85e 	bl	80040c4 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d90f      	bls.n	8006032 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006018:	2b00      	cmp	r3, #0
 800601a:	da0a      	bge.n	8006032 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f043 0208 	orr.w	r2, r3, #8
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2203      	movs	r2, #3
 800602c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e0d6      	b.n	80061e0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006038:	2b00      	cmp	r3, #0
 800603a:	dbe3      	blt.n	8006004 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	6992      	ldr	r2, [r2, #24]
 8006044:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006056:	fa01 f303 	lsl.w	r3, r1, r3
 800605a:	43db      	mvns	r3, r3
 800605c:	ea02 0103 	and.w	r1, r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	409a      	lsls	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f003 0310 	and.w	r3, r3, #16
 8006080:	21ff      	movs	r1, #255	; 0xff
 8006082:	fa01 f303 	lsl.w	r3, r1, r3
 8006086:	43db      	mvns	r3, r3
 8006088:	ea02 0103 	and.w	r1, r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	409a      	lsls	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d11d      	bne.n	80060e4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	221f      	movs	r2, #31
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4013      	ands	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4313      	orrs	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ea:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2207      	movs	r2, #7
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d102      	bne.n	800610e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006108:	2300      	movs	r3, #0
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
 800610c:	e00f      	b.n	800612e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d102      	bne.n	800611c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006116:	2301      	movs	r3, #1
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
 800611a:	e008      	b.n	800612e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006124:	2301      	movs	r3, #1
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
 8006128:	e001      	b.n	800612e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4313      	orrs	r3, r2
 8006138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4313      	orrs	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6819      	ldr	r1, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	43da      	mvns	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	400a      	ands	r2, r1
 8006174:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	43db      	mvns	r3, r3
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	4013      	ands	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6819      	ldr	r1, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	22c0      	movs	r2, #192	; 0xc0
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	43da      	mvns	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	400a      	ands	r2, r1
 80061ce:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80061dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3728      	adds	r7, #40	; 0x28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20008000 	.word	0x20008000

080061ec <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff fe8b 	bl	8005f16 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	711a      	strb	r2, [r3, #4]
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f7ff fe84 	bl	8005f2a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f043 0204 	orr.w	r2, r3, #4
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fe7a 	bl	8005f3e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	711a      	strb	r2, [r3, #4]
}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff ffce 	bl	8006258 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	711a      	strb	r2, [r3, #4]
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff ffc7 	bl	800626c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f043 0204 	orr.w	r2, r3, #4
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff ffbd 	bl	8006280 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	711a      	strb	r2, [r3, #4]
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800631c:	f7fd fed2 	bl	80040c4 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e316      	b.n	800695a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a66      	ldr	r2, [pc, #408]	; (80064cc <HAL_DMA_Init+0x1b8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d04a      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a65      	ldr	r2, [pc, #404]	; (80064d0 <HAL_DMA_Init+0x1bc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d045      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a63      	ldr	r2, [pc, #396]	; (80064d4 <HAL_DMA_Init+0x1c0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d040      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a62      	ldr	r2, [pc, #392]	; (80064d8 <HAL_DMA_Init+0x1c4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d03b      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a60      	ldr	r2, [pc, #384]	; (80064dc <HAL_DMA_Init+0x1c8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d036      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a5f      	ldr	r2, [pc, #380]	; (80064e0 <HAL_DMA_Init+0x1cc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d031      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5d      	ldr	r2, [pc, #372]	; (80064e4 <HAL_DMA_Init+0x1d0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d02c      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a5c      	ldr	r2, [pc, #368]	; (80064e8 <HAL_DMA_Init+0x1d4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d027      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a5a      	ldr	r2, [pc, #360]	; (80064ec <HAL_DMA_Init+0x1d8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d022      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a59      	ldr	r2, [pc, #356]	; (80064f0 <HAL_DMA_Init+0x1dc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d01d      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a57      	ldr	r2, [pc, #348]	; (80064f4 <HAL_DMA_Init+0x1e0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d018      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a56      	ldr	r2, [pc, #344]	; (80064f8 <HAL_DMA_Init+0x1e4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a54      	ldr	r2, [pc, #336]	; (80064fc <HAL_DMA_Init+0x1e8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00e      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a53      	ldr	r2, [pc, #332]	; (8006500 <HAL_DMA_Init+0x1ec>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d009      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a51      	ldr	r2, [pc, #324]	; (8006504 <HAL_DMA_Init+0x1f0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_DMA_Init+0xb8>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a50      	ldr	r2, [pc, #320]	; (8006508 <HAL_DMA_Init+0x1f4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d101      	bne.n	80063d0 <HAL_DMA_Init+0xbc>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <HAL_DMA_Init+0xbe>
 80063d0:	2300      	movs	r3, #0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 813b 	beq.w	800664e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a37      	ldr	r2, [pc, #220]	; (80064cc <HAL_DMA_Init+0x1b8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d04a      	beq.n	8006488 <HAL_DMA_Init+0x174>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a36      	ldr	r2, [pc, #216]	; (80064d0 <HAL_DMA_Init+0x1bc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d045      	beq.n	8006488 <HAL_DMA_Init+0x174>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a34      	ldr	r2, [pc, #208]	; (80064d4 <HAL_DMA_Init+0x1c0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d040      	beq.n	8006488 <HAL_DMA_Init+0x174>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a33      	ldr	r2, [pc, #204]	; (80064d8 <HAL_DMA_Init+0x1c4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d03b      	beq.n	8006488 <HAL_DMA_Init+0x174>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a31      	ldr	r2, [pc, #196]	; (80064dc <HAL_DMA_Init+0x1c8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d036      	beq.n	8006488 <HAL_DMA_Init+0x174>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a30      	ldr	r2, [pc, #192]	; (80064e0 <HAL_DMA_Init+0x1cc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d031      	beq.n	8006488 <HAL_DMA_Init+0x174>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a2e      	ldr	r2, [pc, #184]	; (80064e4 <HAL_DMA_Init+0x1d0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d02c      	beq.n	8006488 <HAL_DMA_Init+0x174>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a2d      	ldr	r2, [pc, #180]	; (80064e8 <HAL_DMA_Init+0x1d4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d027      	beq.n	8006488 <HAL_DMA_Init+0x174>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a2b      	ldr	r2, [pc, #172]	; (80064ec <HAL_DMA_Init+0x1d8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d022      	beq.n	8006488 <HAL_DMA_Init+0x174>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a2a      	ldr	r2, [pc, #168]	; (80064f0 <HAL_DMA_Init+0x1dc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d01d      	beq.n	8006488 <HAL_DMA_Init+0x174>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a28      	ldr	r2, [pc, #160]	; (80064f4 <HAL_DMA_Init+0x1e0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d018      	beq.n	8006488 <HAL_DMA_Init+0x174>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a27      	ldr	r2, [pc, #156]	; (80064f8 <HAL_DMA_Init+0x1e4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d013      	beq.n	8006488 <HAL_DMA_Init+0x174>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a25      	ldr	r2, [pc, #148]	; (80064fc <HAL_DMA_Init+0x1e8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00e      	beq.n	8006488 <HAL_DMA_Init+0x174>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a24      	ldr	r2, [pc, #144]	; (8006500 <HAL_DMA_Init+0x1ec>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d009      	beq.n	8006488 <HAL_DMA_Init+0x174>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a22      	ldr	r2, [pc, #136]	; (8006504 <HAL_DMA_Init+0x1f0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d004      	beq.n	8006488 <HAL_DMA_Init+0x174>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a21      	ldr	r2, [pc, #132]	; (8006508 <HAL_DMA_Init+0x1f4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d108      	bne.n	800649a <HAL_DMA_Init+0x186>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0201 	bic.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	e007      	b.n	80064aa <HAL_DMA_Init+0x196>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0201 	bic.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064aa:	e02f      	b.n	800650c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064ac:	f7fd fe0a 	bl	80040c4 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b05      	cmp	r3, #5
 80064b8:	d928      	bls.n	800650c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2203      	movs	r2, #3
 80064c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e246      	b.n	800695a <HAL_DMA_Init+0x646>
 80064cc:	40020010 	.word	0x40020010
 80064d0:	40020028 	.word	0x40020028
 80064d4:	40020040 	.word	0x40020040
 80064d8:	40020058 	.word	0x40020058
 80064dc:	40020070 	.word	0x40020070
 80064e0:	40020088 	.word	0x40020088
 80064e4:	400200a0 	.word	0x400200a0
 80064e8:	400200b8 	.word	0x400200b8
 80064ec:	40020410 	.word	0x40020410
 80064f0:	40020428 	.word	0x40020428
 80064f4:	40020440 	.word	0x40020440
 80064f8:	40020458 	.word	0x40020458
 80064fc:	40020470 	.word	0x40020470
 8006500:	40020488 	.word	0x40020488
 8006504:	400204a0 	.word	0x400204a0
 8006508:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1c8      	bne.n	80064ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4b83      	ldr	r3, [pc, #524]	; (8006734 <HAL_DMA_Init+0x420>)
 8006526:	4013      	ands	r3, r2
 8006528:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006532:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800653e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800654a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	2b04      	cmp	r3, #4
 800655e:	d107      	bne.n	8006570 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	4313      	orrs	r3, r2
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006570:	4b71      	ldr	r3, [pc, #452]	; (8006738 <HAL_DMA_Init+0x424>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	4b71      	ldr	r3, [pc, #452]	; (800673c <HAL_DMA_Init+0x428>)
 8006576:	4013      	ands	r3, r2
 8006578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800657c:	d328      	bcc.n	80065d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b28      	cmp	r3, #40	; 0x28
 8006584:	d903      	bls.n	800658e <HAL_DMA_Init+0x27a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b2e      	cmp	r3, #46	; 0x2e
 800658c:	d917      	bls.n	80065be <HAL_DMA_Init+0x2aa>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b3e      	cmp	r3, #62	; 0x3e
 8006594:	d903      	bls.n	800659e <HAL_DMA_Init+0x28a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b42      	cmp	r3, #66	; 0x42
 800659c:	d90f      	bls.n	80065be <HAL_DMA_Init+0x2aa>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b46      	cmp	r3, #70	; 0x46
 80065a4:	d903      	bls.n	80065ae <HAL_DMA_Init+0x29a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b48      	cmp	r3, #72	; 0x48
 80065ac:	d907      	bls.n	80065be <HAL_DMA_Init+0x2aa>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b4e      	cmp	r3, #78	; 0x4e
 80065b4:	d905      	bls.n	80065c2 <HAL_DMA_Init+0x2ae>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2b52      	cmp	r3, #82	; 0x52
 80065bc:	d801      	bhi.n	80065c2 <HAL_DMA_Init+0x2ae>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <HAL_DMA_Init+0x2b0>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0307 	bic.w	r3, r3, #7
 80065e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d117      	bne.n	800662a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00e      	beq.n	800662a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f002 fb3f 	bl	8008c90 <DMA_CheckFifoParam>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2240      	movs	r2, #64	; 0x40
 800661c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e197      	b.n	800695a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f002 fa7a 	bl	8008b2c <DMA_CalcBaseAndBitshift>
 8006638:	4603      	mov	r3, r0
 800663a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006640:	f003 031f 	and.w	r3, r3, #31
 8006644:	223f      	movs	r2, #63	; 0x3f
 8006646:	409a      	lsls	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	609a      	str	r2, [r3, #8]
 800664c:	e0cd      	b.n	80067ea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a3b      	ldr	r2, [pc, #236]	; (8006740 <HAL_DMA_Init+0x42c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d022      	beq.n	800669e <HAL_DMA_Init+0x38a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a39      	ldr	r2, [pc, #228]	; (8006744 <HAL_DMA_Init+0x430>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d01d      	beq.n	800669e <HAL_DMA_Init+0x38a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a38      	ldr	r2, [pc, #224]	; (8006748 <HAL_DMA_Init+0x434>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d018      	beq.n	800669e <HAL_DMA_Init+0x38a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a36      	ldr	r2, [pc, #216]	; (800674c <HAL_DMA_Init+0x438>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <HAL_DMA_Init+0x38a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a35      	ldr	r2, [pc, #212]	; (8006750 <HAL_DMA_Init+0x43c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00e      	beq.n	800669e <HAL_DMA_Init+0x38a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a33      	ldr	r2, [pc, #204]	; (8006754 <HAL_DMA_Init+0x440>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d009      	beq.n	800669e <HAL_DMA_Init+0x38a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a32      	ldr	r2, [pc, #200]	; (8006758 <HAL_DMA_Init+0x444>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d004      	beq.n	800669e <HAL_DMA_Init+0x38a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a30      	ldr	r2, [pc, #192]	; (800675c <HAL_DMA_Init+0x448>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d101      	bne.n	80066a2 <HAL_DMA_Init+0x38e>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <HAL_DMA_Init+0x390>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8097 	beq.w	80067d8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a24      	ldr	r2, [pc, #144]	; (8006740 <HAL_DMA_Init+0x42c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d021      	beq.n	80066f8 <HAL_DMA_Init+0x3e4>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a22      	ldr	r2, [pc, #136]	; (8006744 <HAL_DMA_Init+0x430>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01c      	beq.n	80066f8 <HAL_DMA_Init+0x3e4>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a21      	ldr	r2, [pc, #132]	; (8006748 <HAL_DMA_Init+0x434>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d017      	beq.n	80066f8 <HAL_DMA_Init+0x3e4>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1f      	ldr	r2, [pc, #124]	; (800674c <HAL_DMA_Init+0x438>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d012      	beq.n	80066f8 <HAL_DMA_Init+0x3e4>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1e      	ldr	r2, [pc, #120]	; (8006750 <HAL_DMA_Init+0x43c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00d      	beq.n	80066f8 <HAL_DMA_Init+0x3e4>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1c      	ldr	r2, [pc, #112]	; (8006754 <HAL_DMA_Init+0x440>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d008      	beq.n	80066f8 <HAL_DMA_Init+0x3e4>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1b      	ldr	r2, [pc, #108]	; (8006758 <HAL_DMA_Init+0x444>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d003      	beq.n	80066f8 <HAL_DMA_Init+0x3e4>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a19      	ldr	r2, [pc, #100]	; (800675c <HAL_DMA_Init+0x448>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4b12      	ldr	r3, [pc, #72]	; (8006760 <HAL_DMA_Init+0x44c>)
 8006716:	4013      	ands	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d020      	beq.n	8006764 <HAL_DMA_Init+0x450>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b80      	cmp	r3, #128	; 0x80
 8006728:	d102      	bne.n	8006730 <HAL_DMA_Init+0x41c>
 800672a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800672e:	e01a      	b.n	8006766 <HAL_DMA_Init+0x452>
 8006730:	2300      	movs	r3, #0
 8006732:	e018      	b.n	8006766 <HAL_DMA_Init+0x452>
 8006734:	fe10803f 	.word	0xfe10803f
 8006738:	5c001000 	.word	0x5c001000
 800673c:	ffff0000 	.word	0xffff0000
 8006740:	58025408 	.word	0x58025408
 8006744:	5802541c 	.word	0x5802541c
 8006748:	58025430 	.word	0x58025430
 800674c:	58025444 	.word	0x58025444
 8006750:	58025458 	.word	0x58025458
 8006754:	5802546c 	.word	0x5802546c
 8006758:	58025480 	.word	0x58025480
 800675c:	58025494 	.word	0x58025494
 8006760:	fffe000f 	.word	0xfffe000f
 8006764:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	68d2      	ldr	r2, [r2, #12]
 800676a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800676c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800677c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006784:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800678c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006794:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	4b6e      	ldr	r3, [pc, #440]	; (8006964 <HAL_DMA_Init+0x650>)
 80067ac:	4413      	add	r3, r2
 80067ae:	4a6e      	ldr	r2, [pc, #440]	; (8006968 <HAL_DMA_Init+0x654>)
 80067b0:	fba2 2303 	umull	r2, r3, r2, r3
 80067b4:	091b      	lsrs	r3, r3, #4
 80067b6:	009a      	lsls	r2, r3, #2
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f002 f9b5 	bl	8008b2c <DMA_CalcBaseAndBitshift>
 80067c2:	4603      	mov	r3, r0
 80067c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2201      	movs	r2, #1
 80067d0:	409a      	lsls	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	605a      	str	r2, [r3, #4]
 80067d6:	e008      	b.n	80067ea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2240      	movs	r2, #64	; 0x40
 80067dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2203      	movs	r2, #3
 80067e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e0b7      	b.n	800695a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a5f      	ldr	r2, [pc, #380]	; (800696c <HAL_DMA_Init+0x658>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d072      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a5d      	ldr	r2, [pc, #372]	; (8006970 <HAL_DMA_Init+0x65c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d06d      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a5c      	ldr	r2, [pc, #368]	; (8006974 <HAL_DMA_Init+0x660>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d068      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a5a      	ldr	r2, [pc, #360]	; (8006978 <HAL_DMA_Init+0x664>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d063      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a59      	ldr	r2, [pc, #356]	; (800697c <HAL_DMA_Init+0x668>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d05e      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a57      	ldr	r2, [pc, #348]	; (8006980 <HAL_DMA_Init+0x66c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d059      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a56      	ldr	r2, [pc, #344]	; (8006984 <HAL_DMA_Init+0x670>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d054      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a54      	ldr	r2, [pc, #336]	; (8006988 <HAL_DMA_Init+0x674>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d04f      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a53      	ldr	r2, [pc, #332]	; (800698c <HAL_DMA_Init+0x678>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d04a      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a51      	ldr	r2, [pc, #324]	; (8006990 <HAL_DMA_Init+0x67c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d045      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a50      	ldr	r2, [pc, #320]	; (8006994 <HAL_DMA_Init+0x680>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d040      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a4e      	ldr	r2, [pc, #312]	; (8006998 <HAL_DMA_Init+0x684>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d03b      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a4d      	ldr	r2, [pc, #308]	; (800699c <HAL_DMA_Init+0x688>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d036      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a4b      	ldr	r2, [pc, #300]	; (80069a0 <HAL_DMA_Init+0x68c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d031      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a4a      	ldr	r2, [pc, #296]	; (80069a4 <HAL_DMA_Init+0x690>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d02c      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a48      	ldr	r2, [pc, #288]	; (80069a8 <HAL_DMA_Init+0x694>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d027      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a47      	ldr	r2, [pc, #284]	; (80069ac <HAL_DMA_Init+0x698>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d022      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a45      	ldr	r2, [pc, #276]	; (80069b0 <HAL_DMA_Init+0x69c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01d      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a44      	ldr	r2, [pc, #272]	; (80069b4 <HAL_DMA_Init+0x6a0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d018      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a42      	ldr	r2, [pc, #264]	; (80069b8 <HAL_DMA_Init+0x6a4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a41      	ldr	r2, [pc, #260]	; (80069bc <HAL_DMA_Init+0x6a8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a3f      	ldr	r2, [pc, #252]	; (80069c0 <HAL_DMA_Init+0x6ac>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3e      	ldr	r2, [pc, #248]	; (80069c4 <HAL_DMA_Init+0x6b0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_DMA_Init+0x5c6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a3c      	ldr	r2, [pc, #240]	; (80069c8 <HAL_DMA_Init+0x6b4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d101      	bne.n	80068de <HAL_DMA_Init+0x5ca>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <HAL_DMA_Init+0x5cc>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d032      	beq.n	800694a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f002 fa4f 	bl	8008d88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	2b80      	cmp	r3, #128	; 0x80
 80068f0:	d102      	bne.n	80068f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800690c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d010      	beq.n	8006938 <HAL_DMA_Init+0x624>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b08      	cmp	r3, #8
 800691c:	d80c      	bhi.n	8006938 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f002 facc 	bl	8008ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006934:	605a      	str	r2, [r3, #4]
 8006936:	e008      	b.n	800694a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	a7fdabf8 	.word	0xa7fdabf8
 8006968:	cccccccd 	.word	0xcccccccd
 800696c:	40020010 	.word	0x40020010
 8006970:	40020028 	.word	0x40020028
 8006974:	40020040 	.word	0x40020040
 8006978:	40020058 	.word	0x40020058
 800697c:	40020070 	.word	0x40020070
 8006980:	40020088 	.word	0x40020088
 8006984:	400200a0 	.word	0x400200a0
 8006988:	400200b8 	.word	0x400200b8
 800698c:	40020410 	.word	0x40020410
 8006990:	40020428 	.word	0x40020428
 8006994:	40020440 	.word	0x40020440
 8006998:	40020458 	.word	0x40020458
 800699c:	40020470 	.word	0x40020470
 80069a0:	40020488 	.word	0x40020488
 80069a4:	400204a0 	.word	0x400204a0
 80069a8:	400204b8 	.word	0x400204b8
 80069ac:	58025408 	.word	0x58025408
 80069b0:	5802541c 	.word	0x5802541c
 80069b4:	58025430 	.word	0x58025430
 80069b8:	58025444 	.word	0x58025444
 80069bc:	58025458 	.word	0x58025458
 80069c0:	5802546c 	.word	0x5802546c
 80069c4:	58025480 	.word	0x58025480
 80069c8:	58025494 	.word	0x58025494

080069cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e226      	b.n	8006e36 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d101      	bne.n	80069f6 <HAL_DMA_Start_IT+0x2a>
 80069f2:	2302      	movs	r3, #2
 80069f4:	e21f      	b.n	8006e36 <HAL_DMA_Start_IT+0x46a>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	f040 820a 	bne.w	8006e20 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a68      	ldr	r2, [pc, #416]	; (8006bc0 <HAL_DMA_Start_IT+0x1f4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d04a      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a66      	ldr	r2, [pc, #408]	; (8006bc4 <HAL_DMA_Start_IT+0x1f8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d045      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a65      	ldr	r2, [pc, #404]	; (8006bc8 <HAL_DMA_Start_IT+0x1fc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d040      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a63      	ldr	r2, [pc, #396]	; (8006bcc <HAL_DMA_Start_IT+0x200>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d03b      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a62      	ldr	r2, [pc, #392]	; (8006bd0 <HAL_DMA_Start_IT+0x204>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d036      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a60      	ldr	r2, [pc, #384]	; (8006bd4 <HAL_DMA_Start_IT+0x208>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d031      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a5f      	ldr	r2, [pc, #380]	; (8006bd8 <HAL_DMA_Start_IT+0x20c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d02c      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a5d      	ldr	r2, [pc, #372]	; (8006bdc <HAL_DMA_Start_IT+0x210>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d027      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a5c      	ldr	r2, [pc, #368]	; (8006be0 <HAL_DMA_Start_IT+0x214>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a5a      	ldr	r2, [pc, #360]	; (8006be4 <HAL_DMA_Start_IT+0x218>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01d      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a59      	ldr	r2, [pc, #356]	; (8006be8 <HAL_DMA_Start_IT+0x21c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a57      	ldr	r2, [pc, #348]	; (8006bec <HAL_DMA_Start_IT+0x220>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a56      	ldr	r2, [pc, #344]	; (8006bf0 <HAL_DMA_Start_IT+0x224>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a54      	ldr	r2, [pc, #336]	; (8006bf4 <HAL_DMA_Start_IT+0x228>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a53      	ldr	r2, [pc, #332]	; (8006bf8 <HAL_DMA_Start_IT+0x22c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_DMA_Start_IT+0xee>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a51      	ldr	r2, [pc, #324]	; (8006bfc <HAL_DMA_Start_IT+0x230>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d108      	bne.n	8006acc <HAL_DMA_Start_IT+0x100>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0201 	bic.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e007      	b.n	8006adc <HAL_DMA_Start_IT+0x110>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0201 	bic.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f001 fe76 	bl	80087d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a34      	ldr	r2, [pc, #208]	; (8006bc0 <HAL_DMA_Start_IT+0x1f4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d04a      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a33      	ldr	r2, [pc, #204]	; (8006bc4 <HAL_DMA_Start_IT+0x1f8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d045      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a31      	ldr	r2, [pc, #196]	; (8006bc8 <HAL_DMA_Start_IT+0x1fc>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d040      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a30      	ldr	r2, [pc, #192]	; (8006bcc <HAL_DMA_Start_IT+0x200>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d03b      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a2e      	ldr	r2, [pc, #184]	; (8006bd0 <HAL_DMA_Start_IT+0x204>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d036      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a2d      	ldr	r2, [pc, #180]	; (8006bd4 <HAL_DMA_Start_IT+0x208>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d031      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a2b      	ldr	r2, [pc, #172]	; (8006bd8 <HAL_DMA_Start_IT+0x20c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d02c      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a2a      	ldr	r2, [pc, #168]	; (8006bdc <HAL_DMA_Start_IT+0x210>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d027      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a28      	ldr	r2, [pc, #160]	; (8006be0 <HAL_DMA_Start_IT+0x214>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d022      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a27      	ldr	r2, [pc, #156]	; (8006be4 <HAL_DMA_Start_IT+0x218>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d01d      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a25      	ldr	r2, [pc, #148]	; (8006be8 <HAL_DMA_Start_IT+0x21c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d018      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a24      	ldr	r2, [pc, #144]	; (8006bec <HAL_DMA_Start_IT+0x220>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d013      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a22      	ldr	r2, [pc, #136]	; (8006bf0 <HAL_DMA_Start_IT+0x224>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00e      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a21      	ldr	r2, [pc, #132]	; (8006bf4 <HAL_DMA_Start_IT+0x228>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d009      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1f      	ldr	r2, [pc, #124]	; (8006bf8 <HAL_DMA_Start_IT+0x22c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d004      	beq.n	8006b88 <HAL_DMA_Start_IT+0x1bc>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1e      	ldr	r2, [pc, #120]	; (8006bfc <HAL_DMA_Start_IT+0x230>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d101      	bne.n	8006b8c <HAL_DMA_Start_IT+0x1c0>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <HAL_DMA_Start_IT+0x1c2>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d036      	beq.n	8006c00 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f023 021e 	bic.w	r2, r3, #30
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0216 	orr.w	r2, r2, #22
 8006ba4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d03e      	beq.n	8006c2c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0208 	orr.w	r2, r2, #8
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e035      	b.n	8006c2c <HAL_DMA_Start_IT+0x260>
 8006bc0:	40020010 	.word	0x40020010
 8006bc4:	40020028 	.word	0x40020028
 8006bc8:	40020040 	.word	0x40020040
 8006bcc:	40020058 	.word	0x40020058
 8006bd0:	40020070 	.word	0x40020070
 8006bd4:	40020088 	.word	0x40020088
 8006bd8:	400200a0 	.word	0x400200a0
 8006bdc:	400200b8 	.word	0x400200b8
 8006be0:	40020410 	.word	0x40020410
 8006be4:	40020428 	.word	0x40020428
 8006be8:	40020440 	.word	0x40020440
 8006bec:	40020458 	.word	0x40020458
 8006bf0:	40020470 	.word	0x40020470
 8006bf4:	40020488 	.word	0x40020488
 8006bf8:	400204a0 	.word	0x400204a0
 8006bfc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f023 020e 	bic.w	r2, r3, #14
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 020a 	orr.w	r2, r2, #10
 8006c12:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d007      	beq.n	8006c2c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0204 	orr.w	r2, r2, #4
 8006c2a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a83      	ldr	r2, [pc, #524]	; (8006e40 <HAL_DMA_Start_IT+0x474>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d072      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a82      	ldr	r2, [pc, #520]	; (8006e44 <HAL_DMA_Start_IT+0x478>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d06d      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a80      	ldr	r2, [pc, #512]	; (8006e48 <HAL_DMA_Start_IT+0x47c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d068      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a7f      	ldr	r2, [pc, #508]	; (8006e4c <HAL_DMA_Start_IT+0x480>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d063      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a7d      	ldr	r2, [pc, #500]	; (8006e50 <HAL_DMA_Start_IT+0x484>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d05e      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a7c      	ldr	r2, [pc, #496]	; (8006e54 <HAL_DMA_Start_IT+0x488>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d059      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a7a      	ldr	r2, [pc, #488]	; (8006e58 <HAL_DMA_Start_IT+0x48c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d054      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a79      	ldr	r2, [pc, #484]	; (8006e5c <HAL_DMA_Start_IT+0x490>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d04f      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a77      	ldr	r2, [pc, #476]	; (8006e60 <HAL_DMA_Start_IT+0x494>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d04a      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a76      	ldr	r2, [pc, #472]	; (8006e64 <HAL_DMA_Start_IT+0x498>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d045      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a74      	ldr	r2, [pc, #464]	; (8006e68 <HAL_DMA_Start_IT+0x49c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d040      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a73      	ldr	r2, [pc, #460]	; (8006e6c <HAL_DMA_Start_IT+0x4a0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d03b      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a71      	ldr	r2, [pc, #452]	; (8006e70 <HAL_DMA_Start_IT+0x4a4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d036      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a70      	ldr	r2, [pc, #448]	; (8006e74 <HAL_DMA_Start_IT+0x4a8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d031      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a6e      	ldr	r2, [pc, #440]	; (8006e78 <HAL_DMA_Start_IT+0x4ac>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d02c      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a6d      	ldr	r2, [pc, #436]	; (8006e7c <HAL_DMA_Start_IT+0x4b0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d027      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a6b      	ldr	r2, [pc, #428]	; (8006e80 <HAL_DMA_Start_IT+0x4b4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d022      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a6a      	ldr	r2, [pc, #424]	; (8006e84 <HAL_DMA_Start_IT+0x4b8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d01d      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a68      	ldr	r2, [pc, #416]	; (8006e88 <HAL_DMA_Start_IT+0x4bc>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d018      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a67      	ldr	r2, [pc, #412]	; (8006e8c <HAL_DMA_Start_IT+0x4c0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d013      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a65      	ldr	r2, [pc, #404]	; (8006e90 <HAL_DMA_Start_IT+0x4c4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00e      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a64      	ldr	r2, [pc, #400]	; (8006e94 <HAL_DMA_Start_IT+0x4c8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d009      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a62      	ldr	r2, [pc, #392]	; (8006e98 <HAL_DMA_Start_IT+0x4cc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d004      	beq.n	8006d1c <HAL_DMA_Start_IT+0x350>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a61      	ldr	r2, [pc, #388]	; (8006e9c <HAL_DMA_Start_IT+0x4d0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d101      	bne.n	8006d20 <HAL_DMA_Start_IT+0x354>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <HAL_DMA_Start_IT+0x356>
 8006d20:	2300      	movs	r3, #0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d01a      	beq.n	8006d5c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d42:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d5a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a37      	ldr	r2, [pc, #220]	; (8006e40 <HAL_DMA_Start_IT+0x474>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d04a      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a36      	ldr	r2, [pc, #216]	; (8006e44 <HAL_DMA_Start_IT+0x478>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d045      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a34      	ldr	r2, [pc, #208]	; (8006e48 <HAL_DMA_Start_IT+0x47c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d040      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a33      	ldr	r2, [pc, #204]	; (8006e4c <HAL_DMA_Start_IT+0x480>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d03b      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a31      	ldr	r2, [pc, #196]	; (8006e50 <HAL_DMA_Start_IT+0x484>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d036      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a30      	ldr	r2, [pc, #192]	; (8006e54 <HAL_DMA_Start_IT+0x488>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d031      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a2e      	ldr	r2, [pc, #184]	; (8006e58 <HAL_DMA_Start_IT+0x48c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d02c      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a2d      	ldr	r2, [pc, #180]	; (8006e5c <HAL_DMA_Start_IT+0x490>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d027      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a2b      	ldr	r2, [pc, #172]	; (8006e60 <HAL_DMA_Start_IT+0x494>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d022      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a2a      	ldr	r2, [pc, #168]	; (8006e64 <HAL_DMA_Start_IT+0x498>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d01d      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a28      	ldr	r2, [pc, #160]	; (8006e68 <HAL_DMA_Start_IT+0x49c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d018      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a27      	ldr	r2, [pc, #156]	; (8006e6c <HAL_DMA_Start_IT+0x4a0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d013      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a25      	ldr	r2, [pc, #148]	; (8006e70 <HAL_DMA_Start_IT+0x4a4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00e      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a24      	ldr	r2, [pc, #144]	; (8006e74 <HAL_DMA_Start_IT+0x4a8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d009      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a22      	ldr	r2, [pc, #136]	; (8006e78 <HAL_DMA_Start_IT+0x4ac>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <HAL_DMA_Start_IT+0x430>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a21      	ldr	r2, [pc, #132]	; (8006e7c <HAL_DMA_Start_IT+0x4b0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d108      	bne.n	8006e0e <HAL_DMA_Start_IT+0x442>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	e012      	b.n	8006e34 <HAL_DMA_Start_IT+0x468>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0201 	orr.w	r2, r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e009      	b.n	8006e34 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40020010 	.word	0x40020010
 8006e44:	40020028 	.word	0x40020028
 8006e48:	40020040 	.word	0x40020040
 8006e4c:	40020058 	.word	0x40020058
 8006e50:	40020070 	.word	0x40020070
 8006e54:	40020088 	.word	0x40020088
 8006e58:	400200a0 	.word	0x400200a0
 8006e5c:	400200b8 	.word	0x400200b8
 8006e60:	40020410 	.word	0x40020410
 8006e64:	40020428 	.word	0x40020428
 8006e68:	40020440 	.word	0x40020440
 8006e6c:	40020458 	.word	0x40020458
 8006e70:	40020470 	.word	0x40020470
 8006e74:	40020488 	.word	0x40020488
 8006e78:	400204a0 	.word	0x400204a0
 8006e7c:	400204b8 	.word	0x400204b8
 8006e80:	58025408 	.word	0x58025408
 8006e84:	5802541c 	.word	0x5802541c
 8006e88:	58025430 	.word	0x58025430
 8006e8c:	58025444 	.word	0x58025444
 8006e90:	58025458 	.word	0x58025458
 8006e94:	5802546c 	.word	0x5802546c
 8006e98:	58025480 	.word	0x58025480
 8006e9c:	58025494 	.word	0x58025494

08006ea0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006ea8:	f7fd f90c 	bl	80040c4 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e2dc      	b.n	8007472 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d008      	beq.n	8006ed6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2280      	movs	r2, #128	; 0x80
 8006ec8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e2cd      	b.n	8007472 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a76      	ldr	r2, [pc, #472]	; (80070b4 <HAL_DMA_Abort+0x214>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d04a      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a74      	ldr	r2, [pc, #464]	; (80070b8 <HAL_DMA_Abort+0x218>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d045      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a73      	ldr	r2, [pc, #460]	; (80070bc <HAL_DMA_Abort+0x21c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d040      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a71      	ldr	r2, [pc, #452]	; (80070c0 <HAL_DMA_Abort+0x220>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d03b      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a70      	ldr	r2, [pc, #448]	; (80070c4 <HAL_DMA_Abort+0x224>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d036      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a6e      	ldr	r2, [pc, #440]	; (80070c8 <HAL_DMA_Abort+0x228>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d031      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a6d      	ldr	r2, [pc, #436]	; (80070cc <HAL_DMA_Abort+0x22c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d02c      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a6b      	ldr	r2, [pc, #428]	; (80070d0 <HAL_DMA_Abort+0x230>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d027      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a6a      	ldr	r2, [pc, #424]	; (80070d4 <HAL_DMA_Abort+0x234>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d022      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a68      	ldr	r2, [pc, #416]	; (80070d8 <HAL_DMA_Abort+0x238>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01d      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a67      	ldr	r2, [pc, #412]	; (80070dc <HAL_DMA_Abort+0x23c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d018      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a65      	ldr	r2, [pc, #404]	; (80070e0 <HAL_DMA_Abort+0x240>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d013      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a64      	ldr	r2, [pc, #400]	; (80070e4 <HAL_DMA_Abort+0x244>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00e      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a62      	ldr	r2, [pc, #392]	; (80070e8 <HAL_DMA_Abort+0x248>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d009      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a61      	ldr	r2, [pc, #388]	; (80070ec <HAL_DMA_Abort+0x24c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d004      	beq.n	8006f76 <HAL_DMA_Abort+0xd6>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a5f      	ldr	r2, [pc, #380]	; (80070f0 <HAL_DMA_Abort+0x250>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d101      	bne.n	8006f7a <HAL_DMA_Abort+0xda>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <HAL_DMA_Abort+0xdc>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d013      	beq.n	8006fa8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 021e 	bic.w	r2, r2, #30
 8006f8e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695a      	ldr	r2, [r3, #20]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f9e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e00a      	b.n	8006fbe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 020e 	bic.w	r2, r2, #14
 8006fb6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a3c      	ldr	r2, [pc, #240]	; (80070b4 <HAL_DMA_Abort+0x214>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d072      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a3a      	ldr	r2, [pc, #232]	; (80070b8 <HAL_DMA_Abort+0x218>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d06d      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a39      	ldr	r2, [pc, #228]	; (80070bc <HAL_DMA_Abort+0x21c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d068      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a37      	ldr	r2, [pc, #220]	; (80070c0 <HAL_DMA_Abort+0x220>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d063      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a36      	ldr	r2, [pc, #216]	; (80070c4 <HAL_DMA_Abort+0x224>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d05e      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a34      	ldr	r2, [pc, #208]	; (80070c8 <HAL_DMA_Abort+0x228>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d059      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a33      	ldr	r2, [pc, #204]	; (80070cc <HAL_DMA_Abort+0x22c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d054      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a31      	ldr	r2, [pc, #196]	; (80070d0 <HAL_DMA_Abort+0x230>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d04f      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a30      	ldr	r2, [pc, #192]	; (80070d4 <HAL_DMA_Abort+0x234>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d04a      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a2e      	ldr	r2, [pc, #184]	; (80070d8 <HAL_DMA_Abort+0x238>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d045      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a2d      	ldr	r2, [pc, #180]	; (80070dc <HAL_DMA_Abort+0x23c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d040      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a2b      	ldr	r2, [pc, #172]	; (80070e0 <HAL_DMA_Abort+0x240>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d03b      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a2a      	ldr	r2, [pc, #168]	; (80070e4 <HAL_DMA_Abort+0x244>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d036      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a28      	ldr	r2, [pc, #160]	; (80070e8 <HAL_DMA_Abort+0x248>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d031      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a27      	ldr	r2, [pc, #156]	; (80070ec <HAL_DMA_Abort+0x24c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d02c      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a25      	ldr	r2, [pc, #148]	; (80070f0 <HAL_DMA_Abort+0x250>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d027      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a24      	ldr	r2, [pc, #144]	; (80070f4 <HAL_DMA_Abort+0x254>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d022      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a22      	ldr	r2, [pc, #136]	; (80070f8 <HAL_DMA_Abort+0x258>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01d      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a21      	ldr	r2, [pc, #132]	; (80070fc <HAL_DMA_Abort+0x25c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d018      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1f      	ldr	r2, [pc, #124]	; (8007100 <HAL_DMA_Abort+0x260>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a1e      	ldr	r2, [pc, #120]	; (8007104 <HAL_DMA_Abort+0x264>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00e      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1c      	ldr	r2, [pc, #112]	; (8007108 <HAL_DMA_Abort+0x268>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d009      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a1b      	ldr	r2, [pc, #108]	; (800710c <HAL_DMA_Abort+0x26c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d004      	beq.n	80070ae <HAL_DMA_Abort+0x20e>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a19      	ldr	r2, [pc, #100]	; (8007110 <HAL_DMA_Abort+0x270>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d132      	bne.n	8007114 <HAL_DMA_Abort+0x274>
 80070ae:	2301      	movs	r3, #1
 80070b0:	e031      	b.n	8007116 <HAL_DMA_Abort+0x276>
 80070b2:	bf00      	nop
 80070b4:	40020010 	.word	0x40020010
 80070b8:	40020028 	.word	0x40020028
 80070bc:	40020040 	.word	0x40020040
 80070c0:	40020058 	.word	0x40020058
 80070c4:	40020070 	.word	0x40020070
 80070c8:	40020088 	.word	0x40020088
 80070cc:	400200a0 	.word	0x400200a0
 80070d0:	400200b8 	.word	0x400200b8
 80070d4:	40020410 	.word	0x40020410
 80070d8:	40020428 	.word	0x40020428
 80070dc:	40020440 	.word	0x40020440
 80070e0:	40020458 	.word	0x40020458
 80070e4:	40020470 	.word	0x40020470
 80070e8:	40020488 	.word	0x40020488
 80070ec:	400204a0 	.word	0x400204a0
 80070f0:	400204b8 	.word	0x400204b8
 80070f4:	58025408 	.word	0x58025408
 80070f8:	5802541c 	.word	0x5802541c
 80070fc:	58025430 	.word	0x58025430
 8007100:	58025444 	.word	0x58025444
 8007104:	58025458 	.word	0x58025458
 8007108:	5802546c 	.word	0x5802546c
 800710c:	58025480 	.word	0x58025480
 8007110:	58025494 	.word	0x58025494
 8007114:	2300      	movs	r3, #0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d007      	beq.n	800712a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007128:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a6d      	ldr	r2, [pc, #436]	; (80072e4 <HAL_DMA_Abort+0x444>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d04a      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a6b      	ldr	r2, [pc, #428]	; (80072e8 <HAL_DMA_Abort+0x448>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d045      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a6a      	ldr	r2, [pc, #424]	; (80072ec <HAL_DMA_Abort+0x44c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d040      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a68      	ldr	r2, [pc, #416]	; (80072f0 <HAL_DMA_Abort+0x450>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d03b      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a67      	ldr	r2, [pc, #412]	; (80072f4 <HAL_DMA_Abort+0x454>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d036      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a65      	ldr	r2, [pc, #404]	; (80072f8 <HAL_DMA_Abort+0x458>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d031      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a64      	ldr	r2, [pc, #400]	; (80072fc <HAL_DMA_Abort+0x45c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d02c      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a62      	ldr	r2, [pc, #392]	; (8007300 <HAL_DMA_Abort+0x460>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d027      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a61      	ldr	r2, [pc, #388]	; (8007304 <HAL_DMA_Abort+0x464>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d022      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a5f      	ldr	r2, [pc, #380]	; (8007308 <HAL_DMA_Abort+0x468>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d01d      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a5e      	ldr	r2, [pc, #376]	; (800730c <HAL_DMA_Abort+0x46c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d018      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a5c      	ldr	r2, [pc, #368]	; (8007310 <HAL_DMA_Abort+0x470>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d013      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a5b      	ldr	r2, [pc, #364]	; (8007314 <HAL_DMA_Abort+0x474>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00e      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a59      	ldr	r2, [pc, #356]	; (8007318 <HAL_DMA_Abort+0x478>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d009      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a58      	ldr	r2, [pc, #352]	; (800731c <HAL_DMA_Abort+0x47c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d004      	beq.n	80071ca <HAL_DMA_Abort+0x32a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a56      	ldr	r2, [pc, #344]	; (8007320 <HAL_DMA_Abort+0x480>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d108      	bne.n	80071dc <HAL_DMA_Abort+0x33c>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0201 	bic.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	e007      	b.n	80071ec <HAL_DMA_Abort+0x34c>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0201 	bic.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80071ec:	e013      	b.n	8007216 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071ee:	f7fc ff69 	bl	80040c4 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b05      	cmp	r3, #5
 80071fa:	d90c      	bls.n	8007216 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2203      	movs	r2, #3
 8007206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e12d      	b.n	8007472 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e5      	bne.n	80071ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <HAL_DMA_Abort+0x444>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d04a      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2d      	ldr	r2, [pc, #180]	; (80072e8 <HAL_DMA_Abort+0x448>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d045      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2c      	ldr	r2, [pc, #176]	; (80072ec <HAL_DMA_Abort+0x44c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d040      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2a      	ldr	r2, [pc, #168]	; (80072f0 <HAL_DMA_Abort+0x450>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d03b      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a29      	ldr	r2, [pc, #164]	; (80072f4 <HAL_DMA_Abort+0x454>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d036      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a27      	ldr	r2, [pc, #156]	; (80072f8 <HAL_DMA_Abort+0x458>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d031      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a26      	ldr	r2, [pc, #152]	; (80072fc <HAL_DMA_Abort+0x45c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d02c      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a24      	ldr	r2, [pc, #144]	; (8007300 <HAL_DMA_Abort+0x460>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d027      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a23      	ldr	r2, [pc, #140]	; (8007304 <HAL_DMA_Abort+0x464>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d022      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a21      	ldr	r2, [pc, #132]	; (8007308 <HAL_DMA_Abort+0x468>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d01d      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a20      	ldr	r2, [pc, #128]	; (800730c <HAL_DMA_Abort+0x46c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1e      	ldr	r2, [pc, #120]	; (8007310 <HAL_DMA_Abort+0x470>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <HAL_DMA_Abort+0x474>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1b      	ldr	r2, [pc, #108]	; (8007318 <HAL_DMA_Abort+0x478>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1a      	ldr	r2, [pc, #104]	; (800731c <HAL_DMA_Abort+0x47c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_DMA_Abort+0x422>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a18      	ldr	r2, [pc, #96]	; (8007320 <HAL_DMA_Abort+0x480>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d101      	bne.n	80072c6 <HAL_DMA_Abort+0x426>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <HAL_DMA_Abort+0x428>
 80072c6:	2300      	movs	r3, #0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d02b      	beq.n	8007324 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	223f      	movs	r2, #63	; 0x3f
 80072dc:	409a      	lsls	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	609a      	str	r2, [r3, #8]
 80072e2:	e02a      	b.n	800733a <HAL_DMA_Abort+0x49a>
 80072e4:	40020010 	.word	0x40020010
 80072e8:	40020028 	.word	0x40020028
 80072ec:	40020040 	.word	0x40020040
 80072f0:	40020058 	.word	0x40020058
 80072f4:	40020070 	.word	0x40020070
 80072f8:	40020088 	.word	0x40020088
 80072fc:	400200a0 	.word	0x400200a0
 8007300:	400200b8 	.word	0x400200b8
 8007304:	40020410 	.word	0x40020410
 8007308:	40020428 	.word	0x40020428
 800730c:	40020440 	.word	0x40020440
 8007310:	40020458 	.word	0x40020458
 8007314:	40020470 	.word	0x40020470
 8007318:	40020488 	.word	0x40020488
 800731c:	400204a0 	.word	0x400204a0
 8007320:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007328:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2201      	movs	r2, #1
 8007334:	409a      	lsls	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a4f      	ldr	r2, [pc, #316]	; (800747c <HAL_DMA_Abort+0x5dc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d072      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a4d      	ldr	r2, [pc, #308]	; (8007480 <HAL_DMA_Abort+0x5e0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d06d      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a4c      	ldr	r2, [pc, #304]	; (8007484 <HAL_DMA_Abort+0x5e4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d068      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a4a      	ldr	r2, [pc, #296]	; (8007488 <HAL_DMA_Abort+0x5e8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d063      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a49      	ldr	r2, [pc, #292]	; (800748c <HAL_DMA_Abort+0x5ec>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d05e      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a47      	ldr	r2, [pc, #284]	; (8007490 <HAL_DMA_Abort+0x5f0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d059      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a46      	ldr	r2, [pc, #280]	; (8007494 <HAL_DMA_Abort+0x5f4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d054      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a44      	ldr	r2, [pc, #272]	; (8007498 <HAL_DMA_Abort+0x5f8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d04f      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a43      	ldr	r2, [pc, #268]	; (800749c <HAL_DMA_Abort+0x5fc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d04a      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a41      	ldr	r2, [pc, #260]	; (80074a0 <HAL_DMA_Abort+0x600>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d045      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a40      	ldr	r2, [pc, #256]	; (80074a4 <HAL_DMA_Abort+0x604>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d040      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a3e      	ldr	r2, [pc, #248]	; (80074a8 <HAL_DMA_Abort+0x608>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d03b      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a3d      	ldr	r2, [pc, #244]	; (80074ac <HAL_DMA_Abort+0x60c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d036      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a3b      	ldr	r2, [pc, #236]	; (80074b0 <HAL_DMA_Abort+0x610>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d031      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a3a      	ldr	r2, [pc, #232]	; (80074b4 <HAL_DMA_Abort+0x614>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d02c      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a38      	ldr	r2, [pc, #224]	; (80074b8 <HAL_DMA_Abort+0x618>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d027      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a37      	ldr	r2, [pc, #220]	; (80074bc <HAL_DMA_Abort+0x61c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d022      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a35      	ldr	r2, [pc, #212]	; (80074c0 <HAL_DMA_Abort+0x620>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01d      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a34      	ldr	r2, [pc, #208]	; (80074c4 <HAL_DMA_Abort+0x624>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d018      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a32      	ldr	r2, [pc, #200]	; (80074c8 <HAL_DMA_Abort+0x628>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a31      	ldr	r2, [pc, #196]	; (80074cc <HAL_DMA_Abort+0x62c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00e      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a2f      	ldr	r2, [pc, #188]	; (80074d0 <HAL_DMA_Abort+0x630>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d009      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a2e      	ldr	r2, [pc, #184]	; (80074d4 <HAL_DMA_Abort+0x634>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d004      	beq.n	800742a <HAL_DMA_Abort+0x58a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2c      	ldr	r2, [pc, #176]	; (80074d8 <HAL_DMA_Abort+0x638>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d101      	bne.n	800742e <HAL_DMA_Abort+0x58e>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <HAL_DMA_Abort+0x590>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d015      	beq.n	8007460 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800743c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00c      	beq.n	8007460 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007454:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800745e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40020010 	.word	0x40020010
 8007480:	40020028 	.word	0x40020028
 8007484:	40020040 	.word	0x40020040
 8007488:	40020058 	.word	0x40020058
 800748c:	40020070 	.word	0x40020070
 8007490:	40020088 	.word	0x40020088
 8007494:	400200a0 	.word	0x400200a0
 8007498:	400200b8 	.word	0x400200b8
 800749c:	40020410 	.word	0x40020410
 80074a0:	40020428 	.word	0x40020428
 80074a4:	40020440 	.word	0x40020440
 80074a8:	40020458 	.word	0x40020458
 80074ac:	40020470 	.word	0x40020470
 80074b0:	40020488 	.word	0x40020488
 80074b4:	400204a0 	.word	0x400204a0
 80074b8:	400204b8 	.word	0x400204b8
 80074bc:	58025408 	.word	0x58025408
 80074c0:	5802541c 	.word	0x5802541c
 80074c4:	58025430 	.word	0x58025430
 80074c8:	58025444 	.word	0x58025444
 80074cc:	58025458 	.word	0x58025458
 80074d0:	5802546c 	.word	0x5802546c
 80074d4:	58025480 	.word	0x58025480
 80074d8:	58025494 	.word	0x58025494

080074dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e237      	b.n	800795e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d004      	beq.n	8007504 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2280      	movs	r2, #128	; 0x80
 80074fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e22c      	b.n	800795e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a5c      	ldr	r2, [pc, #368]	; (800767c <HAL_DMA_Abort_IT+0x1a0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d04a      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a5b      	ldr	r2, [pc, #364]	; (8007680 <HAL_DMA_Abort_IT+0x1a4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d045      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a59      	ldr	r2, [pc, #356]	; (8007684 <HAL_DMA_Abort_IT+0x1a8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d040      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a58      	ldr	r2, [pc, #352]	; (8007688 <HAL_DMA_Abort_IT+0x1ac>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d03b      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a56      	ldr	r2, [pc, #344]	; (800768c <HAL_DMA_Abort_IT+0x1b0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d036      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a55      	ldr	r2, [pc, #340]	; (8007690 <HAL_DMA_Abort_IT+0x1b4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d031      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a53      	ldr	r2, [pc, #332]	; (8007694 <HAL_DMA_Abort_IT+0x1b8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d02c      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a52      	ldr	r2, [pc, #328]	; (8007698 <HAL_DMA_Abort_IT+0x1bc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d027      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a50      	ldr	r2, [pc, #320]	; (800769c <HAL_DMA_Abort_IT+0x1c0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d022      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a4f      	ldr	r2, [pc, #316]	; (80076a0 <HAL_DMA_Abort_IT+0x1c4>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d01d      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a4d      	ldr	r2, [pc, #308]	; (80076a4 <HAL_DMA_Abort_IT+0x1c8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d018      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a4c      	ldr	r2, [pc, #304]	; (80076a8 <HAL_DMA_Abort_IT+0x1cc>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d013      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a4a      	ldr	r2, [pc, #296]	; (80076ac <HAL_DMA_Abort_IT+0x1d0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00e      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a49      	ldr	r2, [pc, #292]	; (80076b0 <HAL_DMA_Abort_IT+0x1d4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d009      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a47      	ldr	r2, [pc, #284]	; (80076b4 <HAL_DMA_Abort_IT+0x1d8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d004      	beq.n	80075a4 <HAL_DMA_Abort_IT+0xc8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a46      	ldr	r2, [pc, #280]	; (80076b8 <HAL_DMA_Abort_IT+0x1dc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d101      	bne.n	80075a8 <HAL_DMA_Abort_IT+0xcc>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <HAL_DMA_Abort_IT+0xce>
 80075a8:	2300      	movs	r3, #0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 8086 	beq.w	80076bc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2204      	movs	r2, #4
 80075b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2f      	ldr	r2, [pc, #188]	; (800767c <HAL_DMA_Abort_IT+0x1a0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d04a      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a2e      	ldr	r2, [pc, #184]	; (8007680 <HAL_DMA_Abort_IT+0x1a4>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d045      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2c      	ldr	r2, [pc, #176]	; (8007684 <HAL_DMA_Abort_IT+0x1a8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d040      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2b      	ldr	r2, [pc, #172]	; (8007688 <HAL_DMA_Abort_IT+0x1ac>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d03b      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a29      	ldr	r2, [pc, #164]	; (800768c <HAL_DMA_Abort_IT+0x1b0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d036      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a28      	ldr	r2, [pc, #160]	; (8007690 <HAL_DMA_Abort_IT+0x1b4>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d031      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a26      	ldr	r2, [pc, #152]	; (8007694 <HAL_DMA_Abort_IT+0x1b8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d02c      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a25      	ldr	r2, [pc, #148]	; (8007698 <HAL_DMA_Abort_IT+0x1bc>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d027      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a23      	ldr	r2, [pc, #140]	; (800769c <HAL_DMA_Abort_IT+0x1c0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d022      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a22      	ldr	r2, [pc, #136]	; (80076a0 <HAL_DMA_Abort_IT+0x1c4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d01d      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a20      	ldr	r2, [pc, #128]	; (80076a4 <HAL_DMA_Abort_IT+0x1c8>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d018      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1f      	ldr	r2, [pc, #124]	; (80076a8 <HAL_DMA_Abort_IT+0x1cc>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d013      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1d      	ldr	r2, [pc, #116]	; (80076ac <HAL_DMA_Abort_IT+0x1d0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00e      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <HAL_DMA_Abort_IT+0x1d4>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d009      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <HAL_DMA_Abort_IT+0x1d8>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d004      	beq.n	8007658 <HAL_DMA_Abort_IT+0x17c>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a19      	ldr	r2, [pc, #100]	; (80076b8 <HAL_DMA_Abort_IT+0x1dc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d108      	bne.n	800766a <HAL_DMA_Abort_IT+0x18e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0201 	bic.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e178      	b.n	800795c <HAL_DMA_Abort_IT+0x480>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0201 	bic.w	r2, r2, #1
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e16f      	b.n	800795c <HAL_DMA_Abort_IT+0x480>
 800767c:	40020010 	.word	0x40020010
 8007680:	40020028 	.word	0x40020028
 8007684:	40020040 	.word	0x40020040
 8007688:	40020058 	.word	0x40020058
 800768c:	40020070 	.word	0x40020070
 8007690:	40020088 	.word	0x40020088
 8007694:	400200a0 	.word	0x400200a0
 8007698:	400200b8 	.word	0x400200b8
 800769c:	40020410 	.word	0x40020410
 80076a0:	40020428 	.word	0x40020428
 80076a4:	40020440 	.word	0x40020440
 80076a8:	40020458 	.word	0x40020458
 80076ac:	40020470 	.word	0x40020470
 80076b0:	40020488 	.word	0x40020488
 80076b4:	400204a0 	.word	0x400204a0
 80076b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 020e 	bic.w	r2, r2, #14
 80076ca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a6c      	ldr	r2, [pc, #432]	; (8007884 <HAL_DMA_Abort_IT+0x3a8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d04a      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a6b      	ldr	r2, [pc, #428]	; (8007888 <HAL_DMA_Abort_IT+0x3ac>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d045      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a69      	ldr	r2, [pc, #420]	; (800788c <HAL_DMA_Abort_IT+0x3b0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d040      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a68      	ldr	r2, [pc, #416]	; (8007890 <HAL_DMA_Abort_IT+0x3b4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d03b      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a66      	ldr	r2, [pc, #408]	; (8007894 <HAL_DMA_Abort_IT+0x3b8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d036      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a65      	ldr	r2, [pc, #404]	; (8007898 <HAL_DMA_Abort_IT+0x3bc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d031      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a63      	ldr	r2, [pc, #396]	; (800789c <HAL_DMA_Abort_IT+0x3c0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d02c      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a62      	ldr	r2, [pc, #392]	; (80078a0 <HAL_DMA_Abort_IT+0x3c4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d027      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a60      	ldr	r2, [pc, #384]	; (80078a4 <HAL_DMA_Abort_IT+0x3c8>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d022      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a5f      	ldr	r2, [pc, #380]	; (80078a8 <HAL_DMA_Abort_IT+0x3cc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d01d      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a5d      	ldr	r2, [pc, #372]	; (80078ac <HAL_DMA_Abort_IT+0x3d0>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d018      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a5c      	ldr	r2, [pc, #368]	; (80078b0 <HAL_DMA_Abort_IT+0x3d4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d013      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a5a      	ldr	r2, [pc, #360]	; (80078b4 <HAL_DMA_Abort_IT+0x3d8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00e      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a59      	ldr	r2, [pc, #356]	; (80078b8 <HAL_DMA_Abort_IT+0x3dc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d009      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a57      	ldr	r2, [pc, #348]	; (80078bc <HAL_DMA_Abort_IT+0x3e0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d004      	beq.n	800776c <HAL_DMA_Abort_IT+0x290>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a56      	ldr	r2, [pc, #344]	; (80078c0 <HAL_DMA_Abort_IT+0x3e4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d108      	bne.n	800777e <HAL_DMA_Abort_IT+0x2a2>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	e007      	b.n	800778e <HAL_DMA_Abort_IT+0x2b2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0201 	bic.w	r2, r2, #1
 800778c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a3c      	ldr	r2, [pc, #240]	; (8007884 <HAL_DMA_Abort_IT+0x3a8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d072      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a3a      	ldr	r2, [pc, #232]	; (8007888 <HAL_DMA_Abort_IT+0x3ac>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d06d      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a39      	ldr	r2, [pc, #228]	; (800788c <HAL_DMA_Abort_IT+0x3b0>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d068      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a37      	ldr	r2, [pc, #220]	; (8007890 <HAL_DMA_Abort_IT+0x3b4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d063      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a36      	ldr	r2, [pc, #216]	; (8007894 <HAL_DMA_Abort_IT+0x3b8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d05e      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a34      	ldr	r2, [pc, #208]	; (8007898 <HAL_DMA_Abort_IT+0x3bc>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d059      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a33      	ldr	r2, [pc, #204]	; (800789c <HAL_DMA_Abort_IT+0x3c0>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d054      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a31      	ldr	r2, [pc, #196]	; (80078a0 <HAL_DMA_Abort_IT+0x3c4>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d04f      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a30      	ldr	r2, [pc, #192]	; (80078a4 <HAL_DMA_Abort_IT+0x3c8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d04a      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a2e      	ldr	r2, [pc, #184]	; (80078a8 <HAL_DMA_Abort_IT+0x3cc>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d045      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a2d      	ldr	r2, [pc, #180]	; (80078ac <HAL_DMA_Abort_IT+0x3d0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d040      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a2b      	ldr	r2, [pc, #172]	; (80078b0 <HAL_DMA_Abort_IT+0x3d4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d03b      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a2a      	ldr	r2, [pc, #168]	; (80078b4 <HAL_DMA_Abort_IT+0x3d8>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d036      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a28      	ldr	r2, [pc, #160]	; (80078b8 <HAL_DMA_Abort_IT+0x3dc>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d031      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a27      	ldr	r2, [pc, #156]	; (80078bc <HAL_DMA_Abort_IT+0x3e0>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d02c      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a25      	ldr	r2, [pc, #148]	; (80078c0 <HAL_DMA_Abort_IT+0x3e4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d027      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a24      	ldr	r2, [pc, #144]	; (80078c4 <HAL_DMA_Abort_IT+0x3e8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d022      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a22      	ldr	r2, [pc, #136]	; (80078c8 <HAL_DMA_Abort_IT+0x3ec>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01d      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a21      	ldr	r2, [pc, #132]	; (80078cc <HAL_DMA_Abort_IT+0x3f0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d018      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <HAL_DMA_Abort_IT+0x3f4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d013      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1e      	ldr	r2, [pc, #120]	; (80078d4 <HAL_DMA_Abort_IT+0x3f8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00e      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1c      	ldr	r2, [pc, #112]	; (80078d8 <HAL_DMA_Abort_IT+0x3fc>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d009      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1b      	ldr	r2, [pc, #108]	; (80078dc <HAL_DMA_Abort_IT+0x400>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d004      	beq.n	800787e <HAL_DMA_Abort_IT+0x3a2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a19      	ldr	r2, [pc, #100]	; (80078e0 <HAL_DMA_Abort_IT+0x404>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d132      	bne.n	80078e4 <HAL_DMA_Abort_IT+0x408>
 800787e:	2301      	movs	r3, #1
 8007880:	e031      	b.n	80078e6 <HAL_DMA_Abort_IT+0x40a>
 8007882:	bf00      	nop
 8007884:	40020010 	.word	0x40020010
 8007888:	40020028 	.word	0x40020028
 800788c:	40020040 	.word	0x40020040
 8007890:	40020058 	.word	0x40020058
 8007894:	40020070 	.word	0x40020070
 8007898:	40020088 	.word	0x40020088
 800789c:	400200a0 	.word	0x400200a0
 80078a0:	400200b8 	.word	0x400200b8
 80078a4:	40020410 	.word	0x40020410
 80078a8:	40020428 	.word	0x40020428
 80078ac:	40020440 	.word	0x40020440
 80078b0:	40020458 	.word	0x40020458
 80078b4:	40020470 	.word	0x40020470
 80078b8:	40020488 	.word	0x40020488
 80078bc:	400204a0 	.word	0x400204a0
 80078c0:	400204b8 	.word	0x400204b8
 80078c4:	58025408 	.word	0x58025408
 80078c8:	5802541c 	.word	0x5802541c
 80078cc:	58025430 	.word	0x58025430
 80078d0:	58025444 	.word	0x58025444
 80078d4:	58025458 	.word	0x58025458
 80078d8:	5802546c 	.word	0x5802546c
 80078dc:	58025480 	.word	0x58025480
 80078e0:	58025494 	.word	0x58025494
 80078e4:	2300      	movs	r3, #0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d028      	beq.n	800793c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2201      	movs	r2, #1
 800790a:	409a      	lsls	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007918:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00c      	beq.n	800793c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007930:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800793a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop

08007968 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	; 0x28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007974:	4b67      	ldr	r3, [pc, #412]	; (8007b14 <HAL_DMA_IRQHandler+0x1ac>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a67      	ldr	r2, [pc, #412]	; (8007b18 <HAL_DMA_IRQHandler+0x1b0>)
 800797a:	fba2 2303 	umull	r2, r3, r2, r3
 800797e:	0a9b      	lsrs	r3, r3, #10
 8007980:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a5f      	ldr	r2, [pc, #380]	; (8007b1c <HAL_DMA_IRQHandler+0x1b4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d04a      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a5d      	ldr	r2, [pc, #372]	; (8007b20 <HAL_DMA_IRQHandler+0x1b8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d045      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a5c      	ldr	r2, [pc, #368]	; (8007b24 <HAL_DMA_IRQHandler+0x1bc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d040      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a5a      	ldr	r2, [pc, #360]	; (8007b28 <HAL_DMA_IRQHandler+0x1c0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d03b      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a59      	ldr	r2, [pc, #356]	; (8007b2c <HAL_DMA_IRQHandler+0x1c4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d036      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a57      	ldr	r2, [pc, #348]	; (8007b30 <HAL_DMA_IRQHandler+0x1c8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d031      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a56      	ldr	r2, [pc, #344]	; (8007b34 <HAL_DMA_IRQHandler+0x1cc>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d02c      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a54      	ldr	r2, [pc, #336]	; (8007b38 <HAL_DMA_IRQHandler+0x1d0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d027      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a53      	ldr	r2, [pc, #332]	; (8007b3c <HAL_DMA_IRQHandler+0x1d4>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d022      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a51      	ldr	r2, [pc, #324]	; (8007b40 <HAL_DMA_IRQHandler+0x1d8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d01d      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a50      	ldr	r2, [pc, #320]	; (8007b44 <HAL_DMA_IRQHandler+0x1dc>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d018      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a4e      	ldr	r2, [pc, #312]	; (8007b48 <HAL_DMA_IRQHandler+0x1e0>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d013      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a4d      	ldr	r2, [pc, #308]	; (8007b4c <HAL_DMA_IRQHandler+0x1e4>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00e      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a4b      	ldr	r2, [pc, #300]	; (8007b50 <HAL_DMA_IRQHandler+0x1e8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d009      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a4a      	ldr	r2, [pc, #296]	; (8007b54 <HAL_DMA_IRQHandler+0x1ec>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d004      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xd2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a48      	ldr	r2, [pc, #288]	; (8007b58 <HAL_DMA_IRQHandler+0x1f0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d101      	bne.n	8007a3e <HAL_DMA_IRQHandler+0xd6>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <HAL_DMA_IRQHandler+0xd8>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 842b 	beq.w	800829c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2208      	movs	r2, #8
 8007a50:	409a      	lsls	r2, r3
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	4013      	ands	r3, r2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 80a2 	beq.w	8007ba0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a2e      	ldr	r2, [pc, #184]	; (8007b1c <HAL_DMA_IRQHandler+0x1b4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d04a      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a2d      	ldr	r2, [pc, #180]	; (8007b20 <HAL_DMA_IRQHandler+0x1b8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d045      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a2b      	ldr	r2, [pc, #172]	; (8007b24 <HAL_DMA_IRQHandler+0x1bc>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d040      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a2a      	ldr	r2, [pc, #168]	; (8007b28 <HAL_DMA_IRQHandler+0x1c0>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d03b      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a28      	ldr	r2, [pc, #160]	; (8007b2c <HAL_DMA_IRQHandler+0x1c4>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d036      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a27      	ldr	r2, [pc, #156]	; (8007b30 <HAL_DMA_IRQHandler+0x1c8>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d031      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a25      	ldr	r2, [pc, #148]	; (8007b34 <HAL_DMA_IRQHandler+0x1cc>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d02c      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a24      	ldr	r2, [pc, #144]	; (8007b38 <HAL_DMA_IRQHandler+0x1d0>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d027      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a22      	ldr	r2, [pc, #136]	; (8007b3c <HAL_DMA_IRQHandler+0x1d4>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d022      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a21      	ldr	r2, [pc, #132]	; (8007b40 <HAL_DMA_IRQHandler+0x1d8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d01d      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <HAL_DMA_IRQHandler+0x1dc>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d018      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a1e      	ldr	r2, [pc, #120]	; (8007b48 <HAL_DMA_IRQHandler+0x1e0>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d013      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1c      	ldr	r2, [pc, #112]	; (8007b4c <HAL_DMA_IRQHandler+0x1e4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00e      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1b      	ldr	r2, [pc, #108]	; (8007b50 <HAL_DMA_IRQHandler+0x1e8>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d009      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a19      	ldr	r2, [pc, #100]	; (8007b54 <HAL_DMA_IRQHandler+0x1ec>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d004      	beq.n	8007afc <HAL_DMA_IRQHandler+0x194>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a18      	ldr	r2, [pc, #96]	; (8007b58 <HAL_DMA_IRQHandler+0x1f0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d12f      	bne.n	8007b5c <HAL_DMA_IRQHandler+0x1f4>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0304 	and.w	r3, r3, #4
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	2300      	moveq	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	e02e      	b.n	8007b70 <HAL_DMA_IRQHandler+0x208>
 8007b12:	bf00      	nop
 8007b14:	24000084 	.word	0x24000084
 8007b18:	1b4e81b5 	.word	0x1b4e81b5
 8007b1c:	40020010 	.word	0x40020010
 8007b20:	40020028 	.word	0x40020028
 8007b24:	40020040 	.word	0x40020040
 8007b28:	40020058 	.word	0x40020058
 8007b2c:	40020070 	.word	0x40020070
 8007b30:	40020088 	.word	0x40020088
 8007b34:	400200a0 	.word	0x400200a0
 8007b38:	400200b8 	.word	0x400200b8
 8007b3c:	40020410 	.word	0x40020410
 8007b40:	40020428 	.word	0x40020428
 8007b44:	40020440 	.word	0x40020440
 8007b48:	40020458 	.word	0x40020458
 8007b4c:	40020470 	.word	0x40020470
 8007b50:	40020488 	.word	0x40020488
 8007b54:	400204a0 	.word	0x400204a0
 8007b58:	400204b8 	.word	0x400204b8
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bf14      	ite	ne
 8007b6a:	2301      	movne	r3, #1
 8007b6c:	2300      	moveq	r3, #0
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d015      	beq.n	8007ba0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0204 	bic.w	r2, r2, #4
 8007b82:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	409a      	lsls	r2, r3
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	f043 0201 	orr.w	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba4:	f003 031f 	and.w	r3, r3, #31
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	fa22 f303 	lsr.w	r3, r2, r3
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d06e      	beq.n	8007c94 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a69      	ldr	r2, [pc, #420]	; (8007d60 <HAL_DMA_IRQHandler+0x3f8>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d04a      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a67      	ldr	r2, [pc, #412]	; (8007d64 <HAL_DMA_IRQHandler+0x3fc>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d045      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a66      	ldr	r2, [pc, #408]	; (8007d68 <HAL_DMA_IRQHandler+0x400>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d040      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a64      	ldr	r2, [pc, #400]	; (8007d6c <HAL_DMA_IRQHandler+0x404>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d03b      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a63      	ldr	r2, [pc, #396]	; (8007d70 <HAL_DMA_IRQHandler+0x408>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d036      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a61      	ldr	r2, [pc, #388]	; (8007d74 <HAL_DMA_IRQHandler+0x40c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d031      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a60      	ldr	r2, [pc, #384]	; (8007d78 <HAL_DMA_IRQHandler+0x410>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d02c      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a5e      	ldr	r2, [pc, #376]	; (8007d7c <HAL_DMA_IRQHandler+0x414>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d027      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a5d      	ldr	r2, [pc, #372]	; (8007d80 <HAL_DMA_IRQHandler+0x418>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d022      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a5b      	ldr	r2, [pc, #364]	; (8007d84 <HAL_DMA_IRQHandler+0x41c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01d      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a5a      	ldr	r2, [pc, #360]	; (8007d88 <HAL_DMA_IRQHandler+0x420>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d018      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a58      	ldr	r2, [pc, #352]	; (8007d8c <HAL_DMA_IRQHandler+0x424>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d013      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a57      	ldr	r2, [pc, #348]	; (8007d90 <HAL_DMA_IRQHandler+0x428>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00e      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a55      	ldr	r2, [pc, #340]	; (8007d94 <HAL_DMA_IRQHandler+0x42c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d009      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a54      	ldr	r2, [pc, #336]	; (8007d98 <HAL_DMA_IRQHandler+0x430>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d004      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2ee>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a52      	ldr	r2, [pc, #328]	; (8007d9c <HAL_DMA_IRQHandler+0x434>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d10a      	bne.n	8007c6c <HAL_DMA_IRQHandler+0x304>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	bf14      	ite	ne
 8007c64:	2301      	movne	r3, #1
 8007c66:	2300      	moveq	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	e003      	b.n	8007c74 <HAL_DMA_IRQHandler+0x30c>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2300      	movs	r3, #0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00d      	beq.n	8007c94 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7c:	f003 031f 	and.w	r3, r3, #31
 8007c80:	2201      	movs	r2, #1
 8007c82:	409a      	lsls	r2, r3
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8c:	f043 0202 	orr.w	r2, r3, #2
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c98:	f003 031f 	and.w	r3, r3, #31
 8007c9c:	2204      	movs	r2, #4
 8007c9e:	409a      	lsls	r2, r3
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 808f 	beq.w	8007dc8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a2c      	ldr	r2, [pc, #176]	; (8007d60 <HAL_DMA_IRQHandler+0x3f8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d04a      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a2a      	ldr	r2, [pc, #168]	; (8007d64 <HAL_DMA_IRQHandler+0x3fc>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d045      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a29      	ldr	r2, [pc, #164]	; (8007d68 <HAL_DMA_IRQHandler+0x400>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d040      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a27      	ldr	r2, [pc, #156]	; (8007d6c <HAL_DMA_IRQHandler+0x404>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d03b      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a26      	ldr	r2, [pc, #152]	; (8007d70 <HAL_DMA_IRQHandler+0x408>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d036      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a24      	ldr	r2, [pc, #144]	; (8007d74 <HAL_DMA_IRQHandler+0x40c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d031      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a23      	ldr	r2, [pc, #140]	; (8007d78 <HAL_DMA_IRQHandler+0x410>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d02c      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a21      	ldr	r2, [pc, #132]	; (8007d7c <HAL_DMA_IRQHandler+0x414>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d027      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a20      	ldr	r2, [pc, #128]	; (8007d80 <HAL_DMA_IRQHandler+0x418>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d022      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1e      	ldr	r2, [pc, #120]	; (8007d84 <HAL_DMA_IRQHandler+0x41c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d01d      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a1d      	ldr	r2, [pc, #116]	; (8007d88 <HAL_DMA_IRQHandler+0x420>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d018      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1b      	ldr	r2, [pc, #108]	; (8007d8c <HAL_DMA_IRQHandler+0x424>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d013      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a1a      	ldr	r2, [pc, #104]	; (8007d90 <HAL_DMA_IRQHandler+0x428>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00e      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a18      	ldr	r2, [pc, #96]	; (8007d94 <HAL_DMA_IRQHandler+0x42c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d009      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <HAL_DMA_IRQHandler+0x430>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d004      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x3e2>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a15      	ldr	r2, [pc, #84]	; (8007d9c <HAL_DMA_IRQHandler+0x434>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d12a      	bne.n	8007da0 <HAL_DMA_IRQHandler+0x438>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bf14      	ite	ne
 8007d58:	2301      	movne	r3, #1
 8007d5a:	2300      	moveq	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	e023      	b.n	8007da8 <HAL_DMA_IRQHandler+0x440>
 8007d60:	40020010 	.word	0x40020010
 8007d64:	40020028 	.word	0x40020028
 8007d68:	40020040 	.word	0x40020040
 8007d6c:	40020058 	.word	0x40020058
 8007d70:	40020070 	.word	0x40020070
 8007d74:	40020088 	.word	0x40020088
 8007d78:	400200a0 	.word	0x400200a0
 8007d7c:	400200b8 	.word	0x400200b8
 8007d80:	40020410 	.word	0x40020410
 8007d84:	40020428 	.word	0x40020428
 8007d88:	40020440 	.word	0x40020440
 8007d8c:	40020458 	.word	0x40020458
 8007d90:	40020470 	.word	0x40020470
 8007d94:	40020488 	.word	0x40020488
 8007d98:	400204a0 	.word	0x400204a0
 8007d9c:	400204b8 	.word	0x400204b8
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2300      	movs	r3, #0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00d      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db0:	f003 031f 	and.w	r3, r3, #31
 8007db4:	2204      	movs	r2, #4
 8007db6:	409a      	lsls	r2, r3
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc0:	f043 0204 	orr.w	r2, r3, #4
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dcc:	f003 031f 	and.w	r3, r3, #31
 8007dd0:	2210      	movs	r2, #16
 8007dd2:	409a      	lsls	r2, r3
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80a6 	beq.w	8007f2a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a85      	ldr	r2, [pc, #532]	; (8007ff8 <HAL_DMA_IRQHandler+0x690>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d04a      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a83      	ldr	r2, [pc, #524]	; (8007ffc <HAL_DMA_IRQHandler+0x694>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d045      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a82      	ldr	r2, [pc, #520]	; (8008000 <HAL_DMA_IRQHandler+0x698>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d040      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a80      	ldr	r2, [pc, #512]	; (8008004 <HAL_DMA_IRQHandler+0x69c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d03b      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a7f      	ldr	r2, [pc, #508]	; (8008008 <HAL_DMA_IRQHandler+0x6a0>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d036      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a7d      	ldr	r2, [pc, #500]	; (800800c <HAL_DMA_IRQHandler+0x6a4>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d031      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a7c      	ldr	r2, [pc, #496]	; (8008010 <HAL_DMA_IRQHandler+0x6a8>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d02c      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a7a      	ldr	r2, [pc, #488]	; (8008014 <HAL_DMA_IRQHandler+0x6ac>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d027      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a79      	ldr	r2, [pc, #484]	; (8008018 <HAL_DMA_IRQHandler+0x6b0>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d022      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a77      	ldr	r2, [pc, #476]	; (800801c <HAL_DMA_IRQHandler+0x6b4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d01d      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a76      	ldr	r2, [pc, #472]	; (8008020 <HAL_DMA_IRQHandler+0x6b8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d018      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a74      	ldr	r2, [pc, #464]	; (8008024 <HAL_DMA_IRQHandler+0x6bc>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d013      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a73      	ldr	r2, [pc, #460]	; (8008028 <HAL_DMA_IRQHandler+0x6c0>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00e      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a71      	ldr	r2, [pc, #452]	; (800802c <HAL_DMA_IRQHandler+0x6c4>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d009      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a70      	ldr	r2, [pc, #448]	; (8008030 <HAL_DMA_IRQHandler+0x6c8>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d004      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x516>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a6e      	ldr	r2, [pc, #440]	; (8008034 <HAL_DMA_IRQHandler+0x6cc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d10a      	bne.n	8007e94 <HAL_DMA_IRQHandler+0x52c>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	bf14      	ite	ne
 8007e8c:	2301      	movne	r3, #1
 8007e8e:	2300      	moveq	r3, #0
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	e009      	b.n	8007ea8 <HAL_DMA_IRQHandler+0x540>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bf14      	ite	ne
 8007ea2:	2301      	movne	r3, #1
 8007ea4:	2300      	moveq	r3, #0
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d03e      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb0:	f003 031f 	and.w	r3, r3, #31
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	409a      	lsls	r2, r3
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d018      	beq.n	8007efc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d108      	bne.n	8007eea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d024      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4798      	blx	r3
 8007ee8:	e01f      	b.n	8007f2a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d01b      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
 8007efa:	e016      	b.n	8007f2a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d107      	bne.n	8007f1a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0208 	bic.w	r2, r2, #8
 8007f18:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	2220      	movs	r2, #32
 8007f34:	409a      	lsls	r2, r3
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 8110 	beq.w	8008160 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a2c      	ldr	r2, [pc, #176]	; (8007ff8 <HAL_DMA_IRQHandler+0x690>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d04a      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a2b      	ldr	r2, [pc, #172]	; (8007ffc <HAL_DMA_IRQHandler+0x694>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d045      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a29      	ldr	r2, [pc, #164]	; (8008000 <HAL_DMA_IRQHandler+0x698>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d040      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a28      	ldr	r2, [pc, #160]	; (8008004 <HAL_DMA_IRQHandler+0x69c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d03b      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a26      	ldr	r2, [pc, #152]	; (8008008 <HAL_DMA_IRQHandler+0x6a0>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d036      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a25      	ldr	r2, [pc, #148]	; (800800c <HAL_DMA_IRQHandler+0x6a4>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d031      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a23      	ldr	r2, [pc, #140]	; (8008010 <HAL_DMA_IRQHandler+0x6a8>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d02c      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a22      	ldr	r2, [pc, #136]	; (8008014 <HAL_DMA_IRQHandler+0x6ac>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d027      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a20      	ldr	r2, [pc, #128]	; (8008018 <HAL_DMA_IRQHandler+0x6b0>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d022      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a1f      	ldr	r2, [pc, #124]	; (800801c <HAL_DMA_IRQHandler+0x6b4>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d01d      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1d      	ldr	r2, [pc, #116]	; (8008020 <HAL_DMA_IRQHandler+0x6b8>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d018      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1c      	ldr	r2, [pc, #112]	; (8008024 <HAL_DMA_IRQHandler+0x6bc>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d013      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a1a      	ldr	r2, [pc, #104]	; (8008028 <HAL_DMA_IRQHandler+0x6c0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d00e      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a19      	ldr	r2, [pc, #100]	; (800802c <HAL_DMA_IRQHandler+0x6c4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d009      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a17      	ldr	r2, [pc, #92]	; (8008030 <HAL_DMA_IRQHandler+0x6c8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d004      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x678>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a16      	ldr	r2, [pc, #88]	; (8008034 <HAL_DMA_IRQHandler+0x6cc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d12b      	bne.n	8008038 <HAL_DMA_IRQHandler+0x6d0>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0310 	and.w	r3, r3, #16
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	bf14      	ite	ne
 8007fee:	2301      	movne	r3, #1
 8007ff0:	2300      	moveq	r3, #0
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	e02a      	b.n	800804c <HAL_DMA_IRQHandler+0x6e4>
 8007ff6:	bf00      	nop
 8007ff8:	40020010 	.word	0x40020010
 8007ffc:	40020028 	.word	0x40020028
 8008000:	40020040 	.word	0x40020040
 8008004:	40020058 	.word	0x40020058
 8008008:	40020070 	.word	0x40020070
 800800c:	40020088 	.word	0x40020088
 8008010:	400200a0 	.word	0x400200a0
 8008014:	400200b8 	.word	0x400200b8
 8008018:	40020410 	.word	0x40020410
 800801c:	40020428 	.word	0x40020428
 8008020:	40020440 	.word	0x40020440
 8008024:	40020458 	.word	0x40020458
 8008028:	40020470 	.word	0x40020470
 800802c:	40020488 	.word	0x40020488
 8008030:	400204a0 	.word	0x400204a0
 8008034:	400204b8 	.word	0x400204b8
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	bf14      	ite	ne
 8008046:	2301      	movne	r3, #1
 8008048:	2300      	moveq	r3, #0
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8087 	beq.w	8008160 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	2220      	movs	r2, #32
 800805c:	409a      	lsls	r2, r3
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b04      	cmp	r3, #4
 800806c:	d139      	bne.n	80080e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0216 	bic.w	r2, r2, #22
 800807c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	695a      	ldr	r2, [r3, #20]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800808c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d103      	bne.n	800809e <HAL_DMA_IRQHandler+0x736>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0208 	bic.w	r2, r2, #8
 80080ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	223f      	movs	r2, #63	; 0x3f
 80080b8:	409a      	lsls	r2, r3
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f000 834a 	beq.w	800876c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
          }
          return;
 80080e0:	e344      	b.n	800876c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d018      	beq.n	8008122 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d108      	bne.n	8008110 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008102:	2b00      	cmp	r3, #0
 8008104:	d02c      	beq.n	8008160 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
 800810e:	e027      	b.n	8008160 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d023      	beq.n	8008160 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
 8008120:	e01e      	b.n	8008160 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10f      	bne.n	8008150 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0210 	bic.w	r2, r2, #16
 800813e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 8306 	beq.w	8008776 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 8088 	beq.w	8008288 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2204      	movs	r2, #4
 800817c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a7a      	ldr	r2, [pc, #488]	; (8008370 <HAL_DMA_IRQHandler+0xa08>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d04a      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a79      	ldr	r2, [pc, #484]	; (8008374 <HAL_DMA_IRQHandler+0xa0c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d045      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a77      	ldr	r2, [pc, #476]	; (8008378 <HAL_DMA_IRQHandler+0xa10>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d040      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a76      	ldr	r2, [pc, #472]	; (800837c <HAL_DMA_IRQHandler+0xa14>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d03b      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a74      	ldr	r2, [pc, #464]	; (8008380 <HAL_DMA_IRQHandler+0xa18>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d036      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a73      	ldr	r2, [pc, #460]	; (8008384 <HAL_DMA_IRQHandler+0xa1c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d031      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a71      	ldr	r2, [pc, #452]	; (8008388 <HAL_DMA_IRQHandler+0xa20>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d02c      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a70      	ldr	r2, [pc, #448]	; (800838c <HAL_DMA_IRQHandler+0xa24>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d027      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a6e      	ldr	r2, [pc, #440]	; (8008390 <HAL_DMA_IRQHandler+0xa28>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d022      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a6d      	ldr	r2, [pc, #436]	; (8008394 <HAL_DMA_IRQHandler+0xa2c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d01d      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a6b      	ldr	r2, [pc, #428]	; (8008398 <HAL_DMA_IRQHandler+0xa30>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d018      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a6a      	ldr	r2, [pc, #424]	; (800839c <HAL_DMA_IRQHandler+0xa34>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d013      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a68      	ldr	r2, [pc, #416]	; (80083a0 <HAL_DMA_IRQHandler+0xa38>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00e      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a67      	ldr	r2, [pc, #412]	; (80083a4 <HAL_DMA_IRQHandler+0xa3c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d009      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a65      	ldr	r2, [pc, #404]	; (80083a8 <HAL_DMA_IRQHandler+0xa40>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d004      	beq.n	8008220 <HAL_DMA_IRQHandler+0x8b8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a64      	ldr	r2, [pc, #400]	; (80083ac <HAL_DMA_IRQHandler+0xa44>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d108      	bne.n	8008232 <HAL_DMA_IRQHandler+0x8ca>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	e007      	b.n	8008242 <HAL_DMA_IRQHandler+0x8da>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0201 	bic.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3301      	adds	r3, #1
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824a:	429a      	cmp	r2, r3
 800824c:	d307      	bcc.n	800825e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1f2      	bne.n	8008242 <HAL_DMA_IRQHandler+0x8da>
 800825c:	e000      	b.n	8008260 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800825e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d004      	beq.n	8008278 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2203      	movs	r2, #3
 8008272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008276:	e003      	b.n	8008280 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8272 	beq.w	8008776 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	4798      	blx	r3
 800829a:	e26c      	b.n	8008776 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a43      	ldr	r2, [pc, #268]	; (80083b0 <HAL_DMA_IRQHandler+0xa48>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d022      	beq.n	80082ec <HAL_DMA_IRQHandler+0x984>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a42      	ldr	r2, [pc, #264]	; (80083b4 <HAL_DMA_IRQHandler+0xa4c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d01d      	beq.n	80082ec <HAL_DMA_IRQHandler+0x984>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a40      	ldr	r2, [pc, #256]	; (80083b8 <HAL_DMA_IRQHandler+0xa50>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d018      	beq.n	80082ec <HAL_DMA_IRQHandler+0x984>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a3f      	ldr	r2, [pc, #252]	; (80083bc <HAL_DMA_IRQHandler+0xa54>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d013      	beq.n	80082ec <HAL_DMA_IRQHandler+0x984>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a3d      	ldr	r2, [pc, #244]	; (80083c0 <HAL_DMA_IRQHandler+0xa58>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d00e      	beq.n	80082ec <HAL_DMA_IRQHandler+0x984>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a3c      	ldr	r2, [pc, #240]	; (80083c4 <HAL_DMA_IRQHandler+0xa5c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d009      	beq.n	80082ec <HAL_DMA_IRQHandler+0x984>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a3a      	ldr	r2, [pc, #232]	; (80083c8 <HAL_DMA_IRQHandler+0xa60>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d004      	beq.n	80082ec <HAL_DMA_IRQHandler+0x984>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a39      	ldr	r2, [pc, #228]	; (80083cc <HAL_DMA_IRQHandler+0xa64>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d101      	bne.n	80082f0 <HAL_DMA_IRQHandler+0x988>
 80082ec:	2301      	movs	r3, #1
 80082ee:	e000      	b.n	80082f2 <HAL_DMA_IRQHandler+0x98a>
 80082f0:	2300      	movs	r3, #0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 823f 	beq.w	8008776 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008304:	f003 031f 	and.w	r3, r3, #31
 8008308:	2204      	movs	r2, #4
 800830a:	409a      	lsls	r2, r3
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	4013      	ands	r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 80cd 	beq.w	80084b0 <HAL_DMA_IRQHandler+0xb48>
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80c7 	beq.w	80084b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008326:	f003 031f 	and.w	r3, r3, #31
 800832a:	2204      	movs	r2, #4
 800832c:	409a      	lsls	r2, r3
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d049      	beq.n	80083d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d109      	bne.n	800835a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 8210 	beq.w	8008770 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008358:	e20a      	b.n	8008770 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 8206 	beq.w	8008770 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800836c:	e200      	b.n	8008770 <HAL_DMA_IRQHandler+0xe08>
 800836e:	bf00      	nop
 8008370:	40020010 	.word	0x40020010
 8008374:	40020028 	.word	0x40020028
 8008378:	40020040 	.word	0x40020040
 800837c:	40020058 	.word	0x40020058
 8008380:	40020070 	.word	0x40020070
 8008384:	40020088 	.word	0x40020088
 8008388:	400200a0 	.word	0x400200a0
 800838c:	400200b8 	.word	0x400200b8
 8008390:	40020410 	.word	0x40020410
 8008394:	40020428 	.word	0x40020428
 8008398:	40020440 	.word	0x40020440
 800839c:	40020458 	.word	0x40020458
 80083a0:	40020470 	.word	0x40020470
 80083a4:	40020488 	.word	0x40020488
 80083a8:	400204a0 	.word	0x400204a0
 80083ac:	400204b8 	.word	0x400204b8
 80083b0:	58025408 	.word	0x58025408
 80083b4:	5802541c 	.word	0x5802541c
 80083b8:	58025430 	.word	0x58025430
 80083bc:	58025444 	.word	0x58025444
 80083c0:	58025458 	.word	0x58025458
 80083c4:	5802546c 	.word	0x5802546c
 80083c8:	58025480 	.word	0x58025480
 80083cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d160      	bne.n	800849c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a7f      	ldr	r2, [pc, #508]	; (80085dc <HAL_DMA_IRQHandler+0xc74>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d04a      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a7d      	ldr	r2, [pc, #500]	; (80085e0 <HAL_DMA_IRQHandler+0xc78>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d045      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a7c      	ldr	r2, [pc, #496]	; (80085e4 <HAL_DMA_IRQHandler+0xc7c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d040      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a7a      	ldr	r2, [pc, #488]	; (80085e8 <HAL_DMA_IRQHandler+0xc80>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d03b      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a79      	ldr	r2, [pc, #484]	; (80085ec <HAL_DMA_IRQHandler+0xc84>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d036      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a77      	ldr	r2, [pc, #476]	; (80085f0 <HAL_DMA_IRQHandler+0xc88>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d031      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a76      	ldr	r2, [pc, #472]	; (80085f4 <HAL_DMA_IRQHandler+0xc8c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d02c      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a74      	ldr	r2, [pc, #464]	; (80085f8 <HAL_DMA_IRQHandler+0xc90>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d027      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a73      	ldr	r2, [pc, #460]	; (80085fc <HAL_DMA_IRQHandler+0xc94>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d022      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a71      	ldr	r2, [pc, #452]	; (8008600 <HAL_DMA_IRQHandler+0xc98>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d01d      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a70      	ldr	r2, [pc, #448]	; (8008604 <HAL_DMA_IRQHandler+0xc9c>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d018      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a6e      	ldr	r2, [pc, #440]	; (8008608 <HAL_DMA_IRQHandler+0xca0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d013      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a6d      	ldr	r2, [pc, #436]	; (800860c <HAL_DMA_IRQHandler+0xca4>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00e      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a6b      	ldr	r2, [pc, #428]	; (8008610 <HAL_DMA_IRQHandler+0xca8>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d009      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a6a      	ldr	r2, [pc, #424]	; (8008614 <HAL_DMA_IRQHandler+0xcac>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d004      	beq.n	800847a <HAL_DMA_IRQHandler+0xb12>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a68      	ldr	r2, [pc, #416]	; (8008618 <HAL_DMA_IRQHandler+0xcb0>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d108      	bne.n	800848c <HAL_DMA_IRQHandler+0xb24>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0208 	bic.w	r2, r2, #8
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	e007      	b.n	800849c <HAL_DMA_IRQHandler+0xb34>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0204 	bic.w	r2, r2, #4
 800849a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 8165 	beq.w	8008770 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084ae:	e15f      	b.n	8008770 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b4:	f003 031f 	and.w	r3, r3, #31
 80084b8:	2202      	movs	r2, #2
 80084ba:	409a      	lsls	r2, r3
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	4013      	ands	r3, r2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 80c5 	beq.w	8008650 <HAL_DMA_IRQHandler+0xce8>
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 80bf 	beq.w	8008650 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d6:	f003 031f 	and.w	r3, r3, #31
 80084da:	2202      	movs	r2, #2
 80084dc:	409a      	lsls	r2, r3
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d018      	beq.n	800851e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 813a 	beq.w	8008774 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008508:	e134      	b.n	8008774 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 8130 	beq.w	8008774 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800851c:	e12a      	b.n	8008774 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f003 0320 	and.w	r3, r3, #32
 8008524:	2b00      	cmp	r3, #0
 8008526:	f040 8089 	bne.w	800863c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a2b      	ldr	r2, [pc, #172]	; (80085dc <HAL_DMA_IRQHandler+0xc74>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d04a      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a29      	ldr	r2, [pc, #164]	; (80085e0 <HAL_DMA_IRQHandler+0xc78>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d045      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a28      	ldr	r2, [pc, #160]	; (80085e4 <HAL_DMA_IRQHandler+0xc7c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d040      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a26      	ldr	r2, [pc, #152]	; (80085e8 <HAL_DMA_IRQHandler+0xc80>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d03b      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a25      	ldr	r2, [pc, #148]	; (80085ec <HAL_DMA_IRQHandler+0xc84>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d036      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a23      	ldr	r2, [pc, #140]	; (80085f0 <HAL_DMA_IRQHandler+0xc88>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d031      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a22      	ldr	r2, [pc, #136]	; (80085f4 <HAL_DMA_IRQHandler+0xc8c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d02c      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a20      	ldr	r2, [pc, #128]	; (80085f8 <HAL_DMA_IRQHandler+0xc90>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d027      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a1f      	ldr	r2, [pc, #124]	; (80085fc <HAL_DMA_IRQHandler+0xc94>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d022      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a1d      	ldr	r2, [pc, #116]	; (8008600 <HAL_DMA_IRQHandler+0xc98>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d01d      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1c      	ldr	r2, [pc, #112]	; (8008604 <HAL_DMA_IRQHandler+0xc9c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d018      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1a      	ldr	r2, [pc, #104]	; (8008608 <HAL_DMA_IRQHandler+0xca0>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d013      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a19      	ldr	r2, [pc, #100]	; (800860c <HAL_DMA_IRQHandler+0xca4>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00e      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a17      	ldr	r2, [pc, #92]	; (8008610 <HAL_DMA_IRQHandler+0xca8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d009      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a16      	ldr	r2, [pc, #88]	; (8008614 <HAL_DMA_IRQHandler+0xcac>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d004      	beq.n	80085ca <HAL_DMA_IRQHandler+0xc62>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a14      	ldr	r2, [pc, #80]	; (8008618 <HAL_DMA_IRQHandler+0xcb0>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d128      	bne.n	800861c <HAL_DMA_IRQHandler+0xcb4>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 0214 	bic.w	r2, r2, #20
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	e027      	b.n	800862c <HAL_DMA_IRQHandler+0xcc4>
 80085dc:	40020010 	.word	0x40020010
 80085e0:	40020028 	.word	0x40020028
 80085e4:	40020040 	.word	0x40020040
 80085e8:	40020058 	.word	0x40020058
 80085ec:	40020070 	.word	0x40020070
 80085f0:	40020088 	.word	0x40020088
 80085f4:	400200a0 	.word	0x400200a0
 80085f8:	400200b8 	.word	0x400200b8
 80085fc:	40020410 	.word	0x40020410
 8008600:	40020428 	.word	0x40020428
 8008604:	40020440 	.word	0x40020440
 8008608:	40020458 	.word	0x40020458
 800860c:	40020470 	.word	0x40020470
 8008610:	40020488 	.word	0x40020488
 8008614:	400204a0 	.word	0x400204a0
 8008618:	400204b8 	.word	0x400204b8
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 020a 	bic.w	r2, r2, #10
 800862a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8097 	beq.w	8008774 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800864e:	e091      	b.n	8008774 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008654:	f003 031f 	and.w	r3, r3, #31
 8008658:	2208      	movs	r2, #8
 800865a:	409a      	lsls	r2, r3
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	4013      	ands	r3, r2
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 8088 	beq.w	8008776 <HAL_DMA_IRQHandler+0xe0e>
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f003 0308 	and.w	r3, r3, #8
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 8082 	beq.w	8008776 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a41      	ldr	r2, [pc, #260]	; (800877c <HAL_DMA_IRQHandler+0xe14>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d04a      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a3f      	ldr	r2, [pc, #252]	; (8008780 <HAL_DMA_IRQHandler+0xe18>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d045      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a3e      	ldr	r2, [pc, #248]	; (8008784 <HAL_DMA_IRQHandler+0xe1c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d040      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a3c      	ldr	r2, [pc, #240]	; (8008788 <HAL_DMA_IRQHandler+0xe20>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d03b      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a3b      	ldr	r2, [pc, #236]	; (800878c <HAL_DMA_IRQHandler+0xe24>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d036      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a39      	ldr	r2, [pc, #228]	; (8008790 <HAL_DMA_IRQHandler+0xe28>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d031      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a38      	ldr	r2, [pc, #224]	; (8008794 <HAL_DMA_IRQHandler+0xe2c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d02c      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a36      	ldr	r2, [pc, #216]	; (8008798 <HAL_DMA_IRQHandler+0xe30>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d027      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a35      	ldr	r2, [pc, #212]	; (800879c <HAL_DMA_IRQHandler+0xe34>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d022      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a33      	ldr	r2, [pc, #204]	; (80087a0 <HAL_DMA_IRQHandler+0xe38>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d01d      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a32      	ldr	r2, [pc, #200]	; (80087a4 <HAL_DMA_IRQHandler+0xe3c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d018      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a30      	ldr	r2, [pc, #192]	; (80087a8 <HAL_DMA_IRQHandler+0xe40>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d013      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a2f      	ldr	r2, [pc, #188]	; (80087ac <HAL_DMA_IRQHandler+0xe44>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00e      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a2d      	ldr	r2, [pc, #180]	; (80087b0 <HAL_DMA_IRQHandler+0xe48>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d009      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a2c      	ldr	r2, [pc, #176]	; (80087b4 <HAL_DMA_IRQHandler+0xe4c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d004      	beq.n	8008712 <HAL_DMA_IRQHandler+0xdaa>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a2a      	ldr	r2, [pc, #168]	; (80087b8 <HAL_DMA_IRQHandler+0xe50>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d108      	bne.n	8008724 <HAL_DMA_IRQHandler+0xdbc>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 021c 	bic.w	r2, r2, #28
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	e007      	b.n	8008734 <HAL_DMA_IRQHandler+0xdcc>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 020e 	bic.w	r2, r2, #14
 8008732:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008738:	f003 031f 	and.w	r3, r3, #31
 800873c:	2201      	movs	r2, #1
 800873e:	409a      	lsls	r2, r3
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875e:	2b00      	cmp	r3, #0
 8008760:	d009      	beq.n	8008776 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	4798      	blx	r3
 800876a:	e004      	b.n	8008776 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800876c:	bf00      	nop
 800876e:	e002      	b.n	8008776 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008770:	bf00      	nop
 8008772:	e000      	b.n	8008776 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008774:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008776:	3728      	adds	r7, #40	; 0x28
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40020010 	.word	0x40020010
 8008780:	40020028 	.word	0x40020028
 8008784:	40020040 	.word	0x40020040
 8008788:	40020058 	.word	0x40020058
 800878c:	40020070 	.word	0x40020070
 8008790:	40020088 	.word	0x40020088
 8008794:	400200a0 	.word	0x400200a0
 8008798:	400200b8 	.word	0x400200b8
 800879c:	40020410 	.word	0x40020410
 80087a0:	40020428 	.word	0x40020428
 80087a4:	40020440 	.word	0x40020440
 80087a8:	40020458 	.word	0x40020458
 80087ac:	40020470 	.word	0x40020470
 80087b0:	40020488 	.word	0x40020488
 80087b4:	400204a0 	.word	0x400204a0
 80087b8:	400204b8 	.word	0x400204b8

080087bc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a7f      	ldr	r2, [pc, #508]	; (80089f0 <DMA_SetConfig+0x21c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d072      	beq.n	80088de <DMA_SetConfig+0x10a>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a7d      	ldr	r2, [pc, #500]	; (80089f4 <DMA_SetConfig+0x220>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d06d      	beq.n	80088de <DMA_SetConfig+0x10a>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a7c      	ldr	r2, [pc, #496]	; (80089f8 <DMA_SetConfig+0x224>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d068      	beq.n	80088de <DMA_SetConfig+0x10a>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a7a      	ldr	r2, [pc, #488]	; (80089fc <DMA_SetConfig+0x228>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d063      	beq.n	80088de <DMA_SetConfig+0x10a>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a79      	ldr	r2, [pc, #484]	; (8008a00 <DMA_SetConfig+0x22c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d05e      	beq.n	80088de <DMA_SetConfig+0x10a>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a77      	ldr	r2, [pc, #476]	; (8008a04 <DMA_SetConfig+0x230>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d059      	beq.n	80088de <DMA_SetConfig+0x10a>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a76      	ldr	r2, [pc, #472]	; (8008a08 <DMA_SetConfig+0x234>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d054      	beq.n	80088de <DMA_SetConfig+0x10a>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a74      	ldr	r2, [pc, #464]	; (8008a0c <DMA_SetConfig+0x238>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d04f      	beq.n	80088de <DMA_SetConfig+0x10a>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a73      	ldr	r2, [pc, #460]	; (8008a10 <DMA_SetConfig+0x23c>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d04a      	beq.n	80088de <DMA_SetConfig+0x10a>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a71      	ldr	r2, [pc, #452]	; (8008a14 <DMA_SetConfig+0x240>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d045      	beq.n	80088de <DMA_SetConfig+0x10a>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a70      	ldr	r2, [pc, #448]	; (8008a18 <DMA_SetConfig+0x244>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d040      	beq.n	80088de <DMA_SetConfig+0x10a>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a6e      	ldr	r2, [pc, #440]	; (8008a1c <DMA_SetConfig+0x248>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d03b      	beq.n	80088de <DMA_SetConfig+0x10a>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a6d      	ldr	r2, [pc, #436]	; (8008a20 <DMA_SetConfig+0x24c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d036      	beq.n	80088de <DMA_SetConfig+0x10a>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a6b      	ldr	r2, [pc, #428]	; (8008a24 <DMA_SetConfig+0x250>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d031      	beq.n	80088de <DMA_SetConfig+0x10a>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a6a      	ldr	r2, [pc, #424]	; (8008a28 <DMA_SetConfig+0x254>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d02c      	beq.n	80088de <DMA_SetConfig+0x10a>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a68      	ldr	r2, [pc, #416]	; (8008a2c <DMA_SetConfig+0x258>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d027      	beq.n	80088de <DMA_SetConfig+0x10a>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a67      	ldr	r2, [pc, #412]	; (8008a30 <DMA_SetConfig+0x25c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d022      	beq.n	80088de <DMA_SetConfig+0x10a>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a65      	ldr	r2, [pc, #404]	; (8008a34 <DMA_SetConfig+0x260>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d01d      	beq.n	80088de <DMA_SetConfig+0x10a>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a64      	ldr	r2, [pc, #400]	; (8008a38 <DMA_SetConfig+0x264>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d018      	beq.n	80088de <DMA_SetConfig+0x10a>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a62      	ldr	r2, [pc, #392]	; (8008a3c <DMA_SetConfig+0x268>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d013      	beq.n	80088de <DMA_SetConfig+0x10a>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a61      	ldr	r2, [pc, #388]	; (8008a40 <DMA_SetConfig+0x26c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00e      	beq.n	80088de <DMA_SetConfig+0x10a>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a5f      	ldr	r2, [pc, #380]	; (8008a44 <DMA_SetConfig+0x270>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d009      	beq.n	80088de <DMA_SetConfig+0x10a>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a5e      	ldr	r2, [pc, #376]	; (8008a48 <DMA_SetConfig+0x274>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d004      	beq.n	80088de <DMA_SetConfig+0x10a>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a5c      	ldr	r2, [pc, #368]	; (8008a4c <DMA_SetConfig+0x278>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d101      	bne.n	80088e2 <DMA_SetConfig+0x10e>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <DMA_SetConfig+0x110>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00d      	beq.n	8008904 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d004      	beq.n	8008904 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008902:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a39      	ldr	r2, [pc, #228]	; (80089f0 <DMA_SetConfig+0x21c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d04a      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a38      	ldr	r2, [pc, #224]	; (80089f4 <DMA_SetConfig+0x220>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d045      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a36      	ldr	r2, [pc, #216]	; (80089f8 <DMA_SetConfig+0x224>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d040      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a35      	ldr	r2, [pc, #212]	; (80089fc <DMA_SetConfig+0x228>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d03b      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a33      	ldr	r2, [pc, #204]	; (8008a00 <DMA_SetConfig+0x22c>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d036      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a32      	ldr	r2, [pc, #200]	; (8008a04 <DMA_SetConfig+0x230>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d031      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a30      	ldr	r2, [pc, #192]	; (8008a08 <DMA_SetConfig+0x234>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d02c      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a2f      	ldr	r2, [pc, #188]	; (8008a0c <DMA_SetConfig+0x238>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d027      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a2d      	ldr	r2, [pc, #180]	; (8008a10 <DMA_SetConfig+0x23c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d022      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a2c      	ldr	r2, [pc, #176]	; (8008a14 <DMA_SetConfig+0x240>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d01d      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a2a      	ldr	r2, [pc, #168]	; (8008a18 <DMA_SetConfig+0x244>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d018      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a29      	ldr	r2, [pc, #164]	; (8008a1c <DMA_SetConfig+0x248>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d013      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a27      	ldr	r2, [pc, #156]	; (8008a20 <DMA_SetConfig+0x24c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00e      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a26      	ldr	r2, [pc, #152]	; (8008a24 <DMA_SetConfig+0x250>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d009      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a24      	ldr	r2, [pc, #144]	; (8008a28 <DMA_SetConfig+0x254>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d004      	beq.n	80089a4 <DMA_SetConfig+0x1d0>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a23      	ldr	r2, [pc, #140]	; (8008a2c <DMA_SetConfig+0x258>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d101      	bne.n	80089a8 <DMA_SetConfig+0x1d4>
 80089a4:	2301      	movs	r3, #1
 80089a6:	e000      	b.n	80089aa <DMA_SetConfig+0x1d6>
 80089a8:	2300      	movs	r3, #0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d059      	beq.n	8008a62 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b2:	f003 031f 	and.w	r3, r3, #31
 80089b6:	223f      	movs	r2, #63	; 0x3f
 80089b8:	409a      	lsls	r2, r3
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d138      	bne.n	8008a50 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80089ee:	e086      	b.n	8008afe <DMA_SetConfig+0x32a>
 80089f0:	40020010 	.word	0x40020010
 80089f4:	40020028 	.word	0x40020028
 80089f8:	40020040 	.word	0x40020040
 80089fc:	40020058 	.word	0x40020058
 8008a00:	40020070 	.word	0x40020070
 8008a04:	40020088 	.word	0x40020088
 8008a08:	400200a0 	.word	0x400200a0
 8008a0c:	400200b8 	.word	0x400200b8
 8008a10:	40020410 	.word	0x40020410
 8008a14:	40020428 	.word	0x40020428
 8008a18:	40020440 	.word	0x40020440
 8008a1c:	40020458 	.word	0x40020458
 8008a20:	40020470 	.word	0x40020470
 8008a24:	40020488 	.word	0x40020488
 8008a28:	400204a0 	.word	0x400204a0
 8008a2c:	400204b8 	.word	0x400204b8
 8008a30:	58025408 	.word	0x58025408
 8008a34:	5802541c 	.word	0x5802541c
 8008a38:	58025430 	.word	0x58025430
 8008a3c:	58025444 	.word	0x58025444
 8008a40:	58025458 	.word	0x58025458
 8008a44:	5802546c 	.word	0x5802546c
 8008a48:	58025480 	.word	0x58025480
 8008a4c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	60da      	str	r2, [r3, #12]
}
 8008a60:	e04d      	b.n	8008afe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a29      	ldr	r2, [pc, #164]	; (8008b0c <DMA_SetConfig+0x338>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d022      	beq.n	8008ab2 <DMA_SetConfig+0x2de>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a27      	ldr	r2, [pc, #156]	; (8008b10 <DMA_SetConfig+0x33c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d01d      	beq.n	8008ab2 <DMA_SetConfig+0x2de>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a26      	ldr	r2, [pc, #152]	; (8008b14 <DMA_SetConfig+0x340>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d018      	beq.n	8008ab2 <DMA_SetConfig+0x2de>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a24      	ldr	r2, [pc, #144]	; (8008b18 <DMA_SetConfig+0x344>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d013      	beq.n	8008ab2 <DMA_SetConfig+0x2de>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a23      	ldr	r2, [pc, #140]	; (8008b1c <DMA_SetConfig+0x348>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00e      	beq.n	8008ab2 <DMA_SetConfig+0x2de>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a21      	ldr	r2, [pc, #132]	; (8008b20 <DMA_SetConfig+0x34c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d009      	beq.n	8008ab2 <DMA_SetConfig+0x2de>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a20      	ldr	r2, [pc, #128]	; (8008b24 <DMA_SetConfig+0x350>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d004      	beq.n	8008ab2 <DMA_SetConfig+0x2de>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a1e      	ldr	r2, [pc, #120]	; (8008b28 <DMA_SetConfig+0x354>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d101      	bne.n	8008ab6 <DMA_SetConfig+0x2e2>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e000      	b.n	8008ab8 <DMA_SetConfig+0x2e4>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d020      	beq.n	8008afe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac0:	f003 031f 	and.w	r3, r3, #31
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	409a      	lsls	r2, r3
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	2b40      	cmp	r3, #64	; 0x40
 8008ada:	d108      	bne.n	8008aee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	60da      	str	r2, [r3, #12]
}
 8008aec:	e007      	b.n	8008afe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	60da      	str	r2, [r3, #12]
}
 8008afe:	bf00      	nop
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	58025408 	.word	0x58025408
 8008b10:	5802541c 	.word	0x5802541c
 8008b14:	58025430 	.word	0x58025430
 8008b18:	58025444 	.word	0x58025444
 8008b1c:	58025458 	.word	0x58025458
 8008b20:	5802546c 	.word	0x5802546c
 8008b24:	58025480 	.word	0x58025480
 8008b28:	58025494 	.word	0x58025494

08008b2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a42      	ldr	r2, [pc, #264]	; (8008c44 <DMA_CalcBaseAndBitshift+0x118>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d04a      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a41      	ldr	r2, [pc, #260]	; (8008c48 <DMA_CalcBaseAndBitshift+0x11c>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d045      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a3f      	ldr	r2, [pc, #252]	; (8008c4c <DMA_CalcBaseAndBitshift+0x120>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d040      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a3e      	ldr	r2, [pc, #248]	; (8008c50 <DMA_CalcBaseAndBitshift+0x124>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d03b      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a3c      	ldr	r2, [pc, #240]	; (8008c54 <DMA_CalcBaseAndBitshift+0x128>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d036      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a3b      	ldr	r2, [pc, #236]	; (8008c58 <DMA_CalcBaseAndBitshift+0x12c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d031      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a39      	ldr	r2, [pc, #228]	; (8008c5c <DMA_CalcBaseAndBitshift+0x130>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d02c      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a38      	ldr	r2, [pc, #224]	; (8008c60 <DMA_CalcBaseAndBitshift+0x134>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d027      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a36      	ldr	r2, [pc, #216]	; (8008c64 <DMA_CalcBaseAndBitshift+0x138>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d022      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a35      	ldr	r2, [pc, #212]	; (8008c68 <DMA_CalcBaseAndBitshift+0x13c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d01d      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a33      	ldr	r2, [pc, #204]	; (8008c6c <DMA_CalcBaseAndBitshift+0x140>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d018      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a32      	ldr	r2, [pc, #200]	; (8008c70 <DMA_CalcBaseAndBitshift+0x144>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d013      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a30      	ldr	r2, [pc, #192]	; (8008c74 <DMA_CalcBaseAndBitshift+0x148>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d00e      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a2f      	ldr	r2, [pc, #188]	; (8008c78 <DMA_CalcBaseAndBitshift+0x14c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d009      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a2d      	ldr	r2, [pc, #180]	; (8008c7c <DMA_CalcBaseAndBitshift+0x150>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d004      	beq.n	8008bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a2c      	ldr	r2, [pc, #176]	; (8008c80 <DMA_CalcBaseAndBitshift+0x154>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d101      	bne.n	8008bd8 <DMA_CalcBaseAndBitshift+0xac>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <DMA_CalcBaseAndBitshift+0xae>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d024      	beq.n	8008c28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	3b10      	subs	r3, #16
 8008be6:	4a27      	ldr	r2, [pc, #156]	; (8008c84 <DMA_CalcBaseAndBitshift+0x158>)
 8008be8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bec:	091b      	lsrs	r3, r3, #4
 8008bee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	4a24      	ldr	r2, [pc, #144]	; (8008c88 <DMA_CalcBaseAndBitshift+0x15c>)
 8008bf8:	5cd3      	ldrb	r3, [r2, r3]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d908      	bls.n	8008c18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	4b1f      	ldr	r3, [pc, #124]	; (8008c8c <DMA_CalcBaseAndBitshift+0x160>)
 8008c0e:	4013      	ands	r3, r2
 8008c10:	1d1a      	adds	r2, r3, #4
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	659a      	str	r2, [r3, #88]	; 0x58
 8008c16:	e00d      	b.n	8008c34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4b1b      	ldr	r3, [pc, #108]	; (8008c8c <DMA_CalcBaseAndBitshift+0x160>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	6593      	str	r3, [r2, #88]	; 0x58
 8008c26:	e005      	b.n	8008c34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	40020010 	.word	0x40020010
 8008c48:	40020028 	.word	0x40020028
 8008c4c:	40020040 	.word	0x40020040
 8008c50:	40020058 	.word	0x40020058
 8008c54:	40020070 	.word	0x40020070
 8008c58:	40020088 	.word	0x40020088
 8008c5c:	400200a0 	.word	0x400200a0
 8008c60:	400200b8 	.word	0x400200b8
 8008c64:	40020410 	.word	0x40020410
 8008c68:	40020428 	.word	0x40020428
 8008c6c:	40020440 	.word	0x40020440
 8008c70:	40020458 	.word	0x40020458
 8008c74:	40020470 	.word	0x40020470
 8008c78:	40020488 	.word	0x40020488
 8008c7c:	400204a0 	.word	0x400204a0
 8008c80:	400204b8 	.word	0x400204b8
 8008c84:	aaaaaaab 	.word	0xaaaaaaab
 8008c88:	080170c4 	.word	0x080170c4
 8008c8c:	fffffc00 	.word	0xfffffc00

08008c90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d120      	bne.n	8008ce6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d858      	bhi.n	8008d5e <DMA_CheckFifoParam+0xce>
 8008cac:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <DMA_CheckFifoParam+0x24>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008cc5 	.word	0x08008cc5
 8008cb8:	08008cd7 	.word	0x08008cd7
 8008cbc:	08008cc5 	.word	0x08008cc5
 8008cc0:	08008d5f 	.word	0x08008d5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d048      	beq.n	8008d62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cd4:	e045      	b.n	8008d62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008cde:	d142      	bne.n	8008d66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ce4:	e03f      	b.n	8008d66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cee:	d123      	bne.n	8008d38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d838      	bhi.n	8008d6a <DMA_CheckFifoParam+0xda>
 8008cf8:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <DMA_CheckFifoParam+0x70>)
 8008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfe:	bf00      	nop
 8008d00:	08008d11 	.word	0x08008d11
 8008d04:	08008d17 	.word	0x08008d17
 8008d08:	08008d11 	.word	0x08008d11
 8008d0c:	08008d29 	.word	0x08008d29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	73fb      	strb	r3, [r7, #15]
        break;
 8008d14:	e030      	b.n	8008d78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d025      	beq.n	8008d6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d26:	e022      	b.n	8008d6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d30:	d11f      	bne.n	8008d72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d36:	e01c      	b.n	8008d72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d902      	bls.n	8008d46 <DMA_CheckFifoParam+0xb6>
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d003      	beq.n	8008d4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008d44:	e018      	b.n	8008d78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	73fb      	strb	r3, [r7, #15]
        break;
 8008d4a:	e015      	b.n	8008d78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00e      	beq.n	8008d76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5c:	e00b      	b.n	8008d76 <DMA_CheckFifoParam+0xe6>
        break;
 8008d5e:	bf00      	nop
 8008d60:	e00a      	b.n	8008d78 <DMA_CheckFifoParam+0xe8>
        break;
 8008d62:	bf00      	nop
 8008d64:	e008      	b.n	8008d78 <DMA_CheckFifoParam+0xe8>
        break;
 8008d66:	bf00      	nop
 8008d68:	e006      	b.n	8008d78 <DMA_CheckFifoParam+0xe8>
        break;
 8008d6a:	bf00      	nop
 8008d6c:	e004      	b.n	8008d78 <DMA_CheckFifoParam+0xe8>
        break;
 8008d6e:	bf00      	nop
 8008d70:	e002      	b.n	8008d78 <DMA_CheckFifoParam+0xe8>
        break;
 8008d72:	bf00      	nop
 8008d74:	e000      	b.n	8008d78 <DMA_CheckFifoParam+0xe8>
    break;
 8008d76:	bf00      	nop
    }
  }

  return status;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop

08008d88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a38      	ldr	r2, [pc, #224]	; (8008e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d022      	beq.n	8008de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a36      	ldr	r2, [pc, #216]	; (8008e80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d01d      	beq.n	8008de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a35      	ldr	r2, [pc, #212]	; (8008e84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d018      	beq.n	8008de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a33      	ldr	r2, [pc, #204]	; (8008e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d013      	beq.n	8008de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a32      	ldr	r2, [pc, #200]	; (8008e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d00e      	beq.n	8008de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a30      	ldr	r2, [pc, #192]	; (8008e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d009      	beq.n	8008de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a2f      	ldr	r2, [pc, #188]	; (8008e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d004      	beq.n	8008de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a2d      	ldr	r2, [pc, #180]	; (8008e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d101      	bne.n	8008dea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008dea:	2300      	movs	r3, #0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01a      	beq.n	8008e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	3b08      	subs	r3, #8
 8008df8:	4a28      	ldr	r2, [pc, #160]	; (8008e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfe:	091b      	lsrs	r3, r3, #4
 8008e00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	4b26      	ldr	r3, [pc, #152]	; (8008ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a24      	ldr	r2, [pc, #144]	; (8008ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008e14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f003 031f 	and.w	r3, r3, #31
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	409a      	lsls	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008e24:	e024      	b.n	8008e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	3b10      	subs	r3, #16
 8008e2e:	4a1e      	ldr	r2, [pc, #120]	; (8008ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008e30:	fba2 2303 	umull	r2, r3, r2, r3
 8008e34:	091b      	lsrs	r3, r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4a1c      	ldr	r2, [pc, #112]	; (8008eac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d806      	bhi.n	8008e4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	4a1b      	ldr	r2, [pc, #108]	; (8008eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d902      	bls.n	8008e4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	4b18      	ldr	r3, [pc, #96]	; (8008eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	461a      	mov	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a16      	ldr	r2, [pc, #88]	; (8008eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008e60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f003 031f 	and.w	r3, r3, #31
 8008e68:	2201      	movs	r2, #1
 8008e6a:	409a      	lsls	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e70:	bf00      	nop
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	58025408 	.word	0x58025408
 8008e80:	5802541c 	.word	0x5802541c
 8008e84:	58025430 	.word	0x58025430
 8008e88:	58025444 	.word	0x58025444
 8008e8c:	58025458 	.word	0x58025458
 8008e90:	5802546c 	.word	0x5802546c
 8008e94:	58025480 	.word	0x58025480
 8008e98:	58025494 	.word	0x58025494
 8008e9c:	cccccccd 	.word	0xcccccccd
 8008ea0:	16009600 	.word	0x16009600
 8008ea4:	58025880 	.word	0x58025880
 8008ea8:	aaaaaaab 	.word	0xaaaaaaab
 8008eac:	400204b8 	.word	0x400204b8
 8008eb0:	4002040f 	.word	0x4002040f
 8008eb4:	10008200 	.word	0x10008200
 8008eb8:	40020880 	.word	0x40020880

08008ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d04a      	beq.n	8008f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b08      	cmp	r3, #8
 8008ed6:	d847      	bhi.n	8008f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a25      	ldr	r2, [pc, #148]	; (8008f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d022      	beq.n	8008f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a24      	ldr	r2, [pc, #144]	; (8008f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d01d      	beq.n	8008f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a22      	ldr	r2, [pc, #136]	; (8008f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d018      	beq.n	8008f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a21      	ldr	r2, [pc, #132]	; (8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d013      	beq.n	8008f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a1f      	ldr	r2, [pc, #124]	; (8008f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d00e      	beq.n	8008f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d009      	beq.n	8008f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a1c      	ldr	r2, [pc, #112]	; (8008f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d004      	beq.n	8008f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a1b      	ldr	r2, [pc, #108]	; (8008f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d101      	bne.n	8008f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e000      	b.n	8008f2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4b17      	ldr	r3, [pc, #92]	; (8008f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a15      	ldr	r2, [pc, #84]	; (8008f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008f44:	671a      	str	r2, [r3, #112]	; 0x70
 8008f46:	e009      	b.n	8008f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4b14      	ldr	r3, [pc, #80]	; (8008f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	461a      	mov	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a11      	ldr	r2, [pc, #68]	; (8008fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008f5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	2201      	movs	r2, #1
 8008f62:	409a      	lsls	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008f68:	bf00      	nop
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	58025408 	.word	0x58025408
 8008f78:	5802541c 	.word	0x5802541c
 8008f7c:	58025430 	.word	0x58025430
 8008f80:	58025444 	.word	0x58025444
 8008f84:	58025458 	.word	0x58025458
 8008f88:	5802546c 	.word	0x5802546c
 8008f8c:	58025480 	.word	0x58025480
 8008f90:	58025494 	.word	0x58025494
 8008f94:	1600963f 	.word	0x1600963f
 8008f98:	58025940 	.word	0x58025940
 8008f9c:	1000823f 	.word	0x1000823f
 8008fa0:	40020940 	.word	0x40020940

08008fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b089      	sub	sp, #36	; 0x24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008fb2:	4b89      	ldr	r3, [pc, #548]	; (80091d8 <HAL_GPIO_Init+0x234>)
 8008fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fb6:	e194      	b.n	80092e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 8186 	beq.w	80092dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f003 0303 	and.w	r3, r3, #3
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d005      	beq.n	8008fe8 <HAL_GPIO_Init+0x44>
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d130      	bne.n	800904a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	2203      	movs	r2, #3
 8008ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff8:	43db      	mvns	r3, r3
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	69ba      	ldr	r2, [r7, #24]
 800900e:	4313      	orrs	r3, r2
 8009010:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800901e:	2201      	movs	r2, #1
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	fa02 f303 	lsl.w	r3, r2, r3
 8009026:	43db      	mvns	r3, r3
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	4013      	ands	r3, r2
 800902c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	091b      	lsrs	r3, r3, #4
 8009034:	f003 0201 	and.w	r2, r3, #1
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	fa02 f303 	lsl.w	r3, r2, r3
 800903e:	69ba      	ldr	r2, [r7, #24]
 8009040:	4313      	orrs	r3, r2
 8009042:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f003 0303 	and.w	r3, r3, #3
 8009052:	2b03      	cmp	r3, #3
 8009054:	d017      	beq.n	8009086 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	2203      	movs	r2, #3
 8009062:	fa02 f303 	lsl.w	r3, r2, r3
 8009066:	43db      	mvns	r3, r3
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	4013      	ands	r3, r2
 800906c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	689a      	ldr	r2, [r3, #8]
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	4313      	orrs	r3, r2
 800907e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b02      	cmp	r3, #2
 8009090:	d123      	bne.n	80090da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	08da      	lsrs	r2, r3, #3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3208      	adds	r2, #8
 800909a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	220f      	movs	r2, #15
 80090aa:	fa02 f303 	lsl.w	r3, r2, r3
 80090ae:	43db      	mvns	r3, r3
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	4013      	ands	r3, r2
 80090b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	691a      	ldr	r2, [r3, #16]
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	f003 0307 	and.w	r3, r3, #7
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	fa02 f303 	lsl.w	r3, r2, r3
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	08da      	lsrs	r2, r3, #3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3208      	adds	r2, #8
 80090d4:	69b9      	ldr	r1, [r7, #24]
 80090d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	2203      	movs	r2, #3
 80090e6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ea:	43db      	mvns	r3, r3
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	4013      	ands	r3, r2
 80090f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f003 0203 	and.w	r2, r3, #3
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	4313      	orrs	r3, r2
 8009106:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	69ba      	ldr	r2, [r7, #24]
 800910c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 80e0 	beq.w	80092dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800911c:	4b2f      	ldr	r3, [pc, #188]	; (80091dc <HAL_GPIO_Init+0x238>)
 800911e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009122:	4a2e      	ldr	r2, [pc, #184]	; (80091dc <HAL_GPIO_Init+0x238>)
 8009124:	f043 0302 	orr.w	r3, r3, #2
 8009128:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800912c:	4b2b      	ldr	r3, [pc, #172]	; (80091dc <HAL_GPIO_Init+0x238>)
 800912e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800913a:	4a29      	ldr	r2, [pc, #164]	; (80091e0 <HAL_GPIO_Init+0x23c>)
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	089b      	lsrs	r3, r3, #2
 8009140:	3302      	adds	r3, #2
 8009142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	220f      	movs	r2, #15
 8009152:	fa02 f303 	lsl.w	r3, r2, r3
 8009156:	43db      	mvns	r3, r3
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	4013      	ands	r3, r2
 800915c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a20      	ldr	r2, [pc, #128]	; (80091e4 <HAL_GPIO_Init+0x240>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d052      	beq.n	800920c <HAL_GPIO_Init+0x268>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a1f      	ldr	r2, [pc, #124]	; (80091e8 <HAL_GPIO_Init+0x244>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d031      	beq.n	80091d2 <HAL_GPIO_Init+0x22e>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a1e      	ldr	r2, [pc, #120]	; (80091ec <HAL_GPIO_Init+0x248>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d02b      	beq.n	80091ce <HAL_GPIO_Init+0x22a>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a1d      	ldr	r2, [pc, #116]	; (80091f0 <HAL_GPIO_Init+0x24c>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d025      	beq.n	80091ca <HAL_GPIO_Init+0x226>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a1c      	ldr	r2, [pc, #112]	; (80091f4 <HAL_GPIO_Init+0x250>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d01f      	beq.n	80091c6 <HAL_GPIO_Init+0x222>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a1b      	ldr	r2, [pc, #108]	; (80091f8 <HAL_GPIO_Init+0x254>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d019      	beq.n	80091c2 <HAL_GPIO_Init+0x21e>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a1a      	ldr	r2, [pc, #104]	; (80091fc <HAL_GPIO_Init+0x258>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d013      	beq.n	80091be <HAL_GPIO_Init+0x21a>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a19      	ldr	r2, [pc, #100]	; (8009200 <HAL_GPIO_Init+0x25c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00d      	beq.n	80091ba <HAL_GPIO_Init+0x216>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a18      	ldr	r2, [pc, #96]	; (8009204 <HAL_GPIO_Init+0x260>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d007      	beq.n	80091b6 <HAL_GPIO_Init+0x212>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a17      	ldr	r2, [pc, #92]	; (8009208 <HAL_GPIO_Init+0x264>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d101      	bne.n	80091b2 <HAL_GPIO_Init+0x20e>
 80091ae:	2309      	movs	r3, #9
 80091b0:	e02d      	b.n	800920e <HAL_GPIO_Init+0x26a>
 80091b2:	230a      	movs	r3, #10
 80091b4:	e02b      	b.n	800920e <HAL_GPIO_Init+0x26a>
 80091b6:	2308      	movs	r3, #8
 80091b8:	e029      	b.n	800920e <HAL_GPIO_Init+0x26a>
 80091ba:	2307      	movs	r3, #7
 80091bc:	e027      	b.n	800920e <HAL_GPIO_Init+0x26a>
 80091be:	2306      	movs	r3, #6
 80091c0:	e025      	b.n	800920e <HAL_GPIO_Init+0x26a>
 80091c2:	2305      	movs	r3, #5
 80091c4:	e023      	b.n	800920e <HAL_GPIO_Init+0x26a>
 80091c6:	2304      	movs	r3, #4
 80091c8:	e021      	b.n	800920e <HAL_GPIO_Init+0x26a>
 80091ca:	2303      	movs	r3, #3
 80091cc:	e01f      	b.n	800920e <HAL_GPIO_Init+0x26a>
 80091ce:	2302      	movs	r3, #2
 80091d0:	e01d      	b.n	800920e <HAL_GPIO_Init+0x26a>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e01b      	b.n	800920e <HAL_GPIO_Init+0x26a>
 80091d6:	bf00      	nop
 80091d8:	58000080 	.word	0x58000080
 80091dc:	58024400 	.word	0x58024400
 80091e0:	58000400 	.word	0x58000400
 80091e4:	58020000 	.word	0x58020000
 80091e8:	58020400 	.word	0x58020400
 80091ec:	58020800 	.word	0x58020800
 80091f0:	58020c00 	.word	0x58020c00
 80091f4:	58021000 	.word	0x58021000
 80091f8:	58021400 	.word	0x58021400
 80091fc:	58021800 	.word	0x58021800
 8009200:	58021c00 	.word	0x58021c00
 8009204:	58022000 	.word	0x58022000
 8009208:	58022400 	.word	0x58022400
 800920c:	2300      	movs	r3, #0
 800920e:	69fa      	ldr	r2, [r7, #28]
 8009210:	f002 0203 	and.w	r2, r2, #3
 8009214:	0092      	lsls	r2, r2, #2
 8009216:	4093      	lsls	r3, r2
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	4313      	orrs	r3, r2
 800921c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800921e:	4938      	ldr	r1, [pc, #224]	; (8009300 <HAL_GPIO_Init+0x35c>)
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	089b      	lsrs	r3, r3, #2
 8009224:	3302      	adds	r3, #2
 8009226:	69ba      	ldr	r2, [r7, #24]
 8009228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800922c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	43db      	mvns	r3, r3
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	4013      	ands	r3, r2
 800923c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	4313      	orrs	r3, r2
 8009250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800925a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	43db      	mvns	r3, r3
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	4013      	ands	r3, r2
 800926a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	4313      	orrs	r3, r2
 800927e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	43db      	mvns	r3, r3
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	4013      	ands	r3, r2
 8009296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	43db      	mvns	r3, r3
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	4013      	ands	r3, r2
 80092c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	3301      	adds	r3, #1
 80092e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	fa22 f303 	lsr.w	r3, r2, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f47f ae63 	bne.w	8008fb8 <HAL_GPIO_Init+0x14>
  }
}
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	3724      	adds	r7, #36	; 0x24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	58000400 	.word	0x58000400

08009304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	887b      	ldrh	r3, [r7, #2]
 8009316:	4013      	ands	r3, r2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800931c:	2301      	movs	r3, #1
 800931e:	73fb      	strb	r3, [r7, #15]
 8009320:	e001      	b.n	8009326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	807b      	strh	r3, [r7, #2]
 8009340:	4613      	mov	r3, r2
 8009342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009344:	787b      	ldrb	r3, [r7, #1]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800934a:	887a      	ldrh	r2, [r7, #2]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009350:	e003      	b.n	800935a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009352:	887b      	ldrh	r3, [r7, #2]
 8009354:	041a      	lsls	r2, r3, #16
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	619a      	str	r2, [r3, #24]
}
 800935a:	bf00      	nop
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
	...

08009368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e08b      	b.n	8009492 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d106      	bne.n	8009394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7f8 f81e 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2224      	movs	r2, #36	; 0x24
 8009398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0201 	bic.w	r2, r2, #1
 80093aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d107      	bne.n	80093e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689a      	ldr	r2, [r3, #8]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093de:	609a      	str	r2, [r3, #8]
 80093e0:	e006      	b.n	80093f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689a      	ldr	r2, [r3, #8]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80093ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d108      	bne.n	800940a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009406:	605a      	str	r2, [r3, #4]
 8009408:	e007      	b.n	800941a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009418:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6859      	ldr	r1, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	4b1d      	ldr	r3, [pc, #116]	; (800949c <HAL_I2C_Init+0x134>)
 8009426:	430b      	orrs	r3, r1
 8009428:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68da      	ldr	r2, [r3, #12]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009438:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	691a      	ldr	r2, [r3, #16]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	69d9      	ldr	r1, [r3, #28]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a1a      	ldr	r2, [r3, #32]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f042 0201 	orr.w	r2, r2, #1
 8009472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	02008000 	.word	0x02008000

080094a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af02      	add	r7, sp, #8
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	607a      	str	r2, [r7, #4]
 80094aa:	461a      	mov	r2, r3
 80094ac:	460b      	mov	r3, r1
 80094ae:	817b      	strh	r3, [r7, #10]
 80094b0:	4613      	mov	r3, r2
 80094b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b20      	cmp	r3, #32
 80094be:	f040 80fd 	bne.w	80096bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_I2C_Master_Transmit+0x30>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e0f6      	b.n	80096be <HAL_I2C_Master_Transmit+0x21e>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094d8:	f7fa fdf4 	bl	80040c4 <HAL_GetTick>
 80094dc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	2319      	movs	r3, #25
 80094e4:	2201      	movs	r2, #1
 80094e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 fa0a 	bl	8009904 <I2C_WaitOnFlagUntilTimeout>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e0e1      	b.n	80096be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2221      	movs	r2, #33	; 0x21
 80094fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2210      	movs	r2, #16
 8009506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	893a      	ldrh	r2, [r7, #8]
 800951a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009526:	b29b      	uxth	r3, r3
 8009528:	2bff      	cmp	r3, #255	; 0xff
 800952a:	d906      	bls.n	800953a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	22ff      	movs	r2, #255	; 0xff
 8009530:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009532:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009536:	617b      	str	r3, [r7, #20]
 8009538:	e007      	b.n	800954a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800953e:	b29a      	uxth	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009548:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954e:	2b00      	cmp	r3, #0
 8009550:	d024      	beq.n	800959c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956c:	b29b      	uxth	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	b29a      	uxth	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957a:	3b01      	subs	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009586:	b2db      	uxtb	r3, r3
 8009588:	3301      	adds	r3, #1
 800958a:	b2da      	uxtb	r2, r3
 800958c:	8979      	ldrh	r1, [r7, #10]
 800958e:	4b4e      	ldr	r3, [pc, #312]	; (80096c8 <HAL_I2C_Master_Transmit+0x228>)
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 fc05 	bl	8009da4 <I2C_TransferConfig>
 800959a:	e066      	b.n	800966a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	8979      	ldrh	r1, [r7, #10]
 80095a4:	4b48      	ldr	r3, [pc, #288]	; (80096c8 <HAL_I2C_Master_Transmit+0x228>)
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 fbfa 	bl	8009da4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80095b0:	e05b      	b.n	800966a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	6a39      	ldr	r1, [r7, #32]
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 f9fd 	bl	80099b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e07b      	b.n	80096be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	781a      	ldrb	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d034      	beq.n	800966a <HAL_I2C_Master_Transmit+0x1ca>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009604:	2b00      	cmp	r3, #0
 8009606:	d130      	bne.n	800966a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	2200      	movs	r2, #0
 8009610:	2180      	movs	r1, #128	; 0x80
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 f976 	bl	8009904 <I2C_WaitOnFlagUntilTimeout>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e04d      	b.n	80096be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009626:	b29b      	uxth	r3, r3
 8009628:	2bff      	cmp	r3, #255	; 0xff
 800962a:	d90e      	bls.n	800964a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	22ff      	movs	r2, #255	; 0xff
 8009630:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009636:	b2da      	uxtb	r2, r3
 8009638:	8979      	ldrh	r1, [r7, #10]
 800963a:	2300      	movs	r3, #0
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 fbae 	bl	8009da4 <I2C_TransferConfig>
 8009648:	e00f      	b.n	800966a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009658:	b2da      	uxtb	r2, r3
 800965a:	8979      	ldrh	r1, [r7, #10]
 800965c:	2300      	movs	r3, #0
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 fb9d 	bl	8009da4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800966e:	b29b      	uxth	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d19e      	bne.n	80095b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	6a39      	ldr	r1, [r7, #32]
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f9e3 	bl	8009a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e01a      	b.n	80096be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2220      	movs	r2, #32
 800968e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6859      	ldr	r1, [r3, #4]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <HAL_I2C_Master_Transmit+0x22c>)
 800969c:	400b      	ands	r3, r1
 800969e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	e000      	b.n	80096be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80096bc:	2302      	movs	r3, #2
  }
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	80002000 	.word	0x80002000
 80096cc:	fe00e800 	.word	0xfe00e800

080096d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	607a      	str	r2, [r7, #4]
 80096da:	461a      	mov	r2, r3
 80096dc:	460b      	mov	r3, r1
 80096de:	817b      	strh	r3, [r7, #10]
 80096e0:	4613      	mov	r3, r2
 80096e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b20      	cmp	r3, #32
 80096ee:	f040 80db 	bne.w	80098a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d101      	bne.n	8009700 <HAL_I2C_Master_Receive+0x30>
 80096fc:	2302      	movs	r3, #2
 80096fe:	e0d4      	b.n	80098aa <HAL_I2C_Master_Receive+0x1da>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009708:	f7fa fcdc 	bl	80040c4 <HAL_GetTick>
 800970c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	2319      	movs	r3, #25
 8009714:	2201      	movs	r2, #1
 8009716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 f8f2 	bl	8009904 <I2C_WaitOnFlagUntilTimeout>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e0bf      	b.n	80098aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2222      	movs	r2, #34	; 0x22
 800972e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2210      	movs	r2, #16
 8009736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	893a      	ldrh	r2, [r7, #8]
 800974a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009756:	b29b      	uxth	r3, r3
 8009758:	2bff      	cmp	r3, #255	; 0xff
 800975a:	d90e      	bls.n	800977a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	22ff      	movs	r2, #255	; 0xff
 8009760:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009766:	b2da      	uxtb	r2, r3
 8009768:	8979      	ldrh	r1, [r7, #10]
 800976a:	4b52      	ldr	r3, [pc, #328]	; (80098b4 <HAL_I2C_Master_Receive+0x1e4>)
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 fb16 	bl	8009da4 <I2C_TransferConfig>
 8009778:	e06d      	b.n	8009856 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977e:	b29a      	uxth	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009788:	b2da      	uxtb	r2, r3
 800978a:	8979      	ldrh	r1, [r7, #10]
 800978c:	4b49      	ldr	r3, [pc, #292]	; (80098b4 <HAL_I2C_Master_Receive+0x1e4>)
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 fb05 	bl	8009da4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800979a:	e05c      	b.n	8009856 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	6a39      	ldr	r1, [r7, #32]
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 f993 	bl	8009acc <I2C_WaitOnRXNEFlagUntilTimeout>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e07c      	b.n	80098aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	b2d2      	uxtb	r2, r2
 80097bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097cc:	3b01      	subs	r3, #1
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d8:	b29b      	uxth	r3, r3
 80097da:	3b01      	subs	r3, #1
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d034      	beq.n	8009856 <HAL_I2C_Master_Receive+0x186>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d130      	bne.n	8009856 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	6a3b      	ldr	r3, [r7, #32]
 80097fa:	2200      	movs	r2, #0
 80097fc:	2180      	movs	r1, #128	; 0x80
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 f880 	bl	8009904 <I2C_WaitOnFlagUntilTimeout>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e04d      	b.n	80098aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009812:	b29b      	uxth	r3, r3
 8009814:	2bff      	cmp	r3, #255	; 0xff
 8009816:	d90e      	bls.n	8009836 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	22ff      	movs	r2, #255	; 0xff
 800981c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009822:	b2da      	uxtb	r2, r3
 8009824:	8979      	ldrh	r1, [r7, #10]
 8009826:	2300      	movs	r3, #0
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f000 fab8 	bl	8009da4 <I2C_TransferConfig>
 8009834:	e00f      	b.n	8009856 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983a:	b29a      	uxth	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009844:	b2da      	uxtb	r2, r3
 8009846:	8979      	ldrh	r1, [r7, #10]
 8009848:	2300      	movs	r3, #0
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 faa7 	bl	8009da4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800985a:	b29b      	uxth	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	d19d      	bne.n	800979c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	6a39      	ldr	r1, [r7, #32]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f8ed 	bl	8009a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e01a      	b.n	80098aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2220      	movs	r2, #32
 800987a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6859      	ldr	r1, [r3, #4]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <HAL_I2C_Master_Receive+0x1e8>)
 8009888:	400b      	ands	r3, r1
 800988a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2220      	movs	r2, #32
 8009890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	e000      	b.n	80098aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80098a8:	2302      	movs	r3, #2
  }
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	80002400 	.word	0x80002400
 80098b8:	fe00e800 	.word	0xfe00e800

080098bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	f003 0302 	and.w	r3, r3, #2
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d103      	bne.n	80098da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2200      	movs	r2, #0
 80098d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d007      	beq.n	80098f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	699a      	ldr	r2, [r3, #24]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f042 0201 	orr.w	r2, r2, #1
 80098f6:	619a      	str	r2, [r3, #24]
  }
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	4613      	mov	r3, r2
 8009912:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009914:	e03b      	b.n	800998e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009916:	69ba      	ldr	r2, [r7, #24]
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 f962 	bl	8009be4 <I2C_IsErrorOccurred>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e041      	b.n	80099ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009930:	d02d      	beq.n	800998e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009932:	f7fa fbc7 	bl	80040c4 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	429a      	cmp	r2, r3
 8009940:	d302      	bcc.n	8009948 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d122      	bne.n	800998e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699a      	ldr	r2, [r3, #24]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4013      	ands	r3, r2
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	429a      	cmp	r2, r3
 8009956:	bf0c      	ite	eq
 8009958:	2301      	moveq	r3, #1
 800995a:	2300      	movne	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	461a      	mov	r2, r3
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	429a      	cmp	r2, r3
 8009964:	d113      	bne.n	800998e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996a:	f043 0220 	orr.w	r2, r3, #32
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2220      	movs	r2, #32
 8009976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e00f      	b.n	80099ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	699a      	ldr	r2, [r3, #24]
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	4013      	ands	r3, r2
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	429a      	cmp	r2, r3
 800999c:	bf0c      	ite	eq
 800999e:	2301      	moveq	r3, #1
 80099a0:	2300      	movne	r3, #0
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	461a      	mov	r2, r3
 80099a6:	79fb      	ldrb	r3, [r7, #7]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d0b4      	beq.n	8009916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099c2:	e033      	b.n	8009a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 f90b 	bl	8009be4 <I2C_IsErrorOccurred>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e031      	b.n	8009a3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099de:	d025      	beq.n	8009a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099e0:	f7fa fb70 	bl	80040c4 <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d302      	bcc.n	80099f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d11a      	bne.n	8009a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	f003 0302 	and.w	r3, r3, #2
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d013      	beq.n	8009a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a08:	f043 0220 	orr.w	r2, r3, #32
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e007      	b.n	8009a3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d1c4      	bne.n	80099c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a50:	e02f      	b.n	8009ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 f8c4 	bl	8009be4 <I2C_IsErrorOccurred>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e02d      	b.n	8009ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a66:	f7fa fb2d 	bl	80040c4 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d302      	bcc.n	8009a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d11a      	bne.n	8009ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	f003 0320 	and.w	r3, r3, #32
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	d013      	beq.n	8009ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8e:	f043 0220 	orr.w	r2, r3, #32
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e007      	b.n	8009ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	f003 0320 	and.w	r3, r3, #32
 8009abc:	2b20      	cmp	r3, #32
 8009abe:	d1c8      	bne.n	8009a52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
	...

08009acc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009adc:	e071      	b.n	8009bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	68b9      	ldr	r1, [r7, #8]
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 f87e 	bl	8009be4 <I2C_IsErrorOccurred>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	f003 0320 	and.w	r3, r3, #32
 8009afc:	2b20      	cmp	r3, #32
 8009afe:	d13b      	bne.n	8009b78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d138      	bne.n	8009b78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b04      	cmp	r3, #4
 8009b12:	d105      	bne.n	8009b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	f003 0310 	and.w	r3, r3, #16
 8009b2a:	2b10      	cmp	r3, #16
 8009b2c:	d121      	bne.n	8009b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2210      	movs	r2, #16
 8009b34:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2204      	movs	r2, #4
 8009b3a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2220      	movs	r2, #32
 8009b42:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6859      	ldr	r1, [r3, #4]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009b50:	400b      	ands	r3, r1
 8009b52:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	75fb      	strb	r3, [r7, #23]
 8009b70:	e002      	b.n	8009b78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009b78:	f7fa faa4 	bl	80040c4 <HAL_GetTick>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d302      	bcc.n	8009b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d119      	bne.n	8009bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d116      	bne.n	8009bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	f003 0304 	and.w	r3, r3, #4
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d00f      	beq.n	8009bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba6:	f043 0220 	orr.w	r2, r3, #32
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d002      	beq.n	8009bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d083      	beq.n	8009ade <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	fe00e800 	.word	0xfe00e800

08009be4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b08a      	sub	sp, #40	; 0x28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	f003 0310 	and.w	r3, r3, #16
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d068      	beq.n	8009ce2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2210      	movs	r2, #16
 8009c16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c18:	e049      	b.n	8009cae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c20:	d045      	beq.n	8009cae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009c22:	f7fa fa4f 	bl	80040c4 <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d302      	bcc.n	8009c38 <I2C_IsErrorOccurred+0x54>
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d13a      	bne.n	8009cae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c5a:	d121      	bne.n	8009ca0 <I2C_IsErrorOccurred+0xbc>
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c62:	d01d      	beq.n	8009ca0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c64:	7cfb      	ldrb	r3, [r7, #19]
 8009c66:	2b20      	cmp	r3, #32
 8009c68:	d01a      	beq.n	8009ca0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c7a:	f7fa fa23 	bl	80040c4 <HAL_GetTick>
 8009c7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c80:	e00e      	b.n	8009ca0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c82:	f7fa fa1f 	bl	80040c4 <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	2b19      	cmp	r3, #25
 8009c8e:	d907      	bls.n	8009ca0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	f043 0320 	orr.w	r3, r3, #32
 8009c96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009c9e:	e006      	b.n	8009cae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	f003 0320 	and.w	r3, r3, #32
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	d1e9      	bne.n	8009c82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	f003 0320 	and.w	r3, r3, #32
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d003      	beq.n	8009cc4 <I2C_IsErrorOccurred+0xe0>
 8009cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d0aa      	beq.n	8009c1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d103      	bne.n	8009cd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	f043 0304 	orr.w	r3, r3, #4
 8009cda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00b      	beq.n	8009d0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	f043 0301 	orr.w	r3, r3, #1
 8009cfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00b      	beq.n	8009d2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	f043 0308 	orr.w	r3, r3, #8
 8009d1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	f043 0302 	orr.w	r3, r3, #2
 8009d3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01c      	beq.n	8009d92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff fdaf 	bl	80098bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	6859      	ldr	r1, [r3, #4]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	4b0d      	ldr	r3, [pc, #52]	; (8009da0 <I2C_IsErrorOccurred+0x1bc>)
 8009d6a:	400b      	ands	r3, r1
 8009d6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	431a      	orrs	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2220      	movs	r2, #32
 8009d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3728      	adds	r7, #40	; 0x28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	fe00e800 	.word	0xfe00e800

08009da4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	607b      	str	r3, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	817b      	strh	r3, [r7, #10]
 8009db2:	4613      	mov	r3, r2
 8009db4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009db6:	897b      	ldrh	r3, [r7, #10]
 8009db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009dbc:	7a7b      	ldrb	r3, [r7, #9]
 8009dbe:	041b      	lsls	r3, r3, #16
 8009dc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	0d5b      	lsrs	r3, r3, #21
 8009dde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009de2:	4b08      	ldr	r3, [pc, #32]	; (8009e04 <I2C_TransferConfig+0x60>)
 8009de4:	430b      	orrs	r3, r1
 8009de6:	43db      	mvns	r3, r3
 8009de8:	ea02 0103 	and.w	r1, r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009df6:	bf00      	nop
 8009df8:	371c      	adds	r7, #28
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	03ff63ff 	.word	0x03ff63ff

08009e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b20      	cmp	r3, #32
 8009e1c:	d138      	bne.n	8009e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d101      	bne.n	8009e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e28:	2302      	movs	r3, #2
 8009e2a:	e032      	b.n	8009e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2224      	movs	r2, #36	; 0x24
 8009e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 0201 	bic.w	r2, r2, #1
 8009e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6819      	ldr	r1, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f042 0201 	orr.w	r2, r2, #1
 8009e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e000      	b.n	8009e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e90:	2302      	movs	r3, #2
  }
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	d139      	bne.n	8009f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d101      	bne.n	8009ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	e033      	b.n	8009f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2224      	movs	r2, #36	; 0x24
 8009ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f022 0201 	bic.w	r2, r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	021b      	lsls	r3, r3, #8
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0201 	orr.w	r2, r2, #1
 8009f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2220      	movs	r2, #32
 8009f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	e000      	b.n	8009f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f28:	2302      	movs	r3, #2
  }
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
	...

08009f38 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f40:	4b0d      	ldr	r3, [pc, #52]	; (8009f78 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f46:	4a0c      	ldr	r2, [pc, #48]	; (8009f78 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f48:	f043 0302 	orr.w	r3, r3, #2
 8009f4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009f50:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009f5e:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	4906      	ldr	r1, [pc, #24]	; (8009f7c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	604b      	str	r3, [r1, #4]
}
 8009f6a:	bf00      	nop
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	58024400 	.word	0x58024400
 8009f7c:	58000400 	.word	0x58000400

08009f80 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009f8c:	4b18      	ldr	r3, [pc, #96]	; (8009ff0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f023 0201 	bic.w	r2, r3, #1
 8009f94:	4916      	ldr	r1, [pc, #88]	; (8009ff0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009f9c:	4b14      	ldr	r3, [pc, #80]	; (8009ff0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	4a13      	ldr	r2, [pc, #76]	; (8009ff0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009fa2:	f023 0305 	bic.w	r3, r3, #5
 8009fa6:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009fa8:	4b11      	ldr	r3, [pc, #68]	; (8009ff0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	4a10      	ldr	r2, [pc, #64]	; (8009ff0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009fae:	f023 0302 	bic.w	r3, r3, #2
 8009fb2:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009fb4:	4b0f      	ldr	r3, [pc, #60]	; (8009ff4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	4a0e      	ldr	r2, [pc, #56]	; (8009ff4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fba:	f043 0304 	orr.w	r3, r3, #4
 8009fbe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009fc0:	f3bf 8f4f 	dsb	sy
}
 8009fc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009fc6:	f3bf 8f6f 	isb	sy
}
 8009fca:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009fcc:	78fb      	ldrb	r3, [r7, #3]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009fd2:	bf30      	wfi
 8009fd4:	e000      	b.n	8009fd8 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009fd6:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009fd8:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	4a05      	ldr	r2, [pc, #20]	; (8009ff4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fde:	f023 0304 	bic.w	r3, r3, #4
 8009fe2:	6113      	str	r3, [r2, #16]
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	58024800 	.word	0x58024800
 8009ff4:	e000ed00 	.word	0xe000ed00

08009ff8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a000:	4b19      	ldr	r3, [pc, #100]	; (800a068 <HAL_PWREx_ConfigSupply+0x70>)
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b04      	cmp	r3, #4
 800a00a:	d00a      	beq.n	800a022 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a00c:	4b16      	ldr	r3, [pc, #88]	; (800a068 <HAL_PWREx_ConfigSupply+0x70>)
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	429a      	cmp	r2, r3
 800a018:	d001      	beq.n	800a01e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e01f      	b.n	800a05e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	e01d      	b.n	800a05e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a022:	4b11      	ldr	r3, [pc, #68]	; (800a068 <HAL_PWREx_ConfigSupply+0x70>)
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f023 0207 	bic.w	r2, r3, #7
 800a02a:	490f      	ldr	r1, [pc, #60]	; (800a068 <HAL_PWREx_ConfigSupply+0x70>)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a032:	f7fa f847 	bl	80040c4 <HAL_GetTick>
 800a036:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a038:	e009      	b.n	800a04e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a03a:	f7fa f843 	bl	80040c4 <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a048:	d901      	bls.n	800a04e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e007      	b.n	800a05e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a04e:	4b06      	ldr	r3, [pc, #24]	; (800a068 <HAL_PWREx_ConfigSupply+0x70>)
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a05a:	d1ee      	bne.n	800a03a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	58024800 	.word	0x58024800

0800a06c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08c      	sub	sp, #48	; 0x30
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d102      	bne.n	800a080 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f000 bc48 	b.w	800a910 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 8088 	beq.w	800a19e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a08e:	4b99      	ldr	r3, [pc, #612]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a096:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a098:	4b96      	ldr	r3, [pc, #600]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a0:	2b10      	cmp	r3, #16
 800a0a2:	d007      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x48>
 800a0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a6:	2b18      	cmp	r3, #24
 800a0a8:	d111      	bne.n	800a0ce <HAL_RCC_OscConfig+0x62>
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	f003 0303 	and.w	r3, r3, #3
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d10c      	bne.n	800a0ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0b4:	4b8f      	ldr	r3, [pc, #572]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d06d      	beq.n	800a19c <HAL_RCC_OscConfig+0x130>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d169      	bne.n	800a19c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	f000 bc21 	b.w	800a910 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0d6:	d106      	bne.n	800a0e6 <HAL_RCC_OscConfig+0x7a>
 800a0d8:	4b86      	ldr	r3, [pc, #536]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a85      	ldr	r2, [pc, #532]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a0de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	e02e      	b.n	800a144 <HAL_RCC_OscConfig+0xd8>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10c      	bne.n	800a108 <HAL_RCC_OscConfig+0x9c>
 800a0ee:	4b81      	ldr	r3, [pc, #516]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a80      	ldr	r2, [pc, #512]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a0f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0f8:	6013      	str	r3, [r2, #0]
 800a0fa:	4b7e      	ldr	r3, [pc, #504]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a7d      	ldr	r2, [pc, #500]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	e01d      	b.n	800a144 <HAL_RCC_OscConfig+0xd8>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a110:	d10c      	bne.n	800a12c <HAL_RCC_OscConfig+0xc0>
 800a112:	4b78      	ldr	r3, [pc, #480]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a77      	ldr	r2, [pc, #476]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	4b75      	ldr	r3, [pc, #468]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a74      	ldr	r2, [pc, #464]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	e00b      	b.n	800a144 <HAL_RCC_OscConfig+0xd8>
 800a12c:	4b71      	ldr	r3, [pc, #452]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a70      	ldr	r2, [pc, #448]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	4b6e      	ldr	r3, [pc, #440]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a6d      	ldr	r2, [pc, #436]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a13e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d013      	beq.n	800a174 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a14c:	f7f9 ffba 	bl	80040c4 <HAL_GetTick>
 800a150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a152:	e008      	b.n	800a166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a154:	f7f9 ffb6 	bl	80040c4 <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	2b64      	cmp	r3, #100	; 0x64
 800a160:	d901      	bls.n	800a166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e3d4      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a166:	4b63      	ldr	r3, [pc, #396]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0f0      	beq.n	800a154 <HAL_RCC_OscConfig+0xe8>
 800a172:	e014      	b.n	800a19e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a174:	f7f9 ffa6 	bl	80040c4 <HAL_GetTick>
 800a178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a17a:	e008      	b.n	800a18e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a17c:	f7f9 ffa2 	bl	80040c4 <HAL_GetTick>
 800a180:	4602      	mov	r2, r0
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	2b64      	cmp	r3, #100	; 0x64
 800a188:	d901      	bls.n	800a18e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e3c0      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a18e:	4b59      	ldr	r3, [pc, #356]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1f0      	bne.n	800a17c <HAL_RCC_OscConfig+0x110>
 800a19a:	e000      	b.n	800a19e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a19c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 80ca 	beq.w	800a340 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1ac:	4b51      	ldr	r3, [pc, #324]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1b6:	4b4f      	ldr	r3, [pc, #316]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d007      	beq.n	800a1d2 <HAL_RCC_OscConfig+0x166>
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	2b18      	cmp	r3, #24
 800a1c6:	d156      	bne.n	800a276 <HAL_RCC_OscConfig+0x20a>
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	f003 0303 	and.w	r3, r3, #3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d151      	bne.n	800a276 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1d2:	4b48      	ldr	r3, [pc, #288]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d005      	beq.n	800a1ea <HAL_RCC_OscConfig+0x17e>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e392      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1ea:	4b42      	ldr	r3, [pc, #264]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f023 0219 	bic.w	r2, r3, #25
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	493f      	ldr	r1, [pc, #252]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1fc:	f7f9 ff62 	bl	80040c4 <HAL_GetTick>
 800a200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a202:	e008      	b.n	800a216 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a204:	f7f9 ff5e 	bl	80040c4 <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d901      	bls.n	800a216 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e37c      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a216:	4b37      	ldr	r3, [pc, #220]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0304 	and.w	r3, r3, #4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0f0      	beq.n	800a204 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a222:	f7f9 ff5b 	bl	80040dc <HAL_GetREVID>
 800a226:	4603      	mov	r3, r0
 800a228:	f241 0203 	movw	r2, #4099	; 0x1003
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d817      	bhi.n	800a260 <HAL_RCC_OscConfig+0x1f4>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	2b40      	cmp	r3, #64	; 0x40
 800a236:	d108      	bne.n	800a24a <HAL_RCC_OscConfig+0x1de>
 800a238:	4b2e      	ldr	r3, [pc, #184]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a240:	4a2c      	ldr	r2, [pc, #176]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a246:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a248:	e07a      	b.n	800a340 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a24a:	4b2a      	ldr	r3, [pc, #168]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	031b      	lsls	r3, r3, #12
 800a258:	4926      	ldr	r1, [pc, #152]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a25e:	e06f      	b.n	800a340 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a260:	4b24      	ldr	r3, [pc, #144]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	061b      	lsls	r3, r3, #24
 800a26e:	4921      	ldr	r1, [pc, #132]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a270:	4313      	orrs	r3, r2
 800a272:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a274:	e064      	b.n	800a340 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d047      	beq.n	800a30e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a27e:	4b1d      	ldr	r3, [pc, #116]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f023 0219 	bic.w	r2, r3, #25
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	491a      	ldr	r1, [pc, #104]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a28c:	4313      	orrs	r3, r2
 800a28e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a290:	f7f9 ff18 	bl	80040c4 <HAL_GetTick>
 800a294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a296:	e008      	b.n	800a2aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a298:	f7f9 ff14 	bl	80040c4 <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d901      	bls.n	800a2aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e332      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2aa:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0304 	and.w	r3, r3, #4
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0f0      	beq.n	800a298 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2b6:	f7f9 ff11 	bl	80040dc <HAL_GetREVID>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d819      	bhi.n	800a2f8 <HAL_RCC_OscConfig+0x28c>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	2b40      	cmp	r3, #64	; 0x40
 800a2ca:	d108      	bne.n	800a2de <HAL_RCC_OscConfig+0x272>
 800a2cc:	4b09      	ldr	r3, [pc, #36]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a2d4:	4a07      	ldr	r2, [pc, #28]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a2d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2da:	6053      	str	r3, [r2, #4]
 800a2dc:	e030      	b.n	800a340 <HAL_RCC_OscConfig+0x2d4>
 800a2de:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	031b      	lsls	r3, r3, #12
 800a2ec:	4901      	ldr	r1, [pc, #4]	; (800a2f4 <HAL_RCC_OscConfig+0x288>)
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	604b      	str	r3, [r1, #4]
 800a2f2:	e025      	b.n	800a340 <HAL_RCC_OscConfig+0x2d4>
 800a2f4:	58024400 	.word	0x58024400
 800a2f8:	4b9a      	ldr	r3, [pc, #616]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	061b      	lsls	r3, r3, #24
 800a306:	4997      	ldr	r1, [pc, #604]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a308:	4313      	orrs	r3, r2
 800a30a:	604b      	str	r3, [r1, #4]
 800a30c:	e018      	b.n	800a340 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a30e:	4b95      	ldr	r3, [pc, #596]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a94      	ldr	r2, [pc, #592]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a314:	f023 0301 	bic.w	r3, r3, #1
 800a318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a31a:	f7f9 fed3 	bl	80040c4 <HAL_GetTick>
 800a31e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a320:	e008      	b.n	800a334 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a322:	f7f9 fecf 	bl	80040c4 <HAL_GetTick>
 800a326:	4602      	mov	r2, r0
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d901      	bls.n	800a334 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e2ed      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a334:	4b8b      	ldr	r3, [pc, #556]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1f0      	bne.n	800a322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0310 	and.w	r3, r3, #16
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 80a9 	beq.w	800a4a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a34e:	4b85      	ldr	r3, [pc, #532]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a356:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a358:	4b82      	ldr	r3, [pc, #520]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	2b08      	cmp	r3, #8
 800a362:	d007      	beq.n	800a374 <HAL_RCC_OscConfig+0x308>
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	2b18      	cmp	r3, #24
 800a368:	d13a      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x374>
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	f003 0303 	and.w	r3, r3, #3
 800a370:	2b01      	cmp	r3, #1
 800a372:	d135      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a374:	4b7b      	ldr	r3, [pc, #492]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d005      	beq.n	800a38c <HAL_RCC_OscConfig+0x320>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	69db      	ldr	r3, [r3, #28]
 800a384:	2b80      	cmp	r3, #128	; 0x80
 800a386:	d001      	beq.n	800a38c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e2c1      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a38c:	f7f9 fea6 	bl	80040dc <HAL_GetREVID>
 800a390:	4603      	mov	r3, r0
 800a392:	f241 0203 	movw	r2, #4099	; 0x1003
 800a396:	4293      	cmp	r3, r2
 800a398:	d817      	bhi.n	800a3ca <HAL_RCC_OscConfig+0x35e>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	d108      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x348>
 800a3a2:	4b70      	ldr	r3, [pc, #448]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a3aa:	4a6e      	ldr	r2, [pc, #440]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a3ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3b2:	e075      	b.n	800a4a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3b4:	4b6b      	ldr	r3, [pc, #428]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a1b      	ldr	r3, [r3, #32]
 800a3c0:	069b      	lsls	r3, r3, #26
 800a3c2:	4968      	ldr	r1, [pc, #416]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3c8:	e06a      	b.n	800a4a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3ca:	4b66      	ldr	r3, [pc, #408]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	061b      	lsls	r3, r3, #24
 800a3d8:	4962      	ldr	r1, [pc, #392]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3de:	e05f      	b.n	800a4a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d042      	beq.n	800a46e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a3e8:	4b5e      	ldr	r3, [pc, #376]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a5d      	ldr	r2, [pc, #372]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a3ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f4:	f7f9 fe66 	bl	80040c4 <HAL_GetTick>
 800a3f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3fa:	e008      	b.n	800a40e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3fc:	f7f9 fe62 	bl	80040c4 <HAL_GetTick>
 800a400:	4602      	mov	r2, r0
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	2b02      	cmp	r3, #2
 800a408:	d901      	bls.n	800a40e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e280      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a40e:	4b55      	ldr	r3, [pc, #340]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0f0      	beq.n	800a3fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a41a:	f7f9 fe5f 	bl	80040dc <HAL_GetREVID>
 800a41e:	4603      	mov	r3, r0
 800a420:	f241 0203 	movw	r2, #4099	; 0x1003
 800a424:	4293      	cmp	r3, r2
 800a426:	d817      	bhi.n	800a458 <HAL_RCC_OscConfig+0x3ec>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a1b      	ldr	r3, [r3, #32]
 800a42c:	2b20      	cmp	r3, #32
 800a42e:	d108      	bne.n	800a442 <HAL_RCC_OscConfig+0x3d6>
 800a430:	4b4c      	ldr	r3, [pc, #304]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a438:	4a4a      	ldr	r2, [pc, #296]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a43a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a43e:	6053      	str	r3, [r2, #4]
 800a440:	e02e      	b.n	800a4a0 <HAL_RCC_OscConfig+0x434>
 800a442:	4b48      	ldr	r3, [pc, #288]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	069b      	lsls	r3, r3, #26
 800a450:	4944      	ldr	r1, [pc, #272]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a452:	4313      	orrs	r3, r2
 800a454:	604b      	str	r3, [r1, #4]
 800a456:	e023      	b.n	800a4a0 <HAL_RCC_OscConfig+0x434>
 800a458:	4b42      	ldr	r3, [pc, #264]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	061b      	lsls	r3, r3, #24
 800a466:	493f      	ldr	r1, [pc, #252]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a468:	4313      	orrs	r3, r2
 800a46a:	60cb      	str	r3, [r1, #12]
 800a46c:	e018      	b.n	800a4a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a46e:	4b3d      	ldr	r3, [pc, #244]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a3c      	ldr	r2, [pc, #240]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a47a:	f7f9 fe23 	bl	80040c4 <HAL_GetTick>
 800a47e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a480:	e008      	b.n	800a494 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a482:	f7f9 fe1f 	bl	80040c4 <HAL_GetTick>
 800a486:	4602      	mov	r2, r0
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d901      	bls.n	800a494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a490:	2303      	movs	r3, #3
 800a492:	e23d      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a494:	4b33      	ldr	r3, [pc, #204]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1f0      	bne.n	800a482 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0308 	and.w	r3, r3, #8
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d036      	beq.n	800a51a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d019      	beq.n	800a4e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4b4:	4b2b      	ldr	r3, [pc, #172]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a4b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4b8:	4a2a      	ldr	r2, [pc, #168]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a4ba:	f043 0301 	orr.w	r3, r3, #1
 800a4be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4c0:	f7f9 fe00 	bl	80040c4 <HAL_GetTick>
 800a4c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4c6:	e008      	b.n	800a4da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4c8:	f7f9 fdfc 	bl	80040c4 <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d901      	bls.n	800a4da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e21a      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4da:	4b22      	ldr	r3, [pc, #136]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a4dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4de:	f003 0302 	and.w	r3, r3, #2
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0f0      	beq.n	800a4c8 <HAL_RCC_OscConfig+0x45c>
 800a4e6:	e018      	b.n	800a51a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4e8:	4b1e      	ldr	r3, [pc, #120]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a4ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ec:	4a1d      	ldr	r2, [pc, #116]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a4ee:	f023 0301 	bic.w	r3, r3, #1
 800a4f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4f4:	f7f9 fde6 	bl	80040c4 <HAL_GetTick>
 800a4f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4fa:	e008      	b.n	800a50e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4fc:	f7f9 fde2 	bl	80040c4 <HAL_GetTick>
 800a500:	4602      	mov	r2, r0
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	2b02      	cmp	r3, #2
 800a508:	d901      	bls.n	800a50e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e200      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a50e:	4b15      	ldr	r3, [pc, #84]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a512:	f003 0302 	and.w	r3, r3, #2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1f0      	bne.n	800a4fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0320 	and.w	r3, r3, #32
 800a522:	2b00      	cmp	r3, #0
 800a524:	d039      	beq.n	800a59a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d01c      	beq.n	800a568 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a52e:	4b0d      	ldr	r3, [pc, #52]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a0c      	ldr	r2, [pc, #48]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a538:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a53a:	f7f9 fdc3 	bl	80040c4 <HAL_GetTick>
 800a53e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a540:	e008      	b.n	800a554 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a542:	f7f9 fdbf 	bl	80040c4 <HAL_GetTick>
 800a546:	4602      	mov	r2, r0
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d901      	bls.n	800a554 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e1dd      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a554:	4b03      	ldr	r3, [pc, #12]	; (800a564 <HAL_RCC_OscConfig+0x4f8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0f0      	beq.n	800a542 <HAL_RCC_OscConfig+0x4d6>
 800a560:	e01b      	b.n	800a59a <HAL_RCC_OscConfig+0x52e>
 800a562:	bf00      	nop
 800a564:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a568:	4b9b      	ldr	r3, [pc, #620]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a9a      	ldr	r2, [pc, #616]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a56e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a572:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a574:	f7f9 fda6 	bl	80040c4 <HAL_GetTick>
 800a578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a57a:	e008      	b.n	800a58e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a57c:	f7f9 fda2 	bl	80040c4 <HAL_GetTick>
 800a580:	4602      	mov	r2, r0
 800a582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	2b02      	cmp	r3, #2
 800a588:	d901      	bls.n	800a58e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e1c0      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a58e:	4b92      	ldr	r3, [pc, #584]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1f0      	bne.n	800a57c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 8081 	beq.w	800a6aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a5a8:	4b8c      	ldr	r3, [pc, #560]	; (800a7dc <HAL_RCC_OscConfig+0x770>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a8b      	ldr	r2, [pc, #556]	; (800a7dc <HAL_RCC_OscConfig+0x770>)
 800a5ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5b4:	f7f9 fd86 	bl	80040c4 <HAL_GetTick>
 800a5b8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5ba:	e008      	b.n	800a5ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5bc:	f7f9 fd82 	bl	80040c4 <HAL_GetTick>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	2b64      	cmp	r3, #100	; 0x64
 800a5c8:	d901      	bls.n	800a5ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e1a0      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5ce:	4b83      	ldr	r3, [pc, #524]	; (800a7dc <HAL_RCC_OscConfig+0x770>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0f0      	beq.n	800a5bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d106      	bne.n	800a5f0 <HAL_RCC_OscConfig+0x584>
 800a5e2:	4b7d      	ldr	r3, [pc, #500]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5e6:	4a7c      	ldr	r2, [pc, #496]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a5e8:	f043 0301 	orr.w	r3, r3, #1
 800a5ec:	6713      	str	r3, [r2, #112]	; 0x70
 800a5ee:	e02d      	b.n	800a64c <HAL_RCC_OscConfig+0x5e0>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10c      	bne.n	800a612 <HAL_RCC_OscConfig+0x5a6>
 800a5f8:	4b77      	ldr	r3, [pc, #476]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fc:	4a76      	ldr	r2, [pc, #472]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a5fe:	f023 0301 	bic.w	r3, r3, #1
 800a602:	6713      	str	r3, [r2, #112]	; 0x70
 800a604:	4b74      	ldr	r3, [pc, #464]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a608:	4a73      	ldr	r2, [pc, #460]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a60a:	f023 0304 	bic.w	r3, r3, #4
 800a60e:	6713      	str	r3, [r2, #112]	; 0x70
 800a610:	e01c      	b.n	800a64c <HAL_RCC_OscConfig+0x5e0>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	2b05      	cmp	r3, #5
 800a618:	d10c      	bne.n	800a634 <HAL_RCC_OscConfig+0x5c8>
 800a61a:	4b6f      	ldr	r3, [pc, #444]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61e:	4a6e      	ldr	r2, [pc, #440]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a620:	f043 0304 	orr.w	r3, r3, #4
 800a624:	6713      	str	r3, [r2, #112]	; 0x70
 800a626:	4b6c      	ldr	r3, [pc, #432]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62a:	4a6b      	ldr	r2, [pc, #428]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a62c:	f043 0301 	orr.w	r3, r3, #1
 800a630:	6713      	str	r3, [r2, #112]	; 0x70
 800a632:	e00b      	b.n	800a64c <HAL_RCC_OscConfig+0x5e0>
 800a634:	4b68      	ldr	r3, [pc, #416]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a638:	4a67      	ldr	r2, [pc, #412]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a63a:	f023 0301 	bic.w	r3, r3, #1
 800a63e:	6713      	str	r3, [r2, #112]	; 0x70
 800a640:	4b65      	ldr	r3, [pc, #404]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a644:	4a64      	ldr	r2, [pc, #400]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a646:	f023 0304 	bic.w	r3, r3, #4
 800a64a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d015      	beq.n	800a680 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a654:	f7f9 fd36 	bl	80040c4 <HAL_GetTick>
 800a658:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a65a:	e00a      	b.n	800a672 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a65c:	f7f9 fd32 	bl	80040c4 <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	f241 3288 	movw	r2, #5000	; 0x1388
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d901      	bls.n	800a672 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e14e      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a672:	4b59      	ldr	r3, [pc, #356]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a676:	f003 0302 	and.w	r3, r3, #2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0ee      	beq.n	800a65c <HAL_RCC_OscConfig+0x5f0>
 800a67e:	e014      	b.n	800a6aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a680:	f7f9 fd20 	bl	80040c4 <HAL_GetTick>
 800a684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a686:	e00a      	b.n	800a69e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a688:	f7f9 fd1c 	bl	80040c4 <HAL_GetTick>
 800a68c:	4602      	mov	r2, r0
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	f241 3288 	movw	r2, #5000	; 0x1388
 800a696:	4293      	cmp	r3, r2
 800a698:	d901      	bls.n	800a69e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e138      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a69e:	4b4e      	ldr	r3, [pc, #312]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1ee      	bne.n	800a688 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f000 812d 	beq.w	800a90e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a6b4:	4b48      	ldr	r3, [pc, #288]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6bc:	2b18      	cmp	r3, #24
 800a6be:	f000 80bd 	beq.w	800a83c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	f040 809e 	bne.w	800a808 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6cc:	4b42      	ldr	r3, [pc, #264]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a41      	ldr	r2, [pc, #260]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a6d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d8:	f7f9 fcf4 	bl	80040c4 <HAL_GetTick>
 800a6dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6de:	e008      	b.n	800a6f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6e0:	f7f9 fcf0 	bl	80040c4 <HAL_GetTick>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d901      	bls.n	800a6f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e10e      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6f2:	4b39      	ldr	r3, [pc, #228]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1f0      	bne.n	800a6e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6fe:	4b36      	ldr	r3, [pc, #216]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a702:	4b37      	ldr	r3, [pc, #220]	; (800a7e0 <HAL_RCC_OscConfig+0x774>)
 800a704:	4013      	ands	r3, r2
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a70e:	0112      	lsls	r2, r2, #4
 800a710:	430a      	orrs	r2, r1
 800a712:	4931      	ldr	r1, [pc, #196]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a714:	4313      	orrs	r3, r2
 800a716:	628b      	str	r3, [r1, #40]	; 0x28
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71c:	3b01      	subs	r3, #1
 800a71e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a726:	3b01      	subs	r3, #1
 800a728:	025b      	lsls	r3, r3, #9
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	431a      	orrs	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a732:	3b01      	subs	r3, #1
 800a734:	041b      	lsls	r3, r3, #16
 800a736:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a73a:	431a      	orrs	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a740:	3b01      	subs	r3, #1
 800a742:	061b      	lsls	r3, r3, #24
 800a744:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a748:	4923      	ldr	r1, [pc, #140]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a74e:	4b22      	ldr	r3, [pc, #136]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a752:	4a21      	ldr	r2, [pc, #132]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a754:	f023 0301 	bic.w	r3, r3, #1
 800a758:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a75a:	4b1f      	ldr	r3, [pc, #124]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a75c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a75e:	4b21      	ldr	r3, [pc, #132]	; (800a7e4 <HAL_RCC_OscConfig+0x778>)
 800a760:	4013      	ands	r3, r2
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a766:	00d2      	lsls	r2, r2, #3
 800a768:	491b      	ldr	r1, [pc, #108]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a76e:	4b1a      	ldr	r3, [pc, #104]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a772:	f023 020c 	bic.w	r2, r3, #12
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77a:	4917      	ldr	r1, [pc, #92]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a780:	4b15      	ldr	r3, [pc, #84]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	f023 0202 	bic.w	r2, r3, #2
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a78c:	4912      	ldr	r1, [pc, #72]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a78e:	4313      	orrs	r3, r2
 800a790:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a792:	4b11      	ldr	r3, [pc, #68]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a796:	4a10      	ldr	r2, [pc, #64]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a79c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a79e:	4b0e      	ldr	r3, [pc, #56]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a2:	4a0d      	ldr	r2, [pc, #52]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a7a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a7aa:	4b0b      	ldr	r3, [pc, #44]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	4a0a      	ldr	r2, [pc, #40]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a7b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a7b6:	4b08      	ldr	r3, [pc, #32]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ba:	4a07      	ldr	r2, [pc, #28]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a7bc:	f043 0301 	orr.w	r3, r3, #1
 800a7c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7c2:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a04      	ldr	r2, [pc, #16]	; (800a7d8 <HAL_RCC_OscConfig+0x76c>)
 800a7c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ce:	f7f9 fc79 	bl	80040c4 <HAL_GetTick>
 800a7d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7d4:	e011      	b.n	800a7fa <HAL_RCC_OscConfig+0x78e>
 800a7d6:	bf00      	nop
 800a7d8:	58024400 	.word	0x58024400
 800a7dc:	58024800 	.word	0x58024800
 800a7e0:	fffffc0c 	.word	0xfffffc0c
 800a7e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7e8:	f7f9 fc6c 	bl	80040c4 <HAL_GetTick>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d901      	bls.n	800a7fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e08a      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7fa:	4b47      	ldr	r3, [pc, #284]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0f0      	beq.n	800a7e8 <HAL_RCC_OscConfig+0x77c>
 800a806:	e082      	b.n	800a90e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a808:	4b43      	ldr	r3, [pc, #268]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a42      	ldr	r2, [pc, #264]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a80e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a814:	f7f9 fc56 	bl	80040c4 <HAL_GetTick>
 800a818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a81a:	e008      	b.n	800a82e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a81c:	f7f9 fc52 	bl	80040c4 <HAL_GetTick>
 800a820:	4602      	mov	r2, r0
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	2b02      	cmp	r3, #2
 800a828:	d901      	bls.n	800a82e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e070      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a82e:	4b3a      	ldr	r3, [pc, #232]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1f0      	bne.n	800a81c <HAL_RCC_OscConfig+0x7b0>
 800a83a:	e068      	b.n	800a90e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a83c:	4b36      	ldr	r3, [pc, #216]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a840:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a842:	4b35      	ldr	r3, [pc, #212]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a846:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d031      	beq.n	800a8b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f003 0203 	and.w	r2, r3, #3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d12a      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	091b      	lsrs	r3, r3, #4
 800a862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d122      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a878:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d11a      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	0a5b      	lsrs	r3, r3, #9
 800a882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d111      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	0c1b      	lsrs	r3, r3, #16
 800a894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d108      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	0e1b      	lsrs	r3, r3, #24
 800a8a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d001      	beq.n	800a8b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e02b      	b.n	800a910 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a8b8:	4b17      	ldr	r3, [pc, #92]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8bc:	08db      	lsrs	r3, r3, #3
 800a8be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d01f      	beq.n	800a90e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a8ce:	4b12      	ldr	r3, [pc, #72]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d2:	4a11      	ldr	r2, [pc, #68]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a8d4:	f023 0301 	bic.w	r3, r3, #1
 800a8d8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8da:	f7f9 fbf3 	bl	80040c4 <HAL_GetTick>
 800a8de:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a8e0:	bf00      	nop
 800a8e2:	f7f9 fbef 	bl	80040c4 <HAL_GetTick>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d0f9      	beq.n	800a8e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a8ee:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a8f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8f2:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <HAL_RCC_OscConfig+0x8b0>)
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a8fa:	00d2      	lsls	r2, r2, #3
 800a8fc:	4906      	ldr	r1, [pc, #24]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a902:	4b05      	ldr	r3, [pc, #20]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a906:	4a04      	ldr	r2, [pc, #16]	; (800a918 <HAL_RCC_OscConfig+0x8ac>)
 800a908:	f043 0301 	orr.w	r3, r3, #1
 800a90c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3730      	adds	r7, #48	; 0x30
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	58024400 	.word	0x58024400
 800a91c:	ffff0007 	.word	0xffff0007

0800a920 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e19c      	b.n	800ac6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a934:	4b8a      	ldr	r3, [pc, #552]	; (800ab60 <HAL_RCC_ClockConfig+0x240>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 030f 	and.w	r3, r3, #15
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d910      	bls.n	800a964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a942:	4b87      	ldr	r3, [pc, #540]	; (800ab60 <HAL_RCC_ClockConfig+0x240>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f023 020f 	bic.w	r2, r3, #15
 800a94a:	4985      	ldr	r1, [pc, #532]	; (800ab60 <HAL_RCC_ClockConfig+0x240>)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	4313      	orrs	r3, r2
 800a950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a952:	4b83      	ldr	r3, [pc, #524]	; (800ab60 <HAL_RCC_ClockConfig+0x240>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 030f 	and.w	r3, r3, #15
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d001      	beq.n	800a964 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	e184      	b.n	800ac6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0304 	and.w	r3, r3, #4
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d010      	beq.n	800a992 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	691a      	ldr	r2, [r3, #16]
 800a974:	4b7b      	ldr	r3, [pc, #492]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d908      	bls.n	800a992 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a980:	4b78      	ldr	r3, [pc, #480]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	4975      	ldr	r1, [pc, #468]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800a98e:	4313      	orrs	r3, r2
 800a990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0308 	and.w	r3, r3, #8
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d010      	beq.n	800a9c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	695a      	ldr	r2, [r3, #20]
 800a9a2:	4b70      	ldr	r3, [pc, #448]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d908      	bls.n	800a9c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9ae:	4b6d      	ldr	r3, [pc, #436]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	496a      	ldr	r1, [pc, #424]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0310 	and.w	r3, r3, #16
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d010      	beq.n	800a9ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	699a      	ldr	r2, [r3, #24]
 800a9d0:	4b64      	ldr	r3, [pc, #400]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d908      	bls.n	800a9ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a9dc:	4b61      	ldr	r3, [pc, #388]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	495e      	ldr	r1, [pc, #376]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 0320 	and.w	r3, r3, #32
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d010      	beq.n	800aa1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	69da      	ldr	r2, [r3, #28]
 800a9fe:	4b59      	ldr	r3, [pc, #356]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d908      	bls.n	800aa1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa0a:	4b56      	ldr	r3, [pc, #344]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	4953      	ldr	r1, [pc, #332]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d010      	beq.n	800aa4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68da      	ldr	r2, [r3, #12]
 800aa2c:	4b4d      	ldr	r3, [pc, #308]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	f003 030f 	and.w	r3, r3, #15
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d908      	bls.n	800aa4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa38:	4b4a      	ldr	r3, [pc, #296]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	f023 020f 	bic.w	r2, r3, #15
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	4947      	ldr	r1, [pc, #284]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d055      	beq.n	800ab02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aa56:	4b43      	ldr	r3, [pc, #268]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	4940      	ldr	r1, [pc, #256]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aa64:	4313      	orrs	r3, r2
 800aa66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d107      	bne.n	800aa80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa70:	4b3c      	ldr	r3, [pc, #240]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d121      	bne.n	800aac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e0f6      	b.n	800ac6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d107      	bne.n	800aa98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa88:	4b36      	ldr	r3, [pc, #216]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d115      	bne.n	800aac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e0ea      	b.n	800ac6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d107      	bne.n	800aab0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aaa0:	4b30      	ldr	r3, [pc, #192]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d109      	bne.n	800aac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e0de      	b.n	800ac6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aab0:	4b2c      	ldr	r3, [pc, #176]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e0d6      	b.n	800ac6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aac0:	4b28      	ldr	r3, [pc, #160]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	f023 0207 	bic.w	r2, r3, #7
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	4925      	ldr	r1, [pc, #148]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aace:	4313      	orrs	r3, r2
 800aad0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aad2:	f7f9 faf7 	bl	80040c4 <HAL_GetTick>
 800aad6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aad8:	e00a      	b.n	800aaf0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aada:	f7f9 faf3 	bl	80040c4 <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d901      	bls.n	800aaf0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aaec:	2303      	movs	r3, #3
 800aaee:	e0be      	b.n	800ac6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaf0:	4b1c      	ldr	r3, [pc, #112]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	00db      	lsls	r3, r3, #3
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d1eb      	bne.n	800aada <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f003 0302 	and.w	r3, r3, #2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d010      	beq.n	800ab30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	4b14      	ldr	r3, [pc, #80]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	f003 030f 	and.w	r3, r3, #15
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d208      	bcs.n	800ab30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab1e:	4b11      	ldr	r3, [pc, #68]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	f023 020f 	bic.w	r2, r3, #15
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	490e      	ldr	r1, [pc, #56]	; (800ab64 <HAL_RCC_ClockConfig+0x244>)
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab30:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <HAL_RCC_ClockConfig+0x240>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 030f 	and.w	r3, r3, #15
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d214      	bcs.n	800ab68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab3e:	4b08      	ldr	r3, [pc, #32]	; (800ab60 <HAL_RCC_ClockConfig+0x240>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f023 020f 	bic.w	r2, r3, #15
 800ab46:	4906      	ldr	r1, [pc, #24]	; (800ab60 <HAL_RCC_ClockConfig+0x240>)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab4e:	4b04      	ldr	r3, [pc, #16]	; (800ab60 <HAL_RCC_ClockConfig+0x240>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 030f 	and.w	r3, r3, #15
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d005      	beq.n	800ab68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e086      	b.n	800ac6e <HAL_RCC_ClockConfig+0x34e>
 800ab60:	52002000 	.word	0x52002000
 800ab64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d010      	beq.n	800ab96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691a      	ldr	r2, [r3, #16]
 800ab78:	4b3f      	ldr	r3, [pc, #252]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d208      	bcs.n	800ab96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab84:	4b3c      	ldr	r3, [pc, #240]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	4939      	ldr	r1, [pc, #228]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800ab92:	4313      	orrs	r3, r2
 800ab94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f003 0308 	and.w	r3, r3, #8
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d010      	beq.n	800abc4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695a      	ldr	r2, [r3, #20]
 800aba6:	4b34      	ldr	r3, [pc, #208]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abae:	429a      	cmp	r2, r3
 800abb0:	d208      	bcs.n	800abc4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800abb2:	4b31      	ldr	r3, [pc, #196]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	492e      	ldr	r1, [pc, #184]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800abc0:	4313      	orrs	r3, r2
 800abc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 0310 	and.w	r3, r3, #16
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d010      	beq.n	800abf2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	699a      	ldr	r2, [r3, #24]
 800abd4:	4b28      	ldr	r3, [pc, #160]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abdc:	429a      	cmp	r2, r3
 800abde:	d208      	bcs.n	800abf2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abe0:	4b25      	ldr	r3, [pc, #148]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800abe2:	69db      	ldr	r3, [r3, #28]
 800abe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	4922      	ldr	r1, [pc, #136]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800abee:	4313      	orrs	r3, r2
 800abf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f003 0320 	and.w	r3, r3, #32
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d010      	beq.n	800ac20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	69da      	ldr	r2, [r3, #28]
 800ac02:	4b1d      	ldr	r3, [pc, #116]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d208      	bcs.n	800ac20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac0e:	4b1a      	ldr	r3, [pc, #104]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	4917      	ldr	r1, [pc, #92]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ac20:	f000 f834 	bl	800ac8c <HAL_RCC_GetSysClockFreq>
 800ac24:	4602      	mov	r2, r0
 800ac26:	4b14      	ldr	r3, [pc, #80]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	0a1b      	lsrs	r3, r3, #8
 800ac2c:	f003 030f 	and.w	r3, r3, #15
 800ac30:	4912      	ldr	r1, [pc, #72]	; (800ac7c <HAL_RCC_ClockConfig+0x35c>)
 800ac32:	5ccb      	ldrb	r3, [r1, r3]
 800ac34:	f003 031f 	and.w	r3, r3, #31
 800ac38:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac3e:	4b0e      	ldr	r3, [pc, #56]	; (800ac78 <HAL_RCC_ClockConfig+0x358>)
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	f003 030f 	and.w	r3, r3, #15
 800ac46:	4a0d      	ldr	r2, [pc, #52]	; (800ac7c <HAL_RCC_ClockConfig+0x35c>)
 800ac48:	5cd3      	ldrb	r3, [r2, r3]
 800ac4a:	f003 031f 	and.w	r3, r3, #31
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	fa22 f303 	lsr.w	r3, r2, r3
 800ac54:	4a0a      	ldr	r2, [pc, #40]	; (800ac80 <HAL_RCC_ClockConfig+0x360>)
 800ac56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac58:	4a0a      	ldr	r2, [pc, #40]	; (800ac84 <HAL_RCC_ClockConfig+0x364>)
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ac5e:	4b0a      	ldr	r3, [pc, #40]	; (800ac88 <HAL_RCC_ClockConfig+0x368>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7f8 f842 	bl	8002cec <HAL_InitTick>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3718      	adds	r7, #24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	58024400 	.word	0x58024400
 800ac7c:	080170b4 	.word	0x080170b4
 800ac80:	24000088 	.word	0x24000088
 800ac84:	24000084 	.word	0x24000084
 800ac88:	2400008c 	.word	0x2400008c

0800ac8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b089      	sub	sp, #36	; 0x24
 800ac90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac92:	4bb3      	ldr	r3, [pc, #716]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac9a:	2b18      	cmp	r3, #24
 800ac9c:	f200 8155 	bhi.w	800af4a <HAL_RCC_GetSysClockFreq+0x2be>
 800aca0:	a201      	add	r2, pc, #4	; (adr r2, 800aca8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca6:	bf00      	nop
 800aca8:	0800ad0d 	.word	0x0800ad0d
 800acac:	0800af4b 	.word	0x0800af4b
 800acb0:	0800af4b 	.word	0x0800af4b
 800acb4:	0800af4b 	.word	0x0800af4b
 800acb8:	0800af4b 	.word	0x0800af4b
 800acbc:	0800af4b 	.word	0x0800af4b
 800acc0:	0800af4b 	.word	0x0800af4b
 800acc4:	0800af4b 	.word	0x0800af4b
 800acc8:	0800ad33 	.word	0x0800ad33
 800accc:	0800af4b 	.word	0x0800af4b
 800acd0:	0800af4b 	.word	0x0800af4b
 800acd4:	0800af4b 	.word	0x0800af4b
 800acd8:	0800af4b 	.word	0x0800af4b
 800acdc:	0800af4b 	.word	0x0800af4b
 800ace0:	0800af4b 	.word	0x0800af4b
 800ace4:	0800af4b 	.word	0x0800af4b
 800ace8:	0800ad39 	.word	0x0800ad39
 800acec:	0800af4b 	.word	0x0800af4b
 800acf0:	0800af4b 	.word	0x0800af4b
 800acf4:	0800af4b 	.word	0x0800af4b
 800acf8:	0800af4b 	.word	0x0800af4b
 800acfc:	0800af4b 	.word	0x0800af4b
 800ad00:	0800af4b 	.word	0x0800af4b
 800ad04:	0800af4b 	.word	0x0800af4b
 800ad08:	0800ad3f 	.word	0x0800ad3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad0c:	4b94      	ldr	r3, [pc, #592]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0320 	and.w	r3, r3, #32
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d009      	beq.n	800ad2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad18:	4b91      	ldr	r3, [pc, #580]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	08db      	lsrs	r3, r3, #3
 800ad1e:	f003 0303 	and.w	r3, r3, #3
 800ad22:	4a90      	ldr	r2, [pc, #576]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad24:	fa22 f303 	lsr.w	r3, r2, r3
 800ad28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ad2a:	e111      	b.n	800af50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ad2c:	4b8d      	ldr	r3, [pc, #564]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad2e:	61bb      	str	r3, [r7, #24]
      break;
 800ad30:	e10e      	b.n	800af50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ad32:	4b8d      	ldr	r3, [pc, #564]	; (800af68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad34:	61bb      	str	r3, [r7, #24]
      break;
 800ad36:	e10b      	b.n	800af50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ad38:	4b8c      	ldr	r3, [pc, #560]	; (800af6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ad3a:	61bb      	str	r3, [r7, #24]
      break;
 800ad3c:	e108      	b.n	800af50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad3e:	4b88      	ldr	r3, [pc, #544]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad42:	f003 0303 	and.w	r3, r3, #3
 800ad46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ad48:	4b85      	ldr	r3, [pc, #532]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad4c:	091b      	lsrs	r3, r3, #4
 800ad4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ad54:	4b82      	ldr	r3, [pc, #520]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	f003 0301 	and.w	r3, r3, #1
 800ad5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad5e:	4b80      	ldr	r3, [pc, #512]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad62:	08db      	lsrs	r3, r3, #3
 800ad64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	fb02 f303 	mul.w	r3, r2, r3
 800ad6e:	ee07 3a90 	vmov	s15, r3
 800ad72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f000 80e1 	beq.w	800af44 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	f000 8083 	beq.w	800ae90 <HAL_RCC_GetSysClockFreq+0x204>
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	f200 80a1 	bhi.w	800aed4 <HAL_RCC_GetSysClockFreq+0x248>
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d003      	beq.n	800ada0 <HAL_RCC_GetSysClockFreq+0x114>
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d056      	beq.n	800ae4c <HAL_RCC_GetSysClockFreq+0x1c0>
 800ad9e:	e099      	b.n	800aed4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ada0:	4b6f      	ldr	r3, [pc, #444]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 0320 	and.w	r3, r3, #32
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d02d      	beq.n	800ae08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adac:	4b6c      	ldr	r3, [pc, #432]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	08db      	lsrs	r3, r3, #3
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	4a6b      	ldr	r2, [pc, #428]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800adb8:	fa22 f303 	lsr.w	r3, r2, r3
 800adbc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	ee07 3a90 	vmov	s15, r3
 800adc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add6:	4b62      	ldr	r3, [pc, #392]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800add8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adde:	ee07 3a90 	vmov	s15, r3
 800ade2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade6:	ed97 6a02 	vldr	s12, [r7, #8]
 800adea:	eddf 5a61 	vldr	s11, [pc, #388]	; 800af70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800adee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ae06:	e087      	b.n	800af18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae12:	eddf 6a58 	vldr	s13, [pc, #352]	; 800af74 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ae16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae1a:	4b51      	ldr	r3, [pc, #324]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae2a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800af70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae4a:	e065      	b.n	800af18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	ee07 3a90 	vmov	s15, r3
 800ae52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae56:	eddf 6a48 	vldr	s13, [pc, #288]	; 800af78 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae5e:	4b40      	ldr	r3, [pc, #256]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae66:	ee07 3a90 	vmov	s15, r3
 800ae6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae6e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800af70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae8e:	e043      	b.n	800af18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800af7c <HAL_RCC_GetSysClockFreq+0x2f0>
 800ae9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea2:	4b2f      	ldr	r3, [pc, #188]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aeb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800af70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aeba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aece:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aed2:	e021      	b.n	800af18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aede:	eddf 6a26 	vldr	s13, [pc, #152]	; 800af78 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee6:	4b1e      	ldr	r3, [pc, #120]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aefa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800af70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800af18:	4b11      	ldr	r3, [pc, #68]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1c:	0a5b      	lsrs	r3, r3, #9
 800af1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af22:	3301      	adds	r3, #1
 800af24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	ee07 3a90 	vmov	s15, r3
 800af2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af30:	edd7 6a07 	vldr	s13, [r7, #28]
 800af34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af3c:	ee17 3a90 	vmov	r3, s15
 800af40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800af42:	e005      	b.n	800af50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800af44:	2300      	movs	r3, #0
 800af46:	61bb      	str	r3, [r7, #24]
      break;
 800af48:	e002      	b.n	800af50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800af4a:	4b07      	ldr	r3, [pc, #28]	; (800af68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800af4c:	61bb      	str	r3, [r7, #24]
      break;
 800af4e:	bf00      	nop
  }

  return sysclockfreq;
 800af50:	69bb      	ldr	r3, [r7, #24]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3724      	adds	r7, #36	; 0x24
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	58024400 	.word	0x58024400
 800af64:	03d09000 	.word	0x03d09000
 800af68:	003d0900 	.word	0x003d0900
 800af6c:	017d7840 	.word	0x017d7840
 800af70:	46000000 	.word	0x46000000
 800af74:	4c742400 	.word	0x4c742400
 800af78:	4a742400 	.word	0x4a742400
 800af7c:	4bbebc20 	.word	0x4bbebc20

0800af80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800af86:	f7ff fe81 	bl	800ac8c <HAL_RCC_GetSysClockFreq>
 800af8a:	4602      	mov	r2, r0
 800af8c:	4b10      	ldr	r3, [pc, #64]	; (800afd0 <HAL_RCC_GetHCLKFreq+0x50>)
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	0a1b      	lsrs	r3, r3, #8
 800af92:	f003 030f 	and.w	r3, r3, #15
 800af96:	490f      	ldr	r1, [pc, #60]	; (800afd4 <HAL_RCC_GetHCLKFreq+0x54>)
 800af98:	5ccb      	ldrb	r3, [r1, r3]
 800af9a:	f003 031f 	and.w	r3, r3, #31
 800af9e:	fa22 f303 	lsr.w	r3, r2, r3
 800afa2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800afa4:	4b0a      	ldr	r3, [pc, #40]	; (800afd0 <HAL_RCC_GetHCLKFreq+0x50>)
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	f003 030f 	and.w	r3, r3, #15
 800afac:	4a09      	ldr	r2, [pc, #36]	; (800afd4 <HAL_RCC_GetHCLKFreq+0x54>)
 800afae:	5cd3      	ldrb	r3, [r2, r3]
 800afb0:	f003 031f 	and.w	r3, r3, #31
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	fa22 f303 	lsr.w	r3, r2, r3
 800afba:	4a07      	ldr	r2, [pc, #28]	; (800afd8 <HAL_RCC_GetHCLKFreq+0x58>)
 800afbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800afbe:	4a07      	ldr	r2, [pc, #28]	; (800afdc <HAL_RCC_GetHCLKFreq+0x5c>)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800afc4:	4b04      	ldr	r3, [pc, #16]	; (800afd8 <HAL_RCC_GetHCLKFreq+0x58>)
 800afc6:	681b      	ldr	r3, [r3, #0]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	58024400 	.word	0x58024400
 800afd4:	080170b4 	.word	0x080170b4
 800afd8:	24000088 	.word	0x24000088
 800afdc:	24000084 	.word	0x24000084

0800afe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800afe4:	f7ff ffcc 	bl	800af80 <HAL_RCC_GetHCLKFreq>
 800afe8:	4602      	mov	r2, r0
 800afea:	4b06      	ldr	r3, [pc, #24]	; (800b004 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afec:	69db      	ldr	r3, [r3, #28]
 800afee:	091b      	lsrs	r3, r3, #4
 800aff0:	f003 0307 	and.w	r3, r3, #7
 800aff4:	4904      	ldr	r1, [pc, #16]	; (800b008 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aff6:	5ccb      	ldrb	r3, [r1, r3]
 800aff8:	f003 031f 	and.w	r3, r3, #31
 800affc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b000:	4618      	mov	r0, r3
 800b002:	bd80      	pop	{r7, pc}
 800b004:	58024400 	.word	0x58024400
 800b008:	080170b4 	.word	0x080170b4

0800b00c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b010:	f7ff ffb6 	bl	800af80 <HAL_RCC_GetHCLKFreq>
 800b014:	4602      	mov	r2, r0
 800b016:	4b06      	ldr	r3, [pc, #24]	; (800b030 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	0a1b      	lsrs	r3, r3, #8
 800b01c:	f003 0307 	and.w	r3, r3, #7
 800b020:	4904      	ldr	r1, [pc, #16]	; (800b034 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b022:	5ccb      	ldrb	r3, [r1, r3]
 800b024:	f003 031f 	and.w	r3, r3, #31
 800b028:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	58024400 	.word	0x58024400
 800b034:	080170b4 	.word	0x080170b4

0800b038 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	223f      	movs	r2, #63	; 0x3f
 800b046:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b048:	4b1a      	ldr	r3, [pc, #104]	; (800b0b4 <HAL_RCC_GetClockConfig+0x7c>)
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	f003 0207 	and.w	r2, r3, #7
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b054:	4b17      	ldr	r3, [pc, #92]	; (800b0b4 <HAL_RCC_GetClockConfig+0x7c>)
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b060:	4b14      	ldr	r3, [pc, #80]	; (800b0b4 <HAL_RCC_GetClockConfig+0x7c>)
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	f003 020f 	and.w	r2, r3, #15
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b06c:	4b11      	ldr	r3, [pc, #68]	; (800b0b4 <HAL_RCC_GetClockConfig+0x7c>)
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b078:	4b0e      	ldr	r3, [pc, #56]	; (800b0b4 <HAL_RCC_GetClockConfig+0x7c>)
 800b07a:	69db      	ldr	r3, [r3, #28]
 800b07c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b084:	4b0b      	ldr	r3, [pc, #44]	; (800b0b4 <HAL_RCC_GetClockConfig+0x7c>)
 800b086:	69db      	ldr	r3, [r3, #28]
 800b088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b090:	4b08      	ldr	r3, [pc, #32]	; (800b0b4 <HAL_RCC_GetClockConfig+0x7c>)
 800b092:	6a1b      	ldr	r3, [r3, #32]
 800b094:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b09c:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <HAL_RCC_GetClockConfig+0x80>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 020f 	and.w	r2, r3, #15
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	601a      	str	r2, [r3, #0]
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	58024400 	.word	0x58024400
 800b0b8:	52002000 	.word	0x52002000

0800b0bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0c0:	b0ca      	sub	sp, #296	; 0x128
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0dc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b0e0:	2500      	movs	r5, #0
 800b0e2:	ea54 0305 	orrs.w	r3, r4, r5
 800b0e6:	d049      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0f2:	d02f      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b0f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0f8:	d828      	bhi.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b0fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0fe:	d01a      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b104:	d822      	bhi.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b10a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b10e:	d007      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b110:	e01c      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b112:	4bb8      	ldr	r3, [pc, #736]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b116:	4ab7      	ldr	r2, [pc, #732]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b11c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b11e:	e01a      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b124:	3308      	adds	r3, #8
 800b126:	2102      	movs	r1, #2
 800b128:	4618      	mov	r0, r3
 800b12a:	f002 fb61 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b12e:	4603      	mov	r3, r0
 800b130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b134:	e00f      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b13a:	3328      	adds	r3, #40	; 0x28
 800b13c:	2102      	movs	r1, #2
 800b13e:	4618      	mov	r0, r3
 800b140:	f002 fc08 	bl	800d954 <RCCEx_PLL3_Config>
 800b144:	4603      	mov	r3, r0
 800b146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b14a:	e004      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b152:	e000      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b154:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10a      	bne.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b15e:	4ba5      	ldr	r3, [pc, #660]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b162:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b16a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b16c:	4aa1      	ldr	r2, [pc, #644]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b16e:	430b      	orrs	r3, r1
 800b170:	6513      	str	r3, [r2, #80]	; 0x50
 800b172:	e003      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b178:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b188:	f04f 0900 	mov.w	r9, #0
 800b18c:	ea58 0309 	orrs.w	r3, r8, r9
 800b190:	d047      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b198:	2b04      	cmp	r3, #4
 800b19a:	d82a      	bhi.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b19c:	a201      	add	r2, pc, #4	; (adr r2, 800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a2:	bf00      	nop
 800b1a4:	0800b1b9 	.word	0x0800b1b9
 800b1a8:	0800b1c7 	.word	0x0800b1c7
 800b1ac:	0800b1dd 	.word	0x0800b1dd
 800b1b0:	0800b1fb 	.word	0x0800b1fb
 800b1b4:	0800b1fb 	.word	0x0800b1fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1b8:	4b8e      	ldr	r3, [pc, #568]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1bc:	4a8d      	ldr	r2, [pc, #564]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1c4:	e01a      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f002 fb0e 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1da:	e00f      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e0:	3328      	adds	r3, #40	; 0x28
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f002 fbb5 	bl	800d954 <RCCEx_PLL3_Config>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1f0:	e004      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1f8:	e000      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b1fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10a      	bne.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b204:	4b7b      	ldr	r3, [pc, #492]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b208:	f023 0107 	bic.w	r1, r3, #7
 800b20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b212:	4a78      	ldr	r2, [pc, #480]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b214:	430b      	orrs	r3, r1
 800b216:	6513      	str	r3, [r2, #80]	; 0x50
 800b218:	e003      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b21e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b22e:	f04f 0b00 	mov.w	fp, #0
 800b232:	ea5a 030b 	orrs.w	r3, sl, fp
 800b236:	d04c      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b242:	d030      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b248:	d829      	bhi.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b24a:	2bc0      	cmp	r3, #192	; 0xc0
 800b24c:	d02d      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b24e:	2bc0      	cmp	r3, #192	; 0xc0
 800b250:	d825      	bhi.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b252:	2b80      	cmp	r3, #128	; 0x80
 800b254:	d018      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b256:	2b80      	cmp	r3, #128	; 0x80
 800b258:	d821      	bhi.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b25e:	2b40      	cmp	r3, #64	; 0x40
 800b260:	d007      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b262:	e01c      	b.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b264:	4b63      	ldr	r3, [pc, #396]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b268:	4a62      	ldr	r2, [pc, #392]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b26a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b26e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b270:	e01c      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b276:	3308      	adds	r3, #8
 800b278:	2100      	movs	r1, #0
 800b27a:	4618      	mov	r0, r3
 800b27c:	f002 fab8 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b280:	4603      	mov	r3, r0
 800b282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b286:	e011      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b28c:	3328      	adds	r3, #40	; 0x28
 800b28e:	2100      	movs	r1, #0
 800b290:	4618      	mov	r0, r3
 800b292:	f002 fb5f 	bl	800d954 <RCCEx_PLL3_Config>
 800b296:	4603      	mov	r3, r0
 800b298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b29c:	e006      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2a4:	e002      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b2a6:	bf00      	nop
 800b2a8:	e000      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b2aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10a      	bne.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b2b4:	4b4f      	ldr	r3, [pc, #316]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2c2:	4a4c      	ldr	r2, [pc, #304]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2c4:	430b      	orrs	r3, r1
 800b2c6:	6513      	str	r3, [r2, #80]	; 0x50
 800b2c8:	e003      	b.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b2de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b2e8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	d053      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2fe:	d035      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b304:	d82e      	bhi.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b306:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b30a:	d031      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b30c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b310:	d828      	bhi.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b316:	d01a      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b31c:	d822      	bhi.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b326:	d007      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b328:	e01c      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b32a:	4b32      	ldr	r3, [pc, #200]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32e:	4a31      	ldr	r2, [pc, #196]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b334:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b336:	e01c      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33c:	3308      	adds	r3, #8
 800b33e:	2100      	movs	r1, #0
 800b340:	4618      	mov	r0, r3
 800b342:	f002 fa55 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b34c:	e011      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b352:	3328      	adds	r3, #40	; 0x28
 800b354:	2100      	movs	r1, #0
 800b356:	4618      	mov	r0, r3
 800b358:	f002 fafc 	bl	800d954 <RCCEx_PLL3_Config>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b362:	e006      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b36a:	e002      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b36c:	bf00      	nop
 800b36e:	e000      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b370:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10b      	bne.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b37a:	4b1e      	ldr	r3, [pc, #120]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b37e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b386:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b38a:	4a1a      	ldr	r2, [pc, #104]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b38c:	430b      	orrs	r3, r1
 800b38e:	6593      	str	r3, [r2, #88]	; 0x58
 800b390:	e003      	b.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b3a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b3b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	d056      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3c6:	d038      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b3c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3cc:	d831      	bhi.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3d2:	d034      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b3d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3d8:	d82b      	bhi.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3de:	d01d      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b3e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3e4:	d825      	bhi.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d006      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b3ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3ee:	d00a      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b3f0:	e01f      	b.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3f2:	bf00      	nop
 800b3f4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3f8:	4ba2      	ldr	r3, [pc, #648]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	4aa1      	ldr	r2, [pc, #644]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b404:	e01c      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b40a:	3308      	adds	r3, #8
 800b40c:	2100      	movs	r1, #0
 800b40e:	4618      	mov	r0, r3
 800b410:	f002 f9ee 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b414:	4603      	mov	r3, r0
 800b416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b41a:	e011      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b420:	3328      	adds	r3, #40	; 0x28
 800b422:	2100      	movs	r1, #0
 800b424:	4618      	mov	r0, r3
 800b426:	f002 fa95 	bl	800d954 <RCCEx_PLL3_Config>
 800b42a:	4603      	mov	r3, r0
 800b42c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b430:	e006      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b438:	e002      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b43a:	bf00      	nop
 800b43c:	e000      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b43e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10b      	bne.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b448:	4b8e      	ldr	r3, [pc, #568]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b454:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b458:	4a8a      	ldr	r2, [pc, #552]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b45a:	430b      	orrs	r3, r1
 800b45c:	6593      	str	r3, [r2, #88]	; 0x58
 800b45e:	e003      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b478:	2300      	movs	r3, #0
 800b47a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b47e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b482:	460b      	mov	r3, r1
 800b484:	4313      	orrs	r3, r2
 800b486:	d03a      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b48e:	2b30      	cmp	r3, #48	; 0x30
 800b490:	d01f      	beq.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b492:	2b30      	cmp	r3, #48	; 0x30
 800b494:	d819      	bhi.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b496:	2b20      	cmp	r3, #32
 800b498:	d00c      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b49a:	2b20      	cmp	r3, #32
 800b49c:	d815      	bhi.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d019      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b4a2:	2b10      	cmp	r3, #16
 800b4a4:	d111      	bne.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4a6:	4b77      	ldr	r3, [pc, #476]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4aa:	4a76      	ldr	r2, [pc, #472]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b4b2:	e011      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4b8:	3308      	adds	r3, #8
 800b4ba:	2102      	movs	r1, #2
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f002 f997 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b4c8:	e006      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4d0:	e002      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4d2:	bf00      	nop
 800b4d4:	e000      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b4e0:	4b68      	ldr	r3, [pc, #416]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4e4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ee:	4a65      	ldr	r2, [pc, #404]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4f0:	430b      	orrs	r3, r1
 800b4f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4f4:	e003      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b50a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b50e:	2300      	movs	r3, #0
 800b510:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b514:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b518:	460b      	mov	r3, r1
 800b51a:	4313      	orrs	r3, r2
 800b51c:	d051      	beq.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b528:	d035      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b52a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b52e:	d82e      	bhi.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b530:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b534:	d031      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b536:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b53a:	d828      	bhi.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b53c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b540:	d01a      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b546:	d822      	bhi.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b54c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b550:	d007      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b552:	e01c      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b554:	4b4b      	ldr	r3, [pc, #300]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b558:	4a4a      	ldr	r2, [pc, #296]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b55a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b55e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b560:	e01c      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b566:	3308      	adds	r3, #8
 800b568:	2100      	movs	r1, #0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f002 f940 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b570:	4603      	mov	r3, r0
 800b572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b576:	e011      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57c:	3328      	adds	r3, #40	; 0x28
 800b57e:	2100      	movs	r1, #0
 800b580:	4618      	mov	r0, r3
 800b582:	f002 f9e7 	bl	800d954 <RCCEx_PLL3_Config>
 800b586:	4603      	mov	r3, r0
 800b588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b58c:	e006      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b594:	e002      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b596:	bf00      	nop
 800b598:	e000      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b59a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b59c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10a      	bne.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b5a4:	4b37      	ldr	r3, [pc, #220]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5b2:	4a34      	ldr	r2, [pc, #208]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5b4:	430b      	orrs	r3, r1
 800b5b6:	6513      	str	r3, [r2, #80]	; 0x50
 800b5b8:	e003      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b5ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b5d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b5dc:	460b      	mov	r3, r1
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	d056      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5ec:	d033      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b5ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5f2:	d82c      	bhi.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5f8:	d02f      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b5fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5fe:	d826      	bhi.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b600:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b604:	d02b      	beq.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b606:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b60a:	d820      	bhi.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b60c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b610:	d012      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b616:	d81a      	bhi.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d022      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b61c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b620:	d115      	bne.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b626:	3308      	adds	r3, #8
 800b628:	2101      	movs	r1, #1
 800b62a:	4618      	mov	r0, r3
 800b62c:	f002 f8e0 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b630:	4603      	mov	r3, r0
 800b632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b636:	e015      	b.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63c:	3328      	adds	r3, #40	; 0x28
 800b63e:	2101      	movs	r1, #1
 800b640:	4618      	mov	r0, r3
 800b642:	f002 f987 	bl	800d954 <RCCEx_PLL3_Config>
 800b646:	4603      	mov	r3, r0
 800b648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b64c:	e00a      	b.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b654:	e006      	b.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b656:	bf00      	nop
 800b658:	e004      	b.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b65a:	bf00      	nop
 800b65c:	e002      	b.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b65e:	bf00      	nop
 800b660:	e000      	b.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b662:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10d      	bne.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b66c:	4b05      	ldr	r3, [pc, #20]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b670:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b67a:	4a02      	ldr	r2, [pc, #8]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b67c:	430b      	orrs	r3, r1
 800b67e:	6513      	str	r3, [r2, #80]	; 0x50
 800b680:	e006      	b.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b682:	bf00      	nop
 800b684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b688:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b68c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b69c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b6a6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	d055      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6bc:	d033      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b6be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6c2:	d82c      	bhi.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c8:	d02f      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ce:	d826      	bhi.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6d4:	d02b      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b6d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6da:	d820      	bhi.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6e0:	d012      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b6e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6e6:	d81a      	bhi.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d022      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b6ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6f0:	d115      	bne.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f6:	3308      	adds	r3, #8
 800b6f8:	2101      	movs	r1, #1
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f002 f878 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b700:	4603      	mov	r3, r0
 800b702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b706:	e015      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70c:	3328      	adds	r3, #40	; 0x28
 800b70e:	2101      	movs	r1, #1
 800b710:	4618      	mov	r0, r3
 800b712:	f002 f91f 	bl	800d954 <RCCEx_PLL3_Config>
 800b716:	4603      	mov	r3, r0
 800b718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b71c:	e00a      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b724:	e006      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b726:	bf00      	nop
 800b728:	e004      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b72a:	bf00      	nop
 800b72c:	e002      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b72e:	bf00      	nop
 800b730:	e000      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b732:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10b      	bne.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b73c:	4ba3      	ldr	r3, [pc, #652]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b73e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b740:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b748:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b74c:	4a9f      	ldr	r2, [pc, #636]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b74e:	430b      	orrs	r3, r1
 800b750:	6593      	str	r3, [r2, #88]	; 0x58
 800b752:	e003      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b758:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b76c:	2300      	movs	r3, #0
 800b76e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b772:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b776:	460b      	mov	r3, r1
 800b778:	4313      	orrs	r3, r2
 800b77a:	d037      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b786:	d00e      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b78c:	d816      	bhi.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d018      	beq.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b796:	d111      	bne.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b798:	4b8c      	ldr	r3, [pc, #560]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79c:	4a8b      	ldr	r2, [pc, #556]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b7a4:	e00f      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f002 f81e 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b7ba:	e004      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7c2:	e000      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b7c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10a      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b7ce:	4b7f      	ldr	r3, [pc, #508]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7dc:	4a7b      	ldr	r2, [pc, #492]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7de:	430b      	orrs	r3, r1
 800b7e0:	6513      	str	r3, [r2, #80]	; 0x50
 800b7e2:	e003      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b7f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b802:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b806:	460b      	mov	r3, r1
 800b808:	4313      	orrs	r3, r2
 800b80a:	d039      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b812:	2b03      	cmp	r3, #3
 800b814:	d81c      	bhi.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b816:	a201      	add	r2, pc, #4	; (adr r2, 800b81c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81c:	0800b859 	.word	0x0800b859
 800b820:	0800b82d 	.word	0x0800b82d
 800b824:	0800b83b 	.word	0x0800b83b
 800b828:	0800b859 	.word	0x0800b859
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b82c:	4b67      	ldr	r3, [pc, #412]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	4a66      	ldr	r2, [pc, #408]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b838:	e00f      	b.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83e:	3308      	adds	r3, #8
 800b840:	2102      	movs	r1, #2
 800b842:	4618      	mov	r0, r3
 800b844:	f001 ffd4 	bl	800d7f0 <RCCEx_PLL2_Config>
 800b848:	4603      	mov	r3, r0
 800b84a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b84e:	e004      	b.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b856:	e000      	b.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b85a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10a      	bne.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b862:	4b5a      	ldr	r3, [pc, #360]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b866:	f023 0103 	bic.w	r1, r3, #3
 800b86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b870:	4a56      	ldr	r2, [pc, #344]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b872:	430b      	orrs	r3, r1
 800b874:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b876:	e003      	b.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b87c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b88c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b890:	2300      	movs	r3, #0
 800b892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b896:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b89a:	460b      	mov	r3, r1
 800b89c:	4313      	orrs	r3, r2
 800b89e:	f000 809f 	beq.w	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8a2:	4b4b      	ldr	r3, [pc, #300]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a4a      	ldr	r2, [pc, #296]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b8ae:	f7f8 fc09 	bl	80040c4 <HAL_GetTick>
 800b8b2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8b6:	e00b      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8b8:	f7f8 fc04 	bl	80040c4 <HAL_GetTick>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	2b64      	cmp	r3, #100	; 0x64
 800b8c6:	d903      	bls.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8ce:	e005      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8d0:	4b3f      	ldr	r3, [pc, #252]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d0ed      	beq.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b8dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d179      	bne.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b8e4:	4b39      	ldr	r3, [pc, #228]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8f0:	4053      	eors	r3, r2
 800b8f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d015      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b8fa:	4b34      	ldr	r3, [pc, #208]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b902:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b906:	4b31      	ldr	r3, [pc, #196]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b90a:	4a30      	ldr	r2, [pc, #192]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b90c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b910:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b912:	4b2e      	ldr	r3, [pc, #184]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b916:	4a2d      	ldr	r2, [pc, #180]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b91c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b91e:	4a2b      	ldr	r2, [pc, #172]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b920:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b924:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b932:	d118      	bne.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b934:	f7f8 fbc6 	bl	80040c4 <HAL_GetTick>
 800b938:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b93c:	e00d      	b.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b93e:	f7f8 fbc1 	bl	80040c4 <HAL_GetTick>
 800b942:	4602      	mov	r2, r0
 800b944:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b948:	1ad2      	subs	r2, r2, r3
 800b94a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b94e:	429a      	cmp	r2, r3
 800b950:	d903      	bls.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b952:	2303      	movs	r3, #3
 800b954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b958:	e005      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b95a:	4b1c      	ldr	r3, [pc, #112]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b00      	cmp	r3, #0
 800b964:	d0eb      	beq.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d129      	bne.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b972:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b97a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b97e:	d10e      	bne.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b980:	4b12      	ldr	r3, [pc, #72]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b98c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b990:	091a      	lsrs	r2, r3, #4
 800b992:	4b10      	ldr	r3, [pc, #64]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b994:	4013      	ands	r3, r2
 800b996:	4a0d      	ldr	r2, [pc, #52]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b998:	430b      	orrs	r3, r1
 800b99a:	6113      	str	r3, [r2, #16]
 800b99c:	e005      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b99e:	4b0b      	ldr	r3, [pc, #44]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	4a0a      	ldr	r2, [pc, #40]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b9a8:	6113      	str	r3, [r2, #16]
 800b9aa:	4b08      	ldr	r3, [pc, #32]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9ba:	4a04      	ldr	r2, [pc, #16]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9bc:	430b      	orrs	r3, r1
 800b9be:	6713      	str	r3, [r2, #112]	; 0x70
 800b9c0:	e00e      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b9ca:	e009      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b9cc:	58024400 	.word	0x58024400
 800b9d0:	58024800 	.word	0x58024800
 800b9d4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	f002 0301 	and.w	r3, r2, #1
 800b9ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	f000 8089 	beq.w	800bb14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ba02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba08:	2b28      	cmp	r3, #40	; 0x28
 800ba0a:	d86b      	bhi.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ba0c:	a201      	add	r2, pc, #4	; (adr r2, 800ba14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba12:	bf00      	nop
 800ba14:	0800baed 	.word	0x0800baed
 800ba18:	0800bae5 	.word	0x0800bae5
 800ba1c:	0800bae5 	.word	0x0800bae5
 800ba20:	0800bae5 	.word	0x0800bae5
 800ba24:	0800bae5 	.word	0x0800bae5
 800ba28:	0800bae5 	.word	0x0800bae5
 800ba2c:	0800bae5 	.word	0x0800bae5
 800ba30:	0800bae5 	.word	0x0800bae5
 800ba34:	0800bab9 	.word	0x0800bab9
 800ba38:	0800bae5 	.word	0x0800bae5
 800ba3c:	0800bae5 	.word	0x0800bae5
 800ba40:	0800bae5 	.word	0x0800bae5
 800ba44:	0800bae5 	.word	0x0800bae5
 800ba48:	0800bae5 	.word	0x0800bae5
 800ba4c:	0800bae5 	.word	0x0800bae5
 800ba50:	0800bae5 	.word	0x0800bae5
 800ba54:	0800bacf 	.word	0x0800bacf
 800ba58:	0800bae5 	.word	0x0800bae5
 800ba5c:	0800bae5 	.word	0x0800bae5
 800ba60:	0800bae5 	.word	0x0800bae5
 800ba64:	0800bae5 	.word	0x0800bae5
 800ba68:	0800bae5 	.word	0x0800bae5
 800ba6c:	0800bae5 	.word	0x0800bae5
 800ba70:	0800bae5 	.word	0x0800bae5
 800ba74:	0800baed 	.word	0x0800baed
 800ba78:	0800bae5 	.word	0x0800bae5
 800ba7c:	0800bae5 	.word	0x0800bae5
 800ba80:	0800bae5 	.word	0x0800bae5
 800ba84:	0800bae5 	.word	0x0800bae5
 800ba88:	0800bae5 	.word	0x0800bae5
 800ba8c:	0800bae5 	.word	0x0800bae5
 800ba90:	0800bae5 	.word	0x0800bae5
 800ba94:	0800baed 	.word	0x0800baed
 800ba98:	0800bae5 	.word	0x0800bae5
 800ba9c:	0800bae5 	.word	0x0800bae5
 800baa0:	0800bae5 	.word	0x0800bae5
 800baa4:	0800bae5 	.word	0x0800bae5
 800baa8:	0800bae5 	.word	0x0800bae5
 800baac:	0800bae5 	.word	0x0800bae5
 800bab0:	0800bae5 	.word	0x0800bae5
 800bab4:	0800baed 	.word	0x0800baed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800babc:	3308      	adds	r3, #8
 800babe:	2101      	movs	r1, #1
 800bac0:	4618      	mov	r0, r3
 800bac2:	f001 fe95 	bl	800d7f0 <RCCEx_PLL2_Config>
 800bac6:	4603      	mov	r3, r0
 800bac8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bacc:	e00f      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad2:	3328      	adds	r3, #40	; 0x28
 800bad4:	2101      	movs	r1, #1
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 ff3c 	bl	800d954 <RCCEx_PLL3_Config>
 800badc:	4603      	mov	r3, r0
 800bade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bae2:	e004      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baea:	e000      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800baec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10a      	bne.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800baf6:	4bbf      	ldr	r3, [pc, #764]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800baf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bafa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb04:	4abb      	ldr	r2, [pc, #748]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb06:	430b      	orrs	r3, r1
 800bb08:	6553      	str	r3, [r2, #84]	; 0x54
 800bb0a:	e003      	b.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bb14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1c:	f002 0302 	and.w	r3, r2, #2
 800bb20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb24:	2300      	movs	r3, #0
 800bb26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4313      	orrs	r3, r2
 800bb32:	d041      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb3a:	2b05      	cmp	r3, #5
 800bb3c:	d824      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bb3e:	a201      	add	r2, pc, #4	; (adr r2, 800bb44 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb44:	0800bb91 	.word	0x0800bb91
 800bb48:	0800bb5d 	.word	0x0800bb5d
 800bb4c:	0800bb73 	.word	0x0800bb73
 800bb50:	0800bb91 	.word	0x0800bb91
 800bb54:	0800bb91 	.word	0x0800bb91
 800bb58:	0800bb91 	.word	0x0800bb91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb60:	3308      	adds	r3, #8
 800bb62:	2101      	movs	r1, #1
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 fe43 	bl	800d7f0 <RCCEx_PLL2_Config>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb70:	e00f      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb76:	3328      	adds	r3, #40	; 0x28
 800bb78:	2101      	movs	r1, #1
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f001 feea 	bl	800d954 <RCCEx_PLL3_Config>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb86:	e004      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb8e:	e000      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bb90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10a      	bne.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb9a:	4b96      	ldr	r3, [pc, #600]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9e:	f023 0107 	bic.w	r1, r3, #7
 800bba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bba8:	4a92      	ldr	r2, [pc, #584]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbaa:	430b      	orrs	r3, r1
 800bbac:	6553      	str	r3, [r2, #84]	; 0x54
 800bbae:	e003      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	f002 0304 	and.w	r3, r2, #4
 800bbc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	d044      	beq.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bbd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbe0:	2b05      	cmp	r3, #5
 800bbe2:	d825      	bhi.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bbe4:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbea:	bf00      	nop
 800bbec:	0800bc39 	.word	0x0800bc39
 800bbf0:	0800bc05 	.word	0x0800bc05
 800bbf4:	0800bc1b 	.word	0x0800bc1b
 800bbf8:	0800bc39 	.word	0x0800bc39
 800bbfc:	0800bc39 	.word	0x0800bc39
 800bc00:	0800bc39 	.word	0x0800bc39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc08:	3308      	adds	r3, #8
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f001 fdef 	bl	800d7f0 <RCCEx_PLL2_Config>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc18:	e00f      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc1e:	3328      	adds	r3, #40	; 0x28
 800bc20:	2101      	movs	r1, #1
 800bc22:	4618      	mov	r0, r3
 800bc24:	f001 fe96 	bl	800d954 <RCCEx_PLL3_Config>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc2e:	e004      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc36:	e000      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bc38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10b      	bne.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc42:	4b6c      	ldr	r3, [pc, #432]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc46:	f023 0107 	bic.w	r1, r3, #7
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc52:	4a68      	ldr	r2, [pc, #416]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc54:	430b      	orrs	r3, r1
 800bc56:	6593      	str	r3, [r2, #88]	; 0x58
 800bc58:	e003      	b.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	f002 0320 	and.w	r3, r2, #32
 800bc6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc72:	2300      	movs	r3, #0
 800bc74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	d055      	beq.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc8e:	d033      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bc90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc94:	d82c      	bhi.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc9a:	d02f      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bc9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bca0:	d826      	bhi.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bca6:	d02b      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcac:	d820      	bhi.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bcae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb2:	d012      	beq.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bcb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb8:	d81a      	bhi.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d022      	beq.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bcbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcc2:	d115      	bne.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc8:	3308      	adds	r3, #8
 800bcca:	2100      	movs	r1, #0
 800bccc:	4618      	mov	r0, r3
 800bcce:	f001 fd8f 	bl	800d7f0 <RCCEx_PLL2_Config>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcd8:	e015      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcde:	3328      	adds	r3, #40	; 0x28
 800bce0:	2102      	movs	r1, #2
 800bce2:	4618      	mov	r0, r3
 800bce4:	f001 fe36 	bl	800d954 <RCCEx_PLL3_Config>
 800bce8:	4603      	mov	r3, r0
 800bcea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcee:	e00a      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcf6:	e006      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcf8:	bf00      	nop
 800bcfa:	e004      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcfc:	bf00      	nop
 800bcfe:	e002      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bd00:	bf00      	nop
 800bd02:	e000      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bd04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10b      	bne.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd0e:	4b39      	ldr	r3, [pc, #228]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd12:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd1e:	4a35      	ldr	r2, [pc, #212]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd20:	430b      	orrs	r3, r1
 800bd22:	6553      	str	r3, [r2, #84]	; 0x54
 800bd24:	e003      	b.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bd2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bd3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bd44:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bd48:	460b      	mov	r3, r1
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	d058      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd5a:	d033      	beq.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bd5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd60:	d82c      	bhi.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd66:	d02f      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bd68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd6c:	d826      	bhi.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd72:	d02b      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bd74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd78:	d820      	bhi.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd7e:	d012      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bd80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd84:	d81a      	bhi.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d022      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bd8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd8e:	d115      	bne.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd94:	3308      	adds	r3, #8
 800bd96:	2100      	movs	r1, #0
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f001 fd29 	bl	800d7f0 <RCCEx_PLL2_Config>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bda4:	e015      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdaa:	3328      	adds	r3, #40	; 0x28
 800bdac:	2102      	movs	r1, #2
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f001 fdd0 	bl	800d954 <RCCEx_PLL3_Config>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bdba:	e00a      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdc2:	e006      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdc4:	bf00      	nop
 800bdc6:	e004      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdc8:	bf00      	nop
 800bdca:	e002      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdcc:	bf00      	nop
 800bdce:	e000      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10e      	bne.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bdda:	4b06      	ldr	r3, [pc, #24]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdde:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bde2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdea:	4a02      	ldr	r2, [pc, #8]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdec:	430b      	orrs	r3, r1
 800bdee:	6593      	str	r3, [r2, #88]	; 0x58
 800bdf0:	e006      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bdf2:	bf00      	nop
 800bdf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800be00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800be0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be10:	2300      	movs	r3, #0
 800be12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be16:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800be1a:	460b      	mov	r3, r1
 800be1c:	4313      	orrs	r3, r2
 800be1e:	d055      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800be20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be28:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be2c:	d033      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800be2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be32:	d82c      	bhi.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be38:	d02f      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800be3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be3e:	d826      	bhi.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be40:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be44:	d02b      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800be46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be4a:	d820      	bhi.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be50:	d012      	beq.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800be52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be56:	d81a      	bhi.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d022      	beq.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800be5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be60:	d115      	bne.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be66:	3308      	adds	r3, #8
 800be68:	2100      	movs	r1, #0
 800be6a:	4618      	mov	r0, r3
 800be6c:	f001 fcc0 	bl	800d7f0 <RCCEx_PLL2_Config>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be76:	e015      	b.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be7c:	3328      	adds	r3, #40	; 0x28
 800be7e:	2102      	movs	r1, #2
 800be80:	4618      	mov	r0, r3
 800be82:	f001 fd67 	bl	800d954 <RCCEx_PLL3_Config>
 800be86:	4603      	mov	r3, r0
 800be88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be8c:	e00a      	b.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be94:	e006      	b.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be96:	bf00      	nop
 800be98:	e004      	b.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be9a:	bf00      	nop
 800be9c:	e002      	b.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be9e:	bf00      	nop
 800bea0:	e000      	b.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10b      	bne.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800beac:	4ba1      	ldr	r3, [pc, #644]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800beb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bebc:	4a9d      	ldr	r2, [pc, #628]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bebe:	430b      	orrs	r3, r1
 800bec0:	6593      	str	r3, [r2, #88]	; 0x58
 800bec2:	e003      	b.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800becc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed4:	f002 0308 	and.w	r3, r2, #8
 800bed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bedc:	2300      	movs	r3, #0
 800bede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bee2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bee6:	460b      	mov	r3, r1
 800bee8:	4313      	orrs	r3, r2
 800beea:	d01e      	beq.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800beec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef8:	d10c      	bne.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800befa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800befe:	3328      	adds	r3, #40	; 0x28
 800bf00:	2102      	movs	r1, #2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f001 fd26 	bl	800d954 <RCCEx_PLL3_Config>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d002      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bf14:	4b87      	ldr	r3, [pc, #540]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf24:	4a83      	ldr	r2, [pc, #524]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf26:	430b      	orrs	r3, r1
 800bf28:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	f002 0310 	and.w	r3, r2, #16
 800bf36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf40:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bf44:	460b      	mov	r3, r1
 800bf46:	4313      	orrs	r3, r2
 800bf48:	d01e      	beq.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bf4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf56:	d10c      	bne.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf5c:	3328      	adds	r3, #40	; 0x28
 800bf5e:	2102      	movs	r1, #2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f001 fcf7 	bl	800d954 <RCCEx_PLL3_Config>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf72:	4b70      	ldr	r3, [pc, #448]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf82:	4a6c      	ldr	r2, [pc, #432]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf84:	430b      	orrs	r3, r1
 800bf86:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bf94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf9e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	d03e      	beq.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bfa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bfb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfb4:	d022      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bfb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfba:	d81b      	bhi.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bfc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc4:	d00b      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bfc6:	e015      	b.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfcc:	3308      	adds	r3, #8
 800bfce:	2100      	movs	r1, #0
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f001 fc0d 	bl	800d7f0 <RCCEx_PLL2_Config>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfdc:	e00f      	b.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe2:	3328      	adds	r3, #40	; 0x28
 800bfe4:	2102      	movs	r1, #2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f001 fcb4 	bl	800d954 <RCCEx_PLL3_Config>
 800bfec:	4603      	mov	r3, r0
 800bfee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bff2:	e004      	b.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bffa:	e000      	b.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10b      	bne.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c006:	4b4b      	ldr	r3, [pc, #300]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c00a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c012:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c016:	4a47      	ldr	r2, [pc, #284]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c018:	430b      	orrs	r3, r1
 800c01a:	6593      	str	r3, [r2, #88]	; 0x58
 800c01c:	e003      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c01e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c032:	67bb      	str	r3, [r7, #120]	; 0x78
 800c034:	2300      	movs	r3, #0
 800c036:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c038:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c03c:	460b      	mov	r3, r1
 800c03e:	4313      	orrs	r3, r2
 800c040:	d03b      	beq.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c04e:	d01f      	beq.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c050:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c054:	d818      	bhi.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c05a:	d003      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c05c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c060:	d007      	beq.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c062:	e011      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c064:	4b33      	ldr	r3, [pc, #204]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c068:	4a32      	ldr	r2, [pc, #200]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c06a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c06e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c070:	e00f      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c076:	3328      	adds	r3, #40	; 0x28
 800c078:	2101      	movs	r1, #1
 800c07a:	4618      	mov	r0, r3
 800c07c:	f001 fc6a 	bl	800d954 <RCCEx_PLL3_Config>
 800c080:	4603      	mov	r3, r0
 800c082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c086:	e004      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c08e:	e000      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c090:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10b      	bne.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c09a:	4b26      	ldr	r3, [pc, #152]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c09e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0aa:	4a22      	ldr	r2, [pc, #136]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0ac:	430b      	orrs	r3, r1
 800c0ae:	6553      	str	r3, [r2, #84]	; 0x54
 800c0b0:	e003      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c0c6:	673b      	str	r3, [r7, #112]	; 0x70
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	677b      	str	r3, [r7, #116]	; 0x74
 800c0cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	d034      	beq.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d003      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0e4:	d007      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c0e6:	e011      	b.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0e8:	4b12      	ldr	r3, [pc, #72]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ec:	4a11      	ldr	r2, [pc, #68]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0f4:	e00e      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0fa:	3308      	adds	r3, #8
 800c0fc:	2102      	movs	r1, #2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f001 fb76 	bl	800d7f0 <RCCEx_PLL2_Config>
 800c104:	4603      	mov	r3, r0
 800c106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c10a:	e003      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c112:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10d      	bne.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c11c:	4b05      	ldr	r3, [pc, #20]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c11e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c120:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c12a:	4a02      	ldr	r2, [pc, #8]	; (800c134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c12c:	430b      	orrs	r3, r1
 800c12e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c130:	e006      	b.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c132:	bf00      	nop
 800c134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c13c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c14c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c14e:	2300      	movs	r3, #0
 800c150:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c152:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c156:	460b      	mov	r3, r1
 800c158:	4313      	orrs	r3, r2
 800c15a:	d00c      	beq.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c160:	3328      	adds	r3, #40	; 0x28
 800c162:	2102      	movs	r1, #2
 800c164:	4618      	mov	r0, r3
 800c166:	f001 fbf5 	bl	800d954 <RCCEx_PLL3_Config>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d002      	beq.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c182:	663b      	str	r3, [r7, #96]	; 0x60
 800c184:	2300      	movs	r3, #0
 800c186:	667b      	str	r3, [r7, #100]	; 0x64
 800c188:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c18c:	460b      	mov	r3, r1
 800c18e:	4313      	orrs	r3, r2
 800c190:	d038      	beq.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c19a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c19e:	d018      	beq.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c1a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1a4:	d811      	bhi.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c1a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1aa:	d014      	beq.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c1ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1b0:	d80b      	bhi.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d011      	beq.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ba:	d106      	bne.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1bc:	4bc3      	ldr	r3, [pc, #780]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c0:	4ac2      	ldr	r2, [pc, #776]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c1c8:	e008      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1d0:	e004      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1d2:	bf00      	nop
 800c1d4:	e002      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1d6:	bf00      	nop
 800c1d8:	e000      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10b      	bne.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1e4:	4bb9      	ldr	r3, [pc, #740]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1f4:	4ab5      	ldr	r2, [pc, #724]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1f6:	430b      	orrs	r3, r1
 800c1f8:	6553      	str	r3, [r2, #84]	; 0x54
 800c1fa:	e003      	b.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c200:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c210:	65bb      	str	r3, [r7, #88]	; 0x58
 800c212:	2300      	movs	r3, #0
 800c214:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c216:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c21a:	460b      	mov	r3, r1
 800c21c:	4313      	orrs	r3, r2
 800c21e:	d009      	beq.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c220:	4baa      	ldr	r3, [pc, #680]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c224:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c22c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c22e:	4aa7      	ldr	r2, [pc, #668]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c230:	430b      	orrs	r3, r1
 800c232:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c240:	653b      	str	r3, [r7, #80]	; 0x50
 800c242:	2300      	movs	r3, #0
 800c244:	657b      	str	r3, [r7, #84]	; 0x54
 800c246:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c24a:	460b      	mov	r3, r1
 800c24c:	4313      	orrs	r3, r2
 800c24e:	d00a      	beq.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c250:	4b9e      	ldr	r3, [pc, #632]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c260:	4a9a      	ldr	r2, [pc, #616]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c262:	430b      	orrs	r3, r1
 800c264:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c272:	64bb      	str	r3, [r7, #72]	; 0x48
 800c274:	2300      	movs	r3, #0
 800c276:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c278:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c27c:	460b      	mov	r3, r1
 800c27e:	4313      	orrs	r3, r2
 800c280:	d009      	beq.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c282:	4b92      	ldr	r3, [pc, #584]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c286:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c290:	4a8e      	ldr	r2, [pc, #568]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c292:	430b      	orrs	r3, r1
 800c294:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c2a2:	643b      	str	r3, [r7, #64]	; 0x40
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	647b      	str	r3, [r7, #68]	; 0x44
 800c2a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	d00e      	beq.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c2b2:	4b86      	ldr	r3, [pc, #536]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	4a85      	ldr	r2, [pc, #532]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2bc:	6113      	str	r3, [r2, #16]
 800c2be:	4b83      	ldr	r3, [pc, #524]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2c0:	6919      	ldr	r1, [r3, #16]
 800c2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c2ca:	4a80      	ldr	r2, [pc, #512]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2cc:	430b      	orrs	r3, r1
 800c2ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c2dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2de:	2300      	movs	r3, #0
 800c2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	d009      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c2ec:	4b77      	ldr	r3, [pc, #476]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2f0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fa:	4a74      	ldr	r2, [pc, #464]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2fc:	430b      	orrs	r3, r1
 800c2fe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c308:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c30c:	633b      	str	r3, [r7, #48]	; 0x30
 800c30e:	2300      	movs	r3, #0
 800c310:	637b      	str	r3, [r7, #52]	; 0x34
 800c312:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c316:	460b      	mov	r3, r1
 800c318:	4313      	orrs	r3, r2
 800c31a:	d00a      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c31c:	4b6b      	ldr	r3, [pc, #428]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c320:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c32c:	4a67      	ldr	r2, [pc, #412]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c32e:	430b      	orrs	r3, r1
 800c330:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	2100      	movs	r1, #0
 800c33c:	62b9      	str	r1, [r7, #40]	; 0x28
 800c33e:	f003 0301 	and.w	r3, r3, #1
 800c342:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c344:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c348:	460b      	mov	r3, r1
 800c34a:	4313      	orrs	r3, r2
 800c34c:	d011      	beq.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c352:	3308      	adds	r3, #8
 800c354:	2100      	movs	r1, #0
 800c356:	4618      	mov	r0, r3
 800c358:	f001 fa4a 	bl	800d7f0 <RCCEx_PLL2_Config>
 800c35c:	4603      	mov	r3, r0
 800c35e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c36a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c36e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37a:	2100      	movs	r1, #0
 800c37c:	6239      	str	r1, [r7, #32]
 800c37e:	f003 0302 	and.w	r3, r3, #2
 800c382:	627b      	str	r3, [r7, #36]	; 0x24
 800c384:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c388:	460b      	mov	r3, r1
 800c38a:	4313      	orrs	r3, r2
 800c38c:	d011      	beq.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c392:	3308      	adds	r3, #8
 800c394:	2101      	movs	r1, #1
 800c396:	4618      	mov	r0, r3
 800c398:	f001 fa2a 	bl	800d7f0 <RCCEx_PLL2_Config>
 800c39c:	4603      	mov	r3, r0
 800c39e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d003      	beq.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	61b9      	str	r1, [r7, #24]
 800c3be:	f003 0304 	and.w	r3, r3, #4
 800c3c2:	61fb      	str	r3, [r7, #28]
 800c3c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	d011      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3d2:	3308      	adds	r3, #8
 800c3d4:	2102      	movs	r1, #2
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f001 fa0a 	bl	800d7f0 <RCCEx_PLL2_Config>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	6139      	str	r1, [r7, #16]
 800c3fe:	f003 0308 	and.w	r3, r3, #8
 800c402:	617b      	str	r3, [r7, #20]
 800c404:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c408:	460b      	mov	r3, r1
 800c40a:	4313      	orrs	r3, r2
 800c40c:	d011      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c412:	3328      	adds	r3, #40	; 0x28
 800c414:	2100      	movs	r1, #0
 800c416:	4618      	mov	r0, r3
 800c418:	f001 fa9c 	bl	800d954 <RCCEx_PLL3_Config>
 800c41c:	4603      	mov	r3, r0
 800c41e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c426:	2b00      	cmp	r3, #0
 800c428:	d003      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c42a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c42e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	2100      	movs	r1, #0
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	f003 0310 	and.w	r3, r3, #16
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c448:	460b      	mov	r3, r1
 800c44a:	4313      	orrs	r3, r2
 800c44c:	d011      	beq.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c452:	3328      	adds	r3, #40	; 0x28
 800c454:	2101      	movs	r1, #1
 800c456:	4618      	mov	r0, r3
 800c458:	f001 fa7c 	bl	800d954 <RCCEx_PLL3_Config>
 800c45c:	4603      	mov	r3, r0
 800c45e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c466:	2b00      	cmp	r3, #0
 800c468:	d003      	beq.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c46a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c46e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	2100      	movs	r1, #0
 800c47c:	6039      	str	r1, [r7, #0]
 800c47e:	f003 0320 	and.w	r3, r3, #32
 800c482:	607b      	str	r3, [r7, #4]
 800c484:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c488:	460b      	mov	r3, r1
 800c48a:	4313      	orrs	r3, r2
 800c48c:	d011      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c492:	3328      	adds	r3, #40	; 0x28
 800c494:	2102      	movs	r1, #2
 800c496:	4618      	mov	r0, r3
 800c498:	f001 fa5c 	bl	800d954 <RCCEx_PLL3_Config>
 800c49c:	4603      	mov	r3, r0
 800c49e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c4a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d003      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c4b2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d101      	bne.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e000      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4cc:	58024400 	.word	0x58024400

0800c4d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b090      	sub	sp, #64	; 0x40
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c4da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4de:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c4e2:	430b      	orrs	r3, r1
 800c4e4:	f040 8094 	bne.w	800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c4e8:	4b9e      	ldr	r3, [pc, #632]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4ec:	f003 0307 	and.w	r3, r3, #7
 800c4f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	2b04      	cmp	r3, #4
 800c4f6:	f200 8087 	bhi.w	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c4fa:	a201      	add	r2, pc, #4	; (adr r2, 800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c500:	0800c515 	.word	0x0800c515
 800c504:	0800c53d 	.word	0x0800c53d
 800c508:	0800c565 	.word	0x0800c565
 800c50c:	0800c601 	.word	0x0800c601
 800c510:	0800c58d 	.word	0x0800c58d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c514:	4b93      	ldr	r3, [pc, #588]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c51c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c520:	d108      	bne.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c526:	4618      	mov	r0, r3
 800c528:	f001 f810 	bl	800d54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c530:	f000 bd45 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c534:	2300      	movs	r3, #0
 800c536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c538:	f000 bd41 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c53c:	4b89      	ldr	r3, [pc, #548]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c548:	d108      	bne.n	800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c54a:	f107 0318 	add.w	r3, r7, #24
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 fd54 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c558:	f000 bd31 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c560:	f000 bd2d 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c564:	4b7f      	ldr	r3, [pc, #508]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c56c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c570:	d108      	bne.n	800c584 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c572:	f107 030c 	add.w	r3, r7, #12
 800c576:	4618      	mov	r0, r3
 800c578:	f000 fe94 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c580:	f000 bd1d 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c584:	2300      	movs	r3, #0
 800c586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c588:	f000 bd19 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c58c:	4b75      	ldr	r3, [pc, #468]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c58e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c590:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c594:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c596:	4b73      	ldr	r3, [pc, #460]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f003 0304 	and.w	r3, r3, #4
 800c59e:	2b04      	cmp	r3, #4
 800c5a0:	d10c      	bne.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d109      	bne.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5a8:	4b6e      	ldr	r3, [pc, #440]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	08db      	lsrs	r3, r3, #3
 800c5ae:	f003 0303 	and.w	r3, r3, #3
 800c5b2:	4a6d      	ldr	r2, [pc, #436]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ba:	e01f      	b.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5bc:	4b69      	ldr	r3, [pc, #420]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5c8:	d106      	bne.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5d0:	d102      	bne.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5d2:	4b66      	ldr	r3, [pc, #408]	; (800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5d6:	e011      	b.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5d8:	4b62      	ldr	r3, [pc, #392]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e4:	d106      	bne.n	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5ec:	d102      	bne.n	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5ee:	4b60      	ldr	r3, [pc, #384]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f2:	e003      	b.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5f8:	f000 bce1 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5fc:	f000 bcdf 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c600:	4b5c      	ldr	r3, [pc, #368]	; (800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c604:	f000 bcdb 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c608:	2300      	movs	r3, #0
 800c60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c60c:	f000 bcd7 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c614:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c618:	430b      	orrs	r3, r1
 800c61a:	f040 80ad 	bne.w	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c61e:	4b51      	ldr	r3, [pc, #324]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c622:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c626:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c62e:	d056      	beq.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c636:	f200 8090 	bhi.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	2bc0      	cmp	r3, #192	; 0xc0
 800c63e:	f000 8088 	beq.w	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c644:	2bc0      	cmp	r3, #192	; 0xc0
 800c646:	f200 8088 	bhi.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64c:	2b80      	cmp	r3, #128	; 0x80
 800c64e:	d032      	beq.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c652:	2b80      	cmp	r3, #128	; 0x80
 800c654:	f200 8081 	bhi.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c660:	2b40      	cmp	r3, #64	; 0x40
 800c662:	d014      	beq.n	800c68e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c664:	e079      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c666:	4b3f      	ldr	r3, [pc, #252]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c66e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c672:	d108      	bne.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 ff67 	bl	800d54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c682:	f000 bc9c 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c68a:	f000 bc98 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c68e:	4b35      	ldr	r3, [pc, #212]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c69a:	d108      	bne.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c69c:	f107 0318 	add.w	r3, r7, #24
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f000 fcab 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6aa:	f000 bc88 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b2:	f000 bc84 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6b6:	4b2b      	ldr	r3, [pc, #172]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6c2:	d108      	bne.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6c4:	f107 030c 	add.w	r3, r7, #12
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f000 fdeb 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6d2:	f000 bc74 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6da:	f000 bc70 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6de:	4b21      	ldr	r3, [pc, #132]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6e8:	4b1e      	ldr	r3, [pc, #120]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 0304 	and.w	r3, r3, #4
 800c6f0:	2b04      	cmp	r3, #4
 800c6f2:	d10c      	bne.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d109      	bne.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6fa:	4b1a      	ldr	r3, [pc, #104]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	08db      	lsrs	r3, r3, #3
 800c700:	f003 0303 	and.w	r3, r3, #3
 800c704:	4a18      	ldr	r2, [pc, #96]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c706:	fa22 f303 	lsr.w	r3, r2, r3
 800c70a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c70c:	e01f      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c70e:	4b15      	ldr	r3, [pc, #84]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c71a:	d106      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c722:	d102      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c724:	4b11      	ldr	r3, [pc, #68]	; (800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c728:	e011      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c72a:	4b0e      	ldr	r3, [pc, #56]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c736:	d106      	bne.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c73e:	d102      	bne.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c740:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c744:	e003      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c746:	2300      	movs	r3, #0
 800c748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c74a:	f000 bc38 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c74e:	f000 bc36 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c752:	4b08      	ldr	r3, [pc, #32]	; (800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c756:	f000 bc32 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75e:	f000 bc2e 	b.w	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c762:	bf00      	nop
 800c764:	58024400 	.word	0x58024400
 800c768:	03d09000 	.word	0x03d09000
 800c76c:	003d0900 	.word	0x003d0900
 800c770:	017d7840 	.word	0x017d7840
 800c774:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c77c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c780:	430b      	orrs	r3, r1
 800c782:	f040 809c 	bne.w	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c786:	4b9e      	ldr	r3, [pc, #632]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c78a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c78e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c796:	d054      	beq.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c79e:	f200 808b 	bhi.w	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c7a8:	f000 8083 	beq.w	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c7b2:	f200 8081 	bhi.w	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7bc:	d02f      	beq.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7c4:	d878      	bhi.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d004      	beq.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7d2:	d012      	beq.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c7d4:	e070      	b.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7d6:	4b8a      	ldr	r3, [pc, #552]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7e2:	d107      	bne.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 feaf 	bl	800d54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7f2:	e3e4      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f8:	e3e1      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7fa:	4b81      	ldr	r3, [pc, #516]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c806:	d107      	bne.n	800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c808:	f107 0318 	add.w	r3, r7, #24
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 fbf5 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c816:	e3d2      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c818:	2300      	movs	r3, #0
 800c81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c81c:	e3cf      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c81e:	4b78      	ldr	r3, [pc, #480]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c82a:	d107      	bne.n	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c82c:	f107 030c 	add.w	r3, r7, #12
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fd37 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c83a:	e3c0      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c840:	e3bd      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c842:	4b6f      	ldr	r3, [pc, #444]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c84a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c84c:	4b6c      	ldr	r3, [pc, #432]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0304 	and.w	r3, r3, #4
 800c854:	2b04      	cmp	r3, #4
 800c856:	d10c      	bne.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d109      	bne.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c85e:	4b68      	ldr	r3, [pc, #416]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	08db      	lsrs	r3, r3, #3
 800c864:	f003 0303 	and.w	r3, r3, #3
 800c868:	4a66      	ldr	r2, [pc, #408]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c86a:	fa22 f303 	lsr.w	r3, r2, r3
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c870:	e01e      	b.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c872:	4b63      	ldr	r3, [pc, #396]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c87e:	d106      	bne.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c886:	d102      	bne.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c888:	4b5f      	ldr	r3, [pc, #380]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c88c:	e010      	b.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c88e:	4b5c      	ldr	r3, [pc, #368]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c89a:	d106      	bne.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a2:	d102      	bne.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8a4:	4b59      	ldr	r3, [pc, #356]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8a8:	e002      	b.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8ae:	e386      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8b0:	e385      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8b2:	4b57      	ldr	r3, [pc, #348]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b6:	e382      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8bc:	e37f      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c8be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8c2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c8c6:	430b      	orrs	r3, r1
 800c8c8:	f040 80a7 	bne.w	800ca1a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c8cc:	4b4c      	ldr	r3, [pc, #304]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c8d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8dc:	d055      	beq.n	800c98a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8e4:	f200 8096 	bhi.w	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8ee:	f000 8084 	beq.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8f8:	f200 808c 	bhi.w	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c902:	d030      	beq.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c90a:	f200 8083 	bhi.w	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	2b00      	cmp	r3, #0
 800c912:	d004      	beq.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c916:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c91a:	d012      	beq.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c91c:	e07a      	b.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c91e:	4b38      	ldr	r3, [pc, #224]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c92a:	d107      	bne.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c92c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c930:	4618      	mov	r0, r3
 800c932:	f000 fe0b 	bl	800d54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c93a:	e340      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c940:	e33d      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c942:	4b2f      	ldr	r3, [pc, #188]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c94a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c94e:	d107      	bne.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c950:	f107 0318 	add.w	r3, r7, #24
 800c954:	4618      	mov	r0, r3
 800c956:	f000 fb51 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c95e:	e32e      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c964:	e32b      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c966:	4b26      	ldr	r3, [pc, #152]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c96e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c972:	d107      	bne.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c974:	f107 030c 	add.w	r3, r7, #12
 800c978:	4618      	mov	r0, r3
 800c97a:	f000 fc93 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c982:	e31c      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c988:	e319      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c98a:	4b1d      	ldr	r3, [pc, #116]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c98c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c98e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c992:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c994:	4b1a      	ldr	r3, [pc, #104]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 0304 	and.w	r3, r3, #4
 800c99c:	2b04      	cmp	r3, #4
 800c99e:	d10c      	bne.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d109      	bne.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9a6:	4b16      	ldr	r3, [pc, #88]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	08db      	lsrs	r3, r3, #3
 800c9ac:	f003 0303 	and.w	r3, r3, #3
 800c9b0:	4a14      	ldr	r2, [pc, #80]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c9b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9b8:	e01e      	b.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9ba:	4b11      	ldr	r3, [pc, #68]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9c6:	d106      	bne.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9ce:	d102      	bne.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9d0:	4b0d      	ldr	r3, [pc, #52]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9d4:	e010      	b.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9d6:	4b0a      	ldr	r3, [pc, #40]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9e2:	d106      	bne.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9ea:	d102      	bne.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9ec:	4b07      	ldr	r3, [pc, #28]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9f0:	e002      	b.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9f6:	e2e2      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9f8:	e2e1      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9fa:	4b05      	ldr	r3, [pc, #20]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9fe:	e2de      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca00:	58024400 	.word	0x58024400
 800ca04:	03d09000 	.word	0x03d09000
 800ca08:	003d0900 	.word	0x003d0900
 800ca0c:	017d7840 	.word	0x017d7840
 800ca10:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ca14:	2300      	movs	r3, #0
 800ca16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca18:	e2d1      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca1e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ca22:	430b      	orrs	r3, r1
 800ca24:	f040 809c 	bne.w	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ca28:	4b93      	ldr	r3, [pc, #588]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca2c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca38:	d054      	beq.n	800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca40:	f200 808b 	bhi.w	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca4a:	f000 8083 	beq.w	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca54:	f200 8081 	bhi.w	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca5e:	d02f      	beq.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca66:	d878      	bhi.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d004      	beq.n	800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca74:	d012      	beq.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ca76:	e070      	b.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca78:	4b7f      	ldr	r3, [pc, #508]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca84:	d107      	bne.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f000 fd5e 	bl	800d54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca94:	e293      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca96:	2300      	movs	r3, #0
 800ca98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca9a:	e290      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca9c:	4b76      	ldr	r3, [pc, #472]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800caa8:	d107      	bne.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caaa:	f107 0318 	add.w	r3, r7, #24
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 faa4 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cab8:	e281      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cabe:	e27e      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cac0:	4b6d      	ldr	r3, [pc, #436]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cacc:	d107      	bne.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cace:	f107 030c 	add.w	r3, r7, #12
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 fbe6 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cadc:	e26f      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cae2:	e26c      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cae4:	4b64      	ldr	r3, [pc, #400]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800caec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caee:	4b62      	ldr	r3, [pc, #392]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f003 0304 	and.w	r3, r3, #4
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	d10c      	bne.n	800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d109      	bne.n	800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb00:	4b5d      	ldr	r3, [pc, #372]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	08db      	lsrs	r3, r3, #3
 800cb06:	f003 0303 	and.w	r3, r3, #3
 800cb0a:	4a5c      	ldr	r2, [pc, #368]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cb0c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb12:	e01e      	b.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb14:	4b58      	ldr	r3, [pc, #352]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb20:	d106      	bne.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cb22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb28:	d102      	bne.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb2a:	4b55      	ldr	r3, [pc, #340]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb2e:	e010      	b.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb30:	4b51      	ldr	r3, [pc, #324]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb3c:	d106      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cb3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb44:	d102      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb46:	4b4f      	ldr	r3, [pc, #316]	; (800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb4a:	e002      	b.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb50:	e235      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb52:	e234      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb54:	4b4c      	ldr	r3, [pc, #304]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb58:	e231      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb5e:	e22e      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cb60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb64:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cb68:	430b      	orrs	r3, r1
 800cb6a:	f040 808f 	bne.w	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cb6e:	4b42      	ldr	r3, [pc, #264]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb72:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cb76:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb7e:	d06b      	beq.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb86:	d874      	bhi.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb8e:	d056      	beq.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb96:	d86c      	bhi.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb9e:	d03b      	beq.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cba6:	d864      	bhi.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbae:	d021      	beq.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbb6:	d85c      	bhi.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d004      	beq.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc4:	d004      	beq.n	800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cbc6:	e054      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cbc8:	f7fe fa0a 	bl	800afe0 <HAL_RCC_GetPCLK1Freq>
 800cbcc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbce:	e1f6      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbd0:	4b29      	ldr	r3, [pc, #164]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbdc:	d107      	bne.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbde:	f107 0318 	add.w	r3, r7, #24
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 fa0a 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbec:	e1e7      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf2:	e1e4      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbf4:	4b20      	ldr	r3, [pc, #128]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc00:	d107      	bne.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc02:	f107 030c 	add.w	r3, r7, #12
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 fb4c 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc10:	e1d5      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc16:	e1d2      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc18:	4b17      	ldr	r3, [pc, #92]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f003 0304 	and.w	r3, r3, #4
 800cc20:	2b04      	cmp	r3, #4
 800cc22:	d109      	bne.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc24:	4b14      	ldr	r3, [pc, #80]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	08db      	lsrs	r3, r3, #3
 800cc2a:	f003 0303 	and.w	r3, r3, #3
 800cc2e:	4a13      	ldr	r2, [pc, #76]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc30:	fa22 f303 	lsr.w	r3, r2, r3
 800cc34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc36:	e1c2      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc3c:	e1bf      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc3e:	4b0e      	ldr	r3, [pc, #56]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc4a:	d102      	bne.n	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cc4c:	4b0c      	ldr	r3, [pc, #48]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc50:	e1b5      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc56:	e1b2      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc58:	4b07      	ldr	r3, [pc, #28]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc64:	d102      	bne.n	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cc66:	4b07      	ldr	r3, [pc, #28]	; (800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cc68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc6a:	e1a8      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc70:	e1a5      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc76:	e1a2      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc78:	58024400 	.word	0x58024400
 800cc7c:	03d09000 	.word	0x03d09000
 800cc80:	003d0900 	.word	0x003d0900
 800cc84:	017d7840 	.word	0x017d7840
 800cc88:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cc8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc90:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cc94:	430b      	orrs	r3, r1
 800cc96:	d173      	bne.n	800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc98:	4b9c      	ldr	r3, [pc, #624]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cca0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cca8:	d02f      	beq.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccb0:	d863      	bhi.n	800cd7a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d004      	beq.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccbe:	d012      	beq.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ccc0:	e05b      	b.n	800cd7a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccc2:	4b92      	ldr	r3, [pc, #584]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccce:	d107      	bne.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccd0:	f107 0318 	add.w	r3, r7, #24
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 f991 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccde:	e16e      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce4:	e16b      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cce6:	4b89      	ldr	r3, [pc, #548]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccf2:	d107      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccf4:	f107 030c 	add.w	r3, r7, #12
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 fad3 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd02:	e15c      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd08:	e159      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd0a:	4b80      	ldr	r3, [pc, #512]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd14:	4b7d      	ldr	r3, [pc, #500]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0304 	and.w	r3, r3, #4
 800cd1c:	2b04      	cmp	r3, #4
 800cd1e:	d10c      	bne.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d109      	bne.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd26:	4b79      	ldr	r3, [pc, #484]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	08db      	lsrs	r3, r3, #3
 800cd2c:	f003 0303 	and.w	r3, r3, #3
 800cd30:	4a77      	ldr	r2, [pc, #476]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd32:	fa22 f303 	lsr.w	r3, r2, r3
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd38:	e01e      	b.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd3a:	4b74      	ldr	r3, [pc, #464]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd46:	d106      	bne.n	800cd56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd4e:	d102      	bne.n	800cd56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd50:	4b70      	ldr	r3, [pc, #448]	; (800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd54:	e010      	b.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd56:	4b6d      	ldr	r3, [pc, #436]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd62:	d106      	bne.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd6a:	d102      	bne.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd6c:	4b6a      	ldr	r3, [pc, #424]	; (800cf18 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd70:	e002      	b.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd72:	2300      	movs	r3, #0
 800cd74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd76:	e122      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd78:	e121      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd7e:	e11e      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cd80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd84:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cd88:	430b      	orrs	r3, r1
 800cd8a:	d133      	bne.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cd8c:	4b5f      	ldr	r3, [pc, #380]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d004      	beq.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cda2:	d012      	beq.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cda4:	e023      	b.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cda6:	4b59      	ldr	r3, [pc, #356]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdb2:	d107      	bne.n	800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f000 fbc7 	bl	800d54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdc2:	e0fc      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc8:	e0f9      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdca:	4b50      	ldr	r3, [pc, #320]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdd6:	d107      	bne.n	800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdd8:	f107 0318 	add.w	r3, r7, #24
 800cddc:	4618      	mov	r0, r3
 800cdde:	f000 f90d 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cde2:	6a3b      	ldr	r3, [r7, #32]
 800cde4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cde6:	e0ea      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cde8:	2300      	movs	r3, #0
 800cdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdec:	e0e7      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf2:	e0e4      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cdf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cdfc:	430b      	orrs	r3, r1
 800cdfe:	f040 808d 	bne.w	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ce02:	4b42      	ldr	r3, [pc, #264]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce06:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ce0a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce12:	d06b      	beq.n	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce1a:	d874      	bhi.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce22:	d056      	beq.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce2a:	d86c      	bhi.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce32:	d03b      	beq.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce3a:	d864      	bhi.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce42:	d021      	beq.n	800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce4a:	d85c      	bhi.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d004      	beq.n	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ce52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce58:	d004      	beq.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ce5a:	e054      	b.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ce5c:	f000 f8b8 	bl	800cfd0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce60:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce62:	e0ac      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce64:	4b29      	ldr	r3, [pc, #164]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce70:	d107      	bne.n	800ce82 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce72:	f107 0318 	add.w	r3, r7, #24
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 f8c0 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce80:	e09d      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce86:	e09a      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce88:	4b20      	ldr	r3, [pc, #128]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce94:	d107      	bne.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce96:	f107 030c 	add.w	r3, r7, #12
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f000 fa02 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cea4:	e08b      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceaa:	e088      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ceac:	4b17      	ldr	r3, [pc, #92]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f003 0304 	and.w	r3, r3, #4
 800ceb4:	2b04      	cmp	r3, #4
 800ceb6:	d109      	bne.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ceb8:	4b14      	ldr	r3, [pc, #80]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	08db      	lsrs	r3, r3, #3
 800cebe:	f003 0303 	and.w	r3, r3, #3
 800cec2:	4a13      	ldr	r2, [pc, #76]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cec4:	fa22 f303 	lsr.w	r3, r2, r3
 800cec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceca:	e078      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced0:	e075      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ced2:	4b0e      	ldr	r3, [pc, #56]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cede:	d102      	bne.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cee0:	4b0c      	ldr	r3, [pc, #48]	; (800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cee4:	e06b      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceea:	e068      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ceec:	4b07      	ldr	r3, [pc, #28]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cef8:	d102      	bne.n	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cefa:	4b07      	ldr	r3, [pc, #28]	; (800cf18 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cefc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cefe:	e05e      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf04:	e05b      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf0a:	e058      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cf0c:	58024400 	.word	0x58024400
 800cf10:	03d09000 	.word	0x03d09000
 800cf14:	003d0900 	.word	0x003d0900
 800cf18:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cf1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf20:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cf24:	430b      	orrs	r3, r1
 800cf26:	d148      	bne.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cf28:	4b27      	ldr	r3, [pc, #156]	; (800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf38:	d02a      	beq.n	800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf40:	d838      	bhi.n	800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d004      	beq.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf4e:	d00d      	beq.n	800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cf50:	e030      	b.n	800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf52:	4b1d      	ldr	r3, [pc, #116]	; (800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf5e:	d102      	bne.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cf60:	4b1a      	ldr	r3, [pc, #104]	; (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cf62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf64:	e02b      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf66:	2300      	movs	r3, #0
 800cf68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf6a:	e028      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf6c:	4b16      	ldr	r3, [pc, #88]	; (800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf78:	d107      	bne.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f000 fae4 	bl	800d54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf88:	e019      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf8e:	e016      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf90:	4b0d      	ldr	r3, [pc, #52]	; (800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf9c:	d107      	bne.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf9e:	f107 0318 	add.w	r3, r7, #24
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f000 f82a 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfac:	e007      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfb2:	e004      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfb8:	e001      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cfbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3740      	adds	r7, #64	; 0x40
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	58024400 	.word	0x58024400
 800cfcc:	017d7840 	.word	0x017d7840

0800cfd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cfd4:	f7fd ffd4 	bl	800af80 <HAL_RCC_GetHCLKFreq>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	4b06      	ldr	r3, [pc, #24]	; (800cff4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cfdc:	6a1b      	ldr	r3, [r3, #32]
 800cfde:	091b      	lsrs	r3, r3, #4
 800cfe0:	f003 0307 	and.w	r3, r3, #7
 800cfe4:	4904      	ldr	r1, [pc, #16]	; (800cff8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cfe6:	5ccb      	ldrb	r3, [r1, r3]
 800cfe8:	f003 031f 	and.w	r3, r3, #31
 800cfec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	58024400 	.word	0x58024400
 800cff8:	080170b4 	.word	0x080170b4

0800cffc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b089      	sub	sp, #36	; 0x24
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d004:	4ba1      	ldr	r3, [pc, #644]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d008:	f003 0303 	and.w	r3, r3, #3
 800d00c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d00e:	4b9f      	ldr	r3, [pc, #636]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d012:	0b1b      	lsrs	r3, r3, #12
 800d014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d018:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d01a:	4b9c      	ldr	r3, [pc, #624]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01e:	091b      	lsrs	r3, r3, #4
 800d020:	f003 0301 	and.w	r3, r3, #1
 800d024:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d026:	4b99      	ldr	r3, [pc, #612]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d02a:	08db      	lsrs	r3, r3, #3
 800d02c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	fb02 f303 	mul.w	r3, r2, r3
 800d036:	ee07 3a90 	vmov	s15, r3
 800d03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d03e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	2b00      	cmp	r3, #0
 800d046:	f000 8111 	beq.w	800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	f000 8083 	beq.w	800d158 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	2b02      	cmp	r3, #2
 800d056:	f200 80a1 	bhi.w	800d19c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d003      	beq.n	800d068 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	2b01      	cmp	r3, #1
 800d064:	d056      	beq.n	800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d066:	e099      	b.n	800d19c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d068:	4b88      	ldr	r3, [pc, #544]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f003 0320 	and.w	r3, r3, #32
 800d070:	2b00      	cmp	r3, #0
 800d072:	d02d      	beq.n	800d0d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d074:	4b85      	ldr	r3, [pc, #532]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	08db      	lsrs	r3, r3, #3
 800d07a:	f003 0303 	and.w	r3, r3, #3
 800d07e:	4a84      	ldr	r2, [pc, #528]	; (800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d080:	fa22 f303 	lsr.w	r3, r2, r3
 800d084:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	ee07 3a90 	vmov	s15, r3
 800d08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	ee07 3a90 	vmov	s15, r3
 800d096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d09e:	4b7b      	ldr	r3, [pc, #492]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a6:	ee07 3a90 	vmov	s15, r3
 800d0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0ce:	e087      	b.n	800d1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	ee07 3a90 	vmov	s15, r3
 800d0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d298 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0e2:	4b6a      	ldr	r3, [pc, #424]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ea:	ee07 3a90 	vmov	s15, r3
 800d0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d10e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d112:	e065      	b.n	800d1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	ee07 3a90 	vmov	s15, r3
 800d11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d11e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d29c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d126:	4b59      	ldr	r3, [pc, #356]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d12e:	ee07 3a90 	vmov	s15, r3
 800d132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d136:	ed97 6a03 	vldr	s12, [r7, #12]
 800d13a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d156:	e043      	b.n	800d1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	ee07 3a90 	vmov	s15, r3
 800d15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d162:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d16a:	4b48      	ldr	r3, [pc, #288]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d172:	ee07 3a90 	vmov	s15, r3
 800d176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d17a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d17e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d19a:	e021      	b.n	800d1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	ee07 3a90 	vmov	s15, r3
 800d1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d29c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ae:	4b37      	ldr	r3, [pc, #220]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1b6:	ee07 3a90 	vmov	s15, r3
 800d1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d1e0:	4b2a      	ldr	r3, [pc, #168]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e4:	0a5b      	lsrs	r3, r3, #9
 800d1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ea:	ee07 3a90 	vmov	s15, r3
 800d1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d206:	ee17 2a90 	vmov	r2, s15
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d20e:	4b1f      	ldr	r3, [pc, #124]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d212:	0c1b      	lsrs	r3, r3, #16
 800d214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d218:	ee07 3a90 	vmov	s15, r3
 800d21c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d224:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d228:	edd7 6a07 	vldr	s13, [r7, #28]
 800d22c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d234:	ee17 2a90 	vmov	r2, s15
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d23c:	4b13      	ldr	r3, [pc, #76]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d240:	0e1b      	lsrs	r3, r3, #24
 800d242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d246:	ee07 3a90 	vmov	s15, r3
 800d24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d252:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d256:	edd7 6a07 	vldr	s13, [r7, #28]
 800d25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d262:	ee17 2a90 	vmov	r2, s15
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d26a:	e008      	b.n	800d27e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	609a      	str	r2, [r3, #8]
}
 800d27e:	bf00      	nop
 800d280:	3724      	adds	r7, #36	; 0x24
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	58024400 	.word	0x58024400
 800d290:	03d09000 	.word	0x03d09000
 800d294:	46000000 	.word	0x46000000
 800d298:	4c742400 	.word	0x4c742400
 800d29c:	4a742400 	.word	0x4a742400
 800d2a0:	4bbebc20 	.word	0x4bbebc20

0800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b089      	sub	sp, #36	; 0x24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2ac:	4ba1      	ldr	r3, [pc, #644]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b0:	f003 0303 	and.w	r3, r3, #3
 800d2b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d2b6:	4b9f      	ldr	r3, [pc, #636]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ba:	0d1b      	lsrs	r3, r3, #20
 800d2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d2c2:	4b9c      	ldr	r3, [pc, #624]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c6:	0a1b      	lsrs	r3, r3, #8
 800d2c8:	f003 0301 	and.w	r3, r3, #1
 800d2cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d2ce:	4b99      	ldr	r3, [pc, #612]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2d2:	08db      	lsrs	r3, r3, #3
 800d2d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	fb02 f303 	mul.w	r3, r2, r3
 800d2de:	ee07 3a90 	vmov	s15, r3
 800d2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 8111 	beq.w	800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	f000 8083 	beq.w	800d400 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	2b02      	cmp	r3, #2
 800d2fe:	f200 80a1 	bhi.w	800d444 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d003      	beq.n	800d310 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d056      	beq.n	800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d30e:	e099      	b.n	800d444 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d310:	4b88      	ldr	r3, [pc, #544]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 0320 	and.w	r3, r3, #32
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d02d      	beq.n	800d378 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d31c:	4b85      	ldr	r3, [pc, #532]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	08db      	lsrs	r3, r3, #3
 800d322:	f003 0303 	and.w	r3, r3, #3
 800d326:	4a84      	ldr	r2, [pc, #528]	; (800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d328:	fa22 f303 	lsr.w	r3, r2, r3
 800d32c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	ee07 3a90 	vmov	s15, r3
 800d334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	ee07 3a90 	vmov	s15, r3
 800d33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d346:	4b7b      	ldr	r3, [pc, #492]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d34e:	ee07 3a90 	vmov	s15, r3
 800d352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d356:	ed97 6a03 	vldr	s12, [r7, #12]
 800d35a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d53c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d372:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d376:	e087      	b.n	800d488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	ee07 3a90 	vmov	s15, r3
 800d37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d382:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d540 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d38a:	4b6a      	ldr	r3, [pc, #424]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d392:	ee07 3a90 	vmov	s15, r3
 800d396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d39a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d39e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d53c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3ba:	e065      	b.n	800d488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	ee07 3a90 	vmov	s15, r3
 800d3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ce:	4b59      	ldr	r3, [pc, #356]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d6:	ee07 3a90 	vmov	s15, r3
 800d3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d53c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3fe:	e043      	b.n	800d488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	ee07 3a90 	vmov	s15, r3
 800d406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d40a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d412:	4b48      	ldr	r3, [pc, #288]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d41a:	ee07 3a90 	vmov	s15, r3
 800d41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d422:	ed97 6a03 	vldr	s12, [r7, #12]
 800d426:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d53c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d43e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d442:	e021      	b.n	800d488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d44e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d456:	4b37      	ldr	r3, [pc, #220]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45e:	ee07 3a90 	vmov	s15, r3
 800d462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d466:	ed97 6a03 	vldr	s12, [r7, #12]
 800d46a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d53c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d46e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d47a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d486:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d488:	4b2a      	ldr	r3, [pc, #168]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48c:	0a5b      	lsrs	r3, r3, #9
 800d48e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d492:	ee07 3a90 	vmov	s15, r3
 800d496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d49e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ae:	ee17 2a90 	vmov	r2, s15
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d4b6:	4b1f      	ldr	r3, [pc, #124]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ba:	0c1b      	lsrs	r3, r3, #16
 800d4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c0:	ee07 3a90 	vmov	s15, r3
 800d4c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4dc:	ee17 2a90 	vmov	r2, s15
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d4e4:	4b13      	ldr	r3, [pc, #76]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e8:	0e1b      	lsrs	r3, r3, #24
 800d4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d50a:	ee17 2a90 	vmov	r2, s15
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d512:	e008      	b.n	800d526 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2200      	movs	r2, #0
 800d518:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	609a      	str	r2, [r3, #8]
}
 800d526:	bf00      	nop
 800d528:	3724      	adds	r7, #36	; 0x24
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	58024400 	.word	0x58024400
 800d538:	03d09000 	.word	0x03d09000
 800d53c:	46000000 	.word	0x46000000
 800d540:	4c742400 	.word	0x4c742400
 800d544:	4a742400 	.word	0x4a742400
 800d548:	4bbebc20 	.word	0x4bbebc20

0800d54c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b089      	sub	sp, #36	; 0x24
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d554:	4ba0      	ldr	r3, [pc, #640]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d558:	f003 0303 	and.w	r3, r3, #3
 800d55c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d55e:	4b9e      	ldr	r3, [pc, #632]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d562:	091b      	lsrs	r3, r3, #4
 800d564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d568:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d56a:	4b9b      	ldr	r3, [pc, #620]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d574:	4b98      	ldr	r3, [pc, #608]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d578:	08db      	lsrs	r3, r3, #3
 800d57a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d57e:	693a      	ldr	r2, [r7, #16]
 800d580:	fb02 f303 	mul.w	r3, r2, r3
 800d584:	ee07 3a90 	vmov	s15, r3
 800d588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d58c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	f000 8111 	beq.w	800d7ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	f000 8083 	beq.w	800d6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	f200 80a1 	bhi.w	800d6ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d003      	beq.n	800d5b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d056      	beq.n	800d662 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d5b4:	e099      	b.n	800d6ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5b6:	4b88      	ldr	r3, [pc, #544]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f003 0320 	and.w	r3, r3, #32
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d02d      	beq.n	800d61e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5c2:	4b85      	ldr	r3, [pc, #532]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	08db      	lsrs	r3, r3, #3
 800d5c8:	f003 0303 	and.w	r3, r3, #3
 800d5cc:	4a83      	ldr	r2, [pc, #524]	; (800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d5ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d5d2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	ee07 3a90 	vmov	s15, r3
 800d5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	ee07 3a90 	vmov	s15, r3
 800d5e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5ec:	4b7a      	ldr	r3, [pc, #488]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f4:	ee07 3a90 	vmov	s15, r3
 800d5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d600:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d60c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d618:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d61c:	e087      	b.n	800d72e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	ee07 3a90 	vmov	s15, r3
 800d624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d628:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d7e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d62c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d630:	4b69      	ldr	r3, [pc, #420]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d638:	ee07 3a90 	vmov	s15, r3
 800d63c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d640:	ed97 6a03 	vldr	s12, [r7, #12]
 800d644:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d64c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d65c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d660:	e065      	b.n	800d72e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	ee07 3a90 	vmov	s15, r3
 800d668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d66c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d7e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d674:	4b58      	ldr	r3, [pc, #352]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d67c:	ee07 3a90 	vmov	s15, r3
 800d680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d684:	ed97 6a03 	vldr	s12, [r7, #12]
 800d688:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d68c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d69c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6a4:	e043      	b.n	800d72e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	ee07 3a90 	vmov	s15, r3
 800d6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d7ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d6b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6b8:	4b47      	ldr	r3, [pc, #284]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6c0:	ee07 3a90 	vmov	s15, r3
 800d6c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6e8:	e021      	b.n	800d72e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	ee07 3a90 	vmov	s15, r3
 800d6f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d7e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6fc:	4b36      	ldr	r3, [pc, #216]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d704:	ee07 3a90 	vmov	s15, r3
 800d708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d70c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d710:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d71c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d724:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d728:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d72c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d72e:	4b2a      	ldr	r3, [pc, #168]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d732:	0a5b      	lsrs	r3, r3, #9
 800d734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d738:	ee07 3a90 	vmov	s15, r3
 800d73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d744:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d748:	edd7 6a07 	vldr	s13, [r7, #28]
 800d74c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d754:	ee17 2a90 	vmov	r2, s15
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d75c:	4b1e      	ldr	r3, [pc, #120]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d760:	0c1b      	lsrs	r3, r3, #16
 800d762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d766:	ee07 3a90 	vmov	s15, r3
 800d76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d76e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d772:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d776:	edd7 6a07 	vldr	s13, [r7, #28]
 800d77a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d77e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d782:	ee17 2a90 	vmov	r2, s15
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d78a:	4b13      	ldr	r3, [pc, #76]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78e:	0e1b      	lsrs	r3, r3, #24
 800d790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d794:	ee07 3a90 	vmov	s15, r3
 800d798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d79c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7b0:	ee17 2a90 	vmov	r2, s15
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d7b8:	e008      	b.n	800d7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	609a      	str	r2, [r3, #8]
}
 800d7cc:	bf00      	nop
 800d7ce:	3724      	adds	r7, #36	; 0x24
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr
 800d7d8:	58024400 	.word	0x58024400
 800d7dc:	03d09000 	.word	0x03d09000
 800d7e0:	46000000 	.word	0x46000000
 800d7e4:	4c742400 	.word	0x4c742400
 800d7e8:	4a742400 	.word	0x4a742400
 800d7ec:	4bbebc20 	.word	0x4bbebc20

0800d7f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7fe:	4b53      	ldr	r3, [pc, #332]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d802:	f003 0303 	and.w	r3, r3, #3
 800d806:	2b03      	cmp	r3, #3
 800d808:	d101      	bne.n	800d80e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d80a:	2301      	movs	r3, #1
 800d80c:	e099      	b.n	800d942 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d80e:	4b4f      	ldr	r3, [pc, #316]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4a4e      	ldr	r2, [pc, #312]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d814:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d81a:	f7f6 fc53 	bl	80040c4 <HAL_GetTick>
 800d81e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d820:	e008      	b.n	800d834 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d822:	f7f6 fc4f 	bl	80040c4 <HAL_GetTick>
 800d826:	4602      	mov	r2, r0
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	1ad3      	subs	r3, r2, r3
 800d82c:	2b02      	cmp	r3, #2
 800d82e:	d901      	bls.n	800d834 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d830:	2303      	movs	r3, #3
 800d832:	e086      	b.n	800d942 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d834:	4b45      	ldr	r3, [pc, #276]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d1f0      	bne.n	800d822 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d840:	4b42      	ldr	r3, [pc, #264]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d844:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	031b      	lsls	r3, r3, #12
 800d84e:	493f      	ldr	r1, [pc, #252]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d850:	4313      	orrs	r3, r2
 800d852:	628b      	str	r3, [r1, #40]	; 0x28
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	3b01      	subs	r3, #1
 800d85a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	3b01      	subs	r3, #1
 800d864:	025b      	lsls	r3, r3, #9
 800d866:	b29b      	uxth	r3, r3
 800d868:	431a      	orrs	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	3b01      	subs	r3, #1
 800d870:	041b      	lsls	r3, r3, #16
 800d872:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d876:	431a      	orrs	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	3b01      	subs	r3, #1
 800d87e:	061b      	lsls	r3, r3, #24
 800d880:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d884:	4931      	ldr	r1, [pc, #196]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d886:	4313      	orrs	r3, r2
 800d888:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d88a:	4b30      	ldr	r3, [pc, #192]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	695b      	ldr	r3, [r3, #20]
 800d896:	492d      	ldr	r1, [pc, #180]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d898:	4313      	orrs	r3, r2
 800d89a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d89c:	4b2b      	ldr	r3, [pc, #172]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a0:	f023 0220 	bic.w	r2, r3, #32
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	699b      	ldr	r3, [r3, #24]
 800d8a8:	4928      	ldr	r1, [pc, #160]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d8ae:	4b27      	ldr	r3, [pc, #156]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	4a26      	ldr	r2, [pc, #152]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8b4:	f023 0310 	bic.w	r3, r3, #16
 800d8b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d8ba:	4b24      	ldr	r3, [pc, #144]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8be:	4b24      	ldr	r3, [pc, #144]	; (800d950 <RCCEx_PLL2_Config+0x160>)
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	69d2      	ldr	r2, [r2, #28]
 800d8c6:	00d2      	lsls	r2, r2, #3
 800d8c8:	4920      	ldr	r1, [pc, #128]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d8ce:	4b1f      	ldr	r3, [pc, #124]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d2:	4a1e      	ldr	r2, [pc, #120]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8d4:	f043 0310 	orr.w	r3, r3, #16
 800d8d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d106      	bne.n	800d8ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8e0:	4b1a      	ldr	r3, [pc, #104]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e4:	4a19      	ldr	r2, [pc, #100]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8ec:	e00f      	b.n	800d90e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d106      	bne.n	800d902 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d8f4:	4b15      	ldr	r3, [pc, #84]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f8:	4a14      	ldr	r2, [pc, #80]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d8fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d900:	e005      	b.n	800d90e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d902:	4b12      	ldr	r3, [pc, #72]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d906:	4a11      	ldr	r2, [pc, #68]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d90c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d90e:	4b0f      	ldr	r3, [pc, #60]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a0e      	ldr	r2, [pc, #56]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d91a:	f7f6 fbd3 	bl	80040c4 <HAL_GetTick>
 800d91e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d920:	e008      	b.n	800d934 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d922:	f7f6 fbcf 	bl	80040c4 <HAL_GetTick>
 800d926:	4602      	mov	r2, r0
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d901      	bls.n	800d934 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d930:	2303      	movs	r3, #3
 800d932:	e006      	b.n	800d942 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d934:	4b05      	ldr	r3, [pc, #20]	; (800d94c <RCCEx_PLL2_Config+0x15c>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d0f0      	beq.n	800d922 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d940:	7bfb      	ldrb	r3, [r7, #15]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	58024400 	.word	0x58024400
 800d950:	ffff0007 	.word	0xffff0007

0800d954 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d95e:	2300      	movs	r3, #0
 800d960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d962:	4b53      	ldr	r3, [pc, #332]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800d964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d966:	f003 0303 	and.w	r3, r3, #3
 800d96a:	2b03      	cmp	r3, #3
 800d96c:	d101      	bne.n	800d972 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d96e:	2301      	movs	r3, #1
 800d970:	e099      	b.n	800daa6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d972:	4b4f      	ldr	r3, [pc, #316]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a4e      	ldr	r2, [pc, #312]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800d978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d97c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d97e:	f7f6 fba1 	bl	80040c4 <HAL_GetTick>
 800d982:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d984:	e008      	b.n	800d998 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d986:	f7f6 fb9d 	bl	80040c4 <HAL_GetTick>
 800d98a:	4602      	mov	r2, r0
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	2b02      	cmp	r3, #2
 800d992:	d901      	bls.n	800d998 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d994:	2303      	movs	r3, #3
 800d996:	e086      	b.n	800daa6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d998:	4b45      	ldr	r3, [pc, #276]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1f0      	bne.n	800d986 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d9a4:	4b42      	ldr	r3, [pc, #264]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800d9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	051b      	lsls	r3, r3, #20
 800d9b2:	493f      	ldr	r1, [pc, #252]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	628b      	str	r3, [r1, #40]	; 0x28
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	025b      	lsls	r3, r3, #9
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	431a      	orrs	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	3b01      	subs	r3, #1
 800d9d4:	041b      	lsls	r3, r3, #16
 800d9d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9da:	431a      	orrs	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	061b      	lsls	r3, r3, #24
 800d9e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9e8:	4931      	ldr	r1, [pc, #196]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9ee:	4b30      	ldr	r3, [pc, #192]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800d9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	695b      	ldr	r3, [r3, #20]
 800d9fa:	492d      	ldr	r1, [pc, #180]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800da00:	4b2b      	ldr	r3, [pc, #172]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	4928      	ldr	r1, [pc, #160]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da0e:	4313      	orrs	r3, r2
 800da10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800da12:	4b27      	ldr	r3, [pc, #156]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da16:	4a26      	ldr	r2, [pc, #152]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800da1e:	4b24      	ldr	r3, [pc, #144]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da22:	4b24      	ldr	r3, [pc, #144]	; (800dab4 <RCCEx_PLL3_Config+0x160>)
 800da24:	4013      	ands	r3, r2
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	69d2      	ldr	r2, [r2, #28]
 800da2a:	00d2      	lsls	r2, r2, #3
 800da2c:	4920      	ldr	r1, [pc, #128]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da2e:	4313      	orrs	r3, r2
 800da30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da32:	4b1f      	ldr	r3, [pc, #124]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da36:	4a1e      	ldr	r2, [pc, #120]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d106      	bne.n	800da52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da44:	4b1a      	ldr	r3, [pc, #104]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da48:	4a19      	ldr	r2, [pc, #100]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da50:	e00f      	b.n	800da72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d106      	bne.n	800da66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da58:	4b15      	ldr	r3, [pc, #84]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5c:	4a14      	ldr	r2, [pc, #80]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da62:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da64:	e005      	b.n	800da72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da66:	4b12      	ldr	r3, [pc, #72]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6a:	4a11      	ldr	r2, [pc, #68]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da72:	4b0f      	ldr	r3, [pc, #60]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a0e      	ldr	r2, [pc, #56]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da7e:	f7f6 fb21 	bl	80040c4 <HAL_GetTick>
 800da82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da84:	e008      	b.n	800da98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da86:	f7f6 fb1d 	bl	80040c4 <HAL_GetTick>
 800da8a:	4602      	mov	r2, r0
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	1ad3      	subs	r3, r2, r3
 800da90:	2b02      	cmp	r3, #2
 800da92:	d901      	bls.n	800da98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da94:	2303      	movs	r3, #3
 800da96:	e006      	b.n	800daa6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da98:	4b05      	ldr	r3, [pc, #20]	; (800dab0 <RCCEx_PLL3_Config+0x15c>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d0f0      	beq.n	800da86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800daa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	58024400 	.word	0x58024400
 800dab4:	ffff0007 	.word	0xffff0007

0800dab8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dac0:	2301      	movs	r3, #1
 800dac2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d071      	beq.n	800dbae <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d106      	bne.n	800dae4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7f4 fdc4 	bl	800266c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2202      	movs	r2, #2
 800dae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	f003 0310 	and.w	r3, r3, #16
 800daf6:	2b10      	cmp	r3, #16
 800daf8:	d050      	beq.n	800db9c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	22ca      	movs	r2, #202	; 0xca
 800db00:	625a      	str	r2, [r3, #36]	; 0x24
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2253      	movs	r2, #83	; 0x53
 800db08:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 fa4a 	bl	800dfa4 <RTC_EnterInitMode>
 800db10:	4603      	mov	r3, r0
 800db12:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800db14:	7bfb      	ldrb	r3, [r7, #15]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d124      	bne.n	800db64 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	6899      	ldr	r1, [r3, #8]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	4b24      	ldr	r3, [pc, #144]	; (800dbb8 <HAL_RTC_Init+0x100>)
 800db26:	400b      	ands	r3, r1
 800db28:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	6899      	ldr	r1, [r3, #8]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	431a      	orrs	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	431a      	orrs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	430a      	orrs	r2, r1
 800db46:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	0419      	lsls	r1, r3, #16
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68da      	ldr	r2, [r3, #12]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	430a      	orrs	r2, r1
 800db58:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 fa56 	bl	800e00c <RTC_ExitInitMode>
 800db60:	4603      	mov	r3, r0
 800db62:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800db64:	7bfb      	ldrb	r3, [r7, #15]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d113      	bne.n	800db92 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f022 0203 	bic.w	r2, r2, #3
 800db78:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	69da      	ldr	r2, [r3, #28]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	695b      	ldr	r3, [r3, #20]
 800db88:	431a      	orrs	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	430a      	orrs	r2, r1
 800db90:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	22ff      	movs	r2, #255	; 0xff
 800db98:	625a      	str	r2, [r3, #36]	; 0x24
 800db9a:	e001      	b.n	800dba0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800db9c:	2300      	movs	r3, #0
 800db9e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dba0:	7bfb      	ldrb	r3, [r7, #15]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d103      	bne.n	800dbae <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800dbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	ff8fffbf 	.word	0xff8fffbf

0800dbbc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dbbc:	b590      	push	{r4, r7, lr}
 800dbbe:	b087      	sub	sp, #28
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d101      	bne.n	800dbd6 <HAL_RTC_SetTime+0x1a>
 800dbd2:	2302      	movs	r3, #2
 800dbd4:	e089      	b.n	800dcea <HAL_RTC_SetTime+0x12e>
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	22ca      	movs	r2, #202	; 0xca
 800dbec:	625a      	str	r2, [r3, #36]	; 0x24
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2253      	movs	r2, #83	; 0x53
 800dbf4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	f000 f9d4 	bl	800dfa4 <RTC_EnterInitMode>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dc00:	7cfb      	ldrb	r3, [r7, #19]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d161      	bne.n	800dcca <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d126      	bne.n	800dc5a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	689b      	ldr	r3, [r3, #8]
 800dc12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d102      	bne.n	800dc20 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f000 fa2f 	bl	800e088 <RTC_ByteToBcd2>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	785b      	ldrb	r3, [r3, #1]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fa28 	bl	800e088 <RTC_ByteToBcd2>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc3c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	789b      	ldrb	r3, [r3, #2]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f000 fa20 	bl	800e088 <RTC_ByteToBcd2>
 800dc48:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc4a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	78db      	ldrb	r3, [r3, #3]
 800dc52:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc54:	4313      	orrs	r3, r2
 800dc56:	617b      	str	r3, [r7, #20]
 800dc58:	e018      	b.n	800dc8c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d102      	bne.n	800dc6e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	785b      	ldrb	r3, [r3, #1]
 800dc78:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc7a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc7c:	68ba      	ldr	r2, [r7, #8]
 800dc7e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc80:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	78db      	ldrb	r3, [r3, #3]
 800dc86:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	6979      	ldr	r1, [r7, #20]
 800dc92:	4b18      	ldr	r3, [pc, #96]	; (800dcf4 <HAL_RTC_SetTime+0x138>)
 800dc94:	400b      	ands	r3, r1
 800dc96:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	689a      	ldr	r2, [r3, #8]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dca6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6899      	ldr	r1, [r3, #8]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	68da      	ldr	r2, [r3, #12]
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	691b      	ldr	r3, [r3, #16]
 800dcb6:	431a      	orrs	r2, r3
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	430a      	orrs	r2, r1
 800dcbe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f000 f9a3 	bl	800e00c <RTC_ExitInitMode>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	22ff      	movs	r2, #255	; 0xff
 800dcd0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dcd2:	7cfb      	ldrb	r3, [r7, #19]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d103      	bne.n	800dce0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dce8:	7cfb      	ldrb	r3, [r7, #19]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	371c      	adds	r7, #28
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd90      	pop	{r4, r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	007f7f7f 	.word	0x007f7f7f

0800dcf8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	691b      	ldr	r3, [r3, #16]
 800dd14:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	4b22      	ldr	r3, [pc, #136]	; (800ddac <HAL_RTC_GetTime+0xb4>)
 800dd24:	4013      	ands	r3, r2
 800dd26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	0c1b      	lsrs	r3, r3, #16
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	0a1b      	lsrs	r3, r3, #8
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd50:	b2da      	uxtb	r2, r3
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	0d9b      	lsrs	r3, r3, #22
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f003 0301 	and.w	r3, r3, #1
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d11a      	bne.n	800dda2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 f9a9 	bl	800e0c8 <RTC_Bcd2ToByte>
 800dd76:	4603      	mov	r3, r0
 800dd78:	461a      	mov	r2, r3
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	785b      	ldrb	r3, [r3, #1]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f000 f9a0 	bl	800e0c8 <RTC_Bcd2ToByte>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	789b      	ldrb	r3, [r3, #2]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f000 f997 	bl	800e0c8 <RTC_Bcd2ToByte>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3718      	adds	r7, #24
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	007f7f7f 	.word	0x007f7f7f

0800ddb0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ddb0:	b590      	push	{r4, r7, lr}
 800ddb2:	b087      	sub	sp, #28
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d101      	bne.n	800ddca <HAL_RTC_SetDate+0x1a>
 800ddc6:	2302      	movs	r3, #2
 800ddc8:	e073      	b.n	800deb2 <HAL_RTC_SetDate+0x102>
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2202      	movs	r2, #2
 800ddd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10e      	bne.n	800ddfe <HAL_RTC_SetDate+0x4e>
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	785b      	ldrb	r3, [r3, #1]
 800dde4:	f003 0310 	and.w	r3, r3, #16
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d008      	beq.n	800ddfe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	785b      	ldrb	r3, [r3, #1]
 800ddf0:	f023 0310 	bic.w	r3, r3, #16
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	330a      	adds	r3, #10
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d11c      	bne.n	800de3e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	78db      	ldrb	r3, [r3, #3]
 800de08:	4618      	mov	r0, r3
 800de0a:	f000 f93d 	bl	800e088 <RTC_ByteToBcd2>
 800de0e:	4603      	mov	r3, r0
 800de10:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	785b      	ldrb	r3, [r3, #1]
 800de16:	4618      	mov	r0, r3
 800de18:	f000 f936 	bl	800e088 <RTC_ByteToBcd2>
 800de1c:	4603      	mov	r3, r0
 800de1e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de20:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	789b      	ldrb	r3, [r3, #2]
 800de26:	4618      	mov	r0, r3
 800de28:	f000 f92e 	bl	800e088 <RTC_ByteToBcd2>
 800de2c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de2e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de38:	4313      	orrs	r3, r2
 800de3a:	617b      	str	r3, [r7, #20]
 800de3c:	e00e      	b.n	800de5c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	78db      	ldrb	r3, [r3, #3]
 800de42:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	785b      	ldrb	r3, [r3, #1]
 800de48:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de4a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de50:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de58:	4313      	orrs	r3, r2
 800de5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	22ca      	movs	r2, #202	; 0xca
 800de62:	625a      	str	r2, [r3, #36]	; 0x24
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2253      	movs	r2, #83	; 0x53
 800de6a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f000 f899 	bl	800dfa4 <RTC_EnterInitMode>
 800de72:	4603      	mov	r3, r0
 800de74:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800de76:	7cfb      	ldrb	r3, [r7, #19]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10a      	bne.n	800de92 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	6979      	ldr	r1, [r7, #20]
 800de82:	4b0e      	ldr	r3, [pc, #56]	; (800debc <HAL_RTC_SetDate+0x10c>)
 800de84:	400b      	ands	r3, r1
 800de86:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f000 f8bf 	bl	800e00c <RTC_ExitInitMode>
 800de8e:	4603      	mov	r3, r0
 800de90:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	22ff      	movs	r2, #255	; 0xff
 800de98:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800de9a:	7cfb      	ldrb	r3, [r7, #19]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d103      	bne.n	800dea8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2200      	movs	r2, #0
 800deac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800deb0:	7cfb      	ldrb	r3, [r7, #19]


}
 800deb2:	4618      	mov	r0, r3
 800deb4:	371c      	adds	r7, #28
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd90      	pop	{r4, r7, pc}
 800deba:	bf00      	nop
 800debc:	00ffff3f 	.word	0x00ffff3f

0800dec0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	4b21      	ldr	r3, [pc, #132]	; (800df58 <HAL_RTC_GetDate+0x98>)
 800ded4:	4013      	ands	r3, r2
 800ded6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	0c1b      	lsrs	r3, r3, #16
 800dedc:	b2da      	uxtb	r2, r3
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	0a1b      	lsrs	r3, r3, #8
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	f003 031f 	and.w	r3, r3, #31
 800deec:	b2da      	uxtb	r2, r3
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	b2db      	uxtb	r3, r3
 800def6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800defa:	b2da      	uxtb	r2, r3
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	0b5b      	lsrs	r3, r3, #13
 800df04:	b2db      	uxtb	r3, r3
 800df06:	f003 0307 	and.w	r3, r3, #7
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d11a      	bne.n	800df4c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	78db      	ldrb	r3, [r3, #3]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f000 f8d4 	bl	800e0c8 <RTC_Bcd2ToByte>
 800df20:	4603      	mov	r3, r0
 800df22:	461a      	mov	r2, r3
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	785b      	ldrb	r3, [r3, #1]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f000 f8cb 	bl	800e0c8 <RTC_Bcd2ToByte>
 800df32:	4603      	mov	r3, r0
 800df34:	461a      	mov	r2, r3
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	789b      	ldrb	r3, [r3, #2]
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 f8c2 	bl	800e0c8 <RTC_Bcd2ToByte>
 800df44:	4603      	mov	r3, r0
 800df46:	461a      	mov	r2, r3
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3718      	adds	r7, #24
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	00ffff3f 	.word	0x00ffff3f

0800df5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a0d      	ldr	r2, [pc, #52]	; (800dfa0 <HAL_RTC_WaitForSynchro+0x44>)
 800df6a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800df6c:	f7f6 f8aa 	bl	80040c4 <HAL_GetTick>
 800df70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df72:	e009      	b.n	800df88 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800df74:	f7f6 f8a6 	bl	80040c4 <HAL_GetTick>
 800df78:	4602      	mov	r2, r0
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	1ad3      	subs	r3, r2, r3
 800df7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df82:	d901      	bls.n	800df88 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800df84:	2303      	movs	r3, #3
 800df86:	e007      	b.n	800df98 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	f003 0320 	and.w	r3, r3, #32
 800df92:	2b00      	cmp	r3, #0
 800df94:	d0ee      	beq.n	800df74 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800df96:	2300      	movs	r3, #0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	0003ff5f 	.word	0x0003ff5f

0800dfa4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d120      	bne.n	800e000 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfc6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dfc8:	f7f6 f87c 	bl	80040c4 <HAL_GetTick>
 800dfcc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfce:	e00d      	b.n	800dfec <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dfd0:	f7f6 f878 	bl	80040c4 <HAL_GetTick>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	1ad3      	subs	r3, r2, r3
 800dfda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfde:	d905      	bls.n	800dfec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dfe0:	2303      	movs	r3, #3
 800dfe2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2203      	movs	r2, #3
 800dfe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d102      	bne.n	800e000 <RTC_EnterInitMode+0x5c>
 800dffa:	7bfb      	ldrb	r3, [r7, #15]
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	d1e7      	bne.n	800dfd0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800e000:	7bfb      	ldrb	r3, [r7, #15]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e014:	2300      	movs	r3, #0
 800e016:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e018:	4b1a      	ldr	r3, [pc, #104]	; (800e084 <RTC_ExitInitMode+0x78>)
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	4a19      	ldr	r2, [pc, #100]	; (800e084 <RTC_ExitInitMode+0x78>)
 800e01e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e022:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e024:	4b17      	ldr	r3, [pc, #92]	; (800e084 <RTC_ExitInitMode+0x78>)
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	f003 0320 	and.w	r3, r3, #32
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10c      	bne.n	800e04a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff ff93 	bl	800df5c <HAL_RTC_WaitForSynchro>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d01e      	beq.n	800e07a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2203      	movs	r2, #3
 800e040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e044:	2303      	movs	r3, #3
 800e046:	73fb      	strb	r3, [r7, #15]
 800e048:	e017      	b.n	800e07a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e04a:	4b0e      	ldr	r3, [pc, #56]	; (800e084 <RTC_ExitInitMode+0x78>)
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	4a0d      	ldr	r2, [pc, #52]	; (800e084 <RTC_ExitInitMode+0x78>)
 800e050:	f023 0320 	bic.w	r3, r3, #32
 800e054:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff ff80 	bl	800df5c <HAL_RTC_WaitForSynchro>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d005      	beq.n	800e06e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2203      	movs	r2, #3
 800e066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e06a:	2303      	movs	r3, #3
 800e06c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e06e:	4b05      	ldr	r3, [pc, #20]	; (800e084 <RTC_ExitInitMode+0x78>)
 800e070:	689b      	ldr	r3, [r3, #8]
 800e072:	4a04      	ldr	r2, [pc, #16]	; (800e084 <RTC_ExitInitMode+0x78>)
 800e074:	f043 0320 	orr.w	r3, r3, #32
 800e078:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	58004000 	.word	0x58004000

0800e088 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	4603      	mov	r3, r0
 800e090:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e092:	2300      	movs	r3, #0
 800e094:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e096:	79fb      	ldrb	r3, [r7, #7]
 800e098:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e09a:	e005      	b.n	800e0a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e0a2:	7afb      	ldrb	r3, [r7, #11]
 800e0a4:	3b0a      	subs	r3, #10
 800e0a6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e0a8:	7afb      	ldrb	r3, [r7, #11]
 800e0aa:	2b09      	cmp	r3, #9
 800e0ac:	d8f6      	bhi.n	800e09c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	011b      	lsls	r3, r3, #4
 800e0b4:	b2da      	uxtb	r2, r3
 800e0b6:	7afb      	ldrb	r3, [r7, #11]
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	b2db      	uxtb	r3, r3
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3714      	adds	r7, #20
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e0d2:	79fb      	ldrb	r3, [r7, #7]
 800e0d4:	091b      	lsrs	r3, r3, #4
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	461a      	mov	r2, r3
 800e0da:	0092      	lsls	r2, r2, #2
 800e0dc:	4413      	add	r3, r2
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	f003 030f 	and.w	r3, r3, #15
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	7bfb      	ldrb	r3, [r7, #15]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	b2db      	uxtb	r3, r3
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3714      	adds	r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e10f      	b.n	800e32e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4a87      	ldr	r2, [pc, #540]	; (800e338 <HAL_SPI_Init+0x23c>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d00f      	beq.n	800e13e <HAL_SPI_Init+0x42>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	4a86      	ldr	r2, [pc, #536]	; (800e33c <HAL_SPI_Init+0x240>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d00a      	beq.n	800e13e <HAL_SPI_Init+0x42>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a84      	ldr	r2, [pc, #528]	; (800e340 <HAL_SPI_Init+0x244>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d005      	beq.n	800e13e <HAL_SPI_Init+0x42>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	68db      	ldr	r3, [r3, #12]
 800e136:	2b0f      	cmp	r3, #15
 800e138:	d901      	bls.n	800e13e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	e0f7      	b.n	800e32e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fc12 	bl	800e968 <SPI_GetPacketSize>
 800e144:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a7b      	ldr	r2, [pc, #492]	; (800e338 <HAL_SPI_Init+0x23c>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d00c      	beq.n	800e16a <HAL_SPI_Init+0x6e>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a79      	ldr	r2, [pc, #484]	; (800e33c <HAL_SPI_Init+0x240>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d007      	beq.n	800e16a <HAL_SPI_Init+0x6e>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a78      	ldr	r2, [pc, #480]	; (800e340 <HAL_SPI_Init+0x244>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d002      	beq.n	800e16a <HAL_SPI_Init+0x6e>
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2b08      	cmp	r3, #8
 800e168:	d811      	bhi.n	800e18e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e16e:	4a72      	ldr	r2, [pc, #456]	; (800e338 <HAL_SPI_Init+0x23c>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d009      	beq.n	800e188 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a70      	ldr	r2, [pc, #448]	; (800e33c <HAL_SPI_Init+0x240>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d004      	beq.n	800e188 <HAL_SPI_Init+0x8c>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4a6f      	ldr	r2, [pc, #444]	; (800e340 <HAL_SPI_Init+0x244>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d104      	bne.n	800e192 <HAL_SPI_Init+0x96>
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2b10      	cmp	r3, #16
 800e18c:	d901      	bls.n	800e192 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e18e:	2301      	movs	r3, #1
 800e190:	e0cd      	b.n	800e32e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d106      	bne.n	800e1ac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7f4 fccc 	bl	8002b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2202      	movs	r2, #2
 800e1b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f022 0201 	bic.w	r2, r2, #1
 800e1c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e1ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	699b      	ldr	r3, [r3, #24]
 800e1d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1d8:	d119      	bne.n	800e20e <HAL_SPI_Init+0x112>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1e2:	d103      	bne.n	800e1ec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d008      	beq.n	800e1fe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d10c      	bne.n	800e20e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1fc:	d107      	bne.n	800e20e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e20c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00f      	beq.n	800e23a <HAL_SPI_Init+0x13e>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	2b06      	cmp	r3, #6
 800e220:	d90b      	bls.n	800e23a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	430a      	orrs	r2, r1
 800e236:	601a      	str	r2, [r3, #0]
 800e238:	e007      	b.n	800e24a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e248:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	69da      	ldr	r2, [r3, #28]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e252:	431a      	orrs	r2, r3
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	431a      	orrs	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e25c:	ea42 0103 	orr.w	r1, r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	68da      	ldr	r2, [r3, #12]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	430a      	orrs	r2, r1
 800e26a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e274:	431a      	orrs	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e27a:	431a      	orrs	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	699b      	ldr	r3, [r3, #24]
 800e280:	431a      	orrs	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	431a      	orrs	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	431a      	orrs	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6a1b      	ldr	r3, [r3, #32]
 800e292:	431a      	orrs	r2, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	431a      	orrs	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e29e:	431a      	orrs	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	431a      	orrs	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2aa:	ea42 0103 	orr.w	r1, r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	430a      	orrs	r2, r1
 800e2b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d113      	bne.n	800e2ea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	689b      	ldr	r3, [r3, #8]
 800e2dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f022 0201 	bic.w	r2, r2, #1
 800e2f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00a      	beq.n	800e31c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	430a      	orrs	r2, r1
 800e31a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2201      	movs	r2, #1
 800e328:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	40013000 	.word	0x40013000
 800e33c:	40003800 	.word	0x40003800
 800e340:	40003c00 	.word	0x40003c00

0800e344 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b088      	sub	sp, #32
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	603b      	str	r3, [r7, #0]
 800e350:	4613      	mov	r3, r2
 800e352:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e358:	095b      	lsrs	r3, r3, #5
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	3301      	adds	r3, #1
 800e35e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	3330      	adds	r3, #48	; 0x30
 800e366:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e368:	f7f5 feac 	bl	80040c4 <HAL_GetTick>
 800e36c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b01      	cmp	r3, #1
 800e378:	d001      	beq.n	800e37e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e37a:	2302      	movs	r3, #2
 800e37c:	e250      	b.n	800e820 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d002      	beq.n	800e38a <HAL_SPI_Receive+0x46>
 800e384:	88fb      	ldrh	r3, [r7, #6]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d101      	bne.n	800e38e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e38a:	2301      	movs	r3, #1
 800e38c:	e248      	b.n	800e820 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e394:	2b01      	cmp	r3, #1
 800e396:	d101      	bne.n	800e39c <HAL_SPI_Receive+0x58>
 800e398:	2302      	movs	r3, #2
 800e39a:	e241      	b.n	800e820 <HAL_SPI_Receive+0x4dc>
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2204      	movs	r2, #4
 800e3a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	68ba      	ldr	r2, [r7, #8]
 800e3b8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	88fa      	ldrh	r2, [r7, #6]
 800e3be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	88fa      	ldrh	r2, [r7, #6]
 800e3c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	689b      	ldr	r3, [r3, #8]
 800e3f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e3f4:	d108      	bne.n	800e408 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e404:	601a      	str	r2, [r3, #0]
 800e406:	e009      	b.n	800e41c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e41a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	685a      	ldr	r2, [r3, #4]
 800e422:	4b95      	ldr	r3, [pc, #596]	; (800e678 <HAL_SPI_Receive+0x334>)
 800e424:	4013      	ands	r3, r2
 800e426:	88f9      	ldrh	r1, [r7, #6]
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	6812      	ldr	r2, [r2, #0]
 800e42c:	430b      	orrs	r3, r1
 800e42e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f042 0201 	orr.w	r2, r2, #1
 800e43e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e448:	d107      	bne.n	800e45a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e458:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	2b0f      	cmp	r3, #15
 800e460:	d96c      	bls.n	800e53c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e462:	e064      	b.n	800e52e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	695b      	ldr	r3, [r3, #20]
 800e46a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	695b      	ldr	r3, [r3, #20]
 800e472:	f003 0301 	and.w	r3, r3, #1
 800e476:	2b01      	cmp	r3, #1
 800e478:	d114      	bne.n	800e4a4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e482:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e484:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e48a:	1d1a      	adds	r2, r3, #4
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e496:	b29b      	uxth	r3, r3
 800e498:	3b01      	subs	r3, #1
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4a2:	e044      	b.n	800e52e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	8bfa      	ldrh	r2, [r7, #30]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d919      	bls.n	800e4e6 <HAL_SPI_Receive+0x1a2>
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d014      	beq.n	800e4e6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4c6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4cc:	1d1a      	adds	r2, r3, #4
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4e4:	e023      	b.n	800e52e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4e6:	f7f5 fded 	bl	80040c4 <HAL_GetTick>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	683a      	ldr	r2, [r7, #0]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d803      	bhi.n	800e4fe <HAL_SPI_Receive+0x1ba>
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4fc:	d102      	bne.n	800e504 <HAL_SPI_Receive+0x1c0>
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d114      	bne.n	800e52e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f000 f98f 	bl	800e828 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e510:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e52a:	2303      	movs	r3, #3
 800e52c:	e178      	b.n	800e820 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e534:	b29b      	uxth	r3, r3
 800e536:	2b00      	cmp	r3, #0
 800e538:	d194      	bne.n	800e464 <HAL_SPI_Receive+0x120>
 800e53a:	e15e      	b.n	800e7fa <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	2b07      	cmp	r3, #7
 800e542:	f240 8153 	bls.w	800e7ec <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e546:	e08f      	b.n	800e668 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	695b      	ldr	r3, [r3, #20]
 800e54e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	695b      	ldr	r3, [r3, #20]
 800e556:	f003 0301 	and.w	r3, r3, #1
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d114      	bne.n	800e588 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e562:	69ba      	ldr	r2, [r7, #24]
 800e564:	8812      	ldrh	r2, [r2, #0]
 800e566:	b292      	uxth	r2, r2
 800e568:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e56e:	1c9a      	adds	r2, r3, #2
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	3b01      	subs	r3, #1
 800e57e:	b29a      	uxth	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e586:	e06f      	b.n	800e668 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e58e:	b29b      	uxth	r3, r3
 800e590:	8bfa      	ldrh	r2, [r7, #30]
 800e592:	429a      	cmp	r2, r3
 800e594:	d924      	bls.n	800e5e0 <HAL_SPI_Receive+0x29c>
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d01f      	beq.n	800e5e0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5a4:	69ba      	ldr	r2, [r7, #24]
 800e5a6:	8812      	ldrh	r2, [r2, #0]
 800e5a8:	b292      	uxth	r2, r2
 800e5aa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5b0:	1c9a      	adds	r2, r3, #2
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ba:	69ba      	ldr	r2, [r7, #24]
 800e5bc:	8812      	ldrh	r2, [r2, #0]
 800e5be:	b292      	uxth	r2, r2
 800e5c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5c6:	1c9a      	adds	r2, r3, #2
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	3b02      	subs	r3, #2
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5de:	e043      	b.n	800e668 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d119      	bne.n	800e620 <HAL_SPI_Receive+0x2dc>
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d014      	beq.n	800e620 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5fa:	69ba      	ldr	r2, [r7, #24]
 800e5fc:	8812      	ldrh	r2, [r2, #0]
 800e5fe:	b292      	uxth	r2, r2
 800e600:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e606:	1c9a      	adds	r2, r3, #2
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e612:	b29b      	uxth	r3, r3
 800e614:	3b01      	subs	r3, #1
 800e616:	b29a      	uxth	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e61e:	e023      	b.n	800e668 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e620:	f7f5 fd50 	bl	80040c4 <HAL_GetTick>
 800e624:	4602      	mov	r2, r0
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	1ad3      	subs	r3, r2, r3
 800e62a:	683a      	ldr	r2, [r7, #0]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d803      	bhi.n	800e638 <HAL_SPI_Receive+0x2f4>
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e636:	d102      	bne.n	800e63e <HAL_SPI_Receive+0x2fa>
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d114      	bne.n	800e668 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f000 f8f2 	bl	800e828 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e64a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2201      	movs	r2, #1
 800e658:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e664:	2303      	movs	r3, #3
 800e666:	e0db      	b.n	800e820 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e66e:	b29b      	uxth	r3, r3
 800e670:	2b00      	cmp	r3, #0
 800e672:	f47f af69 	bne.w	800e548 <HAL_SPI_Receive+0x204>
 800e676:	e0c0      	b.n	800e7fa <HAL_SPI_Receive+0x4b6>
 800e678:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	695b      	ldr	r3, [r3, #20]
 800e682:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	695b      	ldr	r3, [r3, #20]
 800e68a:	f003 0301 	and.w	r3, r3, #1
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d117      	bne.n	800e6c2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e69e:	7812      	ldrb	r2, [r2, #0]
 800e6a0:	b2d2      	uxtb	r2, r2
 800e6a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6a8:	1c5a      	adds	r2, r3, #1
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	3b01      	subs	r3, #1
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6c0:	e094      	b.n	800e7ec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	8bfa      	ldrh	r2, [r7, #30]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d946      	bls.n	800e75e <HAL_SPI_Receive+0x41a>
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d041      	beq.n	800e75e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6e6:	7812      	ldrb	r2, [r2, #0]
 800e6e8:	b2d2      	uxtb	r2, r2
 800e6ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6f0:	1c5a      	adds	r2, r3, #1
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e702:	7812      	ldrb	r2, [r2, #0]
 800e704:	b2d2      	uxtb	r2, r2
 800e706:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e70c:	1c5a      	adds	r2, r3, #1
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e71e:	7812      	ldrb	r2, [r2, #0]
 800e720:	b2d2      	uxtb	r2, r2
 800e722:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e728:	1c5a      	adds	r2, r3, #1
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e73a:	7812      	ldrb	r2, [r2, #0]
 800e73c:	b2d2      	uxtb	r2, r2
 800e73e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e744:	1c5a      	adds	r2, r3, #1
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e750:	b29b      	uxth	r3, r3
 800e752:	3b04      	subs	r3, #4
 800e754:	b29a      	uxth	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e75c:	e046      	b.n	800e7ec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e764:	b29b      	uxth	r3, r3
 800e766:	2b03      	cmp	r3, #3
 800e768:	d81c      	bhi.n	800e7a4 <HAL_SPI_Receive+0x460>
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e770:	2b00      	cmp	r3, #0
 800e772:	d017      	beq.n	800e7a4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e780:	7812      	ldrb	r2, [r2, #0]
 800e782:	b2d2      	uxtb	r2, r2
 800e784:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e78a:	1c5a      	adds	r2, r3, #1
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e796:	b29b      	uxth	r3, r3
 800e798:	3b01      	subs	r3, #1
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7a2:	e023      	b.n	800e7ec <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7a4:	f7f5 fc8e 	bl	80040c4 <HAL_GetTick>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	1ad3      	subs	r3, r2, r3
 800e7ae:	683a      	ldr	r2, [r7, #0]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d803      	bhi.n	800e7bc <HAL_SPI_Receive+0x478>
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7ba:	d102      	bne.n	800e7c2 <HAL_SPI_Receive+0x47e>
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d114      	bne.n	800e7ec <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f000 f830 	bl	800e828 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	e019      	b.n	800e820 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f47f af41 	bne.w	800e67c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e7fa:	68f8      	ldr	r0, [r7, #12]
 800e7fc:	f000 f814 	bl	800e828 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2200      	movs	r2, #0
 800e80c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e816:	2b00      	cmp	r3, #0
 800e818:	d001      	beq.n	800e81e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	e000      	b.n	800e820 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e81e:	2300      	movs	r3, #0
  }
}
 800e820:	4618      	mov	r0, r3
 800e822:	3720      	adds	r7, #32
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e828:	b480      	push	{r7}
 800e82a:	b085      	sub	sp, #20
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	695b      	ldr	r3, [r3, #20]
 800e836:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	699a      	ldr	r2, [r3, #24]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f042 0208 	orr.w	r2, r2, #8
 800e846:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	699a      	ldr	r2, [r3, #24]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f042 0210 	orr.w	r2, r2, #16
 800e856:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f022 0201 	bic.w	r2, r2, #1
 800e866:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	6919      	ldr	r1, [r3, #16]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	4b3c      	ldr	r3, [pc, #240]	; (800e964 <SPI_CloseTransfer+0x13c>)
 800e874:	400b      	ands	r3, r1
 800e876:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	689a      	ldr	r2, [r3, #8]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e886:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	2b04      	cmp	r3, #4
 800e892:	d014      	beq.n	800e8be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f003 0320 	and.w	r3, r3, #32
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00f      	beq.n	800e8be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	699a      	ldr	r2, [r3, #24]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f042 0220 	orr.w	r2, r2, #32
 800e8bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	2b03      	cmp	r3, #3
 800e8c8:	d014      	beq.n	800e8f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00f      	beq.n	800e8f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8da:	f043 0204 	orr.w	r2, r3, #4
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	699a      	ldr	r2, [r3, #24]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00f      	beq.n	800e91e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e904:	f043 0201 	orr.w	r2, r3, #1
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	699a      	ldr	r2, [r3, #24]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e91c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e924:	2b00      	cmp	r3, #0
 800e926:	d00f      	beq.n	800e948 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e92e:	f043 0208 	orr.w	r2, r3, #8
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	699a      	ldr	r2, [r3, #24]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e946:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e958:	bf00      	nop
 800e95a:	3714      	adds	r7, #20
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr
 800e964:	fffffc90 	.word	0xfffffc90

0800e968 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e974:	095b      	lsrs	r3, r3, #5
 800e976:	3301      	adds	r3, #1
 800e978:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	3301      	adds	r3, #1
 800e980:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	3307      	adds	r3, #7
 800e986:	08db      	lsrs	r3, r3, #3
 800e988:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	fb02 f303 	mul.w	r3, r2, r3
}
 800e992:	4618      	mov	r0, r3
 800e994:	3714      	adds	r7, #20
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr

0800e99e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b082      	sub	sp, #8
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d101      	bne.n	800e9b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	e049      	b.n	800ea44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d106      	bne.n	800e9ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7f4 fd5b 	bl	8003480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2202      	movs	r2, #2
 800e9ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3304      	adds	r3, #4
 800e9da:	4619      	mov	r1, r3
 800e9dc:	4610      	mov	r0, r2
 800e9de:	f000 fe7d 	bl	800f6dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2201      	movs	r2, #1
 800ea26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2201      	movs	r2, #1
 800ea36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea42:	2300      	movs	r3, #0
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d001      	beq.n	800ea64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ea60:	2301      	movs	r3, #1
 800ea62:	e054      	b.n	800eb0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2202      	movs	r2, #2
 800ea68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	68da      	ldr	r2, [r3, #12]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f042 0201 	orr.w	r2, r2, #1
 800ea7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a26      	ldr	r2, [pc, #152]	; (800eb1c <HAL_TIM_Base_Start_IT+0xd0>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d022      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea8e:	d01d      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a22      	ldr	r2, [pc, #136]	; (800eb20 <HAL_TIM_Base_Start_IT+0xd4>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d018      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	4a21      	ldr	r2, [pc, #132]	; (800eb24 <HAL_TIM_Base_Start_IT+0xd8>)
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d013      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a1f      	ldr	r2, [pc, #124]	; (800eb28 <HAL_TIM_Base_Start_IT+0xdc>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d00e      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4a1e      	ldr	r2, [pc, #120]	; (800eb2c <HAL_TIM_Base_Start_IT+0xe0>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d009      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4a1c      	ldr	r2, [pc, #112]	; (800eb30 <HAL_TIM_Base_Start_IT+0xe4>)
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d004      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	4a1b      	ldr	r2, [pc, #108]	; (800eb34 <HAL_TIM_Base_Start_IT+0xe8>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d115      	bne.n	800eaf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	689a      	ldr	r2, [r3, #8]
 800ead2:	4b19      	ldr	r3, [pc, #100]	; (800eb38 <HAL_TIM_Base_Start_IT+0xec>)
 800ead4:	4013      	ands	r3, r2
 800ead6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2b06      	cmp	r3, #6
 800eadc:	d015      	beq.n	800eb0a <HAL_TIM_Base_Start_IT+0xbe>
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eae4:	d011      	beq.n	800eb0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f042 0201 	orr.w	r2, r2, #1
 800eaf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaf6:	e008      	b.n	800eb0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f042 0201 	orr.w	r2, r2, #1
 800eb06:	601a      	str	r2, [r3, #0]
 800eb08:	e000      	b.n	800eb0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3714      	adds	r7, #20
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr
 800eb1a:	bf00      	nop
 800eb1c:	40010000 	.word	0x40010000
 800eb20:	40000400 	.word	0x40000400
 800eb24:	40000800 	.word	0x40000800
 800eb28:	40000c00 	.word	0x40000c00
 800eb2c:	40010400 	.word	0x40010400
 800eb30:	40001800 	.word	0x40001800
 800eb34:	40014000 	.word	0x40014000
 800eb38:	00010007 	.word	0x00010007

0800eb3c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb46:	2300      	movs	r3, #0
 800eb48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d109      	bne.n	800eb64 <HAL_TIM_OC_Start_IT+0x28>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	bf14      	ite	ne
 800eb5c:	2301      	movne	r3, #1
 800eb5e:	2300      	moveq	r3, #0
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	e03c      	b.n	800ebde <HAL_TIM_OC_Start_IT+0xa2>
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	2b04      	cmp	r3, #4
 800eb68:	d109      	bne.n	800eb7e <HAL_TIM_OC_Start_IT+0x42>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	bf14      	ite	ne
 800eb76:	2301      	movne	r3, #1
 800eb78:	2300      	moveq	r3, #0
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	e02f      	b.n	800ebde <HAL_TIM_OC_Start_IT+0xa2>
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2b08      	cmp	r3, #8
 800eb82:	d109      	bne.n	800eb98 <HAL_TIM_OC_Start_IT+0x5c>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	bf14      	ite	ne
 800eb90:	2301      	movne	r3, #1
 800eb92:	2300      	moveq	r3, #0
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	e022      	b.n	800ebde <HAL_TIM_OC_Start_IT+0xa2>
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2b0c      	cmp	r3, #12
 800eb9c:	d109      	bne.n	800ebb2 <HAL_TIM_OC_Start_IT+0x76>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	bf14      	ite	ne
 800ebaa:	2301      	movne	r3, #1
 800ebac:	2300      	moveq	r3, #0
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	e015      	b.n	800ebde <HAL_TIM_OC_Start_IT+0xa2>
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	2b10      	cmp	r3, #16
 800ebb6:	d109      	bne.n	800ebcc <HAL_TIM_OC_Start_IT+0x90>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	bf14      	ite	ne
 800ebc4:	2301      	movne	r3, #1
 800ebc6:	2300      	moveq	r3, #0
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	e008      	b.n	800ebde <HAL_TIM_OC_Start_IT+0xa2>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	bf14      	ite	ne
 800ebd8:	2301      	movne	r3, #1
 800ebda:	2300      	moveq	r3, #0
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e0ec      	b.n	800edc0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d104      	bne.n	800ebf6 <HAL_TIM_OC_Start_IT+0xba>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2202      	movs	r2, #2
 800ebf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebf4:	e023      	b.n	800ec3e <HAL_TIM_OC_Start_IT+0x102>
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	2b04      	cmp	r3, #4
 800ebfa:	d104      	bne.n	800ec06 <HAL_TIM_OC_Start_IT+0xca>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2202      	movs	r2, #2
 800ec00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec04:	e01b      	b.n	800ec3e <HAL_TIM_OC_Start_IT+0x102>
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	2b08      	cmp	r3, #8
 800ec0a:	d104      	bne.n	800ec16 <HAL_TIM_OC_Start_IT+0xda>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2202      	movs	r2, #2
 800ec10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec14:	e013      	b.n	800ec3e <HAL_TIM_OC_Start_IT+0x102>
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2b0c      	cmp	r3, #12
 800ec1a:	d104      	bne.n	800ec26 <HAL_TIM_OC_Start_IT+0xea>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2202      	movs	r2, #2
 800ec20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec24:	e00b      	b.n	800ec3e <HAL_TIM_OC_Start_IT+0x102>
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	2b10      	cmp	r3, #16
 800ec2a:	d104      	bne.n	800ec36 <HAL_TIM_OC_Start_IT+0xfa>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2202      	movs	r2, #2
 800ec30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec34:	e003      	b.n	800ec3e <HAL_TIM_OC_Start_IT+0x102>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2202      	movs	r2, #2
 800ec3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	2b0c      	cmp	r3, #12
 800ec42:	d841      	bhi.n	800ecc8 <HAL_TIM_OC_Start_IT+0x18c>
 800ec44:	a201      	add	r2, pc, #4	; (adr r2, 800ec4c <HAL_TIM_OC_Start_IT+0x110>)
 800ec46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4a:	bf00      	nop
 800ec4c:	0800ec81 	.word	0x0800ec81
 800ec50:	0800ecc9 	.word	0x0800ecc9
 800ec54:	0800ecc9 	.word	0x0800ecc9
 800ec58:	0800ecc9 	.word	0x0800ecc9
 800ec5c:	0800ec93 	.word	0x0800ec93
 800ec60:	0800ecc9 	.word	0x0800ecc9
 800ec64:	0800ecc9 	.word	0x0800ecc9
 800ec68:	0800ecc9 	.word	0x0800ecc9
 800ec6c:	0800eca5 	.word	0x0800eca5
 800ec70:	0800ecc9 	.word	0x0800ecc9
 800ec74:	0800ecc9 	.word	0x0800ecc9
 800ec78:	0800ecc9 	.word	0x0800ecc9
 800ec7c:	0800ecb7 	.word	0x0800ecb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	68da      	ldr	r2, [r3, #12]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f042 0202 	orr.w	r2, r2, #2
 800ec8e:	60da      	str	r2, [r3, #12]
      break;
 800ec90:	e01d      	b.n	800ecce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	68da      	ldr	r2, [r3, #12]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f042 0204 	orr.w	r2, r2, #4
 800eca0:	60da      	str	r2, [r3, #12]
      break;
 800eca2:	e014      	b.n	800ecce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68da      	ldr	r2, [r3, #12]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f042 0208 	orr.w	r2, r2, #8
 800ecb2:	60da      	str	r2, [r3, #12]
      break;
 800ecb4:	e00b      	b.n	800ecce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	68da      	ldr	r2, [r3, #12]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f042 0210 	orr.w	r2, r2, #16
 800ecc4:	60da      	str	r2, [r3, #12]
      break;
 800ecc6:	e002      	b.n	800ecce <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	73fb      	strb	r3, [r7, #15]
      break;
 800eccc:	bf00      	nop
  }

  if (status == HAL_OK)
 800ecce:	7bfb      	ldrb	r3, [r7, #15]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d174      	bne.n	800edbe <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	6839      	ldr	r1, [r7, #0]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f001 f917 	bl	800ff10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a38      	ldr	r2, [pc, #224]	; (800edc8 <HAL_TIM_OC_Start_IT+0x28c>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d013      	beq.n	800ed14 <HAL_TIM_OC_Start_IT+0x1d8>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a36      	ldr	r2, [pc, #216]	; (800edcc <HAL_TIM_OC_Start_IT+0x290>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d00e      	beq.n	800ed14 <HAL_TIM_OC_Start_IT+0x1d8>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a35      	ldr	r2, [pc, #212]	; (800edd0 <HAL_TIM_OC_Start_IT+0x294>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d009      	beq.n	800ed14 <HAL_TIM_OC_Start_IT+0x1d8>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a33      	ldr	r2, [pc, #204]	; (800edd4 <HAL_TIM_OC_Start_IT+0x298>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d004      	beq.n	800ed14 <HAL_TIM_OC_Start_IT+0x1d8>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4a32      	ldr	r2, [pc, #200]	; (800edd8 <HAL_TIM_OC_Start_IT+0x29c>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d101      	bne.n	800ed18 <HAL_TIM_OC_Start_IT+0x1dc>
 800ed14:	2301      	movs	r3, #1
 800ed16:	e000      	b.n	800ed1a <HAL_TIM_OC_Start_IT+0x1de>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d007      	beq.n	800ed2e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	4a25      	ldr	r2, [pc, #148]	; (800edc8 <HAL_TIM_OC_Start_IT+0x28c>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d022      	beq.n	800ed7e <HAL_TIM_OC_Start_IT+0x242>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed40:	d01d      	beq.n	800ed7e <HAL_TIM_OC_Start_IT+0x242>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4a25      	ldr	r2, [pc, #148]	; (800eddc <HAL_TIM_OC_Start_IT+0x2a0>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d018      	beq.n	800ed7e <HAL_TIM_OC_Start_IT+0x242>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a23      	ldr	r2, [pc, #140]	; (800ede0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d013      	beq.n	800ed7e <HAL_TIM_OC_Start_IT+0x242>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4a22      	ldr	r2, [pc, #136]	; (800ede4 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d00e      	beq.n	800ed7e <HAL_TIM_OC_Start_IT+0x242>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a19      	ldr	r2, [pc, #100]	; (800edcc <HAL_TIM_OC_Start_IT+0x290>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d009      	beq.n	800ed7e <HAL_TIM_OC_Start_IT+0x242>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4a1e      	ldr	r2, [pc, #120]	; (800ede8 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d004      	beq.n	800ed7e <HAL_TIM_OC_Start_IT+0x242>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a15      	ldr	r2, [pc, #84]	; (800edd0 <HAL_TIM_OC_Start_IT+0x294>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d115      	bne.n	800edaa <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	689a      	ldr	r2, [r3, #8]
 800ed84:	4b19      	ldr	r3, [pc, #100]	; (800edec <HAL_TIM_OC_Start_IT+0x2b0>)
 800ed86:	4013      	ands	r3, r2
 800ed88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b06      	cmp	r3, #6
 800ed8e:	d015      	beq.n	800edbc <HAL_TIM_OC_Start_IT+0x280>
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed96:	d011      	beq.n	800edbc <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f042 0201 	orr.w	r2, r2, #1
 800eda6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eda8:	e008      	b.n	800edbc <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f042 0201 	orr.w	r2, r2, #1
 800edb8:	601a      	str	r2, [r3, #0]
 800edba:	e000      	b.n	800edbe <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edbc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800edbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3710      	adds	r7, #16
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	40010000 	.word	0x40010000
 800edcc:	40010400 	.word	0x40010400
 800edd0:	40014000 	.word	0x40014000
 800edd4:	40014400 	.word	0x40014400
 800edd8:	40014800 	.word	0x40014800
 800eddc:	40000400 	.word	0x40000400
 800ede0:	40000800 	.word	0x40000800
 800ede4:	40000c00 	.word	0x40000c00
 800ede8:	40001800 	.word	0x40001800
 800edec:	00010007 	.word	0x00010007

0800edf0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b0c      	cmp	r3, #12
 800ee02:	d841      	bhi.n	800ee88 <HAL_TIM_OC_Stop_IT+0x98>
 800ee04:	a201      	add	r2, pc, #4	; (adr r2, 800ee0c <HAL_TIM_OC_Stop_IT+0x1c>)
 800ee06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0a:	bf00      	nop
 800ee0c:	0800ee41 	.word	0x0800ee41
 800ee10:	0800ee89 	.word	0x0800ee89
 800ee14:	0800ee89 	.word	0x0800ee89
 800ee18:	0800ee89 	.word	0x0800ee89
 800ee1c:	0800ee53 	.word	0x0800ee53
 800ee20:	0800ee89 	.word	0x0800ee89
 800ee24:	0800ee89 	.word	0x0800ee89
 800ee28:	0800ee89 	.word	0x0800ee89
 800ee2c:	0800ee65 	.word	0x0800ee65
 800ee30:	0800ee89 	.word	0x0800ee89
 800ee34:	0800ee89 	.word	0x0800ee89
 800ee38:	0800ee89 	.word	0x0800ee89
 800ee3c:	0800ee77 	.word	0x0800ee77
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	68da      	ldr	r2, [r3, #12]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f022 0202 	bic.w	r2, r2, #2
 800ee4e:	60da      	str	r2, [r3, #12]
      break;
 800ee50:	e01d      	b.n	800ee8e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68da      	ldr	r2, [r3, #12]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f022 0204 	bic.w	r2, r2, #4
 800ee60:	60da      	str	r2, [r3, #12]
      break;
 800ee62:	e014      	b.n	800ee8e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	68da      	ldr	r2, [r3, #12]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f022 0208 	bic.w	r2, r2, #8
 800ee72:	60da      	str	r2, [r3, #12]
      break;
 800ee74:	e00b      	b.n	800ee8e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	68da      	ldr	r2, [r3, #12]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f022 0210 	bic.w	r2, r2, #16
 800ee84:	60da      	str	r2, [r3, #12]
      break;
 800ee86:	e002      	b.n	800ee8e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ee8c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ee8e:	7bfb      	ldrb	r3, [r7, #15]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f040 8081 	bne.w	800ef98 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	6839      	ldr	r1, [r7, #0]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f001 f836 	bl	800ff10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a3e      	ldr	r2, [pc, #248]	; (800efa4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d013      	beq.n	800eed6 <HAL_TIM_OC_Stop_IT+0xe6>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a3d      	ldr	r2, [pc, #244]	; (800efa8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d00e      	beq.n	800eed6 <HAL_TIM_OC_Stop_IT+0xe6>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a3b      	ldr	r2, [pc, #236]	; (800efac <HAL_TIM_OC_Stop_IT+0x1bc>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d009      	beq.n	800eed6 <HAL_TIM_OC_Stop_IT+0xe6>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a3a      	ldr	r2, [pc, #232]	; (800efb0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d004      	beq.n	800eed6 <HAL_TIM_OC_Stop_IT+0xe6>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a38      	ldr	r2, [pc, #224]	; (800efb4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d101      	bne.n	800eeda <HAL_TIM_OC_Stop_IT+0xea>
 800eed6:	2301      	movs	r3, #1
 800eed8:	e000      	b.n	800eedc <HAL_TIM_OC_Stop_IT+0xec>
 800eeda:	2300      	movs	r3, #0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d017      	beq.n	800ef10 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	6a1a      	ldr	r2, [r3, #32]
 800eee6:	f241 1311 	movw	r3, #4369	; 0x1111
 800eeea:	4013      	ands	r3, r2
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d10f      	bne.n	800ef10 <HAL_TIM_OC_Stop_IT+0x120>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	6a1a      	ldr	r2, [r3, #32]
 800eef6:	f240 4344 	movw	r3, #1092	; 0x444
 800eefa:	4013      	ands	r3, r2
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d107      	bne.n	800ef10 <HAL_TIM_OC_Stop_IT+0x120>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ef0e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	6a1a      	ldr	r2, [r3, #32]
 800ef16:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef1a:	4013      	ands	r3, r2
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10f      	bne.n	800ef40 <HAL_TIM_OC_Stop_IT+0x150>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	6a1a      	ldr	r2, [r3, #32]
 800ef26:	f240 4344 	movw	r3, #1092	; 0x444
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d107      	bne.n	800ef40 <HAL_TIM_OC_Stop_IT+0x150>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f022 0201 	bic.w	r2, r2, #1
 800ef3e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d104      	bne.n	800ef50 <HAL_TIM_OC_Stop_IT+0x160>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2201      	movs	r2, #1
 800ef4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef4e:	e023      	b.n	800ef98 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	2b04      	cmp	r3, #4
 800ef54:	d104      	bne.n	800ef60 <HAL_TIM_OC_Stop_IT+0x170>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef5e:	e01b      	b.n	800ef98 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	2b08      	cmp	r3, #8
 800ef64:	d104      	bne.n	800ef70 <HAL_TIM_OC_Stop_IT+0x180>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2201      	movs	r2, #1
 800ef6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef6e:	e013      	b.n	800ef98 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	2b0c      	cmp	r3, #12
 800ef74:	d104      	bne.n	800ef80 <HAL_TIM_OC_Stop_IT+0x190>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef7e:	e00b      	b.n	800ef98 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	2b10      	cmp	r3, #16
 800ef84:	d104      	bne.n	800ef90 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2201      	movs	r2, #1
 800ef8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef8e:	e003      	b.n	800ef98 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2201      	movs	r2, #1
 800ef94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ef98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3710      	adds	r7, #16
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	40010000 	.word	0x40010000
 800efa8:	40010400 	.word	0x40010400
 800efac:	40014000 	.word	0x40014000
 800efb0:	40014400 	.word	0x40014400
 800efb4:	40014800 	.word	0x40014800

0800efb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d101      	bne.n	800efca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800efc6:	2301      	movs	r3, #1
 800efc8:	e049      	b.n	800f05e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d106      	bne.n	800efe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2200      	movs	r2, #0
 800efda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 f841 	bl	800f066 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2202      	movs	r2, #2
 800efe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	3304      	adds	r3, #4
 800eff4:	4619      	mov	r1, r3
 800eff6:	4610      	mov	r0, r2
 800eff8:	f000 fb70 	bl	800f6dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2201      	movs	r2, #1
 800f000:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2201      	movs	r2, #1
 800f010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2201      	movs	r2, #1
 800f018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2201      	movs	r2, #1
 800f028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2201      	movs	r2, #1
 800f030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2201      	movs	r2, #1
 800f048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f066:	b480      	push	{r7}
 800f068:	b083      	sub	sp, #12
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f06e:	bf00      	nop
 800f070:	370c      	adds	r7, #12
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b084      	sub	sp, #16
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	691b      	ldr	r3, [r3, #16]
 800f090:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	f003 0302 	and.w	r3, r3, #2
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d020      	beq.n	800f0de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f003 0302 	and.w	r3, r3, #2
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d01b      	beq.n	800f0de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f06f 0202 	mvn.w	r2, #2
 800f0ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	699b      	ldr	r3, [r3, #24]
 800f0bc:	f003 0303 	and.w	r3, r3, #3
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d003      	beq.n	800f0cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f000 faeb 	bl	800f6a0 <HAL_TIM_IC_CaptureCallback>
 800f0ca:	e005      	b.n	800f0d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f7f2 f9ff 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 faee 	bl	800f6b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	f003 0304 	and.w	r3, r3, #4
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d020      	beq.n	800f12a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f003 0304 	and.w	r3, r3, #4
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d01b      	beq.n	800f12a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f06f 0204 	mvn.w	r2, #4
 800f0fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2202      	movs	r2, #2
 800f100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	699b      	ldr	r3, [r3, #24]
 800f108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d003      	beq.n	800f118 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fac5 	bl	800f6a0 <HAL_TIM_IC_CaptureCallback>
 800f116:	e005      	b.n	800f124 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f7f2 f9d9 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 fac8 	bl	800f6b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2200      	movs	r2, #0
 800f128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	f003 0308 	and.w	r3, r3, #8
 800f130:	2b00      	cmp	r3, #0
 800f132:	d020      	beq.n	800f176 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f003 0308 	and.w	r3, r3, #8
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d01b      	beq.n	800f176 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f06f 0208 	mvn.w	r2, #8
 800f146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2204      	movs	r2, #4
 800f14c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	69db      	ldr	r3, [r3, #28]
 800f154:	f003 0303 	and.w	r3, r3, #3
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d003      	beq.n	800f164 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 fa9f 	bl	800f6a0 <HAL_TIM_IC_CaptureCallback>
 800f162:	e005      	b.n	800f170 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7f2 f9b3 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 faa2 	bl	800f6b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	f003 0310 	and.w	r3, r3, #16
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d020      	beq.n	800f1c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f003 0310 	and.w	r3, r3, #16
 800f186:	2b00      	cmp	r3, #0
 800f188:	d01b      	beq.n	800f1c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f06f 0210 	mvn.w	r2, #16
 800f192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2208      	movs	r2, #8
 800f198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	69db      	ldr	r3, [r3, #28]
 800f1a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d003      	beq.n	800f1b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 fa79 	bl	800f6a0 <HAL_TIM_IC_CaptureCallback>
 800f1ae:	e005      	b.n	800f1bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7f2 f98d 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f000 fa7c 	bl	800f6b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	f003 0301 	and.w	r3, r3, #1
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00c      	beq.n	800f1e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f003 0301 	and.w	r3, r3, #1
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d007      	beq.n	800f1e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f06f 0201 	mvn.w	r2, #1
 800f1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f7f2 ffdb 	bl	800219c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d104      	bne.n	800f1fa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00c      	beq.n	800f214 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f200:	2b00      	cmp	r3, #0
 800f202:	d007      	beq.n	800f214 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f20c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 ffba 	bl	8010188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d00c      	beq.n	800f238 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f224:	2b00      	cmp	r3, #0
 800f226:	d007      	beq.n	800f238 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 ffb2 	bl	801019c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d00c      	beq.n	800f25c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d007      	beq.n	800f25c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 fa36 	bl	800f6c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	f003 0320 	and.w	r3, r3, #32
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00c      	beq.n	800f280 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f003 0320 	and.w	r3, r3, #32
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d007      	beq.n	800f280 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f06f 0220 	mvn.w	r2, #32
 800f278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 ff7a 	bl	8010174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f280:	bf00      	nop
 800f282:	3710      	adds	r7, #16
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b086      	sub	sp, #24
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f294:	2300      	movs	r3, #0
 800f296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d101      	bne.n	800f2a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f2a2:	2302      	movs	r3, #2
 800f2a4:	e0ff      	b.n	800f4a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2b14      	cmp	r3, #20
 800f2b2:	f200 80f0 	bhi.w	800f496 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f2b6:	a201      	add	r2, pc, #4	; (adr r2, 800f2bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2bc:	0800f311 	.word	0x0800f311
 800f2c0:	0800f497 	.word	0x0800f497
 800f2c4:	0800f497 	.word	0x0800f497
 800f2c8:	0800f497 	.word	0x0800f497
 800f2cc:	0800f351 	.word	0x0800f351
 800f2d0:	0800f497 	.word	0x0800f497
 800f2d4:	0800f497 	.word	0x0800f497
 800f2d8:	0800f497 	.word	0x0800f497
 800f2dc:	0800f393 	.word	0x0800f393
 800f2e0:	0800f497 	.word	0x0800f497
 800f2e4:	0800f497 	.word	0x0800f497
 800f2e8:	0800f497 	.word	0x0800f497
 800f2ec:	0800f3d3 	.word	0x0800f3d3
 800f2f0:	0800f497 	.word	0x0800f497
 800f2f4:	0800f497 	.word	0x0800f497
 800f2f8:	0800f497 	.word	0x0800f497
 800f2fc:	0800f415 	.word	0x0800f415
 800f300:	0800f497 	.word	0x0800f497
 800f304:	0800f497 	.word	0x0800f497
 800f308:	0800f497 	.word	0x0800f497
 800f30c:	0800f455 	.word	0x0800f455
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	68b9      	ldr	r1, [r7, #8]
 800f316:	4618      	mov	r0, r3
 800f318:	f000 fa86 	bl	800f828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	699a      	ldr	r2, [r3, #24]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f042 0208 	orr.w	r2, r2, #8
 800f32a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	699a      	ldr	r2, [r3, #24]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f022 0204 	bic.w	r2, r2, #4
 800f33a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	6999      	ldr	r1, [r3, #24]
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	691a      	ldr	r2, [r3, #16]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	430a      	orrs	r2, r1
 800f34c:	619a      	str	r2, [r3, #24]
      break;
 800f34e:	e0a5      	b.n	800f49c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	68b9      	ldr	r1, [r7, #8]
 800f356:	4618      	mov	r0, r3
 800f358:	f000 faf6 	bl	800f948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	699a      	ldr	r2, [r3, #24]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f36a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	699a      	ldr	r2, [r3, #24]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f37a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	6999      	ldr	r1, [r3, #24]
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	691b      	ldr	r3, [r3, #16]
 800f386:	021a      	lsls	r2, r3, #8
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	430a      	orrs	r2, r1
 800f38e:	619a      	str	r2, [r3, #24]
      break;
 800f390:	e084      	b.n	800f49c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	68b9      	ldr	r1, [r7, #8]
 800f398:	4618      	mov	r0, r3
 800f39a:	f000 fb5f 	bl	800fa5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	69da      	ldr	r2, [r3, #28]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f042 0208 	orr.w	r2, r2, #8
 800f3ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	69da      	ldr	r2, [r3, #28]
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f022 0204 	bic.w	r2, r2, #4
 800f3bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	69d9      	ldr	r1, [r3, #28]
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	691a      	ldr	r2, [r3, #16]
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	430a      	orrs	r2, r1
 800f3ce:	61da      	str	r2, [r3, #28]
      break;
 800f3d0:	e064      	b.n	800f49c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	68b9      	ldr	r1, [r7, #8]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f000 fbc7 	bl	800fb6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	69da      	ldr	r2, [r3, #28]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	69da      	ldr	r2, [r3, #28]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	69d9      	ldr	r1, [r3, #28]
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	021a      	lsls	r2, r3, #8
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	430a      	orrs	r2, r1
 800f410:	61da      	str	r2, [r3, #28]
      break;
 800f412:	e043      	b.n	800f49c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	68b9      	ldr	r1, [r7, #8]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 fc10 	bl	800fc40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f042 0208 	orr.w	r2, r2, #8
 800f42e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f022 0204 	bic.w	r2, r2, #4
 800f43e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	691a      	ldr	r2, [r3, #16]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	430a      	orrs	r2, r1
 800f450:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f452:	e023      	b.n	800f49c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68b9      	ldr	r1, [r7, #8]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 fc54 	bl	800fd08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f46e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f47e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	021a      	lsls	r2, r3, #8
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	430a      	orrs	r2, r1
 800f492:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f494:	e002      	b.n	800f49c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f496:	2301      	movs	r3, #1
 800f498:	75fb      	strb	r3, [r7, #23]
      break;
 800f49a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3718      	adds	r7, #24
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop

0800f4b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d101      	bne.n	800f4cc <HAL_TIM_ConfigClockSource+0x1c>
 800f4c8:	2302      	movs	r3, #2
 800f4ca:	e0dc      	b.n	800f686 <HAL_TIM_ConfigClockSource+0x1d6>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2202      	movs	r2, #2
 800f4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	689b      	ldr	r3, [r3, #8]
 800f4e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f4e4:	68ba      	ldr	r2, [r7, #8]
 800f4e6:	4b6a      	ldr	r3, [pc, #424]	; (800f690 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f4e8:	4013      	ands	r3, r2
 800f4ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f4f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	68ba      	ldr	r2, [r7, #8]
 800f4fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4a64      	ldr	r2, [pc, #400]	; (800f694 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f502:	4293      	cmp	r3, r2
 800f504:	f000 80a9 	beq.w	800f65a <HAL_TIM_ConfigClockSource+0x1aa>
 800f508:	4a62      	ldr	r2, [pc, #392]	; (800f694 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	f200 80ae 	bhi.w	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f510:	4a61      	ldr	r2, [pc, #388]	; (800f698 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f512:	4293      	cmp	r3, r2
 800f514:	f000 80a1 	beq.w	800f65a <HAL_TIM_ConfigClockSource+0x1aa>
 800f518:	4a5f      	ldr	r2, [pc, #380]	; (800f698 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	f200 80a6 	bhi.w	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f520:	4a5e      	ldr	r2, [pc, #376]	; (800f69c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f522:	4293      	cmp	r3, r2
 800f524:	f000 8099 	beq.w	800f65a <HAL_TIM_ConfigClockSource+0x1aa>
 800f528:	4a5c      	ldr	r2, [pc, #368]	; (800f69c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	f200 809e 	bhi.w	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f530:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f534:	f000 8091 	beq.w	800f65a <HAL_TIM_ConfigClockSource+0x1aa>
 800f538:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f53c:	f200 8096 	bhi.w	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f544:	f000 8089 	beq.w	800f65a <HAL_TIM_ConfigClockSource+0x1aa>
 800f548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f54c:	f200 808e 	bhi.w	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f554:	d03e      	beq.n	800f5d4 <HAL_TIM_ConfigClockSource+0x124>
 800f556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f55a:	f200 8087 	bhi.w	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f55e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f562:	f000 8086 	beq.w	800f672 <HAL_TIM_ConfigClockSource+0x1c2>
 800f566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f56a:	d87f      	bhi.n	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f56c:	2b70      	cmp	r3, #112	; 0x70
 800f56e:	d01a      	beq.n	800f5a6 <HAL_TIM_ConfigClockSource+0xf6>
 800f570:	2b70      	cmp	r3, #112	; 0x70
 800f572:	d87b      	bhi.n	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f574:	2b60      	cmp	r3, #96	; 0x60
 800f576:	d050      	beq.n	800f61a <HAL_TIM_ConfigClockSource+0x16a>
 800f578:	2b60      	cmp	r3, #96	; 0x60
 800f57a:	d877      	bhi.n	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f57c:	2b50      	cmp	r3, #80	; 0x50
 800f57e:	d03c      	beq.n	800f5fa <HAL_TIM_ConfigClockSource+0x14a>
 800f580:	2b50      	cmp	r3, #80	; 0x50
 800f582:	d873      	bhi.n	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f584:	2b40      	cmp	r3, #64	; 0x40
 800f586:	d058      	beq.n	800f63a <HAL_TIM_ConfigClockSource+0x18a>
 800f588:	2b40      	cmp	r3, #64	; 0x40
 800f58a:	d86f      	bhi.n	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f58c:	2b30      	cmp	r3, #48	; 0x30
 800f58e:	d064      	beq.n	800f65a <HAL_TIM_ConfigClockSource+0x1aa>
 800f590:	2b30      	cmp	r3, #48	; 0x30
 800f592:	d86b      	bhi.n	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f594:	2b20      	cmp	r3, #32
 800f596:	d060      	beq.n	800f65a <HAL_TIM_ConfigClockSource+0x1aa>
 800f598:	2b20      	cmp	r3, #32
 800f59a:	d867      	bhi.n	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d05c      	beq.n	800f65a <HAL_TIM_ConfigClockSource+0x1aa>
 800f5a0:	2b10      	cmp	r3, #16
 800f5a2:	d05a      	beq.n	800f65a <HAL_TIM_ConfigClockSource+0x1aa>
 800f5a4:	e062      	b.n	800f66c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6818      	ldr	r0, [r3, #0]
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	6899      	ldr	r1, [r3, #8]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	f000 fc8b 	bl	800fed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	689b      	ldr	r3, [r3, #8]
 800f5c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f5c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	68ba      	ldr	r2, [r7, #8]
 800f5d0:	609a      	str	r2, [r3, #8]
      break;
 800f5d2:	e04f      	b.n	800f674 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6818      	ldr	r0, [r3, #0]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	6899      	ldr	r1, [r3, #8]
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	685a      	ldr	r2, [r3, #4]
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	f000 fc74 	bl	800fed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	689a      	ldr	r2, [r3, #8]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f5f6:	609a      	str	r2, [r3, #8]
      break;
 800f5f8:	e03c      	b.n	800f674 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6818      	ldr	r0, [r3, #0]
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	6859      	ldr	r1, [r3, #4]
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	461a      	mov	r2, r3
 800f608:	f000 fbe4 	bl	800fdd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2150      	movs	r1, #80	; 0x50
 800f612:	4618      	mov	r0, r3
 800f614:	f000 fc3e 	bl	800fe94 <TIM_ITRx_SetConfig>
      break;
 800f618:	e02c      	b.n	800f674 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6818      	ldr	r0, [r3, #0]
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	6859      	ldr	r1, [r3, #4]
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	461a      	mov	r2, r3
 800f628:	f000 fc03 	bl	800fe32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	2160      	movs	r1, #96	; 0x60
 800f632:	4618      	mov	r0, r3
 800f634:	f000 fc2e 	bl	800fe94 <TIM_ITRx_SetConfig>
      break;
 800f638:	e01c      	b.n	800f674 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6818      	ldr	r0, [r3, #0]
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	6859      	ldr	r1, [r3, #4]
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	461a      	mov	r2, r3
 800f648:	f000 fbc4 	bl	800fdd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2140      	movs	r1, #64	; 0x40
 800f652:	4618      	mov	r0, r3
 800f654:	f000 fc1e 	bl	800fe94 <TIM_ITRx_SetConfig>
      break;
 800f658:	e00c      	b.n	800f674 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681a      	ldr	r2, [r3, #0]
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	4619      	mov	r1, r3
 800f664:	4610      	mov	r0, r2
 800f666:	f000 fc15 	bl	800fe94 <TIM_ITRx_SetConfig>
      break;
 800f66a:	e003      	b.n	800f674 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	73fb      	strb	r3, [r7, #15]
      break;
 800f670:	e000      	b.n	800f674 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2201      	movs	r2, #1
 800f678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f684:	7bfb      	ldrb	r3, [r7, #15]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	ffceff88 	.word	0xffceff88
 800f694:	00100040 	.word	0x00100040
 800f698:	00100030 	.word	0x00100030
 800f69c:	00100020 	.word	0x00100020

0800f6a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b083      	sub	sp, #12
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f6a8:	bf00      	nop
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6bc:	bf00      	nop
 800f6be:	370c      	adds	r7, #12
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6d0:	bf00      	nop
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr

0800f6dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b085      	sub	sp, #20
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a46      	ldr	r2, [pc, #280]	; (800f808 <TIM_Base_SetConfig+0x12c>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d013      	beq.n	800f71c <TIM_Base_SetConfig+0x40>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6fa:	d00f      	beq.n	800f71c <TIM_Base_SetConfig+0x40>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a43      	ldr	r2, [pc, #268]	; (800f80c <TIM_Base_SetConfig+0x130>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d00b      	beq.n	800f71c <TIM_Base_SetConfig+0x40>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a42      	ldr	r2, [pc, #264]	; (800f810 <TIM_Base_SetConfig+0x134>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d007      	beq.n	800f71c <TIM_Base_SetConfig+0x40>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a41      	ldr	r2, [pc, #260]	; (800f814 <TIM_Base_SetConfig+0x138>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d003      	beq.n	800f71c <TIM_Base_SetConfig+0x40>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a40      	ldr	r2, [pc, #256]	; (800f818 <TIM_Base_SetConfig+0x13c>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d108      	bne.n	800f72e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	68fa      	ldr	r2, [r7, #12]
 800f72a:	4313      	orrs	r3, r2
 800f72c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4a35      	ldr	r2, [pc, #212]	; (800f808 <TIM_Base_SetConfig+0x12c>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d01f      	beq.n	800f776 <TIM_Base_SetConfig+0x9a>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f73c:	d01b      	beq.n	800f776 <TIM_Base_SetConfig+0x9a>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4a32      	ldr	r2, [pc, #200]	; (800f80c <TIM_Base_SetConfig+0x130>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d017      	beq.n	800f776 <TIM_Base_SetConfig+0x9a>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4a31      	ldr	r2, [pc, #196]	; (800f810 <TIM_Base_SetConfig+0x134>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d013      	beq.n	800f776 <TIM_Base_SetConfig+0x9a>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4a30      	ldr	r2, [pc, #192]	; (800f814 <TIM_Base_SetConfig+0x138>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d00f      	beq.n	800f776 <TIM_Base_SetConfig+0x9a>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4a2f      	ldr	r2, [pc, #188]	; (800f818 <TIM_Base_SetConfig+0x13c>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d00b      	beq.n	800f776 <TIM_Base_SetConfig+0x9a>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4a2e      	ldr	r2, [pc, #184]	; (800f81c <TIM_Base_SetConfig+0x140>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d007      	beq.n	800f776 <TIM_Base_SetConfig+0x9a>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4a2d      	ldr	r2, [pc, #180]	; (800f820 <TIM_Base_SetConfig+0x144>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d003      	beq.n	800f776 <TIM_Base_SetConfig+0x9a>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4a2c      	ldr	r2, [pc, #176]	; (800f824 <TIM_Base_SetConfig+0x148>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d108      	bne.n	800f788 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f77c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	4313      	orrs	r3, r2
 800f786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	4313      	orrs	r3, r2
 800f794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	689a      	ldr	r2, [r3, #8]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a16      	ldr	r2, [pc, #88]	; (800f808 <TIM_Base_SetConfig+0x12c>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d00f      	beq.n	800f7d4 <TIM_Base_SetConfig+0xf8>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a18      	ldr	r2, [pc, #96]	; (800f818 <TIM_Base_SetConfig+0x13c>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d00b      	beq.n	800f7d4 <TIM_Base_SetConfig+0xf8>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a17      	ldr	r2, [pc, #92]	; (800f81c <TIM_Base_SetConfig+0x140>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d007      	beq.n	800f7d4 <TIM_Base_SetConfig+0xf8>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a16      	ldr	r2, [pc, #88]	; (800f820 <TIM_Base_SetConfig+0x144>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d003      	beq.n	800f7d4 <TIM_Base_SetConfig+0xf8>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a15      	ldr	r2, [pc, #84]	; (800f824 <TIM_Base_SetConfig+0x148>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d103      	bne.n	800f7dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	691a      	ldr	r2, [r3, #16]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	691b      	ldr	r3, [r3, #16]
 800f7e6:	f003 0301 	and.w	r3, r3, #1
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d105      	bne.n	800f7fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	691b      	ldr	r3, [r3, #16]
 800f7f2:	f023 0201 	bic.w	r2, r3, #1
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	611a      	str	r2, [r3, #16]
  }
}
 800f7fa:	bf00      	nop
 800f7fc:	3714      	adds	r7, #20
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr
 800f806:	bf00      	nop
 800f808:	40010000 	.word	0x40010000
 800f80c:	40000400 	.word	0x40000400
 800f810:	40000800 	.word	0x40000800
 800f814:	40000c00 	.word	0x40000c00
 800f818:	40010400 	.word	0x40010400
 800f81c:	40014000 	.word	0x40014000
 800f820:	40014400 	.word	0x40014400
 800f824:	40014800 	.word	0x40014800

0800f828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f828:	b480      	push	{r7}
 800f82a:	b087      	sub	sp, #28
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a1b      	ldr	r3, [r3, #32]
 800f836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6a1b      	ldr	r3, [r3, #32]
 800f83c:	f023 0201 	bic.w	r2, r3, #1
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	699b      	ldr	r3, [r3, #24]
 800f84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f850:	68fa      	ldr	r2, [r7, #12]
 800f852:	4b37      	ldr	r3, [pc, #220]	; (800f930 <TIM_OC1_SetConfig+0x108>)
 800f854:	4013      	ands	r3, r2
 800f856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f023 0303 	bic.w	r3, r3, #3
 800f85e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	4313      	orrs	r3, r2
 800f868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	f023 0302 	bic.w	r3, r3, #2
 800f870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	697a      	ldr	r2, [r7, #20]
 800f878:	4313      	orrs	r3, r2
 800f87a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a2d      	ldr	r2, [pc, #180]	; (800f934 <TIM_OC1_SetConfig+0x10c>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d00f      	beq.n	800f8a4 <TIM_OC1_SetConfig+0x7c>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a2c      	ldr	r2, [pc, #176]	; (800f938 <TIM_OC1_SetConfig+0x110>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d00b      	beq.n	800f8a4 <TIM_OC1_SetConfig+0x7c>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4a2b      	ldr	r2, [pc, #172]	; (800f93c <TIM_OC1_SetConfig+0x114>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d007      	beq.n	800f8a4 <TIM_OC1_SetConfig+0x7c>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a2a      	ldr	r2, [pc, #168]	; (800f940 <TIM_OC1_SetConfig+0x118>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d003      	beq.n	800f8a4 <TIM_OC1_SetConfig+0x7c>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4a29      	ldr	r2, [pc, #164]	; (800f944 <TIM_OC1_SetConfig+0x11c>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d10c      	bne.n	800f8be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	f023 0308 	bic.w	r3, r3, #8
 800f8aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	697a      	ldr	r2, [r7, #20]
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	f023 0304 	bic.w	r3, r3, #4
 800f8bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a1c      	ldr	r2, [pc, #112]	; (800f934 <TIM_OC1_SetConfig+0x10c>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d00f      	beq.n	800f8e6 <TIM_OC1_SetConfig+0xbe>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a1b      	ldr	r2, [pc, #108]	; (800f938 <TIM_OC1_SetConfig+0x110>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d00b      	beq.n	800f8e6 <TIM_OC1_SetConfig+0xbe>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4a1a      	ldr	r2, [pc, #104]	; (800f93c <TIM_OC1_SetConfig+0x114>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d007      	beq.n	800f8e6 <TIM_OC1_SetConfig+0xbe>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4a19      	ldr	r2, [pc, #100]	; (800f940 <TIM_OC1_SetConfig+0x118>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d003      	beq.n	800f8e6 <TIM_OC1_SetConfig+0xbe>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4a18      	ldr	r2, [pc, #96]	; (800f944 <TIM_OC1_SetConfig+0x11c>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d111      	bne.n	800f90a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	695b      	ldr	r3, [r3, #20]
 800f8fa:	693a      	ldr	r2, [r7, #16]
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	699b      	ldr	r3, [r3, #24]
 800f904:	693a      	ldr	r2, [r7, #16]
 800f906:	4313      	orrs	r3, r2
 800f908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	693a      	ldr	r2, [r7, #16]
 800f90e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	68fa      	ldr	r2, [r7, #12]
 800f914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	685a      	ldr	r2, [r3, #4]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	697a      	ldr	r2, [r7, #20]
 800f922:	621a      	str	r2, [r3, #32]
}
 800f924:	bf00      	nop
 800f926:	371c      	adds	r7, #28
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr
 800f930:	fffeff8f 	.word	0xfffeff8f
 800f934:	40010000 	.word	0x40010000
 800f938:	40010400 	.word	0x40010400
 800f93c:	40014000 	.word	0x40014000
 800f940:	40014400 	.word	0x40014400
 800f944:	40014800 	.word	0x40014800

0800f948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f948:	b480      	push	{r7}
 800f94a:	b087      	sub	sp, #28
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6a1b      	ldr	r3, [r3, #32]
 800f956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6a1b      	ldr	r3, [r3, #32]
 800f95c:	f023 0210 	bic.w	r2, r3, #16
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	699b      	ldr	r3, [r3, #24]
 800f96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	4b34      	ldr	r3, [pc, #208]	; (800fa44 <TIM_OC2_SetConfig+0xfc>)
 800f974:	4013      	ands	r3, r2
 800f976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f97e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	021b      	lsls	r3, r3, #8
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	4313      	orrs	r3, r2
 800f98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	f023 0320 	bic.w	r3, r3, #32
 800f992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	689b      	ldr	r3, [r3, #8]
 800f998:	011b      	lsls	r3, r3, #4
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	4a29      	ldr	r2, [pc, #164]	; (800fa48 <TIM_OC2_SetConfig+0x100>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d003      	beq.n	800f9b0 <TIM_OC2_SetConfig+0x68>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	4a28      	ldr	r2, [pc, #160]	; (800fa4c <TIM_OC2_SetConfig+0x104>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d10d      	bne.n	800f9cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	011b      	lsls	r3, r3, #4
 800f9be:	697a      	ldr	r2, [r7, #20]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4a1e      	ldr	r2, [pc, #120]	; (800fa48 <TIM_OC2_SetConfig+0x100>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d00f      	beq.n	800f9f4 <TIM_OC2_SetConfig+0xac>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4a1d      	ldr	r2, [pc, #116]	; (800fa4c <TIM_OC2_SetConfig+0x104>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d00b      	beq.n	800f9f4 <TIM_OC2_SetConfig+0xac>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4a1c      	ldr	r2, [pc, #112]	; (800fa50 <TIM_OC2_SetConfig+0x108>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d007      	beq.n	800f9f4 <TIM_OC2_SetConfig+0xac>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4a1b      	ldr	r2, [pc, #108]	; (800fa54 <TIM_OC2_SetConfig+0x10c>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d003      	beq.n	800f9f4 <TIM_OC2_SetConfig+0xac>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	4a1a      	ldr	r2, [pc, #104]	; (800fa58 <TIM_OC2_SetConfig+0x110>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d113      	bne.n	800fa1c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f9fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	695b      	ldr	r3, [r3, #20]
 800fa08:	009b      	lsls	r3, r3, #2
 800fa0a:	693a      	ldr	r2, [r7, #16]
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	699b      	ldr	r3, [r3, #24]
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	693a      	ldr	r2, [r7, #16]
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	693a      	ldr	r2, [r7, #16]
 800fa20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	685a      	ldr	r2, [r3, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	697a      	ldr	r2, [r7, #20]
 800fa34:	621a      	str	r2, [r3, #32]
}
 800fa36:	bf00      	nop
 800fa38:	371c      	adds	r7, #28
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	feff8fff 	.word	0xfeff8fff
 800fa48:	40010000 	.word	0x40010000
 800fa4c:	40010400 	.word	0x40010400
 800fa50:	40014000 	.word	0x40014000
 800fa54:	40014400 	.word	0x40014400
 800fa58:	40014800 	.word	0x40014800

0800fa5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b087      	sub	sp, #28
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6a1b      	ldr	r3, [r3, #32]
 800fa6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a1b      	ldr	r3, [r3, #32]
 800fa70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	69db      	ldr	r3, [r3, #28]
 800fa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fa84:	68fa      	ldr	r2, [r7, #12]
 800fa86:	4b33      	ldr	r3, [pc, #204]	; (800fb54 <TIM_OC3_SetConfig+0xf8>)
 800fa88:	4013      	ands	r3, r2
 800fa8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f023 0303 	bic.w	r3, r3, #3
 800fa92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800faa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	021b      	lsls	r3, r3, #8
 800faac:	697a      	ldr	r2, [r7, #20]
 800faae:	4313      	orrs	r3, r2
 800fab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4a28      	ldr	r2, [pc, #160]	; (800fb58 <TIM_OC3_SetConfig+0xfc>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d003      	beq.n	800fac2 <TIM_OC3_SetConfig+0x66>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4a27      	ldr	r2, [pc, #156]	; (800fb5c <TIM_OC3_SetConfig+0x100>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d10d      	bne.n	800fade <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	021b      	lsls	r3, r3, #8
 800fad0:	697a      	ldr	r2, [r7, #20]
 800fad2:	4313      	orrs	r3, r2
 800fad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fadc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a1d      	ldr	r2, [pc, #116]	; (800fb58 <TIM_OC3_SetConfig+0xfc>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d00f      	beq.n	800fb06 <TIM_OC3_SetConfig+0xaa>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a1c      	ldr	r2, [pc, #112]	; (800fb5c <TIM_OC3_SetConfig+0x100>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d00b      	beq.n	800fb06 <TIM_OC3_SetConfig+0xaa>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4a1b      	ldr	r2, [pc, #108]	; (800fb60 <TIM_OC3_SetConfig+0x104>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d007      	beq.n	800fb06 <TIM_OC3_SetConfig+0xaa>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4a1a      	ldr	r2, [pc, #104]	; (800fb64 <TIM_OC3_SetConfig+0x108>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d003      	beq.n	800fb06 <TIM_OC3_SetConfig+0xaa>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	4a19      	ldr	r2, [pc, #100]	; (800fb68 <TIM_OC3_SetConfig+0x10c>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d113      	bne.n	800fb2e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	695b      	ldr	r3, [r3, #20]
 800fb1a:	011b      	lsls	r3, r3, #4
 800fb1c:	693a      	ldr	r2, [r7, #16]
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	699b      	ldr	r3, [r3, #24]
 800fb26:	011b      	lsls	r3, r3, #4
 800fb28:	693a      	ldr	r2, [r7, #16]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	693a      	ldr	r2, [r7, #16]
 800fb32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	685a      	ldr	r2, [r3, #4]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	697a      	ldr	r2, [r7, #20]
 800fb46:	621a      	str	r2, [r3, #32]
}
 800fb48:	bf00      	nop
 800fb4a:	371c      	adds	r7, #28
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	fffeff8f 	.word	0xfffeff8f
 800fb58:	40010000 	.word	0x40010000
 800fb5c:	40010400 	.word	0x40010400
 800fb60:	40014000 	.word	0x40014000
 800fb64:	40014400 	.word	0x40014400
 800fb68:	40014800 	.word	0x40014800

0800fb6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b087      	sub	sp, #28
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a1b      	ldr	r3, [r3, #32]
 800fb80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	69db      	ldr	r3, [r3, #28]
 800fb92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	4b24      	ldr	r3, [pc, #144]	; (800fc28 <TIM_OC4_SetConfig+0xbc>)
 800fb98:	4013      	ands	r3, r2
 800fb9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	021b      	lsls	r3, r3, #8
 800fbaa:	68fa      	ldr	r2, [r7, #12]
 800fbac:	4313      	orrs	r3, r2
 800fbae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	031b      	lsls	r3, r3, #12
 800fbbe:	693a      	ldr	r2, [r7, #16]
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	4a19      	ldr	r2, [pc, #100]	; (800fc2c <TIM_OC4_SetConfig+0xc0>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d00f      	beq.n	800fbec <TIM_OC4_SetConfig+0x80>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4a18      	ldr	r2, [pc, #96]	; (800fc30 <TIM_OC4_SetConfig+0xc4>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d00b      	beq.n	800fbec <TIM_OC4_SetConfig+0x80>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	4a17      	ldr	r2, [pc, #92]	; (800fc34 <TIM_OC4_SetConfig+0xc8>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d007      	beq.n	800fbec <TIM_OC4_SetConfig+0x80>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	4a16      	ldr	r2, [pc, #88]	; (800fc38 <TIM_OC4_SetConfig+0xcc>)
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d003      	beq.n	800fbec <TIM_OC4_SetConfig+0x80>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	4a15      	ldr	r2, [pc, #84]	; (800fc3c <TIM_OC4_SetConfig+0xd0>)
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	d109      	bne.n	800fc00 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	695b      	ldr	r3, [r3, #20]
 800fbf8:	019b      	lsls	r3, r3, #6
 800fbfa:	697a      	ldr	r2, [r7, #20]
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	697a      	ldr	r2, [r7, #20]
 800fc04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	68fa      	ldr	r2, [r7, #12]
 800fc0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	685a      	ldr	r2, [r3, #4]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	693a      	ldr	r2, [r7, #16]
 800fc18:	621a      	str	r2, [r3, #32]
}
 800fc1a:	bf00      	nop
 800fc1c:	371c      	adds	r7, #28
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	feff8fff 	.word	0xfeff8fff
 800fc2c:	40010000 	.word	0x40010000
 800fc30:	40010400 	.word	0x40010400
 800fc34:	40014000 	.word	0x40014000
 800fc38:	40014400 	.word	0x40014400
 800fc3c:	40014800 	.word	0x40014800

0800fc40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b087      	sub	sp, #28
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6a1b      	ldr	r3, [r3, #32]
 800fc4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6a1b      	ldr	r3, [r3, #32]
 800fc54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc68:	68fa      	ldr	r2, [r7, #12]
 800fc6a:	4b21      	ldr	r3, [pc, #132]	; (800fcf0 <TIM_OC5_SetConfig+0xb0>)
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	4313      	orrs	r3, r2
 800fc78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fc80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	041b      	lsls	r3, r3, #16
 800fc88:	693a      	ldr	r2, [r7, #16]
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4a18      	ldr	r2, [pc, #96]	; (800fcf4 <TIM_OC5_SetConfig+0xb4>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d00f      	beq.n	800fcb6 <TIM_OC5_SetConfig+0x76>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4a17      	ldr	r2, [pc, #92]	; (800fcf8 <TIM_OC5_SetConfig+0xb8>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d00b      	beq.n	800fcb6 <TIM_OC5_SetConfig+0x76>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4a16      	ldr	r2, [pc, #88]	; (800fcfc <TIM_OC5_SetConfig+0xbc>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d007      	beq.n	800fcb6 <TIM_OC5_SetConfig+0x76>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4a15      	ldr	r2, [pc, #84]	; (800fd00 <TIM_OC5_SetConfig+0xc0>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d003      	beq.n	800fcb6 <TIM_OC5_SetConfig+0x76>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4a14      	ldr	r2, [pc, #80]	; (800fd04 <TIM_OC5_SetConfig+0xc4>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d109      	bne.n	800fcca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fcbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	695b      	ldr	r3, [r3, #20]
 800fcc2:	021b      	lsls	r3, r3, #8
 800fcc4:	697a      	ldr	r2, [r7, #20]
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	697a      	ldr	r2, [r7, #20]
 800fcce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	68fa      	ldr	r2, [r7, #12]
 800fcd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	685a      	ldr	r2, [r3, #4]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	693a      	ldr	r2, [r7, #16]
 800fce2:	621a      	str	r2, [r3, #32]
}
 800fce4:	bf00      	nop
 800fce6:	371c      	adds	r7, #28
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr
 800fcf0:	fffeff8f 	.word	0xfffeff8f
 800fcf4:	40010000 	.word	0x40010000
 800fcf8:	40010400 	.word	0x40010400
 800fcfc:	40014000 	.word	0x40014000
 800fd00:	40014400 	.word	0x40014400
 800fd04:	40014800 	.word	0x40014800

0800fd08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b087      	sub	sp, #28
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6a1b      	ldr	r3, [r3, #32]
 800fd16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6a1b      	ldr	r3, [r3, #32]
 800fd1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	4b22      	ldr	r3, [pc, #136]	; (800fdbc <TIM_OC6_SetConfig+0xb4>)
 800fd34:	4013      	ands	r3, r2
 800fd36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	021b      	lsls	r3, r3, #8
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	4313      	orrs	r3, r2
 800fd42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fd4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	689b      	ldr	r3, [r3, #8]
 800fd50:	051b      	lsls	r3, r3, #20
 800fd52:	693a      	ldr	r2, [r7, #16]
 800fd54:	4313      	orrs	r3, r2
 800fd56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4a19      	ldr	r2, [pc, #100]	; (800fdc0 <TIM_OC6_SetConfig+0xb8>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d00f      	beq.n	800fd80 <TIM_OC6_SetConfig+0x78>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4a18      	ldr	r2, [pc, #96]	; (800fdc4 <TIM_OC6_SetConfig+0xbc>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d00b      	beq.n	800fd80 <TIM_OC6_SetConfig+0x78>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	4a17      	ldr	r2, [pc, #92]	; (800fdc8 <TIM_OC6_SetConfig+0xc0>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d007      	beq.n	800fd80 <TIM_OC6_SetConfig+0x78>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4a16      	ldr	r2, [pc, #88]	; (800fdcc <TIM_OC6_SetConfig+0xc4>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d003      	beq.n	800fd80 <TIM_OC6_SetConfig+0x78>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4a15      	ldr	r2, [pc, #84]	; (800fdd0 <TIM_OC6_SetConfig+0xc8>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d109      	bne.n	800fd94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	695b      	ldr	r3, [r3, #20]
 800fd8c:	029b      	lsls	r3, r3, #10
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	4313      	orrs	r3, r2
 800fd92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	697a      	ldr	r2, [r7, #20]
 800fd98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	685a      	ldr	r2, [r3, #4]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	693a      	ldr	r2, [r7, #16]
 800fdac:	621a      	str	r2, [r3, #32]
}
 800fdae:	bf00      	nop
 800fdb0:	371c      	adds	r7, #28
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	feff8fff 	.word	0xfeff8fff
 800fdc0:	40010000 	.word	0x40010000
 800fdc4:	40010400 	.word	0x40010400
 800fdc8:	40014000 	.word	0x40014000
 800fdcc:	40014400 	.word	0x40014400
 800fdd0:	40014800 	.word	0x40014800

0800fdd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b087      	sub	sp, #28
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6a1b      	ldr	r3, [r3, #32]
 800fde4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	6a1b      	ldr	r3, [r3, #32]
 800fdea:	f023 0201 	bic.w	r2, r3, #1
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	699b      	ldr	r3, [r3, #24]
 800fdf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fdfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	011b      	lsls	r3, r3, #4
 800fe04:	693a      	ldr	r2, [r7, #16]
 800fe06:	4313      	orrs	r3, r2
 800fe08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f023 030a 	bic.w	r3, r3, #10
 800fe10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe12:	697a      	ldr	r2, [r7, #20]
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	4313      	orrs	r3, r2
 800fe18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	693a      	ldr	r2, [r7, #16]
 800fe1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	697a      	ldr	r2, [r7, #20]
 800fe24:	621a      	str	r2, [r3, #32]
}
 800fe26:	bf00      	nop
 800fe28:	371c      	adds	r7, #28
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe32:	b480      	push	{r7}
 800fe34:	b087      	sub	sp, #28
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	60f8      	str	r0, [r7, #12]
 800fe3a:	60b9      	str	r1, [r7, #8]
 800fe3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6a1b      	ldr	r3, [r3, #32]
 800fe42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6a1b      	ldr	r3, [r3, #32]
 800fe48:	f023 0210 	bic.w	r2, r3, #16
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	699b      	ldr	r3, [r3, #24]
 800fe54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fe5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	031b      	lsls	r3, r3, #12
 800fe62:	693a      	ldr	r2, [r7, #16]
 800fe64:	4313      	orrs	r3, r2
 800fe66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fe6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	011b      	lsls	r3, r3, #4
 800fe74:	697a      	ldr	r2, [r7, #20]
 800fe76:	4313      	orrs	r3, r2
 800fe78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	693a      	ldr	r2, [r7, #16]
 800fe7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	697a      	ldr	r2, [r7, #20]
 800fe84:	621a      	str	r2, [r3, #32]
}
 800fe86:	bf00      	nop
 800fe88:	371c      	adds	r7, #28
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
	...

0800fe94 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	4b09      	ldr	r3, [pc, #36]	; (800fecc <TIM_ITRx_SetConfig+0x38>)
 800fea8:	4013      	ands	r3, r2
 800feaa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800feac:	683a      	ldr	r2, [r7, #0]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	4313      	orrs	r3, r2
 800feb2:	f043 0307 	orr.w	r3, r3, #7
 800feb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	68fa      	ldr	r2, [r7, #12]
 800febc:	609a      	str	r2, [r3, #8]
}
 800febe:	bf00      	nop
 800fec0:	3714      	adds	r7, #20
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop
 800fecc:	ffcfff8f 	.word	0xffcfff8f

0800fed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b087      	sub	sp, #28
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	607a      	str	r2, [r7, #4]
 800fedc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800feea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	021a      	lsls	r2, r3, #8
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	431a      	orrs	r2, r3
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	697a      	ldr	r2, [r7, #20]
 800fefa:	4313      	orrs	r3, r2
 800fefc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	697a      	ldr	r2, [r7, #20]
 800ff02:	609a      	str	r2, [r3, #8]
}
 800ff04:	bf00      	nop
 800ff06:	371c      	adds	r7, #28
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b087      	sub	sp, #28
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	60f8      	str	r0, [r7, #12]
 800ff18:	60b9      	str	r1, [r7, #8]
 800ff1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	f003 031f 	and.w	r3, r3, #31
 800ff22:	2201      	movs	r2, #1
 800ff24:	fa02 f303 	lsl.w	r3, r2, r3
 800ff28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	6a1a      	ldr	r2, [r3, #32]
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	43db      	mvns	r3, r3
 800ff32:	401a      	ands	r2, r3
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6a1a      	ldr	r2, [r3, #32]
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	f003 031f 	and.w	r3, r3, #31
 800ff42:	6879      	ldr	r1, [r7, #4]
 800ff44:	fa01 f303 	lsl.w	r3, r1, r3
 800ff48:	431a      	orrs	r2, r3
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	621a      	str	r2, [r3, #32]
}
 800ff4e:	bf00      	nop
 800ff50:	371c      	adds	r7, #28
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr
	...

0800ff5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b085      	sub	sp, #20
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d101      	bne.n	800ff74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff70:	2302      	movs	r3, #2
 800ff72:	e06d      	b.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2201      	movs	r2, #1
 800ff78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2202      	movs	r2, #2
 800ff80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	4a30      	ldr	r2, [pc, #192]	; (801005c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d004      	beq.n	800ffa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	4a2f      	ldr	r2, [pc, #188]	; (8010060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d108      	bne.n	800ffba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ffae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	68fa      	ldr	r2, [r7, #12]
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	68fa      	ldr	r2, [r7, #12]
 800ffc8:	4313      	orrs	r3, r2
 800ffca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	68fa      	ldr	r2, [r7, #12]
 800ffd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4a20      	ldr	r2, [pc, #128]	; (801005c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d022      	beq.n	8010024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffe6:	d01d      	beq.n	8010024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a1d      	ldr	r2, [pc, #116]	; (8010064 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d018      	beq.n	8010024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4a1c      	ldr	r2, [pc, #112]	; (8010068 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d013      	beq.n	8010024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a1a      	ldr	r2, [pc, #104]	; (801006c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d00e      	beq.n	8010024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4a15      	ldr	r2, [pc, #84]	; (8010060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d009      	beq.n	8010024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	4a16      	ldr	r2, [pc, #88]	; (8010070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d004      	beq.n	8010024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4a15      	ldr	r2, [pc, #84]	; (8010074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d10c      	bne.n	801003e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801002a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	689b      	ldr	r3, [r3, #8]
 8010030:	68ba      	ldr	r2, [r7, #8]
 8010032:	4313      	orrs	r3, r2
 8010034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	68ba      	ldr	r2, [r7, #8]
 801003c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2201      	movs	r2, #1
 8010042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2200      	movs	r2, #0
 801004a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801004e:	2300      	movs	r3, #0
}
 8010050:	4618      	mov	r0, r3
 8010052:	3714      	adds	r7, #20
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr
 801005c:	40010000 	.word	0x40010000
 8010060:	40010400 	.word	0x40010400
 8010064:	40000400 	.word	0x40000400
 8010068:	40000800 	.word	0x40000800
 801006c:	40000c00 	.word	0x40000c00
 8010070:	40001800 	.word	0x40001800
 8010074:	40014000 	.word	0x40014000

08010078 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010078:	b480      	push	{r7}
 801007a:	b085      	sub	sp, #20
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010082:	2300      	movs	r3, #0
 8010084:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801008c:	2b01      	cmp	r3, #1
 801008e:	d101      	bne.n	8010094 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010090:	2302      	movs	r3, #2
 8010092:	e065      	b.n	8010160 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2201      	movs	r2, #1
 8010098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	4313      	orrs	r3, r2
 80100a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	689b      	ldr	r3, [r3, #8]
 80100b4:	4313      	orrs	r3, r2
 80100b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	4313      	orrs	r3, r2
 80100c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	4313      	orrs	r3, r2
 80100d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	691b      	ldr	r3, [r3, #16]
 80100de:	4313      	orrs	r3, r2
 80100e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	695b      	ldr	r3, [r3, #20]
 80100ec:	4313      	orrs	r3, r2
 80100ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100fa:	4313      	orrs	r3, r2
 80100fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	041b      	lsls	r3, r3, #16
 801010a:	4313      	orrs	r3, r2
 801010c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4a16      	ldr	r2, [pc, #88]	; (801016c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d004      	beq.n	8010122 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a14      	ldr	r2, [pc, #80]	; (8010170 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d115      	bne.n	801014e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801012c:	051b      	lsls	r3, r3, #20
 801012e:	4313      	orrs	r3, r2
 8010130:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	69db      	ldr	r3, [r3, #28]
 801013c:	4313      	orrs	r3, r2
 801013e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	6a1b      	ldr	r3, [r3, #32]
 801014a:	4313      	orrs	r3, r2
 801014c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2200      	movs	r2, #0
 801015a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801015e:	2300      	movs	r3, #0
}
 8010160:	4618      	mov	r0, r3
 8010162:	3714      	adds	r7, #20
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	40010000 	.word	0x40010000
 8010170:	40010400 	.word	0x40010400

08010174 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010190:	bf00      	nop
 8010192:	370c      	adds	r7, #12
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801019c:	b480      	push	{r7}
 801019e:	b083      	sub	sp, #12
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80101a4:	bf00      	nop
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d101      	bne.n	80101c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80101be:	2301      	movs	r3, #1
 80101c0:	e042      	b.n	8010248 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d106      	bne.n	80101da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2200      	movs	r2, #0
 80101d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f7f3 fbf7 	bl	80039c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2224      	movs	r2, #36	; 0x24
 80101de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f022 0201 	bic.w	r2, r2, #1
 80101f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d002      	beq.n	8010200 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f001 fbc2 	bl	8011984 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f000 fe57 	bl	8010eb4 <UART_SetConfig>
 8010206:	4603      	mov	r3, r0
 8010208:	2b01      	cmp	r3, #1
 801020a:	d101      	bne.n	8010210 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801020c:	2301      	movs	r3, #1
 801020e:	e01b      	b.n	8010248 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	685a      	ldr	r2, [r3, #4]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801021e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	689a      	ldr	r2, [r3, #8]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801022e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	681a      	ldr	r2, [r3, #0]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f042 0201 	orr.w	r2, r2, #1
 801023e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f001 fc41 	bl	8011ac8 <UART_CheckIdleState>
 8010246:	4603      	mov	r3, r0
}
 8010248:	4618      	mov	r0, r3
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b08a      	sub	sp, #40	; 0x28
 8010254:	af02      	add	r7, sp, #8
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	603b      	str	r3, [r7, #0]
 801025c:	4613      	mov	r3, r2
 801025e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010266:	2b20      	cmp	r3, #32
 8010268:	d17b      	bne.n	8010362 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d002      	beq.n	8010276 <HAL_UART_Transmit+0x26>
 8010270:	88fb      	ldrh	r3, [r7, #6]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d101      	bne.n	801027a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010276:	2301      	movs	r3, #1
 8010278:	e074      	b.n	8010364 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2200      	movs	r2, #0
 801027e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2221      	movs	r2, #33	; 0x21
 8010286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801028a:	f7f3 ff1b 	bl	80040c4 <HAL_GetTick>
 801028e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	88fa      	ldrh	r2, [r7, #6]
 8010294:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	88fa      	ldrh	r2, [r7, #6]
 801029c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	689b      	ldr	r3, [r3, #8]
 80102a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102a8:	d108      	bne.n	80102bc <HAL_UART_Transmit+0x6c>
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	691b      	ldr	r3, [r3, #16]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d104      	bne.n	80102bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80102b2:	2300      	movs	r3, #0
 80102b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	61bb      	str	r3, [r7, #24]
 80102ba:	e003      	b.n	80102c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80102c0:	2300      	movs	r3, #0
 80102c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80102c4:	e030      	b.n	8010328 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	9300      	str	r3, [sp, #0]
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	2200      	movs	r2, #0
 80102ce:	2180      	movs	r1, #128	; 0x80
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f001 fca3 	bl	8011c1c <UART_WaitOnFlagUntilTimeout>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d005      	beq.n	80102e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2220      	movs	r2, #32
 80102e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80102e4:	2303      	movs	r3, #3
 80102e6:	e03d      	b.n	8010364 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d10b      	bne.n	8010306 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	881b      	ldrh	r3, [r3, #0]
 80102f2:	461a      	mov	r2, r3
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80102fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	3302      	adds	r3, #2
 8010302:	61bb      	str	r3, [r7, #24]
 8010304:	e007      	b.n	8010316 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	781a      	ldrb	r2, [r3, #0]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	3301      	adds	r3, #1
 8010314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801031c:	b29b      	uxth	r3, r3
 801031e:	3b01      	subs	r3, #1
 8010320:	b29a      	uxth	r2, r3
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801032e:	b29b      	uxth	r3, r3
 8010330:	2b00      	cmp	r3, #0
 8010332:	d1c8      	bne.n	80102c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	9300      	str	r3, [sp, #0]
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	2200      	movs	r2, #0
 801033c:	2140      	movs	r1, #64	; 0x40
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f001 fc6c 	bl	8011c1c <UART_WaitOnFlagUntilTimeout>
 8010344:	4603      	mov	r3, r0
 8010346:	2b00      	cmp	r3, #0
 8010348:	d005      	beq.n	8010356 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2220      	movs	r2, #32
 801034e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010352:	2303      	movs	r3, #3
 8010354:	e006      	b.n	8010364 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2220      	movs	r2, #32
 801035a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801035e:	2300      	movs	r3, #0
 8010360:	e000      	b.n	8010364 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010362:	2302      	movs	r3, #2
  }
}
 8010364:	4618      	mov	r0, r3
 8010366:	3720      	adds	r7, #32
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b08a      	sub	sp, #40	; 0x28
 8010370:	af02      	add	r7, sp, #8
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	603b      	str	r3, [r7, #0]
 8010378:	4613      	mov	r3, r2
 801037a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010382:	2b20      	cmp	r3, #32
 8010384:	f040 80b5 	bne.w	80104f2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d002      	beq.n	8010394 <HAL_UART_Receive+0x28>
 801038e:	88fb      	ldrh	r3, [r7, #6]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d101      	bne.n	8010398 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010394:	2301      	movs	r3, #1
 8010396:	e0ad      	b.n	80104f4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2222      	movs	r2, #34	; 0x22
 80103a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2200      	movs	r2, #0
 80103ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80103ae:	f7f3 fe89 	bl	80040c4 <HAL_GetTick>
 80103b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	88fa      	ldrh	r2, [r7, #6]
 80103b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	88fa      	ldrh	r2, [r7, #6]
 80103c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103cc:	d10e      	bne.n	80103ec <HAL_UART_Receive+0x80>
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	691b      	ldr	r3, [r3, #16]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d105      	bne.n	80103e2 <HAL_UART_Receive+0x76>
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80103dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103e0:	e02d      	b.n	801043e <HAL_UART_Receive+0xd2>
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	22ff      	movs	r2, #255	; 0xff
 80103e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103ea:	e028      	b.n	801043e <HAL_UART_Receive+0xd2>
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	689b      	ldr	r3, [r3, #8]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d10d      	bne.n	8010410 <HAL_UART_Receive+0xa4>
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	691b      	ldr	r3, [r3, #16]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d104      	bne.n	8010406 <HAL_UART_Receive+0x9a>
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	22ff      	movs	r2, #255	; 0xff
 8010400:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010404:	e01b      	b.n	801043e <HAL_UART_Receive+0xd2>
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	227f      	movs	r2, #127	; 0x7f
 801040a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801040e:	e016      	b.n	801043e <HAL_UART_Receive+0xd2>
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	689b      	ldr	r3, [r3, #8]
 8010414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010418:	d10d      	bne.n	8010436 <HAL_UART_Receive+0xca>
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	691b      	ldr	r3, [r3, #16]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d104      	bne.n	801042c <HAL_UART_Receive+0xc0>
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	227f      	movs	r2, #127	; 0x7f
 8010426:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801042a:	e008      	b.n	801043e <HAL_UART_Receive+0xd2>
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	223f      	movs	r2, #63	; 0x3f
 8010430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010434:	e003      	b.n	801043e <HAL_UART_Receive+0xd2>
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	2200      	movs	r2, #0
 801043a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010444:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	689b      	ldr	r3, [r3, #8]
 801044a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801044e:	d108      	bne.n	8010462 <HAL_UART_Receive+0xf6>
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	691b      	ldr	r3, [r3, #16]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d104      	bne.n	8010462 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010458:	2300      	movs	r3, #0
 801045a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	61bb      	str	r3, [r7, #24]
 8010460:	e003      	b.n	801046a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010466:	2300      	movs	r3, #0
 8010468:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801046a:	e036      	b.n	80104da <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	9300      	str	r3, [sp, #0]
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	2200      	movs	r2, #0
 8010474:	2120      	movs	r1, #32
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f001 fbd0 	bl	8011c1c <UART_WaitOnFlagUntilTimeout>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d005      	beq.n	801048e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2220      	movs	r2, #32
 8010486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801048a:	2303      	movs	r3, #3
 801048c:	e032      	b.n	80104f4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801048e:	69fb      	ldr	r3, [r7, #28]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d10c      	bne.n	80104ae <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801049a:	b29a      	uxth	r2, r3
 801049c:	8a7b      	ldrh	r3, [r7, #18]
 801049e:	4013      	ands	r3, r2
 80104a0:	b29a      	uxth	r2, r3
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	3302      	adds	r3, #2
 80104aa:	61bb      	str	r3, [r7, #24]
 80104ac:	e00c      	b.n	80104c8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b4:	b2da      	uxtb	r2, r3
 80104b6:	8a7b      	ldrh	r3, [r7, #18]
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	4013      	ands	r3, r2
 80104bc:	b2da      	uxtb	r2, r3
 80104be:	69fb      	ldr	r3, [r7, #28]
 80104c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	3301      	adds	r3, #1
 80104c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	3b01      	subs	r3, #1
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d1c2      	bne.n	801046c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2220      	movs	r2, #32
 80104ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80104ee:	2300      	movs	r3, #0
 80104f0:	e000      	b.n	80104f4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80104f2:	2302      	movs	r3, #2
  }
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3720      	adds	r7, #32
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b08a      	sub	sp, #40	; 0x28
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	4613      	mov	r3, r2
 8010508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010510:	2b20      	cmp	r3, #32
 8010512:	d137      	bne.n	8010584 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d002      	beq.n	8010520 <HAL_UART_Receive_IT+0x24>
 801051a:	88fb      	ldrh	r3, [r7, #6]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d101      	bne.n	8010524 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010520:	2301      	movs	r3, #1
 8010522:	e030      	b.n	8010586 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2200      	movs	r2, #0
 8010528:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	4a18      	ldr	r2, [pc, #96]	; (8010590 <HAL_UART_Receive_IT+0x94>)
 8010530:	4293      	cmp	r3, r2
 8010532:	d01f      	beq.n	8010574 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	685b      	ldr	r3, [r3, #4]
 801053a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801053e:	2b00      	cmp	r3, #0
 8010540:	d018      	beq.n	8010574 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	e853 3f00 	ldrex	r3, [r3]
 801054e:	613b      	str	r3, [r7, #16]
   return(result);
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010556:	627b      	str	r3, [r7, #36]	; 0x24
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	461a      	mov	r2, r3
 801055e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010560:	623b      	str	r3, [r7, #32]
 8010562:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010564:	69f9      	ldr	r1, [r7, #28]
 8010566:	6a3a      	ldr	r2, [r7, #32]
 8010568:	e841 2300 	strex	r3, r2, [r1]
 801056c:	61bb      	str	r3, [r7, #24]
   return(result);
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d1e6      	bne.n	8010542 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010574:	88fb      	ldrh	r3, [r7, #6]
 8010576:	461a      	mov	r2, r3
 8010578:	68b9      	ldr	r1, [r7, #8]
 801057a:	68f8      	ldr	r0, [r7, #12]
 801057c:	f001 fbbc 	bl	8011cf8 <UART_Start_Receive_IT>
 8010580:	4603      	mov	r3, r0
 8010582:	e000      	b.n	8010586 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010584:	2302      	movs	r3, #2
  }
}
 8010586:	4618      	mov	r0, r3
 8010588:	3728      	adds	r7, #40	; 0x28
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	58000c00 	.word	0x58000c00

08010594 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b09a      	sub	sp, #104	; 0x68
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105a4:	e853 3f00 	ldrex	r3, [r3]
 80105a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80105aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105b0:	667b      	str	r3, [r7, #100]	; 0x64
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	461a      	mov	r2, r3
 80105b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105ba:	657b      	str	r3, [r7, #84]	; 0x54
 80105bc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105c2:	e841 2300 	strex	r3, r2, [r1]
 80105c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80105c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d1e6      	bne.n	801059c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	3308      	adds	r3, #8
 80105d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105d8:	e853 3f00 	ldrex	r3, [r3]
 80105dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80105de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105e0:	4b46      	ldr	r3, [pc, #280]	; (80106fc <HAL_UART_AbortReceive+0x168>)
 80105e2:	4013      	ands	r3, r2
 80105e4:	663b      	str	r3, [r7, #96]	; 0x60
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	3308      	adds	r3, #8
 80105ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80105ee:	643a      	str	r2, [r7, #64]	; 0x40
 80105f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105f6:	e841 2300 	strex	r3, r2, [r1]
 80105fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80105fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d1e5      	bne.n	80105ce <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010606:	2b01      	cmp	r3, #1
 8010608:	d118      	bne.n	801063c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010610:	6a3b      	ldr	r3, [r7, #32]
 8010612:	e853 3f00 	ldrex	r3, [r3]
 8010616:	61fb      	str	r3, [r7, #28]
   return(result);
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	f023 0310 	bic.w	r3, r3, #16
 801061e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	461a      	mov	r2, r3
 8010626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010628:	62fb      	str	r3, [r7, #44]	; 0x2c
 801062a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801062e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010630:	e841 2300 	strex	r3, r2, [r1]
 8010634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1e6      	bne.n	801060a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	689b      	ldr	r3, [r3, #8]
 8010642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010646:	2b40      	cmp	r3, #64	; 0x40
 8010648:	d13b      	bne.n	80106c2 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	3308      	adds	r3, #8
 8010650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	e853 3f00 	ldrex	r3, [r3]
 8010658:	60bb      	str	r3, [r7, #8]
   return(result);
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010660:	65bb      	str	r3, [r7, #88]	; 0x58
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	3308      	adds	r3, #8
 8010668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801066a:	61ba      	str	r2, [r7, #24]
 801066c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801066e:	6979      	ldr	r1, [r7, #20]
 8010670:	69ba      	ldr	r2, [r7, #24]
 8010672:	e841 2300 	strex	r3, r2, [r1]
 8010676:	613b      	str	r3, [r7, #16]
   return(result);
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d1e5      	bne.n	801064a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010684:	2b00      	cmp	r3, #0
 8010686:	d01c      	beq.n	80106c2 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801068e:	2200      	movs	r2, #0
 8010690:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010698:	4618      	mov	r0, r3
 801069a:	f7f6 fc01 	bl	8006ea0 <HAL_DMA_Abort>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00e      	beq.n	80106c2 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7f8 f886 	bl	80087bc <HAL_DMA_GetError>
 80106b0:	4603      	mov	r3, r0
 80106b2:	2b20      	cmp	r3, #32
 80106b4:	d105      	bne.n	80106c2 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2210      	movs	r2, #16
 80106ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80106be:	2303      	movs	r3, #3
 80106c0:	e017      	b.n	80106f2 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	220f      	movs	r2, #15
 80106d0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	699a      	ldr	r2, [r3, #24]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f042 0208 	orr.w	r2, r2, #8
 80106e0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2220      	movs	r2, #32
 80106e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80106f0:	2300      	movs	r3, #0
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3768      	adds	r7, #104	; 0x68
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	effffffe 	.word	0xeffffffe

08010700 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b0ba      	sub	sp, #232	; 0xe8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	69db      	ldr	r3, [r3, #28]
 801070e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	689b      	ldr	r3, [r3, #8]
 8010722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010726:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801072a:	f640 030f 	movw	r3, #2063	; 0x80f
 801072e:	4013      	ands	r3, r2
 8010730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010738:	2b00      	cmp	r3, #0
 801073a:	d11b      	bne.n	8010774 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801073c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010740:	f003 0320 	and.w	r3, r3, #32
 8010744:	2b00      	cmp	r3, #0
 8010746:	d015      	beq.n	8010774 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801074c:	f003 0320 	and.w	r3, r3, #32
 8010750:	2b00      	cmp	r3, #0
 8010752:	d105      	bne.n	8010760 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801075c:	2b00      	cmp	r3, #0
 801075e:	d009      	beq.n	8010774 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 8377 	beq.w	8010e58 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	4798      	blx	r3
      }
      return;
 8010772:	e371      	b.n	8010e58 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010778:	2b00      	cmp	r3, #0
 801077a:	f000 8123 	beq.w	80109c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801077e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010782:	4b8d      	ldr	r3, [pc, #564]	; (80109b8 <HAL_UART_IRQHandler+0x2b8>)
 8010784:	4013      	ands	r3, r2
 8010786:	2b00      	cmp	r3, #0
 8010788:	d106      	bne.n	8010798 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801078a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801078e:	4b8b      	ldr	r3, [pc, #556]	; (80109bc <HAL_UART_IRQHandler+0x2bc>)
 8010790:	4013      	ands	r3, r2
 8010792:	2b00      	cmp	r3, #0
 8010794:	f000 8116 	beq.w	80109c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801079c:	f003 0301 	and.w	r3, r3, #1
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d011      	beq.n	80107c8 <HAL_UART_IRQHandler+0xc8>
 80107a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d00b      	beq.n	80107c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2201      	movs	r2, #1
 80107b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107be:	f043 0201 	orr.w	r2, r3, #1
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107cc:	f003 0302 	and.w	r3, r3, #2
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d011      	beq.n	80107f8 <HAL_UART_IRQHandler+0xf8>
 80107d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107d8:	f003 0301 	and.w	r3, r3, #1
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00b      	beq.n	80107f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	2202      	movs	r2, #2
 80107e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107ee:	f043 0204 	orr.w	r2, r3, #4
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107fc:	f003 0304 	and.w	r3, r3, #4
 8010800:	2b00      	cmp	r3, #0
 8010802:	d011      	beq.n	8010828 <HAL_UART_IRQHandler+0x128>
 8010804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010808:	f003 0301 	and.w	r3, r3, #1
 801080c:	2b00      	cmp	r3, #0
 801080e:	d00b      	beq.n	8010828 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	2204      	movs	r2, #4
 8010816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801081e:	f043 0202 	orr.w	r2, r3, #2
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801082c:	f003 0308 	and.w	r3, r3, #8
 8010830:	2b00      	cmp	r3, #0
 8010832:	d017      	beq.n	8010864 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010838:	f003 0320 	and.w	r3, r3, #32
 801083c:	2b00      	cmp	r3, #0
 801083e:	d105      	bne.n	801084c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010840:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010844:	4b5c      	ldr	r3, [pc, #368]	; (80109b8 <HAL_UART_IRQHandler+0x2b8>)
 8010846:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010848:	2b00      	cmp	r3, #0
 801084a:	d00b      	beq.n	8010864 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2208      	movs	r2, #8
 8010852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801085a:	f043 0208 	orr.w	r2, r3, #8
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801086c:	2b00      	cmp	r3, #0
 801086e:	d012      	beq.n	8010896 <HAL_UART_IRQHandler+0x196>
 8010870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010878:	2b00      	cmp	r3, #0
 801087a:	d00c      	beq.n	8010896 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801088c:	f043 0220 	orr.w	r2, r3, #32
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801089c:	2b00      	cmp	r3, #0
 801089e:	f000 82dd 	beq.w	8010e5c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80108a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108a6:	f003 0320 	and.w	r3, r3, #32
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d013      	beq.n	80108d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80108ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108b2:	f003 0320 	and.w	r3, r3, #32
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d105      	bne.n	80108c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80108ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d007      	beq.n	80108d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d003      	beq.n	80108d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108ea:	2b40      	cmp	r3, #64	; 0x40
 80108ec:	d005      	beq.n	80108fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80108ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80108f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d054      	beq.n	80109a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f001 fb1e 	bl	8011f3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	689b      	ldr	r3, [r3, #8]
 8010906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801090a:	2b40      	cmp	r3, #64	; 0x40
 801090c:	d146      	bne.n	801099c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	3308      	adds	r3, #8
 8010914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801091c:	e853 3f00 	ldrex	r3, [r3]
 8010920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801092c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	3308      	adds	r3, #8
 8010936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801093a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801093e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801094a:	e841 2300 	strex	r3, r2, [r1]
 801094e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d1d9      	bne.n	801090e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010960:	2b00      	cmp	r3, #0
 8010962:	d017      	beq.n	8010994 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801096a:	4a15      	ldr	r2, [pc, #84]	; (80109c0 <HAL_UART_IRQHandler+0x2c0>)
 801096c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010974:	4618      	mov	r0, r3
 8010976:	f7f6 fdb1 	bl	80074dc <HAL_DMA_Abort_IT>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d019      	beq.n	80109b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801098e:	4610      	mov	r0, r2
 8010990:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010992:	e00f      	b.n	80109b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 fa77 	bl	8010e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801099a:	e00b      	b.n	80109b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f000 fa73 	bl	8010e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109a2:	e007      	b.n	80109b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f000 fa6f 	bl	8010e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2200      	movs	r2, #0
 80109ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80109b2:	e253      	b.n	8010e5c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109b4:	bf00      	nop
    return;
 80109b6:	e251      	b.n	8010e5c <HAL_UART_IRQHandler+0x75c>
 80109b8:	10000001 	.word	0x10000001
 80109bc:	04000120 	.word	0x04000120
 80109c0:	08012009 	.word	0x08012009

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	f040 81e7 	bne.w	8010d9c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80109ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109d2:	f003 0310 	and.w	r3, r3, #16
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	f000 81e0 	beq.w	8010d9c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80109dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109e0:	f003 0310 	and.w	r3, r3, #16
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f000 81d9 	beq.w	8010d9c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2210      	movs	r2, #16
 80109f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	689b      	ldr	r3, [r3, #8]
 80109f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109fc:	2b40      	cmp	r3, #64	; 0x40
 80109fe:	f040 8151 	bne.w	8010ca4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	4a96      	ldr	r2, [pc, #600]	; (8010c64 <HAL_UART_IRQHandler+0x564>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d068      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4a93      	ldr	r2, [pc, #588]	; (8010c68 <HAL_UART_IRQHandler+0x568>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d061      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4a91      	ldr	r2, [pc, #580]	; (8010c6c <HAL_UART_IRQHandler+0x56c>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d05a      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a8e      	ldr	r2, [pc, #568]	; (8010c70 <HAL_UART_IRQHandler+0x570>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d053      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	4a8c      	ldr	r2, [pc, #560]	; (8010c74 <HAL_UART_IRQHandler+0x574>)
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d04c      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a89      	ldr	r2, [pc, #548]	; (8010c78 <HAL_UART_IRQHandler+0x578>)
 8010a52:	4293      	cmp	r3, r2
 8010a54:	d045      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4a87      	ldr	r2, [pc, #540]	; (8010c7c <HAL_UART_IRQHandler+0x57c>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d03e      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4a84      	ldr	r2, [pc, #528]	; (8010c80 <HAL_UART_IRQHandler+0x580>)
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	d037      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a82      	ldr	r2, [pc, #520]	; (8010c84 <HAL_UART_IRQHandler+0x584>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d030      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4a7f      	ldr	r2, [pc, #508]	; (8010c88 <HAL_UART_IRQHandler+0x588>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d029      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4a7d      	ldr	r2, [pc, #500]	; (8010c8c <HAL_UART_IRQHandler+0x58c>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d022      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	4a7a      	ldr	r2, [pc, #488]	; (8010c90 <HAL_UART_IRQHandler+0x590>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d01b      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a78      	ldr	r2, [pc, #480]	; (8010c94 <HAL_UART_IRQHandler+0x594>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d014      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	4a75      	ldr	r2, [pc, #468]	; (8010c98 <HAL_UART_IRQHandler+0x598>)
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d00d      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	4a73      	ldr	r2, [pc, #460]	; (8010c9c <HAL_UART_IRQHandler+0x59c>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d006      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x3e2>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4a70      	ldr	r2, [pc, #448]	; (8010ca0 <HAL_UART_IRQHandler+0x5a0>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d106      	bne.n	8010af0 <HAL_UART_IRQHandler+0x3f0>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	e005      	b.n	8010afc <HAL_UART_IRQHandler+0x3fc>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010b00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f000 81ab 	beq.w	8010e60 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b14:	429a      	cmp	r2, r3
 8010b16:	f080 81a3 	bcs.w	8010e60 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b2a:	69db      	ldr	r3, [r3, #28]
 8010b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b30:	f000 8087 	beq.w	8010c42 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b40:	e853 3f00 	ldrex	r3, [r3]
 8010b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	461a      	mov	r2, r3
 8010b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010b6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b6e:	e841 2300 	strex	r3, r2, [r1]
 8010b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d1da      	bne.n	8010b34 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	3308      	adds	r3, #8
 8010b84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b88:	e853 3f00 	ldrex	r3, [r3]
 8010b8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b90:	f023 0301 	bic.w	r3, r3, #1
 8010b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	3308      	adds	r3, #8
 8010b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010ba2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010baa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010bae:	e841 2300 	strex	r3, r2, [r1]
 8010bb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1e1      	bne.n	8010b7e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	3308      	adds	r3, #8
 8010bc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bc4:	e853 3f00 	ldrex	r3, [r3]
 8010bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	3308      	adds	r3, #8
 8010bda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010bde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010be0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010be2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010be4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010be6:	e841 2300 	strex	r3, r2, [r1]
 8010bea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d1e3      	bne.n	8010bba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2220      	movs	r2, #32
 8010bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c08:	e853 3f00 	ldrex	r3, [r3]
 8010c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c10:	f023 0310 	bic.w	r3, r3, #16
 8010c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c2a:	e841 2300 	strex	r3, r2, [r1]
 8010c2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d1e4      	bne.n	8010c00 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7f6 f92f 	bl	8006ea0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2202      	movs	r2, #2
 8010c46:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	1ad3      	subs	r3, r2, r3
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f000 f91d 	bl	8010e9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010c62:	e0fd      	b.n	8010e60 <HAL_UART_IRQHandler+0x760>
 8010c64:	40020010 	.word	0x40020010
 8010c68:	40020028 	.word	0x40020028
 8010c6c:	40020040 	.word	0x40020040
 8010c70:	40020058 	.word	0x40020058
 8010c74:	40020070 	.word	0x40020070
 8010c78:	40020088 	.word	0x40020088
 8010c7c:	400200a0 	.word	0x400200a0
 8010c80:	400200b8 	.word	0x400200b8
 8010c84:	40020410 	.word	0x40020410
 8010c88:	40020428 	.word	0x40020428
 8010c8c:	40020440 	.word	0x40020440
 8010c90:	40020458 	.word	0x40020458
 8010c94:	40020470 	.word	0x40020470
 8010c98:	40020488 	.word	0x40020488
 8010c9c:	400204a0 	.word	0x400204a0
 8010ca0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	f000 80cf 	beq.w	8010e64 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	f000 80ca 	beq.w	8010e64 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd8:	e853 3f00 	ldrex	r3, [r3]
 8010cdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ce0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	461a      	mov	r2, r3
 8010cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8010cf4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cfa:	e841 2300 	strex	r3, r2, [r1]
 8010cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1e4      	bne.n	8010cd0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	3308      	adds	r3, #8
 8010d0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d10:	e853 3f00 	ldrex	r3, [r3]
 8010d14:	623b      	str	r3, [r7, #32]
   return(result);
 8010d16:	6a3a      	ldr	r2, [r7, #32]
 8010d18:	4b55      	ldr	r3, [pc, #340]	; (8010e70 <HAL_UART_IRQHandler+0x770>)
 8010d1a:	4013      	ands	r3, r2
 8010d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	3308      	adds	r3, #8
 8010d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010d2a:	633a      	str	r2, [r7, #48]	; 0x30
 8010d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d32:	e841 2300 	strex	r3, r2, [r1]
 8010d36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d1e3      	bne.n	8010d06 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2220      	movs	r2, #32
 8010d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	e853 3f00 	ldrex	r3, [r3]
 8010d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f023 0310 	bic.w	r3, r3, #16
 8010d66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	461a      	mov	r2, r3
 8010d70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d74:	61fb      	str	r3, [r7, #28]
 8010d76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d78:	69b9      	ldr	r1, [r7, #24]
 8010d7a:	69fa      	ldr	r2, [r7, #28]
 8010d7c:	e841 2300 	strex	r3, r2, [r1]
 8010d80:	617b      	str	r3, [r7, #20]
   return(result);
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d1e4      	bne.n	8010d52 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2202      	movs	r2, #2
 8010d8c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010d92:	4619      	mov	r1, r3
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 f881 	bl	8010e9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d9a:	e063      	b.n	8010e64 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d00e      	beq.n	8010dc6 <HAL_UART_IRQHandler+0x6c6>
 8010da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d008      	beq.n	8010dc6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f001 fe80 	bl	8012ac4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010dc4:	e051      	b.n	8010e6a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d014      	beq.n	8010dfc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d105      	bne.n	8010dea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d008      	beq.n	8010dfc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d03a      	beq.n	8010e68 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	4798      	blx	r3
    }
    return;
 8010dfa:	e035      	b.n	8010e68 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d009      	beq.n	8010e1c <HAL_UART_IRQHandler+0x71c>
 8010e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d003      	beq.n	8010e1c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f001 f90d 	bl	8012034 <UART_EndTransmit_IT>
    return;
 8010e1a:	e026      	b.n	8010e6a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d009      	beq.n	8010e3c <HAL_UART_IRQHandler+0x73c>
 8010e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d003      	beq.n	8010e3c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f001 fe59 	bl	8012aec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e3a:	e016      	b.n	8010e6a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d010      	beq.n	8010e6a <HAL_UART_IRQHandler+0x76a>
 8010e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	da0c      	bge.n	8010e6a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f001 fe41 	bl	8012ad8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e56:	e008      	b.n	8010e6a <HAL_UART_IRQHandler+0x76a>
      return;
 8010e58:	bf00      	nop
 8010e5a:	e006      	b.n	8010e6a <HAL_UART_IRQHandler+0x76a>
    return;
 8010e5c:	bf00      	nop
 8010e5e:	e004      	b.n	8010e6a <HAL_UART_IRQHandler+0x76a>
      return;
 8010e60:	bf00      	nop
 8010e62:	e002      	b.n	8010e6a <HAL_UART_IRQHandler+0x76a>
      return;
 8010e64:	bf00      	nop
 8010e66:	e000      	b.n	8010e6a <HAL_UART_IRQHandler+0x76a>
    return;
 8010e68:	bf00      	nop
  }
}
 8010e6a:	37e8      	adds	r7, #232	; 0xe8
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	effffffe 	.word	0xeffffffe

08010e74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b083      	sub	sp, #12
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010e7c:	bf00      	nop
 8010e7e:	370c      	adds	r7, #12
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr

08010e88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b083      	sub	sp, #12
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010e90:	bf00      	nop
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010ea8:	bf00      	nop
 8010eaa:	370c      	adds	r7, #12
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010eb8:	b092      	sub	sp, #72	; 0x48
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	689a      	ldr	r2, [r3, #8]
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	691b      	ldr	r3, [r3, #16]
 8010ecc:	431a      	orrs	r2, r3
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	695b      	ldr	r3, [r3, #20]
 8010ed2:	431a      	orrs	r2, r3
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	69db      	ldr	r3, [r3, #28]
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	4bbe      	ldr	r3, [pc, #760]	; (80111dc <UART_SetConfig+0x328>)
 8010ee4:	4013      	ands	r3, r2
 8010ee6:	697a      	ldr	r2, [r7, #20]
 8010ee8:	6812      	ldr	r2, [r2, #0]
 8010eea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010eec:	430b      	orrs	r3, r1
 8010eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	68da      	ldr	r2, [r3, #12]
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	430a      	orrs	r2, r1
 8010f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	699b      	ldr	r3, [r3, #24]
 8010f0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	4ab3      	ldr	r2, [pc, #716]	; (80111e0 <UART_SetConfig+0x32c>)
 8010f12:	4293      	cmp	r3, r2
 8010f14:	d004      	beq.n	8010f20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	6a1b      	ldr	r3, [r3, #32]
 8010f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f1c:	4313      	orrs	r3, r2
 8010f1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	689a      	ldr	r2, [r3, #8]
 8010f26:	4baf      	ldr	r3, [pc, #700]	; (80111e4 <UART_SetConfig+0x330>)
 8010f28:	4013      	ands	r3, r2
 8010f2a:	697a      	ldr	r2, [r7, #20]
 8010f2c:	6812      	ldr	r2, [r2, #0]
 8010f2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f30:	430b      	orrs	r3, r1
 8010f32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f3a:	f023 010f 	bic.w	r1, r3, #15
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	430a      	orrs	r2, r1
 8010f48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	4aa6      	ldr	r2, [pc, #664]	; (80111e8 <UART_SetConfig+0x334>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d177      	bne.n	8011044 <UART_SetConfig+0x190>
 8010f54:	4ba5      	ldr	r3, [pc, #660]	; (80111ec <UART_SetConfig+0x338>)
 8010f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f5c:	2b28      	cmp	r3, #40	; 0x28
 8010f5e:	d86d      	bhi.n	801103c <UART_SetConfig+0x188>
 8010f60:	a201      	add	r2, pc, #4	; (adr r2, 8010f68 <UART_SetConfig+0xb4>)
 8010f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f66:	bf00      	nop
 8010f68:	0801100d 	.word	0x0801100d
 8010f6c:	0801103d 	.word	0x0801103d
 8010f70:	0801103d 	.word	0x0801103d
 8010f74:	0801103d 	.word	0x0801103d
 8010f78:	0801103d 	.word	0x0801103d
 8010f7c:	0801103d 	.word	0x0801103d
 8010f80:	0801103d 	.word	0x0801103d
 8010f84:	0801103d 	.word	0x0801103d
 8010f88:	08011015 	.word	0x08011015
 8010f8c:	0801103d 	.word	0x0801103d
 8010f90:	0801103d 	.word	0x0801103d
 8010f94:	0801103d 	.word	0x0801103d
 8010f98:	0801103d 	.word	0x0801103d
 8010f9c:	0801103d 	.word	0x0801103d
 8010fa0:	0801103d 	.word	0x0801103d
 8010fa4:	0801103d 	.word	0x0801103d
 8010fa8:	0801101d 	.word	0x0801101d
 8010fac:	0801103d 	.word	0x0801103d
 8010fb0:	0801103d 	.word	0x0801103d
 8010fb4:	0801103d 	.word	0x0801103d
 8010fb8:	0801103d 	.word	0x0801103d
 8010fbc:	0801103d 	.word	0x0801103d
 8010fc0:	0801103d 	.word	0x0801103d
 8010fc4:	0801103d 	.word	0x0801103d
 8010fc8:	08011025 	.word	0x08011025
 8010fcc:	0801103d 	.word	0x0801103d
 8010fd0:	0801103d 	.word	0x0801103d
 8010fd4:	0801103d 	.word	0x0801103d
 8010fd8:	0801103d 	.word	0x0801103d
 8010fdc:	0801103d 	.word	0x0801103d
 8010fe0:	0801103d 	.word	0x0801103d
 8010fe4:	0801103d 	.word	0x0801103d
 8010fe8:	0801102d 	.word	0x0801102d
 8010fec:	0801103d 	.word	0x0801103d
 8010ff0:	0801103d 	.word	0x0801103d
 8010ff4:	0801103d 	.word	0x0801103d
 8010ff8:	0801103d 	.word	0x0801103d
 8010ffc:	0801103d 	.word	0x0801103d
 8011000:	0801103d 	.word	0x0801103d
 8011004:	0801103d 	.word	0x0801103d
 8011008:	08011035 	.word	0x08011035
 801100c:	2301      	movs	r3, #1
 801100e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011012:	e222      	b.n	801145a <UART_SetConfig+0x5a6>
 8011014:	2304      	movs	r3, #4
 8011016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101a:	e21e      	b.n	801145a <UART_SetConfig+0x5a6>
 801101c:	2308      	movs	r3, #8
 801101e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011022:	e21a      	b.n	801145a <UART_SetConfig+0x5a6>
 8011024:	2310      	movs	r3, #16
 8011026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102a:	e216      	b.n	801145a <UART_SetConfig+0x5a6>
 801102c:	2320      	movs	r3, #32
 801102e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011032:	e212      	b.n	801145a <UART_SetConfig+0x5a6>
 8011034:	2340      	movs	r3, #64	; 0x40
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e20e      	b.n	801145a <UART_SetConfig+0x5a6>
 801103c:	2380      	movs	r3, #128	; 0x80
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e20a      	b.n	801145a <UART_SetConfig+0x5a6>
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4a69      	ldr	r2, [pc, #420]	; (80111f0 <UART_SetConfig+0x33c>)
 801104a:	4293      	cmp	r3, r2
 801104c:	d130      	bne.n	80110b0 <UART_SetConfig+0x1fc>
 801104e:	4b67      	ldr	r3, [pc, #412]	; (80111ec <UART_SetConfig+0x338>)
 8011050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011052:	f003 0307 	and.w	r3, r3, #7
 8011056:	2b05      	cmp	r3, #5
 8011058:	d826      	bhi.n	80110a8 <UART_SetConfig+0x1f4>
 801105a:	a201      	add	r2, pc, #4	; (adr r2, 8011060 <UART_SetConfig+0x1ac>)
 801105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011060:	08011079 	.word	0x08011079
 8011064:	08011081 	.word	0x08011081
 8011068:	08011089 	.word	0x08011089
 801106c:	08011091 	.word	0x08011091
 8011070:	08011099 	.word	0x08011099
 8011074:	080110a1 	.word	0x080110a1
 8011078:	2300      	movs	r3, #0
 801107a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107e:	e1ec      	b.n	801145a <UART_SetConfig+0x5a6>
 8011080:	2304      	movs	r3, #4
 8011082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011086:	e1e8      	b.n	801145a <UART_SetConfig+0x5a6>
 8011088:	2308      	movs	r3, #8
 801108a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108e:	e1e4      	b.n	801145a <UART_SetConfig+0x5a6>
 8011090:	2310      	movs	r3, #16
 8011092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011096:	e1e0      	b.n	801145a <UART_SetConfig+0x5a6>
 8011098:	2320      	movs	r3, #32
 801109a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109e:	e1dc      	b.n	801145a <UART_SetConfig+0x5a6>
 80110a0:	2340      	movs	r3, #64	; 0x40
 80110a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a6:	e1d8      	b.n	801145a <UART_SetConfig+0x5a6>
 80110a8:	2380      	movs	r3, #128	; 0x80
 80110aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ae:	e1d4      	b.n	801145a <UART_SetConfig+0x5a6>
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a4f      	ldr	r2, [pc, #316]	; (80111f4 <UART_SetConfig+0x340>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d130      	bne.n	801111c <UART_SetConfig+0x268>
 80110ba:	4b4c      	ldr	r3, [pc, #304]	; (80111ec <UART_SetConfig+0x338>)
 80110bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110be:	f003 0307 	and.w	r3, r3, #7
 80110c2:	2b05      	cmp	r3, #5
 80110c4:	d826      	bhi.n	8011114 <UART_SetConfig+0x260>
 80110c6:	a201      	add	r2, pc, #4	; (adr r2, 80110cc <UART_SetConfig+0x218>)
 80110c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110cc:	080110e5 	.word	0x080110e5
 80110d0:	080110ed 	.word	0x080110ed
 80110d4:	080110f5 	.word	0x080110f5
 80110d8:	080110fd 	.word	0x080110fd
 80110dc:	08011105 	.word	0x08011105
 80110e0:	0801110d 	.word	0x0801110d
 80110e4:	2300      	movs	r3, #0
 80110e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ea:	e1b6      	b.n	801145a <UART_SetConfig+0x5a6>
 80110ec:	2304      	movs	r3, #4
 80110ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f2:	e1b2      	b.n	801145a <UART_SetConfig+0x5a6>
 80110f4:	2308      	movs	r3, #8
 80110f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fa:	e1ae      	b.n	801145a <UART_SetConfig+0x5a6>
 80110fc:	2310      	movs	r3, #16
 80110fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011102:	e1aa      	b.n	801145a <UART_SetConfig+0x5a6>
 8011104:	2320      	movs	r3, #32
 8011106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110a:	e1a6      	b.n	801145a <UART_SetConfig+0x5a6>
 801110c:	2340      	movs	r3, #64	; 0x40
 801110e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011112:	e1a2      	b.n	801145a <UART_SetConfig+0x5a6>
 8011114:	2380      	movs	r3, #128	; 0x80
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e19e      	b.n	801145a <UART_SetConfig+0x5a6>
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a35      	ldr	r2, [pc, #212]	; (80111f8 <UART_SetConfig+0x344>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d130      	bne.n	8011188 <UART_SetConfig+0x2d4>
 8011126:	4b31      	ldr	r3, [pc, #196]	; (80111ec <UART_SetConfig+0x338>)
 8011128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801112a:	f003 0307 	and.w	r3, r3, #7
 801112e:	2b05      	cmp	r3, #5
 8011130:	d826      	bhi.n	8011180 <UART_SetConfig+0x2cc>
 8011132:	a201      	add	r2, pc, #4	; (adr r2, 8011138 <UART_SetConfig+0x284>)
 8011134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011138:	08011151 	.word	0x08011151
 801113c:	08011159 	.word	0x08011159
 8011140:	08011161 	.word	0x08011161
 8011144:	08011169 	.word	0x08011169
 8011148:	08011171 	.word	0x08011171
 801114c:	08011179 	.word	0x08011179
 8011150:	2300      	movs	r3, #0
 8011152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011156:	e180      	b.n	801145a <UART_SetConfig+0x5a6>
 8011158:	2304      	movs	r3, #4
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115e:	e17c      	b.n	801145a <UART_SetConfig+0x5a6>
 8011160:	2308      	movs	r3, #8
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011166:	e178      	b.n	801145a <UART_SetConfig+0x5a6>
 8011168:	2310      	movs	r3, #16
 801116a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116e:	e174      	b.n	801145a <UART_SetConfig+0x5a6>
 8011170:	2320      	movs	r3, #32
 8011172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011176:	e170      	b.n	801145a <UART_SetConfig+0x5a6>
 8011178:	2340      	movs	r3, #64	; 0x40
 801117a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117e:	e16c      	b.n	801145a <UART_SetConfig+0x5a6>
 8011180:	2380      	movs	r3, #128	; 0x80
 8011182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011186:	e168      	b.n	801145a <UART_SetConfig+0x5a6>
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	4a1b      	ldr	r2, [pc, #108]	; (80111fc <UART_SetConfig+0x348>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d142      	bne.n	8011218 <UART_SetConfig+0x364>
 8011192:	4b16      	ldr	r3, [pc, #88]	; (80111ec <UART_SetConfig+0x338>)
 8011194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011196:	f003 0307 	and.w	r3, r3, #7
 801119a:	2b05      	cmp	r3, #5
 801119c:	d838      	bhi.n	8011210 <UART_SetConfig+0x35c>
 801119e:	a201      	add	r2, pc, #4	; (adr r2, 80111a4 <UART_SetConfig+0x2f0>)
 80111a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a4:	080111bd 	.word	0x080111bd
 80111a8:	080111c5 	.word	0x080111c5
 80111ac:	080111cd 	.word	0x080111cd
 80111b0:	080111d5 	.word	0x080111d5
 80111b4:	08011201 	.word	0x08011201
 80111b8:	08011209 	.word	0x08011209
 80111bc:	2300      	movs	r3, #0
 80111be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c2:	e14a      	b.n	801145a <UART_SetConfig+0x5a6>
 80111c4:	2304      	movs	r3, #4
 80111c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ca:	e146      	b.n	801145a <UART_SetConfig+0x5a6>
 80111cc:	2308      	movs	r3, #8
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e142      	b.n	801145a <UART_SetConfig+0x5a6>
 80111d4:	2310      	movs	r3, #16
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111da:	e13e      	b.n	801145a <UART_SetConfig+0x5a6>
 80111dc:	cfff69f3 	.word	0xcfff69f3
 80111e0:	58000c00 	.word	0x58000c00
 80111e4:	11fff4ff 	.word	0x11fff4ff
 80111e8:	40011000 	.word	0x40011000
 80111ec:	58024400 	.word	0x58024400
 80111f0:	40004400 	.word	0x40004400
 80111f4:	40004800 	.word	0x40004800
 80111f8:	40004c00 	.word	0x40004c00
 80111fc:	40005000 	.word	0x40005000
 8011200:	2320      	movs	r3, #32
 8011202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011206:	e128      	b.n	801145a <UART_SetConfig+0x5a6>
 8011208:	2340      	movs	r3, #64	; 0x40
 801120a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120e:	e124      	b.n	801145a <UART_SetConfig+0x5a6>
 8011210:	2380      	movs	r3, #128	; 0x80
 8011212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011216:	e120      	b.n	801145a <UART_SetConfig+0x5a6>
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4acb      	ldr	r2, [pc, #812]	; (801154c <UART_SetConfig+0x698>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d176      	bne.n	8011310 <UART_SetConfig+0x45c>
 8011222:	4bcb      	ldr	r3, [pc, #812]	; (8011550 <UART_SetConfig+0x69c>)
 8011224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801122a:	2b28      	cmp	r3, #40	; 0x28
 801122c:	d86c      	bhi.n	8011308 <UART_SetConfig+0x454>
 801122e:	a201      	add	r2, pc, #4	; (adr r2, 8011234 <UART_SetConfig+0x380>)
 8011230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011234:	080112d9 	.word	0x080112d9
 8011238:	08011309 	.word	0x08011309
 801123c:	08011309 	.word	0x08011309
 8011240:	08011309 	.word	0x08011309
 8011244:	08011309 	.word	0x08011309
 8011248:	08011309 	.word	0x08011309
 801124c:	08011309 	.word	0x08011309
 8011250:	08011309 	.word	0x08011309
 8011254:	080112e1 	.word	0x080112e1
 8011258:	08011309 	.word	0x08011309
 801125c:	08011309 	.word	0x08011309
 8011260:	08011309 	.word	0x08011309
 8011264:	08011309 	.word	0x08011309
 8011268:	08011309 	.word	0x08011309
 801126c:	08011309 	.word	0x08011309
 8011270:	08011309 	.word	0x08011309
 8011274:	080112e9 	.word	0x080112e9
 8011278:	08011309 	.word	0x08011309
 801127c:	08011309 	.word	0x08011309
 8011280:	08011309 	.word	0x08011309
 8011284:	08011309 	.word	0x08011309
 8011288:	08011309 	.word	0x08011309
 801128c:	08011309 	.word	0x08011309
 8011290:	08011309 	.word	0x08011309
 8011294:	080112f1 	.word	0x080112f1
 8011298:	08011309 	.word	0x08011309
 801129c:	08011309 	.word	0x08011309
 80112a0:	08011309 	.word	0x08011309
 80112a4:	08011309 	.word	0x08011309
 80112a8:	08011309 	.word	0x08011309
 80112ac:	08011309 	.word	0x08011309
 80112b0:	08011309 	.word	0x08011309
 80112b4:	080112f9 	.word	0x080112f9
 80112b8:	08011309 	.word	0x08011309
 80112bc:	08011309 	.word	0x08011309
 80112c0:	08011309 	.word	0x08011309
 80112c4:	08011309 	.word	0x08011309
 80112c8:	08011309 	.word	0x08011309
 80112cc:	08011309 	.word	0x08011309
 80112d0:	08011309 	.word	0x08011309
 80112d4:	08011301 	.word	0x08011301
 80112d8:	2301      	movs	r3, #1
 80112da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112de:	e0bc      	b.n	801145a <UART_SetConfig+0x5a6>
 80112e0:	2304      	movs	r3, #4
 80112e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e6:	e0b8      	b.n	801145a <UART_SetConfig+0x5a6>
 80112e8:	2308      	movs	r3, #8
 80112ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ee:	e0b4      	b.n	801145a <UART_SetConfig+0x5a6>
 80112f0:	2310      	movs	r3, #16
 80112f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f6:	e0b0      	b.n	801145a <UART_SetConfig+0x5a6>
 80112f8:	2320      	movs	r3, #32
 80112fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fe:	e0ac      	b.n	801145a <UART_SetConfig+0x5a6>
 8011300:	2340      	movs	r3, #64	; 0x40
 8011302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011306:	e0a8      	b.n	801145a <UART_SetConfig+0x5a6>
 8011308:	2380      	movs	r3, #128	; 0x80
 801130a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130e:	e0a4      	b.n	801145a <UART_SetConfig+0x5a6>
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4a8f      	ldr	r2, [pc, #572]	; (8011554 <UART_SetConfig+0x6a0>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d130      	bne.n	801137c <UART_SetConfig+0x4c8>
 801131a:	4b8d      	ldr	r3, [pc, #564]	; (8011550 <UART_SetConfig+0x69c>)
 801131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801131e:	f003 0307 	and.w	r3, r3, #7
 8011322:	2b05      	cmp	r3, #5
 8011324:	d826      	bhi.n	8011374 <UART_SetConfig+0x4c0>
 8011326:	a201      	add	r2, pc, #4	; (adr r2, 801132c <UART_SetConfig+0x478>)
 8011328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801132c:	08011345 	.word	0x08011345
 8011330:	0801134d 	.word	0x0801134d
 8011334:	08011355 	.word	0x08011355
 8011338:	0801135d 	.word	0x0801135d
 801133c:	08011365 	.word	0x08011365
 8011340:	0801136d 	.word	0x0801136d
 8011344:	2300      	movs	r3, #0
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134a:	e086      	b.n	801145a <UART_SetConfig+0x5a6>
 801134c:	2304      	movs	r3, #4
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e082      	b.n	801145a <UART_SetConfig+0x5a6>
 8011354:	2308      	movs	r3, #8
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e07e      	b.n	801145a <UART_SetConfig+0x5a6>
 801135c:	2310      	movs	r3, #16
 801135e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011362:	e07a      	b.n	801145a <UART_SetConfig+0x5a6>
 8011364:	2320      	movs	r3, #32
 8011366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136a:	e076      	b.n	801145a <UART_SetConfig+0x5a6>
 801136c:	2340      	movs	r3, #64	; 0x40
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011372:	e072      	b.n	801145a <UART_SetConfig+0x5a6>
 8011374:	2380      	movs	r3, #128	; 0x80
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137a:	e06e      	b.n	801145a <UART_SetConfig+0x5a6>
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	4a75      	ldr	r2, [pc, #468]	; (8011558 <UART_SetConfig+0x6a4>)
 8011382:	4293      	cmp	r3, r2
 8011384:	d130      	bne.n	80113e8 <UART_SetConfig+0x534>
 8011386:	4b72      	ldr	r3, [pc, #456]	; (8011550 <UART_SetConfig+0x69c>)
 8011388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801138a:	f003 0307 	and.w	r3, r3, #7
 801138e:	2b05      	cmp	r3, #5
 8011390:	d826      	bhi.n	80113e0 <UART_SetConfig+0x52c>
 8011392:	a201      	add	r2, pc, #4	; (adr r2, 8011398 <UART_SetConfig+0x4e4>)
 8011394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011398:	080113b1 	.word	0x080113b1
 801139c:	080113b9 	.word	0x080113b9
 80113a0:	080113c1 	.word	0x080113c1
 80113a4:	080113c9 	.word	0x080113c9
 80113a8:	080113d1 	.word	0x080113d1
 80113ac:	080113d9 	.word	0x080113d9
 80113b0:	2300      	movs	r3, #0
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e050      	b.n	801145a <UART_SetConfig+0x5a6>
 80113b8:	2304      	movs	r3, #4
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e04c      	b.n	801145a <UART_SetConfig+0x5a6>
 80113c0:	2308      	movs	r3, #8
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e048      	b.n	801145a <UART_SetConfig+0x5a6>
 80113c8:	2310      	movs	r3, #16
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ce:	e044      	b.n	801145a <UART_SetConfig+0x5a6>
 80113d0:	2320      	movs	r3, #32
 80113d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d6:	e040      	b.n	801145a <UART_SetConfig+0x5a6>
 80113d8:	2340      	movs	r3, #64	; 0x40
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113de:	e03c      	b.n	801145a <UART_SetConfig+0x5a6>
 80113e0:	2380      	movs	r3, #128	; 0x80
 80113e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e6:	e038      	b.n	801145a <UART_SetConfig+0x5a6>
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	4a5b      	ldr	r2, [pc, #364]	; (801155c <UART_SetConfig+0x6a8>)
 80113ee:	4293      	cmp	r3, r2
 80113f0:	d130      	bne.n	8011454 <UART_SetConfig+0x5a0>
 80113f2:	4b57      	ldr	r3, [pc, #348]	; (8011550 <UART_SetConfig+0x69c>)
 80113f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113f6:	f003 0307 	and.w	r3, r3, #7
 80113fa:	2b05      	cmp	r3, #5
 80113fc:	d826      	bhi.n	801144c <UART_SetConfig+0x598>
 80113fe:	a201      	add	r2, pc, #4	; (adr r2, 8011404 <UART_SetConfig+0x550>)
 8011400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011404:	0801141d 	.word	0x0801141d
 8011408:	08011425 	.word	0x08011425
 801140c:	0801142d 	.word	0x0801142d
 8011410:	08011435 	.word	0x08011435
 8011414:	0801143d 	.word	0x0801143d
 8011418:	08011445 	.word	0x08011445
 801141c:	2302      	movs	r3, #2
 801141e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011422:	e01a      	b.n	801145a <UART_SetConfig+0x5a6>
 8011424:	2304      	movs	r3, #4
 8011426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142a:	e016      	b.n	801145a <UART_SetConfig+0x5a6>
 801142c:	2308      	movs	r3, #8
 801142e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011432:	e012      	b.n	801145a <UART_SetConfig+0x5a6>
 8011434:	2310      	movs	r3, #16
 8011436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801143a:	e00e      	b.n	801145a <UART_SetConfig+0x5a6>
 801143c:	2320      	movs	r3, #32
 801143e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011442:	e00a      	b.n	801145a <UART_SetConfig+0x5a6>
 8011444:	2340      	movs	r3, #64	; 0x40
 8011446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144a:	e006      	b.n	801145a <UART_SetConfig+0x5a6>
 801144c:	2380      	movs	r3, #128	; 0x80
 801144e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011452:	e002      	b.n	801145a <UART_SetConfig+0x5a6>
 8011454:	2380      	movs	r3, #128	; 0x80
 8011456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	4a3f      	ldr	r2, [pc, #252]	; (801155c <UART_SetConfig+0x6a8>)
 8011460:	4293      	cmp	r3, r2
 8011462:	f040 80f8 	bne.w	8011656 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011466:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801146a:	2b20      	cmp	r3, #32
 801146c:	dc46      	bgt.n	80114fc <UART_SetConfig+0x648>
 801146e:	2b02      	cmp	r3, #2
 8011470:	f2c0 8082 	blt.w	8011578 <UART_SetConfig+0x6c4>
 8011474:	3b02      	subs	r3, #2
 8011476:	2b1e      	cmp	r3, #30
 8011478:	d87e      	bhi.n	8011578 <UART_SetConfig+0x6c4>
 801147a:	a201      	add	r2, pc, #4	; (adr r2, 8011480 <UART_SetConfig+0x5cc>)
 801147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011480:	08011503 	.word	0x08011503
 8011484:	08011579 	.word	0x08011579
 8011488:	0801150b 	.word	0x0801150b
 801148c:	08011579 	.word	0x08011579
 8011490:	08011579 	.word	0x08011579
 8011494:	08011579 	.word	0x08011579
 8011498:	0801151b 	.word	0x0801151b
 801149c:	08011579 	.word	0x08011579
 80114a0:	08011579 	.word	0x08011579
 80114a4:	08011579 	.word	0x08011579
 80114a8:	08011579 	.word	0x08011579
 80114ac:	08011579 	.word	0x08011579
 80114b0:	08011579 	.word	0x08011579
 80114b4:	08011579 	.word	0x08011579
 80114b8:	0801152b 	.word	0x0801152b
 80114bc:	08011579 	.word	0x08011579
 80114c0:	08011579 	.word	0x08011579
 80114c4:	08011579 	.word	0x08011579
 80114c8:	08011579 	.word	0x08011579
 80114cc:	08011579 	.word	0x08011579
 80114d0:	08011579 	.word	0x08011579
 80114d4:	08011579 	.word	0x08011579
 80114d8:	08011579 	.word	0x08011579
 80114dc:	08011579 	.word	0x08011579
 80114e0:	08011579 	.word	0x08011579
 80114e4:	08011579 	.word	0x08011579
 80114e8:	08011579 	.word	0x08011579
 80114ec:	08011579 	.word	0x08011579
 80114f0:	08011579 	.word	0x08011579
 80114f4:	08011579 	.word	0x08011579
 80114f8:	0801156b 	.word	0x0801156b
 80114fc:	2b40      	cmp	r3, #64	; 0x40
 80114fe:	d037      	beq.n	8011570 <UART_SetConfig+0x6bc>
 8011500:	e03a      	b.n	8011578 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011502:	f7fb fd65 	bl	800cfd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8011506:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011508:	e03c      	b.n	8011584 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801150e:	4618      	mov	r0, r3
 8011510:	f7fb fd74 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011518:	e034      	b.n	8011584 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801151a:	f107 0318 	add.w	r3, r7, #24
 801151e:	4618      	mov	r0, r3
 8011520:	f7fb fec0 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011524:	69fb      	ldr	r3, [r7, #28]
 8011526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011528:	e02c      	b.n	8011584 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801152a:	4b09      	ldr	r3, [pc, #36]	; (8011550 <UART_SetConfig+0x69c>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f003 0320 	and.w	r3, r3, #32
 8011532:	2b00      	cmp	r3, #0
 8011534:	d016      	beq.n	8011564 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011536:	4b06      	ldr	r3, [pc, #24]	; (8011550 <UART_SetConfig+0x69c>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	08db      	lsrs	r3, r3, #3
 801153c:	f003 0303 	and.w	r3, r3, #3
 8011540:	4a07      	ldr	r2, [pc, #28]	; (8011560 <UART_SetConfig+0x6ac>)
 8011542:	fa22 f303 	lsr.w	r3, r2, r3
 8011546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011548:	e01c      	b.n	8011584 <UART_SetConfig+0x6d0>
 801154a:	bf00      	nop
 801154c:	40011400 	.word	0x40011400
 8011550:	58024400 	.word	0x58024400
 8011554:	40007800 	.word	0x40007800
 8011558:	40007c00 	.word	0x40007c00
 801155c:	58000c00 	.word	0x58000c00
 8011560:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011564:	4b9d      	ldr	r3, [pc, #628]	; (80117dc <UART_SetConfig+0x928>)
 8011566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011568:	e00c      	b.n	8011584 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801156a:	4b9d      	ldr	r3, [pc, #628]	; (80117e0 <UART_SetConfig+0x92c>)
 801156c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801156e:	e009      	b.n	8011584 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011576:	e005      	b.n	8011584 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011578:	2300      	movs	r3, #0
 801157a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801157c:	2301      	movs	r3, #1
 801157e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011582:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011586:	2b00      	cmp	r3, #0
 8011588:	f000 81de 	beq.w	8011948 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011590:	4a94      	ldr	r2, [pc, #592]	; (80117e4 <UART_SetConfig+0x930>)
 8011592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011596:	461a      	mov	r2, r3
 8011598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801159a:	fbb3 f3f2 	udiv	r3, r3, r2
 801159e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	685a      	ldr	r2, [r3, #4]
 80115a4:	4613      	mov	r3, r2
 80115a6:	005b      	lsls	r3, r3, #1
 80115a8:	4413      	add	r3, r2
 80115aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d305      	bcc.n	80115bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d903      	bls.n	80115c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80115bc:	2301      	movs	r3, #1
 80115be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115c2:	e1c1      	b.n	8011948 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115c6:	2200      	movs	r2, #0
 80115c8:	60bb      	str	r3, [r7, #8]
 80115ca:	60fa      	str	r2, [r7, #12]
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d0:	4a84      	ldr	r2, [pc, #528]	; (80117e4 <UART_SetConfig+0x930>)
 80115d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	2200      	movs	r2, #0
 80115da:	603b      	str	r3, [r7, #0]
 80115dc:	607a      	str	r2, [r7, #4]
 80115de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80115e6:	f7ee fe7b 	bl	80002e0 <__aeabi_uldivmod>
 80115ea:	4602      	mov	r2, r0
 80115ec:	460b      	mov	r3, r1
 80115ee:	4610      	mov	r0, r2
 80115f0:	4619      	mov	r1, r3
 80115f2:	f04f 0200 	mov.w	r2, #0
 80115f6:	f04f 0300 	mov.w	r3, #0
 80115fa:	020b      	lsls	r3, r1, #8
 80115fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011600:	0202      	lsls	r2, r0, #8
 8011602:	6979      	ldr	r1, [r7, #20]
 8011604:	6849      	ldr	r1, [r1, #4]
 8011606:	0849      	lsrs	r1, r1, #1
 8011608:	2000      	movs	r0, #0
 801160a:	460c      	mov	r4, r1
 801160c:	4605      	mov	r5, r0
 801160e:	eb12 0804 	adds.w	r8, r2, r4
 8011612:	eb43 0905 	adc.w	r9, r3, r5
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	469a      	mov	sl, r3
 801161e:	4693      	mov	fp, r2
 8011620:	4652      	mov	r2, sl
 8011622:	465b      	mov	r3, fp
 8011624:	4640      	mov	r0, r8
 8011626:	4649      	mov	r1, r9
 8011628:	f7ee fe5a 	bl	80002e0 <__aeabi_uldivmod>
 801162c:	4602      	mov	r2, r0
 801162e:	460b      	mov	r3, r1
 8011630:	4613      	mov	r3, r2
 8011632:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801163a:	d308      	bcc.n	801164e <UART_SetConfig+0x79a>
 801163c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011642:	d204      	bcs.n	801164e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801164a:	60da      	str	r2, [r3, #12]
 801164c:	e17c      	b.n	8011948 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801164e:	2301      	movs	r3, #1
 8011650:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011654:	e178      	b.n	8011948 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	69db      	ldr	r3, [r3, #28]
 801165a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801165e:	f040 80c5 	bne.w	80117ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011662:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011666:	2b20      	cmp	r3, #32
 8011668:	dc48      	bgt.n	80116fc <UART_SetConfig+0x848>
 801166a:	2b00      	cmp	r3, #0
 801166c:	db7b      	blt.n	8011766 <UART_SetConfig+0x8b2>
 801166e:	2b20      	cmp	r3, #32
 8011670:	d879      	bhi.n	8011766 <UART_SetConfig+0x8b2>
 8011672:	a201      	add	r2, pc, #4	; (adr r2, 8011678 <UART_SetConfig+0x7c4>)
 8011674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011678:	08011703 	.word	0x08011703
 801167c:	0801170b 	.word	0x0801170b
 8011680:	08011767 	.word	0x08011767
 8011684:	08011767 	.word	0x08011767
 8011688:	08011713 	.word	0x08011713
 801168c:	08011767 	.word	0x08011767
 8011690:	08011767 	.word	0x08011767
 8011694:	08011767 	.word	0x08011767
 8011698:	08011723 	.word	0x08011723
 801169c:	08011767 	.word	0x08011767
 80116a0:	08011767 	.word	0x08011767
 80116a4:	08011767 	.word	0x08011767
 80116a8:	08011767 	.word	0x08011767
 80116ac:	08011767 	.word	0x08011767
 80116b0:	08011767 	.word	0x08011767
 80116b4:	08011767 	.word	0x08011767
 80116b8:	08011733 	.word	0x08011733
 80116bc:	08011767 	.word	0x08011767
 80116c0:	08011767 	.word	0x08011767
 80116c4:	08011767 	.word	0x08011767
 80116c8:	08011767 	.word	0x08011767
 80116cc:	08011767 	.word	0x08011767
 80116d0:	08011767 	.word	0x08011767
 80116d4:	08011767 	.word	0x08011767
 80116d8:	08011767 	.word	0x08011767
 80116dc:	08011767 	.word	0x08011767
 80116e0:	08011767 	.word	0x08011767
 80116e4:	08011767 	.word	0x08011767
 80116e8:	08011767 	.word	0x08011767
 80116ec:	08011767 	.word	0x08011767
 80116f0:	08011767 	.word	0x08011767
 80116f4:	08011767 	.word	0x08011767
 80116f8:	08011759 	.word	0x08011759
 80116fc:	2b40      	cmp	r3, #64	; 0x40
 80116fe:	d02e      	beq.n	801175e <UART_SetConfig+0x8aa>
 8011700:	e031      	b.n	8011766 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011702:	f7f9 fc6d 	bl	800afe0 <HAL_RCC_GetPCLK1Freq>
 8011706:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011708:	e033      	b.n	8011772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801170a:	f7f9 fc7f 	bl	800b00c <HAL_RCC_GetPCLK2Freq>
 801170e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011710:	e02f      	b.n	8011772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011716:	4618      	mov	r0, r3
 8011718:	f7fb fc70 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801171e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011720:	e027      	b.n	8011772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011722:	f107 0318 	add.w	r3, r7, #24
 8011726:	4618      	mov	r0, r3
 8011728:	f7fb fdbc 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011730:	e01f      	b.n	8011772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011732:	4b2d      	ldr	r3, [pc, #180]	; (80117e8 <UART_SetConfig+0x934>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	f003 0320 	and.w	r3, r3, #32
 801173a:	2b00      	cmp	r3, #0
 801173c:	d009      	beq.n	8011752 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801173e:	4b2a      	ldr	r3, [pc, #168]	; (80117e8 <UART_SetConfig+0x934>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	08db      	lsrs	r3, r3, #3
 8011744:	f003 0303 	and.w	r3, r3, #3
 8011748:	4a24      	ldr	r2, [pc, #144]	; (80117dc <UART_SetConfig+0x928>)
 801174a:	fa22 f303 	lsr.w	r3, r2, r3
 801174e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011750:	e00f      	b.n	8011772 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011752:	4b22      	ldr	r3, [pc, #136]	; (80117dc <UART_SetConfig+0x928>)
 8011754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011756:	e00c      	b.n	8011772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011758:	4b21      	ldr	r3, [pc, #132]	; (80117e0 <UART_SetConfig+0x92c>)
 801175a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801175c:	e009      	b.n	8011772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801175e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011764:	e005      	b.n	8011772 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011766:	2300      	movs	r3, #0
 8011768:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801176a:	2301      	movs	r3, #1
 801176c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011774:	2b00      	cmp	r3, #0
 8011776:	f000 80e7 	beq.w	8011948 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801177e:	4a19      	ldr	r2, [pc, #100]	; (80117e4 <UART_SetConfig+0x930>)
 8011780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011784:	461a      	mov	r2, r3
 8011786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011788:	fbb3 f3f2 	udiv	r3, r3, r2
 801178c:	005a      	lsls	r2, r3, #1
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	085b      	lsrs	r3, r3, #1
 8011794:	441a      	add	r2, r3
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	fbb2 f3f3 	udiv	r3, r2, r3
 801179e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a2:	2b0f      	cmp	r3, #15
 80117a4:	d916      	bls.n	80117d4 <UART_SetConfig+0x920>
 80117a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117ac:	d212      	bcs.n	80117d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80117ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	f023 030f 	bic.w	r3, r3, #15
 80117b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80117b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ba:	085b      	lsrs	r3, r3, #1
 80117bc:	b29b      	uxth	r3, r3
 80117be:	f003 0307 	and.w	r3, r3, #7
 80117c2:	b29a      	uxth	r2, r3
 80117c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80117c6:	4313      	orrs	r3, r2
 80117c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80117d0:	60da      	str	r2, [r3, #12]
 80117d2:	e0b9      	b.n	8011948 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80117d4:	2301      	movs	r3, #1
 80117d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80117da:	e0b5      	b.n	8011948 <UART_SetConfig+0xa94>
 80117dc:	03d09000 	.word	0x03d09000
 80117e0:	003d0900 	.word	0x003d0900
 80117e4:	080170cc 	.word	0x080170cc
 80117e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80117ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80117f0:	2b20      	cmp	r3, #32
 80117f2:	dc49      	bgt.n	8011888 <UART_SetConfig+0x9d4>
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	db7c      	blt.n	80118f2 <UART_SetConfig+0xa3e>
 80117f8:	2b20      	cmp	r3, #32
 80117fa:	d87a      	bhi.n	80118f2 <UART_SetConfig+0xa3e>
 80117fc:	a201      	add	r2, pc, #4	; (adr r2, 8011804 <UART_SetConfig+0x950>)
 80117fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011802:	bf00      	nop
 8011804:	0801188f 	.word	0x0801188f
 8011808:	08011897 	.word	0x08011897
 801180c:	080118f3 	.word	0x080118f3
 8011810:	080118f3 	.word	0x080118f3
 8011814:	0801189f 	.word	0x0801189f
 8011818:	080118f3 	.word	0x080118f3
 801181c:	080118f3 	.word	0x080118f3
 8011820:	080118f3 	.word	0x080118f3
 8011824:	080118af 	.word	0x080118af
 8011828:	080118f3 	.word	0x080118f3
 801182c:	080118f3 	.word	0x080118f3
 8011830:	080118f3 	.word	0x080118f3
 8011834:	080118f3 	.word	0x080118f3
 8011838:	080118f3 	.word	0x080118f3
 801183c:	080118f3 	.word	0x080118f3
 8011840:	080118f3 	.word	0x080118f3
 8011844:	080118bf 	.word	0x080118bf
 8011848:	080118f3 	.word	0x080118f3
 801184c:	080118f3 	.word	0x080118f3
 8011850:	080118f3 	.word	0x080118f3
 8011854:	080118f3 	.word	0x080118f3
 8011858:	080118f3 	.word	0x080118f3
 801185c:	080118f3 	.word	0x080118f3
 8011860:	080118f3 	.word	0x080118f3
 8011864:	080118f3 	.word	0x080118f3
 8011868:	080118f3 	.word	0x080118f3
 801186c:	080118f3 	.word	0x080118f3
 8011870:	080118f3 	.word	0x080118f3
 8011874:	080118f3 	.word	0x080118f3
 8011878:	080118f3 	.word	0x080118f3
 801187c:	080118f3 	.word	0x080118f3
 8011880:	080118f3 	.word	0x080118f3
 8011884:	080118e5 	.word	0x080118e5
 8011888:	2b40      	cmp	r3, #64	; 0x40
 801188a:	d02e      	beq.n	80118ea <UART_SetConfig+0xa36>
 801188c:	e031      	b.n	80118f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801188e:	f7f9 fba7 	bl	800afe0 <HAL_RCC_GetPCLK1Freq>
 8011892:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011894:	e033      	b.n	80118fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011896:	f7f9 fbb9 	bl	800b00c <HAL_RCC_GetPCLK2Freq>
 801189a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801189c:	e02f      	b.n	80118fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fb fbaa 	bl	800cffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80118a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118ac:	e027      	b.n	80118fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118ae:	f107 0318 	add.w	r3, r7, #24
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fb fcf6 	bl	800d2a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80118b8:	69fb      	ldr	r3, [r7, #28]
 80118ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118bc:	e01f      	b.n	80118fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80118be:	4b2d      	ldr	r3, [pc, #180]	; (8011974 <UART_SetConfig+0xac0>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f003 0320 	and.w	r3, r3, #32
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d009      	beq.n	80118de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80118ca:	4b2a      	ldr	r3, [pc, #168]	; (8011974 <UART_SetConfig+0xac0>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	08db      	lsrs	r3, r3, #3
 80118d0:	f003 0303 	and.w	r3, r3, #3
 80118d4:	4a28      	ldr	r2, [pc, #160]	; (8011978 <UART_SetConfig+0xac4>)
 80118d6:	fa22 f303 	lsr.w	r3, r2, r3
 80118da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80118dc:	e00f      	b.n	80118fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80118de:	4b26      	ldr	r3, [pc, #152]	; (8011978 <UART_SetConfig+0xac4>)
 80118e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118e2:	e00c      	b.n	80118fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80118e4:	4b25      	ldr	r3, [pc, #148]	; (801197c <UART_SetConfig+0xac8>)
 80118e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118e8:	e009      	b.n	80118fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80118ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118f0:	e005      	b.n	80118fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80118f2:	2300      	movs	r3, #0
 80118f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80118f6:	2301      	movs	r3, #1
 80118f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80118fc:	bf00      	nop
    }

    if (pclk != 0U)
 80118fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011900:	2b00      	cmp	r3, #0
 8011902:	d021      	beq.n	8011948 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011908:	4a1d      	ldr	r2, [pc, #116]	; (8011980 <UART_SetConfig+0xacc>)
 801190a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801190e:	461a      	mov	r2, r3
 8011910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011912:	fbb3 f2f2 	udiv	r2, r3, r2
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	085b      	lsrs	r3, r3, #1
 801191c:	441a      	add	r2, r3
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	fbb2 f3f3 	udiv	r3, r2, r3
 8011926:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801192a:	2b0f      	cmp	r3, #15
 801192c:	d909      	bls.n	8011942 <UART_SetConfig+0xa8e>
 801192e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011934:	d205      	bcs.n	8011942 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011938:	b29a      	uxth	r2, r3
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	60da      	str	r2, [r3, #12]
 8011940:	e002      	b.n	8011948 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011942:	2301      	movs	r3, #1
 8011944:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	2201      	movs	r2, #1
 801194c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	2201      	movs	r2, #1
 8011954:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	2200      	movs	r2, #0
 801195c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	2200      	movs	r2, #0
 8011962:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011964:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011968:	4618      	mov	r0, r3
 801196a:	3748      	adds	r7, #72	; 0x48
 801196c:	46bd      	mov	sp, r7
 801196e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011972:	bf00      	nop
 8011974:	58024400 	.word	0x58024400
 8011978:	03d09000 	.word	0x03d09000
 801197c:	003d0900 	.word	0x003d0900
 8011980:	080170cc 	.word	0x080170cc

08011984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011984:	b480      	push	{r7}
 8011986:	b083      	sub	sp, #12
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011990:	f003 0308 	and.w	r3, r3, #8
 8011994:	2b00      	cmp	r3, #0
 8011996:	d00a      	beq.n	80119ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	430a      	orrs	r2, r1
 80119ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119b2:	f003 0301 	and.w	r3, r3, #1
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d00a      	beq.n	80119d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	430a      	orrs	r2, r1
 80119ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119d4:	f003 0302 	and.w	r3, r3, #2
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d00a      	beq.n	80119f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	430a      	orrs	r2, r1
 80119f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119f6:	f003 0304 	and.w	r3, r3, #4
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00a      	beq.n	8011a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	430a      	orrs	r2, r1
 8011a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a18:	f003 0310 	and.w	r3, r3, #16
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d00a      	beq.n	8011a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	689b      	ldr	r3, [r3, #8]
 8011a26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	430a      	orrs	r2, r1
 8011a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a3a:	f003 0320 	and.w	r3, r3, #32
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d00a      	beq.n	8011a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	689b      	ldr	r3, [r3, #8]
 8011a48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	430a      	orrs	r2, r1
 8011a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d01a      	beq.n	8011a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	430a      	orrs	r2, r1
 8011a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a82:	d10a      	bne.n	8011a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	430a      	orrs	r2, r1
 8011a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d00a      	beq.n	8011abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	430a      	orrs	r2, r1
 8011aba:	605a      	str	r2, [r3, #4]
  }
}
 8011abc:	bf00      	nop
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b098      	sub	sp, #96	; 0x60
 8011acc:	af02      	add	r7, sp, #8
 8011ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011ad8:	f7f2 faf4 	bl	80040c4 <HAL_GetTick>
 8011adc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f003 0308 	and.w	r3, r3, #8
 8011ae8:	2b08      	cmp	r3, #8
 8011aea:	d12f      	bne.n	8011b4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011af0:	9300      	str	r3, [sp, #0]
 8011af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011af4:	2200      	movs	r2, #0
 8011af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f000 f88e 	bl	8011c1c <UART_WaitOnFlagUntilTimeout>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d022      	beq.n	8011b4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0e:	e853 3f00 	ldrex	r3, [r3]
 8011b12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b1a:	653b      	str	r3, [r7, #80]	; 0x50
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	461a      	mov	r2, r3
 8011b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b24:	647b      	str	r3, [r7, #68]	; 0x44
 8011b26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b2c:	e841 2300 	strex	r3, r2, [r1]
 8011b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d1e6      	bne.n	8011b06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2220      	movs	r2, #32
 8011b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2200      	movs	r2, #0
 8011b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b48:	2303      	movs	r3, #3
 8011b4a:	e063      	b.n	8011c14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	f003 0304 	and.w	r3, r3, #4
 8011b56:	2b04      	cmp	r3, #4
 8011b58:	d149      	bne.n	8011bee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011b5e:	9300      	str	r3, [sp, #0]
 8011b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b62:	2200      	movs	r2, #0
 8011b64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f000 f857 	bl	8011c1c <UART_WaitOnFlagUntilTimeout>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d03c      	beq.n	8011bee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7c:	e853 3f00 	ldrex	r3, [r3]
 8011b80:	623b      	str	r3, [r7, #32]
   return(result);
 8011b82:	6a3b      	ldr	r3, [r7, #32]
 8011b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	461a      	mov	r2, r3
 8011b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b92:	633b      	str	r3, [r7, #48]	; 0x30
 8011b94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b9a:	e841 2300 	strex	r3, r2, [r1]
 8011b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d1e6      	bne.n	8011b74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	3308      	adds	r3, #8
 8011bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	e853 3f00 	ldrex	r3, [r3]
 8011bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	f023 0301 	bic.w	r3, r3, #1
 8011bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	3308      	adds	r3, #8
 8011bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bc6:	61fa      	str	r2, [r7, #28]
 8011bc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bca:	69b9      	ldr	r1, [r7, #24]
 8011bcc:	69fa      	ldr	r2, [r7, #28]
 8011bce:	e841 2300 	strex	r3, r2, [r1]
 8011bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d1e5      	bne.n	8011ba6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2220      	movs	r2, #32
 8011bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2200      	movs	r2, #0
 8011be6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011bea:	2303      	movs	r3, #3
 8011bec:	e012      	b.n	8011c14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2220      	movs	r2, #32
 8011bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2220      	movs	r2, #32
 8011bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2200      	movs	r2, #0
 8011c02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2200      	movs	r2, #0
 8011c08:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c12:	2300      	movs	r3, #0
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3758      	adds	r7, #88	; 0x58
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b084      	sub	sp, #16
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	60b9      	str	r1, [r7, #8]
 8011c26:	603b      	str	r3, [r7, #0]
 8011c28:	4613      	mov	r3, r2
 8011c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c2c:	e04f      	b.n	8011cce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c34:	d04b      	beq.n	8011cce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c36:	f7f2 fa45 	bl	80040c4 <HAL_GetTick>
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	1ad3      	subs	r3, r2, r3
 8011c40:	69ba      	ldr	r2, [r7, #24]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d302      	bcc.n	8011c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8011c46:	69bb      	ldr	r3, [r7, #24]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d101      	bne.n	8011c50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011c4c:	2303      	movs	r3, #3
 8011c4e:	e04e      	b.n	8011cee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	f003 0304 	and.w	r3, r3, #4
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d037      	beq.n	8011cce <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	2b80      	cmp	r3, #128	; 0x80
 8011c62:	d034      	beq.n	8011cce <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	2b40      	cmp	r3, #64	; 0x40
 8011c68:	d031      	beq.n	8011cce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	69db      	ldr	r3, [r3, #28]
 8011c70:	f003 0308 	and.w	r3, r3, #8
 8011c74:	2b08      	cmp	r3, #8
 8011c76:	d110      	bne.n	8011c9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	2208      	movs	r2, #8
 8011c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c80:	68f8      	ldr	r0, [r7, #12]
 8011c82:	f000 f95b 	bl	8011f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2208      	movs	r2, #8
 8011c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2200      	movs	r2, #0
 8011c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011c96:	2301      	movs	r3, #1
 8011c98:	e029      	b.n	8011cee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	69db      	ldr	r3, [r3, #28]
 8011ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ca8:	d111      	bne.n	8011cce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	f000 f941 	bl	8011f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	2220      	movs	r2, #32
 8011cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011cca:	2303      	movs	r3, #3
 8011ccc:	e00f      	b.n	8011cee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	69da      	ldr	r2, [r3, #28]
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	4013      	ands	r3, r2
 8011cd8:	68ba      	ldr	r2, [r7, #8]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	bf0c      	ite	eq
 8011cde:	2301      	moveq	r3, #1
 8011ce0:	2300      	movne	r3, #0
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	79fb      	ldrb	r3, [r7, #7]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d0a0      	beq.n	8011c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011cec:	2300      	movs	r3, #0
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3710      	adds	r7, #16
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
	...

08011cf8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b0a3      	sub	sp, #140	; 0x8c
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	60f8      	str	r0, [r7, #12]
 8011d00:	60b9      	str	r1, [r7, #8]
 8011d02:	4613      	mov	r3, r2
 8011d04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	68ba      	ldr	r2, [r7, #8]
 8011d0a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	88fa      	ldrh	r2, [r7, #6]
 8011d10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	88fa      	ldrh	r2, [r7, #6]
 8011d18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	689b      	ldr	r3, [r3, #8]
 8011d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d2a:	d10e      	bne.n	8011d4a <UART_Start_Receive_IT+0x52>
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	691b      	ldr	r3, [r3, #16]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d105      	bne.n	8011d40 <UART_Start_Receive_IT+0x48>
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011d3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d3e:	e02d      	b.n	8011d9c <UART_Start_Receive_IT+0xa4>
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	22ff      	movs	r2, #255	; 0xff
 8011d44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d48:	e028      	b.n	8011d9c <UART_Start_Receive_IT+0xa4>
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	689b      	ldr	r3, [r3, #8]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d10d      	bne.n	8011d6e <UART_Start_Receive_IT+0x76>
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	691b      	ldr	r3, [r3, #16]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d104      	bne.n	8011d64 <UART_Start_Receive_IT+0x6c>
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	22ff      	movs	r2, #255	; 0xff
 8011d5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d62:	e01b      	b.n	8011d9c <UART_Start_Receive_IT+0xa4>
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	227f      	movs	r2, #127	; 0x7f
 8011d68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d6c:	e016      	b.n	8011d9c <UART_Start_Receive_IT+0xa4>
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	689b      	ldr	r3, [r3, #8]
 8011d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d76:	d10d      	bne.n	8011d94 <UART_Start_Receive_IT+0x9c>
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	691b      	ldr	r3, [r3, #16]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d104      	bne.n	8011d8a <UART_Start_Receive_IT+0x92>
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	227f      	movs	r2, #127	; 0x7f
 8011d84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d88:	e008      	b.n	8011d9c <UART_Start_Receive_IT+0xa4>
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	223f      	movs	r2, #63	; 0x3f
 8011d8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d92:	e003      	b.n	8011d9c <UART_Start_Receive_IT+0xa4>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2200      	movs	r2, #0
 8011d98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2222      	movs	r2, #34	; 0x22
 8011da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	3308      	adds	r3, #8
 8011db2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011db6:	e853 3f00 	ldrex	r3, [r3]
 8011dba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011dbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011dbe:	f043 0301 	orr.w	r3, r3, #1
 8011dc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	3308      	adds	r3, #8
 8011dcc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011dd0:	673a      	str	r2, [r7, #112]	; 0x70
 8011dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dd4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011dd6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011dd8:	e841 2300 	strex	r3, r2, [r1]
 8011ddc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011dde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d1e3      	bne.n	8011dac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011dec:	d14f      	bne.n	8011e8e <UART_Start_Receive_IT+0x196>
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011df4:	88fa      	ldrh	r2, [r7, #6]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d349      	bcc.n	8011e8e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	689b      	ldr	r3, [r3, #8]
 8011dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e02:	d107      	bne.n	8011e14 <UART_Start_Receive_IT+0x11c>
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	691b      	ldr	r3, [r3, #16]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d103      	bne.n	8011e14 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	4a47      	ldr	r2, [pc, #284]	; (8011f2c <UART_Start_Receive_IT+0x234>)
 8011e10:	675a      	str	r2, [r3, #116]	; 0x74
 8011e12:	e002      	b.n	8011e1a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	4a46      	ldr	r2, [pc, #280]	; (8011f30 <UART_Start_Receive_IT+0x238>)
 8011e18:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	691b      	ldr	r3, [r3, #16]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d01a      	beq.n	8011e58 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e2a:	e853 3f00 	ldrex	r3, [r3]
 8011e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e46:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011e4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e4c:	e841 2300 	strex	r3, r2, [r1]
 8011e50:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d1e4      	bne.n	8011e22 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	3308      	adds	r3, #8
 8011e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e62:	e853 3f00 	ldrex	r3, [r3]
 8011e66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	3308      	adds	r3, #8
 8011e76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011e78:	64ba      	str	r2, [r7, #72]	; 0x48
 8011e7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e80:	e841 2300 	strex	r3, r2, [r1]
 8011e84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1e5      	bne.n	8011e58 <UART_Start_Receive_IT+0x160>
 8011e8c:	e046      	b.n	8011f1c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	689b      	ldr	r3, [r3, #8]
 8011e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e96:	d107      	bne.n	8011ea8 <UART_Start_Receive_IT+0x1b0>
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	691b      	ldr	r3, [r3, #16]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d103      	bne.n	8011ea8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	4a24      	ldr	r2, [pc, #144]	; (8011f34 <UART_Start_Receive_IT+0x23c>)
 8011ea4:	675a      	str	r2, [r3, #116]	; 0x74
 8011ea6:	e002      	b.n	8011eae <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	4a23      	ldr	r2, [pc, #140]	; (8011f38 <UART_Start_Receive_IT+0x240>)
 8011eac:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	691b      	ldr	r3, [r3, #16]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d019      	beq.n	8011eea <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebe:	e853 3f00 	ldrex	r3, [r3]
 8011ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011eca:	677b      	str	r3, [r7, #116]	; 0x74
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8011ed6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011edc:	e841 2300 	strex	r3, r2, [r1]
 8011ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d1e6      	bne.n	8011eb6 <UART_Start_Receive_IT+0x1be>
 8011ee8:	e018      	b.n	8011f1c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	e853 3f00 	ldrex	r3, [r3]
 8011ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	f043 0320 	orr.w	r3, r3, #32
 8011efe:	67bb      	str	r3, [r7, #120]	; 0x78
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	461a      	mov	r2, r3
 8011f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f08:	623b      	str	r3, [r7, #32]
 8011f0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f0c:	69f9      	ldr	r1, [r7, #28]
 8011f0e:	6a3a      	ldr	r2, [r7, #32]
 8011f10:	e841 2300 	strex	r3, r2, [r1]
 8011f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f16:	69bb      	ldr	r3, [r7, #24]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d1e6      	bne.n	8011eea <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011f1c:	2300      	movs	r3, #0
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	378c      	adds	r7, #140	; 0x8c
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr
 8011f2a:	bf00      	nop
 8011f2c:	0801275d 	.word	0x0801275d
 8011f30:	080123fd 	.word	0x080123fd
 8011f34:	08012245 	.word	0x08012245
 8011f38:	0801208d 	.word	0x0801208d

08011f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b095      	sub	sp, #84	; 0x54
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f4c:	e853 3f00 	ldrex	r3, [r3]
 8011f50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f62:	643b      	str	r3, [r7, #64]	; 0x40
 8011f64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f6a:	e841 2300 	strex	r3, r2, [r1]
 8011f6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d1e6      	bne.n	8011f44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	3308      	adds	r3, #8
 8011f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f7e:	6a3b      	ldr	r3, [r7, #32]
 8011f80:	e853 3f00 	ldrex	r3, [r3]
 8011f84:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f86:	69fa      	ldr	r2, [r7, #28]
 8011f88:	4b1e      	ldr	r3, [pc, #120]	; (8012004 <UART_EndRxTransfer+0xc8>)
 8011f8a:	4013      	ands	r3, r2
 8011f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	3308      	adds	r3, #8
 8011f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011f98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f9e:	e841 2300 	strex	r3, r2, [r1]
 8011fa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d1e5      	bne.n	8011f76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fae:	2b01      	cmp	r3, #1
 8011fb0:	d118      	bne.n	8011fe4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	e853 3f00 	ldrex	r3, [r3]
 8011fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	f023 0310 	bic.w	r3, r3, #16
 8011fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	461a      	mov	r2, r3
 8011fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fd0:	61bb      	str	r3, [r7, #24]
 8011fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fd4:	6979      	ldr	r1, [r7, #20]
 8011fd6:	69ba      	ldr	r2, [r7, #24]
 8011fd8:	e841 2300 	strex	r3, r2, [r1]
 8011fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d1e6      	bne.n	8011fb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2220      	movs	r2, #32
 8011fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011ff8:	bf00      	nop
 8011ffa:	3754      	adds	r7, #84	; 0x54
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr
 8012004:	effffffe 	.word	0xeffffffe

08012008 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012014:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	2200      	movs	r2, #0
 801201a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	2200      	movs	r2, #0
 8012022:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	f7fe ff2e 	bl	8010e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801202c:	bf00      	nop
 801202e:	3710      	adds	r7, #16
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b088      	sub	sp, #32
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	e853 3f00 	ldrex	r3, [r3]
 8012048:	60bb      	str	r3, [r7, #8]
   return(result);
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012050:	61fb      	str	r3, [r7, #28]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	461a      	mov	r2, r3
 8012058:	69fb      	ldr	r3, [r7, #28]
 801205a:	61bb      	str	r3, [r7, #24]
 801205c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801205e:	6979      	ldr	r1, [r7, #20]
 8012060:	69ba      	ldr	r2, [r7, #24]
 8012062:	e841 2300 	strex	r3, r2, [r1]
 8012066:	613b      	str	r3, [r7, #16]
   return(result);
 8012068:	693b      	ldr	r3, [r7, #16]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d1e6      	bne.n	801203c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2220      	movs	r2, #32
 8012072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2200      	movs	r2, #0
 801207a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7fe fef9 	bl	8010e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012082:	bf00      	nop
 8012084:	3720      	adds	r7, #32
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
	...

0801208c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b09c      	sub	sp, #112	; 0x70
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801209a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120a4:	2b22      	cmp	r3, #34	; 0x22
 80120a6:	f040 80be 	bne.w	8012226 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80120b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80120b8:	b2d9      	uxtb	r1, r3
 80120ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80120be:	b2da      	uxtb	r2, r3
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120c4:	400a      	ands	r2, r1
 80120c6:	b2d2      	uxtb	r2, r2
 80120c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120ce:	1c5a      	adds	r2, r3, #1
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120da:	b29b      	uxth	r3, r3
 80120dc:	3b01      	subs	r3, #1
 80120de:	b29a      	uxth	r2, r3
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120ec:	b29b      	uxth	r3, r3
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f040 80a1 	bne.w	8012236 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120fc:	e853 3f00 	ldrex	r3, [r3]
 8012100:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012108:	66bb      	str	r3, [r7, #104]	; 0x68
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	461a      	mov	r2, r3
 8012110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012112:	65bb      	str	r3, [r7, #88]	; 0x58
 8012114:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012116:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012118:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801211a:	e841 2300 	strex	r3, r2, [r1]
 801211e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012122:	2b00      	cmp	r3, #0
 8012124:	d1e6      	bne.n	80120f4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	3308      	adds	r3, #8
 801212c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012130:	e853 3f00 	ldrex	r3, [r3]
 8012134:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012138:	f023 0301 	bic.w	r3, r3, #1
 801213c:	667b      	str	r3, [r7, #100]	; 0x64
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	3308      	adds	r3, #8
 8012144:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012146:	647a      	str	r2, [r7, #68]	; 0x44
 8012148:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801214a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801214c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801214e:	e841 2300 	strex	r3, r2, [r1]
 8012152:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1e5      	bne.n	8012126 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2220      	movs	r2, #32
 801215e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2200      	movs	r2, #0
 8012166:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2200      	movs	r2, #0
 801216c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	4a33      	ldr	r2, [pc, #204]	; (8012240 <UART_RxISR_8BIT+0x1b4>)
 8012174:	4293      	cmp	r3, r2
 8012176:	d01f      	beq.n	80121b8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012182:	2b00      	cmp	r3, #0
 8012184:	d018      	beq.n	80121b8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218e:	e853 3f00 	ldrex	r3, [r3]
 8012192:	623b      	str	r3, [r7, #32]
   return(result);
 8012194:	6a3b      	ldr	r3, [r7, #32]
 8012196:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801219a:	663b      	str	r3, [r7, #96]	; 0x60
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	461a      	mov	r2, r3
 80121a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121a4:	633b      	str	r3, [r7, #48]	; 0x30
 80121a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121ac:	e841 2300 	strex	r3, r2, [r1]
 80121b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80121b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d1e6      	bne.n	8012186 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d12e      	bne.n	801221e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2200      	movs	r2, #0
 80121c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	e853 3f00 	ldrex	r3, [r3]
 80121d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	f023 0310 	bic.w	r3, r3, #16
 80121da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	461a      	mov	r2, r3
 80121e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121e4:	61fb      	str	r3, [r7, #28]
 80121e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121e8:	69b9      	ldr	r1, [r7, #24]
 80121ea:	69fa      	ldr	r2, [r7, #28]
 80121ec:	e841 2300 	strex	r3, r2, [r1]
 80121f0:	617b      	str	r3, [r7, #20]
   return(result);
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1e6      	bne.n	80121c6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	69db      	ldr	r3, [r3, #28]
 80121fe:	f003 0310 	and.w	r3, r3, #16
 8012202:	2b10      	cmp	r3, #16
 8012204:	d103      	bne.n	801220e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	2210      	movs	r2, #16
 801220c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012214:	4619      	mov	r1, r3
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7fe fe40 	bl	8010e9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801221c:	e00b      	b.n	8012236 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f7ef f99c 	bl	800155c <HAL_UART_RxCpltCallback>
}
 8012224:	e007      	b.n	8012236 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	699a      	ldr	r2, [r3, #24]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f042 0208 	orr.w	r2, r2, #8
 8012234:	619a      	str	r2, [r3, #24]
}
 8012236:	bf00      	nop
 8012238:	3770      	adds	r7, #112	; 0x70
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	58000c00 	.word	0x58000c00

08012244 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b09c      	sub	sp, #112	; 0x70
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012252:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801225c:	2b22      	cmp	r3, #34	; 0x22
 801225e:	f040 80be 	bne.w	80123de <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012268:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012270:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012272:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012276:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801227a:	4013      	ands	r3, r2
 801227c:	b29a      	uxth	r2, r3
 801227e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012280:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012286:	1c9a      	adds	r2, r3, #2
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012292:	b29b      	uxth	r3, r3
 8012294:	3b01      	subs	r3, #1
 8012296:	b29a      	uxth	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	f040 80a1 	bne.w	80123ee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122b4:	e853 3f00 	ldrex	r3, [r3]
 80122b8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80122ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80122c0:	667b      	str	r3, [r7, #100]	; 0x64
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	461a      	mov	r2, r3
 80122c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122ca:	657b      	str	r3, [r7, #84]	; 0x54
 80122cc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80122d2:	e841 2300 	strex	r3, r2, [r1]
 80122d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80122d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d1e6      	bne.n	80122ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	3308      	adds	r3, #8
 80122e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e8:	e853 3f00 	ldrex	r3, [r3]
 80122ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80122ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f0:	f023 0301 	bic.w	r3, r3, #1
 80122f4:	663b      	str	r3, [r7, #96]	; 0x60
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	3308      	adds	r3, #8
 80122fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80122fe:	643a      	str	r2, [r7, #64]	; 0x40
 8012300:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012302:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012306:	e841 2300 	strex	r3, r2, [r1]
 801230a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230e:	2b00      	cmp	r3, #0
 8012310:	d1e5      	bne.n	80122de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2220      	movs	r2, #32
 8012316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2200      	movs	r2, #0
 801231e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2200      	movs	r2, #0
 8012324:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	4a33      	ldr	r2, [pc, #204]	; (80123f8 <UART_RxISR_16BIT+0x1b4>)
 801232c:	4293      	cmp	r3, r2
 801232e:	d01f      	beq.n	8012370 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801233a:	2b00      	cmp	r3, #0
 801233c:	d018      	beq.n	8012370 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012344:	6a3b      	ldr	r3, [r7, #32]
 8012346:	e853 3f00 	ldrex	r3, [r3]
 801234a:	61fb      	str	r3, [r7, #28]
   return(result);
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	461a      	mov	r2, r3
 801235a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801235c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801235e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012364:	e841 2300 	strex	r3, r2, [r1]
 8012368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236c:	2b00      	cmp	r3, #0
 801236e:	d1e6      	bne.n	801233e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012374:	2b01      	cmp	r3, #1
 8012376:	d12e      	bne.n	80123d6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2200      	movs	r2, #0
 801237c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	e853 3f00 	ldrex	r3, [r3]
 801238a:	60bb      	str	r3, [r7, #8]
   return(result);
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	f023 0310 	bic.w	r3, r3, #16
 8012392:	65bb      	str	r3, [r7, #88]	; 0x58
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	461a      	mov	r2, r3
 801239a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801239c:	61bb      	str	r3, [r7, #24]
 801239e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123a0:	6979      	ldr	r1, [r7, #20]
 80123a2:	69ba      	ldr	r2, [r7, #24]
 80123a4:	e841 2300 	strex	r3, r2, [r1]
 80123a8:	613b      	str	r3, [r7, #16]
   return(result);
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d1e6      	bne.n	801237e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	69db      	ldr	r3, [r3, #28]
 80123b6:	f003 0310 	and.w	r3, r3, #16
 80123ba:	2b10      	cmp	r3, #16
 80123bc:	d103      	bne.n	80123c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	2210      	movs	r2, #16
 80123c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123cc:	4619      	mov	r1, r3
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7fe fd64 	bl	8010e9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80123d4:	e00b      	b.n	80123ee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f7ef f8c0 	bl	800155c <HAL_UART_RxCpltCallback>
}
 80123dc:	e007      	b.n	80123ee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	699a      	ldr	r2, [r3, #24]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	f042 0208 	orr.w	r2, r2, #8
 80123ec:	619a      	str	r2, [r3, #24]
}
 80123ee:	bf00      	nop
 80123f0:	3770      	adds	r7, #112	; 0x70
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	58000c00 	.word	0x58000c00

080123fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b0ac      	sub	sp, #176	; 0xb0
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801240a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	69db      	ldr	r3, [r3, #28]
 8012414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	689b      	ldr	r3, [r3, #8]
 8012428:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012432:	2b22      	cmp	r3, #34	; 0x22
 8012434:	f040 8180 	bne.w	8012738 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801243e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012442:	e123      	b.n	801268c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801244e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012452:	b2d9      	uxtb	r1, r3
 8012454:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012458:	b2da      	uxtb	r2, r3
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801245e:	400a      	ands	r2, r1
 8012460:	b2d2      	uxtb	r2, r2
 8012462:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012468:	1c5a      	adds	r2, r3, #1
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012474:	b29b      	uxth	r3, r3
 8012476:	3b01      	subs	r3, #1
 8012478:	b29a      	uxth	r2, r3
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	69db      	ldr	r3, [r3, #28]
 8012486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801248a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801248e:	f003 0307 	and.w	r3, r3, #7
 8012492:	2b00      	cmp	r3, #0
 8012494:	d053      	beq.n	801253e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801249a:	f003 0301 	and.w	r3, r3, #1
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d011      	beq.n	80124c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80124a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80124a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00b      	beq.n	80124c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	2201      	movs	r2, #1
 80124b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124bc:	f043 0201 	orr.w	r2, r3, #1
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124ca:	f003 0302 	and.w	r3, r3, #2
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d011      	beq.n	80124f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80124d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124d6:	f003 0301 	and.w	r3, r3, #1
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d00b      	beq.n	80124f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	2202      	movs	r2, #2
 80124e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124ec:	f043 0204 	orr.w	r2, r3, #4
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124fa:	f003 0304 	and.w	r3, r3, #4
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d011      	beq.n	8012526 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012506:	f003 0301 	and.w	r3, r3, #1
 801250a:	2b00      	cmp	r3, #0
 801250c:	d00b      	beq.n	8012526 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	2204      	movs	r2, #4
 8012514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801251c:	f043 0202 	orr.w	r2, r3, #2
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801252c:	2b00      	cmp	r3, #0
 801252e:	d006      	beq.n	801253e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f7fe fca9 	bl	8010e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2200      	movs	r2, #0
 801253a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012544:	b29b      	uxth	r3, r3
 8012546:	2b00      	cmp	r3, #0
 8012548:	f040 80a0 	bne.w	801268c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012554:	e853 3f00 	ldrex	r3, [r3]
 8012558:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801255a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801255c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	461a      	mov	r2, r3
 801256a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801256e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012570:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012572:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012574:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012576:	e841 2300 	strex	r3, r2, [r1]
 801257a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801257c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801257e:	2b00      	cmp	r3, #0
 8012580:	d1e4      	bne.n	801254c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	3308      	adds	r3, #8
 8012588:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801258a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801258c:	e853 3f00 	ldrex	r3, [r3]
 8012590:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012592:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012594:	4b6e      	ldr	r3, [pc, #440]	; (8012750 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012596:	4013      	ands	r3, r2
 8012598:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	3308      	adds	r3, #8
 80125a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80125a6:	66ba      	str	r2, [r7, #104]	; 0x68
 80125a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80125ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80125ae:	e841 2300 	strex	r3, r2, [r1]
 80125b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80125b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d1e3      	bne.n	8012582 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2220      	movs	r2, #32
 80125be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2200      	movs	r2, #0
 80125c6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2200      	movs	r2, #0
 80125cc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	4a60      	ldr	r2, [pc, #384]	; (8012754 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80125d4:	4293      	cmp	r3, r2
 80125d6:	d021      	beq.n	801261c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d01a      	beq.n	801261c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125ee:	e853 3f00 	ldrex	r3, [r3]
 80125f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80125f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80125fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	461a      	mov	r2, r3
 8012604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012608:	657b      	str	r3, [r7, #84]	; 0x54
 801260a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801260c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801260e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012610:	e841 2300 	strex	r3, r2, [r1]
 8012614:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012618:	2b00      	cmp	r3, #0
 801261a:	d1e4      	bne.n	80125e6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012620:	2b01      	cmp	r3, #1
 8012622:	d130      	bne.n	8012686 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2200      	movs	r2, #0
 8012628:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012632:	e853 3f00 	ldrex	r3, [r3]
 8012636:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801263a:	f023 0310 	bic.w	r3, r3, #16
 801263e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	461a      	mov	r2, r3
 8012648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801264c:	643b      	str	r3, [r7, #64]	; 0x40
 801264e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012654:	e841 2300 	strex	r3, r2, [r1]
 8012658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801265c:	2b00      	cmp	r3, #0
 801265e:	d1e4      	bne.n	801262a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	69db      	ldr	r3, [r3, #28]
 8012666:	f003 0310 	and.w	r3, r3, #16
 801266a:	2b10      	cmp	r3, #16
 801266c:	d103      	bne.n	8012676 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2210      	movs	r2, #16
 8012674:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801267c:	4619      	mov	r1, r3
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	f7fe fc0c 	bl	8010e9c <HAL_UARTEx_RxEventCallback>
 8012684:	e002      	b.n	801268c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7ee ff68 	bl	800155c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801268c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012690:	2b00      	cmp	r3, #0
 8012692:	d006      	beq.n	80126a2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012698:	f003 0320 	and.w	r3, r3, #32
 801269c:	2b00      	cmp	r3, #0
 801269e:	f47f aed1 	bne.w	8012444 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80126ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d049      	beq.n	8012748 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126ba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80126be:	429a      	cmp	r2, r3
 80126c0:	d242      	bcs.n	8012748 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	3308      	adds	r3, #8
 80126c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126ca:	6a3b      	ldr	r3, [r7, #32]
 80126cc:	e853 3f00 	ldrex	r3, [r3]
 80126d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80126d2:	69fb      	ldr	r3, [r7, #28]
 80126d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80126d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	3308      	adds	r3, #8
 80126e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80126e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80126e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126ee:	e841 2300 	strex	r3, r2, [r1]
 80126f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80126f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d1e3      	bne.n	80126c2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	4a16      	ldr	r2, [pc, #88]	; (8012758 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80126fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	e853 3f00 	ldrex	r3, [r3]
 801270c:	60bb      	str	r3, [r7, #8]
   return(result);
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	f043 0320 	orr.w	r3, r3, #32
 8012714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	461a      	mov	r2, r3
 801271e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012722:	61bb      	str	r3, [r7, #24]
 8012724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012726:	6979      	ldr	r1, [r7, #20]
 8012728:	69ba      	ldr	r2, [r7, #24]
 801272a:	e841 2300 	strex	r3, r2, [r1]
 801272e:	613b      	str	r3, [r7, #16]
   return(result);
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d1e4      	bne.n	8012700 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012736:	e007      	b.n	8012748 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	699a      	ldr	r2, [r3, #24]
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f042 0208 	orr.w	r2, r2, #8
 8012746:	619a      	str	r2, [r3, #24]
}
 8012748:	bf00      	nop
 801274a:	37b0      	adds	r7, #176	; 0xb0
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	effffffe 	.word	0xeffffffe
 8012754:	58000c00 	.word	0x58000c00
 8012758:	0801208d 	.word	0x0801208d

0801275c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b0ae      	sub	sp, #184	; 0xb8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801276a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	69db      	ldr	r3, [r3, #28]
 8012774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	689b      	ldr	r3, [r3, #8]
 8012788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012792:	2b22      	cmp	r3, #34	; 0x22
 8012794:	f040 8184 	bne.w	8012aa0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801279e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80127a2:	e127      	b.n	80129f4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80127b6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80127ba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80127be:	4013      	ands	r3, r2
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80127c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127cc:	1c9a      	adds	r2, r3, #2
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127d8:	b29b      	uxth	r3, r3
 80127da:	3b01      	subs	r3, #1
 80127dc:	b29a      	uxth	r2, r3
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	69db      	ldr	r3, [r3, #28]
 80127ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80127ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80127f2:	f003 0307 	and.w	r3, r3, #7
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d053      	beq.n	80128a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80127fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80127fe:	f003 0301 	and.w	r3, r3, #1
 8012802:	2b00      	cmp	r3, #0
 8012804:	d011      	beq.n	801282a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801280e:	2b00      	cmp	r3, #0
 8012810:	d00b      	beq.n	801282a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2201      	movs	r2, #1
 8012818:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012820:	f043 0201 	orr.w	r2, r3, #1
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801282a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801282e:	f003 0302 	and.w	r3, r3, #2
 8012832:	2b00      	cmp	r3, #0
 8012834:	d011      	beq.n	801285a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801283a:	f003 0301 	and.w	r3, r3, #1
 801283e:	2b00      	cmp	r3, #0
 8012840:	d00b      	beq.n	801285a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	2202      	movs	r2, #2
 8012848:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012850:	f043 0204 	orr.w	r2, r3, #4
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801285a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801285e:	f003 0304 	and.w	r3, r3, #4
 8012862:	2b00      	cmp	r3, #0
 8012864:	d011      	beq.n	801288a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801286a:	f003 0301 	and.w	r3, r3, #1
 801286e:	2b00      	cmp	r3, #0
 8012870:	d00b      	beq.n	801288a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	2204      	movs	r2, #4
 8012878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012880:	f043 0202 	orr.w	r2, r3, #2
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012890:	2b00      	cmp	r3, #0
 8012892:	d006      	beq.n	80128a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7fe faf7 	bl	8010e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2200      	movs	r2, #0
 801289e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128a8:	b29b      	uxth	r3, r3
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	f040 80a2 	bne.w	80129f4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80128b8:	e853 3f00 	ldrex	r3, [r3]
 80128bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80128be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	461a      	mov	r2, r3
 80128ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80128d6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80128da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80128de:	e841 2300 	strex	r3, r2, [r1]
 80128e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80128e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d1e2      	bne.n	80128b0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	3308      	adds	r3, #8
 80128f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80128f4:	e853 3f00 	ldrex	r3, [r3]
 80128f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80128fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80128fc:	4b6e      	ldr	r3, [pc, #440]	; (8012ab8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80128fe:	4013      	ands	r3, r2
 8012900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	3308      	adds	r3, #8
 801290a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801290e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012910:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012912:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012914:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012916:	e841 2300 	strex	r3, r2, [r1]
 801291a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801291c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801291e:	2b00      	cmp	r3, #0
 8012920:	d1e3      	bne.n	80128ea <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2220      	movs	r2, #32
 8012926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2200      	movs	r2, #0
 801292e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	4a60      	ldr	r2, [pc, #384]	; (8012abc <UART_RxISR_16BIT_FIFOEN+0x360>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d021      	beq.n	8012984 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801294a:	2b00      	cmp	r3, #0
 801294c:	d01a      	beq.n	8012984 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012956:	e853 3f00 	ldrex	r3, [r3]
 801295a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801295c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801295e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	461a      	mov	r2, r3
 801296c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012970:	65bb      	str	r3, [r7, #88]	; 0x58
 8012972:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012974:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012976:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012978:	e841 2300 	strex	r3, r2, [r1]
 801297c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801297e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012980:	2b00      	cmp	r3, #0
 8012982:	d1e4      	bne.n	801294e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012988:	2b01      	cmp	r3, #1
 801298a:	d130      	bne.n	80129ee <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2200      	movs	r2, #0
 8012990:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299a:	e853 3f00 	ldrex	r3, [r3]
 801299e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80129a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129a2:	f023 0310 	bic.w	r3, r3, #16
 80129a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	461a      	mov	r2, r3
 80129b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80129b4:	647b      	str	r3, [r7, #68]	; 0x44
 80129b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129bc:	e841 2300 	strex	r3, r2, [r1]
 80129c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d1e4      	bne.n	8012992 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	69db      	ldr	r3, [r3, #28]
 80129ce:	f003 0310 	and.w	r3, r3, #16
 80129d2:	2b10      	cmp	r3, #16
 80129d4:	d103      	bne.n	80129de <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2210      	movs	r2, #16
 80129dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129e4:	4619      	mov	r1, r3
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f7fe fa58 	bl	8010e9c <HAL_UARTEx_RxEventCallback>
 80129ec:	e002      	b.n	80129f4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f7ee fdb4 	bl	800155c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80129f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d006      	beq.n	8012a0a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80129fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a00:	f003 0320 	and.w	r3, r3, #32
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	f47f aecd 	bne.w	80127a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a10:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012a14:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d049      	beq.n	8012ab0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a22:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d242      	bcs.n	8012ab0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	3308      	adds	r3, #8
 8012a30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a34:	e853 3f00 	ldrex	r3, [r3]
 8012a38:	623b      	str	r3, [r7, #32]
   return(result);
 8012a3a:	6a3b      	ldr	r3, [r7, #32]
 8012a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	3308      	adds	r3, #8
 8012a4a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012a4e:	633a      	str	r2, [r7, #48]	; 0x30
 8012a50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a56:	e841 2300 	strex	r3, r2, [r1]
 8012a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d1e3      	bne.n	8012a2a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	4a16      	ldr	r2, [pc, #88]	; (8012ac0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012a66:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	e853 3f00 	ldrex	r3, [r3]
 8012a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	f043 0320 	orr.w	r3, r3, #32
 8012a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	461a      	mov	r2, r3
 8012a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a8a:	61fb      	str	r3, [r7, #28]
 8012a8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a8e:	69b9      	ldr	r1, [r7, #24]
 8012a90:	69fa      	ldr	r2, [r7, #28]
 8012a92:	e841 2300 	strex	r3, r2, [r1]
 8012a96:	617b      	str	r3, [r7, #20]
   return(result);
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d1e4      	bne.n	8012a68 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012a9e:	e007      	b.n	8012ab0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	699a      	ldr	r2, [r3, #24]
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	f042 0208 	orr.w	r2, r2, #8
 8012aae:	619a      	str	r2, [r3, #24]
}
 8012ab0:	bf00      	nop
 8012ab2:	37b8      	adds	r7, #184	; 0xb8
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	effffffe 	.word	0xeffffffe
 8012abc:	58000c00 	.word	0x58000c00
 8012ac0:	08012245 	.word	0x08012245

08012ac4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b083      	sub	sp, #12
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012acc:	bf00      	nop
 8012ace:	370c      	adds	r7, #12
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr

08012ad8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012ae0:	bf00      	nop
 8012ae2:	370c      	adds	r7, #12
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr

08012aec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012af4:	bf00      	nop
 8012af6:	370c      	adds	r7, #12
 8012af8:	46bd      	mov	sp, r7
 8012afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afe:	4770      	bx	lr

08012b00 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012b00:	b480      	push	{r7}
 8012b02:	b089      	sub	sp, #36	; 0x24
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	d101      	bne.n	8012b16 <HAL_UARTEx_EnableStopMode+0x16>
 8012b12:	2302      	movs	r3, #2
 8012b14:	e021      	b.n	8012b5a <HAL_UARTEx_EnableStopMode+0x5a>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2201      	movs	r2, #1
 8012b1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	e853 3f00 	ldrex	r3, [r3]
 8012b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	f043 0302 	orr.w	r3, r3, #2
 8012b32:	61fb      	str	r3, [r7, #28]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	461a      	mov	r2, r3
 8012b3a:	69fb      	ldr	r3, [r7, #28]
 8012b3c:	61bb      	str	r3, [r7, #24]
 8012b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b40:	6979      	ldr	r1, [r7, #20]
 8012b42:	69ba      	ldr	r2, [r7, #24]
 8012b44:	e841 2300 	strex	r3, r2, [r1]
 8012b48:	613b      	str	r3, [r7, #16]
   return(result);
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d1e6      	bne.n	8012b1e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b58:	2300      	movs	r3, #0
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3724      	adds	r7, #36	; 0x24
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr

08012b66 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b084      	sub	sp, #16
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b74:	2b01      	cmp	r3, #1
 8012b76:	d101      	bne.n	8012b7c <HAL_UARTEx_EnableFifoMode+0x16>
 8012b78:	2302      	movs	r3, #2
 8012b7a:	e02b      	b.n	8012bd4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2201      	movs	r2, #1
 8012b80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2224      	movs	r2, #36	; 0x24
 8012b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	681a      	ldr	r2, [r3, #0]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f022 0201 	bic.w	r2, r2, #1
 8012ba2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012baa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012bb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	68fa      	ldr	r2, [r7, #12]
 8012bba:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f000 f8c3 	bl	8012d48 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2220      	movs	r2, #32
 8012bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bd2:	2300      	movs	r3, #0
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3710      	adds	r7, #16
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}

08012bdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012bdc:	b480      	push	{r7}
 8012bde:	b085      	sub	sp, #20
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d101      	bne.n	8012bf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8012bee:	2302      	movs	r3, #2
 8012bf0:	e027      	b.n	8012c42 <HAL_UARTEx_DisableFifoMode+0x66>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2224      	movs	r2, #36	; 0x24
 8012bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f022 0201 	bic.w	r2, r2, #1
 8012c18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2200      	movs	r2, #0
 8012c26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2220      	movs	r2, #32
 8012c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c40:	2300      	movs	r3, #0
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3714      	adds	r7, #20
 8012c46:	46bd      	mov	sp, r7
 8012c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4c:	4770      	bx	lr

08012c4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c4e:	b580      	push	{r7, lr}
 8012c50:	b084      	sub	sp, #16
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
 8012c56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c5e:	2b01      	cmp	r3, #1
 8012c60:	d101      	bne.n	8012c66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012c62:	2302      	movs	r3, #2
 8012c64:	e02d      	b.n	8012cc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2201      	movs	r2, #1
 8012c6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2224      	movs	r2, #36	; 0x24
 8012c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	681a      	ldr	r2, [r3, #0]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f022 0201 	bic.w	r2, r2, #1
 8012c8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	689b      	ldr	r3, [r3, #8]
 8012c94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	683a      	ldr	r2, [r7, #0]
 8012c9e:	430a      	orrs	r2, r1
 8012ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f000 f850 	bl	8012d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	68fa      	ldr	r2, [r7, #12]
 8012cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2220      	movs	r2, #32
 8012cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012cc0:	2300      	movs	r3, #0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3710      	adds	r7, #16
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}

08012cca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012cca:	b580      	push	{r7, lr}
 8012ccc:	b084      	sub	sp, #16
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	6078      	str	r0, [r7, #4]
 8012cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cda:	2b01      	cmp	r3, #1
 8012cdc:	d101      	bne.n	8012ce2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012cde:	2302      	movs	r3, #2
 8012ce0:	e02d      	b.n	8012d3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2201      	movs	r2, #1
 8012ce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2224      	movs	r2, #36	; 0x24
 8012cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	681a      	ldr	r2, [r3, #0]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	f022 0201 	bic.w	r2, r2, #1
 8012d08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	689b      	ldr	r3, [r3, #8]
 8012d10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	683a      	ldr	r2, [r7, #0]
 8012d1a:	430a      	orrs	r2, r1
 8012d1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f000 f812 	bl	8012d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	68fa      	ldr	r2, [r7, #12]
 8012d2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2220      	movs	r2, #32
 8012d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2200      	movs	r2, #0
 8012d38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d3c:	2300      	movs	r3, #0
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3710      	adds	r7, #16
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
	...

08012d48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b085      	sub	sp, #20
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d108      	bne.n	8012d6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2201      	movs	r2, #1
 8012d64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012d68:	e031      	b.n	8012dce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012d6a:	2310      	movs	r3, #16
 8012d6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012d6e:	2310      	movs	r3, #16
 8012d70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	689b      	ldr	r3, [r3, #8]
 8012d78:	0e5b      	lsrs	r3, r3, #25
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	f003 0307 	and.w	r3, r3, #7
 8012d80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	689b      	ldr	r3, [r3, #8]
 8012d88:	0f5b      	lsrs	r3, r3, #29
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	f003 0307 	and.w	r3, r3, #7
 8012d90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d92:	7bbb      	ldrb	r3, [r7, #14]
 8012d94:	7b3a      	ldrb	r2, [r7, #12]
 8012d96:	4911      	ldr	r1, [pc, #68]	; (8012ddc <UARTEx_SetNbDataToProcess+0x94>)
 8012d98:	5c8a      	ldrb	r2, [r1, r2]
 8012d9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012d9e:	7b3a      	ldrb	r2, [r7, #12]
 8012da0:	490f      	ldr	r1, [pc, #60]	; (8012de0 <UARTEx_SetNbDataToProcess+0x98>)
 8012da2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012da8:	b29a      	uxth	r2, r3
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012db0:	7bfb      	ldrb	r3, [r7, #15]
 8012db2:	7b7a      	ldrb	r2, [r7, #13]
 8012db4:	4909      	ldr	r1, [pc, #36]	; (8012ddc <UARTEx_SetNbDataToProcess+0x94>)
 8012db6:	5c8a      	ldrb	r2, [r1, r2]
 8012db8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012dbc:	7b7a      	ldrb	r2, [r7, #13]
 8012dbe:	4908      	ldr	r1, [pc, #32]	; (8012de0 <UARTEx_SetNbDataToProcess+0x98>)
 8012dc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012dc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dc6:	b29a      	uxth	r2, r3
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012dce:	bf00      	nop
 8012dd0:	3714      	adds	r7, #20
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd8:	4770      	bx	lr
 8012dda:	bf00      	nop
 8012ddc:	080170e4 	.word	0x080170e4
 8012de0:	080170ec 	.word	0x080170ec

08012de4 <__NVIC_SetPriority>:
{
 8012de4:	b480      	push	{r7}
 8012de6:	b083      	sub	sp, #12
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	4603      	mov	r3, r0
 8012dec:	6039      	str	r1, [r7, #0]
 8012dee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	db0a      	blt.n	8012e0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	b2da      	uxtb	r2, r3
 8012dfc:	490c      	ldr	r1, [pc, #48]	; (8012e30 <__NVIC_SetPriority+0x4c>)
 8012dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e02:	0112      	lsls	r2, r2, #4
 8012e04:	b2d2      	uxtb	r2, r2
 8012e06:	440b      	add	r3, r1
 8012e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012e0c:	e00a      	b.n	8012e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	b2da      	uxtb	r2, r3
 8012e12:	4908      	ldr	r1, [pc, #32]	; (8012e34 <__NVIC_SetPriority+0x50>)
 8012e14:	88fb      	ldrh	r3, [r7, #6]
 8012e16:	f003 030f 	and.w	r3, r3, #15
 8012e1a:	3b04      	subs	r3, #4
 8012e1c:	0112      	lsls	r2, r2, #4
 8012e1e:	b2d2      	uxtb	r2, r2
 8012e20:	440b      	add	r3, r1
 8012e22:	761a      	strb	r2, [r3, #24]
}
 8012e24:	bf00      	nop
 8012e26:	370c      	adds	r7, #12
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2e:	4770      	bx	lr
 8012e30:	e000e100 	.word	0xe000e100
 8012e34:	e000ed00 	.word	0xe000ed00

08012e38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012e3c:	4b05      	ldr	r3, [pc, #20]	; (8012e54 <SysTick_Handler+0x1c>)
 8012e3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012e40:	f002 f958 	bl	80150f4 <xTaskGetSchedulerState>
 8012e44:	4603      	mov	r3, r0
 8012e46:	2b01      	cmp	r3, #1
 8012e48:	d001      	beq.n	8012e4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012e4a:	f002 ff75 	bl	8015d38 <xPortSysTickHandler>
  }
}
 8012e4e:	bf00      	nop
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	e000e010 	.word	0xe000e010

08012e58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012e5c:	2100      	movs	r1, #0
 8012e5e:	f06f 0004 	mvn.w	r0, #4
 8012e62:	f7ff ffbf 	bl	8012de4 <__NVIC_SetPriority>
#endif
}
 8012e66:	bf00      	nop
 8012e68:	bd80      	pop	{r7, pc}
	...

08012e6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e72:	f3ef 8305 	mrs	r3, IPSR
 8012e76:	603b      	str	r3, [r7, #0]
  return(result);
 8012e78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d003      	beq.n	8012e86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012e7e:	f06f 0305 	mvn.w	r3, #5
 8012e82:	607b      	str	r3, [r7, #4]
 8012e84:	e00c      	b.n	8012ea0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012e86:	4b0a      	ldr	r3, [pc, #40]	; (8012eb0 <osKernelInitialize+0x44>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d105      	bne.n	8012e9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012e8e:	4b08      	ldr	r3, [pc, #32]	; (8012eb0 <osKernelInitialize+0x44>)
 8012e90:	2201      	movs	r2, #1
 8012e92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012e94:	2300      	movs	r3, #0
 8012e96:	607b      	str	r3, [r7, #4]
 8012e98:	e002      	b.n	8012ea0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012ea0:	687b      	ldr	r3, [r7, #4]
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	370c      	adds	r7, #12
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr
 8012eae:	bf00      	nop
 8012eb0:	24000890 	.word	0x24000890

08012eb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012eba:	f3ef 8305 	mrs	r3, IPSR
 8012ebe:	603b      	str	r3, [r7, #0]
  return(result);
 8012ec0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d003      	beq.n	8012ece <osKernelStart+0x1a>
    stat = osErrorISR;
 8012ec6:	f06f 0305 	mvn.w	r3, #5
 8012eca:	607b      	str	r3, [r7, #4]
 8012ecc:	e010      	b.n	8012ef0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012ece:	4b0b      	ldr	r3, [pc, #44]	; (8012efc <osKernelStart+0x48>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2b01      	cmp	r3, #1
 8012ed4:	d109      	bne.n	8012eea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012ed6:	f7ff ffbf 	bl	8012e58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012eda:	4b08      	ldr	r3, [pc, #32]	; (8012efc <osKernelStart+0x48>)
 8012edc:	2202      	movs	r2, #2
 8012ede:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012ee0:	f001 fc0c 	bl	80146fc <vTaskStartScheduler>
      stat = osOK;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	607b      	str	r3, [r7, #4]
 8012ee8:	e002      	b.n	8012ef0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012eee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012ef0:	687b      	ldr	r3, [r7, #4]
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3708      	adds	r7, #8
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	24000890 	.word	0x24000890

08012f00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b08e      	sub	sp, #56	; 0x38
 8012f04:	af04      	add	r7, sp, #16
 8012f06:	60f8      	str	r0, [r7, #12]
 8012f08:	60b9      	str	r1, [r7, #8]
 8012f0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f10:	f3ef 8305 	mrs	r3, IPSR
 8012f14:	617b      	str	r3, [r7, #20]
  return(result);
 8012f16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d17e      	bne.n	801301a <osThreadNew+0x11a>
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d07b      	beq.n	801301a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012f22:	2380      	movs	r3, #128	; 0x80
 8012f24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012f26:	2318      	movs	r3, #24
 8012f28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d045      	beq.n	8012fc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d002      	beq.n	8012f48 <osThreadNew+0x48>
        name = attr->name;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	699b      	ldr	r3, [r3, #24]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d002      	beq.n	8012f56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	699b      	ldr	r3, [r3, #24]
 8012f54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d008      	beq.n	8012f6e <osThreadNew+0x6e>
 8012f5c:	69fb      	ldr	r3, [r7, #28]
 8012f5e:	2b38      	cmp	r3, #56	; 0x38
 8012f60:	d805      	bhi.n	8012f6e <osThreadNew+0x6e>
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	685b      	ldr	r3, [r3, #4]
 8012f66:	f003 0301 	and.w	r3, r3, #1
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d001      	beq.n	8012f72 <osThreadNew+0x72>
        return (NULL);
 8012f6e:	2300      	movs	r3, #0
 8012f70:	e054      	b.n	801301c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	695b      	ldr	r3, [r3, #20]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d003      	beq.n	8012f82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	695b      	ldr	r3, [r3, #20]
 8012f7e:	089b      	lsrs	r3, r3, #2
 8012f80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	689b      	ldr	r3, [r3, #8]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d00e      	beq.n	8012fa8 <osThreadNew+0xa8>
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	68db      	ldr	r3, [r3, #12]
 8012f8e:	2b5b      	cmp	r3, #91	; 0x5b
 8012f90:	d90a      	bls.n	8012fa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d006      	beq.n	8012fa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	695b      	ldr	r3, [r3, #20]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d002      	beq.n	8012fa8 <osThreadNew+0xa8>
        mem = 1;
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	61bb      	str	r3, [r7, #24]
 8012fa6:	e010      	b.n	8012fca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	689b      	ldr	r3, [r3, #8]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10c      	bne.n	8012fca <osThreadNew+0xca>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d108      	bne.n	8012fca <osThreadNew+0xca>
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	691b      	ldr	r3, [r3, #16]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d104      	bne.n	8012fca <osThreadNew+0xca>
          mem = 0;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	61bb      	str	r3, [r7, #24]
 8012fc4:	e001      	b.n	8012fca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	2b01      	cmp	r3, #1
 8012fce:	d110      	bne.n	8012ff2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012fd4:	687a      	ldr	r2, [r7, #4]
 8012fd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012fd8:	9202      	str	r2, [sp, #8]
 8012fda:	9301      	str	r3, [sp, #4]
 8012fdc:	69fb      	ldr	r3, [r7, #28]
 8012fde:	9300      	str	r3, [sp, #0]
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	6a3a      	ldr	r2, [r7, #32]
 8012fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	f001 f9b2 	bl	8014350 <xTaskCreateStatic>
 8012fec:	4603      	mov	r3, r0
 8012fee:	613b      	str	r3, [r7, #16]
 8012ff0:	e013      	b.n	801301a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012ff2:	69bb      	ldr	r3, [r7, #24]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d110      	bne.n	801301a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012ff8:	6a3b      	ldr	r3, [r7, #32]
 8012ffa:	b29a      	uxth	r2, r3
 8012ffc:	f107 0310 	add.w	r3, r7, #16
 8013000:	9301      	str	r3, [sp, #4]
 8013002:	69fb      	ldr	r3, [r7, #28]
 8013004:	9300      	str	r3, [sp, #0]
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801300a:	68f8      	ldr	r0, [r7, #12]
 801300c:	f001 f9fd 	bl	801440a <xTaskCreate>
 8013010:	4603      	mov	r3, r0
 8013012:	2b01      	cmp	r3, #1
 8013014:	d001      	beq.n	801301a <osThreadNew+0x11a>
            hTask = NULL;
 8013016:	2300      	movs	r3, #0
 8013018:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801301a:	693b      	ldr	r3, [r7, #16]
}
 801301c:	4618      	mov	r0, r3
 801301e:	3728      	adds	r7, #40	; 0x28
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013024:	b480      	push	{r7}
 8013026:	b083      	sub	sp, #12
 8013028:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801302a:	f3ef 8305 	mrs	r3, IPSR
 801302e:	603b      	str	r3, [r7, #0]
  return(result);
 8013030:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013032:	2b00      	cmp	r3, #0
 8013034:	d003      	beq.n	801303e <osThreadYield+0x1a>
    stat = osErrorISR;
 8013036:	f06f 0305 	mvn.w	r3, #5
 801303a:	607b      	str	r3, [r7, #4]
 801303c:	e009      	b.n	8013052 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801303e:	2300      	movs	r3, #0
 8013040:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8013042:	4b07      	ldr	r3, [pc, #28]	; (8013060 <osThreadYield+0x3c>)
 8013044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013048:	601a      	str	r2, [r3, #0]
 801304a:	f3bf 8f4f 	dsb	sy
 801304e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8013052:	687b      	ldr	r3, [r7, #4]
}
 8013054:	4618      	mov	r0, r3
 8013056:	370c      	adds	r7, #12
 8013058:	46bd      	mov	sp, r7
 801305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305e:	4770      	bx	lr
 8013060:	e000ed04 	.word	0xe000ed04

08013064 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013064:	b580      	push	{r7, lr}
 8013066:	b084      	sub	sp, #16
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801306c:	f3ef 8305 	mrs	r3, IPSR
 8013070:	60bb      	str	r3, [r7, #8]
  return(result);
 8013072:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013074:	2b00      	cmp	r3, #0
 8013076:	d003      	beq.n	8013080 <osDelay+0x1c>
    stat = osErrorISR;
 8013078:	f06f 0305 	mvn.w	r3, #5
 801307c:	60fb      	str	r3, [r7, #12]
 801307e:	e007      	b.n	8013090 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013080:	2300      	movs	r3, #0
 8013082:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d002      	beq.n	8013090 <osDelay+0x2c>
      vTaskDelay(ticks);
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f001 fb02 	bl	8014694 <vTaskDelay>
    }
  }

  return (stat);
 8013090:	68fb      	ldr	r3, [r7, #12]
}
 8013092:	4618      	mov	r0, r3
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801309a:	b580      	push	{r7, lr}
 801309c:	b086      	sub	sp, #24
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80130a2:	2300      	movs	r3, #0
 80130a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130a6:	f3ef 8305 	mrs	r3, IPSR
 80130aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80130ac:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d12d      	bne.n	801310e <osEventFlagsNew+0x74>
    mem = -1;
 80130b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130b6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d015      	beq.n	80130ea <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	689b      	ldr	r3, [r3, #8]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d006      	beq.n	80130d4 <osEventFlagsNew+0x3a>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	2b1f      	cmp	r3, #31
 80130cc:	d902      	bls.n	80130d4 <osEventFlagsNew+0x3a>
        mem = 1;
 80130ce:	2301      	movs	r3, #1
 80130d0:	613b      	str	r3, [r7, #16]
 80130d2:	e00c      	b.n	80130ee <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	689b      	ldr	r3, [r3, #8]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d108      	bne.n	80130ee <osEventFlagsNew+0x54>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d104      	bne.n	80130ee <osEventFlagsNew+0x54>
          mem = 0;
 80130e4:	2300      	movs	r3, #0
 80130e6:	613b      	str	r3, [r7, #16]
 80130e8:	e001      	b.n	80130ee <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80130ea:	2300      	movs	r3, #0
 80130ec:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	d106      	bne.n	8013102 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	689b      	ldr	r3, [r3, #8]
 80130f8:	4618      	mov	r0, r3
 80130fa:	f000 f91d 	bl	8013338 <xEventGroupCreateStatic>
 80130fe:	6178      	str	r0, [r7, #20]
 8013100:	e005      	b.n	801310e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d102      	bne.n	801310e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013108:	f000 f94d 	bl	80133a6 <xEventGroupCreate>
 801310c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801310e:	697b      	ldr	r3, [r7, #20]
}
 8013110:	4618      	mov	r0, r3
 8013112:	3718      	adds	r7, #24
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}

08013118 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013118:	b580      	push	{r7, lr}
 801311a:	b086      	sub	sp, #24
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d004      	beq.n	8013136 <osEventFlagsSet+0x1e>
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013132:	2b00      	cmp	r3, #0
 8013134:	d003      	beq.n	801313e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013136:	f06f 0303 	mvn.w	r3, #3
 801313a:	617b      	str	r3, [r7, #20]
 801313c:	e028      	b.n	8013190 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801313e:	f3ef 8305 	mrs	r3, IPSR
 8013142:	60fb      	str	r3, [r7, #12]
  return(result);
 8013144:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013146:	2b00      	cmp	r3, #0
 8013148:	d01d      	beq.n	8013186 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801314a:	2300      	movs	r3, #0
 801314c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801314e:	f107 0308 	add.w	r3, r7, #8
 8013152:	461a      	mov	r2, r3
 8013154:	6839      	ldr	r1, [r7, #0]
 8013156:	6938      	ldr	r0, [r7, #16]
 8013158:	f000 fb46 	bl	80137e8 <xEventGroupSetBitsFromISR>
 801315c:	4603      	mov	r3, r0
 801315e:	2b00      	cmp	r3, #0
 8013160:	d103      	bne.n	801316a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8013162:	f06f 0302 	mvn.w	r3, #2
 8013166:	617b      	str	r3, [r7, #20]
 8013168:	e012      	b.n	8013190 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d00d      	beq.n	8013190 <osEventFlagsSet+0x78>
 8013174:	4b09      	ldr	r3, [pc, #36]	; (801319c <osEventFlagsSet+0x84>)
 8013176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801317a:	601a      	str	r2, [r3, #0]
 801317c:	f3bf 8f4f 	dsb	sy
 8013180:	f3bf 8f6f 	isb	sy
 8013184:	e004      	b.n	8013190 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013186:	6839      	ldr	r1, [r7, #0]
 8013188:	6938      	ldr	r0, [r7, #16]
 801318a:	f000 fa65 	bl	8013658 <xEventGroupSetBits>
 801318e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013190:	697b      	ldr	r3, [r7, #20]
}
 8013192:	4618      	mov	r0, r3
 8013194:	3718      	adds	r7, #24
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
 801319a:	bf00      	nop
 801319c:	e000ed04 	.word	0xe000ed04

080131a0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b086      	sub	sp, #24
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
 80131a8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d004      	beq.n	80131be <osEventFlagsClear+0x1e>
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d003      	beq.n	80131c6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80131be:	f06f 0303 	mvn.w	r3, #3
 80131c2:	617b      	str	r3, [r7, #20]
 80131c4:	e019      	b.n	80131fa <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131c6:	f3ef 8305 	mrs	r3, IPSR
 80131ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80131cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d00e      	beq.n	80131f0 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80131d2:	6938      	ldr	r0, [r7, #16]
 80131d4:	f000 fa1c 	bl	8013610 <xEventGroupGetBitsFromISR>
 80131d8:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80131da:	6839      	ldr	r1, [r7, #0]
 80131dc:	6938      	ldr	r0, [r7, #16]
 80131de:	f000 fa03 	bl	80135e8 <xEventGroupClearBitsFromISR>
 80131e2:	4603      	mov	r3, r0
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d108      	bne.n	80131fa <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80131e8:	f06f 0302 	mvn.w	r3, #2
 80131ec:	617b      	str	r3, [r7, #20]
 80131ee:	e004      	b.n	80131fa <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80131f0:	6839      	ldr	r1, [r7, #0]
 80131f2:	6938      	ldr	r0, [r7, #16]
 80131f4:	f000 f9c0 	bl	8013578 <xEventGroupClearBits>
 80131f8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80131fa:	697b      	ldr	r3, [r7, #20]
}
 80131fc:	4618      	mov	r0, r3
 80131fe:	3718      	adds	r7, #24
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}

08013204 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8013204:	b580      	push	{r7, lr}
 8013206:	b08c      	sub	sp, #48	; 0x30
 8013208:	af02      	add	r7, sp, #8
 801320a:	60f8      	str	r0, [r7, #12]
 801320c:	60b9      	str	r1, [r7, #8]
 801320e:	607a      	str	r2, [r7, #4]
 8013210:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013216:	69bb      	ldr	r3, [r7, #24]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d004      	beq.n	8013226 <osEventFlagsWait+0x22>
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013222:	2b00      	cmp	r3, #0
 8013224:	d003      	beq.n	801322e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8013226:	f06f 0303 	mvn.w	r3, #3
 801322a:	61fb      	str	r3, [r7, #28]
 801322c:	e04b      	b.n	80132c6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801322e:	f3ef 8305 	mrs	r3, IPSR
 8013232:	617b      	str	r3, [r7, #20]
  return(result);
 8013234:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013236:	2b00      	cmp	r3, #0
 8013238:	d003      	beq.n	8013242 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801323a:	f06f 0305 	mvn.w	r3, #5
 801323e:	61fb      	str	r3, [r7, #28]
 8013240:	e041      	b.n	80132c6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f003 0301 	and.w	r3, r3, #1
 8013248:	2b00      	cmp	r3, #0
 801324a:	d002      	beq.n	8013252 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801324c:	2301      	movs	r3, #1
 801324e:	627b      	str	r3, [r7, #36]	; 0x24
 8013250:	e001      	b.n	8013256 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013252:	2300      	movs	r3, #0
 8013254:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f003 0302 	and.w	r3, r3, #2
 801325c:	2b00      	cmp	r3, #0
 801325e:	d002      	beq.n	8013266 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013260:	2300      	movs	r3, #0
 8013262:	623b      	str	r3, [r7, #32]
 8013264:	e001      	b.n	801326a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013266:	2301      	movs	r3, #1
 8013268:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	9300      	str	r3, [sp, #0]
 801326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013270:	6a3a      	ldr	r2, [r7, #32]
 8013272:	68b9      	ldr	r1, [r7, #8]
 8013274:	69b8      	ldr	r0, [r7, #24]
 8013276:	f000 f8b1 	bl	80133dc <xEventGroupWaitBits>
 801327a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f003 0301 	and.w	r3, r3, #1
 8013282:	2b00      	cmp	r3, #0
 8013284:	d010      	beq.n	80132a8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013286:	68ba      	ldr	r2, [r7, #8]
 8013288:	69fb      	ldr	r3, [r7, #28]
 801328a:	4013      	ands	r3, r2
 801328c:	68ba      	ldr	r2, [r7, #8]
 801328e:	429a      	cmp	r2, r3
 8013290:	d019      	beq.n	80132c6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d003      	beq.n	80132a0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013298:	f06f 0301 	mvn.w	r3, #1
 801329c:	61fb      	str	r3, [r7, #28]
 801329e:	e012      	b.n	80132c6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80132a0:	f06f 0302 	mvn.w	r3, #2
 80132a4:	61fb      	str	r3, [r7, #28]
 80132a6:	e00e      	b.n	80132c6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80132a8:	68ba      	ldr	r2, [r7, #8]
 80132aa:	69fb      	ldr	r3, [r7, #28]
 80132ac:	4013      	ands	r3, r2
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d109      	bne.n	80132c6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d003      	beq.n	80132c0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80132b8:	f06f 0301 	mvn.w	r3, #1
 80132bc:	61fb      	str	r3, [r7, #28]
 80132be:	e002      	b.n	80132c6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80132c0:	f06f 0302 	mvn.w	r3, #2
 80132c4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80132c6:	69fb      	ldr	r3, [r7, #28]
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3728      	adds	r7, #40	; 0x28
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80132d0:	b480      	push	{r7}
 80132d2:	b085      	sub	sp, #20
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	4a07      	ldr	r2, [pc, #28]	; (80132fc <vApplicationGetIdleTaskMemory+0x2c>)
 80132e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	4a06      	ldr	r2, [pc, #24]	; (8013300 <vApplicationGetIdleTaskMemory+0x30>)
 80132e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2280      	movs	r2, #128	; 0x80
 80132ec:	601a      	str	r2, [r3, #0]
}
 80132ee:	bf00      	nop
 80132f0:	3714      	adds	r7, #20
 80132f2:	46bd      	mov	sp, r7
 80132f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f8:	4770      	bx	lr
 80132fa:	bf00      	nop
 80132fc:	24000894 	.word	0x24000894
 8013300:	240008f0 	.word	0x240008f0

08013304 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013304:	b480      	push	{r7}
 8013306:	b085      	sub	sp, #20
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	4a07      	ldr	r2, [pc, #28]	; (8013330 <vApplicationGetTimerTaskMemory+0x2c>)
 8013314:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	4a06      	ldr	r2, [pc, #24]	; (8013334 <vApplicationGetTimerTaskMemory+0x30>)
 801331a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013322:	601a      	str	r2, [r3, #0]
}
 8013324:	bf00      	nop
 8013326:	3714      	adds	r7, #20
 8013328:	46bd      	mov	sp, r7
 801332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332e:	4770      	bx	lr
 8013330:	24000af0 	.word	0x24000af0
 8013334:	24000b4c 	.word	0x24000b4c

08013338 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013338:	b580      	push	{r7, lr}
 801333a:	b086      	sub	sp, #24
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d10a      	bne.n	801335c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334a:	f383 8811 	msr	BASEPRI, r3
 801334e:	f3bf 8f6f 	isb	sy
 8013352:	f3bf 8f4f 	dsb	sy
 8013356:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013358:	bf00      	nop
 801335a:	e7fe      	b.n	801335a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801335c:	2320      	movs	r3, #32
 801335e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	2b20      	cmp	r3, #32
 8013364:	d00a      	beq.n	801337c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801336a:	f383 8811 	msr	BASEPRI, r3
 801336e:	f3bf 8f6f 	isb	sy
 8013372:	f3bf 8f4f 	dsb	sy
 8013376:	60fb      	str	r3, [r7, #12]
}
 8013378:	bf00      	nop
 801337a:	e7fe      	b.n	801337a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d00a      	beq.n	801339c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	2200      	movs	r2, #0
 801338a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	3304      	adds	r3, #4
 8013390:	4618      	mov	r0, r3
 8013392:	f000 fa3d 	bl	8013810 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	2201      	movs	r2, #1
 801339a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801339c:	697b      	ldr	r3, [r7, #20]
	}
 801339e:	4618      	mov	r0, r3
 80133a0:	3718      	adds	r7, #24
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}

080133a6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80133a6:	b580      	push	{r7, lr}
 80133a8:	b082      	sub	sp, #8
 80133aa:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80133ac:	2020      	movs	r0, #32
 80133ae:	f002 fd53 	bl	8015e58 <pvPortMalloc>
 80133b2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d00a      	beq.n	80133d0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2200      	movs	r2, #0
 80133be:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	3304      	adds	r3, #4
 80133c4:	4618      	mov	r0, r3
 80133c6:	f000 fa23 	bl	8013810 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2200      	movs	r2, #0
 80133ce:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80133d0:	687b      	ldr	r3, [r7, #4]
	}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3708      	adds	r7, #8
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
	...

080133dc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b090      	sub	sp, #64	; 0x40
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	60f8      	str	r0, [r7, #12]
 80133e4:	60b9      	str	r1, [r7, #8]
 80133e6:	607a      	str	r2, [r7, #4]
 80133e8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80133f2:	2300      	movs	r3, #0
 80133f4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d10a      	bne.n	8013412 <xEventGroupWaitBits+0x36>
	__asm volatile
 80133fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013400:	f383 8811 	msr	BASEPRI, r3
 8013404:	f3bf 8f6f 	isb	sy
 8013408:	f3bf 8f4f 	dsb	sy
 801340c:	623b      	str	r3, [r7, #32]
}
 801340e:	bf00      	nop
 8013410:	e7fe      	b.n	8013410 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013418:	2b00      	cmp	r3, #0
 801341a:	d00a      	beq.n	8013432 <xEventGroupWaitBits+0x56>
	__asm volatile
 801341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013420:	f383 8811 	msr	BASEPRI, r3
 8013424:	f3bf 8f6f 	isb	sy
 8013428:	f3bf 8f4f 	dsb	sy
 801342c:	61fb      	str	r3, [r7, #28]
}
 801342e:	bf00      	nop
 8013430:	e7fe      	b.n	8013430 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d10a      	bne.n	801344e <xEventGroupWaitBits+0x72>
	__asm volatile
 8013438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801343c:	f383 8811 	msr	BASEPRI, r3
 8013440:	f3bf 8f6f 	isb	sy
 8013444:	f3bf 8f4f 	dsb	sy
 8013448:	61bb      	str	r3, [r7, #24]
}
 801344a:	bf00      	nop
 801344c:	e7fe      	b.n	801344c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801344e:	f001 fe51 	bl	80150f4 <xTaskGetSchedulerState>
 8013452:	4603      	mov	r3, r0
 8013454:	2b00      	cmp	r3, #0
 8013456:	d102      	bne.n	801345e <xEventGroupWaitBits+0x82>
 8013458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801345a:	2b00      	cmp	r3, #0
 801345c:	d101      	bne.n	8013462 <xEventGroupWaitBits+0x86>
 801345e:	2301      	movs	r3, #1
 8013460:	e000      	b.n	8013464 <xEventGroupWaitBits+0x88>
 8013462:	2300      	movs	r3, #0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d10a      	bne.n	801347e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801346c:	f383 8811 	msr	BASEPRI, r3
 8013470:	f3bf 8f6f 	isb	sy
 8013474:	f3bf 8f4f 	dsb	sy
 8013478:	617b      	str	r3, [r7, #20]
}
 801347a:	bf00      	nop
 801347c:	e7fe      	b.n	801347c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801347e:	f001 f9a3 	bl	80147c8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013488:	683a      	ldr	r2, [r7, #0]
 801348a:	68b9      	ldr	r1, [r7, #8]
 801348c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801348e:	f000 f988 	bl	80137a2 <prvTestWaitCondition>
 8013492:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013496:	2b00      	cmp	r3, #0
 8013498:	d00e      	beq.n	80134b8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801349e:	2300      	movs	r3, #0
 80134a0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d028      	beq.n	80134fa <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80134a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	43db      	mvns	r3, r3
 80134b0:	401a      	ands	r2, r3
 80134b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134b4:	601a      	str	r2, [r3, #0]
 80134b6:	e020      	b.n	80134fa <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80134b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d104      	bne.n	80134c8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80134be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80134c2:	2301      	movs	r3, #1
 80134c4:	633b      	str	r3, [r7, #48]	; 0x30
 80134c6:	e018      	b.n	80134fa <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d003      	beq.n	80134d6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80134ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80134d4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d003      	beq.n	80134e4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80134dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80134e2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80134e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134e6:	1d18      	adds	r0, r3, #4
 80134e8:	68ba      	ldr	r2, [r7, #8]
 80134ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ec:	4313      	orrs	r3, r2
 80134ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134f0:	4619      	mov	r1, r3
 80134f2:	f001 fb77 	bl	8014be4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80134f6:	2300      	movs	r3, #0
 80134f8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80134fa:	f001 f973 	bl	80147e4 <xTaskResumeAll>
 80134fe:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013502:	2b00      	cmp	r3, #0
 8013504:	d031      	beq.n	801356a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013508:	2b00      	cmp	r3, #0
 801350a:	d107      	bne.n	801351c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801350c:	4b19      	ldr	r3, [pc, #100]	; (8013574 <xEventGroupWaitBits+0x198>)
 801350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013512:	601a      	str	r2, [r3, #0]
 8013514:	f3bf 8f4f 	dsb	sy
 8013518:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801351c:	f001 fe76 	bl	801520c <uxTaskResetEventItemValue>
 8013520:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013528:	2b00      	cmp	r3, #0
 801352a:	d11a      	bne.n	8013562 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801352c:	f002 fb72 	bl	8015c14 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013536:	683a      	ldr	r2, [r7, #0]
 8013538:	68b9      	ldr	r1, [r7, #8]
 801353a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801353c:	f000 f931 	bl	80137a2 <prvTestWaitCondition>
 8013540:	4603      	mov	r3, r0
 8013542:	2b00      	cmp	r3, #0
 8013544:	d009      	beq.n	801355a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d006      	beq.n	801355a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	43db      	mvns	r3, r3
 8013554:	401a      	ands	r2, r3
 8013556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013558:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801355a:	2301      	movs	r3, #1
 801355c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801355e:	f002 fb89 	bl	8015c74 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013564:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013568:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801356a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801356c:	4618      	mov	r0, r3
 801356e:	3740      	adds	r7, #64	; 0x40
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}
 8013574:	e000ed04 	.word	0xe000ed04

08013578 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b086      	sub	sp, #24
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d10a      	bne.n	80135a2 <xEventGroupClearBits+0x2a>
	__asm volatile
 801358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013590:	f383 8811 	msr	BASEPRI, r3
 8013594:	f3bf 8f6f 	isb	sy
 8013598:	f3bf 8f4f 	dsb	sy
 801359c:	60fb      	str	r3, [r7, #12]
}
 801359e:	bf00      	nop
 80135a0:	e7fe      	b.n	80135a0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d00a      	beq.n	80135c2 <xEventGroupClearBits+0x4a>
	__asm volatile
 80135ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135b0:	f383 8811 	msr	BASEPRI, r3
 80135b4:	f3bf 8f6f 	isb	sy
 80135b8:	f3bf 8f4f 	dsb	sy
 80135bc:	60bb      	str	r3, [r7, #8]
}
 80135be:	bf00      	nop
 80135c0:	e7fe      	b.n	80135c0 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80135c2:	f002 fb27 	bl	8015c14 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	43db      	mvns	r3, r3
 80135d4:	401a      	ands	r2, r3
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80135da:	f002 fb4b 	bl	8015c74 <vPortExitCritical>

	return uxReturn;
 80135de:	693b      	ldr	r3, [r7, #16]
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3718      	adds	r7, #24
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b084      	sub	sp, #16
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80135f2:	2300      	movs	r3, #0
 80135f4:	683a      	ldr	r2, [r7, #0]
 80135f6:	6879      	ldr	r1, [r7, #4]
 80135f8:	4804      	ldr	r0, [pc, #16]	; (801360c <xEventGroupClearBitsFromISR+0x24>)
 80135fa:	f002 f9c1 	bl	8015980 <xTimerPendFunctionCallFromISR>
 80135fe:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013600:	68fb      	ldr	r3, [r7, #12]
	}
 8013602:	4618      	mov	r0, r3
 8013604:	3710      	adds	r7, #16
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	08013789 	.word	0x08013789

08013610 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013610:	b480      	push	{r7}
 8013612:	b089      	sub	sp, #36	; 0x24
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801361c:	f3ef 8211 	mrs	r2, BASEPRI
 8013620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013624:	f383 8811 	msr	BASEPRI, r3
 8013628:	f3bf 8f6f 	isb	sy
 801362c:	f3bf 8f4f 	dsb	sy
 8013630:	60fa      	str	r2, [r7, #12]
 8013632:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013634:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013636:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013638:	69fb      	ldr	r3, [r7, #28]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	617b      	str	r3, [r7, #20]
 801363e:	69bb      	ldr	r3, [r7, #24]
 8013640:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013648:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801364a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 801364c:	4618      	mov	r0, r3
 801364e:	3724      	adds	r7, #36	; 0x24
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr

08013658 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b08e      	sub	sp, #56	; 0x38
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013662:	2300      	movs	r3, #0
 8013664:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801366a:	2300      	movs	r3, #0
 801366c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d10a      	bne.n	801368a <xEventGroupSetBits+0x32>
	__asm volatile
 8013674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013678:	f383 8811 	msr	BASEPRI, r3
 801367c:	f3bf 8f6f 	isb	sy
 8013680:	f3bf 8f4f 	dsb	sy
 8013684:	613b      	str	r3, [r7, #16]
}
 8013686:	bf00      	nop
 8013688:	e7fe      	b.n	8013688 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013690:	2b00      	cmp	r3, #0
 8013692:	d00a      	beq.n	80136aa <xEventGroupSetBits+0x52>
	__asm volatile
 8013694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013698:	f383 8811 	msr	BASEPRI, r3
 801369c:	f3bf 8f6f 	isb	sy
 80136a0:	f3bf 8f4f 	dsb	sy
 80136a4:	60fb      	str	r3, [r7, #12]
}
 80136a6:	bf00      	nop
 80136a8:	e7fe      	b.n	80136a8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80136aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ac:	3304      	adds	r3, #4
 80136ae:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80136b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b2:	3308      	adds	r3, #8
 80136b4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80136b6:	f001 f887 	bl	80147c8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80136ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136bc:	68db      	ldr	r3, [r3, #12]
 80136be:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80136c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	431a      	orrs	r2, r3
 80136c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ca:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80136cc:	e03c      	b.n	8013748 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80136ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80136d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80136da:	2300      	movs	r3, #0
 80136dc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80136de:	69bb      	ldr	r3, [r7, #24]
 80136e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80136e4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80136e6:	69bb      	ldr	r3, [r7, #24]
 80136e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80136ec:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d108      	bne.n	801370a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80136f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fa:	681a      	ldr	r2, [r3, #0]
 80136fc:	69bb      	ldr	r3, [r7, #24]
 80136fe:	4013      	ands	r3, r2
 8013700:	2b00      	cmp	r3, #0
 8013702:	d00b      	beq.n	801371c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013704:	2301      	movs	r3, #1
 8013706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013708:	e008      	b.n	801371c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370c:	681a      	ldr	r2, [r3, #0]
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	4013      	ands	r3, r2
 8013712:	69ba      	ldr	r2, [r7, #24]
 8013714:	429a      	cmp	r2, r3
 8013716:	d101      	bne.n	801371c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013718:	2301      	movs	r3, #1
 801371a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371e:	2b00      	cmp	r3, #0
 8013720:	d010      	beq.n	8013744 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013728:	2b00      	cmp	r3, #0
 801372a:	d003      	beq.n	8013734 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801372c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	4313      	orrs	r3, r2
 8013732:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801373c:	4619      	mov	r1, r3
 801373e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013740:	f001 fb1c 	bl	8014d7c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801374a:	6a3b      	ldr	r3, [r7, #32]
 801374c:	429a      	cmp	r2, r3
 801374e:	d1be      	bne.n	80136ce <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013752:	681a      	ldr	r2, [r3, #0]
 8013754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013756:	43db      	mvns	r3, r3
 8013758:	401a      	ands	r2, r3
 801375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801375e:	f001 f841 	bl	80147e4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013764:	681b      	ldr	r3, [r3, #0]
}
 8013766:	4618      	mov	r0, r3
 8013768:	3738      	adds	r7, #56	; 0x38
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}

0801376e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801376e:	b580      	push	{r7, lr}
 8013770:	b082      	sub	sp, #8
 8013772:	af00      	add	r7, sp, #0
 8013774:	6078      	str	r0, [r7, #4]
 8013776:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013778:	6839      	ldr	r1, [r7, #0]
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f7ff ff6c 	bl	8013658 <xEventGroupSetBits>
}
 8013780:	bf00      	nop
 8013782:	3708      	adds	r7, #8
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013792:	6839      	ldr	r1, [r7, #0]
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7ff feef 	bl	8013578 <xEventGroupClearBits>
}
 801379a:	bf00      	nop
 801379c:	3708      	adds	r7, #8
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}

080137a2 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80137a2:	b480      	push	{r7}
 80137a4:	b087      	sub	sp, #28
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	60f8      	str	r0, [r7, #12]
 80137aa:	60b9      	str	r1, [r7, #8]
 80137ac:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80137ae:	2300      	movs	r3, #0
 80137b0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d107      	bne.n	80137c8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80137b8:	68fa      	ldr	r2, [r7, #12]
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	4013      	ands	r3, r2
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d00a      	beq.n	80137d8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80137c2:	2301      	movs	r3, #1
 80137c4:	617b      	str	r3, [r7, #20]
 80137c6:	e007      	b.n	80137d8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80137c8:	68fa      	ldr	r2, [r7, #12]
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	4013      	ands	r3, r2
 80137ce:	68ba      	ldr	r2, [r7, #8]
 80137d0:	429a      	cmp	r2, r3
 80137d2:	d101      	bne.n	80137d8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80137d4:	2301      	movs	r3, #1
 80137d6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80137d8:	697b      	ldr	r3, [r7, #20]
}
 80137da:	4618      	mov	r0, r3
 80137dc:	371c      	adds	r7, #28
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr
	...

080137e8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b086      	sub	sp, #24
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	68ba      	ldr	r2, [r7, #8]
 80137f8:	68f9      	ldr	r1, [r7, #12]
 80137fa:	4804      	ldr	r0, [pc, #16]	; (801380c <xEventGroupSetBitsFromISR+0x24>)
 80137fc:	f002 f8c0 	bl	8015980 <xTimerPendFunctionCallFromISR>
 8013800:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013802:	697b      	ldr	r3, [r7, #20]
	}
 8013804:	4618      	mov	r0, r3
 8013806:	3718      	adds	r7, #24
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	0801376f 	.word	0x0801376f

08013810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013810:	b480      	push	{r7}
 8013812:	b083      	sub	sp, #12
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f103 0208 	add.w	r2, r3, #8
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f103 0208 	add.w	r2, r3, #8
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f103 0208 	add.w	r2, r3, #8
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2200      	movs	r2, #0
 8013842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013844:	bf00      	nop
 8013846:	370c      	adds	r7, #12
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013850:	b480      	push	{r7}
 8013852:	b083      	sub	sp, #12
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2200      	movs	r2, #0
 801385c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801385e:	bf00      	nop
 8013860:	370c      	adds	r7, #12
 8013862:	46bd      	mov	sp, r7
 8013864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013868:	4770      	bx	lr

0801386a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801386a:	b480      	push	{r7}
 801386c:	b085      	sub	sp, #20
 801386e:	af00      	add	r7, sp, #0
 8013870:	6078      	str	r0, [r7, #4]
 8013872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	68fa      	ldr	r2, [r7, #12]
 801387e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	689a      	ldr	r2, [r3, #8]
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	689b      	ldr	r3, [r3, #8]
 801388c:	683a      	ldr	r2, [r7, #0]
 801388e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	683a      	ldr	r2, [r7, #0]
 8013894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	1c5a      	adds	r2, r3, #1
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	601a      	str	r2, [r3, #0]
}
 80138a6:	bf00      	nop
 80138a8:	3714      	adds	r7, #20
 80138aa:	46bd      	mov	sp, r7
 80138ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b0:	4770      	bx	lr

080138b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80138b2:	b480      	push	{r7}
 80138b4:	b085      	sub	sp, #20
 80138b6:	af00      	add	r7, sp, #0
 80138b8:	6078      	str	r0, [r7, #4]
 80138ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138c8:	d103      	bne.n	80138d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	691b      	ldr	r3, [r3, #16]
 80138ce:	60fb      	str	r3, [r7, #12]
 80138d0:	e00c      	b.n	80138ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	3308      	adds	r3, #8
 80138d6:	60fb      	str	r3, [r7, #12]
 80138d8:	e002      	b.n	80138e0 <vListInsert+0x2e>
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	60fb      	str	r3, [r7, #12]
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	68ba      	ldr	r2, [r7, #8]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d2f6      	bcs.n	80138da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	685a      	ldr	r2, [r3, #4]
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	683a      	ldr	r2, [r7, #0]
 80138fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	683a      	ldr	r2, [r7, #0]
 8013906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	687a      	ldr	r2, [r7, #4]
 801390c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	1c5a      	adds	r2, r3, #1
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	601a      	str	r2, [r3, #0]
}
 8013918:	bf00      	nop
 801391a:	3714      	adds	r7, #20
 801391c:	46bd      	mov	sp, r7
 801391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013922:	4770      	bx	lr

08013924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013924:	b480      	push	{r7}
 8013926:	b085      	sub	sp, #20
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	691b      	ldr	r3, [r3, #16]
 8013930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	687a      	ldr	r2, [r7, #4]
 8013938:	6892      	ldr	r2, [r2, #8]
 801393a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	689b      	ldr	r3, [r3, #8]
 8013940:	687a      	ldr	r2, [r7, #4]
 8013942:	6852      	ldr	r2, [r2, #4]
 8013944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	429a      	cmp	r2, r3
 801394e:	d103      	bne.n	8013958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	689a      	ldr	r2, [r3, #8]
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2200      	movs	r2, #0
 801395c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	1e5a      	subs	r2, r3, #1
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	681b      	ldr	r3, [r3, #0]
}
 801396c:	4618      	mov	r0, r3
 801396e:	3714      	adds	r7, #20
 8013970:	46bd      	mov	sp, r7
 8013972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013976:	4770      	bx	lr

08013978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b084      	sub	sp, #16
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d10a      	bne.n	80139a2 <xQueueGenericReset+0x2a>
	__asm volatile
 801398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013990:	f383 8811 	msr	BASEPRI, r3
 8013994:	f3bf 8f6f 	isb	sy
 8013998:	f3bf 8f4f 	dsb	sy
 801399c:	60bb      	str	r3, [r7, #8]
}
 801399e:	bf00      	nop
 80139a0:	e7fe      	b.n	80139a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80139a2:	f002 f937 	bl	8015c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	681a      	ldr	r2, [r3, #0]
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139ae:	68f9      	ldr	r1, [r7, #12]
 80139b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80139b2:	fb01 f303 	mul.w	r3, r1, r3
 80139b6:	441a      	add	r2, r3
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2200      	movs	r2, #0
 80139c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	681a      	ldr	r2, [r3, #0]
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139d2:	3b01      	subs	r3, #1
 80139d4:	68f9      	ldr	r1, [r7, #12]
 80139d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80139d8:	fb01 f303 	mul.w	r3, r1, r3
 80139dc:	441a      	add	r2, r3
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	22ff      	movs	r2, #255	; 0xff
 80139e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	22ff      	movs	r2, #255	; 0xff
 80139ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d114      	bne.n	8013a22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	691b      	ldr	r3, [r3, #16]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d01a      	beq.n	8013a36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	3310      	adds	r3, #16
 8013a04:	4618      	mov	r0, r3
 8013a06:	f001 f955 	bl	8014cb4 <xTaskRemoveFromEventList>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d012      	beq.n	8013a36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013a10:	4b0c      	ldr	r3, [pc, #48]	; (8013a44 <xQueueGenericReset+0xcc>)
 8013a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a16:	601a      	str	r2, [r3, #0]
 8013a18:	f3bf 8f4f 	dsb	sy
 8013a1c:	f3bf 8f6f 	isb	sy
 8013a20:	e009      	b.n	8013a36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	3310      	adds	r3, #16
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ff fef2 	bl	8013810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	3324      	adds	r3, #36	; 0x24
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7ff feed 	bl	8013810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013a36:	f002 f91d 	bl	8015c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013a3a:	2301      	movs	r3, #1
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3710      	adds	r7, #16
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}
 8013a44:	e000ed04 	.word	0xe000ed04

08013a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b08e      	sub	sp, #56	; 0x38
 8013a4c:	af02      	add	r7, sp, #8
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	607a      	str	r2, [r7, #4]
 8013a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d10a      	bne.n	8013a72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a60:	f383 8811 	msr	BASEPRI, r3
 8013a64:	f3bf 8f6f 	isb	sy
 8013a68:	f3bf 8f4f 	dsb	sy
 8013a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013a6e:	bf00      	nop
 8013a70:	e7fe      	b.n	8013a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d10a      	bne.n	8013a8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a7c:	f383 8811 	msr	BASEPRI, r3
 8013a80:	f3bf 8f6f 	isb	sy
 8013a84:	f3bf 8f4f 	dsb	sy
 8013a88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013a8a:	bf00      	nop
 8013a8c:	e7fe      	b.n	8013a8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d002      	beq.n	8013a9a <xQueueGenericCreateStatic+0x52>
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d001      	beq.n	8013a9e <xQueueGenericCreateStatic+0x56>
 8013a9a:	2301      	movs	r3, #1
 8013a9c:	e000      	b.n	8013aa0 <xQueueGenericCreateStatic+0x58>
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d10a      	bne.n	8013aba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa8:	f383 8811 	msr	BASEPRI, r3
 8013aac:	f3bf 8f6f 	isb	sy
 8013ab0:	f3bf 8f4f 	dsb	sy
 8013ab4:	623b      	str	r3, [r7, #32]
}
 8013ab6:	bf00      	nop
 8013ab8:	e7fe      	b.n	8013ab8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d102      	bne.n	8013ac6 <xQueueGenericCreateStatic+0x7e>
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d101      	bne.n	8013aca <xQueueGenericCreateStatic+0x82>
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	e000      	b.n	8013acc <xQueueGenericCreateStatic+0x84>
 8013aca:	2300      	movs	r3, #0
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d10a      	bne.n	8013ae6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad4:	f383 8811 	msr	BASEPRI, r3
 8013ad8:	f3bf 8f6f 	isb	sy
 8013adc:	f3bf 8f4f 	dsb	sy
 8013ae0:	61fb      	str	r3, [r7, #28]
}
 8013ae2:	bf00      	nop
 8013ae4:	e7fe      	b.n	8013ae4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013ae6:	2350      	movs	r3, #80	; 0x50
 8013ae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	2b50      	cmp	r3, #80	; 0x50
 8013aee:	d00a      	beq.n	8013b06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af4:	f383 8811 	msr	BASEPRI, r3
 8013af8:	f3bf 8f6f 	isb	sy
 8013afc:	f3bf 8f4f 	dsb	sy
 8013b00:	61bb      	str	r3, [r7, #24]
}
 8013b02:	bf00      	nop
 8013b04:	e7fe      	b.n	8013b04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013b06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00d      	beq.n	8013b2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b14:	2201      	movs	r2, #1
 8013b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013b1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b20:	9300      	str	r3, [sp, #0]
 8013b22:	4613      	mov	r3, r2
 8013b24:	687a      	ldr	r2, [r7, #4]
 8013b26:	68b9      	ldr	r1, [r7, #8]
 8013b28:	68f8      	ldr	r0, [r7, #12]
 8013b2a:	f000 f805 	bl	8013b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013b30:	4618      	mov	r0, r3
 8013b32:	3730      	adds	r7, #48	; 0x30
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}

08013b38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b084      	sub	sp, #16
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	60f8      	str	r0, [r7, #12]
 8013b40:	60b9      	str	r1, [r7, #8]
 8013b42:	607a      	str	r2, [r7, #4]
 8013b44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d103      	bne.n	8013b54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013b4c:	69bb      	ldr	r3, [r7, #24]
 8013b4e:	69ba      	ldr	r2, [r7, #24]
 8013b50:	601a      	str	r2, [r3, #0]
 8013b52:	e002      	b.n	8013b5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013b54:	69bb      	ldr	r3, [r7, #24]
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013b5a:	69bb      	ldr	r3, [r7, #24]
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013b60:	69bb      	ldr	r3, [r7, #24]
 8013b62:	68ba      	ldr	r2, [r7, #8]
 8013b64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013b66:	2101      	movs	r1, #1
 8013b68:	69b8      	ldr	r0, [r7, #24]
 8013b6a:	f7ff ff05 	bl	8013978 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013b6e:	69bb      	ldr	r3, [r7, #24]
 8013b70:	78fa      	ldrb	r2, [r7, #3]
 8013b72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013b76:	bf00      	nop
 8013b78:	3710      	adds	r7, #16
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
	...

08013b80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b08e      	sub	sp, #56	; 0x38
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	607a      	str	r2, [r7, #4]
 8013b8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d10a      	bne.n	8013bb2 <xQueueGenericSend+0x32>
	__asm volatile
 8013b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba0:	f383 8811 	msr	BASEPRI, r3
 8013ba4:	f3bf 8f6f 	isb	sy
 8013ba8:	f3bf 8f4f 	dsb	sy
 8013bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013bae:	bf00      	nop
 8013bb0:	e7fe      	b.n	8013bb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d103      	bne.n	8013bc0 <xQueueGenericSend+0x40>
 8013bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d101      	bne.n	8013bc4 <xQueueGenericSend+0x44>
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	e000      	b.n	8013bc6 <xQueueGenericSend+0x46>
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d10a      	bne.n	8013be0 <xQueueGenericSend+0x60>
	__asm volatile
 8013bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bce:	f383 8811 	msr	BASEPRI, r3
 8013bd2:	f3bf 8f6f 	isb	sy
 8013bd6:	f3bf 8f4f 	dsb	sy
 8013bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013bdc:	bf00      	nop
 8013bde:	e7fe      	b.n	8013bde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	2b02      	cmp	r3, #2
 8013be4:	d103      	bne.n	8013bee <xQueueGenericSend+0x6e>
 8013be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	d101      	bne.n	8013bf2 <xQueueGenericSend+0x72>
 8013bee:	2301      	movs	r3, #1
 8013bf0:	e000      	b.n	8013bf4 <xQueueGenericSend+0x74>
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10a      	bne.n	8013c0e <xQueueGenericSend+0x8e>
	__asm volatile
 8013bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfc:	f383 8811 	msr	BASEPRI, r3
 8013c00:	f3bf 8f6f 	isb	sy
 8013c04:	f3bf 8f4f 	dsb	sy
 8013c08:	623b      	str	r3, [r7, #32]
}
 8013c0a:	bf00      	nop
 8013c0c:	e7fe      	b.n	8013c0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c0e:	f001 fa71 	bl	80150f4 <xTaskGetSchedulerState>
 8013c12:	4603      	mov	r3, r0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d102      	bne.n	8013c1e <xQueueGenericSend+0x9e>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d101      	bne.n	8013c22 <xQueueGenericSend+0xa2>
 8013c1e:	2301      	movs	r3, #1
 8013c20:	e000      	b.n	8013c24 <xQueueGenericSend+0xa4>
 8013c22:	2300      	movs	r3, #0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d10a      	bne.n	8013c3e <xQueueGenericSend+0xbe>
	__asm volatile
 8013c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c2c:	f383 8811 	msr	BASEPRI, r3
 8013c30:	f3bf 8f6f 	isb	sy
 8013c34:	f3bf 8f4f 	dsb	sy
 8013c38:	61fb      	str	r3, [r7, #28]
}
 8013c3a:	bf00      	nop
 8013c3c:	e7fe      	b.n	8013c3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c3e:	f001 ffe9 	bl	8015c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d302      	bcc.n	8013c54 <xQueueGenericSend+0xd4>
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	2b02      	cmp	r3, #2
 8013c52:	d129      	bne.n	8013ca8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013c54:	683a      	ldr	r2, [r7, #0]
 8013c56:	68b9      	ldr	r1, [r7, #8]
 8013c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c5a:	f000 fa0b 	bl	8014074 <prvCopyDataToQueue>
 8013c5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d010      	beq.n	8013c8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c6a:	3324      	adds	r3, #36	; 0x24
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f001 f821 	bl	8014cb4 <xTaskRemoveFromEventList>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d013      	beq.n	8013ca0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013c78:	4b3f      	ldr	r3, [pc, #252]	; (8013d78 <xQueueGenericSend+0x1f8>)
 8013c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c7e:	601a      	str	r2, [r3, #0]
 8013c80:	f3bf 8f4f 	dsb	sy
 8013c84:	f3bf 8f6f 	isb	sy
 8013c88:	e00a      	b.n	8013ca0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d007      	beq.n	8013ca0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013c90:	4b39      	ldr	r3, [pc, #228]	; (8013d78 <xQueueGenericSend+0x1f8>)
 8013c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c96:	601a      	str	r2, [r3, #0]
 8013c98:	f3bf 8f4f 	dsb	sy
 8013c9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013ca0:	f001 ffe8 	bl	8015c74 <vPortExitCritical>
				return pdPASS;
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	e063      	b.n	8013d70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d103      	bne.n	8013cb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013cae:	f001 ffe1 	bl	8015c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	e05c      	b.n	8013d70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d106      	bne.n	8013cca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013cbc:	f107 0314 	add.w	r3, r7, #20
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f001 f8bd 	bl	8014e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013cca:	f001 ffd3 	bl	8015c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013cce:	f000 fd7b 	bl	80147c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cd2:	f001 ff9f 	bl	8015c14 <vPortEnterCritical>
 8013cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013cdc:	b25b      	sxtb	r3, r3
 8013cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ce2:	d103      	bne.n	8013cec <xQueueGenericSend+0x16c>
 8013ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013cf2:	b25b      	sxtb	r3, r3
 8013cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cf8:	d103      	bne.n	8013d02 <xQueueGenericSend+0x182>
 8013cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d02:	f001 ffb7 	bl	8015c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d06:	1d3a      	adds	r2, r7, #4
 8013d08:	f107 0314 	add.w	r3, r7, #20
 8013d0c:	4611      	mov	r1, r2
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f001 f8ac 	bl	8014e6c <xTaskCheckForTimeOut>
 8013d14:	4603      	mov	r3, r0
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d124      	bne.n	8013d64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013d1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d1c:	f000 faa2 	bl	8014264 <prvIsQueueFull>
 8013d20:	4603      	mov	r3, r0
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d018      	beq.n	8013d58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d28:	3310      	adds	r3, #16
 8013d2a:	687a      	ldr	r2, [r7, #4]
 8013d2c:	4611      	mov	r1, r2
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f000 ff34 	bl	8014b9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d36:	f000 fa2d 	bl	8014194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013d3a:	f000 fd53 	bl	80147e4 <xTaskResumeAll>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	f47f af7c 	bne.w	8013c3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013d46:	4b0c      	ldr	r3, [pc, #48]	; (8013d78 <xQueueGenericSend+0x1f8>)
 8013d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d4c:	601a      	str	r2, [r3, #0]
 8013d4e:	f3bf 8f4f 	dsb	sy
 8013d52:	f3bf 8f6f 	isb	sy
 8013d56:	e772      	b.n	8013c3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d5a:	f000 fa1b 	bl	8014194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d5e:	f000 fd41 	bl	80147e4 <xTaskResumeAll>
 8013d62:	e76c      	b.n	8013c3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d66:	f000 fa15 	bl	8014194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d6a:	f000 fd3b 	bl	80147e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013d6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3738      	adds	r7, #56	; 0x38
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}
 8013d78:	e000ed04 	.word	0xe000ed04

08013d7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b090      	sub	sp, #64	; 0x40
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	60f8      	str	r0, [r7, #12]
 8013d84:	60b9      	str	r1, [r7, #8]
 8013d86:	607a      	str	r2, [r7, #4]
 8013d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d10a      	bne.n	8013daa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d98:	f383 8811 	msr	BASEPRI, r3
 8013d9c:	f3bf 8f6f 	isb	sy
 8013da0:	f3bf 8f4f 	dsb	sy
 8013da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013da6:	bf00      	nop
 8013da8:	e7fe      	b.n	8013da8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d103      	bne.n	8013db8 <xQueueGenericSendFromISR+0x3c>
 8013db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d101      	bne.n	8013dbc <xQueueGenericSendFromISR+0x40>
 8013db8:	2301      	movs	r3, #1
 8013dba:	e000      	b.n	8013dbe <xQueueGenericSendFromISR+0x42>
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d10a      	bne.n	8013dd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc6:	f383 8811 	msr	BASEPRI, r3
 8013dca:	f3bf 8f6f 	isb	sy
 8013dce:	f3bf 8f4f 	dsb	sy
 8013dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013dd4:	bf00      	nop
 8013dd6:	e7fe      	b.n	8013dd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	2b02      	cmp	r3, #2
 8013ddc:	d103      	bne.n	8013de6 <xQueueGenericSendFromISR+0x6a>
 8013dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d101      	bne.n	8013dea <xQueueGenericSendFromISR+0x6e>
 8013de6:	2301      	movs	r3, #1
 8013de8:	e000      	b.n	8013dec <xQueueGenericSendFromISR+0x70>
 8013dea:	2300      	movs	r3, #0
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d10a      	bne.n	8013e06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df4:	f383 8811 	msr	BASEPRI, r3
 8013df8:	f3bf 8f6f 	isb	sy
 8013dfc:	f3bf 8f4f 	dsb	sy
 8013e00:	623b      	str	r3, [r7, #32]
}
 8013e02:	bf00      	nop
 8013e04:	e7fe      	b.n	8013e04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e06:	f001 ffe7 	bl	8015dd8 <vPortValidateInterruptPriority>
	__asm volatile
 8013e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8013e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e12:	f383 8811 	msr	BASEPRI, r3
 8013e16:	f3bf 8f6f 	isb	sy
 8013e1a:	f3bf 8f4f 	dsb	sy
 8013e1e:	61fa      	str	r2, [r7, #28]
 8013e20:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8013e22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d302      	bcc.n	8013e38 <xQueueGenericSendFromISR+0xbc>
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	2b02      	cmp	r3, #2
 8013e36:	d12f      	bne.n	8013e98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013e48:	683a      	ldr	r2, [r7, #0]
 8013e4a:	68b9      	ldr	r1, [r7, #8]
 8013e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e4e:	f000 f911 	bl	8014074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013e52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e5a:	d112      	bne.n	8013e82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d016      	beq.n	8013e92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e66:	3324      	adds	r3, #36	; 0x24
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f000 ff23 	bl	8014cb4 <xTaskRemoveFromEventList>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d00e      	beq.n	8013e92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d00b      	beq.n	8013e92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	601a      	str	r2, [r3, #0]
 8013e80:	e007      	b.n	8013e92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013e82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e86:	3301      	adds	r3, #1
 8013e88:	b2db      	uxtb	r3, r3
 8013e8a:	b25a      	sxtb	r2, r3
 8013e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013e92:	2301      	movs	r3, #1
 8013e94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013e96:	e001      	b.n	8013e9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e9e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	f383 8811 	msr	BASEPRI, r3
}
 8013ea6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3740      	adds	r7, #64	; 0x40
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
	...

08013eb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b08c      	sub	sp, #48	; 0x30
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	60f8      	str	r0, [r7, #12]
 8013ebc:	60b9      	str	r1, [r7, #8]
 8013ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d10a      	bne.n	8013ee4 <xQueueReceive+0x30>
	__asm volatile
 8013ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed2:	f383 8811 	msr	BASEPRI, r3
 8013ed6:	f3bf 8f6f 	isb	sy
 8013eda:	f3bf 8f4f 	dsb	sy
 8013ede:	623b      	str	r3, [r7, #32]
}
 8013ee0:	bf00      	nop
 8013ee2:	e7fe      	b.n	8013ee2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d103      	bne.n	8013ef2 <xQueueReceive+0x3e>
 8013eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <xQueueReceive+0x42>
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	e000      	b.n	8013ef8 <xQueueReceive+0x44>
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d10a      	bne.n	8013f12 <xQueueReceive+0x5e>
	__asm volatile
 8013efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f00:	f383 8811 	msr	BASEPRI, r3
 8013f04:	f3bf 8f6f 	isb	sy
 8013f08:	f3bf 8f4f 	dsb	sy
 8013f0c:	61fb      	str	r3, [r7, #28]
}
 8013f0e:	bf00      	nop
 8013f10:	e7fe      	b.n	8013f10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f12:	f001 f8ef 	bl	80150f4 <xTaskGetSchedulerState>
 8013f16:	4603      	mov	r3, r0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d102      	bne.n	8013f22 <xQueueReceive+0x6e>
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d101      	bne.n	8013f26 <xQueueReceive+0x72>
 8013f22:	2301      	movs	r3, #1
 8013f24:	e000      	b.n	8013f28 <xQueueReceive+0x74>
 8013f26:	2300      	movs	r3, #0
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d10a      	bne.n	8013f42 <xQueueReceive+0x8e>
	__asm volatile
 8013f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f30:	f383 8811 	msr	BASEPRI, r3
 8013f34:	f3bf 8f6f 	isb	sy
 8013f38:	f3bf 8f4f 	dsb	sy
 8013f3c:	61bb      	str	r3, [r7, #24]
}
 8013f3e:	bf00      	nop
 8013f40:	e7fe      	b.n	8013f40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013f42:	f001 fe67 	bl	8015c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d01f      	beq.n	8013f92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013f52:	68b9      	ldr	r1, [r7, #8]
 8013f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f56:	f000 f8f7 	bl	8014148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5c:	1e5a      	subs	r2, r3, #1
 8013f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f64:	691b      	ldr	r3, [r3, #16]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d00f      	beq.n	8013f8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f6c:	3310      	adds	r3, #16
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f000 fea0 	bl	8014cb4 <xTaskRemoveFromEventList>
 8013f74:	4603      	mov	r3, r0
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d007      	beq.n	8013f8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013f7a:	4b3d      	ldr	r3, [pc, #244]	; (8014070 <xQueueReceive+0x1bc>)
 8013f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f80:	601a      	str	r2, [r3, #0]
 8013f82:	f3bf 8f4f 	dsb	sy
 8013f86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013f8a:	f001 fe73 	bl	8015c74 <vPortExitCritical>
				return pdPASS;
 8013f8e:	2301      	movs	r3, #1
 8013f90:	e069      	b.n	8014066 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d103      	bne.n	8013fa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013f98:	f001 fe6c 	bl	8015c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	e062      	b.n	8014066 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d106      	bne.n	8013fb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013fa6:	f107 0310 	add.w	r3, r7, #16
 8013faa:	4618      	mov	r0, r3
 8013fac:	f000 ff48 	bl	8014e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013fb4:	f001 fe5e 	bl	8015c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013fb8:	f000 fc06 	bl	80147c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013fbc:	f001 fe2a 	bl	8015c14 <vPortEnterCritical>
 8013fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013fc6:	b25b      	sxtb	r3, r3
 8013fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fcc:	d103      	bne.n	8013fd6 <xQueueReceive+0x122>
 8013fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013fdc:	b25b      	sxtb	r3, r3
 8013fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fe2:	d103      	bne.n	8013fec <xQueueReceive+0x138>
 8013fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013fec:	f001 fe42 	bl	8015c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013ff0:	1d3a      	adds	r2, r7, #4
 8013ff2:	f107 0310 	add.w	r3, r7, #16
 8013ff6:	4611      	mov	r1, r2
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f000 ff37 	bl	8014e6c <xTaskCheckForTimeOut>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2b00      	cmp	r3, #0
 8014002:	d123      	bne.n	801404c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014006:	f000 f917 	bl	8014238 <prvIsQueueEmpty>
 801400a:	4603      	mov	r3, r0
 801400c:	2b00      	cmp	r3, #0
 801400e:	d017      	beq.n	8014040 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014012:	3324      	adds	r3, #36	; 0x24
 8014014:	687a      	ldr	r2, [r7, #4]
 8014016:	4611      	mov	r1, r2
 8014018:	4618      	mov	r0, r3
 801401a:	f000 fdbf 	bl	8014b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801401e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014020:	f000 f8b8 	bl	8014194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014024:	f000 fbde 	bl	80147e4 <xTaskResumeAll>
 8014028:	4603      	mov	r3, r0
 801402a:	2b00      	cmp	r3, #0
 801402c:	d189      	bne.n	8013f42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801402e:	4b10      	ldr	r3, [pc, #64]	; (8014070 <xQueueReceive+0x1bc>)
 8014030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014034:	601a      	str	r2, [r3, #0]
 8014036:	f3bf 8f4f 	dsb	sy
 801403a:	f3bf 8f6f 	isb	sy
 801403e:	e780      	b.n	8013f42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014042:	f000 f8a7 	bl	8014194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014046:	f000 fbcd 	bl	80147e4 <xTaskResumeAll>
 801404a:	e77a      	b.n	8013f42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801404c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801404e:	f000 f8a1 	bl	8014194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014052:	f000 fbc7 	bl	80147e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014058:	f000 f8ee 	bl	8014238 <prvIsQueueEmpty>
 801405c:	4603      	mov	r3, r0
 801405e:	2b00      	cmp	r3, #0
 8014060:	f43f af6f 	beq.w	8013f42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014064:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014066:	4618      	mov	r0, r3
 8014068:	3730      	adds	r7, #48	; 0x30
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	e000ed04 	.word	0xe000ed04

08014074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b086      	sub	sp, #24
 8014078:	af00      	add	r7, sp, #0
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014080:	2300      	movs	r3, #0
 8014082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801408e:	2b00      	cmp	r3, #0
 8014090:	d10d      	bne.n	80140ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d14d      	bne.n	8014136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	689b      	ldr	r3, [r3, #8]
 801409e:	4618      	mov	r0, r3
 80140a0:	f001 f846 	bl	8015130 <xTaskPriorityDisinherit>
 80140a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	2200      	movs	r2, #0
 80140aa:	609a      	str	r2, [r3, #8]
 80140ac:	e043      	b.n	8014136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d119      	bne.n	80140e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	6858      	ldr	r0, [r3, #4]
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140bc:	461a      	mov	r2, r3
 80140be:	68b9      	ldr	r1, [r7, #8]
 80140c0:	f002 f8de 	bl	8016280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	685a      	ldr	r2, [r3, #4]
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140cc:	441a      	add	r2, r3
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	685a      	ldr	r2, [r3, #4]
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	689b      	ldr	r3, [r3, #8]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d32b      	bcc.n	8014136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	605a      	str	r2, [r3, #4]
 80140e6:	e026      	b.n	8014136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	68d8      	ldr	r0, [r3, #12]
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140f0:	461a      	mov	r2, r3
 80140f2:	68b9      	ldr	r1, [r7, #8]
 80140f4:	f002 f8c4 	bl	8016280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	68da      	ldr	r2, [r3, #12]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014100:	425b      	negs	r3, r3
 8014102:	441a      	add	r2, r3
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	68da      	ldr	r2, [r3, #12]
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	429a      	cmp	r2, r3
 8014112:	d207      	bcs.n	8014124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	689a      	ldr	r2, [r3, #8]
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801411c:	425b      	negs	r3, r3
 801411e:	441a      	add	r2, r3
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2b02      	cmp	r3, #2
 8014128:	d105      	bne.n	8014136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d002      	beq.n	8014136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	3b01      	subs	r3, #1
 8014134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	1c5a      	adds	r2, r3, #1
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801413e:	697b      	ldr	r3, [r7, #20]
}
 8014140:	4618      	mov	r0, r3
 8014142:	3718      	adds	r7, #24
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}

08014148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014156:	2b00      	cmp	r3, #0
 8014158:	d018      	beq.n	801418c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	68da      	ldr	r2, [r3, #12]
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014162:	441a      	add	r2, r3
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	68da      	ldr	r2, [r3, #12]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	689b      	ldr	r3, [r3, #8]
 8014170:	429a      	cmp	r2, r3
 8014172:	d303      	bcc.n	801417c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681a      	ldr	r2, [r3, #0]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	68d9      	ldr	r1, [r3, #12]
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014184:	461a      	mov	r2, r3
 8014186:	6838      	ldr	r0, [r7, #0]
 8014188:	f002 f87a 	bl	8016280 <memcpy>
	}
}
 801418c:	bf00      	nop
 801418e:	3708      	adds	r7, #8
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}

08014194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b084      	sub	sp, #16
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801419c:	f001 fd3a 	bl	8015c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80141a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80141a8:	e011      	b.n	80141ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d012      	beq.n	80141d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	3324      	adds	r3, #36	; 0x24
 80141b6:	4618      	mov	r0, r3
 80141b8:	f000 fd7c 	bl	8014cb4 <xTaskRemoveFromEventList>
 80141bc:	4603      	mov	r3, r0
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d001      	beq.n	80141c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80141c2:	f000 feb5 	bl	8014f30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80141c6:	7bfb      	ldrb	r3, [r7, #15]
 80141c8:	3b01      	subs	r3, #1
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80141ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	dce9      	bgt.n	80141aa <prvUnlockQueue+0x16>
 80141d6:	e000      	b.n	80141da <prvUnlockQueue+0x46>
					break;
 80141d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	22ff      	movs	r2, #255	; 0xff
 80141de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80141e2:	f001 fd47 	bl	8015c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80141e6:	f001 fd15 	bl	8015c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80141f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80141f2:	e011      	b.n	8014218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	691b      	ldr	r3, [r3, #16]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d012      	beq.n	8014222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	3310      	adds	r3, #16
 8014200:	4618      	mov	r0, r3
 8014202:	f000 fd57 	bl	8014cb4 <xTaskRemoveFromEventList>
 8014206:	4603      	mov	r3, r0
 8014208:	2b00      	cmp	r3, #0
 801420a:	d001      	beq.n	8014210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801420c:	f000 fe90 	bl	8014f30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014210:	7bbb      	ldrb	r3, [r7, #14]
 8014212:	3b01      	subs	r3, #1
 8014214:	b2db      	uxtb	r3, r3
 8014216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801421c:	2b00      	cmp	r3, #0
 801421e:	dce9      	bgt.n	80141f4 <prvUnlockQueue+0x60>
 8014220:	e000      	b.n	8014224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	22ff      	movs	r2, #255	; 0xff
 8014228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801422c:	f001 fd22 	bl	8015c74 <vPortExitCritical>
}
 8014230:	bf00      	nop
 8014232:	3710      	adds	r7, #16
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014240:	f001 fce8 	bl	8015c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014248:	2b00      	cmp	r3, #0
 801424a:	d102      	bne.n	8014252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801424c:	2301      	movs	r3, #1
 801424e:	60fb      	str	r3, [r7, #12]
 8014250:	e001      	b.n	8014256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014252:	2300      	movs	r3, #0
 8014254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014256:	f001 fd0d 	bl	8015c74 <vPortExitCritical>

	return xReturn;
 801425a:	68fb      	ldr	r3, [r7, #12]
}
 801425c:	4618      	mov	r0, r3
 801425e:	3710      	adds	r7, #16
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}

08014264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b084      	sub	sp, #16
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801426c:	f001 fcd2 	bl	8015c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014278:	429a      	cmp	r2, r3
 801427a:	d102      	bne.n	8014282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801427c:	2301      	movs	r3, #1
 801427e:	60fb      	str	r3, [r7, #12]
 8014280:	e001      	b.n	8014286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014282:	2300      	movs	r3, #0
 8014284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014286:	f001 fcf5 	bl	8015c74 <vPortExitCritical>

	return xReturn;
 801428a:	68fb      	ldr	r3, [r7, #12]
}
 801428c:	4618      	mov	r0, r3
 801428e:	3710      	adds	r7, #16
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014294:	b480      	push	{r7}
 8014296:	b085      	sub	sp, #20
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801429e:	2300      	movs	r3, #0
 80142a0:	60fb      	str	r3, [r7, #12]
 80142a2:	e014      	b.n	80142ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80142a4:	4a0f      	ldr	r2, [pc, #60]	; (80142e4 <vQueueAddToRegistry+0x50>)
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d10b      	bne.n	80142c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80142b0:	490c      	ldr	r1, [pc, #48]	; (80142e4 <vQueueAddToRegistry+0x50>)
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	683a      	ldr	r2, [r7, #0]
 80142b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80142ba:	4a0a      	ldr	r2, [pc, #40]	; (80142e4 <vQueueAddToRegistry+0x50>)
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	00db      	lsls	r3, r3, #3
 80142c0:	4413      	add	r3, r2
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80142c6:	e006      	b.n	80142d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	3301      	adds	r3, #1
 80142cc:	60fb      	str	r3, [r7, #12]
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	2b07      	cmp	r3, #7
 80142d2:	d9e7      	bls.n	80142a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80142d4:	bf00      	nop
 80142d6:	bf00      	nop
 80142d8:	3714      	adds	r7, #20
 80142da:	46bd      	mov	sp, r7
 80142dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e0:	4770      	bx	lr
 80142e2:	bf00      	nop
 80142e4:	24000f4c 	.word	0x24000f4c

080142e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b086      	sub	sp, #24
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	60b9      	str	r1, [r7, #8]
 80142f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80142f8:	f001 fc8c 	bl	8015c14 <vPortEnterCritical>
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014302:	b25b      	sxtb	r3, r3
 8014304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014308:	d103      	bne.n	8014312 <vQueueWaitForMessageRestricted+0x2a>
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	2200      	movs	r2, #0
 801430e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014318:	b25b      	sxtb	r3, r3
 801431a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801431e:	d103      	bne.n	8014328 <vQueueWaitForMessageRestricted+0x40>
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	2200      	movs	r2, #0
 8014324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014328:	f001 fca4 	bl	8015c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014330:	2b00      	cmp	r3, #0
 8014332:	d106      	bne.n	8014342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	3324      	adds	r3, #36	; 0x24
 8014338:	687a      	ldr	r2, [r7, #4]
 801433a:	68b9      	ldr	r1, [r7, #8]
 801433c:	4618      	mov	r0, r3
 801433e:	f000 fc8d 	bl	8014c5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014342:	6978      	ldr	r0, [r7, #20]
 8014344:	f7ff ff26 	bl	8014194 <prvUnlockQueue>
	}
 8014348:	bf00      	nop
 801434a:	3718      	adds	r7, #24
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}

08014350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014350:	b580      	push	{r7, lr}
 8014352:	b08e      	sub	sp, #56	; 0x38
 8014354:	af04      	add	r7, sp, #16
 8014356:	60f8      	str	r0, [r7, #12]
 8014358:	60b9      	str	r1, [r7, #8]
 801435a:	607a      	str	r2, [r7, #4]
 801435c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014360:	2b00      	cmp	r3, #0
 8014362:	d10a      	bne.n	801437a <xTaskCreateStatic+0x2a>
	__asm volatile
 8014364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014368:	f383 8811 	msr	BASEPRI, r3
 801436c:	f3bf 8f6f 	isb	sy
 8014370:	f3bf 8f4f 	dsb	sy
 8014374:	623b      	str	r3, [r7, #32]
}
 8014376:	bf00      	nop
 8014378:	e7fe      	b.n	8014378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801437c:	2b00      	cmp	r3, #0
 801437e:	d10a      	bne.n	8014396 <xTaskCreateStatic+0x46>
	__asm volatile
 8014380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014384:	f383 8811 	msr	BASEPRI, r3
 8014388:	f3bf 8f6f 	isb	sy
 801438c:	f3bf 8f4f 	dsb	sy
 8014390:	61fb      	str	r3, [r7, #28]
}
 8014392:	bf00      	nop
 8014394:	e7fe      	b.n	8014394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014396:	235c      	movs	r3, #92	; 0x5c
 8014398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	2b5c      	cmp	r3, #92	; 0x5c
 801439e:	d00a      	beq.n	80143b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80143a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143a4:	f383 8811 	msr	BASEPRI, r3
 80143a8:	f3bf 8f6f 	isb	sy
 80143ac:	f3bf 8f4f 	dsb	sy
 80143b0:	61bb      	str	r3, [r7, #24]
}
 80143b2:	bf00      	nop
 80143b4:	e7fe      	b.n	80143b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80143b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80143b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d01e      	beq.n	80143fc <xTaskCreateStatic+0xac>
 80143be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d01b      	beq.n	80143fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80143c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80143c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80143ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d0:	2202      	movs	r2, #2
 80143d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80143d6:	2300      	movs	r3, #0
 80143d8:	9303      	str	r3, [sp, #12]
 80143da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143dc:	9302      	str	r3, [sp, #8]
 80143de:	f107 0314 	add.w	r3, r7, #20
 80143e2:	9301      	str	r3, [sp, #4]
 80143e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e6:	9300      	str	r3, [sp, #0]
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	687a      	ldr	r2, [r7, #4]
 80143ec:	68b9      	ldr	r1, [r7, #8]
 80143ee:	68f8      	ldr	r0, [r7, #12]
 80143f0:	f000 f850 	bl	8014494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80143f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143f6:	f000 f8dd 	bl	80145b4 <prvAddNewTaskToReadyList>
 80143fa:	e001      	b.n	8014400 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80143fc:	2300      	movs	r3, #0
 80143fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014400:	697b      	ldr	r3, [r7, #20]
	}
 8014402:	4618      	mov	r0, r3
 8014404:	3728      	adds	r7, #40	; 0x28
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}

0801440a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801440a:	b580      	push	{r7, lr}
 801440c:	b08c      	sub	sp, #48	; 0x30
 801440e:	af04      	add	r7, sp, #16
 8014410:	60f8      	str	r0, [r7, #12]
 8014412:	60b9      	str	r1, [r7, #8]
 8014414:	603b      	str	r3, [r7, #0]
 8014416:	4613      	mov	r3, r2
 8014418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801441a:	88fb      	ldrh	r3, [r7, #6]
 801441c:	009b      	lsls	r3, r3, #2
 801441e:	4618      	mov	r0, r3
 8014420:	f001 fd1a 	bl	8015e58 <pvPortMalloc>
 8014424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d00e      	beq.n	801444a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801442c:	205c      	movs	r0, #92	; 0x5c
 801442e:	f001 fd13 	bl	8015e58 <pvPortMalloc>
 8014432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014434:	69fb      	ldr	r3, [r7, #28]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d003      	beq.n	8014442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801443a:	69fb      	ldr	r3, [r7, #28]
 801443c:	697a      	ldr	r2, [r7, #20]
 801443e:	631a      	str	r2, [r3, #48]	; 0x30
 8014440:	e005      	b.n	801444e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014442:	6978      	ldr	r0, [r7, #20]
 8014444:	f001 fdd4 	bl	8015ff0 <vPortFree>
 8014448:	e001      	b.n	801444e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801444a:	2300      	movs	r3, #0
 801444c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801444e:	69fb      	ldr	r3, [r7, #28]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d017      	beq.n	8014484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	2200      	movs	r2, #0
 8014458:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801445c:	88fa      	ldrh	r2, [r7, #6]
 801445e:	2300      	movs	r3, #0
 8014460:	9303      	str	r3, [sp, #12]
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	9302      	str	r3, [sp, #8]
 8014466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014468:	9301      	str	r3, [sp, #4]
 801446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801446c:	9300      	str	r3, [sp, #0]
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	68b9      	ldr	r1, [r7, #8]
 8014472:	68f8      	ldr	r0, [r7, #12]
 8014474:	f000 f80e 	bl	8014494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014478:	69f8      	ldr	r0, [r7, #28]
 801447a:	f000 f89b 	bl	80145b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801447e:	2301      	movs	r3, #1
 8014480:	61bb      	str	r3, [r7, #24]
 8014482:	e002      	b.n	801448a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801448a:	69bb      	ldr	r3, [r7, #24]
	}
 801448c:	4618      	mov	r0, r3
 801448e:	3720      	adds	r7, #32
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}

08014494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b088      	sub	sp, #32
 8014498:	af00      	add	r7, sp, #0
 801449a:	60f8      	str	r0, [r7, #12]
 801449c:	60b9      	str	r1, [r7, #8]
 801449e:	607a      	str	r2, [r7, #4]
 80144a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80144a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	009b      	lsls	r3, r3, #2
 80144aa:	461a      	mov	r2, r3
 80144ac:	21a5      	movs	r1, #165	; 0xa5
 80144ae:	f001 fef5 	bl	801629c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80144b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80144b6:	6879      	ldr	r1, [r7, #4]
 80144b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80144bc:	440b      	add	r3, r1
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80144c4:	69bb      	ldr	r3, [r7, #24]
 80144c6:	f023 0307 	bic.w	r3, r3, #7
 80144ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80144cc:	69bb      	ldr	r3, [r7, #24]
 80144ce:	f003 0307 	and.w	r3, r3, #7
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d00a      	beq.n	80144ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80144d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144da:	f383 8811 	msr	BASEPRI, r3
 80144de:	f3bf 8f6f 	isb	sy
 80144e2:	f3bf 8f4f 	dsb	sy
 80144e6:	617b      	str	r3, [r7, #20]
}
 80144e8:	bf00      	nop
 80144ea:	e7fe      	b.n	80144ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d01f      	beq.n	8014532 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80144f2:	2300      	movs	r3, #0
 80144f4:	61fb      	str	r3, [r7, #28]
 80144f6:	e012      	b.n	801451e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80144f8:	68ba      	ldr	r2, [r7, #8]
 80144fa:	69fb      	ldr	r3, [r7, #28]
 80144fc:	4413      	add	r3, r2
 80144fe:	7819      	ldrb	r1, [r3, #0]
 8014500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014502:	69fb      	ldr	r3, [r7, #28]
 8014504:	4413      	add	r3, r2
 8014506:	3334      	adds	r3, #52	; 0x34
 8014508:	460a      	mov	r2, r1
 801450a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801450c:	68ba      	ldr	r2, [r7, #8]
 801450e:	69fb      	ldr	r3, [r7, #28]
 8014510:	4413      	add	r3, r2
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d006      	beq.n	8014526 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014518:	69fb      	ldr	r3, [r7, #28]
 801451a:	3301      	adds	r3, #1
 801451c:	61fb      	str	r3, [r7, #28]
 801451e:	69fb      	ldr	r3, [r7, #28]
 8014520:	2b0f      	cmp	r3, #15
 8014522:	d9e9      	bls.n	80144f8 <prvInitialiseNewTask+0x64>
 8014524:	e000      	b.n	8014528 <prvInitialiseNewTask+0x94>
			{
				break;
 8014526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801452a:	2200      	movs	r2, #0
 801452c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014530:	e003      	b.n	801453a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014534:	2200      	movs	r2, #0
 8014536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801453c:	2b37      	cmp	r3, #55	; 0x37
 801453e:	d901      	bls.n	8014544 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014540:	2337      	movs	r3, #55	; 0x37
 8014542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801454c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801454e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014552:	2200      	movs	r2, #0
 8014554:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014558:	3304      	adds	r3, #4
 801455a:	4618      	mov	r0, r3
 801455c:	f7ff f978 	bl	8013850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014562:	3318      	adds	r3, #24
 8014564:	4618      	mov	r0, r3
 8014566:	f7ff f973 	bl	8013850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801456e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801457c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801457e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014582:	2200      	movs	r2, #0
 8014584:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014588:	2200      	movs	r2, #0
 801458a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801458e:	683a      	ldr	r2, [r7, #0]
 8014590:	68f9      	ldr	r1, [r7, #12]
 8014592:	69b8      	ldr	r0, [r7, #24]
 8014594:	f001 fa14 	bl	80159c0 <pxPortInitialiseStack>
 8014598:	4602      	mov	r2, r0
 801459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801459c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d002      	beq.n	80145aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80145a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80145aa:	bf00      	nop
 80145ac:	3720      	adds	r7, #32
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
	...

080145b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b082      	sub	sp, #8
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80145bc:	f001 fb2a 	bl	8015c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80145c0:	4b2d      	ldr	r3, [pc, #180]	; (8014678 <prvAddNewTaskToReadyList+0xc4>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	3301      	adds	r3, #1
 80145c6:	4a2c      	ldr	r2, [pc, #176]	; (8014678 <prvAddNewTaskToReadyList+0xc4>)
 80145c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80145ca:	4b2c      	ldr	r3, [pc, #176]	; (801467c <prvAddNewTaskToReadyList+0xc8>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d109      	bne.n	80145e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80145d2:	4a2a      	ldr	r2, [pc, #168]	; (801467c <prvAddNewTaskToReadyList+0xc8>)
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80145d8:	4b27      	ldr	r3, [pc, #156]	; (8014678 <prvAddNewTaskToReadyList+0xc4>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	2b01      	cmp	r3, #1
 80145de:	d110      	bne.n	8014602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80145e0:	f000 fcca 	bl	8014f78 <prvInitialiseTaskLists>
 80145e4:	e00d      	b.n	8014602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80145e6:	4b26      	ldr	r3, [pc, #152]	; (8014680 <prvAddNewTaskToReadyList+0xcc>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d109      	bne.n	8014602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80145ee:	4b23      	ldr	r3, [pc, #140]	; (801467c <prvAddNewTaskToReadyList+0xc8>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d802      	bhi.n	8014602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80145fc:	4a1f      	ldr	r2, [pc, #124]	; (801467c <prvAddNewTaskToReadyList+0xc8>)
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014602:	4b20      	ldr	r3, [pc, #128]	; (8014684 <prvAddNewTaskToReadyList+0xd0>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	3301      	adds	r3, #1
 8014608:	4a1e      	ldr	r2, [pc, #120]	; (8014684 <prvAddNewTaskToReadyList+0xd0>)
 801460a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801460c:	4b1d      	ldr	r3, [pc, #116]	; (8014684 <prvAddNewTaskToReadyList+0xd0>)
 801460e:	681a      	ldr	r2, [r3, #0]
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014618:	4b1b      	ldr	r3, [pc, #108]	; (8014688 <prvAddNewTaskToReadyList+0xd4>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	429a      	cmp	r2, r3
 801461e:	d903      	bls.n	8014628 <prvAddNewTaskToReadyList+0x74>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014624:	4a18      	ldr	r2, [pc, #96]	; (8014688 <prvAddNewTaskToReadyList+0xd4>)
 8014626:	6013      	str	r3, [r2, #0]
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801462c:	4613      	mov	r3, r2
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	4413      	add	r3, r2
 8014632:	009b      	lsls	r3, r3, #2
 8014634:	4a15      	ldr	r2, [pc, #84]	; (801468c <prvAddNewTaskToReadyList+0xd8>)
 8014636:	441a      	add	r2, r3
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	3304      	adds	r3, #4
 801463c:	4619      	mov	r1, r3
 801463e:	4610      	mov	r0, r2
 8014640:	f7ff f913 	bl	801386a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014644:	f001 fb16 	bl	8015c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014648:	4b0d      	ldr	r3, [pc, #52]	; (8014680 <prvAddNewTaskToReadyList+0xcc>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d00e      	beq.n	801466e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014650:	4b0a      	ldr	r3, [pc, #40]	; (801467c <prvAddNewTaskToReadyList+0xc8>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801465a:	429a      	cmp	r2, r3
 801465c:	d207      	bcs.n	801466e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801465e:	4b0c      	ldr	r3, [pc, #48]	; (8014690 <prvAddNewTaskToReadyList+0xdc>)
 8014660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014664:	601a      	str	r2, [r3, #0]
 8014666:	f3bf 8f4f 	dsb	sy
 801466a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801466e:	bf00      	nop
 8014670:	3708      	adds	r7, #8
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	24001460 	.word	0x24001460
 801467c:	24000f8c 	.word	0x24000f8c
 8014680:	2400146c 	.word	0x2400146c
 8014684:	2400147c 	.word	0x2400147c
 8014688:	24001468 	.word	0x24001468
 801468c:	24000f90 	.word	0x24000f90
 8014690:	e000ed04 	.word	0xe000ed04

08014694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014694:	b580      	push	{r7, lr}
 8014696:	b084      	sub	sp, #16
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801469c:	2300      	movs	r3, #0
 801469e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d017      	beq.n	80146d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80146a6:	4b13      	ldr	r3, [pc, #76]	; (80146f4 <vTaskDelay+0x60>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d00a      	beq.n	80146c4 <vTaskDelay+0x30>
	__asm volatile
 80146ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b2:	f383 8811 	msr	BASEPRI, r3
 80146b6:	f3bf 8f6f 	isb	sy
 80146ba:	f3bf 8f4f 	dsb	sy
 80146be:	60bb      	str	r3, [r7, #8]
}
 80146c0:	bf00      	nop
 80146c2:	e7fe      	b.n	80146c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80146c4:	f000 f880 	bl	80147c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80146c8:	2100      	movs	r1, #0
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f000 fdb6 	bl	801523c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80146d0:	f000 f888 	bl	80147e4 <xTaskResumeAll>
 80146d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d107      	bne.n	80146ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80146dc:	4b06      	ldr	r3, [pc, #24]	; (80146f8 <vTaskDelay+0x64>)
 80146de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146e2:	601a      	str	r2, [r3, #0]
 80146e4:	f3bf 8f4f 	dsb	sy
 80146e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80146ec:	bf00      	nop
 80146ee:	3710      	adds	r7, #16
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	24001488 	.word	0x24001488
 80146f8:	e000ed04 	.word	0xe000ed04

080146fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b08a      	sub	sp, #40	; 0x28
 8014700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014702:	2300      	movs	r3, #0
 8014704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014706:	2300      	movs	r3, #0
 8014708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801470a:	463a      	mov	r2, r7
 801470c:	1d39      	adds	r1, r7, #4
 801470e:	f107 0308 	add.w	r3, r7, #8
 8014712:	4618      	mov	r0, r3
 8014714:	f7fe fddc 	bl	80132d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014718:	6839      	ldr	r1, [r7, #0]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	68ba      	ldr	r2, [r7, #8]
 801471e:	9202      	str	r2, [sp, #8]
 8014720:	9301      	str	r3, [sp, #4]
 8014722:	2300      	movs	r3, #0
 8014724:	9300      	str	r3, [sp, #0]
 8014726:	2300      	movs	r3, #0
 8014728:	460a      	mov	r2, r1
 801472a:	4921      	ldr	r1, [pc, #132]	; (80147b0 <vTaskStartScheduler+0xb4>)
 801472c:	4821      	ldr	r0, [pc, #132]	; (80147b4 <vTaskStartScheduler+0xb8>)
 801472e:	f7ff fe0f 	bl	8014350 <xTaskCreateStatic>
 8014732:	4603      	mov	r3, r0
 8014734:	4a20      	ldr	r2, [pc, #128]	; (80147b8 <vTaskStartScheduler+0xbc>)
 8014736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014738:	4b1f      	ldr	r3, [pc, #124]	; (80147b8 <vTaskStartScheduler+0xbc>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d002      	beq.n	8014746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014740:	2301      	movs	r3, #1
 8014742:	617b      	str	r3, [r7, #20]
 8014744:	e001      	b.n	801474a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014746:	2300      	movs	r3, #0
 8014748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	2b01      	cmp	r3, #1
 801474e:	d102      	bne.n	8014756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014750:	f000 fdc8 	bl	80152e4 <xTimerCreateTimerTask>
 8014754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	2b01      	cmp	r3, #1
 801475a:	d116      	bne.n	801478a <vTaskStartScheduler+0x8e>
	__asm volatile
 801475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014760:	f383 8811 	msr	BASEPRI, r3
 8014764:	f3bf 8f6f 	isb	sy
 8014768:	f3bf 8f4f 	dsb	sy
 801476c:	613b      	str	r3, [r7, #16]
}
 801476e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014770:	4b12      	ldr	r3, [pc, #72]	; (80147bc <vTaskStartScheduler+0xc0>)
 8014772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014776:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014778:	4b11      	ldr	r3, [pc, #68]	; (80147c0 <vTaskStartScheduler+0xc4>)
 801477a:	2201      	movs	r2, #1
 801477c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801477e:	4b11      	ldr	r3, [pc, #68]	; (80147c4 <vTaskStartScheduler+0xc8>)
 8014780:	2200      	movs	r2, #0
 8014782:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014784:	f001 f9a4 	bl	8015ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014788:	e00e      	b.n	80147a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014790:	d10a      	bne.n	80147a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8014792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014796:	f383 8811 	msr	BASEPRI, r3
 801479a:	f3bf 8f6f 	isb	sy
 801479e:	f3bf 8f4f 	dsb	sy
 80147a2:	60fb      	str	r3, [r7, #12]
}
 80147a4:	bf00      	nop
 80147a6:	e7fe      	b.n	80147a6 <vTaskStartScheduler+0xaa>
}
 80147a8:	bf00      	nop
 80147aa:	3718      	adds	r7, #24
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	08016f10 	.word	0x08016f10
 80147b4:	08014f49 	.word	0x08014f49
 80147b8:	24001484 	.word	0x24001484
 80147bc:	24001480 	.word	0x24001480
 80147c0:	2400146c 	.word	0x2400146c
 80147c4:	24001464 	.word	0x24001464

080147c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80147c8:	b480      	push	{r7}
 80147ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80147cc:	4b04      	ldr	r3, [pc, #16]	; (80147e0 <vTaskSuspendAll+0x18>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	3301      	adds	r3, #1
 80147d2:	4a03      	ldr	r2, [pc, #12]	; (80147e0 <vTaskSuspendAll+0x18>)
 80147d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80147d6:	bf00      	nop
 80147d8:	46bd      	mov	sp, r7
 80147da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147de:	4770      	bx	lr
 80147e0:	24001488 	.word	0x24001488

080147e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b084      	sub	sp, #16
 80147e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80147ea:	2300      	movs	r3, #0
 80147ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80147ee:	2300      	movs	r3, #0
 80147f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80147f2:	4b42      	ldr	r3, [pc, #264]	; (80148fc <xTaskResumeAll+0x118>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d10a      	bne.n	8014810 <xTaskResumeAll+0x2c>
	__asm volatile
 80147fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fe:	f383 8811 	msr	BASEPRI, r3
 8014802:	f3bf 8f6f 	isb	sy
 8014806:	f3bf 8f4f 	dsb	sy
 801480a:	603b      	str	r3, [r7, #0]
}
 801480c:	bf00      	nop
 801480e:	e7fe      	b.n	801480e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014810:	f001 fa00 	bl	8015c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014814:	4b39      	ldr	r3, [pc, #228]	; (80148fc <xTaskResumeAll+0x118>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	3b01      	subs	r3, #1
 801481a:	4a38      	ldr	r2, [pc, #224]	; (80148fc <xTaskResumeAll+0x118>)
 801481c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801481e:	4b37      	ldr	r3, [pc, #220]	; (80148fc <xTaskResumeAll+0x118>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d162      	bne.n	80148ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014826:	4b36      	ldr	r3, [pc, #216]	; (8014900 <xTaskResumeAll+0x11c>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d05e      	beq.n	80148ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801482e:	e02f      	b.n	8014890 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014830:	4b34      	ldr	r3, [pc, #208]	; (8014904 <xTaskResumeAll+0x120>)
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	68db      	ldr	r3, [r3, #12]
 8014836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	3318      	adds	r3, #24
 801483c:	4618      	mov	r0, r3
 801483e:	f7ff f871 	bl	8013924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	3304      	adds	r3, #4
 8014846:	4618      	mov	r0, r3
 8014848:	f7ff f86c 	bl	8013924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014850:	4b2d      	ldr	r3, [pc, #180]	; (8014908 <xTaskResumeAll+0x124>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	429a      	cmp	r2, r3
 8014856:	d903      	bls.n	8014860 <xTaskResumeAll+0x7c>
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801485c:	4a2a      	ldr	r2, [pc, #168]	; (8014908 <xTaskResumeAll+0x124>)
 801485e:	6013      	str	r3, [r2, #0]
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014864:	4613      	mov	r3, r2
 8014866:	009b      	lsls	r3, r3, #2
 8014868:	4413      	add	r3, r2
 801486a:	009b      	lsls	r3, r3, #2
 801486c:	4a27      	ldr	r2, [pc, #156]	; (801490c <xTaskResumeAll+0x128>)
 801486e:	441a      	add	r2, r3
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	3304      	adds	r3, #4
 8014874:	4619      	mov	r1, r3
 8014876:	4610      	mov	r0, r2
 8014878:	f7fe fff7 	bl	801386a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014880:	4b23      	ldr	r3, [pc, #140]	; (8014910 <xTaskResumeAll+0x12c>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014886:	429a      	cmp	r2, r3
 8014888:	d302      	bcc.n	8014890 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801488a:	4b22      	ldr	r3, [pc, #136]	; (8014914 <xTaskResumeAll+0x130>)
 801488c:	2201      	movs	r2, #1
 801488e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014890:	4b1c      	ldr	r3, [pc, #112]	; (8014904 <xTaskResumeAll+0x120>)
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d1cb      	bne.n	8014830 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d001      	beq.n	80148a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801489e:	f000 fc09 	bl	80150b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80148a2:	4b1d      	ldr	r3, [pc, #116]	; (8014918 <xTaskResumeAll+0x134>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d010      	beq.n	80148d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80148ae:	f000 f847 	bl	8014940 <xTaskIncrementTick>
 80148b2:	4603      	mov	r3, r0
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d002      	beq.n	80148be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80148b8:	4b16      	ldr	r3, [pc, #88]	; (8014914 <xTaskResumeAll+0x130>)
 80148ba:	2201      	movs	r2, #1
 80148bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	3b01      	subs	r3, #1
 80148c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d1f1      	bne.n	80148ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80148ca:	4b13      	ldr	r3, [pc, #76]	; (8014918 <xTaskResumeAll+0x134>)
 80148cc:	2200      	movs	r2, #0
 80148ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80148d0:	4b10      	ldr	r3, [pc, #64]	; (8014914 <xTaskResumeAll+0x130>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d009      	beq.n	80148ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80148d8:	2301      	movs	r3, #1
 80148da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80148dc:	4b0f      	ldr	r3, [pc, #60]	; (801491c <xTaskResumeAll+0x138>)
 80148de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148e2:	601a      	str	r2, [r3, #0]
 80148e4:	f3bf 8f4f 	dsb	sy
 80148e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80148ec:	f001 f9c2 	bl	8015c74 <vPortExitCritical>

	return xAlreadyYielded;
 80148f0:	68bb      	ldr	r3, [r7, #8]
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3710      	adds	r7, #16
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	24001488 	.word	0x24001488
 8014900:	24001460 	.word	0x24001460
 8014904:	24001420 	.word	0x24001420
 8014908:	24001468 	.word	0x24001468
 801490c:	24000f90 	.word	0x24000f90
 8014910:	24000f8c 	.word	0x24000f8c
 8014914:	24001474 	.word	0x24001474
 8014918:	24001470 	.word	0x24001470
 801491c:	e000ed04 	.word	0xe000ed04

08014920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014920:	b480      	push	{r7}
 8014922:	b083      	sub	sp, #12
 8014924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014926:	4b05      	ldr	r3, [pc, #20]	; (801493c <xTaskGetTickCount+0x1c>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801492c:	687b      	ldr	r3, [r7, #4]
}
 801492e:	4618      	mov	r0, r3
 8014930:	370c      	adds	r7, #12
 8014932:	46bd      	mov	sp, r7
 8014934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014938:	4770      	bx	lr
 801493a:	bf00      	nop
 801493c:	24001464 	.word	0x24001464

08014940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b086      	sub	sp, #24
 8014944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014946:	2300      	movs	r3, #0
 8014948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801494a:	4b53      	ldr	r3, [pc, #332]	; (8014a98 <xTaskIncrementTick+0x158>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2b00      	cmp	r3, #0
 8014950:	f040 8095 	bne.w	8014a7e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014954:	4b51      	ldr	r3, [pc, #324]	; (8014a9c <xTaskIncrementTick+0x15c>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	3301      	adds	r3, #1
 801495a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801495c:	4a4f      	ldr	r2, [pc, #316]	; (8014a9c <xTaskIncrementTick+0x15c>)
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014962:	693b      	ldr	r3, [r7, #16]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d120      	bne.n	80149aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014968:	4b4d      	ldr	r3, [pc, #308]	; (8014aa0 <xTaskIncrementTick+0x160>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d00a      	beq.n	8014988 <xTaskIncrementTick+0x48>
	__asm volatile
 8014972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014976:	f383 8811 	msr	BASEPRI, r3
 801497a:	f3bf 8f6f 	isb	sy
 801497e:	f3bf 8f4f 	dsb	sy
 8014982:	603b      	str	r3, [r7, #0]
}
 8014984:	bf00      	nop
 8014986:	e7fe      	b.n	8014986 <xTaskIncrementTick+0x46>
 8014988:	4b45      	ldr	r3, [pc, #276]	; (8014aa0 <xTaskIncrementTick+0x160>)
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	60fb      	str	r3, [r7, #12]
 801498e:	4b45      	ldr	r3, [pc, #276]	; (8014aa4 <xTaskIncrementTick+0x164>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	4a43      	ldr	r2, [pc, #268]	; (8014aa0 <xTaskIncrementTick+0x160>)
 8014994:	6013      	str	r3, [r2, #0]
 8014996:	4a43      	ldr	r2, [pc, #268]	; (8014aa4 <xTaskIncrementTick+0x164>)
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	6013      	str	r3, [r2, #0]
 801499c:	4b42      	ldr	r3, [pc, #264]	; (8014aa8 <xTaskIncrementTick+0x168>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	3301      	adds	r3, #1
 80149a2:	4a41      	ldr	r2, [pc, #260]	; (8014aa8 <xTaskIncrementTick+0x168>)
 80149a4:	6013      	str	r3, [r2, #0]
 80149a6:	f000 fb85 	bl	80150b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80149aa:	4b40      	ldr	r3, [pc, #256]	; (8014aac <xTaskIncrementTick+0x16c>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	693a      	ldr	r2, [r7, #16]
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d349      	bcc.n	8014a48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80149b4:	4b3a      	ldr	r3, [pc, #232]	; (8014aa0 <xTaskIncrementTick+0x160>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d104      	bne.n	80149c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149be:	4b3b      	ldr	r3, [pc, #236]	; (8014aac <xTaskIncrementTick+0x16c>)
 80149c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149c4:	601a      	str	r2, [r3, #0]
					break;
 80149c6:	e03f      	b.n	8014a48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149c8:	4b35      	ldr	r3, [pc, #212]	; (8014aa0 <xTaskIncrementTick+0x160>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	68db      	ldr	r3, [r3, #12]
 80149ce:	68db      	ldr	r3, [r3, #12]
 80149d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80149d8:	693a      	ldr	r2, [r7, #16]
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d203      	bcs.n	80149e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80149e0:	4a32      	ldr	r2, [pc, #200]	; (8014aac <xTaskIncrementTick+0x16c>)
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80149e6:	e02f      	b.n	8014a48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	3304      	adds	r3, #4
 80149ec:	4618      	mov	r0, r3
 80149ee:	f7fe ff99 	bl	8013924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d004      	beq.n	8014a04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	3318      	adds	r3, #24
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7fe ff90 	bl	8013924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a08:	4b29      	ldr	r3, [pc, #164]	; (8014ab0 <xTaskIncrementTick+0x170>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d903      	bls.n	8014a18 <xTaskIncrementTick+0xd8>
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a14:	4a26      	ldr	r2, [pc, #152]	; (8014ab0 <xTaskIncrementTick+0x170>)
 8014a16:	6013      	str	r3, [r2, #0]
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	009b      	lsls	r3, r3, #2
 8014a20:	4413      	add	r3, r2
 8014a22:	009b      	lsls	r3, r3, #2
 8014a24:	4a23      	ldr	r2, [pc, #140]	; (8014ab4 <xTaskIncrementTick+0x174>)
 8014a26:	441a      	add	r2, r3
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	3304      	adds	r3, #4
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	4610      	mov	r0, r2
 8014a30:	f7fe ff1b 	bl	801386a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a38:	4b1f      	ldr	r3, [pc, #124]	; (8014ab8 <xTaskIncrementTick+0x178>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d3b8      	bcc.n	80149b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014a42:	2301      	movs	r3, #1
 8014a44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a46:	e7b5      	b.n	80149b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a48:	4b1b      	ldr	r3, [pc, #108]	; (8014ab8 <xTaskIncrementTick+0x178>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a4e:	4919      	ldr	r1, [pc, #100]	; (8014ab4 <xTaskIncrementTick+0x174>)
 8014a50:	4613      	mov	r3, r2
 8014a52:	009b      	lsls	r3, r3, #2
 8014a54:	4413      	add	r3, r2
 8014a56:	009b      	lsls	r3, r3, #2
 8014a58:	440b      	add	r3, r1
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	2b01      	cmp	r3, #1
 8014a5e:	d901      	bls.n	8014a64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014a60:	2301      	movs	r3, #1
 8014a62:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014a64:	4b15      	ldr	r3, [pc, #84]	; (8014abc <xTaskIncrementTick+0x17c>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d101      	bne.n	8014a70 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014a6c:	f7ec f974 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014a70:	4b13      	ldr	r3, [pc, #76]	; (8014ac0 <xTaskIncrementTick+0x180>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d009      	beq.n	8014a8c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014a78:	2301      	movs	r3, #1
 8014a7a:	617b      	str	r3, [r7, #20]
 8014a7c:	e006      	b.n	8014a8c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014a7e:	4b0f      	ldr	r3, [pc, #60]	; (8014abc <xTaskIncrementTick+0x17c>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	3301      	adds	r3, #1
 8014a84:	4a0d      	ldr	r2, [pc, #52]	; (8014abc <xTaskIncrementTick+0x17c>)
 8014a86:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014a88:	f7ec f966 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014a8c:	697b      	ldr	r3, [r7, #20]
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3718      	adds	r7, #24
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	24001488 	.word	0x24001488
 8014a9c:	24001464 	.word	0x24001464
 8014aa0:	24001418 	.word	0x24001418
 8014aa4:	2400141c 	.word	0x2400141c
 8014aa8:	24001478 	.word	0x24001478
 8014aac:	24001480 	.word	0x24001480
 8014ab0:	24001468 	.word	0x24001468
 8014ab4:	24000f90 	.word	0x24000f90
 8014ab8:	24000f8c 	.word	0x24000f8c
 8014abc:	24001470 	.word	0x24001470
 8014ac0:	24001474 	.word	0x24001474

08014ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014aca:	4b2f      	ldr	r3, [pc, #188]	; (8014b88 <vTaskSwitchContext+0xc4>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d003      	beq.n	8014ada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014ad2:	4b2e      	ldr	r3, [pc, #184]	; (8014b8c <vTaskSwitchContext+0xc8>)
 8014ad4:	2201      	movs	r2, #1
 8014ad6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014ad8:	e052      	b.n	8014b80 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8014ada:	4b2c      	ldr	r3, [pc, #176]	; (8014b8c <vTaskSwitchContext+0xc8>)
 8014adc:	2200      	movs	r2, #0
 8014ade:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014ae0:	4b2b      	ldr	r3, [pc, #172]	; (8014b90 <vTaskSwitchContext+0xcc>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	681a      	ldr	r2, [r3, #0]
 8014ae6:	4b2a      	ldr	r3, [pc, #168]	; (8014b90 <vTaskSwitchContext+0xcc>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014aec:	429a      	cmp	r2, r3
 8014aee:	d808      	bhi.n	8014b02 <vTaskSwitchContext+0x3e>
 8014af0:	4b27      	ldr	r3, [pc, #156]	; (8014b90 <vTaskSwitchContext+0xcc>)
 8014af2:	681a      	ldr	r2, [r3, #0]
 8014af4:	4b26      	ldr	r3, [pc, #152]	; (8014b90 <vTaskSwitchContext+0xcc>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	3334      	adds	r3, #52	; 0x34
 8014afa:	4619      	mov	r1, r3
 8014afc:	4610      	mov	r0, r2
 8014afe:	f7ec f939 	bl	8000d74 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b02:	4b24      	ldr	r3, [pc, #144]	; (8014b94 <vTaskSwitchContext+0xd0>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	60fb      	str	r3, [r7, #12]
 8014b08:	e010      	b.n	8014b2c <vTaskSwitchContext+0x68>
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d10a      	bne.n	8014b26 <vTaskSwitchContext+0x62>
	__asm volatile
 8014b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b14:	f383 8811 	msr	BASEPRI, r3
 8014b18:	f3bf 8f6f 	isb	sy
 8014b1c:	f3bf 8f4f 	dsb	sy
 8014b20:	607b      	str	r3, [r7, #4]
}
 8014b22:	bf00      	nop
 8014b24:	e7fe      	b.n	8014b24 <vTaskSwitchContext+0x60>
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	3b01      	subs	r3, #1
 8014b2a:	60fb      	str	r3, [r7, #12]
 8014b2c:	491a      	ldr	r1, [pc, #104]	; (8014b98 <vTaskSwitchContext+0xd4>)
 8014b2e:	68fa      	ldr	r2, [r7, #12]
 8014b30:	4613      	mov	r3, r2
 8014b32:	009b      	lsls	r3, r3, #2
 8014b34:	4413      	add	r3, r2
 8014b36:	009b      	lsls	r3, r3, #2
 8014b38:	440b      	add	r3, r1
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d0e4      	beq.n	8014b0a <vTaskSwitchContext+0x46>
 8014b40:	68fa      	ldr	r2, [r7, #12]
 8014b42:	4613      	mov	r3, r2
 8014b44:	009b      	lsls	r3, r3, #2
 8014b46:	4413      	add	r3, r2
 8014b48:	009b      	lsls	r3, r3, #2
 8014b4a:	4a13      	ldr	r2, [pc, #76]	; (8014b98 <vTaskSwitchContext+0xd4>)
 8014b4c:	4413      	add	r3, r2
 8014b4e:	60bb      	str	r3, [r7, #8]
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	685b      	ldr	r3, [r3, #4]
 8014b54:	685a      	ldr	r2, [r3, #4]
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	605a      	str	r2, [r3, #4]
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	685a      	ldr	r2, [r3, #4]
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	3308      	adds	r3, #8
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d104      	bne.n	8014b70 <vTaskSwitchContext+0xac>
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	685b      	ldr	r3, [r3, #4]
 8014b6a:	685a      	ldr	r2, [r3, #4]
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	605a      	str	r2, [r3, #4]
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	68db      	ldr	r3, [r3, #12]
 8014b76:	4a06      	ldr	r2, [pc, #24]	; (8014b90 <vTaskSwitchContext+0xcc>)
 8014b78:	6013      	str	r3, [r2, #0]
 8014b7a:	4a06      	ldr	r2, [pc, #24]	; (8014b94 <vTaskSwitchContext+0xd0>)
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	6013      	str	r3, [r2, #0]
}
 8014b80:	bf00      	nop
 8014b82:	3710      	adds	r7, #16
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}
 8014b88:	24001488 	.word	0x24001488
 8014b8c:	24001474 	.word	0x24001474
 8014b90:	24000f8c 	.word	0x24000f8c
 8014b94:	24001468 	.word	0x24001468
 8014b98:	24000f90 	.word	0x24000f90

08014b9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b084      	sub	sp, #16
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
 8014ba4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d10a      	bne.n	8014bc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bb0:	f383 8811 	msr	BASEPRI, r3
 8014bb4:	f3bf 8f6f 	isb	sy
 8014bb8:	f3bf 8f4f 	dsb	sy
 8014bbc:	60fb      	str	r3, [r7, #12]
}
 8014bbe:	bf00      	nop
 8014bc0:	e7fe      	b.n	8014bc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014bc2:	4b07      	ldr	r3, [pc, #28]	; (8014be0 <vTaskPlaceOnEventList+0x44>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	3318      	adds	r3, #24
 8014bc8:	4619      	mov	r1, r3
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	f7fe fe71 	bl	80138b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014bd0:	2101      	movs	r1, #1
 8014bd2:	6838      	ldr	r0, [r7, #0]
 8014bd4:	f000 fb32 	bl	801523c <prvAddCurrentTaskToDelayedList>
}
 8014bd8:	bf00      	nop
 8014bda:	3710      	adds	r7, #16
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	24000f8c 	.word	0x24000f8c

08014be4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b086      	sub	sp, #24
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	60f8      	str	r0, [r7, #12]
 8014bec:	60b9      	str	r1, [r7, #8]
 8014bee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d10a      	bne.n	8014c0c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bfa:	f383 8811 	msr	BASEPRI, r3
 8014bfe:	f3bf 8f6f 	isb	sy
 8014c02:	f3bf 8f4f 	dsb	sy
 8014c06:	617b      	str	r3, [r7, #20]
}
 8014c08:	bf00      	nop
 8014c0a:	e7fe      	b.n	8014c0a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014c0c:	4b11      	ldr	r3, [pc, #68]	; (8014c54 <vTaskPlaceOnUnorderedEventList+0x70>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d10a      	bne.n	8014c2a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c18:	f383 8811 	msr	BASEPRI, r3
 8014c1c:	f3bf 8f6f 	isb	sy
 8014c20:	f3bf 8f4f 	dsb	sy
 8014c24:	613b      	str	r3, [r7, #16]
}
 8014c26:	bf00      	nop
 8014c28:	e7fe      	b.n	8014c28 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014c2a:	4b0b      	ldr	r3, [pc, #44]	; (8014c58 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	68ba      	ldr	r2, [r7, #8]
 8014c30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014c34:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c36:	4b08      	ldr	r3, [pc, #32]	; (8014c58 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	3318      	adds	r3, #24
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	68f8      	ldr	r0, [r7, #12]
 8014c40:	f7fe fe13 	bl	801386a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c44:	2101      	movs	r1, #1
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f000 faf8 	bl	801523c <prvAddCurrentTaskToDelayedList>
}
 8014c4c:	bf00      	nop
 8014c4e:	3718      	adds	r7, #24
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	24001488 	.word	0x24001488
 8014c58:	24000f8c 	.word	0x24000f8c

08014c5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b086      	sub	sp, #24
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	60f8      	str	r0, [r7, #12]
 8014c64:	60b9      	str	r1, [r7, #8]
 8014c66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d10a      	bne.n	8014c84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c72:	f383 8811 	msr	BASEPRI, r3
 8014c76:	f3bf 8f6f 	isb	sy
 8014c7a:	f3bf 8f4f 	dsb	sy
 8014c7e:	617b      	str	r3, [r7, #20]
}
 8014c80:	bf00      	nop
 8014c82:	e7fe      	b.n	8014c82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c84:	4b0a      	ldr	r3, [pc, #40]	; (8014cb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	3318      	adds	r3, #24
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	68f8      	ldr	r0, [r7, #12]
 8014c8e:	f7fe fdec 	bl	801386a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d002      	beq.n	8014c9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014c9e:	6879      	ldr	r1, [r7, #4]
 8014ca0:	68b8      	ldr	r0, [r7, #8]
 8014ca2:	f000 facb 	bl	801523c <prvAddCurrentTaskToDelayedList>
	}
 8014ca6:	bf00      	nop
 8014ca8:	3718      	adds	r7, #24
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	24000f8c 	.word	0x24000f8c

08014cb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b086      	sub	sp, #24
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	68db      	ldr	r3, [r3, #12]
 8014cc0:	68db      	ldr	r3, [r3, #12]
 8014cc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d10a      	bne.n	8014ce0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cce:	f383 8811 	msr	BASEPRI, r3
 8014cd2:	f3bf 8f6f 	isb	sy
 8014cd6:	f3bf 8f4f 	dsb	sy
 8014cda:	60fb      	str	r3, [r7, #12]
}
 8014cdc:	bf00      	nop
 8014cde:	e7fe      	b.n	8014cde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	3318      	adds	r3, #24
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7fe fe1d 	bl	8013924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cea:	4b1e      	ldr	r3, [pc, #120]	; (8014d64 <xTaskRemoveFromEventList+0xb0>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d11d      	bne.n	8014d2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	3304      	adds	r3, #4
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7fe fe14 	bl	8013924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d00:	4b19      	ldr	r3, [pc, #100]	; (8014d68 <xTaskRemoveFromEventList+0xb4>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d903      	bls.n	8014d10 <xTaskRemoveFromEventList+0x5c>
 8014d08:	693b      	ldr	r3, [r7, #16]
 8014d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d0c:	4a16      	ldr	r2, [pc, #88]	; (8014d68 <xTaskRemoveFromEventList+0xb4>)
 8014d0e:	6013      	str	r3, [r2, #0]
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d14:	4613      	mov	r3, r2
 8014d16:	009b      	lsls	r3, r3, #2
 8014d18:	4413      	add	r3, r2
 8014d1a:	009b      	lsls	r3, r3, #2
 8014d1c:	4a13      	ldr	r2, [pc, #76]	; (8014d6c <xTaskRemoveFromEventList+0xb8>)
 8014d1e:	441a      	add	r2, r3
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	3304      	adds	r3, #4
 8014d24:	4619      	mov	r1, r3
 8014d26:	4610      	mov	r0, r2
 8014d28:	f7fe fd9f 	bl	801386a <vListInsertEnd>
 8014d2c:	e005      	b.n	8014d3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	3318      	adds	r3, #24
 8014d32:	4619      	mov	r1, r3
 8014d34:	480e      	ldr	r0, [pc, #56]	; (8014d70 <xTaskRemoveFromEventList+0xbc>)
 8014d36:	f7fe fd98 	bl	801386a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d3e:	4b0d      	ldr	r3, [pc, #52]	; (8014d74 <xTaskRemoveFromEventList+0xc0>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d905      	bls.n	8014d54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014d48:	2301      	movs	r3, #1
 8014d4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014d4c:	4b0a      	ldr	r3, [pc, #40]	; (8014d78 <xTaskRemoveFromEventList+0xc4>)
 8014d4e:	2201      	movs	r2, #1
 8014d50:	601a      	str	r2, [r3, #0]
 8014d52:	e001      	b.n	8014d58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014d54:	2300      	movs	r3, #0
 8014d56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d58:	697b      	ldr	r3, [r7, #20]
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3718      	adds	r7, #24
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	24001488 	.word	0x24001488
 8014d68:	24001468 	.word	0x24001468
 8014d6c:	24000f90 	.word	0x24000f90
 8014d70:	24001420 	.word	0x24001420
 8014d74:	24000f8c 	.word	0x24000f8c
 8014d78:	24001474 	.word	0x24001474

08014d7c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b086      	sub	sp, #24
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014d86:	4b29      	ldr	r3, [pc, #164]	; (8014e2c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d10a      	bne.n	8014da4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d92:	f383 8811 	msr	BASEPRI, r3
 8014d96:	f3bf 8f6f 	isb	sy
 8014d9a:	f3bf 8f4f 	dsb	sy
 8014d9e:	613b      	str	r3, [r7, #16]
}
 8014da0:	bf00      	nop
 8014da2:	e7fe      	b.n	8014da2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	68db      	ldr	r3, [r3, #12]
 8014db2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014db4:	697b      	ldr	r3, [r7, #20]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d10a      	bne.n	8014dd0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dbe:	f383 8811 	msr	BASEPRI, r3
 8014dc2:	f3bf 8f6f 	isb	sy
 8014dc6:	f3bf 8f4f 	dsb	sy
 8014dca:	60fb      	str	r3, [r7, #12]
}
 8014dcc:	bf00      	nop
 8014dce:	e7fe      	b.n	8014dce <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	f7fe fda7 	bl	8013924 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014dd6:	697b      	ldr	r3, [r7, #20]
 8014dd8:	3304      	adds	r3, #4
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f7fe fda2 	bl	8013924 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014de4:	4b12      	ldr	r3, [pc, #72]	; (8014e30 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	429a      	cmp	r2, r3
 8014dea:	d903      	bls.n	8014df4 <vTaskRemoveFromUnorderedEventList+0x78>
 8014dec:	697b      	ldr	r3, [r7, #20]
 8014dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014df0:	4a0f      	ldr	r2, [pc, #60]	; (8014e30 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014df2:	6013      	str	r3, [r2, #0]
 8014df4:	697b      	ldr	r3, [r7, #20]
 8014df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014df8:	4613      	mov	r3, r2
 8014dfa:	009b      	lsls	r3, r3, #2
 8014dfc:	4413      	add	r3, r2
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	4a0c      	ldr	r2, [pc, #48]	; (8014e34 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014e02:	441a      	add	r2, r3
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	3304      	adds	r3, #4
 8014e08:	4619      	mov	r1, r3
 8014e0a:	4610      	mov	r0, r2
 8014e0c:	f7fe fd2d 	bl	801386a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e14:	4b08      	ldr	r3, [pc, #32]	; (8014e38 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d902      	bls.n	8014e24 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014e1e:	4b07      	ldr	r3, [pc, #28]	; (8014e3c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014e20:	2201      	movs	r2, #1
 8014e22:	601a      	str	r2, [r3, #0]
	}
}
 8014e24:	bf00      	nop
 8014e26:	3718      	adds	r7, #24
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	24001488 	.word	0x24001488
 8014e30:	24001468 	.word	0x24001468
 8014e34:	24000f90 	.word	0x24000f90
 8014e38:	24000f8c 	.word	0x24000f8c
 8014e3c:	24001474 	.word	0x24001474

08014e40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014e40:	b480      	push	{r7}
 8014e42:	b083      	sub	sp, #12
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014e48:	4b06      	ldr	r3, [pc, #24]	; (8014e64 <vTaskInternalSetTimeOutState+0x24>)
 8014e4a:	681a      	ldr	r2, [r3, #0]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014e50:	4b05      	ldr	r3, [pc, #20]	; (8014e68 <vTaskInternalSetTimeOutState+0x28>)
 8014e52:	681a      	ldr	r2, [r3, #0]
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	605a      	str	r2, [r3, #4]
}
 8014e58:	bf00      	nop
 8014e5a:	370c      	adds	r7, #12
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e62:	4770      	bx	lr
 8014e64:	24001478 	.word	0x24001478
 8014e68:	24001464 	.word	0x24001464

08014e6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b088      	sub	sp, #32
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d10a      	bne.n	8014e92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e80:	f383 8811 	msr	BASEPRI, r3
 8014e84:	f3bf 8f6f 	isb	sy
 8014e88:	f3bf 8f4f 	dsb	sy
 8014e8c:	613b      	str	r3, [r7, #16]
}
 8014e8e:	bf00      	nop
 8014e90:	e7fe      	b.n	8014e90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d10a      	bne.n	8014eae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e9c:	f383 8811 	msr	BASEPRI, r3
 8014ea0:	f3bf 8f6f 	isb	sy
 8014ea4:	f3bf 8f4f 	dsb	sy
 8014ea8:	60fb      	str	r3, [r7, #12]
}
 8014eaa:	bf00      	nop
 8014eac:	e7fe      	b.n	8014eac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014eae:	f000 feb1 	bl	8015c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014eb2:	4b1d      	ldr	r3, [pc, #116]	; (8014f28 <xTaskCheckForTimeOut+0xbc>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	685b      	ldr	r3, [r3, #4]
 8014ebc:	69ba      	ldr	r2, [r7, #24]
 8014ebe:	1ad3      	subs	r3, r2, r3
 8014ec0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014eca:	d102      	bne.n	8014ed2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	61fb      	str	r3, [r7, #28]
 8014ed0:	e023      	b.n	8014f1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	681a      	ldr	r2, [r3, #0]
 8014ed6:	4b15      	ldr	r3, [pc, #84]	; (8014f2c <xTaskCheckForTimeOut+0xc0>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d007      	beq.n	8014eee <xTaskCheckForTimeOut+0x82>
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	69ba      	ldr	r2, [r7, #24]
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	d302      	bcc.n	8014eee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014ee8:	2301      	movs	r3, #1
 8014eea:	61fb      	str	r3, [r7, #28]
 8014eec:	e015      	b.n	8014f1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	697a      	ldr	r2, [r7, #20]
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d20b      	bcs.n	8014f10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	681a      	ldr	r2, [r3, #0]
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	1ad2      	subs	r2, r2, r3
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014f04:	6878      	ldr	r0, [r7, #4]
 8014f06:	f7ff ff9b 	bl	8014e40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	61fb      	str	r3, [r7, #28]
 8014f0e:	e004      	b.n	8014f1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	2200      	movs	r2, #0
 8014f14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014f16:	2301      	movs	r3, #1
 8014f18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014f1a:	f000 feab 	bl	8015c74 <vPortExitCritical>

	return xReturn;
 8014f1e:	69fb      	ldr	r3, [r7, #28]
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3720      	adds	r7, #32
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	24001464 	.word	0x24001464
 8014f2c:	24001478 	.word	0x24001478

08014f30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014f30:	b480      	push	{r7}
 8014f32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014f34:	4b03      	ldr	r3, [pc, #12]	; (8014f44 <vTaskMissedYield+0x14>)
 8014f36:	2201      	movs	r2, #1
 8014f38:	601a      	str	r2, [r3, #0]
}
 8014f3a:	bf00      	nop
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f42:	4770      	bx	lr
 8014f44:	24001474 	.word	0x24001474

08014f48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b082      	sub	sp, #8
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014f50:	f000 f852 	bl	8014ff8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014f54:	4b06      	ldr	r3, [pc, #24]	; (8014f70 <prvIdleTask+0x28>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	d9f9      	bls.n	8014f50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014f5c:	4b05      	ldr	r3, [pc, #20]	; (8014f74 <prvIdleTask+0x2c>)
 8014f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f62:	601a      	str	r2, [r3, #0]
 8014f64:	f3bf 8f4f 	dsb	sy
 8014f68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014f6c:	e7f0      	b.n	8014f50 <prvIdleTask+0x8>
 8014f6e:	bf00      	nop
 8014f70:	24000f90 	.word	0x24000f90
 8014f74:	e000ed04 	.word	0xe000ed04

08014f78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f7e:	2300      	movs	r3, #0
 8014f80:	607b      	str	r3, [r7, #4]
 8014f82:	e00c      	b.n	8014f9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014f84:	687a      	ldr	r2, [r7, #4]
 8014f86:	4613      	mov	r3, r2
 8014f88:	009b      	lsls	r3, r3, #2
 8014f8a:	4413      	add	r3, r2
 8014f8c:	009b      	lsls	r3, r3, #2
 8014f8e:	4a12      	ldr	r2, [pc, #72]	; (8014fd8 <prvInitialiseTaskLists+0x60>)
 8014f90:	4413      	add	r3, r2
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7fe fc3c 	bl	8013810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	3301      	adds	r3, #1
 8014f9c:	607b      	str	r3, [r7, #4]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2b37      	cmp	r3, #55	; 0x37
 8014fa2:	d9ef      	bls.n	8014f84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014fa4:	480d      	ldr	r0, [pc, #52]	; (8014fdc <prvInitialiseTaskLists+0x64>)
 8014fa6:	f7fe fc33 	bl	8013810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014faa:	480d      	ldr	r0, [pc, #52]	; (8014fe0 <prvInitialiseTaskLists+0x68>)
 8014fac:	f7fe fc30 	bl	8013810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014fb0:	480c      	ldr	r0, [pc, #48]	; (8014fe4 <prvInitialiseTaskLists+0x6c>)
 8014fb2:	f7fe fc2d 	bl	8013810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014fb6:	480c      	ldr	r0, [pc, #48]	; (8014fe8 <prvInitialiseTaskLists+0x70>)
 8014fb8:	f7fe fc2a 	bl	8013810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014fbc:	480b      	ldr	r0, [pc, #44]	; (8014fec <prvInitialiseTaskLists+0x74>)
 8014fbe:	f7fe fc27 	bl	8013810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014fc2:	4b0b      	ldr	r3, [pc, #44]	; (8014ff0 <prvInitialiseTaskLists+0x78>)
 8014fc4:	4a05      	ldr	r2, [pc, #20]	; (8014fdc <prvInitialiseTaskLists+0x64>)
 8014fc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014fc8:	4b0a      	ldr	r3, [pc, #40]	; (8014ff4 <prvInitialiseTaskLists+0x7c>)
 8014fca:	4a05      	ldr	r2, [pc, #20]	; (8014fe0 <prvInitialiseTaskLists+0x68>)
 8014fcc:	601a      	str	r2, [r3, #0]
}
 8014fce:	bf00      	nop
 8014fd0:	3708      	adds	r7, #8
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	24000f90 	.word	0x24000f90
 8014fdc:	240013f0 	.word	0x240013f0
 8014fe0:	24001404 	.word	0x24001404
 8014fe4:	24001420 	.word	0x24001420
 8014fe8:	24001434 	.word	0x24001434
 8014fec:	2400144c 	.word	0x2400144c
 8014ff0:	24001418 	.word	0x24001418
 8014ff4:	2400141c 	.word	0x2400141c

08014ff8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b082      	sub	sp, #8
 8014ffc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014ffe:	e019      	b.n	8015034 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015000:	f000 fe08 	bl	8015c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015004:	4b10      	ldr	r3, [pc, #64]	; (8015048 <prvCheckTasksWaitingTermination+0x50>)
 8015006:	68db      	ldr	r3, [r3, #12]
 8015008:	68db      	ldr	r3, [r3, #12]
 801500a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	3304      	adds	r3, #4
 8015010:	4618      	mov	r0, r3
 8015012:	f7fe fc87 	bl	8013924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015016:	4b0d      	ldr	r3, [pc, #52]	; (801504c <prvCheckTasksWaitingTermination+0x54>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	3b01      	subs	r3, #1
 801501c:	4a0b      	ldr	r2, [pc, #44]	; (801504c <prvCheckTasksWaitingTermination+0x54>)
 801501e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015020:	4b0b      	ldr	r3, [pc, #44]	; (8015050 <prvCheckTasksWaitingTermination+0x58>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	3b01      	subs	r3, #1
 8015026:	4a0a      	ldr	r2, [pc, #40]	; (8015050 <prvCheckTasksWaitingTermination+0x58>)
 8015028:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801502a:	f000 fe23 	bl	8015c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801502e:	6878      	ldr	r0, [r7, #4]
 8015030:	f000 f810 	bl	8015054 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015034:	4b06      	ldr	r3, [pc, #24]	; (8015050 <prvCheckTasksWaitingTermination+0x58>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d1e1      	bne.n	8015000 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801503c:	bf00      	nop
 801503e:	bf00      	nop
 8015040:	3708      	adds	r7, #8
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}
 8015046:	bf00      	nop
 8015048:	24001434 	.word	0x24001434
 801504c:	24001460 	.word	0x24001460
 8015050:	24001448 	.word	0x24001448

08015054 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015062:	2b00      	cmp	r3, #0
 8015064:	d108      	bne.n	8015078 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801506a:	4618      	mov	r0, r3
 801506c:	f000 ffc0 	bl	8015ff0 <vPortFree>
				vPortFree( pxTCB );
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f000 ffbd 	bl	8015ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015076:	e018      	b.n	80150aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801507e:	2b01      	cmp	r3, #1
 8015080:	d103      	bne.n	801508a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f000 ffb4 	bl	8015ff0 <vPortFree>
	}
 8015088:	e00f      	b.n	80150aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015090:	2b02      	cmp	r3, #2
 8015092:	d00a      	beq.n	80150aa <prvDeleteTCB+0x56>
	__asm volatile
 8015094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015098:	f383 8811 	msr	BASEPRI, r3
 801509c:	f3bf 8f6f 	isb	sy
 80150a0:	f3bf 8f4f 	dsb	sy
 80150a4:	60fb      	str	r3, [r7, #12]
}
 80150a6:	bf00      	nop
 80150a8:	e7fe      	b.n	80150a8 <prvDeleteTCB+0x54>
	}
 80150aa:	bf00      	nop
 80150ac:	3710      	adds	r7, #16
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}
	...

080150b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80150b4:	b480      	push	{r7}
 80150b6:	b083      	sub	sp, #12
 80150b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80150ba:	4b0c      	ldr	r3, [pc, #48]	; (80150ec <prvResetNextTaskUnblockTime+0x38>)
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d104      	bne.n	80150ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80150c4:	4b0a      	ldr	r3, [pc, #40]	; (80150f0 <prvResetNextTaskUnblockTime+0x3c>)
 80150c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80150ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80150cc:	e008      	b.n	80150e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150ce:	4b07      	ldr	r3, [pc, #28]	; (80150ec <prvResetNextTaskUnblockTime+0x38>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	68db      	ldr	r3, [r3, #12]
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	4a04      	ldr	r2, [pc, #16]	; (80150f0 <prvResetNextTaskUnblockTime+0x3c>)
 80150de:	6013      	str	r3, [r2, #0]
}
 80150e0:	bf00      	nop
 80150e2:	370c      	adds	r7, #12
 80150e4:	46bd      	mov	sp, r7
 80150e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ea:	4770      	bx	lr
 80150ec:	24001418 	.word	0x24001418
 80150f0:	24001480 	.word	0x24001480

080150f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80150f4:	b480      	push	{r7}
 80150f6:	b083      	sub	sp, #12
 80150f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80150fa:	4b0b      	ldr	r3, [pc, #44]	; (8015128 <xTaskGetSchedulerState+0x34>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d102      	bne.n	8015108 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015102:	2301      	movs	r3, #1
 8015104:	607b      	str	r3, [r7, #4]
 8015106:	e008      	b.n	801511a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015108:	4b08      	ldr	r3, [pc, #32]	; (801512c <xTaskGetSchedulerState+0x38>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d102      	bne.n	8015116 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015110:	2302      	movs	r3, #2
 8015112:	607b      	str	r3, [r7, #4]
 8015114:	e001      	b.n	801511a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015116:	2300      	movs	r3, #0
 8015118:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801511a:	687b      	ldr	r3, [r7, #4]
	}
 801511c:	4618      	mov	r0, r3
 801511e:	370c      	adds	r7, #12
 8015120:	46bd      	mov	sp, r7
 8015122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015126:	4770      	bx	lr
 8015128:	2400146c 	.word	0x2400146c
 801512c:	24001488 	.word	0x24001488

08015130 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015130:	b580      	push	{r7, lr}
 8015132:	b086      	sub	sp, #24
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801513c:	2300      	movs	r3, #0
 801513e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d056      	beq.n	80151f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015146:	4b2e      	ldr	r3, [pc, #184]	; (8015200 <xTaskPriorityDisinherit+0xd0>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	693a      	ldr	r2, [r7, #16]
 801514c:	429a      	cmp	r2, r3
 801514e:	d00a      	beq.n	8015166 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015154:	f383 8811 	msr	BASEPRI, r3
 8015158:	f3bf 8f6f 	isb	sy
 801515c:	f3bf 8f4f 	dsb	sy
 8015160:	60fb      	str	r3, [r7, #12]
}
 8015162:	bf00      	nop
 8015164:	e7fe      	b.n	8015164 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801516a:	2b00      	cmp	r3, #0
 801516c:	d10a      	bne.n	8015184 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015172:	f383 8811 	msr	BASEPRI, r3
 8015176:	f3bf 8f6f 	isb	sy
 801517a:	f3bf 8f4f 	dsb	sy
 801517e:	60bb      	str	r3, [r7, #8]
}
 8015180:	bf00      	nop
 8015182:	e7fe      	b.n	8015182 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015188:	1e5a      	subs	r2, r3, #1
 801518a:	693b      	ldr	r3, [r7, #16]
 801518c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015196:	429a      	cmp	r2, r3
 8015198:	d02c      	beq.n	80151f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d128      	bne.n	80151f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	3304      	adds	r3, #4
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7fe fbbc 	bl	8013924 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151c4:	4b0f      	ldr	r3, [pc, #60]	; (8015204 <xTaskPriorityDisinherit+0xd4>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d903      	bls.n	80151d4 <xTaskPriorityDisinherit+0xa4>
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151d0:	4a0c      	ldr	r2, [pc, #48]	; (8015204 <xTaskPriorityDisinherit+0xd4>)
 80151d2:	6013      	str	r3, [r2, #0]
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151d8:	4613      	mov	r3, r2
 80151da:	009b      	lsls	r3, r3, #2
 80151dc:	4413      	add	r3, r2
 80151de:	009b      	lsls	r3, r3, #2
 80151e0:	4a09      	ldr	r2, [pc, #36]	; (8015208 <xTaskPriorityDisinherit+0xd8>)
 80151e2:	441a      	add	r2, r3
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	3304      	adds	r3, #4
 80151e8:	4619      	mov	r1, r3
 80151ea:	4610      	mov	r0, r2
 80151ec:	f7fe fb3d 	bl	801386a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80151f0:	2301      	movs	r3, #1
 80151f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80151f4:	697b      	ldr	r3, [r7, #20]
	}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3718      	adds	r7, #24
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	24000f8c 	.word	0x24000f8c
 8015204:	24001468 	.word	0x24001468
 8015208:	24000f90 	.word	0x24000f90

0801520c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801520c:	b480      	push	{r7}
 801520e:	b083      	sub	sp, #12
 8015210:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015212:	4b09      	ldr	r3, [pc, #36]	; (8015238 <uxTaskResetEventItemValue+0x2c>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	699b      	ldr	r3, [r3, #24]
 8015218:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801521a:	4b07      	ldr	r3, [pc, #28]	; (8015238 <uxTaskResetEventItemValue+0x2c>)
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015220:	4b05      	ldr	r3, [pc, #20]	; (8015238 <uxTaskResetEventItemValue+0x2c>)
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015228:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801522a:	687b      	ldr	r3, [r7, #4]
}
 801522c:	4618      	mov	r0, r3
 801522e:	370c      	adds	r7, #12
 8015230:	46bd      	mov	sp, r7
 8015232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015236:	4770      	bx	lr
 8015238:	24000f8c 	.word	0x24000f8c

0801523c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b084      	sub	sp, #16
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015246:	4b21      	ldr	r3, [pc, #132]	; (80152cc <prvAddCurrentTaskToDelayedList+0x90>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801524c:	4b20      	ldr	r3, [pc, #128]	; (80152d0 <prvAddCurrentTaskToDelayedList+0x94>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	3304      	adds	r3, #4
 8015252:	4618      	mov	r0, r3
 8015254:	f7fe fb66 	bl	8013924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801525e:	d10a      	bne.n	8015276 <prvAddCurrentTaskToDelayedList+0x3a>
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d007      	beq.n	8015276 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015266:	4b1a      	ldr	r3, [pc, #104]	; (80152d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	3304      	adds	r3, #4
 801526c:	4619      	mov	r1, r3
 801526e:	4819      	ldr	r0, [pc, #100]	; (80152d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8015270:	f7fe fafb 	bl	801386a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015274:	e026      	b.n	80152c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015276:	68fa      	ldr	r2, [r7, #12]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	4413      	add	r3, r2
 801527c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801527e:	4b14      	ldr	r3, [pc, #80]	; (80152d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	68ba      	ldr	r2, [r7, #8]
 8015284:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015286:	68ba      	ldr	r2, [r7, #8]
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	429a      	cmp	r2, r3
 801528c:	d209      	bcs.n	80152a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801528e:	4b12      	ldr	r3, [pc, #72]	; (80152d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015290:	681a      	ldr	r2, [r3, #0]
 8015292:	4b0f      	ldr	r3, [pc, #60]	; (80152d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	3304      	adds	r3, #4
 8015298:	4619      	mov	r1, r3
 801529a:	4610      	mov	r0, r2
 801529c:	f7fe fb09 	bl	80138b2 <vListInsert>
}
 80152a0:	e010      	b.n	80152c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152a2:	4b0e      	ldr	r3, [pc, #56]	; (80152dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80152a4:	681a      	ldr	r2, [r3, #0]
 80152a6:	4b0a      	ldr	r3, [pc, #40]	; (80152d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	3304      	adds	r3, #4
 80152ac:	4619      	mov	r1, r3
 80152ae:	4610      	mov	r0, r2
 80152b0:	f7fe faff 	bl	80138b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80152b4:	4b0a      	ldr	r3, [pc, #40]	; (80152e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	68ba      	ldr	r2, [r7, #8]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d202      	bcs.n	80152c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80152be:	4a08      	ldr	r2, [pc, #32]	; (80152e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	6013      	str	r3, [r2, #0]
}
 80152c4:	bf00      	nop
 80152c6:	3710      	adds	r7, #16
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	24001464 	.word	0x24001464
 80152d0:	24000f8c 	.word	0x24000f8c
 80152d4:	2400144c 	.word	0x2400144c
 80152d8:	2400141c 	.word	0x2400141c
 80152dc:	24001418 	.word	0x24001418
 80152e0:	24001480 	.word	0x24001480

080152e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b08a      	sub	sp, #40	; 0x28
 80152e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80152ea:	2300      	movs	r3, #0
 80152ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80152ee:	f000 fb07 	bl	8015900 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80152f2:	4b1c      	ldr	r3, [pc, #112]	; (8015364 <xTimerCreateTimerTask+0x80>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d021      	beq.n	801533e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80152fa:	2300      	movs	r3, #0
 80152fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80152fe:	2300      	movs	r3, #0
 8015300:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015302:	1d3a      	adds	r2, r7, #4
 8015304:	f107 0108 	add.w	r1, r7, #8
 8015308:	f107 030c 	add.w	r3, r7, #12
 801530c:	4618      	mov	r0, r3
 801530e:	f7fd fff9 	bl	8013304 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015312:	6879      	ldr	r1, [r7, #4]
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	68fa      	ldr	r2, [r7, #12]
 8015318:	9202      	str	r2, [sp, #8]
 801531a:	9301      	str	r3, [sp, #4]
 801531c:	2302      	movs	r3, #2
 801531e:	9300      	str	r3, [sp, #0]
 8015320:	2300      	movs	r3, #0
 8015322:	460a      	mov	r2, r1
 8015324:	4910      	ldr	r1, [pc, #64]	; (8015368 <xTimerCreateTimerTask+0x84>)
 8015326:	4811      	ldr	r0, [pc, #68]	; (801536c <xTimerCreateTimerTask+0x88>)
 8015328:	f7ff f812 	bl	8014350 <xTaskCreateStatic>
 801532c:	4603      	mov	r3, r0
 801532e:	4a10      	ldr	r2, [pc, #64]	; (8015370 <xTimerCreateTimerTask+0x8c>)
 8015330:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015332:	4b0f      	ldr	r3, [pc, #60]	; (8015370 <xTimerCreateTimerTask+0x8c>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d001      	beq.n	801533e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801533a:	2301      	movs	r3, #1
 801533c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d10a      	bne.n	801535a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015348:	f383 8811 	msr	BASEPRI, r3
 801534c:	f3bf 8f6f 	isb	sy
 8015350:	f3bf 8f4f 	dsb	sy
 8015354:	613b      	str	r3, [r7, #16]
}
 8015356:	bf00      	nop
 8015358:	e7fe      	b.n	8015358 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801535a:	697b      	ldr	r3, [r7, #20]
}
 801535c:	4618      	mov	r0, r3
 801535e:	3718      	adds	r7, #24
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	240014bc 	.word	0x240014bc
 8015368:	08016f18 	.word	0x08016f18
 801536c:	080154a9 	.word	0x080154a9
 8015370:	240014c0 	.word	0x240014c0

08015374 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b08a      	sub	sp, #40	; 0x28
 8015378:	af00      	add	r7, sp, #0
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	60b9      	str	r1, [r7, #8]
 801537e:	607a      	str	r2, [r7, #4]
 8015380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015382:	2300      	movs	r3, #0
 8015384:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d10a      	bne.n	80153a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 801538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015390:	f383 8811 	msr	BASEPRI, r3
 8015394:	f3bf 8f6f 	isb	sy
 8015398:	f3bf 8f4f 	dsb	sy
 801539c:	623b      	str	r3, [r7, #32]
}
 801539e:	bf00      	nop
 80153a0:	e7fe      	b.n	80153a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80153a2:	4b1a      	ldr	r3, [pc, #104]	; (801540c <xTimerGenericCommand+0x98>)
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d02a      	beq.n	8015400 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80153b6:	68bb      	ldr	r3, [r7, #8]
 80153b8:	2b05      	cmp	r3, #5
 80153ba:	dc18      	bgt.n	80153ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80153bc:	f7ff fe9a 	bl	80150f4 <xTaskGetSchedulerState>
 80153c0:	4603      	mov	r3, r0
 80153c2:	2b02      	cmp	r3, #2
 80153c4:	d109      	bne.n	80153da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80153c6:	4b11      	ldr	r3, [pc, #68]	; (801540c <xTimerGenericCommand+0x98>)
 80153c8:	6818      	ldr	r0, [r3, #0]
 80153ca:	f107 0110 	add.w	r1, r7, #16
 80153ce:	2300      	movs	r3, #0
 80153d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153d2:	f7fe fbd5 	bl	8013b80 <xQueueGenericSend>
 80153d6:	6278      	str	r0, [r7, #36]	; 0x24
 80153d8:	e012      	b.n	8015400 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80153da:	4b0c      	ldr	r3, [pc, #48]	; (801540c <xTimerGenericCommand+0x98>)
 80153dc:	6818      	ldr	r0, [r3, #0]
 80153de:	f107 0110 	add.w	r1, r7, #16
 80153e2:	2300      	movs	r3, #0
 80153e4:	2200      	movs	r2, #0
 80153e6:	f7fe fbcb 	bl	8013b80 <xQueueGenericSend>
 80153ea:	6278      	str	r0, [r7, #36]	; 0x24
 80153ec:	e008      	b.n	8015400 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80153ee:	4b07      	ldr	r3, [pc, #28]	; (801540c <xTimerGenericCommand+0x98>)
 80153f0:	6818      	ldr	r0, [r3, #0]
 80153f2:	f107 0110 	add.w	r1, r7, #16
 80153f6:	2300      	movs	r3, #0
 80153f8:	683a      	ldr	r2, [r7, #0]
 80153fa:	f7fe fcbf 	bl	8013d7c <xQueueGenericSendFromISR>
 80153fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015402:	4618      	mov	r0, r3
 8015404:	3728      	adds	r7, #40	; 0x28
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	240014bc 	.word	0x240014bc

08015410 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b088      	sub	sp, #32
 8015414:	af02      	add	r7, sp, #8
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801541a:	4b22      	ldr	r3, [pc, #136]	; (80154a4 <prvProcessExpiredTimer+0x94>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	68db      	ldr	r3, [r3, #12]
 8015422:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	3304      	adds	r3, #4
 8015428:	4618      	mov	r0, r3
 801542a:	f7fe fa7b 	bl	8013924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801542e:	697b      	ldr	r3, [r7, #20]
 8015430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015434:	f003 0304 	and.w	r3, r3, #4
 8015438:	2b00      	cmp	r3, #0
 801543a:	d022      	beq.n	8015482 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	699a      	ldr	r2, [r3, #24]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	18d1      	adds	r1, r2, r3
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	683a      	ldr	r2, [r7, #0]
 8015448:	6978      	ldr	r0, [r7, #20]
 801544a:	f000 f8d1 	bl	80155f0 <prvInsertTimerInActiveList>
 801544e:	4603      	mov	r3, r0
 8015450:	2b00      	cmp	r3, #0
 8015452:	d01f      	beq.n	8015494 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015454:	2300      	movs	r3, #0
 8015456:	9300      	str	r3, [sp, #0]
 8015458:	2300      	movs	r3, #0
 801545a:	687a      	ldr	r2, [r7, #4]
 801545c:	2100      	movs	r1, #0
 801545e:	6978      	ldr	r0, [r7, #20]
 8015460:	f7ff ff88 	bl	8015374 <xTimerGenericCommand>
 8015464:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015466:	693b      	ldr	r3, [r7, #16]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d113      	bne.n	8015494 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015470:	f383 8811 	msr	BASEPRI, r3
 8015474:	f3bf 8f6f 	isb	sy
 8015478:	f3bf 8f4f 	dsb	sy
 801547c:	60fb      	str	r3, [r7, #12]
}
 801547e:	bf00      	nop
 8015480:	e7fe      	b.n	8015480 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015482:	697b      	ldr	r3, [r7, #20]
 8015484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015488:	f023 0301 	bic.w	r3, r3, #1
 801548c:	b2da      	uxtb	r2, r3
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	6a1b      	ldr	r3, [r3, #32]
 8015498:	6978      	ldr	r0, [r7, #20]
 801549a:	4798      	blx	r3
}
 801549c:	bf00      	nop
 801549e:	3718      	adds	r7, #24
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}
 80154a4:	240014b4 	.word	0x240014b4

080154a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b084      	sub	sp, #16
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80154b0:	f107 0308 	add.w	r3, r7, #8
 80154b4:	4618      	mov	r0, r3
 80154b6:	f000 f857 	bl	8015568 <prvGetNextExpireTime>
 80154ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	4619      	mov	r1, r3
 80154c0:	68f8      	ldr	r0, [r7, #12]
 80154c2:	f000 f803 	bl	80154cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80154c6:	f000 f8d5 	bl	8015674 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80154ca:	e7f1      	b.n	80154b0 <prvTimerTask+0x8>

080154cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b084      	sub	sp, #16
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
 80154d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80154d6:	f7ff f977 	bl	80147c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80154da:	f107 0308 	add.w	r3, r7, #8
 80154de:	4618      	mov	r0, r3
 80154e0:	f000 f866 	bl	80155b0 <prvSampleTimeNow>
 80154e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d130      	bne.n	801554e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d10a      	bne.n	8015508 <prvProcessTimerOrBlockTask+0x3c>
 80154f2:	687a      	ldr	r2, [r7, #4]
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	429a      	cmp	r2, r3
 80154f8:	d806      	bhi.n	8015508 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80154fa:	f7ff f973 	bl	80147e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80154fe:	68f9      	ldr	r1, [r7, #12]
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	f7ff ff85 	bl	8015410 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015506:	e024      	b.n	8015552 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d008      	beq.n	8015520 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801550e:	4b13      	ldr	r3, [pc, #76]	; (801555c <prvProcessTimerOrBlockTask+0x90>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d101      	bne.n	801551c <prvProcessTimerOrBlockTask+0x50>
 8015518:	2301      	movs	r3, #1
 801551a:	e000      	b.n	801551e <prvProcessTimerOrBlockTask+0x52>
 801551c:	2300      	movs	r3, #0
 801551e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015520:	4b0f      	ldr	r3, [pc, #60]	; (8015560 <prvProcessTimerOrBlockTask+0x94>)
 8015522:	6818      	ldr	r0, [r3, #0]
 8015524:	687a      	ldr	r2, [r7, #4]
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	1ad3      	subs	r3, r2, r3
 801552a:	683a      	ldr	r2, [r7, #0]
 801552c:	4619      	mov	r1, r3
 801552e:	f7fe fedb 	bl	80142e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015532:	f7ff f957 	bl	80147e4 <xTaskResumeAll>
 8015536:	4603      	mov	r3, r0
 8015538:	2b00      	cmp	r3, #0
 801553a:	d10a      	bne.n	8015552 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801553c:	4b09      	ldr	r3, [pc, #36]	; (8015564 <prvProcessTimerOrBlockTask+0x98>)
 801553e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015542:	601a      	str	r2, [r3, #0]
 8015544:	f3bf 8f4f 	dsb	sy
 8015548:	f3bf 8f6f 	isb	sy
}
 801554c:	e001      	b.n	8015552 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801554e:	f7ff f949 	bl	80147e4 <xTaskResumeAll>
}
 8015552:	bf00      	nop
 8015554:	3710      	adds	r7, #16
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}
 801555a:	bf00      	nop
 801555c:	240014b8 	.word	0x240014b8
 8015560:	240014bc 	.word	0x240014bc
 8015564:	e000ed04 	.word	0xe000ed04

08015568 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015568:	b480      	push	{r7}
 801556a:	b085      	sub	sp, #20
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015570:	4b0e      	ldr	r3, [pc, #56]	; (80155ac <prvGetNextExpireTime+0x44>)
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d101      	bne.n	801557e <prvGetNextExpireTime+0x16>
 801557a:	2201      	movs	r2, #1
 801557c:	e000      	b.n	8015580 <prvGetNextExpireTime+0x18>
 801557e:	2200      	movs	r2, #0
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d105      	bne.n	8015598 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801558c:	4b07      	ldr	r3, [pc, #28]	; (80155ac <prvGetNextExpireTime+0x44>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	60fb      	str	r3, [r7, #12]
 8015596:	e001      	b.n	801559c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015598:	2300      	movs	r3, #0
 801559a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801559c:	68fb      	ldr	r3, [r7, #12]
}
 801559e:	4618      	mov	r0, r3
 80155a0:	3714      	adds	r7, #20
 80155a2:	46bd      	mov	sp, r7
 80155a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a8:	4770      	bx	lr
 80155aa:	bf00      	nop
 80155ac:	240014b4 	.word	0x240014b4

080155b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b084      	sub	sp, #16
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80155b8:	f7ff f9b2 	bl	8014920 <xTaskGetTickCount>
 80155bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80155be:	4b0b      	ldr	r3, [pc, #44]	; (80155ec <prvSampleTimeNow+0x3c>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	68fa      	ldr	r2, [r7, #12]
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d205      	bcs.n	80155d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80155c8:	f000 f936 	bl	8015838 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	2201      	movs	r2, #1
 80155d0:	601a      	str	r2, [r3, #0]
 80155d2:	e002      	b.n	80155da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2200      	movs	r2, #0
 80155d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80155da:	4a04      	ldr	r2, [pc, #16]	; (80155ec <prvSampleTimeNow+0x3c>)
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80155e0:	68fb      	ldr	r3, [r7, #12]
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3710      	adds	r7, #16
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}
 80155ea:	bf00      	nop
 80155ec:	240014c4 	.word	0x240014c4

080155f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b086      	sub	sp, #24
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	60f8      	str	r0, [r7, #12]
 80155f8:	60b9      	str	r1, [r7, #8]
 80155fa:	607a      	str	r2, [r7, #4]
 80155fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80155fe:	2300      	movs	r3, #0
 8015600:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	68ba      	ldr	r2, [r7, #8]
 8015606:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	68fa      	ldr	r2, [r7, #12]
 801560c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801560e:	68ba      	ldr	r2, [r7, #8]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	429a      	cmp	r2, r3
 8015614:	d812      	bhi.n	801563c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015616:	687a      	ldr	r2, [r7, #4]
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	1ad2      	subs	r2, r2, r3
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	699b      	ldr	r3, [r3, #24]
 8015620:	429a      	cmp	r2, r3
 8015622:	d302      	bcc.n	801562a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015624:	2301      	movs	r3, #1
 8015626:	617b      	str	r3, [r7, #20]
 8015628:	e01b      	b.n	8015662 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801562a:	4b10      	ldr	r3, [pc, #64]	; (801566c <prvInsertTimerInActiveList+0x7c>)
 801562c:	681a      	ldr	r2, [r3, #0]
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	3304      	adds	r3, #4
 8015632:	4619      	mov	r1, r3
 8015634:	4610      	mov	r0, r2
 8015636:	f7fe f93c 	bl	80138b2 <vListInsert>
 801563a:	e012      	b.n	8015662 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	429a      	cmp	r2, r3
 8015642:	d206      	bcs.n	8015652 <prvInsertTimerInActiveList+0x62>
 8015644:	68ba      	ldr	r2, [r7, #8]
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	429a      	cmp	r2, r3
 801564a:	d302      	bcc.n	8015652 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801564c:	2301      	movs	r3, #1
 801564e:	617b      	str	r3, [r7, #20]
 8015650:	e007      	b.n	8015662 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015652:	4b07      	ldr	r3, [pc, #28]	; (8015670 <prvInsertTimerInActiveList+0x80>)
 8015654:	681a      	ldr	r2, [r3, #0]
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	3304      	adds	r3, #4
 801565a:	4619      	mov	r1, r3
 801565c:	4610      	mov	r0, r2
 801565e:	f7fe f928 	bl	80138b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015662:	697b      	ldr	r3, [r7, #20]
}
 8015664:	4618      	mov	r0, r3
 8015666:	3718      	adds	r7, #24
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}
 801566c:	240014b8 	.word	0x240014b8
 8015670:	240014b4 	.word	0x240014b4

08015674 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b08e      	sub	sp, #56	; 0x38
 8015678:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801567a:	e0ca      	b.n	8015812 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2b00      	cmp	r3, #0
 8015680:	da18      	bge.n	80156b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015682:	1d3b      	adds	r3, r7, #4
 8015684:	3304      	adds	r3, #4
 8015686:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801568a:	2b00      	cmp	r3, #0
 801568c:	d10a      	bne.n	80156a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015692:	f383 8811 	msr	BASEPRI, r3
 8015696:	f3bf 8f6f 	isb	sy
 801569a:	f3bf 8f4f 	dsb	sy
 801569e:	61fb      	str	r3, [r7, #28]
}
 80156a0:	bf00      	nop
 80156a2:	e7fe      	b.n	80156a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80156a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156aa:	6850      	ldr	r0, [r2, #4]
 80156ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156ae:	6892      	ldr	r2, [r2, #8]
 80156b0:	4611      	mov	r1, r2
 80156b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	f2c0 80aa 	blt.w	8015810 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80156c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c2:	695b      	ldr	r3, [r3, #20]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d004      	beq.n	80156d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80156c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ca:	3304      	adds	r3, #4
 80156cc:	4618      	mov	r0, r3
 80156ce:	f7fe f929 	bl	8013924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80156d2:	463b      	mov	r3, r7
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7ff ff6b 	bl	80155b0 <prvSampleTimeNow>
 80156da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2b09      	cmp	r3, #9
 80156e0:	f200 8097 	bhi.w	8015812 <prvProcessReceivedCommands+0x19e>
 80156e4:	a201      	add	r2, pc, #4	; (adr r2, 80156ec <prvProcessReceivedCommands+0x78>)
 80156e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156ea:	bf00      	nop
 80156ec:	08015715 	.word	0x08015715
 80156f0:	08015715 	.word	0x08015715
 80156f4:	08015715 	.word	0x08015715
 80156f8:	08015789 	.word	0x08015789
 80156fc:	0801579d 	.word	0x0801579d
 8015700:	080157e7 	.word	0x080157e7
 8015704:	08015715 	.word	0x08015715
 8015708:	08015715 	.word	0x08015715
 801570c:	08015789 	.word	0x08015789
 8015710:	0801579d 	.word	0x0801579d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801571a:	f043 0301 	orr.w	r3, r3, #1
 801571e:	b2da      	uxtb	r2, r3
 8015720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015726:	68ba      	ldr	r2, [r7, #8]
 8015728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801572a:	699b      	ldr	r3, [r3, #24]
 801572c:	18d1      	adds	r1, r2, r3
 801572e:	68bb      	ldr	r3, [r7, #8]
 8015730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015734:	f7ff ff5c 	bl	80155f0 <prvInsertTimerInActiveList>
 8015738:	4603      	mov	r3, r0
 801573a:	2b00      	cmp	r3, #0
 801573c:	d069      	beq.n	8015812 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015740:	6a1b      	ldr	r3, [r3, #32]
 8015742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015744:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801574c:	f003 0304 	and.w	r3, r3, #4
 8015750:	2b00      	cmp	r3, #0
 8015752:	d05e      	beq.n	8015812 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015754:	68ba      	ldr	r2, [r7, #8]
 8015756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015758:	699b      	ldr	r3, [r3, #24]
 801575a:	441a      	add	r2, r3
 801575c:	2300      	movs	r3, #0
 801575e:	9300      	str	r3, [sp, #0]
 8015760:	2300      	movs	r3, #0
 8015762:	2100      	movs	r1, #0
 8015764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015766:	f7ff fe05 	bl	8015374 <xTimerGenericCommand>
 801576a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801576c:	6a3b      	ldr	r3, [r7, #32]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d14f      	bne.n	8015812 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015776:	f383 8811 	msr	BASEPRI, r3
 801577a:	f3bf 8f6f 	isb	sy
 801577e:	f3bf 8f4f 	dsb	sy
 8015782:	61bb      	str	r3, [r7, #24]
}
 8015784:	bf00      	nop
 8015786:	e7fe      	b.n	8015786 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801578a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801578e:	f023 0301 	bic.w	r3, r3, #1
 8015792:	b2da      	uxtb	r2, r3
 8015794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801579a:	e03a      	b.n	8015812 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801579e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157a2:	f043 0301 	orr.w	r3, r3, #1
 80157a6:	b2da      	uxtb	r2, r3
 80157a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80157ae:	68ba      	ldr	r2, [r7, #8]
 80157b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80157b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b6:	699b      	ldr	r3, [r3, #24]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d10a      	bne.n	80157d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80157bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157c0:	f383 8811 	msr	BASEPRI, r3
 80157c4:	f3bf 8f6f 	isb	sy
 80157c8:	f3bf 8f4f 	dsb	sy
 80157cc:	617b      	str	r3, [r7, #20]
}
 80157ce:	bf00      	nop
 80157d0:	e7fe      	b.n	80157d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80157d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d4:	699a      	ldr	r2, [r3, #24]
 80157d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d8:	18d1      	adds	r1, r2, r3
 80157da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157e0:	f7ff ff06 	bl	80155f0 <prvInsertTimerInActiveList>
					break;
 80157e4:	e015      	b.n	8015812 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80157e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157ec:	f003 0302 	and.w	r3, r3, #2
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d103      	bne.n	80157fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80157f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157f6:	f000 fbfb 	bl	8015ff0 <vPortFree>
 80157fa:	e00a      	b.n	8015812 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80157fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015802:	f023 0301 	bic.w	r3, r3, #1
 8015806:	b2da      	uxtb	r2, r3
 8015808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801580e:	e000      	b.n	8015812 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015810:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015812:	4b08      	ldr	r3, [pc, #32]	; (8015834 <prvProcessReceivedCommands+0x1c0>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	1d39      	adds	r1, r7, #4
 8015818:	2200      	movs	r2, #0
 801581a:	4618      	mov	r0, r3
 801581c:	f7fe fb4a 	bl	8013eb4 <xQueueReceive>
 8015820:	4603      	mov	r3, r0
 8015822:	2b00      	cmp	r3, #0
 8015824:	f47f af2a 	bne.w	801567c <prvProcessReceivedCommands+0x8>
	}
}
 8015828:	bf00      	nop
 801582a:	bf00      	nop
 801582c:	3730      	adds	r7, #48	; 0x30
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop
 8015834:	240014bc 	.word	0x240014bc

08015838 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b088      	sub	sp, #32
 801583c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801583e:	e048      	b.n	80158d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015840:	4b2d      	ldr	r3, [pc, #180]	; (80158f8 <prvSwitchTimerLists+0xc0>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	68db      	ldr	r3, [r3, #12]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801584a:	4b2b      	ldr	r3, [pc, #172]	; (80158f8 <prvSwitchTimerLists+0xc0>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	68db      	ldr	r3, [r3, #12]
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	3304      	adds	r3, #4
 8015858:	4618      	mov	r0, r3
 801585a:	f7fe f863 	bl	8013924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	6a1b      	ldr	r3, [r3, #32]
 8015862:	68f8      	ldr	r0, [r7, #12]
 8015864:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801586c:	f003 0304 	and.w	r3, r3, #4
 8015870:	2b00      	cmp	r3, #0
 8015872:	d02e      	beq.n	80158d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	699b      	ldr	r3, [r3, #24]
 8015878:	693a      	ldr	r2, [r7, #16]
 801587a:	4413      	add	r3, r2
 801587c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801587e:	68ba      	ldr	r2, [r7, #8]
 8015880:	693b      	ldr	r3, [r7, #16]
 8015882:	429a      	cmp	r2, r3
 8015884:	d90e      	bls.n	80158a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	68ba      	ldr	r2, [r7, #8]
 801588a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	68fa      	ldr	r2, [r7, #12]
 8015890:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015892:	4b19      	ldr	r3, [pc, #100]	; (80158f8 <prvSwitchTimerLists+0xc0>)
 8015894:	681a      	ldr	r2, [r3, #0]
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	3304      	adds	r3, #4
 801589a:	4619      	mov	r1, r3
 801589c:	4610      	mov	r0, r2
 801589e:	f7fe f808 	bl	80138b2 <vListInsert>
 80158a2:	e016      	b.n	80158d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80158a4:	2300      	movs	r3, #0
 80158a6:	9300      	str	r3, [sp, #0]
 80158a8:	2300      	movs	r3, #0
 80158aa:	693a      	ldr	r2, [r7, #16]
 80158ac:	2100      	movs	r1, #0
 80158ae:	68f8      	ldr	r0, [r7, #12]
 80158b0:	f7ff fd60 	bl	8015374 <xTimerGenericCommand>
 80158b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d10a      	bne.n	80158d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80158bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158c0:	f383 8811 	msr	BASEPRI, r3
 80158c4:	f3bf 8f6f 	isb	sy
 80158c8:	f3bf 8f4f 	dsb	sy
 80158cc:	603b      	str	r3, [r7, #0]
}
 80158ce:	bf00      	nop
 80158d0:	e7fe      	b.n	80158d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80158d2:	4b09      	ldr	r3, [pc, #36]	; (80158f8 <prvSwitchTimerLists+0xc0>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d1b1      	bne.n	8015840 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80158dc:	4b06      	ldr	r3, [pc, #24]	; (80158f8 <prvSwitchTimerLists+0xc0>)
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80158e2:	4b06      	ldr	r3, [pc, #24]	; (80158fc <prvSwitchTimerLists+0xc4>)
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	4a04      	ldr	r2, [pc, #16]	; (80158f8 <prvSwitchTimerLists+0xc0>)
 80158e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80158ea:	4a04      	ldr	r2, [pc, #16]	; (80158fc <prvSwitchTimerLists+0xc4>)
 80158ec:	697b      	ldr	r3, [r7, #20]
 80158ee:	6013      	str	r3, [r2, #0]
}
 80158f0:	bf00      	nop
 80158f2:	3718      	adds	r7, #24
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}
 80158f8:	240014b4 	.word	0x240014b4
 80158fc:	240014b8 	.word	0x240014b8

08015900 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015906:	f000 f985 	bl	8015c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801590a:	4b15      	ldr	r3, [pc, #84]	; (8015960 <prvCheckForValidListAndQueue+0x60>)
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d120      	bne.n	8015954 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015912:	4814      	ldr	r0, [pc, #80]	; (8015964 <prvCheckForValidListAndQueue+0x64>)
 8015914:	f7fd ff7c 	bl	8013810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015918:	4813      	ldr	r0, [pc, #76]	; (8015968 <prvCheckForValidListAndQueue+0x68>)
 801591a:	f7fd ff79 	bl	8013810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801591e:	4b13      	ldr	r3, [pc, #76]	; (801596c <prvCheckForValidListAndQueue+0x6c>)
 8015920:	4a10      	ldr	r2, [pc, #64]	; (8015964 <prvCheckForValidListAndQueue+0x64>)
 8015922:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015924:	4b12      	ldr	r3, [pc, #72]	; (8015970 <prvCheckForValidListAndQueue+0x70>)
 8015926:	4a10      	ldr	r2, [pc, #64]	; (8015968 <prvCheckForValidListAndQueue+0x68>)
 8015928:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801592a:	2300      	movs	r3, #0
 801592c:	9300      	str	r3, [sp, #0]
 801592e:	4b11      	ldr	r3, [pc, #68]	; (8015974 <prvCheckForValidListAndQueue+0x74>)
 8015930:	4a11      	ldr	r2, [pc, #68]	; (8015978 <prvCheckForValidListAndQueue+0x78>)
 8015932:	2110      	movs	r1, #16
 8015934:	200a      	movs	r0, #10
 8015936:	f7fe f887 	bl	8013a48 <xQueueGenericCreateStatic>
 801593a:	4603      	mov	r3, r0
 801593c:	4a08      	ldr	r2, [pc, #32]	; (8015960 <prvCheckForValidListAndQueue+0x60>)
 801593e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015940:	4b07      	ldr	r3, [pc, #28]	; (8015960 <prvCheckForValidListAndQueue+0x60>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d005      	beq.n	8015954 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015948:	4b05      	ldr	r3, [pc, #20]	; (8015960 <prvCheckForValidListAndQueue+0x60>)
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	490b      	ldr	r1, [pc, #44]	; (801597c <prvCheckForValidListAndQueue+0x7c>)
 801594e:	4618      	mov	r0, r3
 8015950:	f7fe fca0 	bl	8014294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015954:	f000 f98e 	bl	8015c74 <vPortExitCritical>
}
 8015958:	bf00      	nop
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
 801595e:	bf00      	nop
 8015960:	240014bc 	.word	0x240014bc
 8015964:	2400148c 	.word	0x2400148c
 8015968:	240014a0 	.word	0x240014a0
 801596c:	240014b4 	.word	0x240014b4
 8015970:	240014b8 	.word	0x240014b8
 8015974:	24001568 	.word	0x24001568
 8015978:	240014c8 	.word	0x240014c8
 801597c:	08016f20 	.word	0x08016f20

08015980 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015980:	b580      	push	{r7, lr}
 8015982:	b08a      	sub	sp, #40	; 0x28
 8015984:	af00      	add	r7, sp, #0
 8015986:	60f8      	str	r0, [r7, #12]
 8015988:	60b9      	str	r1, [r7, #8]
 801598a:	607a      	str	r2, [r7, #4]
 801598c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801598e:	f06f 0301 	mvn.w	r3, #1
 8015992:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80159a0:	4b06      	ldr	r3, [pc, #24]	; (80159bc <xTimerPendFunctionCallFromISR+0x3c>)
 80159a2:	6818      	ldr	r0, [r3, #0]
 80159a4:	f107 0114 	add.w	r1, r7, #20
 80159a8:	2300      	movs	r3, #0
 80159aa:	683a      	ldr	r2, [r7, #0]
 80159ac:	f7fe f9e6 	bl	8013d7c <xQueueGenericSendFromISR>
 80159b0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80159b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80159b4:	4618      	mov	r0, r3
 80159b6:	3728      	adds	r7, #40	; 0x28
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}
 80159bc:	240014bc 	.word	0x240014bc

080159c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80159c0:	b480      	push	{r7}
 80159c2:	b085      	sub	sp, #20
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	60f8      	str	r0, [r7, #12]
 80159c8:	60b9      	str	r1, [r7, #8]
 80159ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	3b04      	subs	r3, #4
 80159d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80159d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	3b04      	subs	r3, #4
 80159de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	f023 0201 	bic.w	r2, r3, #1
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	3b04      	subs	r3, #4
 80159ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80159f0:	4a0c      	ldr	r2, [pc, #48]	; (8015a24 <pxPortInitialiseStack+0x64>)
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	3b14      	subs	r3, #20
 80159fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80159fc:	687a      	ldr	r2, [r7, #4]
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	3b04      	subs	r3, #4
 8015a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	f06f 0202 	mvn.w	r2, #2
 8015a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	3b20      	subs	r3, #32
 8015a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015a16:	68fb      	ldr	r3, [r7, #12]
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	3714      	adds	r7, #20
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a22:	4770      	bx	lr
 8015a24:	08015a29 	.word	0x08015a29

08015a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b085      	sub	sp, #20
 8015a2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015a32:	4b12      	ldr	r3, [pc, #72]	; (8015a7c <prvTaskExitError+0x54>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a3a:	d00a      	beq.n	8015a52 <prvTaskExitError+0x2a>
	__asm volatile
 8015a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a40:	f383 8811 	msr	BASEPRI, r3
 8015a44:	f3bf 8f6f 	isb	sy
 8015a48:	f3bf 8f4f 	dsb	sy
 8015a4c:	60fb      	str	r3, [r7, #12]
}
 8015a4e:	bf00      	nop
 8015a50:	e7fe      	b.n	8015a50 <prvTaskExitError+0x28>
	__asm volatile
 8015a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a56:	f383 8811 	msr	BASEPRI, r3
 8015a5a:	f3bf 8f6f 	isb	sy
 8015a5e:	f3bf 8f4f 	dsb	sy
 8015a62:	60bb      	str	r3, [r7, #8]
}
 8015a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015a66:	bf00      	nop
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d0fc      	beq.n	8015a68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015a6e:	bf00      	nop
 8015a70:	bf00      	nop
 8015a72:	3714      	adds	r7, #20
 8015a74:	46bd      	mov	sp, r7
 8015a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7a:	4770      	bx	lr
 8015a7c:	24000094 	.word	0x24000094

08015a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015a80:	4b07      	ldr	r3, [pc, #28]	; (8015aa0 <pxCurrentTCBConst2>)
 8015a82:	6819      	ldr	r1, [r3, #0]
 8015a84:	6808      	ldr	r0, [r1, #0]
 8015a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a8a:	f380 8809 	msr	PSP, r0
 8015a8e:	f3bf 8f6f 	isb	sy
 8015a92:	f04f 0000 	mov.w	r0, #0
 8015a96:	f380 8811 	msr	BASEPRI, r0
 8015a9a:	4770      	bx	lr
 8015a9c:	f3af 8000 	nop.w

08015aa0 <pxCurrentTCBConst2>:
 8015aa0:	24000f8c 	.word	0x24000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015aa4:	bf00      	nop
 8015aa6:	bf00      	nop

08015aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015aa8:	4808      	ldr	r0, [pc, #32]	; (8015acc <prvPortStartFirstTask+0x24>)
 8015aaa:	6800      	ldr	r0, [r0, #0]
 8015aac:	6800      	ldr	r0, [r0, #0]
 8015aae:	f380 8808 	msr	MSP, r0
 8015ab2:	f04f 0000 	mov.w	r0, #0
 8015ab6:	f380 8814 	msr	CONTROL, r0
 8015aba:	b662      	cpsie	i
 8015abc:	b661      	cpsie	f
 8015abe:	f3bf 8f4f 	dsb	sy
 8015ac2:	f3bf 8f6f 	isb	sy
 8015ac6:	df00      	svc	0
 8015ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015aca:	bf00      	nop
 8015acc:	e000ed08 	.word	0xe000ed08

08015ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b086      	sub	sp, #24
 8015ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015ad6:	4b46      	ldr	r3, [pc, #280]	; (8015bf0 <xPortStartScheduler+0x120>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	4a46      	ldr	r2, [pc, #280]	; (8015bf4 <xPortStartScheduler+0x124>)
 8015adc:	4293      	cmp	r3, r2
 8015ade:	d10a      	bne.n	8015af6 <xPortStartScheduler+0x26>
	__asm volatile
 8015ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ae4:	f383 8811 	msr	BASEPRI, r3
 8015ae8:	f3bf 8f6f 	isb	sy
 8015aec:	f3bf 8f4f 	dsb	sy
 8015af0:	613b      	str	r3, [r7, #16]
}
 8015af2:	bf00      	nop
 8015af4:	e7fe      	b.n	8015af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015af6:	4b3e      	ldr	r3, [pc, #248]	; (8015bf0 <xPortStartScheduler+0x120>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	4a3f      	ldr	r2, [pc, #252]	; (8015bf8 <xPortStartScheduler+0x128>)
 8015afc:	4293      	cmp	r3, r2
 8015afe:	d10a      	bne.n	8015b16 <xPortStartScheduler+0x46>
	__asm volatile
 8015b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b04:	f383 8811 	msr	BASEPRI, r3
 8015b08:	f3bf 8f6f 	isb	sy
 8015b0c:	f3bf 8f4f 	dsb	sy
 8015b10:	60fb      	str	r3, [r7, #12]
}
 8015b12:	bf00      	nop
 8015b14:	e7fe      	b.n	8015b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015b16:	4b39      	ldr	r3, [pc, #228]	; (8015bfc <xPortStartScheduler+0x12c>)
 8015b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	b2db      	uxtb	r3, r3
 8015b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	22ff      	movs	r2, #255	; 0xff
 8015b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015b28:	697b      	ldr	r3, [r7, #20]
 8015b2a:	781b      	ldrb	r3, [r3, #0]
 8015b2c:	b2db      	uxtb	r3, r3
 8015b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015b30:	78fb      	ldrb	r3, [r7, #3]
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015b38:	b2da      	uxtb	r2, r3
 8015b3a:	4b31      	ldr	r3, [pc, #196]	; (8015c00 <xPortStartScheduler+0x130>)
 8015b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015b3e:	4b31      	ldr	r3, [pc, #196]	; (8015c04 <xPortStartScheduler+0x134>)
 8015b40:	2207      	movs	r2, #7
 8015b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b44:	e009      	b.n	8015b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015b46:	4b2f      	ldr	r3, [pc, #188]	; (8015c04 <xPortStartScheduler+0x134>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	3b01      	subs	r3, #1
 8015b4c:	4a2d      	ldr	r2, [pc, #180]	; (8015c04 <xPortStartScheduler+0x134>)
 8015b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015b50:	78fb      	ldrb	r3, [r7, #3]
 8015b52:	b2db      	uxtb	r3, r3
 8015b54:	005b      	lsls	r3, r3, #1
 8015b56:	b2db      	uxtb	r3, r3
 8015b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b5a:	78fb      	ldrb	r3, [r7, #3]
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b62:	2b80      	cmp	r3, #128	; 0x80
 8015b64:	d0ef      	beq.n	8015b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015b66:	4b27      	ldr	r3, [pc, #156]	; (8015c04 <xPortStartScheduler+0x134>)
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	f1c3 0307 	rsb	r3, r3, #7
 8015b6e:	2b04      	cmp	r3, #4
 8015b70:	d00a      	beq.n	8015b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8015b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b76:	f383 8811 	msr	BASEPRI, r3
 8015b7a:	f3bf 8f6f 	isb	sy
 8015b7e:	f3bf 8f4f 	dsb	sy
 8015b82:	60bb      	str	r3, [r7, #8]
}
 8015b84:	bf00      	nop
 8015b86:	e7fe      	b.n	8015b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015b88:	4b1e      	ldr	r3, [pc, #120]	; (8015c04 <xPortStartScheduler+0x134>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	021b      	lsls	r3, r3, #8
 8015b8e:	4a1d      	ldr	r2, [pc, #116]	; (8015c04 <xPortStartScheduler+0x134>)
 8015b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015b92:	4b1c      	ldr	r3, [pc, #112]	; (8015c04 <xPortStartScheduler+0x134>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015b9a:	4a1a      	ldr	r2, [pc, #104]	; (8015c04 <xPortStartScheduler+0x134>)
 8015b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	b2da      	uxtb	r2, r3
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015ba6:	4b18      	ldr	r3, [pc, #96]	; (8015c08 <xPortStartScheduler+0x138>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	4a17      	ldr	r2, [pc, #92]	; (8015c08 <xPortStartScheduler+0x138>)
 8015bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015bb2:	4b15      	ldr	r3, [pc, #84]	; (8015c08 <xPortStartScheduler+0x138>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	4a14      	ldr	r2, [pc, #80]	; (8015c08 <xPortStartScheduler+0x138>)
 8015bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015bbe:	f000 f8dd 	bl	8015d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015bc2:	4b12      	ldr	r3, [pc, #72]	; (8015c0c <xPortStartScheduler+0x13c>)
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015bc8:	f000 f8fc 	bl	8015dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015bcc:	4b10      	ldr	r3, [pc, #64]	; (8015c10 <xPortStartScheduler+0x140>)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	4a0f      	ldr	r2, [pc, #60]	; (8015c10 <xPortStartScheduler+0x140>)
 8015bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015bd8:	f7ff ff66 	bl	8015aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015bdc:	f7fe ff72 	bl	8014ac4 <vTaskSwitchContext>
	prvTaskExitError();
 8015be0:	f7ff ff22 	bl	8015a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015be4:	2300      	movs	r3, #0
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	3718      	adds	r7, #24
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}
 8015bee:	bf00      	nop
 8015bf0:	e000ed00 	.word	0xe000ed00
 8015bf4:	410fc271 	.word	0x410fc271
 8015bf8:	410fc270 	.word	0x410fc270
 8015bfc:	e000e400 	.word	0xe000e400
 8015c00:	240015b8 	.word	0x240015b8
 8015c04:	240015bc 	.word	0x240015bc
 8015c08:	e000ed20 	.word	0xe000ed20
 8015c0c:	24000094 	.word	0x24000094
 8015c10:	e000ef34 	.word	0xe000ef34

08015c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015c14:	b480      	push	{r7}
 8015c16:	b083      	sub	sp, #12
 8015c18:	af00      	add	r7, sp, #0
	__asm volatile
 8015c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c1e:	f383 8811 	msr	BASEPRI, r3
 8015c22:	f3bf 8f6f 	isb	sy
 8015c26:	f3bf 8f4f 	dsb	sy
 8015c2a:	607b      	str	r3, [r7, #4]
}
 8015c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015c2e:	4b0f      	ldr	r3, [pc, #60]	; (8015c6c <vPortEnterCritical+0x58>)
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	3301      	adds	r3, #1
 8015c34:	4a0d      	ldr	r2, [pc, #52]	; (8015c6c <vPortEnterCritical+0x58>)
 8015c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015c38:	4b0c      	ldr	r3, [pc, #48]	; (8015c6c <vPortEnterCritical+0x58>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	2b01      	cmp	r3, #1
 8015c3e:	d10f      	bne.n	8015c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015c40:	4b0b      	ldr	r3, [pc, #44]	; (8015c70 <vPortEnterCritical+0x5c>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	b2db      	uxtb	r3, r3
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d00a      	beq.n	8015c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8015c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c4e:	f383 8811 	msr	BASEPRI, r3
 8015c52:	f3bf 8f6f 	isb	sy
 8015c56:	f3bf 8f4f 	dsb	sy
 8015c5a:	603b      	str	r3, [r7, #0]
}
 8015c5c:	bf00      	nop
 8015c5e:	e7fe      	b.n	8015c5e <vPortEnterCritical+0x4a>
	}
}
 8015c60:	bf00      	nop
 8015c62:	370c      	adds	r7, #12
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr
 8015c6c:	24000094 	.word	0x24000094
 8015c70:	e000ed04 	.word	0xe000ed04

08015c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015c74:	b480      	push	{r7}
 8015c76:	b083      	sub	sp, #12
 8015c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015c7a:	4b12      	ldr	r3, [pc, #72]	; (8015cc4 <vPortExitCritical+0x50>)
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d10a      	bne.n	8015c98 <vPortExitCritical+0x24>
	__asm volatile
 8015c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c86:	f383 8811 	msr	BASEPRI, r3
 8015c8a:	f3bf 8f6f 	isb	sy
 8015c8e:	f3bf 8f4f 	dsb	sy
 8015c92:	607b      	str	r3, [r7, #4]
}
 8015c94:	bf00      	nop
 8015c96:	e7fe      	b.n	8015c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015c98:	4b0a      	ldr	r3, [pc, #40]	; (8015cc4 <vPortExitCritical+0x50>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	3b01      	subs	r3, #1
 8015c9e:	4a09      	ldr	r2, [pc, #36]	; (8015cc4 <vPortExitCritical+0x50>)
 8015ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015ca2:	4b08      	ldr	r3, [pc, #32]	; (8015cc4 <vPortExitCritical+0x50>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d105      	bne.n	8015cb6 <vPortExitCritical+0x42>
 8015caa:	2300      	movs	r3, #0
 8015cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	f383 8811 	msr	BASEPRI, r3
}
 8015cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015cb6:	bf00      	nop
 8015cb8:	370c      	adds	r7, #12
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop
 8015cc4:	24000094 	.word	0x24000094
	...

08015cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015cd0:	f3ef 8009 	mrs	r0, PSP
 8015cd4:	f3bf 8f6f 	isb	sy
 8015cd8:	4b15      	ldr	r3, [pc, #84]	; (8015d30 <pxCurrentTCBConst>)
 8015cda:	681a      	ldr	r2, [r3, #0]
 8015cdc:	f01e 0f10 	tst.w	lr, #16
 8015ce0:	bf08      	it	eq
 8015ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cea:	6010      	str	r0, [r2, #0]
 8015cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015cf4:	f380 8811 	msr	BASEPRI, r0
 8015cf8:	f3bf 8f4f 	dsb	sy
 8015cfc:	f3bf 8f6f 	isb	sy
 8015d00:	f7fe fee0 	bl	8014ac4 <vTaskSwitchContext>
 8015d04:	f04f 0000 	mov.w	r0, #0
 8015d08:	f380 8811 	msr	BASEPRI, r0
 8015d0c:	bc09      	pop	{r0, r3}
 8015d0e:	6819      	ldr	r1, [r3, #0]
 8015d10:	6808      	ldr	r0, [r1, #0]
 8015d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d16:	f01e 0f10 	tst.w	lr, #16
 8015d1a:	bf08      	it	eq
 8015d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015d20:	f380 8809 	msr	PSP, r0
 8015d24:	f3bf 8f6f 	isb	sy
 8015d28:	4770      	bx	lr
 8015d2a:	bf00      	nop
 8015d2c:	f3af 8000 	nop.w

08015d30 <pxCurrentTCBConst>:
 8015d30:	24000f8c 	.word	0x24000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d34:	bf00      	nop
 8015d36:	bf00      	nop

08015d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b082      	sub	sp, #8
 8015d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d42:	f383 8811 	msr	BASEPRI, r3
 8015d46:	f3bf 8f6f 	isb	sy
 8015d4a:	f3bf 8f4f 	dsb	sy
 8015d4e:	607b      	str	r3, [r7, #4]
}
 8015d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015d52:	f7fe fdf5 	bl	8014940 <xTaskIncrementTick>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d003      	beq.n	8015d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015d5c:	4b06      	ldr	r3, [pc, #24]	; (8015d78 <xPortSysTickHandler+0x40>)
 8015d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d62:	601a      	str	r2, [r3, #0]
 8015d64:	2300      	movs	r3, #0
 8015d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	f383 8811 	msr	BASEPRI, r3
}
 8015d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015d70:	bf00      	nop
 8015d72:	3708      	adds	r7, #8
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	e000ed04 	.word	0xe000ed04

08015d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015d7c:	b480      	push	{r7}
 8015d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015d80:	4b0b      	ldr	r3, [pc, #44]	; (8015db0 <vPortSetupTimerInterrupt+0x34>)
 8015d82:	2200      	movs	r2, #0
 8015d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015d86:	4b0b      	ldr	r3, [pc, #44]	; (8015db4 <vPortSetupTimerInterrupt+0x38>)
 8015d88:	2200      	movs	r2, #0
 8015d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015d8c:	4b0a      	ldr	r3, [pc, #40]	; (8015db8 <vPortSetupTimerInterrupt+0x3c>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	4a0a      	ldr	r2, [pc, #40]	; (8015dbc <vPortSetupTimerInterrupt+0x40>)
 8015d92:	fba2 2303 	umull	r2, r3, r2, r3
 8015d96:	099b      	lsrs	r3, r3, #6
 8015d98:	4a09      	ldr	r2, [pc, #36]	; (8015dc0 <vPortSetupTimerInterrupt+0x44>)
 8015d9a:	3b01      	subs	r3, #1
 8015d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015d9e:	4b04      	ldr	r3, [pc, #16]	; (8015db0 <vPortSetupTimerInterrupt+0x34>)
 8015da0:	2207      	movs	r2, #7
 8015da2:	601a      	str	r2, [r3, #0]
}
 8015da4:	bf00      	nop
 8015da6:	46bd      	mov	sp, r7
 8015da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dac:	4770      	bx	lr
 8015dae:	bf00      	nop
 8015db0:	e000e010 	.word	0xe000e010
 8015db4:	e000e018 	.word	0xe000e018
 8015db8:	24000084 	.word	0x24000084
 8015dbc:	10624dd3 	.word	0x10624dd3
 8015dc0:	e000e014 	.word	0xe000e014

08015dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015dd4 <vPortEnableVFP+0x10>
 8015dc8:	6801      	ldr	r1, [r0, #0]
 8015dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015dce:	6001      	str	r1, [r0, #0]
 8015dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015dd2:	bf00      	nop
 8015dd4:	e000ed88 	.word	0xe000ed88

08015dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015dd8:	b480      	push	{r7}
 8015dda:	b085      	sub	sp, #20
 8015ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015dde:	f3ef 8305 	mrs	r3, IPSR
 8015de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	2b0f      	cmp	r3, #15
 8015de8:	d914      	bls.n	8015e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015dea:	4a17      	ldr	r2, [pc, #92]	; (8015e48 <vPortValidateInterruptPriority+0x70>)
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	4413      	add	r3, r2
 8015df0:	781b      	ldrb	r3, [r3, #0]
 8015df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015df4:	4b15      	ldr	r3, [pc, #84]	; (8015e4c <vPortValidateInterruptPriority+0x74>)
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	7afa      	ldrb	r2, [r7, #11]
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	d20a      	bcs.n	8015e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e02:	f383 8811 	msr	BASEPRI, r3
 8015e06:	f3bf 8f6f 	isb	sy
 8015e0a:	f3bf 8f4f 	dsb	sy
 8015e0e:	607b      	str	r3, [r7, #4]
}
 8015e10:	bf00      	nop
 8015e12:	e7fe      	b.n	8015e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015e14:	4b0e      	ldr	r3, [pc, #56]	; (8015e50 <vPortValidateInterruptPriority+0x78>)
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015e1c:	4b0d      	ldr	r3, [pc, #52]	; (8015e54 <vPortValidateInterruptPriority+0x7c>)
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d90a      	bls.n	8015e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e28:	f383 8811 	msr	BASEPRI, r3
 8015e2c:	f3bf 8f6f 	isb	sy
 8015e30:	f3bf 8f4f 	dsb	sy
 8015e34:	603b      	str	r3, [r7, #0]
}
 8015e36:	bf00      	nop
 8015e38:	e7fe      	b.n	8015e38 <vPortValidateInterruptPriority+0x60>
	}
 8015e3a:	bf00      	nop
 8015e3c:	3714      	adds	r7, #20
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e44:	4770      	bx	lr
 8015e46:	bf00      	nop
 8015e48:	e000e3f0 	.word	0xe000e3f0
 8015e4c:	240015b8 	.word	0x240015b8
 8015e50:	e000ed0c 	.word	0xe000ed0c
 8015e54:	240015bc 	.word	0x240015bc

08015e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b08a      	sub	sp, #40	; 0x28
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015e60:	2300      	movs	r3, #0
 8015e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015e64:	f7fe fcb0 	bl	80147c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015e68:	4b5b      	ldr	r3, [pc, #364]	; (8015fd8 <pvPortMalloc+0x180>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d101      	bne.n	8015e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015e70:	f000 f920 	bl	80160b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015e74:	4b59      	ldr	r3, [pc, #356]	; (8015fdc <pvPortMalloc+0x184>)
 8015e76:	681a      	ldr	r2, [r3, #0]
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	4013      	ands	r3, r2
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	f040 8093 	bne.w	8015fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d01d      	beq.n	8015ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015e88:	2208      	movs	r2, #8
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	4413      	add	r3, r2
 8015e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f003 0307 	and.w	r3, r3, #7
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d014      	beq.n	8015ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f023 0307 	bic.w	r3, r3, #7
 8015ea0:	3308      	adds	r3, #8
 8015ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f003 0307 	and.w	r3, r3, #7
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d00a      	beq.n	8015ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8015eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb2:	f383 8811 	msr	BASEPRI, r3
 8015eb6:	f3bf 8f6f 	isb	sy
 8015eba:	f3bf 8f4f 	dsb	sy
 8015ebe:	617b      	str	r3, [r7, #20]
}
 8015ec0:	bf00      	nop
 8015ec2:	e7fe      	b.n	8015ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d06e      	beq.n	8015fa8 <pvPortMalloc+0x150>
 8015eca:	4b45      	ldr	r3, [pc, #276]	; (8015fe0 <pvPortMalloc+0x188>)
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	687a      	ldr	r2, [r7, #4]
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	d869      	bhi.n	8015fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015ed4:	4b43      	ldr	r3, [pc, #268]	; (8015fe4 <pvPortMalloc+0x18c>)
 8015ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015ed8:	4b42      	ldr	r3, [pc, #264]	; (8015fe4 <pvPortMalloc+0x18c>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015ede:	e004      	b.n	8015eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	687a      	ldr	r2, [r7, #4]
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d903      	bls.n	8015efc <pvPortMalloc+0xa4>
 8015ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d1f1      	bne.n	8015ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015efc:	4b36      	ldr	r3, [pc, #216]	; (8015fd8 <pvPortMalloc+0x180>)
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f02:	429a      	cmp	r2, r3
 8015f04:	d050      	beq.n	8015fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015f06:	6a3b      	ldr	r3, [r7, #32]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	2208      	movs	r2, #8
 8015f0c:	4413      	add	r3, r2
 8015f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f12:	681a      	ldr	r2, [r3, #0]
 8015f14:	6a3b      	ldr	r3, [r7, #32]
 8015f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1a:	685a      	ldr	r2, [r3, #4]
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	1ad2      	subs	r2, r2, r3
 8015f20:	2308      	movs	r3, #8
 8015f22:	005b      	lsls	r3, r3, #1
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d91f      	bls.n	8015f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	4413      	add	r3, r2
 8015f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f30:	69bb      	ldr	r3, [r7, #24]
 8015f32:	f003 0307 	and.w	r3, r3, #7
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d00a      	beq.n	8015f50 <pvPortMalloc+0xf8>
	__asm volatile
 8015f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f3e:	f383 8811 	msr	BASEPRI, r3
 8015f42:	f3bf 8f6f 	isb	sy
 8015f46:	f3bf 8f4f 	dsb	sy
 8015f4a:	613b      	str	r3, [r7, #16]
}
 8015f4c:	bf00      	nop
 8015f4e:	e7fe      	b.n	8015f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f52:	685a      	ldr	r2, [r3, #4]
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	1ad2      	subs	r2, r2, r3
 8015f58:	69bb      	ldr	r3, [r7, #24]
 8015f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5e:	687a      	ldr	r2, [r7, #4]
 8015f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015f62:	69b8      	ldr	r0, [r7, #24]
 8015f64:	f000 f908 	bl	8016178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015f68:	4b1d      	ldr	r3, [pc, #116]	; (8015fe0 <pvPortMalloc+0x188>)
 8015f6a:	681a      	ldr	r2, [r3, #0]
 8015f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6e:	685b      	ldr	r3, [r3, #4]
 8015f70:	1ad3      	subs	r3, r2, r3
 8015f72:	4a1b      	ldr	r2, [pc, #108]	; (8015fe0 <pvPortMalloc+0x188>)
 8015f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015f76:	4b1a      	ldr	r3, [pc, #104]	; (8015fe0 <pvPortMalloc+0x188>)
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	4b1b      	ldr	r3, [pc, #108]	; (8015fe8 <pvPortMalloc+0x190>)
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	429a      	cmp	r2, r3
 8015f80:	d203      	bcs.n	8015f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015f82:	4b17      	ldr	r3, [pc, #92]	; (8015fe0 <pvPortMalloc+0x188>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	4a18      	ldr	r2, [pc, #96]	; (8015fe8 <pvPortMalloc+0x190>)
 8015f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f8c:	685a      	ldr	r2, [r3, #4]
 8015f8e:	4b13      	ldr	r3, [pc, #76]	; (8015fdc <pvPortMalloc+0x184>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	431a      	orrs	r2, r3
 8015f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015f9e:	4b13      	ldr	r3, [pc, #76]	; (8015fec <pvPortMalloc+0x194>)
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	3301      	adds	r3, #1
 8015fa4:	4a11      	ldr	r2, [pc, #68]	; (8015fec <pvPortMalloc+0x194>)
 8015fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015fa8:	f7fe fc1c 	bl	80147e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015fac:	69fb      	ldr	r3, [r7, #28]
 8015fae:	f003 0307 	and.w	r3, r3, #7
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d00a      	beq.n	8015fcc <pvPortMalloc+0x174>
	__asm volatile
 8015fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fba:	f383 8811 	msr	BASEPRI, r3
 8015fbe:	f3bf 8f6f 	isb	sy
 8015fc2:	f3bf 8f4f 	dsb	sy
 8015fc6:	60fb      	str	r3, [r7, #12]
}
 8015fc8:	bf00      	nop
 8015fca:	e7fe      	b.n	8015fca <pvPortMalloc+0x172>
	return pvReturn;
 8015fcc:	69fb      	ldr	r3, [r7, #28]
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3728      	adds	r7, #40	; 0x28
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	240051c8 	.word	0x240051c8
 8015fdc:	240051dc 	.word	0x240051dc
 8015fe0:	240051cc 	.word	0x240051cc
 8015fe4:	240051c0 	.word	0x240051c0
 8015fe8:	240051d0 	.word	0x240051d0
 8015fec:	240051d4 	.word	0x240051d4

08015ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b086      	sub	sp, #24
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d04d      	beq.n	801609e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016002:	2308      	movs	r3, #8
 8016004:	425b      	negs	r3, r3
 8016006:	697a      	ldr	r2, [r7, #20]
 8016008:	4413      	add	r3, r2
 801600a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016010:	693b      	ldr	r3, [r7, #16]
 8016012:	685a      	ldr	r2, [r3, #4]
 8016014:	4b24      	ldr	r3, [pc, #144]	; (80160a8 <vPortFree+0xb8>)
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	4013      	ands	r3, r2
 801601a:	2b00      	cmp	r3, #0
 801601c:	d10a      	bne.n	8016034 <vPortFree+0x44>
	__asm volatile
 801601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016022:	f383 8811 	msr	BASEPRI, r3
 8016026:	f3bf 8f6f 	isb	sy
 801602a:	f3bf 8f4f 	dsb	sy
 801602e:	60fb      	str	r3, [r7, #12]
}
 8016030:	bf00      	nop
 8016032:	e7fe      	b.n	8016032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016034:	693b      	ldr	r3, [r7, #16]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d00a      	beq.n	8016052 <vPortFree+0x62>
	__asm volatile
 801603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016040:	f383 8811 	msr	BASEPRI, r3
 8016044:	f3bf 8f6f 	isb	sy
 8016048:	f3bf 8f4f 	dsb	sy
 801604c:	60bb      	str	r3, [r7, #8]
}
 801604e:	bf00      	nop
 8016050:	e7fe      	b.n	8016050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	685a      	ldr	r2, [r3, #4]
 8016056:	4b14      	ldr	r3, [pc, #80]	; (80160a8 <vPortFree+0xb8>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	4013      	ands	r3, r2
 801605c:	2b00      	cmp	r3, #0
 801605e:	d01e      	beq.n	801609e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d11a      	bne.n	801609e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	685a      	ldr	r2, [r3, #4]
 801606c:	4b0e      	ldr	r3, [pc, #56]	; (80160a8 <vPortFree+0xb8>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	43db      	mvns	r3, r3
 8016072:	401a      	ands	r2, r3
 8016074:	693b      	ldr	r3, [r7, #16]
 8016076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016078:	f7fe fba6 	bl	80147c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	685a      	ldr	r2, [r3, #4]
 8016080:	4b0a      	ldr	r3, [pc, #40]	; (80160ac <vPortFree+0xbc>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	4413      	add	r3, r2
 8016086:	4a09      	ldr	r2, [pc, #36]	; (80160ac <vPortFree+0xbc>)
 8016088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801608a:	6938      	ldr	r0, [r7, #16]
 801608c:	f000 f874 	bl	8016178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016090:	4b07      	ldr	r3, [pc, #28]	; (80160b0 <vPortFree+0xc0>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	3301      	adds	r3, #1
 8016096:	4a06      	ldr	r2, [pc, #24]	; (80160b0 <vPortFree+0xc0>)
 8016098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801609a:	f7fe fba3 	bl	80147e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801609e:	bf00      	nop
 80160a0:	3718      	adds	r7, #24
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}
 80160a6:	bf00      	nop
 80160a8:	240051dc 	.word	0x240051dc
 80160ac:	240051cc 	.word	0x240051cc
 80160b0:	240051d8 	.word	0x240051d8

080160b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80160b4:	b480      	push	{r7}
 80160b6:	b085      	sub	sp, #20
 80160b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80160ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80160be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80160c0:	4b27      	ldr	r3, [pc, #156]	; (8016160 <prvHeapInit+0xac>)
 80160c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	f003 0307 	and.w	r3, r3, #7
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d00c      	beq.n	80160e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	3307      	adds	r3, #7
 80160d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	f023 0307 	bic.w	r3, r3, #7
 80160da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80160dc:	68ba      	ldr	r2, [r7, #8]
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	1ad3      	subs	r3, r2, r3
 80160e2:	4a1f      	ldr	r2, [pc, #124]	; (8016160 <prvHeapInit+0xac>)
 80160e4:	4413      	add	r3, r2
 80160e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80160ec:	4a1d      	ldr	r2, [pc, #116]	; (8016164 <prvHeapInit+0xb0>)
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80160f2:	4b1c      	ldr	r3, [pc, #112]	; (8016164 <prvHeapInit+0xb0>)
 80160f4:	2200      	movs	r2, #0
 80160f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	68ba      	ldr	r2, [r7, #8]
 80160fc:	4413      	add	r3, r2
 80160fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016100:	2208      	movs	r2, #8
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	1a9b      	subs	r3, r3, r2
 8016106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	f023 0307 	bic.w	r3, r3, #7
 801610e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	4a15      	ldr	r2, [pc, #84]	; (8016168 <prvHeapInit+0xb4>)
 8016114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016116:	4b14      	ldr	r3, [pc, #80]	; (8016168 <prvHeapInit+0xb4>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	2200      	movs	r2, #0
 801611c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801611e:	4b12      	ldr	r3, [pc, #72]	; (8016168 <prvHeapInit+0xb4>)
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	2200      	movs	r2, #0
 8016124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	68fa      	ldr	r2, [r7, #12]
 801612e:	1ad2      	subs	r2, r2, r3
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016134:	4b0c      	ldr	r3, [pc, #48]	; (8016168 <prvHeapInit+0xb4>)
 8016136:	681a      	ldr	r2, [r3, #0]
 8016138:	683b      	ldr	r3, [r7, #0]
 801613a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	685b      	ldr	r3, [r3, #4]
 8016140:	4a0a      	ldr	r2, [pc, #40]	; (801616c <prvHeapInit+0xb8>)
 8016142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	685b      	ldr	r3, [r3, #4]
 8016148:	4a09      	ldr	r2, [pc, #36]	; (8016170 <prvHeapInit+0xbc>)
 801614a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801614c:	4b09      	ldr	r3, [pc, #36]	; (8016174 <prvHeapInit+0xc0>)
 801614e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016152:	601a      	str	r2, [r3, #0]
}
 8016154:	bf00      	nop
 8016156:	3714      	adds	r7, #20
 8016158:	46bd      	mov	sp, r7
 801615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615e:	4770      	bx	lr
 8016160:	240015c0 	.word	0x240015c0
 8016164:	240051c0 	.word	0x240051c0
 8016168:	240051c8 	.word	0x240051c8
 801616c:	240051d0 	.word	0x240051d0
 8016170:	240051cc 	.word	0x240051cc
 8016174:	240051dc 	.word	0x240051dc

08016178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016178:	b480      	push	{r7}
 801617a:	b085      	sub	sp, #20
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016180:	4b28      	ldr	r3, [pc, #160]	; (8016224 <prvInsertBlockIntoFreeList+0xac>)
 8016182:	60fb      	str	r3, [r7, #12]
 8016184:	e002      	b.n	801618c <prvInsertBlockIntoFreeList+0x14>
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	60fb      	str	r3, [r7, #12]
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	687a      	ldr	r2, [r7, #4]
 8016192:	429a      	cmp	r2, r3
 8016194:	d8f7      	bhi.n	8016186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	685b      	ldr	r3, [r3, #4]
 801619e:	68ba      	ldr	r2, [r7, #8]
 80161a0:	4413      	add	r3, r2
 80161a2:	687a      	ldr	r2, [r7, #4]
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d108      	bne.n	80161ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	685a      	ldr	r2, [r3, #4]
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	685b      	ldr	r3, [r3, #4]
 80161b0:	441a      	add	r2, r3
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	685b      	ldr	r3, [r3, #4]
 80161c2:	68ba      	ldr	r2, [r7, #8]
 80161c4:	441a      	add	r2, r3
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	429a      	cmp	r2, r3
 80161cc:	d118      	bne.n	8016200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	681a      	ldr	r2, [r3, #0]
 80161d2:	4b15      	ldr	r3, [pc, #84]	; (8016228 <prvInsertBlockIntoFreeList+0xb0>)
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d00d      	beq.n	80161f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	685a      	ldr	r2, [r3, #4]
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	685b      	ldr	r3, [r3, #4]
 80161e4:	441a      	add	r2, r3
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	681a      	ldr	r2, [r3, #0]
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	601a      	str	r2, [r3, #0]
 80161f4:	e008      	b.n	8016208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80161f6:	4b0c      	ldr	r3, [pc, #48]	; (8016228 <prvInsertBlockIntoFreeList+0xb0>)
 80161f8:	681a      	ldr	r2, [r3, #0]
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	601a      	str	r2, [r3, #0]
 80161fe:	e003      	b.n	8016208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	681a      	ldr	r2, [r3, #0]
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016208:	68fa      	ldr	r2, [r7, #12]
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	429a      	cmp	r2, r3
 801620e:	d002      	beq.n	8016216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	687a      	ldr	r2, [r7, #4]
 8016214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016216:	bf00      	nop
 8016218:	3714      	adds	r7, #20
 801621a:	46bd      	mov	sp, r7
 801621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016220:	4770      	bx	lr
 8016222:	bf00      	nop
 8016224:	240051c0 	.word	0x240051c0
 8016228:	240051c8 	.word	0x240051c8

0801622c <__errno>:
 801622c:	4b01      	ldr	r3, [pc, #4]	; (8016234 <__errno+0x8>)
 801622e:	6818      	ldr	r0, [r3, #0]
 8016230:	4770      	bx	lr
 8016232:	bf00      	nop
 8016234:	24000098 	.word	0x24000098

08016238 <__libc_init_array>:
 8016238:	b570      	push	{r4, r5, r6, lr}
 801623a:	4d0d      	ldr	r5, [pc, #52]	; (8016270 <__libc_init_array+0x38>)
 801623c:	4c0d      	ldr	r4, [pc, #52]	; (8016274 <__libc_init_array+0x3c>)
 801623e:	1b64      	subs	r4, r4, r5
 8016240:	10a4      	asrs	r4, r4, #2
 8016242:	2600      	movs	r6, #0
 8016244:	42a6      	cmp	r6, r4
 8016246:	d109      	bne.n	801625c <__libc_init_array+0x24>
 8016248:	4d0b      	ldr	r5, [pc, #44]	; (8016278 <__libc_init_array+0x40>)
 801624a:	4c0c      	ldr	r4, [pc, #48]	; (801627c <__libc_init_array+0x44>)
 801624c:	f000 fd2c 	bl	8016ca8 <_init>
 8016250:	1b64      	subs	r4, r4, r5
 8016252:	10a4      	asrs	r4, r4, #2
 8016254:	2600      	movs	r6, #0
 8016256:	42a6      	cmp	r6, r4
 8016258:	d105      	bne.n	8016266 <__libc_init_array+0x2e>
 801625a:	bd70      	pop	{r4, r5, r6, pc}
 801625c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016260:	4798      	blx	r3
 8016262:	3601      	adds	r6, #1
 8016264:	e7ee      	b.n	8016244 <__libc_init_array+0xc>
 8016266:	f855 3b04 	ldr.w	r3, [r5], #4
 801626a:	4798      	blx	r3
 801626c:	3601      	adds	r6, #1
 801626e:	e7f2      	b.n	8016256 <__libc_init_array+0x1e>
 8016270:	08017160 	.word	0x08017160
 8016274:	08017160 	.word	0x08017160
 8016278:	08017160 	.word	0x08017160
 801627c:	08017164 	.word	0x08017164

08016280 <memcpy>:
 8016280:	440a      	add	r2, r1
 8016282:	4291      	cmp	r1, r2
 8016284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016288:	d100      	bne.n	801628c <memcpy+0xc>
 801628a:	4770      	bx	lr
 801628c:	b510      	push	{r4, lr}
 801628e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016296:	4291      	cmp	r1, r2
 8016298:	d1f9      	bne.n	801628e <memcpy+0xe>
 801629a:	bd10      	pop	{r4, pc}

0801629c <memset>:
 801629c:	4402      	add	r2, r0
 801629e:	4603      	mov	r3, r0
 80162a0:	4293      	cmp	r3, r2
 80162a2:	d100      	bne.n	80162a6 <memset+0xa>
 80162a4:	4770      	bx	lr
 80162a6:	f803 1b01 	strb.w	r1, [r3], #1
 80162aa:	e7f9      	b.n	80162a0 <memset+0x4>

080162ac <_puts_r>:
 80162ac:	b570      	push	{r4, r5, r6, lr}
 80162ae:	460e      	mov	r6, r1
 80162b0:	4605      	mov	r5, r0
 80162b2:	b118      	cbz	r0, 80162bc <_puts_r+0x10>
 80162b4:	6983      	ldr	r3, [r0, #24]
 80162b6:	b90b      	cbnz	r3, 80162bc <_puts_r+0x10>
 80162b8:	f000 fa48 	bl	801674c <__sinit>
 80162bc:	69ab      	ldr	r3, [r5, #24]
 80162be:	68ac      	ldr	r4, [r5, #8]
 80162c0:	b913      	cbnz	r3, 80162c8 <_puts_r+0x1c>
 80162c2:	4628      	mov	r0, r5
 80162c4:	f000 fa42 	bl	801674c <__sinit>
 80162c8:	4b2c      	ldr	r3, [pc, #176]	; (801637c <_puts_r+0xd0>)
 80162ca:	429c      	cmp	r4, r3
 80162cc:	d120      	bne.n	8016310 <_puts_r+0x64>
 80162ce:	686c      	ldr	r4, [r5, #4]
 80162d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80162d2:	07db      	lsls	r3, r3, #31
 80162d4:	d405      	bmi.n	80162e2 <_puts_r+0x36>
 80162d6:	89a3      	ldrh	r3, [r4, #12]
 80162d8:	0598      	lsls	r0, r3, #22
 80162da:	d402      	bmi.n	80162e2 <_puts_r+0x36>
 80162dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162de:	f000 fad3 	bl	8016888 <__retarget_lock_acquire_recursive>
 80162e2:	89a3      	ldrh	r3, [r4, #12]
 80162e4:	0719      	lsls	r1, r3, #28
 80162e6:	d51d      	bpl.n	8016324 <_puts_r+0x78>
 80162e8:	6923      	ldr	r3, [r4, #16]
 80162ea:	b1db      	cbz	r3, 8016324 <_puts_r+0x78>
 80162ec:	3e01      	subs	r6, #1
 80162ee:	68a3      	ldr	r3, [r4, #8]
 80162f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80162f4:	3b01      	subs	r3, #1
 80162f6:	60a3      	str	r3, [r4, #8]
 80162f8:	bb39      	cbnz	r1, 801634a <_puts_r+0x9e>
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	da38      	bge.n	8016370 <_puts_r+0xc4>
 80162fe:	4622      	mov	r2, r4
 8016300:	210a      	movs	r1, #10
 8016302:	4628      	mov	r0, r5
 8016304:	f000 f848 	bl	8016398 <__swbuf_r>
 8016308:	3001      	adds	r0, #1
 801630a:	d011      	beq.n	8016330 <_puts_r+0x84>
 801630c:	250a      	movs	r5, #10
 801630e:	e011      	b.n	8016334 <_puts_r+0x88>
 8016310:	4b1b      	ldr	r3, [pc, #108]	; (8016380 <_puts_r+0xd4>)
 8016312:	429c      	cmp	r4, r3
 8016314:	d101      	bne.n	801631a <_puts_r+0x6e>
 8016316:	68ac      	ldr	r4, [r5, #8]
 8016318:	e7da      	b.n	80162d0 <_puts_r+0x24>
 801631a:	4b1a      	ldr	r3, [pc, #104]	; (8016384 <_puts_r+0xd8>)
 801631c:	429c      	cmp	r4, r3
 801631e:	bf08      	it	eq
 8016320:	68ec      	ldreq	r4, [r5, #12]
 8016322:	e7d5      	b.n	80162d0 <_puts_r+0x24>
 8016324:	4621      	mov	r1, r4
 8016326:	4628      	mov	r0, r5
 8016328:	f000 f888 	bl	801643c <__swsetup_r>
 801632c:	2800      	cmp	r0, #0
 801632e:	d0dd      	beq.n	80162ec <_puts_r+0x40>
 8016330:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016336:	07da      	lsls	r2, r3, #31
 8016338:	d405      	bmi.n	8016346 <_puts_r+0x9a>
 801633a:	89a3      	ldrh	r3, [r4, #12]
 801633c:	059b      	lsls	r3, r3, #22
 801633e:	d402      	bmi.n	8016346 <_puts_r+0x9a>
 8016340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016342:	f000 faa2 	bl	801688a <__retarget_lock_release_recursive>
 8016346:	4628      	mov	r0, r5
 8016348:	bd70      	pop	{r4, r5, r6, pc}
 801634a:	2b00      	cmp	r3, #0
 801634c:	da04      	bge.n	8016358 <_puts_r+0xac>
 801634e:	69a2      	ldr	r2, [r4, #24]
 8016350:	429a      	cmp	r2, r3
 8016352:	dc06      	bgt.n	8016362 <_puts_r+0xb6>
 8016354:	290a      	cmp	r1, #10
 8016356:	d004      	beq.n	8016362 <_puts_r+0xb6>
 8016358:	6823      	ldr	r3, [r4, #0]
 801635a:	1c5a      	adds	r2, r3, #1
 801635c:	6022      	str	r2, [r4, #0]
 801635e:	7019      	strb	r1, [r3, #0]
 8016360:	e7c5      	b.n	80162ee <_puts_r+0x42>
 8016362:	4622      	mov	r2, r4
 8016364:	4628      	mov	r0, r5
 8016366:	f000 f817 	bl	8016398 <__swbuf_r>
 801636a:	3001      	adds	r0, #1
 801636c:	d1bf      	bne.n	80162ee <_puts_r+0x42>
 801636e:	e7df      	b.n	8016330 <_puts_r+0x84>
 8016370:	6823      	ldr	r3, [r4, #0]
 8016372:	250a      	movs	r5, #10
 8016374:	1c5a      	adds	r2, r3, #1
 8016376:	6022      	str	r2, [r4, #0]
 8016378:	701d      	strb	r5, [r3, #0]
 801637a:	e7db      	b.n	8016334 <_puts_r+0x88>
 801637c:	08017118 	.word	0x08017118
 8016380:	08017138 	.word	0x08017138
 8016384:	080170f8 	.word	0x080170f8

08016388 <puts>:
 8016388:	4b02      	ldr	r3, [pc, #8]	; (8016394 <puts+0xc>)
 801638a:	4601      	mov	r1, r0
 801638c:	6818      	ldr	r0, [r3, #0]
 801638e:	f7ff bf8d 	b.w	80162ac <_puts_r>
 8016392:	bf00      	nop
 8016394:	24000098 	.word	0x24000098

08016398 <__swbuf_r>:
 8016398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801639a:	460e      	mov	r6, r1
 801639c:	4614      	mov	r4, r2
 801639e:	4605      	mov	r5, r0
 80163a0:	b118      	cbz	r0, 80163aa <__swbuf_r+0x12>
 80163a2:	6983      	ldr	r3, [r0, #24]
 80163a4:	b90b      	cbnz	r3, 80163aa <__swbuf_r+0x12>
 80163a6:	f000 f9d1 	bl	801674c <__sinit>
 80163aa:	4b21      	ldr	r3, [pc, #132]	; (8016430 <__swbuf_r+0x98>)
 80163ac:	429c      	cmp	r4, r3
 80163ae:	d12b      	bne.n	8016408 <__swbuf_r+0x70>
 80163b0:	686c      	ldr	r4, [r5, #4]
 80163b2:	69a3      	ldr	r3, [r4, #24]
 80163b4:	60a3      	str	r3, [r4, #8]
 80163b6:	89a3      	ldrh	r3, [r4, #12]
 80163b8:	071a      	lsls	r2, r3, #28
 80163ba:	d52f      	bpl.n	801641c <__swbuf_r+0x84>
 80163bc:	6923      	ldr	r3, [r4, #16]
 80163be:	b36b      	cbz	r3, 801641c <__swbuf_r+0x84>
 80163c0:	6923      	ldr	r3, [r4, #16]
 80163c2:	6820      	ldr	r0, [r4, #0]
 80163c4:	1ac0      	subs	r0, r0, r3
 80163c6:	6963      	ldr	r3, [r4, #20]
 80163c8:	b2f6      	uxtb	r6, r6
 80163ca:	4283      	cmp	r3, r0
 80163cc:	4637      	mov	r7, r6
 80163ce:	dc04      	bgt.n	80163da <__swbuf_r+0x42>
 80163d0:	4621      	mov	r1, r4
 80163d2:	4628      	mov	r0, r5
 80163d4:	f000 f926 	bl	8016624 <_fflush_r>
 80163d8:	bb30      	cbnz	r0, 8016428 <__swbuf_r+0x90>
 80163da:	68a3      	ldr	r3, [r4, #8]
 80163dc:	3b01      	subs	r3, #1
 80163de:	60a3      	str	r3, [r4, #8]
 80163e0:	6823      	ldr	r3, [r4, #0]
 80163e2:	1c5a      	adds	r2, r3, #1
 80163e4:	6022      	str	r2, [r4, #0]
 80163e6:	701e      	strb	r6, [r3, #0]
 80163e8:	6963      	ldr	r3, [r4, #20]
 80163ea:	3001      	adds	r0, #1
 80163ec:	4283      	cmp	r3, r0
 80163ee:	d004      	beq.n	80163fa <__swbuf_r+0x62>
 80163f0:	89a3      	ldrh	r3, [r4, #12]
 80163f2:	07db      	lsls	r3, r3, #31
 80163f4:	d506      	bpl.n	8016404 <__swbuf_r+0x6c>
 80163f6:	2e0a      	cmp	r6, #10
 80163f8:	d104      	bne.n	8016404 <__swbuf_r+0x6c>
 80163fa:	4621      	mov	r1, r4
 80163fc:	4628      	mov	r0, r5
 80163fe:	f000 f911 	bl	8016624 <_fflush_r>
 8016402:	b988      	cbnz	r0, 8016428 <__swbuf_r+0x90>
 8016404:	4638      	mov	r0, r7
 8016406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016408:	4b0a      	ldr	r3, [pc, #40]	; (8016434 <__swbuf_r+0x9c>)
 801640a:	429c      	cmp	r4, r3
 801640c:	d101      	bne.n	8016412 <__swbuf_r+0x7a>
 801640e:	68ac      	ldr	r4, [r5, #8]
 8016410:	e7cf      	b.n	80163b2 <__swbuf_r+0x1a>
 8016412:	4b09      	ldr	r3, [pc, #36]	; (8016438 <__swbuf_r+0xa0>)
 8016414:	429c      	cmp	r4, r3
 8016416:	bf08      	it	eq
 8016418:	68ec      	ldreq	r4, [r5, #12]
 801641a:	e7ca      	b.n	80163b2 <__swbuf_r+0x1a>
 801641c:	4621      	mov	r1, r4
 801641e:	4628      	mov	r0, r5
 8016420:	f000 f80c 	bl	801643c <__swsetup_r>
 8016424:	2800      	cmp	r0, #0
 8016426:	d0cb      	beq.n	80163c0 <__swbuf_r+0x28>
 8016428:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801642c:	e7ea      	b.n	8016404 <__swbuf_r+0x6c>
 801642e:	bf00      	nop
 8016430:	08017118 	.word	0x08017118
 8016434:	08017138 	.word	0x08017138
 8016438:	080170f8 	.word	0x080170f8

0801643c <__swsetup_r>:
 801643c:	4b32      	ldr	r3, [pc, #200]	; (8016508 <__swsetup_r+0xcc>)
 801643e:	b570      	push	{r4, r5, r6, lr}
 8016440:	681d      	ldr	r5, [r3, #0]
 8016442:	4606      	mov	r6, r0
 8016444:	460c      	mov	r4, r1
 8016446:	b125      	cbz	r5, 8016452 <__swsetup_r+0x16>
 8016448:	69ab      	ldr	r3, [r5, #24]
 801644a:	b913      	cbnz	r3, 8016452 <__swsetup_r+0x16>
 801644c:	4628      	mov	r0, r5
 801644e:	f000 f97d 	bl	801674c <__sinit>
 8016452:	4b2e      	ldr	r3, [pc, #184]	; (801650c <__swsetup_r+0xd0>)
 8016454:	429c      	cmp	r4, r3
 8016456:	d10f      	bne.n	8016478 <__swsetup_r+0x3c>
 8016458:	686c      	ldr	r4, [r5, #4]
 801645a:	89a3      	ldrh	r3, [r4, #12]
 801645c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016460:	0719      	lsls	r1, r3, #28
 8016462:	d42c      	bmi.n	80164be <__swsetup_r+0x82>
 8016464:	06dd      	lsls	r5, r3, #27
 8016466:	d411      	bmi.n	801648c <__swsetup_r+0x50>
 8016468:	2309      	movs	r3, #9
 801646a:	6033      	str	r3, [r6, #0]
 801646c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016470:	81a3      	strh	r3, [r4, #12]
 8016472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016476:	e03e      	b.n	80164f6 <__swsetup_r+0xba>
 8016478:	4b25      	ldr	r3, [pc, #148]	; (8016510 <__swsetup_r+0xd4>)
 801647a:	429c      	cmp	r4, r3
 801647c:	d101      	bne.n	8016482 <__swsetup_r+0x46>
 801647e:	68ac      	ldr	r4, [r5, #8]
 8016480:	e7eb      	b.n	801645a <__swsetup_r+0x1e>
 8016482:	4b24      	ldr	r3, [pc, #144]	; (8016514 <__swsetup_r+0xd8>)
 8016484:	429c      	cmp	r4, r3
 8016486:	bf08      	it	eq
 8016488:	68ec      	ldreq	r4, [r5, #12]
 801648a:	e7e6      	b.n	801645a <__swsetup_r+0x1e>
 801648c:	0758      	lsls	r0, r3, #29
 801648e:	d512      	bpl.n	80164b6 <__swsetup_r+0x7a>
 8016490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016492:	b141      	cbz	r1, 80164a6 <__swsetup_r+0x6a>
 8016494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016498:	4299      	cmp	r1, r3
 801649a:	d002      	beq.n	80164a2 <__swsetup_r+0x66>
 801649c:	4630      	mov	r0, r6
 801649e:	f000 fa5b 	bl	8016958 <_free_r>
 80164a2:	2300      	movs	r3, #0
 80164a4:	6363      	str	r3, [r4, #52]	; 0x34
 80164a6:	89a3      	ldrh	r3, [r4, #12]
 80164a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80164ac:	81a3      	strh	r3, [r4, #12]
 80164ae:	2300      	movs	r3, #0
 80164b0:	6063      	str	r3, [r4, #4]
 80164b2:	6923      	ldr	r3, [r4, #16]
 80164b4:	6023      	str	r3, [r4, #0]
 80164b6:	89a3      	ldrh	r3, [r4, #12]
 80164b8:	f043 0308 	orr.w	r3, r3, #8
 80164bc:	81a3      	strh	r3, [r4, #12]
 80164be:	6923      	ldr	r3, [r4, #16]
 80164c0:	b94b      	cbnz	r3, 80164d6 <__swsetup_r+0x9a>
 80164c2:	89a3      	ldrh	r3, [r4, #12]
 80164c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80164c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164cc:	d003      	beq.n	80164d6 <__swsetup_r+0x9a>
 80164ce:	4621      	mov	r1, r4
 80164d0:	4630      	mov	r0, r6
 80164d2:	f000 fa01 	bl	80168d8 <__smakebuf_r>
 80164d6:	89a0      	ldrh	r0, [r4, #12]
 80164d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80164dc:	f010 0301 	ands.w	r3, r0, #1
 80164e0:	d00a      	beq.n	80164f8 <__swsetup_r+0xbc>
 80164e2:	2300      	movs	r3, #0
 80164e4:	60a3      	str	r3, [r4, #8]
 80164e6:	6963      	ldr	r3, [r4, #20]
 80164e8:	425b      	negs	r3, r3
 80164ea:	61a3      	str	r3, [r4, #24]
 80164ec:	6923      	ldr	r3, [r4, #16]
 80164ee:	b943      	cbnz	r3, 8016502 <__swsetup_r+0xc6>
 80164f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80164f4:	d1ba      	bne.n	801646c <__swsetup_r+0x30>
 80164f6:	bd70      	pop	{r4, r5, r6, pc}
 80164f8:	0781      	lsls	r1, r0, #30
 80164fa:	bf58      	it	pl
 80164fc:	6963      	ldrpl	r3, [r4, #20]
 80164fe:	60a3      	str	r3, [r4, #8]
 8016500:	e7f4      	b.n	80164ec <__swsetup_r+0xb0>
 8016502:	2000      	movs	r0, #0
 8016504:	e7f7      	b.n	80164f6 <__swsetup_r+0xba>
 8016506:	bf00      	nop
 8016508:	24000098 	.word	0x24000098
 801650c:	08017118 	.word	0x08017118
 8016510:	08017138 	.word	0x08017138
 8016514:	080170f8 	.word	0x080170f8

08016518 <__sflush_r>:
 8016518:	898a      	ldrh	r2, [r1, #12]
 801651a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801651e:	4605      	mov	r5, r0
 8016520:	0710      	lsls	r0, r2, #28
 8016522:	460c      	mov	r4, r1
 8016524:	d458      	bmi.n	80165d8 <__sflush_r+0xc0>
 8016526:	684b      	ldr	r3, [r1, #4]
 8016528:	2b00      	cmp	r3, #0
 801652a:	dc05      	bgt.n	8016538 <__sflush_r+0x20>
 801652c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801652e:	2b00      	cmp	r3, #0
 8016530:	dc02      	bgt.n	8016538 <__sflush_r+0x20>
 8016532:	2000      	movs	r0, #0
 8016534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801653a:	2e00      	cmp	r6, #0
 801653c:	d0f9      	beq.n	8016532 <__sflush_r+0x1a>
 801653e:	2300      	movs	r3, #0
 8016540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016544:	682f      	ldr	r7, [r5, #0]
 8016546:	602b      	str	r3, [r5, #0]
 8016548:	d032      	beq.n	80165b0 <__sflush_r+0x98>
 801654a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801654c:	89a3      	ldrh	r3, [r4, #12]
 801654e:	075a      	lsls	r2, r3, #29
 8016550:	d505      	bpl.n	801655e <__sflush_r+0x46>
 8016552:	6863      	ldr	r3, [r4, #4]
 8016554:	1ac0      	subs	r0, r0, r3
 8016556:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016558:	b10b      	cbz	r3, 801655e <__sflush_r+0x46>
 801655a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801655c:	1ac0      	subs	r0, r0, r3
 801655e:	2300      	movs	r3, #0
 8016560:	4602      	mov	r2, r0
 8016562:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016564:	6a21      	ldr	r1, [r4, #32]
 8016566:	4628      	mov	r0, r5
 8016568:	47b0      	blx	r6
 801656a:	1c43      	adds	r3, r0, #1
 801656c:	89a3      	ldrh	r3, [r4, #12]
 801656e:	d106      	bne.n	801657e <__sflush_r+0x66>
 8016570:	6829      	ldr	r1, [r5, #0]
 8016572:	291d      	cmp	r1, #29
 8016574:	d82c      	bhi.n	80165d0 <__sflush_r+0xb8>
 8016576:	4a2a      	ldr	r2, [pc, #168]	; (8016620 <__sflush_r+0x108>)
 8016578:	40ca      	lsrs	r2, r1
 801657a:	07d6      	lsls	r6, r2, #31
 801657c:	d528      	bpl.n	80165d0 <__sflush_r+0xb8>
 801657e:	2200      	movs	r2, #0
 8016580:	6062      	str	r2, [r4, #4]
 8016582:	04d9      	lsls	r1, r3, #19
 8016584:	6922      	ldr	r2, [r4, #16]
 8016586:	6022      	str	r2, [r4, #0]
 8016588:	d504      	bpl.n	8016594 <__sflush_r+0x7c>
 801658a:	1c42      	adds	r2, r0, #1
 801658c:	d101      	bne.n	8016592 <__sflush_r+0x7a>
 801658e:	682b      	ldr	r3, [r5, #0]
 8016590:	b903      	cbnz	r3, 8016594 <__sflush_r+0x7c>
 8016592:	6560      	str	r0, [r4, #84]	; 0x54
 8016594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016596:	602f      	str	r7, [r5, #0]
 8016598:	2900      	cmp	r1, #0
 801659a:	d0ca      	beq.n	8016532 <__sflush_r+0x1a>
 801659c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165a0:	4299      	cmp	r1, r3
 80165a2:	d002      	beq.n	80165aa <__sflush_r+0x92>
 80165a4:	4628      	mov	r0, r5
 80165a6:	f000 f9d7 	bl	8016958 <_free_r>
 80165aa:	2000      	movs	r0, #0
 80165ac:	6360      	str	r0, [r4, #52]	; 0x34
 80165ae:	e7c1      	b.n	8016534 <__sflush_r+0x1c>
 80165b0:	6a21      	ldr	r1, [r4, #32]
 80165b2:	2301      	movs	r3, #1
 80165b4:	4628      	mov	r0, r5
 80165b6:	47b0      	blx	r6
 80165b8:	1c41      	adds	r1, r0, #1
 80165ba:	d1c7      	bne.n	801654c <__sflush_r+0x34>
 80165bc:	682b      	ldr	r3, [r5, #0]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d0c4      	beq.n	801654c <__sflush_r+0x34>
 80165c2:	2b1d      	cmp	r3, #29
 80165c4:	d001      	beq.n	80165ca <__sflush_r+0xb2>
 80165c6:	2b16      	cmp	r3, #22
 80165c8:	d101      	bne.n	80165ce <__sflush_r+0xb6>
 80165ca:	602f      	str	r7, [r5, #0]
 80165cc:	e7b1      	b.n	8016532 <__sflush_r+0x1a>
 80165ce:	89a3      	ldrh	r3, [r4, #12]
 80165d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165d4:	81a3      	strh	r3, [r4, #12]
 80165d6:	e7ad      	b.n	8016534 <__sflush_r+0x1c>
 80165d8:	690f      	ldr	r7, [r1, #16]
 80165da:	2f00      	cmp	r7, #0
 80165dc:	d0a9      	beq.n	8016532 <__sflush_r+0x1a>
 80165de:	0793      	lsls	r3, r2, #30
 80165e0:	680e      	ldr	r6, [r1, #0]
 80165e2:	bf08      	it	eq
 80165e4:	694b      	ldreq	r3, [r1, #20]
 80165e6:	600f      	str	r7, [r1, #0]
 80165e8:	bf18      	it	ne
 80165ea:	2300      	movne	r3, #0
 80165ec:	eba6 0807 	sub.w	r8, r6, r7
 80165f0:	608b      	str	r3, [r1, #8]
 80165f2:	f1b8 0f00 	cmp.w	r8, #0
 80165f6:	dd9c      	ble.n	8016532 <__sflush_r+0x1a>
 80165f8:	6a21      	ldr	r1, [r4, #32]
 80165fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80165fc:	4643      	mov	r3, r8
 80165fe:	463a      	mov	r2, r7
 8016600:	4628      	mov	r0, r5
 8016602:	47b0      	blx	r6
 8016604:	2800      	cmp	r0, #0
 8016606:	dc06      	bgt.n	8016616 <__sflush_r+0xfe>
 8016608:	89a3      	ldrh	r3, [r4, #12]
 801660a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801660e:	81a3      	strh	r3, [r4, #12]
 8016610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016614:	e78e      	b.n	8016534 <__sflush_r+0x1c>
 8016616:	4407      	add	r7, r0
 8016618:	eba8 0800 	sub.w	r8, r8, r0
 801661c:	e7e9      	b.n	80165f2 <__sflush_r+0xda>
 801661e:	bf00      	nop
 8016620:	20400001 	.word	0x20400001

08016624 <_fflush_r>:
 8016624:	b538      	push	{r3, r4, r5, lr}
 8016626:	690b      	ldr	r3, [r1, #16]
 8016628:	4605      	mov	r5, r0
 801662a:	460c      	mov	r4, r1
 801662c:	b913      	cbnz	r3, 8016634 <_fflush_r+0x10>
 801662e:	2500      	movs	r5, #0
 8016630:	4628      	mov	r0, r5
 8016632:	bd38      	pop	{r3, r4, r5, pc}
 8016634:	b118      	cbz	r0, 801663e <_fflush_r+0x1a>
 8016636:	6983      	ldr	r3, [r0, #24]
 8016638:	b90b      	cbnz	r3, 801663e <_fflush_r+0x1a>
 801663a:	f000 f887 	bl	801674c <__sinit>
 801663e:	4b14      	ldr	r3, [pc, #80]	; (8016690 <_fflush_r+0x6c>)
 8016640:	429c      	cmp	r4, r3
 8016642:	d11b      	bne.n	801667c <_fflush_r+0x58>
 8016644:	686c      	ldr	r4, [r5, #4]
 8016646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d0ef      	beq.n	801662e <_fflush_r+0xa>
 801664e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016650:	07d0      	lsls	r0, r2, #31
 8016652:	d404      	bmi.n	801665e <_fflush_r+0x3a>
 8016654:	0599      	lsls	r1, r3, #22
 8016656:	d402      	bmi.n	801665e <_fflush_r+0x3a>
 8016658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801665a:	f000 f915 	bl	8016888 <__retarget_lock_acquire_recursive>
 801665e:	4628      	mov	r0, r5
 8016660:	4621      	mov	r1, r4
 8016662:	f7ff ff59 	bl	8016518 <__sflush_r>
 8016666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016668:	07da      	lsls	r2, r3, #31
 801666a:	4605      	mov	r5, r0
 801666c:	d4e0      	bmi.n	8016630 <_fflush_r+0xc>
 801666e:	89a3      	ldrh	r3, [r4, #12]
 8016670:	059b      	lsls	r3, r3, #22
 8016672:	d4dd      	bmi.n	8016630 <_fflush_r+0xc>
 8016674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016676:	f000 f908 	bl	801688a <__retarget_lock_release_recursive>
 801667a:	e7d9      	b.n	8016630 <_fflush_r+0xc>
 801667c:	4b05      	ldr	r3, [pc, #20]	; (8016694 <_fflush_r+0x70>)
 801667e:	429c      	cmp	r4, r3
 8016680:	d101      	bne.n	8016686 <_fflush_r+0x62>
 8016682:	68ac      	ldr	r4, [r5, #8]
 8016684:	e7df      	b.n	8016646 <_fflush_r+0x22>
 8016686:	4b04      	ldr	r3, [pc, #16]	; (8016698 <_fflush_r+0x74>)
 8016688:	429c      	cmp	r4, r3
 801668a:	bf08      	it	eq
 801668c:	68ec      	ldreq	r4, [r5, #12]
 801668e:	e7da      	b.n	8016646 <_fflush_r+0x22>
 8016690:	08017118 	.word	0x08017118
 8016694:	08017138 	.word	0x08017138
 8016698:	080170f8 	.word	0x080170f8

0801669c <std>:
 801669c:	2300      	movs	r3, #0
 801669e:	b510      	push	{r4, lr}
 80166a0:	4604      	mov	r4, r0
 80166a2:	e9c0 3300 	strd	r3, r3, [r0]
 80166a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80166aa:	6083      	str	r3, [r0, #8]
 80166ac:	8181      	strh	r1, [r0, #12]
 80166ae:	6643      	str	r3, [r0, #100]	; 0x64
 80166b0:	81c2      	strh	r2, [r0, #14]
 80166b2:	6183      	str	r3, [r0, #24]
 80166b4:	4619      	mov	r1, r3
 80166b6:	2208      	movs	r2, #8
 80166b8:	305c      	adds	r0, #92	; 0x5c
 80166ba:	f7ff fdef 	bl	801629c <memset>
 80166be:	4b05      	ldr	r3, [pc, #20]	; (80166d4 <std+0x38>)
 80166c0:	6263      	str	r3, [r4, #36]	; 0x24
 80166c2:	4b05      	ldr	r3, [pc, #20]	; (80166d8 <std+0x3c>)
 80166c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80166c6:	4b05      	ldr	r3, [pc, #20]	; (80166dc <std+0x40>)
 80166c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80166ca:	4b05      	ldr	r3, [pc, #20]	; (80166e0 <std+0x44>)
 80166cc:	6224      	str	r4, [r4, #32]
 80166ce:	6323      	str	r3, [r4, #48]	; 0x30
 80166d0:	bd10      	pop	{r4, pc}
 80166d2:	bf00      	nop
 80166d4:	08016b39 	.word	0x08016b39
 80166d8:	08016b5b 	.word	0x08016b5b
 80166dc:	08016b93 	.word	0x08016b93
 80166e0:	08016bb7 	.word	0x08016bb7

080166e4 <_cleanup_r>:
 80166e4:	4901      	ldr	r1, [pc, #4]	; (80166ec <_cleanup_r+0x8>)
 80166e6:	f000 b8af 	b.w	8016848 <_fwalk_reent>
 80166ea:	bf00      	nop
 80166ec:	08016625 	.word	0x08016625

080166f0 <__sfmoreglue>:
 80166f0:	b570      	push	{r4, r5, r6, lr}
 80166f2:	2268      	movs	r2, #104	; 0x68
 80166f4:	1e4d      	subs	r5, r1, #1
 80166f6:	4355      	muls	r5, r2
 80166f8:	460e      	mov	r6, r1
 80166fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80166fe:	f000 f997 	bl	8016a30 <_malloc_r>
 8016702:	4604      	mov	r4, r0
 8016704:	b140      	cbz	r0, 8016718 <__sfmoreglue+0x28>
 8016706:	2100      	movs	r1, #0
 8016708:	e9c0 1600 	strd	r1, r6, [r0]
 801670c:	300c      	adds	r0, #12
 801670e:	60a0      	str	r0, [r4, #8]
 8016710:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016714:	f7ff fdc2 	bl	801629c <memset>
 8016718:	4620      	mov	r0, r4
 801671a:	bd70      	pop	{r4, r5, r6, pc}

0801671c <__sfp_lock_acquire>:
 801671c:	4801      	ldr	r0, [pc, #4]	; (8016724 <__sfp_lock_acquire+0x8>)
 801671e:	f000 b8b3 	b.w	8016888 <__retarget_lock_acquire_recursive>
 8016722:	bf00      	nop
 8016724:	240051e1 	.word	0x240051e1

08016728 <__sfp_lock_release>:
 8016728:	4801      	ldr	r0, [pc, #4]	; (8016730 <__sfp_lock_release+0x8>)
 801672a:	f000 b8ae 	b.w	801688a <__retarget_lock_release_recursive>
 801672e:	bf00      	nop
 8016730:	240051e1 	.word	0x240051e1

08016734 <__sinit_lock_acquire>:
 8016734:	4801      	ldr	r0, [pc, #4]	; (801673c <__sinit_lock_acquire+0x8>)
 8016736:	f000 b8a7 	b.w	8016888 <__retarget_lock_acquire_recursive>
 801673a:	bf00      	nop
 801673c:	240051e2 	.word	0x240051e2

08016740 <__sinit_lock_release>:
 8016740:	4801      	ldr	r0, [pc, #4]	; (8016748 <__sinit_lock_release+0x8>)
 8016742:	f000 b8a2 	b.w	801688a <__retarget_lock_release_recursive>
 8016746:	bf00      	nop
 8016748:	240051e2 	.word	0x240051e2

0801674c <__sinit>:
 801674c:	b510      	push	{r4, lr}
 801674e:	4604      	mov	r4, r0
 8016750:	f7ff fff0 	bl	8016734 <__sinit_lock_acquire>
 8016754:	69a3      	ldr	r3, [r4, #24]
 8016756:	b11b      	cbz	r3, 8016760 <__sinit+0x14>
 8016758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801675c:	f7ff bff0 	b.w	8016740 <__sinit_lock_release>
 8016760:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016764:	6523      	str	r3, [r4, #80]	; 0x50
 8016766:	4b13      	ldr	r3, [pc, #76]	; (80167b4 <__sinit+0x68>)
 8016768:	4a13      	ldr	r2, [pc, #76]	; (80167b8 <__sinit+0x6c>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	62a2      	str	r2, [r4, #40]	; 0x28
 801676e:	42a3      	cmp	r3, r4
 8016770:	bf04      	itt	eq
 8016772:	2301      	moveq	r3, #1
 8016774:	61a3      	streq	r3, [r4, #24]
 8016776:	4620      	mov	r0, r4
 8016778:	f000 f820 	bl	80167bc <__sfp>
 801677c:	6060      	str	r0, [r4, #4]
 801677e:	4620      	mov	r0, r4
 8016780:	f000 f81c 	bl	80167bc <__sfp>
 8016784:	60a0      	str	r0, [r4, #8]
 8016786:	4620      	mov	r0, r4
 8016788:	f000 f818 	bl	80167bc <__sfp>
 801678c:	2200      	movs	r2, #0
 801678e:	60e0      	str	r0, [r4, #12]
 8016790:	2104      	movs	r1, #4
 8016792:	6860      	ldr	r0, [r4, #4]
 8016794:	f7ff ff82 	bl	801669c <std>
 8016798:	68a0      	ldr	r0, [r4, #8]
 801679a:	2201      	movs	r2, #1
 801679c:	2109      	movs	r1, #9
 801679e:	f7ff ff7d 	bl	801669c <std>
 80167a2:	68e0      	ldr	r0, [r4, #12]
 80167a4:	2202      	movs	r2, #2
 80167a6:	2112      	movs	r1, #18
 80167a8:	f7ff ff78 	bl	801669c <std>
 80167ac:	2301      	movs	r3, #1
 80167ae:	61a3      	str	r3, [r4, #24]
 80167b0:	e7d2      	b.n	8016758 <__sinit+0xc>
 80167b2:	bf00      	nop
 80167b4:	080170f4 	.word	0x080170f4
 80167b8:	080166e5 	.word	0x080166e5

080167bc <__sfp>:
 80167bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167be:	4607      	mov	r7, r0
 80167c0:	f7ff ffac 	bl	801671c <__sfp_lock_acquire>
 80167c4:	4b1e      	ldr	r3, [pc, #120]	; (8016840 <__sfp+0x84>)
 80167c6:	681e      	ldr	r6, [r3, #0]
 80167c8:	69b3      	ldr	r3, [r6, #24]
 80167ca:	b913      	cbnz	r3, 80167d2 <__sfp+0x16>
 80167cc:	4630      	mov	r0, r6
 80167ce:	f7ff ffbd 	bl	801674c <__sinit>
 80167d2:	3648      	adds	r6, #72	; 0x48
 80167d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80167d8:	3b01      	subs	r3, #1
 80167da:	d503      	bpl.n	80167e4 <__sfp+0x28>
 80167dc:	6833      	ldr	r3, [r6, #0]
 80167de:	b30b      	cbz	r3, 8016824 <__sfp+0x68>
 80167e0:	6836      	ldr	r6, [r6, #0]
 80167e2:	e7f7      	b.n	80167d4 <__sfp+0x18>
 80167e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80167e8:	b9d5      	cbnz	r5, 8016820 <__sfp+0x64>
 80167ea:	4b16      	ldr	r3, [pc, #88]	; (8016844 <__sfp+0x88>)
 80167ec:	60e3      	str	r3, [r4, #12]
 80167ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80167f2:	6665      	str	r5, [r4, #100]	; 0x64
 80167f4:	f000 f847 	bl	8016886 <__retarget_lock_init_recursive>
 80167f8:	f7ff ff96 	bl	8016728 <__sfp_lock_release>
 80167fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016800:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016804:	6025      	str	r5, [r4, #0]
 8016806:	61a5      	str	r5, [r4, #24]
 8016808:	2208      	movs	r2, #8
 801680a:	4629      	mov	r1, r5
 801680c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016810:	f7ff fd44 	bl	801629c <memset>
 8016814:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016818:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801681c:	4620      	mov	r0, r4
 801681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016820:	3468      	adds	r4, #104	; 0x68
 8016822:	e7d9      	b.n	80167d8 <__sfp+0x1c>
 8016824:	2104      	movs	r1, #4
 8016826:	4638      	mov	r0, r7
 8016828:	f7ff ff62 	bl	80166f0 <__sfmoreglue>
 801682c:	4604      	mov	r4, r0
 801682e:	6030      	str	r0, [r6, #0]
 8016830:	2800      	cmp	r0, #0
 8016832:	d1d5      	bne.n	80167e0 <__sfp+0x24>
 8016834:	f7ff ff78 	bl	8016728 <__sfp_lock_release>
 8016838:	230c      	movs	r3, #12
 801683a:	603b      	str	r3, [r7, #0]
 801683c:	e7ee      	b.n	801681c <__sfp+0x60>
 801683e:	bf00      	nop
 8016840:	080170f4 	.word	0x080170f4
 8016844:	ffff0001 	.word	0xffff0001

08016848 <_fwalk_reent>:
 8016848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801684c:	4606      	mov	r6, r0
 801684e:	4688      	mov	r8, r1
 8016850:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016854:	2700      	movs	r7, #0
 8016856:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801685a:	f1b9 0901 	subs.w	r9, r9, #1
 801685e:	d505      	bpl.n	801686c <_fwalk_reent+0x24>
 8016860:	6824      	ldr	r4, [r4, #0]
 8016862:	2c00      	cmp	r4, #0
 8016864:	d1f7      	bne.n	8016856 <_fwalk_reent+0xe>
 8016866:	4638      	mov	r0, r7
 8016868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801686c:	89ab      	ldrh	r3, [r5, #12]
 801686e:	2b01      	cmp	r3, #1
 8016870:	d907      	bls.n	8016882 <_fwalk_reent+0x3a>
 8016872:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016876:	3301      	adds	r3, #1
 8016878:	d003      	beq.n	8016882 <_fwalk_reent+0x3a>
 801687a:	4629      	mov	r1, r5
 801687c:	4630      	mov	r0, r6
 801687e:	47c0      	blx	r8
 8016880:	4307      	orrs	r7, r0
 8016882:	3568      	adds	r5, #104	; 0x68
 8016884:	e7e9      	b.n	801685a <_fwalk_reent+0x12>

08016886 <__retarget_lock_init_recursive>:
 8016886:	4770      	bx	lr

08016888 <__retarget_lock_acquire_recursive>:
 8016888:	4770      	bx	lr

0801688a <__retarget_lock_release_recursive>:
 801688a:	4770      	bx	lr

0801688c <__swhatbuf_r>:
 801688c:	b570      	push	{r4, r5, r6, lr}
 801688e:	460e      	mov	r6, r1
 8016890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016894:	2900      	cmp	r1, #0
 8016896:	b096      	sub	sp, #88	; 0x58
 8016898:	4614      	mov	r4, r2
 801689a:	461d      	mov	r5, r3
 801689c:	da08      	bge.n	80168b0 <__swhatbuf_r+0x24>
 801689e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80168a2:	2200      	movs	r2, #0
 80168a4:	602a      	str	r2, [r5, #0]
 80168a6:	061a      	lsls	r2, r3, #24
 80168a8:	d410      	bmi.n	80168cc <__swhatbuf_r+0x40>
 80168aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80168ae:	e00e      	b.n	80168ce <__swhatbuf_r+0x42>
 80168b0:	466a      	mov	r2, sp
 80168b2:	f000 f9a7 	bl	8016c04 <_fstat_r>
 80168b6:	2800      	cmp	r0, #0
 80168b8:	dbf1      	blt.n	801689e <__swhatbuf_r+0x12>
 80168ba:	9a01      	ldr	r2, [sp, #4]
 80168bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80168c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80168c4:	425a      	negs	r2, r3
 80168c6:	415a      	adcs	r2, r3
 80168c8:	602a      	str	r2, [r5, #0]
 80168ca:	e7ee      	b.n	80168aa <__swhatbuf_r+0x1e>
 80168cc:	2340      	movs	r3, #64	; 0x40
 80168ce:	2000      	movs	r0, #0
 80168d0:	6023      	str	r3, [r4, #0]
 80168d2:	b016      	add	sp, #88	; 0x58
 80168d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080168d8 <__smakebuf_r>:
 80168d8:	898b      	ldrh	r3, [r1, #12]
 80168da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80168dc:	079d      	lsls	r5, r3, #30
 80168de:	4606      	mov	r6, r0
 80168e0:	460c      	mov	r4, r1
 80168e2:	d507      	bpl.n	80168f4 <__smakebuf_r+0x1c>
 80168e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80168e8:	6023      	str	r3, [r4, #0]
 80168ea:	6123      	str	r3, [r4, #16]
 80168ec:	2301      	movs	r3, #1
 80168ee:	6163      	str	r3, [r4, #20]
 80168f0:	b002      	add	sp, #8
 80168f2:	bd70      	pop	{r4, r5, r6, pc}
 80168f4:	ab01      	add	r3, sp, #4
 80168f6:	466a      	mov	r2, sp
 80168f8:	f7ff ffc8 	bl	801688c <__swhatbuf_r>
 80168fc:	9900      	ldr	r1, [sp, #0]
 80168fe:	4605      	mov	r5, r0
 8016900:	4630      	mov	r0, r6
 8016902:	f000 f895 	bl	8016a30 <_malloc_r>
 8016906:	b948      	cbnz	r0, 801691c <__smakebuf_r+0x44>
 8016908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801690c:	059a      	lsls	r2, r3, #22
 801690e:	d4ef      	bmi.n	80168f0 <__smakebuf_r+0x18>
 8016910:	f023 0303 	bic.w	r3, r3, #3
 8016914:	f043 0302 	orr.w	r3, r3, #2
 8016918:	81a3      	strh	r3, [r4, #12]
 801691a:	e7e3      	b.n	80168e4 <__smakebuf_r+0xc>
 801691c:	4b0d      	ldr	r3, [pc, #52]	; (8016954 <__smakebuf_r+0x7c>)
 801691e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016920:	89a3      	ldrh	r3, [r4, #12]
 8016922:	6020      	str	r0, [r4, #0]
 8016924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016928:	81a3      	strh	r3, [r4, #12]
 801692a:	9b00      	ldr	r3, [sp, #0]
 801692c:	6163      	str	r3, [r4, #20]
 801692e:	9b01      	ldr	r3, [sp, #4]
 8016930:	6120      	str	r0, [r4, #16]
 8016932:	b15b      	cbz	r3, 801694c <__smakebuf_r+0x74>
 8016934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016938:	4630      	mov	r0, r6
 801693a:	f000 f975 	bl	8016c28 <_isatty_r>
 801693e:	b128      	cbz	r0, 801694c <__smakebuf_r+0x74>
 8016940:	89a3      	ldrh	r3, [r4, #12]
 8016942:	f023 0303 	bic.w	r3, r3, #3
 8016946:	f043 0301 	orr.w	r3, r3, #1
 801694a:	81a3      	strh	r3, [r4, #12]
 801694c:	89a0      	ldrh	r0, [r4, #12]
 801694e:	4305      	orrs	r5, r0
 8016950:	81a5      	strh	r5, [r4, #12]
 8016952:	e7cd      	b.n	80168f0 <__smakebuf_r+0x18>
 8016954:	080166e5 	.word	0x080166e5

08016958 <_free_r>:
 8016958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801695a:	2900      	cmp	r1, #0
 801695c:	d044      	beq.n	80169e8 <_free_r+0x90>
 801695e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016962:	9001      	str	r0, [sp, #4]
 8016964:	2b00      	cmp	r3, #0
 8016966:	f1a1 0404 	sub.w	r4, r1, #4
 801696a:	bfb8      	it	lt
 801696c:	18e4      	addlt	r4, r4, r3
 801696e:	f000 f97d 	bl	8016c6c <__malloc_lock>
 8016972:	4a1e      	ldr	r2, [pc, #120]	; (80169ec <_free_r+0x94>)
 8016974:	9801      	ldr	r0, [sp, #4]
 8016976:	6813      	ldr	r3, [r2, #0]
 8016978:	b933      	cbnz	r3, 8016988 <_free_r+0x30>
 801697a:	6063      	str	r3, [r4, #4]
 801697c:	6014      	str	r4, [r2, #0]
 801697e:	b003      	add	sp, #12
 8016980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016984:	f000 b978 	b.w	8016c78 <__malloc_unlock>
 8016988:	42a3      	cmp	r3, r4
 801698a:	d908      	bls.n	801699e <_free_r+0x46>
 801698c:	6825      	ldr	r5, [r4, #0]
 801698e:	1961      	adds	r1, r4, r5
 8016990:	428b      	cmp	r3, r1
 8016992:	bf01      	itttt	eq
 8016994:	6819      	ldreq	r1, [r3, #0]
 8016996:	685b      	ldreq	r3, [r3, #4]
 8016998:	1949      	addeq	r1, r1, r5
 801699a:	6021      	streq	r1, [r4, #0]
 801699c:	e7ed      	b.n	801697a <_free_r+0x22>
 801699e:	461a      	mov	r2, r3
 80169a0:	685b      	ldr	r3, [r3, #4]
 80169a2:	b10b      	cbz	r3, 80169a8 <_free_r+0x50>
 80169a4:	42a3      	cmp	r3, r4
 80169a6:	d9fa      	bls.n	801699e <_free_r+0x46>
 80169a8:	6811      	ldr	r1, [r2, #0]
 80169aa:	1855      	adds	r5, r2, r1
 80169ac:	42a5      	cmp	r5, r4
 80169ae:	d10b      	bne.n	80169c8 <_free_r+0x70>
 80169b0:	6824      	ldr	r4, [r4, #0]
 80169b2:	4421      	add	r1, r4
 80169b4:	1854      	adds	r4, r2, r1
 80169b6:	42a3      	cmp	r3, r4
 80169b8:	6011      	str	r1, [r2, #0]
 80169ba:	d1e0      	bne.n	801697e <_free_r+0x26>
 80169bc:	681c      	ldr	r4, [r3, #0]
 80169be:	685b      	ldr	r3, [r3, #4]
 80169c0:	6053      	str	r3, [r2, #4]
 80169c2:	4421      	add	r1, r4
 80169c4:	6011      	str	r1, [r2, #0]
 80169c6:	e7da      	b.n	801697e <_free_r+0x26>
 80169c8:	d902      	bls.n	80169d0 <_free_r+0x78>
 80169ca:	230c      	movs	r3, #12
 80169cc:	6003      	str	r3, [r0, #0]
 80169ce:	e7d6      	b.n	801697e <_free_r+0x26>
 80169d0:	6825      	ldr	r5, [r4, #0]
 80169d2:	1961      	adds	r1, r4, r5
 80169d4:	428b      	cmp	r3, r1
 80169d6:	bf04      	itt	eq
 80169d8:	6819      	ldreq	r1, [r3, #0]
 80169da:	685b      	ldreq	r3, [r3, #4]
 80169dc:	6063      	str	r3, [r4, #4]
 80169de:	bf04      	itt	eq
 80169e0:	1949      	addeq	r1, r1, r5
 80169e2:	6021      	streq	r1, [r4, #0]
 80169e4:	6054      	str	r4, [r2, #4]
 80169e6:	e7ca      	b.n	801697e <_free_r+0x26>
 80169e8:	b003      	add	sp, #12
 80169ea:	bd30      	pop	{r4, r5, pc}
 80169ec:	240051e4 	.word	0x240051e4

080169f0 <sbrk_aligned>:
 80169f0:	b570      	push	{r4, r5, r6, lr}
 80169f2:	4e0e      	ldr	r6, [pc, #56]	; (8016a2c <sbrk_aligned+0x3c>)
 80169f4:	460c      	mov	r4, r1
 80169f6:	6831      	ldr	r1, [r6, #0]
 80169f8:	4605      	mov	r5, r0
 80169fa:	b911      	cbnz	r1, 8016a02 <sbrk_aligned+0x12>
 80169fc:	f000 f88c 	bl	8016b18 <_sbrk_r>
 8016a00:	6030      	str	r0, [r6, #0]
 8016a02:	4621      	mov	r1, r4
 8016a04:	4628      	mov	r0, r5
 8016a06:	f000 f887 	bl	8016b18 <_sbrk_r>
 8016a0a:	1c43      	adds	r3, r0, #1
 8016a0c:	d00a      	beq.n	8016a24 <sbrk_aligned+0x34>
 8016a0e:	1cc4      	adds	r4, r0, #3
 8016a10:	f024 0403 	bic.w	r4, r4, #3
 8016a14:	42a0      	cmp	r0, r4
 8016a16:	d007      	beq.n	8016a28 <sbrk_aligned+0x38>
 8016a18:	1a21      	subs	r1, r4, r0
 8016a1a:	4628      	mov	r0, r5
 8016a1c:	f000 f87c 	bl	8016b18 <_sbrk_r>
 8016a20:	3001      	adds	r0, #1
 8016a22:	d101      	bne.n	8016a28 <sbrk_aligned+0x38>
 8016a24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016a28:	4620      	mov	r0, r4
 8016a2a:	bd70      	pop	{r4, r5, r6, pc}
 8016a2c:	240051e8 	.word	0x240051e8

08016a30 <_malloc_r>:
 8016a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a34:	1ccd      	adds	r5, r1, #3
 8016a36:	f025 0503 	bic.w	r5, r5, #3
 8016a3a:	3508      	adds	r5, #8
 8016a3c:	2d0c      	cmp	r5, #12
 8016a3e:	bf38      	it	cc
 8016a40:	250c      	movcc	r5, #12
 8016a42:	2d00      	cmp	r5, #0
 8016a44:	4607      	mov	r7, r0
 8016a46:	db01      	blt.n	8016a4c <_malloc_r+0x1c>
 8016a48:	42a9      	cmp	r1, r5
 8016a4a:	d905      	bls.n	8016a58 <_malloc_r+0x28>
 8016a4c:	230c      	movs	r3, #12
 8016a4e:	603b      	str	r3, [r7, #0]
 8016a50:	2600      	movs	r6, #0
 8016a52:	4630      	mov	r0, r6
 8016a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a58:	4e2e      	ldr	r6, [pc, #184]	; (8016b14 <_malloc_r+0xe4>)
 8016a5a:	f000 f907 	bl	8016c6c <__malloc_lock>
 8016a5e:	6833      	ldr	r3, [r6, #0]
 8016a60:	461c      	mov	r4, r3
 8016a62:	bb34      	cbnz	r4, 8016ab2 <_malloc_r+0x82>
 8016a64:	4629      	mov	r1, r5
 8016a66:	4638      	mov	r0, r7
 8016a68:	f7ff ffc2 	bl	80169f0 <sbrk_aligned>
 8016a6c:	1c43      	adds	r3, r0, #1
 8016a6e:	4604      	mov	r4, r0
 8016a70:	d14d      	bne.n	8016b0e <_malloc_r+0xde>
 8016a72:	6834      	ldr	r4, [r6, #0]
 8016a74:	4626      	mov	r6, r4
 8016a76:	2e00      	cmp	r6, #0
 8016a78:	d140      	bne.n	8016afc <_malloc_r+0xcc>
 8016a7a:	6823      	ldr	r3, [r4, #0]
 8016a7c:	4631      	mov	r1, r6
 8016a7e:	4638      	mov	r0, r7
 8016a80:	eb04 0803 	add.w	r8, r4, r3
 8016a84:	f000 f848 	bl	8016b18 <_sbrk_r>
 8016a88:	4580      	cmp	r8, r0
 8016a8a:	d13a      	bne.n	8016b02 <_malloc_r+0xd2>
 8016a8c:	6821      	ldr	r1, [r4, #0]
 8016a8e:	3503      	adds	r5, #3
 8016a90:	1a6d      	subs	r5, r5, r1
 8016a92:	f025 0503 	bic.w	r5, r5, #3
 8016a96:	3508      	adds	r5, #8
 8016a98:	2d0c      	cmp	r5, #12
 8016a9a:	bf38      	it	cc
 8016a9c:	250c      	movcc	r5, #12
 8016a9e:	4629      	mov	r1, r5
 8016aa0:	4638      	mov	r0, r7
 8016aa2:	f7ff ffa5 	bl	80169f0 <sbrk_aligned>
 8016aa6:	3001      	adds	r0, #1
 8016aa8:	d02b      	beq.n	8016b02 <_malloc_r+0xd2>
 8016aaa:	6823      	ldr	r3, [r4, #0]
 8016aac:	442b      	add	r3, r5
 8016aae:	6023      	str	r3, [r4, #0]
 8016ab0:	e00e      	b.n	8016ad0 <_malloc_r+0xa0>
 8016ab2:	6822      	ldr	r2, [r4, #0]
 8016ab4:	1b52      	subs	r2, r2, r5
 8016ab6:	d41e      	bmi.n	8016af6 <_malloc_r+0xc6>
 8016ab8:	2a0b      	cmp	r2, #11
 8016aba:	d916      	bls.n	8016aea <_malloc_r+0xba>
 8016abc:	1961      	adds	r1, r4, r5
 8016abe:	42a3      	cmp	r3, r4
 8016ac0:	6025      	str	r5, [r4, #0]
 8016ac2:	bf18      	it	ne
 8016ac4:	6059      	strne	r1, [r3, #4]
 8016ac6:	6863      	ldr	r3, [r4, #4]
 8016ac8:	bf08      	it	eq
 8016aca:	6031      	streq	r1, [r6, #0]
 8016acc:	5162      	str	r2, [r4, r5]
 8016ace:	604b      	str	r3, [r1, #4]
 8016ad0:	4638      	mov	r0, r7
 8016ad2:	f104 060b 	add.w	r6, r4, #11
 8016ad6:	f000 f8cf 	bl	8016c78 <__malloc_unlock>
 8016ada:	f026 0607 	bic.w	r6, r6, #7
 8016ade:	1d23      	adds	r3, r4, #4
 8016ae0:	1af2      	subs	r2, r6, r3
 8016ae2:	d0b6      	beq.n	8016a52 <_malloc_r+0x22>
 8016ae4:	1b9b      	subs	r3, r3, r6
 8016ae6:	50a3      	str	r3, [r4, r2]
 8016ae8:	e7b3      	b.n	8016a52 <_malloc_r+0x22>
 8016aea:	6862      	ldr	r2, [r4, #4]
 8016aec:	42a3      	cmp	r3, r4
 8016aee:	bf0c      	ite	eq
 8016af0:	6032      	streq	r2, [r6, #0]
 8016af2:	605a      	strne	r2, [r3, #4]
 8016af4:	e7ec      	b.n	8016ad0 <_malloc_r+0xa0>
 8016af6:	4623      	mov	r3, r4
 8016af8:	6864      	ldr	r4, [r4, #4]
 8016afa:	e7b2      	b.n	8016a62 <_malloc_r+0x32>
 8016afc:	4634      	mov	r4, r6
 8016afe:	6876      	ldr	r6, [r6, #4]
 8016b00:	e7b9      	b.n	8016a76 <_malloc_r+0x46>
 8016b02:	230c      	movs	r3, #12
 8016b04:	603b      	str	r3, [r7, #0]
 8016b06:	4638      	mov	r0, r7
 8016b08:	f000 f8b6 	bl	8016c78 <__malloc_unlock>
 8016b0c:	e7a1      	b.n	8016a52 <_malloc_r+0x22>
 8016b0e:	6025      	str	r5, [r4, #0]
 8016b10:	e7de      	b.n	8016ad0 <_malloc_r+0xa0>
 8016b12:	bf00      	nop
 8016b14:	240051e4 	.word	0x240051e4

08016b18 <_sbrk_r>:
 8016b18:	b538      	push	{r3, r4, r5, lr}
 8016b1a:	4d06      	ldr	r5, [pc, #24]	; (8016b34 <_sbrk_r+0x1c>)
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	4604      	mov	r4, r0
 8016b20:	4608      	mov	r0, r1
 8016b22:	602b      	str	r3, [r5, #0]
 8016b24:	f7ec fa7c 	bl	8003020 <_sbrk>
 8016b28:	1c43      	adds	r3, r0, #1
 8016b2a:	d102      	bne.n	8016b32 <_sbrk_r+0x1a>
 8016b2c:	682b      	ldr	r3, [r5, #0]
 8016b2e:	b103      	cbz	r3, 8016b32 <_sbrk_r+0x1a>
 8016b30:	6023      	str	r3, [r4, #0]
 8016b32:	bd38      	pop	{r3, r4, r5, pc}
 8016b34:	240051ec 	.word	0x240051ec

08016b38 <__sread>:
 8016b38:	b510      	push	{r4, lr}
 8016b3a:	460c      	mov	r4, r1
 8016b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b40:	f000 f8a0 	bl	8016c84 <_read_r>
 8016b44:	2800      	cmp	r0, #0
 8016b46:	bfab      	itete	ge
 8016b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8016b4c:	181b      	addge	r3, r3, r0
 8016b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016b52:	bfac      	ite	ge
 8016b54:	6563      	strge	r3, [r4, #84]	; 0x54
 8016b56:	81a3      	strhlt	r3, [r4, #12]
 8016b58:	bd10      	pop	{r4, pc}

08016b5a <__swrite>:
 8016b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b5e:	461f      	mov	r7, r3
 8016b60:	898b      	ldrh	r3, [r1, #12]
 8016b62:	05db      	lsls	r3, r3, #23
 8016b64:	4605      	mov	r5, r0
 8016b66:	460c      	mov	r4, r1
 8016b68:	4616      	mov	r6, r2
 8016b6a:	d505      	bpl.n	8016b78 <__swrite+0x1e>
 8016b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b70:	2302      	movs	r3, #2
 8016b72:	2200      	movs	r2, #0
 8016b74:	f000 f868 	bl	8016c48 <_lseek_r>
 8016b78:	89a3      	ldrh	r3, [r4, #12]
 8016b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016b82:	81a3      	strh	r3, [r4, #12]
 8016b84:	4632      	mov	r2, r6
 8016b86:	463b      	mov	r3, r7
 8016b88:	4628      	mov	r0, r5
 8016b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b8e:	f000 b817 	b.w	8016bc0 <_write_r>

08016b92 <__sseek>:
 8016b92:	b510      	push	{r4, lr}
 8016b94:	460c      	mov	r4, r1
 8016b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b9a:	f000 f855 	bl	8016c48 <_lseek_r>
 8016b9e:	1c43      	adds	r3, r0, #1
 8016ba0:	89a3      	ldrh	r3, [r4, #12]
 8016ba2:	bf15      	itete	ne
 8016ba4:	6560      	strne	r0, [r4, #84]	; 0x54
 8016ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016bae:	81a3      	strheq	r3, [r4, #12]
 8016bb0:	bf18      	it	ne
 8016bb2:	81a3      	strhne	r3, [r4, #12]
 8016bb4:	bd10      	pop	{r4, pc}

08016bb6 <__sclose>:
 8016bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bba:	f000 b813 	b.w	8016be4 <_close_r>
	...

08016bc0 <_write_r>:
 8016bc0:	b538      	push	{r3, r4, r5, lr}
 8016bc2:	4d07      	ldr	r5, [pc, #28]	; (8016be0 <_write_r+0x20>)
 8016bc4:	4604      	mov	r4, r0
 8016bc6:	4608      	mov	r0, r1
 8016bc8:	4611      	mov	r1, r2
 8016bca:	2200      	movs	r2, #0
 8016bcc:	602a      	str	r2, [r5, #0]
 8016bce:	461a      	mov	r2, r3
 8016bd0:	f7ec f9d5 	bl	8002f7e <_write>
 8016bd4:	1c43      	adds	r3, r0, #1
 8016bd6:	d102      	bne.n	8016bde <_write_r+0x1e>
 8016bd8:	682b      	ldr	r3, [r5, #0]
 8016bda:	b103      	cbz	r3, 8016bde <_write_r+0x1e>
 8016bdc:	6023      	str	r3, [r4, #0]
 8016bde:	bd38      	pop	{r3, r4, r5, pc}
 8016be0:	240051ec 	.word	0x240051ec

08016be4 <_close_r>:
 8016be4:	b538      	push	{r3, r4, r5, lr}
 8016be6:	4d06      	ldr	r5, [pc, #24]	; (8016c00 <_close_r+0x1c>)
 8016be8:	2300      	movs	r3, #0
 8016bea:	4604      	mov	r4, r0
 8016bec:	4608      	mov	r0, r1
 8016bee:	602b      	str	r3, [r5, #0]
 8016bf0:	f7ec f9e1 	bl	8002fb6 <_close>
 8016bf4:	1c43      	adds	r3, r0, #1
 8016bf6:	d102      	bne.n	8016bfe <_close_r+0x1a>
 8016bf8:	682b      	ldr	r3, [r5, #0]
 8016bfa:	b103      	cbz	r3, 8016bfe <_close_r+0x1a>
 8016bfc:	6023      	str	r3, [r4, #0]
 8016bfe:	bd38      	pop	{r3, r4, r5, pc}
 8016c00:	240051ec 	.word	0x240051ec

08016c04 <_fstat_r>:
 8016c04:	b538      	push	{r3, r4, r5, lr}
 8016c06:	4d07      	ldr	r5, [pc, #28]	; (8016c24 <_fstat_r+0x20>)
 8016c08:	2300      	movs	r3, #0
 8016c0a:	4604      	mov	r4, r0
 8016c0c:	4608      	mov	r0, r1
 8016c0e:	4611      	mov	r1, r2
 8016c10:	602b      	str	r3, [r5, #0]
 8016c12:	f7ec f9dc 	bl	8002fce <_fstat>
 8016c16:	1c43      	adds	r3, r0, #1
 8016c18:	d102      	bne.n	8016c20 <_fstat_r+0x1c>
 8016c1a:	682b      	ldr	r3, [r5, #0]
 8016c1c:	b103      	cbz	r3, 8016c20 <_fstat_r+0x1c>
 8016c1e:	6023      	str	r3, [r4, #0]
 8016c20:	bd38      	pop	{r3, r4, r5, pc}
 8016c22:	bf00      	nop
 8016c24:	240051ec 	.word	0x240051ec

08016c28 <_isatty_r>:
 8016c28:	b538      	push	{r3, r4, r5, lr}
 8016c2a:	4d06      	ldr	r5, [pc, #24]	; (8016c44 <_isatty_r+0x1c>)
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	4604      	mov	r4, r0
 8016c30:	4608      	mov	r0, r1
 8016c32:	602b      	str	r3, [r5, #0]
 8016c34:	f7ec f9db 	bl	8002fee <_isatty>
 8016c38:	1c43      	adds	r3, r0, #1
 8016c3a:	d102      	bne.n	8016c42 <_isatty_r+0x1a>
 8016c3c:	682b      	ldr	r3, [r5, #0]
 8016c3e:	b103      	cbz	r3, 8016c42 <_isatty_r+0x1a>
 8016c40:	6023      	str	r3, [r4, #0]
 8016c42:	bd38      	pop	{r3, r4, r5, pc}
 8016c44:	240051ec 	.word	0x240051ec

08016c48 <_lseek_r>:
 8016c48:	b538      	push	{r3, r4, r5, lr}
 8016c4a:	4d07      	ldr	r5, [pc, #28]	; (8016c68 <_lseek_r+0x20>)
 8016c4c:	4604      	mov	r4, r0
 8016c4e:	4608      	mov	r0, r1
 8016c50:	4611      	mov	r1, r2
 8016c52:	2200      	movs	r2, #0
 8016c54:	602a      	str	r2, [r5, #0]
 8016c56:	461a      	mov	r2, r3
 8016c58:	f7ec f9d4 	bl	8003004 <_lseek>
 8016c5c:	1c43      	adds	r3, r0, #1
 8016c5e:	d102      	bne.n	8016c66 <_lseek_r+0x1e>
 8016c60:	682b      	ldr	r3, [r5, #0]
 8016c62:	b103      	cbz	r3, 8016c66 <_lseek_r+0x1e>
 8016c64:	6023      	str	r3, [r4, #0]
 8016c66:	bd38      	pop	{r3, r4, r5, pc}
 8016c68:	240051ec 	.word	0x240051ec

08016c6c <__malloc_lock>:
 8016c6c:	4801      	ldr	r0, [pc, #4]	; (8016c74 <__malloc_lock+0x8>)
 8016c6e:	f7ff be0b 	b.w	8016888 <__retarget_lock_acquire_recursive>
 8016c72:	bf00      	nop
 8016c74:	240051e0 	.word	0x240051e0

08016c78 <__malloc_unlock>:
 8016c78:	4801      	ldr	r0, [pc, #4]	; (8016c80 <__malloc_unlock+0x8>)
 8016c7a:	f7ff be06 	b.w	801688a <__retarget_lock_release_recursive>
 8016c7e:	bf00      	nop
 8016c80:	240051e0 	.word	0x240051e0

08016c84 <_read_r>:
 8016c84:	b538      	push	{r3, r4, r5, lr}
 8016c86:	4d07      	ldr	r5, [pc, #28]	; (8016ca4 <_read_r+0x20>)
 8016c88:	4604      	mov	r4, r0
 8016c8a:	4608      	mov	r0, r1
 8016c8c:	4611      	mov	r1, r2
 8016c8e:	2200      	movs	r2, #0
 8016c90:	602a      	str	r2, [r5, #0]
 8016c92:	461a      	mov	r2, r3
 8016c94:	f7ec f956 	bl	8002f44 <_read>
 8016c98:	1c43      	adds	r3, r0, #1
 8016c9a:	d102      	bne.n	8016ca2 <_read_r+0x1e>
 8016c9c:	682b      	ldr	r3, [r5, #0]
 8016c9e:	b103      	cbz	r3, 8016ca2 <_read_r+0x1e>
 8016ca0:	6023      	str	r3, [r4, #0]
 8016ca2:	bd38      	pop	{r3, r4, r5, pc}
 8016ca4:	240051ec 	.word	0x240051ec

08016ca8 <_init>:
 8016ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016caa:	bf00      	nop
 8016cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cae:	bc08      	pop	{r3}
 8016cb0:	469e      	mov	lr, r3
 8016cb2:	4770      	bx	lr

08016cb4 <_fini>:
 8016cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cb6:	bf00      	nop
 8016cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cba:	bc08      	pop	{r3}
 8016cbc:	469e      	mov	lr, r3
 8016cbe:	4770      	bx	lr
