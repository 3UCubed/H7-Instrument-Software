
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d420  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800d6c0  0800d6c0  0001d6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d9c8  0800d9c8  0001d9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d9d0  0800d9d0  0001d9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d9d4  0800d9d4  0001d9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800d9d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ca0  24000078  0800da50  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004d18  0800da50  00024d18  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028bbf  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047b3  00000000  00000000  00048c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f08  00000000  00000000  0004d418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d60  00000000  00000000  0004f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000063c3  00000000  00000000  00051080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027aae  00000000  00000000  00057443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176845  00000000  00000000  0007eef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f5736  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008b84  00000000  00000000  001f5788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d6a8 	.word	0x0800d6a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800d6a8 	.word	0x0800d6a8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID); // Set the event flag for Task1
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f009 fb52 	bl	8009ca4 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f009 fb47 	bl	8009ca4 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f009 fb3c 	bl	8009ca4 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f00c fbaa 	bl	800cd88 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	24000170 	.word	0x24000170
 8000640:	240002fc 	.word	0x240002fc
 8000644:	240001bc 	.word	0x240001bc
 8000648:	24000208 	.word	0x24000208
 800064c:	0800d6f0 	.word	0x0800d6f0

08000650 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	496b      	ldr	r1, [pc, #428]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 800065c:	486b      	ldr	r0, [pc, #428]	; (800080c <HAL_UART_RxCpltCallback+0x1bc>)
 800065e:	f006 fe57 	bl	8007310 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4b69      	ldr	r3, [pc, #420]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b25      	cmp	r3, #37	; 0x25
 800066c:	f200 80c8 	bhi.w	8000800 <HAL_UART_RxCpltCallback+0x1b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000749 	.word	0x08000749
 800067c:	08000759 	.word	0x08000759
 8000680:	08000769 	.word	0x08000769
 8000684:	08000779 	.word	0x08000779
 8000688:	08000789 	.word	0x08000789
 800068c:	08000799 	.word	0x08000799
 8000690:	080007a9 	.word	0x080007a9
 8000694:	080007b9 	.word	0x080007b9
 8000698:	08000801 	.word	0x08000801
 800069c:	08000801 	.word	0x08000801
 80006a0:	08000719 	.word	0x08000719
 80006a4:	08000711 	.word	0x08000711
 80006a8:	080007c9 	.word	0x080007c9
 80006ac:	080007d1 	.word	0x080007d1
 80006b0:	080007e1 	.word	0x080007e1
 80006b4:	080007f1 	.word	0x080007f1
 80006b8:	080007d9 	.word	0x080007d9
 80006bc:	080007e9 	.word	0x080007e9
 80006c0:	080007f9 	.word	0x080007f9
 80006c4:	08000751 	.word	0x08000751
 80006c8:	08000761 	.word	0x08000761
 80006cc:	08000771 	.word	0x08000771
 80006d0:	08000781 	.word	0x08000781
 80006d4:	08000791 	.word	0x08000791
 80006d8:	080007a1 	.word	0x080007a1
 80006dc:	080007b1 	.word	0x080007b1
 80006e0:	080007c1 	.word	0x080007c1
 80006e4:	08000721 	.word	0x08000721
 80006e8:	08000729 	.word	0x08000729
 80006ec:	08000731 	.word	0x08000731
 80006f0:	08000801 	.word	0x08000801
 80006f4:	08000801 	.word	0x08000801
 80006f8:	08000801 	.word	0x08000801
 80006fc:	08000801 	.word	0x08000801
 8000700:	08000801 	.word	0x08000801
 8000704:	08000801 	.word	0x08000801
 8000708:	08000739 	.word	0x08000739
 800070c:	08000741 	.word	0x08000741
	case 0x0B: {
		printf("SDN1 ON\n");
 8000710:	483f      	ldr	r0, [pc, #252]	; (8000810 <HAL_UART_RxCpltCallback+0x1c0>)
 8000712:	f00c fb39 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 8000716:	e073      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 8000718:	483e      	ldr	r0, [pc, #248]	; (8000814 <HAL_UART_RxCpltCallback+0x1c4>)
 800071a:	f00c fb35 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 800071e:	e06f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1B: {
		printf("Step Up\n");
 8000720:	483d      	ldr	r0, [pc, #244]	; (8000818 <HAL_UART_RxCpltCallback+0x1c8>)
 8000722:	f00c fb31 	bl	800cd88 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 8000726:	e06b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000728:	483c      	ldr	r0, [pc, #240]	; (800081c <HAL_UART_RxCpltCallback+0x1cc>)
 800072a:	f00c fb2d 	bl	800cd88 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 800072e:	e067      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000730:	483b      	ldr	r0, [pc, #236]	; (8000820 <HAL_UART_RxCpltCallback+0x1d0>)
 8000732:	f00c fb29 	bl	800cd88 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 8000736:	e063      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000738:	483a      	ldr	r0, [pc, #232]	; (8000824 <HAL_UART_RxCpltCallback+0x1d4>)
 800073a:	f00c fb25 	bl	800cd88 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 800073e:	e05f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x25: {
		printf("Factor Down\n");
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <HAL_UART_RxCpltCallback+0x1d8>)
 8000742:	f00c fb21 	bl	800cd88 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 8000746:	e05b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 8000748:	4838      	ldr	r0, [pc, #224]	; (800082c <HAL_UART_RxCpltCallback+0x1dc>)
 800074a:	f00c fb1d 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 800074e:	e057      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 8000750:	4837      	ldr	r0, [pc, #220]	; (8000830 <HAL_UART_RxCpltCallback+0x1e0>)
 8000752:	f00c fb19 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 8000756:	e053      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 8000758:	4836      	ldr	r0, [pc, #216]	; (8000834 <HAL_UART_RxCpltCallback+0x1e4>)
 800075a:	f00c fb15 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 800075e:	e04f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000760:	4835      	ldr	r0, [pc, #212]	; (8000838 <HAL_UART_RxCpltCallback+0x1e8>)
 8000762:	f00c fb11 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000766:	e04b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000768:	4834      	ldr	r0, [pc, #208]	; (800083c <HAL_UART_RxCpltCallback+0x1ec>)
 800076a:	f00c fb0d 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800076e:	e047      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000770:	4833      	ldr	r0, [pc, #204]	; (8000840 <HAL_UART_RxCpltCallback+0x1f0>)
 8000772:	f00c fb09 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000776:	e043      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000778:	4832      	ldr	r0, [pc, #200]	; (8000844 <HAL_UART_RxCpltCallback+0x1f4>)
 800077a:	f00c fb05 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800077e:	e03f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000780:	4831      	ldr	r0, [pc, #196]	; (8000848 <HAL_UART_RxCpltCallback+0x1f8>)
 8000782:	f00c fb01 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000786:	e03b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000788:	4830      	ldr	r0, [pc, #192]	; (800084c <HAL_UART_RxCpltCallback+0x1fc>)
 800078a:	f00c fafd 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800078e:	e037      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 8000790:	482f      	ldr	r0, [pc, #188]	; (8000850 <HAL_UART_RxCpltCallback+0x200>)
 8000792:	f00c faf9 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000796:	e033      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000798:	482e      	ldr	r0, [pc, #184]	; (8000854 <HAL_UART_RxCpltCallback+0x204>)
 800079a:	f00c faf5 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800079e:	e02f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <HAL_UART_RxCpltCallback+0x208>)
 80007a2:	f00c faf1 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 80007a6:	e02b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <HAL_UART_RxCpltCallback+0x20c>)
 80007aa:	f00c faed 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 80007ae:	e027      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 80007b0:	482b      	ldr	r0, [pc, #172]	; (8000860 <HAL_UART_RxCpltCallback+0x210>)
 80007b2:	f00c fae9 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 80007b6:	e023      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 80007b8:	482a      	ldr	r0, [pc, #168]	; (8000864 <HAL_UART_RxCpltCallback+0x214>)
 80007ba:	f00c fae5 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 80007be:	e01f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 80007c0:	4829      	ldr	r0, [pc, #164]	; (8000868 <HAL_UART_RxCpltCallback+0x218>)
 80007c2:	f00c fae1 	bl	800cd88 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 80007c6:	e01b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <HAL_UART_RxCpltCallback+0x21c>)
 80007ca:	f00c fadd 	bl	800cd88 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 80007ce:	e017      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0D: {
		printf("PMT ON\n");
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <HAL_UART_RxCpltCallback+0x220>)
 80007d2:	f00c fad9 	bl	800cd88 <puts>
//		PMT_ON = 1;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007d6:	e013      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x10: {
		printf("PMT OFF\n");
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <HAL_UART_RxCpltCallback+0x224>)
 80007da:	f00c fad5 	bl	800cd88 <puts>
//		PMT_ON = 0;
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007de:	e00f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <HAL_UART_RxCpltCallback+0x228>)
 80007e2:	f00c fad1 	bl	800cd88 <puts>
		//ERPA_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007e6:	e00b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 80007e8:	4824      	ldr	r0, [pc, #144]	; (800087c <HAL_UART_RxCpltCallback+0x22c>)
 80007ea:	f00c facd 	bl	800cd88 <puts>
		//ERPA_ON = 0;
		//HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007ee:	e007      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0F: {
		printf("HK ON \n");
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <HAL_UART_RxCpltCallback+0x230>)
 80007f2:	f00c fac9 	bl	800cd88 <puts>
		//HK_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007f6:	e003      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x12: {
		printf("HK OFF\n");
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <HAL_UART_RxCpltCallback+0x234>)
 80007fa:	f00c fac5 	bl	800cd88 <puts>
		//HK_ON = 0;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007fe:	bf00      	nop
	}
	}
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	24000300 	.word	0x24000300
 800080c:	24000254 	.word	0x24000254
 8000810:	0800d708 	.word	0x0800d708
 8000814:	0800d710 	.word	0x0800d710
 8000818:	0800d71c 	.word	0x0800d71c
 800081c:	0800d724 	.word	0x0800d724
 8000820:	0800d730 	.word	0x0800d730
 8000824:	0800d744 	.word	0x0800d744
 8000828:	0800d750 	.word	0x0800d750
 800082c:	0800d75c 	.word	0x0800d75c
 8000830:	0800d768 	.word	0x0800d768
 8000834:	0800d774 	.word	0x0800d774
 8000838:	0800d780 	.word	0x0800d780
 800083c:	0800d790 	.word	0x0800d790
 8000840:	0800d79c 	.word	0x0800d79c
 8000844:	0800d7a8 	.word	0x0800d7a8
 8000848:	0800d7b8 	.word	0x0800d7b8
 800084c:	0800d7c8 	.word	0x0800d7c8
 8000850:	0800d7d4 	.word	0x0800d7d4
 8000854:	0800d7e0 	.word	0x0800d7e0
 8000858:	0800d7ec 	.word	0x0800d7ec
 800085c:	0800d7f8 	.word	0x0800d7f8
 8000860:	0800d804 	.word	0x0800d804
 8000864:	0800d810 	.word	0x0800d810
 8000868:	0800d81c 	.word	0x0800d81c
 800086c:	0800d82c 	.word	0x0800d82c
 8000870:	0800d83c 	.word	0x0800d83c
 8000874:	0800d844 	.word	0x0800d844
 8000878:	0800d84c 	.word	0x0800d84c
 800087c:	0800d854 	.word	0x0800d854
 8000880:	0800d860 	.word	0x0800d860
 8000884:	0800d868 	.word	0x0800d868

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f001 f86e 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f86a 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 fb3c 	bl	8000f10 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000898:	f000 f97c 	bl	8000b94 <MX_TIM1_Init>
  MX_TIM2_Init();
 800089c:	f000 fa28 	bl	8000cf0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008a0:	f000 fa9c 	bl	8000ddc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 fae8 	bl	8000e78 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008a8:	f000 f8dc 	bl	8000a64 <MX_I2C1_Init>
  MX_SPI2_Init();
 80008ac:	f000 f91a 	bl	8000ae4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80008b0:	2100      	movs	r1, #0
 80008b2:	481c      	ldr	r0, [pc, #112]	; (8000924 <main+0x9c>)
 80008b4:	f005 fa86 	bl	8005dc4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008b8:	2100      	movs	r1, #0
 80008ba:	481b      	ldr	r0, [pc, #108]	; (8000928 <main+0xa0>)
 80008bc:	f005 fa82 	bl	8005dc4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80008c0:	2100      	movs	r1, #0
 80008c2:	481a      	ldr	r0, [pc, #104]	; (800092c <main+0xa4>)
 80008c4:	f005 fa7e 	bl	8005dc4 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008c8:	f009 f8b6 	bl	8009a38 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80008cc:	4a18      	ldr	r2, [pc, #96]	; (8000930 <main+0xa8>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4818      	ldr	r0, [pc, #96]	; (8000934 <main+0xac>)
 80008d2:	f009 f8fb 	bl	8009acc <osThreadNew>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <main+0xb0>)
 80008da:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <main+0xb4>)
 80008de:	2100      	movs	r1, #0
 80008e0:	4817      	ldr	r0, [pc, #92]	; (8000940 <main+0xb8>)
 80008e2:	f009 f8f3 	bl	8009acc <osThreadNew>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a16      	ldr	r2, [pc, #88]	; (8000944 <main+0xbc>)
 80008ea:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80008ec:	4a16      	ldr	r2, [pc, #88]	; (8000948 <main+0xc0>)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4816      	ldr	r0, [pc, #88]	; (800094c <main+0xc4>)
 80008f2:	f009 f8eb 	bl	8009acc <osThreadNew>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a15      	ldr	r2, [pc, #84]	; (8000950 <main+0xc8>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 80008fc:	4a15      	ldr	r2, [pc, #84]	; (8000954 <main+0xcc>)
 80008fe:	2100      	movs	r1, #0
 8000900:	4815      	ldr	r0, [pc, #84]	; (8000958 <main+0xd0>)
 8000902:	f009 f8e3 	bl	8009acc <osThreadNew>
 8000906:	4603      	mov	r3, r0
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <main+0xd4>)
 800090a:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL); // Create an event flags group
 800090c:	2000      	movs	r0, #0
 800090e:	f009 f98a 	bl	8009c26 <osEventFlagsNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <main+0xd8>)
 8000916:	6013      	str	r3, [r2, #0]
  printf("Starting kernal...\n");
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <main+0xdc>)
 800091a:	f00c fa35 	bl	800cd88 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800091e:	f009 f8af 	bl	8009a80 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000922:	e7fe      	b.n	8000922 <main+0x9a>
 8000924:	24000170 	.word	0x24000170
 8000928:	240001bc 	.word	0x240001bc
 800092c:	24000208 	.word	0x24000208
 8000930:	0800d89c 	.word	0x0800d89c
 8000934:	08000f65 	.word	0x08000f65
 8000938:	240002e8 	.word	0x240002e8
 800093c:	0800d8c0 	.word	0x0800d8c0
 8000940:	08000f95 	.word	0x08000f95
 8000944:	240002ec 	.word	0x240002ec
 8000948:	0800d8e4 	.word	0x0800d8e4
 800094c:	08000fc5 	.word	0x08000fc5
 8000950:	240002f0 	.word	0x240002f0
 8000954:	0800d908 	.word	0x0800d908
 8000958:	08000ff5 	.word	0x08000ff5
 800095c:	240002f4 	.word	0x240002f4
 8000960:	240002fc 	.word	0x240002fc
 8000964:	0800d870 	.word	0x0800d870

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09c      	sub	sp, #112	; 0x70
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	224c      	movs	r2, #76	; 0x4c
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f00c f990 	bl	800cc9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2220      	movs	r2, #32
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00c f98a 	bl	800cc9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000988:	2002      	movs	r0, #2
 800098a:	f002 f97f 	bl	8002c8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <SystemClock_Config+0xf4>)
 8000994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000996:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <SystemClock_Config+0xf4>)
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <SystemClock_Config+0xf4>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <SystemClock_Config+0xf8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b0:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <SystemClock_Config+0xf8>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <SystemClock_Config+0xf8>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c4:	bf00      	nop
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <SystemClock_Config+0xf8>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d2:	d1f8      	bne.n	80009c6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d4:	2302      	movs	r3, #2
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d8:	2301      	movs	r3, #1
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009dc:	2340      	movs	r3, #64	; 0x40
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80009e8:	2320      	movs	r3, #32
 80009ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 80009ec:	2381      	movs	r3, #129	; 0x81
 80009ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009f4:	2303      	movs	r3, #3
 80009f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 f977 	bl	8002d00 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a18:	f000 fb10 	bl	800103c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	233f      	movs	r3, #63	; 0x3f
 8000a1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a30:	2340      	movs	r3, #64	; 0x40
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fdb6 	bl	80035b4 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a4e:	f000 faf5 	bl	800103c <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3770      	adds	r7, #112	; 0x70
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58000400 	.word	0x58000400
 8000a60:	58024800 	.word	0x58024800

08000a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <MX_I2C1_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <MX_I2C1_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000aa0:	f001 ffc0 	bl	8002a24 <HAL_I2C_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f000 fac7 	bl	800103c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000ab2:	f002 f853 	bl	8002b5c <HAL_I2CEx_ConfigAnalogFilter>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 fabe 	bl	800103c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000ac4:	f002 f895 	bl	8002bf2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fab5 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24000094 	.word	0x24000094
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	00707cbb 	.word	0x00707cbb

08000ae4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000aea:	4a29      	ldr	r2, [pc, #164]	; (8000b90 <MX_SPI2_Init+0xac>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000af0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000af4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000af8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000afc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000afe:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b00:	220f      	movs	r2, #15
 8000b02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b1a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000b1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b78:	f004 ff16 	bl	80059a8 <HAL_SPI_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000b82:	f000 fa5b 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	240000e8 	.word	0x240000e8
 8000b90:	40003800 	.word	0x40003800

08000b94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09a      	sub	sp, #104	; 0x68
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	222c      	movs	r2, #44	; 0x2c
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00c f864 	bl	800cc9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bd4:	4b44      	ldr	r3, [pc, #272]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000bd6:	4a45      	ldr	r2, [pc, #276]	; (8000cec <MX_TIM1_Init+0x158>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8000bda:	4b43      	ldr	r3, [pc, #268]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000bdc:	227f      	movs	r2, #127	; 0x7f
 8000bde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000be8:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000bec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bf4:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c00:	4839      	ldr	r0, [pc, #228]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000c02:	f005 f810 	bl	8005c26 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 fa16 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4832      	ldr	r0, [pc, #200]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000c1e:	f005 fca7 	bl	8006570 <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c28:	f000 fa08 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c2c:	482e      	ldr	r0, [pc, #184]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000c2e:	f005 fa23 	bl	8006078 <HAL_TIM_PWM_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c38:	f000 fa00 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4826      	ldr	r0, [pc, #152]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000c50:	f006 f9e4 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c5a:	f000 f9ef 	bl	800103c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5e:	2360      	movs	r3, #96	; 0x60
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8000c62:	f240 13df 	movw	r3, #479	; 0x1df
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c80:	2200      	movs	r2, #0
 8000c82:	4619      	mov	r1, r3
 8000c84:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000c86:	f005 fb5f 	bl	8006348 <HAL_TIM_PWM_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000c90:	f000 f9d4 	bl	800103c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000cca:	f006 fa35 	bl	8007138 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000cd4:	f000 f9b2 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000cda:	f000 fb21 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000cde:	bf00      	nop
 8000ce0:	3768      	adds	r7, #104	; 0x68
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24000170 	.word	0x24000170
 8000cec:	40010000 	.word	0x40010000

08000cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08e      	sub	sp, #56	; 0x38
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d22:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d2c:	223f      	movs	r2, #63	; 0x3f
 8000d2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d38:	f640 4234 	movw	r2, #3124	; 0xc34
 8000d3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d4a:	4823      	ldr	r0, [pc, #140]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d4c:	f004 ff6b 	bl	8005c26 <HAL_TIM_Base_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d56:	f000 f971 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d64:	4619      	mov	r1, r3
 8000d66:	481c      	ldr	r0, [pc, #112]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d68:	f005 fc02 	bl	8006570 <HAL_TIM_ConfigClockSource>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d72:	f000 f963 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d76:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d78:	f005 f97e 	bl	8006078 <HAL_TIM_PWM_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d82:	f000 f95b 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d86:	2320      	movs	r3, #32
 8000d88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d96:	f006 f941 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000da0:	f000 f94c 	bl	800103c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	; 0x60
 8000da6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	220c      	movs	r2, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000dbc:	f005 fac4 	bl	8006348 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000dc6:	f000 f939 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000dcc:	f000 faa8 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000dd0:	bf00      	nop
 8000dd2:	3738      	adds	r7, #56	; 0x38
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	240001bc 	.word	0x240001bc

08000ddc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e02:	223f      	movs	r2, #63	; 0x3f
 8000e04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e22:	f004 ff00 	bl	8005c26 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e2c:	f000 f906 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e3e:	f005 fb97 	bl	8006570 <HAL_TIM_ConfigClockSource>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e48:	f000 f8f8 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e5a:	f006 f8df 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e64:	f000 f8ea 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	24000208 	.word	0x24000208
 8000e74:	40000400 	.word	0x40000400

08000e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e7e:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <MX_USART1_UART_Init+0x94>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e84:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec0:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ec2:	f006 f9d5 	bl	8007270 <HAL_UART_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ecc:	f000 f8b6 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	480d      	ldr	r0, [pc, #52]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ed4:	f008 fca1 	bl	800981a <HAL_UARTEx_SetTxFifoThreshold>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ede:	f000 f8ad 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ee6:	f008 fcd6 	bl	8009896 <HAL_UARTEx_SetRxFifoThreshold>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ef0:	f000 f8a4 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ef6:	f008 fc57 	bl	80097a8 <HAL_UARTEx_DisableFifoMode>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f00:	f000 f89c 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	24000254 	.word	0x24000254
 8000f0c:	40011000 	.word	0x40011000

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	58024400 	.word	0x58024400

08000f64 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t pmt_data[PMT_DATA_SIZE];
	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <PMT_init+0x28>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f74:	2200      	movs	r2, #0
 8000f76:	2101      	movs	r1, #1
 8000f78:	f008 fed8 	bl	8009d2c <osEventFlagsWait>
	    //sample_pmt(pmt_data);
		pmt_seq++;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <PMT_init+0x2c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b02      	ldr	r3, [pc, #8]	; (8000f90 <PMT_init+0x2c>)
 8000f86:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f88:	e7f0      	b.n	8000f6c <PMT_init+0x8>
 8000f8a:	bf00      	nop
 8000f8c:	240002fc 	.word	0x240002fc
 8000f90:	240002f8 	.word	0x240002f8

08000f94 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <ERPA_init+0x28>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	f008 fec0 	bl	8009d2c <osEventFlagsWait>
		erpa_seq++;
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <ERPA_init+0x2c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <ERPA_init+0x2c>)
 8000fb6:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000fb8:	e7f0      	b.n	8000f9c <ERPA_init+0x8>
 8000fba:	bf00      	nop
 8000fbc:	240002fc 	.word	0x240002fc
 8000fc0:	240002f9 	.word	0x240002f9

08000fc4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HK_init+0x28>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	f008 fea8 	bl	8009d2c <osEventFlagsWait>
		hk_seq++;
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HK_init+0x2c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <HK_init+0x2c>)
 8000fe6:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000fe8:	e7f0      	b.n	8000fcc <HK_init+0x8>
 8000fea:	bf00      	nop
 8000fec:	240002fc 	.word	0x240002fc
 8000ff0:	240002fa 	.word	0x240002fa

08000ff4 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4904      	ldr	r1, [pc, #16]	; (8001010 <UART_RX_init+0x1c>)
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <UART_RX_init+0x20>)
 8001002:	f006 f985 	bl	8007310 <HAL_UART_Receive_IT>
		osDelay(1);
 8001006:	2001      	movs	r0, #1
 8001008:	f008 fdf2 	bl	8009bf0 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800100c:	e7f6      	b.n	8000ffc <UART_RX_init+0x8>
 800100e:	bf00      	nop
 8001010:	24000300 	.word	0x24000300
 8001014:	24000254 	.word	0x24000254

08001018 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800102a:	f000 fcdb 	bl	80019e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40001000 	.word	0x40001000

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>
	...

08001048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_MspInit+0x38>)
 8001050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_MspInit+0x38>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_MspInit+0x38>)
 8001060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	210f      	movs	r1, #15
 8001070:	f06f 0001 	mvn.w	r0, #1
 8001074:	f000 fd9a 	bl	8001bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58024400 	.word	0x58024400

08001084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0ba      	sub	sp, #232	; 0xe8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	22c0      	movs	r2, #192	; 0xc0
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00b fdf9 	bl	800cc9c <memset>
  if(hi2c->Instance==I2C1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <HAL_I2C_MspInit+0xc8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d146      	bne.n	8001142 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010b4:	f04f 0208 	mov.w	r2, #8
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fe40 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010d6:	f7ff ffb1 	bl	800103c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_I2C_MspInit+0xcc>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_I2C_MspInit+0xcc>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_I2C_MspInit+0xcc>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001100:	2312      	movs	r3, #18
 8001102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001112:	2304      	movs	r3, #4
 8001114:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <HAL_I2C_MspInit+0xd0>)
 8001120:	f001 fad0 	bl	80026c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_I2C_MspInit+0xcc>)
 8001126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <HAL_I2C_MspInit+0xcc>)
 800112c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001130:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_I2C_MspInit+0xcc>)
 8001136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	37e8      	adds	r7, #232	; 0xe8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40005400 	.word	0x40005400
 8001150:	58024400 	.word	0x58024400
 8001154:	58020400 	.word	0x58020400

08001158 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ba      	sub	sp, #232	; 0xe8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	22c0      	movs	r2, #192	; 0xc0
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f00b fd8f 	bl	800cc9c <memset>
  if(hspi->Instance==SPI2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a26      	ldr	r2, [pc, #152]	; (800121c <HAL_SPI_MspInit+0xc4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d145      	bne.n	8001214 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001194:	2300      	movs	r3, #0
 8001196:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4618      	mov	r0, r3
 800119e:	f002 fdd7 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80011a8:	f7ff ff48 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_SPI_MspInit+0xc8>)
 80011ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <HAL_SPI_MspInit+0xc8>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_SPI_MspInit+0xc8>)
 80011be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_SPI_MspInit+0xc8>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	4a13      	ldr	r2, [pc, #76]	; (8001220 <HAL_SPI_MspInit+0xc8>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_SPI_MspInit+0xc8>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80011e8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001202:	2305      	movs	r3, #5
 8001204:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800120c:	4619      	mov	r1, r3
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <HAL_SPI_MspInit+0xcc>)
 8001210:	f001 fa58 	bl	80026c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	37e8      	adds	r7, #232	; 0xe8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40003800 	.word	0x40003800
 8001220:	58024400 	.word	0x58024400
 8001224:	58020400 	.word	0x58020400

08001228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a37      	ldr	r2, [pc, #220]	; (8001314 <HAL_TIM_Base_MspInit+0xec>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12f      	bne.n	800129a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_TIM_Base_MspInit+0xf0>)
 800123c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001240:	4a35      	ldr	r2, [pc, #212]	; (8001318 <HAL_TIM_Base_MspInit+0xf0>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800124a:	4b33      	ldr	r3, [pc, #204]	; (8001318 <HAL_TIM_Base_MspInit+0xf0>)
 800124c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2105      	movs	r1, #5
 800125c:	2018      	movs	r0, #24
 800125e:	f000 fca5 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001262:	2018      	movs	r0, #24
 8001264:	f000 fcbc 	bl	8001be0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2105      	movs	r1, #5
 800126c:	2019      	movs	r0, #25
 800126e:	f000 fc9d 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001272:	2019      	movs	r0, #25
 8001274:	f000 fcb4 	bl	8001be0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2105      	movs	r1, #5
 800127c:	201a      	movs	r0, #26
 800127e:	f000 fc95 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001282:	201a      	movs	r0, #26
 8001284:	f000 fcac 	bl	8001be0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2105      	movs	r1, #5
 800128c:	201b      	movs	r0, #27
 800128e:	f000 fc8d 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001292:	201b      	movs	r0, #27
 8001294:	f000 fca4 	bl	8001be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001298:	e038      	b.n	800130c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a2:	d117      	bne.n	80012d4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_TIM_Base_MspInit+0xf0>)
 80012a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012aa:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <HAL_TIM_Base_MspInit+0xf0>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_TIM_Base_MspInit+0xf0>)
 80012b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	201c      	movs	r0, #28
 80012c8:	f000 fc70 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012cc:	201c      	movs	r0, #28
 80012ce:	f000 fc87 	bl	8001be0 <HAL_NVIC_EnableIRQ>
}
 80012d2:	e01b      	b.n	800130c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_TIM_Base_MspInit+0xf4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d116      	bne.n	800130c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_TIM_Base_MspInit+0xf0>)
 80012e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <HAL_TIM_Base_MspInit+0xf0>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_TIM_Base_MspInit+0xf0>)
 80012f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2105      	movs	r1, #5
 8001300:	201d      	movs	r0, #29
 8001302:	f000 fc53 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001306:	201d      	movs	r0, #29
 8001308:	f000 fc6a 	bl	8001be0 <HAL_NVIC_EnableIRQ>
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40010000 	.word	0x40010000
 8001318:	58024400 	.word	0x58024400
 800131c:	40000400 	.word	0x40000400

08001320 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <HAL_TIM_MspPostInit+0xb8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d120      	bne.n	8001384 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <HAL_TIM_MspPostInit+0xbc>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	4a24      	ldr	r2, [pc, #144]	; (80013dc <HAL_TIM_MspPostInit+0xbc>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_TIM_MspPostInit+0xbc>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001372:	2301      	movs	r3, #1
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4818      	ldr	r0, [pc, #96]	; (80013e0 <HAL_TIM_MspPostInit+0xc0>)
 800137e:	f001 f9a1 	bl	80026c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001382:	e024      	b.n	80013ce <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800138c:	d11f      	bne.n	80013ce <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_TIM_MspPostInit+0xbc>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	4a11      	ldr	r2, [pc, #68]	; (80013dc <HAL_TIM_MspPostInit+0xbc>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_TIM_MspPostInit+0xbc>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013be:	2301      	movs	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <HAL_TIM_MspPostInit+0xc4>)
 80013ca:	f001 f97b 	bl	80026c4 <HAL_GPIO_Init>
}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40010000 	.word	0x40010000
 80013dc:	58024400 	.word	0x58024400
 80013e0:	58020000 	.word	0x58020000
 80013e4:	58020400 	.word	0x58020400

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ba      	sub	sp, #232	; 0xe8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	22c0      	movs	r2, #192	; 0xc0
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00b fc47 	bl	800cc9c <memset>
  if(huart->Instance==USART1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a2b      	ldr	r2, [pc, #172]	; (80014c0 <HAL_UART_MspInit+0xd8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d14e      	bne.n	80014b6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001418:	f04f 0201 	mov.w	r2, #1
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4618      	mov	r0, r3
 8001430:	f002 fc8e 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800143a:	f7ff fdff 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_UART_MspInit+0xdc>)
 8001440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001444:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <HAL_UART_MspInit+0xdc>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_UART_MspInit+0xdc>)
 8001450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_UART_MspInit+0xdc>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <HAL_UART_MspInit+0xdc>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_UART_MspInit+0xdc>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800147a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800147e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001494:	2307      	movs	r3, #7
 8001496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800149e:	4619      	mov	r1, r3
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <HAL_UART_MspInit+0xe0>)
 80014a2:	f001 f90f 	bl	80026c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	2025      	movs	r0, #37	; 0x25
 80014ac:	f000 fb7e 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014b0:	2025      	movs	r0, #37	; 0x25
 80014b2:	f000 fb95 	bl	8001be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	37e8      	adds	r7, #232	; 0xe8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40011000 	.word	0x40011000
 80014c4:	58024400 	.word	0x58024400
 80014c8:	58020000 	.word	0x58020000

080014cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b090      	sub	sp, #64	; 0x40
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	d827      	bhi.n	800152a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80014da:	2200      	movs	r2, #0
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	2036      	movs	r0, #54	; 0x36
 80014e0:	f000 fb64 	bl	8001bac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014e4:	2036      	movs	r0, #54	; 0x36
 80014e6:	f000 fb7b 	bl	8001be0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014ea:	4a29      	ldr	r2, [pc, #164]	; (8001590 <HAL_InitTick+0xc4>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <HAL_InitTick+0xc8>)
 80014f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f6:	4a27      	ldr	r2, [pc, #156]	; (8001594 <HAL_InitTick+0xc8>)
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_InitTick+0xc8>)
 8001502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800150e:	f107 0210 	add.w	r2, r7, #16
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fbd7 	bl	8003ccc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001524:	2b00      	cmp	r3, #0
 8001526:	d106      	bne.n	8001536 <HAL_InitTick+0x6a>
 8001528:	e001      	b.n	800152e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e02b      	b.n	8001586 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800152e:	f002 fba1 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8001532:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001534:	e004      	b.n	8001540 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001536:	f002 fb9d 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 800153a:	4603      	mov	r3, r0
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001542:	4a15      	ldr	r2, [pc, #84]	; (8001598 <HAL_InitTick+0xcc>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	0c9b      	lsrs	r3, r3, #18
 800154a:	3b01      	subs	r3, #1
 800154c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_InitTick+0xd0>)
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <HAL_InitTick+0xd4>)
 8001552:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_InitTick+0xd0>)
 8001556:	f240 32e7 	movw	r2, #999	; 0x3e7
 800155a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_InitTick+0xd0>)
 800155e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001560:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_InitTick+0xd0>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_InitTick+0xd0>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800156e:	480b      	ldr	r0, [pc, #44]	; (800159c <HAL_InitTick+0xd0>)
 8001570:	f004 fb59 	bl	8005c26 <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d104      	bne.n	8001584 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <HAL_InitTick+0xd0>)
 800157c:	f004 fbaa 	bl	8005cd4 <HAL_TIM_Base_Start_IT>
 8001580:	4603      	mov	r3, r0
 8001582:	e000      	b.n	8001586 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	3740      	adds	r7, #64	; 0x40
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24000008 	.word	0x24000008
 8001594:	58024400 	.word	0x58024400
 8001598:	431bde83 	.word	0x431bde83
 800159c:	24000364 	.word	0x24000364
 80015a0:	40001000 	.word	0x40001000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <TIM1_BRK_IRQHandler+0x10>)
 80015d6:	f004 fdb0 	bl	800613a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	24000170 	.word	0x24000170

080015e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <TIM1_UP_IRQHandler+0x10>)
 80015ea:	f004 fda6 	bl	800613a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	24000170 	.word	0x24000170

080015f8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <TIM1_TRG_COM_IRQHandler+0x10>)
 80015fe:	f004 fd9c 	bl	800613a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	24000170 	.word	0x24000170

0800160c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <TIM1_CC_IRQHandler+0x10>)
 8001612:	f004 fd92 	bl	800613a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	24000170 	.word	0x24000170

08001620 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <TIM2_IRQHandler+0x10>)
 8001626:	f004 fd88 	bl	800613a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	240001bc 	.word	0x240001bc

08001634 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM3_IRQHandler+0x10>)
 800163a:	f004 fd7e 	bl	800613a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	24000208 	.word	0x24000208

08001648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <USART1_IRQHandler+0x10>)
 800164e:	f005 feab 	bl	80073a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	24000254 	.word	0x24000254

0800165c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM6_DAC_IRQHandler+0x10>)
 8001662:	f004 fd6a 	bl	800613a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	24000364 	.word	0x24000364

08001670 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <ITM_SendChar+0x48>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <ITM_SendChar+0x48>)
 8001680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001684:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <ITM_SendChar+0x4c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <ITM_SendChar+0x4c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8001692:	bf00      	nop
 8001694:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f8      	beq.n	8001694 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80016a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	6013      	str	r3, [r2, #0]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000edfc 	.word	0xe000edfc
 80016bc:	e0000e00 	.word	0xe0000e00

080016c0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e00a      	b.n	80016e8 <_read+0x28>
		*ptr++ = __io_getchar();
 80016d2:	f3af 8000 	nop.w
 80016d6:	4601      	mov	r1, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf0      	blt.n	80016d2 <_read+0x12>
	}

	return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e009      	b.n	8001720 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	60ba      	str	r2, [r7, #8]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ffab 	bl	8001670 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbf1      	blt.n	800170c <_write+0x12>
	}
	return len;
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_close>:

int _close(int file) {
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_fstat>:

int _fstat(int file, struct stat *st) {
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175a:	605a      	str	r2, [r3, #4]
	return 0;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_isatty>:

int _isatty(int file) {
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
		errno = ENOMEM;
 80017cc:	f00b fa2e 	bl	800cc2c <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	24080000 	.word	0x24080000
 80017fc:	00000400 	.word	0x00000400
 8001800:	240003b0 	.word	0x240003b0
 8001804:	24004d18 	.word	0x24004d18

08001808 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800180c:	4b37      	ldr	r3, [pc, #220]	; (80018ec <SystemInit+0xe4>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001812:	4a36      	ldr	r2, [pc, #216]	; (80018ec <SystemInit+0xe4>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800181c:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <SystemInit+0xe8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	2b06      	cmp	r3, #6
 8001826:	d807      	bhi.n	8001838 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001828:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <SystemInit+0xe8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 030f 	bic.w	r3, r3, #15
 8001830:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <SystemInit+0xe8>)
 8001832:	f043 0307 	orr.w	r3, r3, #7
 8001836:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001838:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <SystemInit+0xec>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <SystemInit+0xec>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <SystemInit+0xec>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <SystemInit+0xec>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4929      	ldr	r1, [pc, #164]	; (80018f4 <SystemInit+0xec>)
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <SystemInit+0xf0>)
 8001852:	4013      	ands	r3, r2
 8001854:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <SystemInit+0xe8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <SystemInit+0xe8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 030f 	bic.w	r3, r3, #15
 800186a:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <SystemInit+0xe8>)
 800186c:	f043 0307 	orr.w	r3, r3, #7
 8001870:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <SystemInit+0xec>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <SystemInit+0xec>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <SystemInit+0xec>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <SystemInit+0xec>)
 8001886:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <SystemInit+0xf4>)
 8001888:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <SystemInit+0xec>)
 800188c:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <SystemInit+0xf8>)
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <SystemInit+0xec>)
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <SystemInit+0xfc>)
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <SystemInit+0xec>)
 8001898:	2200      	movs	r2, #0
 800189a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <SystemInit+0xec>)
 800189e:	4a19      	ldr	r2, [pc, #100]	; (8001904 <SystemInit+0xfc>)
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <SystemInit+0xec>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <SystemInit+0xec>)
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <SystemInit+0xfc>)
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <SystemInit+0xec>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <SystemInit+0xec>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <SystemInit+0xec>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <SystemInit+0xec>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <SystemInit+0x100>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <SystemInit+0x104>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018d2:	d202      	bcs.n	80018da <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <SystemInit+0x108>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <SystemInit+0x10c>)
 80018dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00
 80018f0:	52002000 	.word	0x52002000
 80018f4:	58024400 	.word	0x58024400
 80018f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80018fc:	02020200 	.word	0x02020200
 8001900:	01ff0000 	.word	0x01ff0000
 8001904:	01010280 	.word	0x01010280
 8001908:	5c001000 	.word	0x5c001000
 800190c:	ffff0000 	.word	0xffff0000
 8001910:	51008108 	.word	0x51008108
 8001914:	52004000 	.word	0x52004000

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800191c:	f7ff ff74 	bl	8001808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	; (8001958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	; (8001964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001946:	f00b f977 	bl	800cc38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7fe ff9d 	bl	8000888 <main>
  bx  lr
 800194e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001954:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001958:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800195c:	0800d9d8 	.word	0x0800d9d8
  ldr r2, =_sbss
 8001960:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001964:	24004d18 	.word	0x24004d18

08001968 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC3_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001972:	2003      	movs	r0, #3
 8001974:	f000 f90f 	bl	8001b96 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001978:	f001 ffd2 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_Init+0x68>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	4913      	ldr	r1, [pc, #76]	; (80019d8 <HAL_Init+0x6c>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_Init+0x68>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_Init+0x6c>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <HAL_Init+0x70>)
 80019ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_Init+0x74>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b6:	200f      	movs	r0, #15
 80019b8:	f7ff fd88 	bl	80014cc <HAL_InitTick>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e002      	b.n	80019cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019c6:	f7ff fb3f 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	58024400 	.word	0x58024400
 80019d8:	0800d92c 	.word	0x0800d92c
 80019dc:	24000004 	.word	0x24000004
 80019e0:	24000000 	.word	0x24000000

080019e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x20>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x24>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_IncTick+0x24>)
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	2400000c 	.word	0x2400000c
 8001a08:	240003b4 	.word	0x240003b4

08001a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_GetTick+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	240003b4 	.word	0x240003b4

08001a24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_GetREVID+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	5c001000 	.word	0x5c001000

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <__NVIC_SetPriorityGrouping+0x40>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <__NVIC_SetPriorityGrouping+0x40>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	05fa0000 	.word	0x05fa0000

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	; (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	; (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff4c 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bba:	f7ff ff63 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001bbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	68b9      	ldr	r1, [r7, #8]
 8001bc4:	6978      	ldr	r0, [r7, #20]
 8001bc6:	f7ff ffb3 	bl	8001b30 <NVIC_EncodePriority>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff82 	bl	8001adc <__NVIC_SetPriority>
}
 8001bd8:	bf00      	nop
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff56 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ff02 	bl	8001a0c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e2dc      	b.n	80021ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d008      	beq.n	8001c32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e2cd      	b.n	80021ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a76      	ldr	r2, [pc, #472]	; (8001e10 <HAL_DMA_Abort+0x214>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d04a      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a74      	ldr	r2, [pc, #464]	; (8001e14 <HAL_DMA_Abort+0x218>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d045      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a73      	ldr	r2, [pc, #460]	; (8001e18 <HAL_DMA_Abort+0x21c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d040      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a71      	ldr	r2, [pc, #452]	; (8001e1c <HAL_DMA_Abort+0x220>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d03b      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a70      	ldr	r2, [pc, #448]	; (8001e20 <HAL_DMA_Abort+0x224>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d036      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_DMA_Abort+0x228>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d031      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6d      	ldr	r2, [pc, #436]	; (8001e28 <HAL_DMA_Abort+0x22c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d02c      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a6b      	ldr	r2, [pc, #428]	; (8001e2c <HAL_DMA_Abort+0x230>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d027      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6a      	ldr	r2, [pc, #424]	; (8001e30 <HAL_DMA_Abort+0x234>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d022      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a68      	ldr	r2, [pc, #416]	; (8001e34 <HAL_DMA_Abort+0x238>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d01d      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <HAL_DMA_Abort+0x23c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d018      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_DMA_Abort+0x240>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a64      	ldr	r2, [pc, #400]	; (8001e40 <HAL_DMA_Abort+0x244>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00e      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a62      	ldr	r2, [pc, #392]	; (8001e44 <HAL_DMA_Abort+0x248>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d009      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a61      	ldr	r2, [pc, #388]	; (8001e48 <HAL_DMA_Abort+0x24c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d004      	beq.n	8001cd2 <HAL_DMA_Abort+0xd6>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a5f      	ldr	r2, [pc, #380]	; (8001e4c <HAL_DMA_Abort+0x250>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_DMA_Abort+0xda>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_DMA_Abort+0xdc>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 021e 	bic.w	r2, r2, #30
 8001cea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cfa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e00a      	b.n	8001d1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 020e 	bic.w	r2, r2, #14
 8001d12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a3c      	ldr	r2, [pc, #240]	; (8001e10 <HAL_DMA_Abort+0x214>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d072      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a3a      	ldr	r2, [pc, #232]	; (8001e14 <HAL_DMA_Abort+0x218>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d06d      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a39      	ldr	r2, [pc, #228]	; (8001e18 <HAL_DMA_Abort+0x21c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d068      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a37      	ldr	r2, [pc, #220]	; (8001e1c <HAL_DMA_Abort+0x220>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d063      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a36      	ldr	r2, [pc, #216]	; (8001e20 <HAL_DMA_Abort+0x224>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a34      	ldr	r2, [pc, #208]	; (8001e24 <HAL_DMA_Abort+0x228>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d059      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a33      	ldr	r2, [pc, #204]	; (8001e28 <HAL_DMA_Abort+0x22c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d054      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a31      	ldr	r2, [pc, #196]	; (8001e2c <HAL_DMA_Abort+0x230>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d04f      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a30      	ldr	r2, [pc, #192]	; (8001e30 <HAL_DMA_Abort+0x234>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d04a      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2e      	ldr	r2, [pc, #184]	; (8001e34 <HAL_DMA_Abort+0x238>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d045      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2d      	ldr	r2, [pc, #180]	; (8001e38 <HAL_DMA_Abort+0x23c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d040      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2b      	ldr	r2, [pc, #172]	; (8001e3c <HAL_DMA_Abort+0x240>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d03b      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <HAL_DMA_Abort+0x244>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d036      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a28      	ldr	r2, [pc, #160]	; (8001e44 <HAL_DMA_Abort+0x248>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d031      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <HAL_DMA_Abort+0x24c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d02c      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <HAL_DMA_Abort+0x250>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d027      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <HAL_DMA_Abort+0x254>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d022      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_DMA_Abort+0x258>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01d      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <HAL_DMA_Abort+0x25c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d018      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <HAL_DMA_Abort+0x260>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <HAL_DMA_Abort+0x264>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00e      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_DMA_Abort+0x268>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d009      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_DMA_Abort+0x26c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d004      	beq.n	8001e0a <HAL_DMA_Abort+0x20e>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_DMA_Abort+0x270>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d132      	bne.n	8001e70 <HAL_DMA_Abort+0x274>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e031      	b.n	8001e72 <HAL_DMA_Abort+0x276>
 8001e0e:	bf00      	nop
 8001e10:	40020010 	.word	0x40020010
 8001e14:	40020028 	.word	0x40020028
 8001e18:	40020040 	.word	0x40020040
 8001e1c:	40020058 	.word	0x40020058
 8001e20:	40020070 	.word	0x40020070
 8001e24:	40020088 	.word	0x40020088
 8001e28:	400200a0 	.word	0x400200a0
 8001e2c:	400200b8 	.word	0x400200b8
 8001e30:	40020410 	.word	0x40020410
 8001e34:	40020428 	.word	0x40020428
 8001e38:	40020440 	.word	0x40020440
 8001e3c:	40020458 	.word	0x40020458
 8001e40:	40020470 	.word	0x40020470
 8001e44:	40020488 	.word	0x40020488
 8001e48:	400204a0 	.word	0x400204a0
 8001e4c:	400204b8 	.word	0x400204b8
 8001e50:	58025408 	.word	0x58025408
 8001e54:	5802541c 	.word	0x5802541c
 8001e58:	58025430 	.word	0x58025430
 8001e5c:	58025444 	.word	0x58025444
 8001e60:	58025458 	.word	0x58025458
 8001e64:	5802546c 	.word	0x5802546c
 8001e68:	58025480 	.word	0x58025480
 8001e6c:	58025494 	.word	0x58025494
 8001e70:	2300      	movs	r3, #0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6d      	ldr	r2, [pc, #436]	; (8002040 <HAL_DMA_Abort+0x444>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d04a      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6b      	ldr	r2, [pc, #428]	; (8002044 <HAL_DMA_Abort+0x448>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d045      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6a      	ldr	r2, [pc, #424]	; (8002048 <HAL_DMA_Abort+0x44c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d040      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a68      	ldr	r2, [pc, #416]	; (800204c <HAL_DMA_Abort+0x450>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d03b      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a67      	ldr	r2, [pc, #412]	; (8002050 <HAL_DMA_Abort+0x454>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d036      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a65      	ldr	r2, [pc, #404]	; (8002054 <HAL_DMA_Abort+0x458>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d031      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a64      	ldr	r2, [pc, #400]	; (8002058 <HAL_DMA_Abort+0x45c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d02c      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a62      	ldr	r2, [pc, #392]	; (800205c <HAL_DMA_Abort+0x460>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d027      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a61      	ldr	r2, [pc, #388]	; (8002060 <HAL_DMA_Abort+0x464>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d022      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a5f      	ldr	r2, [pc, #380]	; (8002064 <HAL_DMA_Abort+0x468>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01d      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5e      	ldr	r2, [pc, #376]	; (8002068 <HAL_DMA_Abort+0x46c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d018      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5c      	ldr	r2, [pc, #368]	; (800206c <HAL_DMA_Abort+0x470>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5b      	ldr	r2, [pc, #364]	; (8002070 <HAL_DMA_Abort+0x474>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00e      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a59      	ldr	r2, [pc, #356]	; (8002074 <HAL_DMA_Abort+0x478>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d009      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a58      	ldr	r2, [pc, #352]	; (8002078 <HAL_DMA_Abort+0x47c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d004      	beq.n	8001f26 <HAL_DMA_Abort+0x32a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a56      	ldr	r2, [pc, #344]	; (800207c <HAL_DMA_Abort+0x480>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d108      	bne.n	8001f38 <HAL_DMA_Abort+0x33c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e007      	b.n	8001f48 <HAL_DMA_Abort+0x34c>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f48:	e013      	b.n	8001f72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4a:	f7ff fd5f 	bl	8001a0c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d90c      	bls.n	8001f72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2203      	movs	r2, #3
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e12d      	b.n	80021ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1e5      	bne.n	8001f4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <HAL_DMA_Abort+0x444>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d04a      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <HAL_DMA_Abort+0x448>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d045      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2c      	ldr	r2, [pc, #176]	; (8002048 <HAL_DMA_Abort+0x44c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d040      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2a      	ldr	r2, [pc, #168]	; (800204c <HAL_DMA_Abort+0x450>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d03b      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a29      	ldr	r2, [pc, #164]	; (8002050 <HAL_DMA_Abort+0x454>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d036      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a27      	ldr	r2, [pc, #156]	; (8002054 <HAL_DMA_Abort+0x458>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d031      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a26      	ldr	r2, [pc, #152]	; (8002058 <HAL_DMA_Abort+0x45c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d02c      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a24      	ldr	r2, [pc, #144]	; (800205c <HAL_DMA_Abort+0x460>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d027      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a23      	ldr	r2, [pc, #140]	; (8002060 <HAL_DMA_Abort+0x464>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d022      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a21      	ldr	r2, [pc, #132]	; (8002064 <HAL_DMA_Abort+0x468>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01d      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a20      	ldr	r2, [pc, #128]	; (8002068 <HAL_DMA_Abort+0x46c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d018      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_DMA_Abort+0x470>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_DMA_Abort+0x474>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00e      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_DMA_Abort+0x478>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d009      	beq.n	800201e <HAL_DMA_Abort+0x422>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <HAL_DMA_Abort+0x47c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d004      	beq.n	800201e <HAL_DMA_Abort+0x422>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_DMA_Abort+0x480>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_DMA_Abort+0x426>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_DMA_Abort+0x428>
 8002022:	2300      	movs	r3, #0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d02b      	beq.n	8002080 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	223f      	movs	r2, #63	; 0x3f
 8002038:	409a      	lsls	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	e02a      	b.n	8002096 <HAL_DMA_Abort+0x49a>
 8002040:	40020010 	.word	0x40020010
 8002044:	40020028 	.word	0x40020028
 8002048:	40020040 	.word	0x40020040
 800204c:	40020058 	.word	0x40020058
 8002050:	40020070 	.word	0x40020070
 8002054:	40020088 	.word	0x40020088
 8002058:	400200a0 	.word	0x400200a0
 800205c:	400200b8 	.word	0x400200b8
 8002060:	40020410 	.word	0x40020410
 8002064:	40020428 	.word	0x40020428
 8002068:	40020440 	.word	0x40020440
 800206c:	40020458 	.word	0x40020458
 8002070:	40020470 	.word	0x40020470
 8002074:	40020488 	.word	0x40020488
 8002078:	400204a0 	.word	0x400204a0
 800207c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	2201      	movs	r2, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a4f      	ldr	r2, [pc, #316]	; (80021d8 <HAL_DMA_Abort+0x5dc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d072      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a4d      	ldr	r2, [pc, #308]	; (80021dc <HAL_DMA_Abort+0x5e0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d06d      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a4c      	ldr	r2, [pc, #304]	; (80021e0 <HAL_DMA_Abort+0x5e4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d068      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a4a      	ldr	r2, [pc, #296]	; (80021e4 <HAL_DMA_Abort+0x5e8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d063      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a49      	ldr	r2, [pc, #292]	; (80021e8 <HAL_DMA_Abort+0x5ec>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d05e      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a47      	ldr	r2, [pc, #284]	; (80021ec <HAL_DMA_Abort+0x5f0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d059      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <HAL_DMA_Abort+0x5f4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d054      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a44      	ldr	r2, [pc, #272]	; (80021f4 <HAL_DMA_Abort+0x5f8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d04f      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a43      	ldr	r2, [pc, #268]	; (80021f8 <HAL_DMA_Abort+0x5fc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d04a      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a41      	ldr	r2, [pc, #260]	; (80021fc <HAL_DMA_Abort+0x600>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d045      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a40      	ldr	r2, [pc, #256]	; (8002200 <HAL_DMA_Abort+0x604>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d040      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a3e      	ldr	r2, [pc, #248]	; (8002204 <HAL_DMA_Abort+0x608>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d03b      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a3d      	ldr	r2, [pc, #244]	; (8002208 <HAL_DMA_Abort+0x60c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d036      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a3b      	ldr	r2, [pc, #236]	; (800220c <HAL_DMA_Abort+0x610>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d031      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a3a      	ldr	r2, [pc, #232]	; (8002210 <HAL_DMA_Abort+0x614>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d02c      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a38      	ldr	r2, [pc, #224]	; (8002214 <HAL_DMA_Abort+0x618>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d027      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a37      	ldr	r2, [pc, #220]	; (8002218 <HAL_DMA_Abort+0x61c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d022      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a35      	ldr	r2, [pc, #212]	; (800221c <HAL_DMA_Abort+0x620>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01d      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a34      	ldr	r2, [pc, #208]	; (8002220 <HAL_DMA_Abort+0x624>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d018      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a32      	ldr	r2, [pc, #200]	; (8002224 <HAL_DMA_Abort+0x628>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a31      	ldr	r2, [pc, #196]	; (8002228 <HAL_DMA_Abort+0x62c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d00e      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2f      	ldr	r2, [pc, #188]	; (800222c <HAL_DMA_Abort+0x630>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d009      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2e      	ldr	r2, [pc, #184]	; (8002230 <HAL_DMA_Abort+0x634>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d004      	beq.n	8002186 <HAL_DMA_Abort+0x58a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <HAL_DMA_Abort+0x638>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_DMA_Abort+0x58e>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_DMA_Abort+0x590>
 800218a:	2300      	movs	r3, #0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002198:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40020010 	.word	0x40020010
 80021dc:	40020028 	.word	0x40020028
 80021e0:	40020040 	.word	0x40020040
 80021e4:	40020058 	.word	0x40020058
 80021e8:	40020070 	.word	0x40020070
 80021ec:	40020088 	.word	0x40020088
 80021f0:	400200a0 	.word	0x400200a0
 80021f4:	400200b8 	.word	0x400200b8
 80021f8:	40020410 	.word	0x40020410
 80021fc:	40020428 	.word	0x40020428
 8002200:	40020440 	.word	0x40020440
 8002204:	40020458 	.word	0x40020458
 8002208:	40020470 	.word	0x40020470
 800220c:	40020488 	.word	0x40020488
 8002210:	400204a0 	.word	0x400204a0
 8002214:	400204b8 	.word	0x400204b8
 8002218:	58025408 	.word	0x58025408
 800221c:	5802541c 	.word	0x5802541c
 8002220:	58025430 	.word	0x58025430
 8002224:	58025444 	.word	0x58025444
 8002228:	58025458 	.word	0x58025458
 800222c:	5802546c 	.word	0x5802546c
 8002230:	58025480 	.word	0x58025480
 8002234:	58025494 	.word	0x58025494

08002238 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e237      	b.n	80026ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d004      	beq.n	8002260 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e22c      	b.n	80026ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a5c      	ldr	r2, [pc, #368]	; (80023d8 <HAL_DMA_Abort_IT+0x1a0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d04a      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5b      	ldr	r2, [pc, #364]	; (80023dc <HAL_DMA_Abort_IT+0x1a4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d045      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a59      	ldr	r2, [pc, #356]	; (80023e0 <HAL_DMA_Abort_IT+0x1a8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d040      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_DMA_Abort_IT+0x1ac>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d03b      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a56      	ldr	r2, [pc, #344]	; (80023e8 <HAL_DMA_Abort_IT+0x1b0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d036      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a55      	ldr	r2, [pc, #340]	; (80023ec <HAL_DMA_Abort_IT+0x1b4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d031      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a53      	ldr	r2, [pc, #332]	; (80023f0 <HAL_DMA_Abort_IT+0x1b8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02c      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_DMA_Abort_IT+0x1bc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d027      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a50      	ldr	r2, [pc, #320]	; (80023f8 <HAL_DMA_Abort_IT+0x1c0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d022      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a4f      	ldr	r2, [pc, #316]	; (80023fc <HAL_DMA_Abort_IT+0x1c4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d01d      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a4d      	ldr	r2, [pc, #308]	; (8002400 <HAL_DMA_Abort_IT+0x1c8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d018      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a4c      	ldr	r2, [pc, #304]	; (8002404 <HAL_DMA_Abort_IT+0x1cc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d013      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_DMA_Abort_IT+0x1d0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00e      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a49      	ldr	r2, [pc, #292]	; (800240c <HAL_DMA_Abort_IT+0x1d4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d009      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a47      	ldr	r2, [pc, #284]	; (8002410 <HAL_DMA_Abort_IT+0x1d8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc8>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a46      	ldr	r2, [pc, #280]	; (8002414 <HAL_DMA_Abort_IT+0x1dc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_DMA_Abort_IT+0xcc>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_DMA_Abort_IT+0xce>
 8002304:	2300      	movs	r3, #0
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8086 	beq.w	8002418 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2204      	movs	r2, #4
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2f      	ldr	r2, [pc, #188]	; (80023d8 <HAL_DMA_Abort_IT+0x1a0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d04a      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2e      	ldr	r2, [pc, #184]	; (80023dc <HAL_DMA_Abort_IT+0x1a4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d045      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2c      	ldr	r2, [pc, #176]	; (80023e0 <HAL_DMA_Abort_IT+0x1a8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d040      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2b      	ldr	r2, [pc, #172]	; (80023e4 <HAL_DMA_Abort_IT+0x1ac>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d03b      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a29      	ldr	r2, [pc, #164]	; (80023e8 <HAL_DMA_Abort_IT+0x1b0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d036      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a28      	ldr	r2, [pc, #160]	; (80023ec <HAL_DMA_Abort_IT+0x1b4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d031      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a26      	ldr	r2, [pc, #152]	; (80023f0 <HAL_DMA_Abort_IT+0x1b8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02c      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <HAL_DMA_Abort_IT+0x1bc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d027      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <HAL_DMA_Abort_IT+0x1c0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d022      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a22      	ldr	r2, [pc, #136]	; (80023fc <HAL_DMA_Abort_IT+0x1c4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d01d      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a20      	ldr	r2, [pc, #128]	; (8002400 <HAL_DMA_Abort_IT+0x1c8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d018      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <HAL_DMA_Abort_IT+0x1cc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_DMA_Abort_IT+0x1d0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00e      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_DMA_Abort_IT+0x1d4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d009      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <HAL_DMA_Abort_IT+0x1d8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d004      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x17c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a19      	ldr	r2, [pc, #100]	; (8002414 <HAL_DMA_Abort_IT+0x1dc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d108      	bne.n	80023c6 <HAL_DMA_Abort_IT+0x18e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e178      	b.n	80026b8 <HAL_DMA_Abort_IT+0x480>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e16f      	b.n	80026b8 <HAL_DMA_Abort_IT+0x480>
 80023d8:	40020010 	.word	0x40020010
 80023dc:	40020028 	.word	0x40020028
 80023e0:	40020040 	.word	0x40020040
 80023e4:	40020058 	.word	0x40020058
 80023e8:	40020070 	.word	0x40020070
 80023ec:	40020088 	.word	0x40020088
 80023f0:	400200a0 	.word	0x400200a0
 80023f4:	400200b8 	.word	0x400200b8
 80023f8:	40020410 	.word	0x40020410
 80023fc:	40020428 	.word	0x40020428
 8002400:	40020440 	.word	0x40020440
 8002404:	40020458 	.word	0x40020458
 8002408:	40020470 	.word	0x40020470
 800240c:	40020488 	.word	0x40020488
 8002410:	400204a0 	.word	0x400204a0
 8002414:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 020e 	bic.w	r2, r2, #14
 8002426:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a6c      	ldr	r2, [pc, #432]	; (80025e0 <HAL_DMA_Abort_IT+0x3a8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d04a      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a6b      	ldr	r2, [pc, #428]	; (80025e4 <HAL_DMA_Abort_IT+0x3ac>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d045      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a69      	ldr	r2, [pc, #420]	; (80025e8 <HAL_DMA_Abort_IT+0x3b0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d040      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a68      	ldr	r2, [pc, #416]	; (80025ec <HAL_DMA_Abort_IT+0x3b4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d03b      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a66      	ldr	r2, [pc, #408]	; (80025f0 <HAL_DMA_Abort_IT+0x3b8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d036      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a65      	ldr	r2, [pc, #404]	; (80025f4 <HAL_DMA_Abort_IT+0x3bc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d031      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a63      	ldr	r2, [pc, #396]	; (80025f8 <HAL_DMA_Abort_IT+0x3c0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d02c      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a62      	ldr	r2, [pc, #392]	; (80025fc <HAL_DMA_Abort_IT+0x3c4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d027      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a60      	ldr	r2, [pc, #384]	; (8002600 <HAL_DMA_Abort_IT+0x3c8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d022      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a5f      	ldr	r2, [pc, #380]	; (8002604 <HAL_DMA_Abort_IT+0x3cc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d01d      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a5d      	ldr	r2, [pc, #372]	; (8002608 <HAL_DMA_Abort_IT+0x3d0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d018      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a5c      	ldr	r2, [pc, #368]	; (800260c <HAL_DMA_Abort_IT+0x3d4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d013      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a5a      	ldr	r2, [pc, #360]	; (8002610 <HAL_DMA_Abort_IT+0x3d8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00e      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a59      	ldr	r2, [pc, #356]	; (8002614 <HAL_DMA_Abort_IT+0x3dc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a57      	ldr	r2, [pc, #348]	; (8002618 <HAL_DMA_Abort_IT+0x3e0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x290>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a56      	ldr	r2, [pc, #344]	; (800261c <HAL_DMA_Abort_IT+0x3e4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d108      	bne.n	80024da <HAL_DMA_Abort_IT+0x2a2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e007      	b.n	80024ea <HAL_DMA_Abort_IT+0x2b2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3c      	ldr	r2, [pc, #240]	; (80025e0 <HAL_DMA_Abort_IT+0x3a8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d072      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <HAL_DMA_Abort_IT+0x3ac>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d06d      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a39      	ldr	r2, [pc, #228]	; (80025e8 <HAL_DMA_Abort_IT+0x3b0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d068      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a37      	ldr	r2, [pc, #220]	; (80025ec <HAL_DMA_Abort_IT+0x3b4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d063      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a36      	ldr	r2, [pc, #216]	; (80025f0 <HAL_DMA_Abort_IT+0x3b8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d05e      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a34      	ldr	r2, [pc, #208]	; (80025f4 <HAL_DMA_Abort_IT+0x3bc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d059      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a33      	ldr	r2, [pc, #204]	; (80025f8 <HAL_DMA_Abort_IT+0x3c0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d054      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a31      	ldr	r2, [pc, #196]	; (80025fc <HAL_DMA_Abort_IT+0x3c4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d04f      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a30      	ldr	r2, [pc, #192]	; (8002600 <HAL_DMA_Abort_IT+0x3c8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d04a      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_DMA_Abort_IT+0x3cc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d045      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <HAL_DMA_Abort_IT+0x3d0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d040      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <HAL_DMA_Abort_IT+0x3d4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d03b      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <HAL_DMA_Abort_IT+0x3d8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d036      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_DMA_Abort_IT+0x3dc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d031      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <HAL_DMA_Abort_IT+0x3e0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d02c      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a25      	ldr	r2, [pc, #148]	; (800261c <HAL_DMA_Abort_IT+0x3e4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d027      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a24      	ldr	r2, [pc, #144]	; (8002620 <HAL_DMA_Abort_IT+0x3e8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d022      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a22      	ldr	r2, [pc, #136]	; (8002624 <HAL_DMA_Abort_IT+0x3ec>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d01d      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a21      	ldr	r2, [pc, #132]	; (8002628 <HAL_DMA_Abort_IT+0x3f0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d018      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_DMA_Abort_IT+0x3f4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d013      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_DMA_Abort_IT+0x3f8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00e      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_DMA_Abort_IT+0x3fc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1b      	ldr	r2, [pc, #108]	; (8002638 <HAL_DMA_Abort_IT+0x400>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d004      	beq.n	80025da <HAL_DMA_Abort_IT+0x3a2>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a19      	ldr	r2, [pc, #100]	; (800263c <HAL_DMA_Abort_IT+0x404>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d132      	bne.n	8002640 <HAL_DMA_Abort_IT+0x408>
 80025da:	2301      	movs	r3, #1
 80025dc:	e031      	b.n	8002642 <HAL_DMA_Abort_IT+0x40a>
 80025de:	bf00      	nop
 80025e0:	40020010 	.word	0x40020010
 80025e4:	40020028 	.word	0x40020028
 80025e8:	40020040 	.word	0x40020040
 80025ec:	40020058 	.word	0x40020058
 80025f0:	40020070 	.word	0x40020070
 80025f4:	40020088 	.word	0x40020088
 80025f8:	400200a0 	.word	0x400200a0
 80025fc:	400200b8 	.word	0x400200b8
 8002600:	40020410 	.word	0x40020410
 8002604:	40020428 	.word	0x40020428
 8002608:	40020440 	.word	0x40020440
 800260c:	40020458 	.word	0x40020458
 8002610:	40020470 	.word	0x40020470
 8002614:	40020488 	.word	0x40020488
 8002618:	400204a0 	.word	0x400204a0
 800261c:	400204b8 	.word	0x400204b8
 8002620:	58025408 	.word	0x58025408
 8002624:	5802541c 	.word	0x5802541c
 8002628:	58025430 	.word	0x58025430
 800262c:	58025444 	.word	0x58025444
 8002630:	58025458 	.word	0x58025458
 8002634:	5802546c 	.word	0x5802546c
 8002638:	58025480 	.word	0x58025480
 800263c:	58025494 	.word	0x58025494
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d028      	beq.n	8002698 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002654:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2201      	movs	r2, #1
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002674:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800268c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002696:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop

080026c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026d2:	4b89      	ldr	r3, [pc, #548]	; (80028f8 <HAL_GPIO_Init+0x234>)
 80026d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026d6:	e194      	b.n	8002a02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2101      	movs	r1, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8186 	beq.w	80029fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d005      	beq.n	8002708 <HAL_GPIO_Init+0x44>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d130      	bne.n	800276a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800273e:	2201      	movs	r2, #1
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 0201 	and.w	r2, r3, #1
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b03      	cmp	r3, #3
 8002774:	d017      	beq.n	80027a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d123      	bne.n	80027fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	08da      	lsrs	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3208      	adds	r2, #8
 80027ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	08da      	lsrs	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3208      	adds	r2, #8
 80027f4:	69b9      	ldr	r1, [r7, #24]
 80027f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0203 	and.w	r2, r3, #3
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80e0 	beq.w	80029fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283c:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <HAL_GPIO_Init+0x238>)
 800283e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002842:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <HAL_GPIO_Init+0x238>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800284c:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_GPIO_Init+0x238>)
 800284e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800285a:	4a29      	ldr	r2, [pc, #164]	; (8002900 <HAL_GPIO_Init+0x23c>)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	3302      	adds	r3, #2
 8002862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	220f      	movs	r2, #15
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a20      	ldr	r2, [pc, #128]	; (8002904 <HAL_GPIO_Init+0x240>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d052      	beq.n	800292c <HAL_GPIO_Init+0x268>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <HAL_GPIO_Init+0x244>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d031      	beq.n	80028f2 <HAL_GPIO_Init+0x22e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_GPIO_Init+0x248>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d02b      	beq.n	80028ee <HAL_GPIO_Init+0x22a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_GPIO_Init+0x24c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d025      	beq.n	80028ea <HAL_GPIO_Init+0x226>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <HAL_GPIO_Init+0x250>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01f      	beq.n	80028e6 <HAL_GPIO_Init+0x222>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <HAL_GPIO_Init+0x254>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d019      	beq.n	80028e2 <HAL_GPIO_Init+0x21e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a1a      	ldr	r2, [pc, #104]	; (800291c <HAL_GPIO_Init+0x258>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_GPIO_Init+0x21a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_GPIO_Init+0x25c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00d      	beq.n	80028da <HAL_GPIO_Init+0x216>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_GPIO_Init+0x260>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d007      	beq.n	80028d6 <HAL_GPIO_Init+0x212>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_GPIO_Init+0x264>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <HAL_GPIO_Init+0x20e>
 80028ce:	2309      	movs	r3, #9
 80028d0:	e02d      	b.n	800292e <HAL_GPIO_Init+0x26a>
 80028d2:	230a      	movs	r3, #10
 80028d4:	e02b      	b.n	800292e <HAL_GPIO_Init+0x26a>
 80028d6:	2308      	movs	r3, #8
 80028d8:	e029      	b.n	800292e <HAL_GPIO_Init+0x26a>
 80028da:	2307      	movs	r3, #7
 80028dc:	e027      	b.n	800292e <HAL_GPIO_Init+0x26a>
 80028de:	2306      	movs	r3, #6
 80028e0:	e025      	b.n	800292e <HAL_GPIO_Init+0x26a>
 80028e2:	2305      	movs	r3, #5
 80028e4:	e023      	b.n	800292e <HAL_GPIO_Init+0x26a>
 80028e6:	2304      	movs	r3, #4
 80028e8:	e021      	b.n	800292e <HAL_GPIO_Init+0x26a>
 80028ea:	2303      	movs	r3, #3
 80028ec:	e01f      	b.n	800292e <HAL_GPIO_Init+0x26a>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e01d      	b.n	800292e <HAL_GPIO_Init+0x26a>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e01b      	b.n	800292e <HAL_GPIO_Init+0x26a>
 80028f6:	bf00      	nop
 80028f8:	58000080 	.word	0x58000080
 80028fc:	58024400 	.word	0x58024400
 8002900:	58000400 	.word	0x58000400
 8002904:	58020000 	.word	0x58020000
 8002908:	58020400 	.word	0x58020400
 800290c:	58020800 	.word	0x58020800
 8002910:	58020c00 	.word	0x58020c00
 8002914:	58021000 	.word	0x58021000
 8002918:	58021400 	.word	0x58021400
 800291c:	58021800 	.word	0x58021800
 8002920:	58021c00 	.word	0x58021c00
 8002924:	58022000 	.word	0x58022000
 8002928:	58022400 	.word	0x58022400
 800292c:	2300      	movs	r3, #0
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	f002 0203 	and.w	r2, r2, #3
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	4093      	lsls	r3, r2
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800293e:	4938      	ldr	r1, [pc, #224]	; (8002a20 <HAL_GPIO_Init+0x35c>)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	3301      	adds	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f47f ae63 	bne.w	80026d8 <HAL_GPIO_Init+0x14>
  }
}
 8002a12:	bf00      	nop
 8002a14:	bf00      	nop
 8002a16:	3724      	adds	r7, #36	; 0x24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	58000400 	.word	0x58000400

08002a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e08b      	b.n	8002b4e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe fb1a 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	; 0x24
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	e006      	b.n	8002aac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d108      	bne.n	8002ac6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	e007      	b.n	8002ad6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_I2C_Init+0x134>)
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002af4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1a      	ldr	r2, [r3, #32]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	02008000 	.word	0x02008000

08002b5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d138      	bne.n	8002be4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e032      	b.n	8002be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	; 0x24
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d139      	bne.n	8002c7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e033      	b.n	8002c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2224      	movs	r2, #36	; 0x24
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_PWREx_ConfigSupply+0x70>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <HAL_PWREx_ConfigSupply+0x70>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e01f      	b.n	8002cf2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e01d      	b.n	8002cf2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_PWREx_ConfigSupply+0x70>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f023 0207 	bic.w	r2, r3, #7
 8002cbe:	490f      	ldr	r1, [pc, #60]	; (8002cfc <HAL_PWREx_ConfigSupply+0x70>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cc6:	f7fe fea1 	bl	8001a0c <HAL_GetTick>
 8002cca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ccc:	e009      	b.n	8002ce2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cce:	f7fe fe9d 	bl	8001a0c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cdc:	d901      	bls.n	8002ce2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e007      	b.n	8002cf2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_PWREx_ConfigSupply+0x70>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cee:	d1ee      	bne.n	8002cce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	58024800 	.word	0x58024800

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08c      	sub	sp, #48	; 0x30
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f000 bc48 	b.w	80035a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 8088 	beq.w	8002e32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d22:	4b99      	ldr	r3, [pc, #612]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d2c:	4b96      	ldr	r3, [pc, #600]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d007      	beq.n	8002d48 <HAL_RCC_OscConfig+0x48>
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	2b18      	cmp	r3, #24
 8002d3c:	d111      	bne.n	8002d62 <HAL_RCC_OscConfig+0x62>
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	4b8f      	ldr	r3, [pc, #572]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d06d      	beq.n	8002e30 <HAL_RCC_OscConfig+0x130>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d169      	bne.n	8002e30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f000 bc21 	b.w	80035a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x7a>
 8002d6c:	4b86      	ldr	r3, [pc, #536]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a85      	ldr	r2, [pc, #532]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e02e      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x9c>
 8002d82:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a80      	ldr	r2, [pc, #512]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b7e      	ldr	r3, [pc, #504]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a7d      	ldr	r2, [pc, #500]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e01d      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xc0>
 8002da6:	4b78      	ldr	r3, [pc, #480]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a77      	ldr	r2, [pc, #476]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b75      	ldr	r3, [pc, #468]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a74      	ldr	r2, [pc, #464]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd8>
 8002dc0:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a70      	ldr	r2, [pc, #448]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b6e      	ldr	r3, [pc, #440]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6d      	ldr	r2, [pc, #436]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe fe14 	bl	8001a0c <HAL_GetTick>
 8002de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fe fe10 	bl	8001a0c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e3d4      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dfa:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe8>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fe00 	bl	8001a0c <HAL_GetTick>
 8002e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe fdfc 	bl	8001a0c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e3c0      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e22:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x110>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80ca 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e40:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e4a:	4b4f      	ldr	r3, [pc, #316]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_RCC_OscConfig+0x166>
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	2b18      	cmp	r3, #24
 8002e5a:	d156      	bne.n	8002f0a <HAL_RCC_OscConfig+0x20a>
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d151      	bne.n	8002f0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e66:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_RCC_OscConfig+0x17e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e392      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e7e:	4b42      	ldr	r3, [pc, #264]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 0219 	bic.w	r2, r3, #25
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	493f      	ldr	r1, [pc, #252]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fdbc 	bl	8001a0c <HAL_GetTick>
 8002e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e98:	f7fe fdb8 	bl	8001a0c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e37c      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	f7fe fdb5 	bl	8001a24 <HAL_GetREVID>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d817      	bhi.n	8002ef4 <HAL_RCC_OscConfig+0x1f4>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	d108      	bne.n	8002ede <HAL_RCC_OscConfig+0x1de>
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ed4:	4a2c      	ldr	r2, [pc, #176]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002edc:	e07a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ede:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	031b      	lsls	r3, r3, #12
 8002eec:	4926      	ldr	r1, [pc, #152]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef2:	e06f      	b.n	8002fd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	061b      	lsls	r3, r3, #24
 8002f02:	4921      	ldr	r1, [pc, #132]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f08:	e064      	b.n	8002fd4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d047      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f12:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 0219 	bic.w	r2, r3, #25
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	491a      	ldr	r1, [pc, #104]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fd72 	bl	8001a0c <HAL_GetTick>
 8002f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fd6e 	bl	8001a0c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e332      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	f7fe fd6b 	bl	8001a24 <HAL_GetREVID>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d819      	bhi.n	8002f8c <HAL_RCC_OscConfig+0x28c>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d108      	bne.n	8002f72 <HAL_RCC_OscConfig+0x272>
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f68:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f6e:	6053      	str	r3, [r2, #4]
 8002f70:	e030      	b.n	8002fd4 <HAL_RCC_OscConfig+0x2d4>
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	031b      	lsls	r3, r3, #12
 8002f80:	4901      	ldr	r1, [pc, #4]	; (8002f88 <HAL_RCC_OscConfig+0x288>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
 8002f86:	e025      	b.n	8002fd4 <HAL_RCC_OscConfig+0x2d4>
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	4b9a      	ldr	r3, [pc, #616]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	4997      	ldr	r1, [pc, #604]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
 8002fa0:	e018      	b.n	8002fd4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa2:	4b95      	ldr	r3, [pc, #596]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a94      	ldr	r2, [pc, #592]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fe fd2d 	bl	8001a0c <HAL_GetTick>
 8002fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb6:	f7fe fd29 	bl	8001a0c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e2ed      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fc8:	4b8b      	ldr	r3, [pc, #556]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80a9 	beq.w	8003134 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe2:	4b85      	ldr	r3, [pc, #532]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fec:	4b82      	ldr	r3, [pc, #520]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d007      	beq.n	8003008 <HAL_RCC_OscConfig+0x308>
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b18      	cmp	r3, #24
 8002ffc:	d13a      	bne.n	8003074 <HAL_RCC_OscConfig+0x374>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d135      	bne.n	8003074 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003008:	4b7b      	ldr	r3, [pc, #492]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x320>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b80      	cmp	r3, #128	; 0x80
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e2c1      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003020:	f7fe fd00 	bl	8001a24 <HAL_GetREVID>
 8003024:	4603      	mov	r3, r0
 8003026:	f241 0203 	movw	r2, #4099	; 0x1003
 800302a:	4293      	cmp	r3, r2
 800302c:	d817      	bhi.n	800305e <HAL_RCC_OscConfig+0x35e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	2b20      	cmp	r3, #32
 8003034:	d108      	bne.n	8003048 <HAL_RCC_OscConfig+0x348>
 8003036:	4b70      	ldr	r3, [pc, #448]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800303e:	4a6e      	ldr	r2, [pc, #440]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8003040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003044:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003046:	e075      	b.n	8003134 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003048:	4b6b      	ldr	r3, [pc, #428]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	069b      	lsls	r3, r3, #26
 8003056:	4968      	ldr	r1, [pc, #416]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800305c:	e06a      	b.n	8003134 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800305e:	4b66      	ldr	r3, [pc, #408]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	4962      	ldr	r1, [pc, #392]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 800306e:	4313      	orrs	r3, r2
 8003070:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003072:	e05f      	b.n	8003134 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d042      	beq.n	8003102 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800307c:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a5d      	ldr	r2, [pc, #372]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8003082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fcc0 	bl	8001a0c <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003090:	f7fe fcbc 	bl	8001a0c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e280      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030a2:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030ae:	f7fe fcb9 	bl	8001a24 <HAL_GetREVID>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d817      	bhi.n	80030ec <HAL_RCC_OscConfig+0x3ec>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d108      	bne.n	80030d6 <HAL_RCC_OscConfig+0x3d6>
 80030c4:	4b4c      	ldr	r3, [pc, #304]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030cc:	4a4a      	ldr	r2, [pc, #296]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80030ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030d2:	6053      	str	r3, [r2, #4]
 80030d4:	e02e      	b.n	8003134 <HAL_RCC_OscConfig+0x434>
 80030d6:	4b48      	ldr	r3, [pc, #288]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	069b      	lsls	r3, r3, #26
 80030e4:	4944      	ldr	r1, [pc, #272]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
 80030ea:	e023      	b.n	8003134 <HAL_RCC_OscConfig+0x434>
 80030ec:	4b42      	ldr	r3, [pc, #264]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	493f      	ldr	r1, [pc, #252]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60cb      	str	r3, [r1, #12]
 8003100:	e018      	b.n	8003134 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a3c      	ldr	r2, [pc, #240]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8003108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe fc7d 	bl	8001a0c <HAL_GetTick>
 8003112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003116:	f7fe fc79 	bl	8001a0c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e23d      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003128:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d036      	beq.n	80031ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d019      	beq.n	800317c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003148:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 800314a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314c:	4a2a      	ldr	r2, [pc, #168]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe fc5a 	bl	8001a0c <HAL_GetTick>
 8003158:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315c:	f7fe fc56 	bl	8001a0c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e21a      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800316e:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8003170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x45c>
 800317a:	e018      	b.n	80031ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317c:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 800317e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe fc40 	bl	8001a0c <HAL_GetTick>
 800318c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003190:	f7fe fc3c 	bl	8001a0c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e200      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d039      	beq.n	800322e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01c      	beq.n	80031fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80031c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031ce:	f7fe fc1d 	bl	8001a0c <HAL_GetTick>
 80031d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031d6:	f7fe fc19 	bl	8001a0c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e1dd      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_OscConfig+0x4f8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x4d6>
 80031f4:	e01b      	b.n	800322e <HAL_RCC_OscConfig+0x52e>
 80031f6:	bf00      	nop
 80031f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031fc:	4b9b      	ldr	r3, [pc, #620]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a9a      	ldr	r2, [pc, #616]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003206:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003208:	f7fe fc00 	bl	8001a0c <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003210:	f7fe fbfc 	bl	8001a0c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1c0      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003222:	4b92      	ldr	r3, [pc, #584]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8081 	beq.w	800333e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800323c:	4b8c      	ldr	r3, [pc, #560]	; (8003470 <HAL_RCC_OscConfig+0x770>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a8b      	ldr	r2, [pc, #556]	; (8003470 <HAL_RCC_OscConfig+0x770>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003248:	f7fe fbe0 	bl	8001a0c <HAL_GetTick>
 800324c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7fe fbdc 	bl	8001a0c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	; 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e1a0      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003262:	4b83      	ldr	r3, [pc, #524]	; (8003470 <HAL_RCC_OscConfig+0x770>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d106      	bne.n	8003284 <HAL_RCC_OscConfig+0x584>
 8003276:	4b7d      	ldr	r3, [pc, #500]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a7c      	ldr	r2, [pc, #496]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
 8003282:	e02d      	b.n	80032e0 <HAL_RCC_OscConfig+0x5e0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10c      	bne.n	80032a6 <HAL_RCC_OscConfig+0x5a6>
 800328c:	4b77      	ldr	r3, [pc, #476]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	4a76      	ldr	r2, [pc, #472]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	6713      	str	r3, [r2, #112]	; 0x70
 8003298:	4b74      	ldr	r3, [pc, #464]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a73      	ldr	r2, [pc, #460]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 800329e:	f023 0304 	bic.w	r3, r3, #4
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	e01c      	b.n	80032e0 <HAL_RCC_OscConfig+0x5e0>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x5c8>
 80032ae:	4b6f      	ldr	r3, [pc, #444]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a6e      	ldr	r2, [pc, #440]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	4b6c      	ldr	r3, [pc, #432]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a6b      	ldr	r2, [pc, #428]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0x5e0>
 80032c8:	4b68      	ldr	r3, [pc, #416]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a67      	ldr	r2, [pc, #412]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
 80032d4:	4b65      	ldr	r3, [pc, #404]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a64      	ldr	r2, [pc, #400]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80032da:	f023 0304 	bic.w	r3, r3, #4
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fe fb90 	bl	8001a0c <HAL_GetTick>
 80032ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fe fb8c 	bl	8001a0c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e14e      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003306:	4b59      	ldr	r3, [pc, #356]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0ee      	beq.n	80032f0 <HAL_RCC_OscConfig+0x5f0>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fe fb7a 	bl	8001a0c <HAL_GetTick>
 8003318:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7fe fb76 	bl	8001a0c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e138      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003332:	4b4e      	ldr	r3, [pc, #312]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1ee      	bne.n	800331c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 812d 	beq.w	80035a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003348:	4b48      	ldr	r3, [pc, #288]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003350:	2b18      	cmp	r3, #24
 8003352:	f000 80bd 	beq.w	80034d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2b02      	cmp	r3, #2
 800335c:	f040 809e 	bne.w	800349c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b42      	ldr	r3, [pc, #264]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a41      	ldr	r2, [pc, #260]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fe fb4e 	bl	8001a0c <HAL_GetTick>
 8003370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe fb4a 	bl	8001a0c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e10e      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003386:	4b39      	ldr	r3, [pc, #228]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003392:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <HAL_RCC_OscConfig+0x774>)
 8003398:	4013      	ands	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033a2:	0112      	lsls	r2, r2, #4
 80033a4:	430a      	orrs	r2, r1
 80033a6:	4931      	ldr	r1, [pc, #196]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	628b      	str	r3, [r1, #40]	; 0x28
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	3b01      	subs	r3, #1
 80033b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	3b01      	subs	r3, #1
 80033bc:	025b      	lsls	r3, r3, #9
 80033be:	b29b      	uxth	r3, r3
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	3b01      	subs	r3, #1
 80033c8:	041b      	lsls	r3, r3, #16
 80033ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d4:	3b01      	subs	r3, #1
 80033d6:	061b      	lsls	r3, r3, #24
 80033d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033dc:	4923      	ldr	r1, [pc, #140]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80033e2:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	4a21      	ldr	r2, [pc, #132]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033ee:	4b1f      	ldr	r3, [pc, #124]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80033f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f2:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_RCC_OscConfig+0x778>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033fa:	00d2      	lsls	r2, r2, #3
 80033fc:	491b      	ldr	r1, [pc, #108]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	f023 020c 	bic.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	4917      	ldr	r1, [pc, #92]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003410:	4313      	orrs	r3, r2
 8003412:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	f023 0202 	bic.w	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	4912      	ldr	r1, [pc, #72]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	4a10      	ldr	r2, [pc, #64]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	4a0d      	ldr	r2, [pc, #52]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800343c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003448:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	4a07      	ldr	r2, [pc, #28]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_RCC_OscConfig+0x76c>)
 800345c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fe fad3 	bl	8001a0c <HAL_GetTick>
 8003466:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003468:	e011      	b.n	800348e <HAL_RCC_OscConfig+0x78e>
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400
 8003470:	58024800 	.word	0x58024800
 8003474:	fffffc0c 	.word	0xfffffc0c
 8003478:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe fac6 	bl	8001a0c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e08a      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x77c>
 800349a:	e082      	b.n	80035a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349c:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a42      	ldr	r2, [pc, #264]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 80034a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe fab0 	bl	8001a0c <HAL_GetTick>
 80034ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe faac 	bl	8001a0c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e070      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x7b0>
 80034ce:	e068      	b.n	80035a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034d0:	4b36      	ldr	r3, [pc, #216]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034d6:	4b35      	ldr	r3, [pc, #212]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d031      	beq.n	8003548 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f003 0203 	and.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d12a      	bne.n	8003548 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d122      	bne.n	8003548 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d11a      	bne.n	8003548 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0a5b      	lsrs	r3, r3, #9
 8003516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d111      	bne.n	8003548 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	0c1b      	lsrs	r3, r3, #16
 8003528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d108      	bne.n	8003548 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	0e1b      	lsrs	r3, r3, #24
 800353a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e02b      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800354c:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	08db      	lsrs	r3, r3, #3
 8003552:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003556:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	429a      	cmp	r2, r3
 8003560:	d01f      	beq.n	80035a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	4a11      	ldr	r2, [pc, #68]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800356e:	f7fe fa4d 	bl	8001a0c <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003574:	bf00      	nop
 8003576:	f7fe fa49 	bl	8001a0c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	4293      	cmp	r3, r2
 8003580:	d0f9      	beq.n	8003576 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 8003584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003586:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_RCC_OscConfig+0x8b0>)
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800358e:	00d2      	lsls	r2, r2, #3
 8003590:	4906      	ldr	r1, [pc, #24]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 8003592:	4313      	orrs	r3, r2
 8003594:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_RCC_OscConfig+0x8ac>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3730      	adds	r7, #48	; 0x30
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	58024400 	.word	0x58024400
 80035b0:	ffff0007 	.word	0xffff0007

080035b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e19c      	b.n	8003902 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b8a      	ldr	r3, [pc, #552]	; (80037f4 <HAL_RCC_ClockConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d910      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b87      	ldr	r3, [pc, #540]	; (80037f4 <HAL_RCC_ClockConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 020f 	bic.w	r2, r3, #15
 80035de:	4985      	ldr	r1, [pc, #532]	; (80037f4 <HAL_RCC_ClockConfig+0x240>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b83      	ldr	r3, [pc, #524]	; (80037f4 <HAL_RCC_ClockConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e184      	b.n	8003902 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	4b7b      	ldr	r3, [pc, #492]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003610:	429a      	cmp	r2, r3
 8003612:	d908      	bls.n	8003626 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003614:	4b78      	ldr	r3, [pc, #480]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	4975      	ldr	r1, [pc, #468]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003622:	4313      	orrs	r3, r2
 8003624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d010      	beq.n	8003654 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	4b70      	ldr	r3, [pc, #448]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800363e:	429a      	cmp	r2, r3
 8003640:	d908      	bls.n	8003654 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003642:	4b6d      	ldr	r3, [pc, #436]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	496a      	ldr	r1, [pc, #424]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003650:	4313      	orrs	r3, r2
 8003652:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d010      	beq.n	8003682 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699a      	ldr	r2, [r3, #24]
 8003664:	4b64      	ldr	r3, [pc, #400]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800366c:	429a      	cmp	r2, r3
 800366e:	d908      	bls.n	8003682 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003670:	4b61      	ldr	r3, [pc, #388]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	495e      	ldr	r1, [pc, #376]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 800367e:	4313      	orrs	r3, r2
 8003680:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69da      	ldr	r2, [r3, #28]
 8003692:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800369a:	429a      	cmp	r2, r3
 800369c:	d908      	bls.n	80036b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800369e:	4b56      	ldr	r3, [pc, #344]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	4953      	ldr	r1, [pc, #332]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4b4d      	ldr	r3, [pc, #308]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d908      	bls.n	80036de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036cc:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f023 020f 	bic.w	r2, r3, #15
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4947      	ldr	r1, [pc, #284]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d055      	beq.n	8003796 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80036ea:	4b43      	ldr	r3, [pc, #268]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	4940      	ldr	r1, [pc, #256]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d107      	bne.n	8003714 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003704:	4b3c      	ldr	r3, [pc, #240]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d121      	bne.n	8003754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0f6      	b.n	8003902 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d107      	bne.n	800372c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800371c:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d115      	bne.n	8003754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0ea      	b.n	8003902 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d107      	bne.n	8003744 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003734:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0de      	b.n	8003902 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003744:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0d6      	b.n	8003902 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003754:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f023 0207 	bic.w	r2, r3, #7
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4925      	ldr	r1, [pc, #148]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003762:	4313      	orrs	r3, r2
 8003764:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003766:	f7fe f951 	bl	8001a0c <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376c:	e00a      	b.n	8003784 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376e:	f7fe f94d 	bl	8001a0c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0be      	b.n	8003902 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003784:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	429a      	cmp	r2, r3
 8003794:	d1eb      	bne.n	800376e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d010      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d208      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f023 020f 	bic.w	r2, r3, #15
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	490e      	ldr	r1, [pc, #56]	; (80037f8 <HAL_RCC_ClockConfig+0x244>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d214      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <HAL_RCC_ClockConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 020f 	bic.w	r2, r3, #15
 80037da:	4906      	ldr	r1, [pc, #24]	; (80037f4 <HAL_RCC_ClockConfig+0x240>)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <HAL_RCC_ClockConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e086      	b.n	8003902 <HAL_RCC_ClockConfig+0x34e>
 80037f4:	52002000 	.word	0x52002000
 80037f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d010      	beq.n	800382a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	4b3f      	ldr	r3, [pc, #252]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003814:	429a      	cmp	r2, r3
 8003816:	d208      	bcs.n	800382a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003818:	4b3c      	ldr	r3, [pc, #240]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	4939      	ldr	r1, [pc, #228]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 8003826:	4313      	orrs	r3, r2
 8003828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d010      	beq.n	8003858 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	4b34      	ldr	r3, [pc, #208]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003842:	429a      	cmp	r2, r3
 8003844:	d208      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003846:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	492e      	ldr	r1, [pc, #184]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 8003854:	4313      	orrs	r3, r2
 8003856:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	4b28      	ldr	r3, [pc, #160]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003870:	429a      	cmp	r2, r3
 8003872:	d208      	bcs.n	8003886 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	4922      	ldr	r1, [pc, #136]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 8003882:	4313      	orrs	r3, r2
 8003884:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d010      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800389e:	429a      	cmp	r2, r3
 80038a0:	d208      	bcs.n	80038b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038a2:	4b1a      	ldr	r3, [pc, #104]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	4917      	ldr	r1, [pc, #92]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038b4:	f000 f834 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	4912      	ldr	r1, [pc, #72]	; (8003910 <HAL_RCC_ClockConfig+0x35c>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
 80038d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038d2:	4b0e      	ldr	r3, [pc, #56]	; (800390c <HAL_RCC_ClockConfig+0x358>)
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	4a0d      	ldr	r2, [pc, #52]	; (8003910 <HAL_RCC_ClockConfig+0x35c>)
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <HAL_RCC_ClockConfig+0x360>)
 80038ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <HAL_RCC_ClockConfig+0x364>)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_RCC_ClockConfig+0x368>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd fde8 	bl	80014cc <HAL_InitTick>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	58024400 	.word	0x58024400
 8003910:	0800d92c 	.word	0x0800d92c
 8003914:	24000004 	.word	0x24000004
 8003918:	24000000 	.word	0x24000000
 800391c:	24000008 	.word	0x24000008

08003920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003926:	4bb3      	ldr	r3, [pc, #716]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800392e:	2b18      	cmp	r3, #24
 8003930:	f200 8155 	bhi.w	8003bde <HAL_RCC_GetSysClockFreq+0x2be>
 8003934:	a201      	add	r2, pc, #4	; (adr r2, 800393c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	080039a1 	.word	0x080039a1
 8003940:	08003bdf 	.word	0x08003bdf
 8003944:	08003bdf 	.word	0x08003bdf
 8003948:	08003bdf 	.word	0x08003bdf
 800394c:	08003bdf 	.word	0x08003bdf
 8003950:	08003bdf 	.word	0x08003bdf
 8003954:	08003bdf 	.word	0x08003bdf
 8003958:	08003bdf 	.word	0x08003bdf
 800395c:	080039c7 	.word	0x080039c7
 8003960:	08003bdf 	.word	0x08003bdf
 8003964:	08003bdf 	.word	0x08003bdf
 8003968:	08003bdf 	.word	0x08003bdf
 800396c:	08003bdf 	.word	0x08003bdf
 8003970:	08003bdf 	.word	0x08003bdf
 8003974:	08003bdf 	.word	0x08003bdf
 8003978:	08003bdf 	.word	0x08003bdf
 800397c:	080039cd 	.word	0x080039cd
 8003980:	08003bdf 	.word	0x08003bdf
 8003984:	08003bdf 	.word	0x08003bdf
 8003988:	08003bdf 	.word	0x08003bdf
 800398c:	08003bdf 	.word	0x08003bdf
 8003990:	08003bdf 	.word	0x08003bdf
 8003994:	08003bdf 	.word	0x08003bdf
 8003998:	08003bdf 	.word	0x08003bdf
 800399c:	080039d3 	.word	0x080039d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039a0:	4b94      	ldr	r3, [pc, #592]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039ac:	4b91      	ldr	r3, [pc, #580]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	08db      	lsrs	r3, r3, #3
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	4a90      	ldr	r2, [pc, #576]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
 80039bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80039be:	e111      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039c0:	4b8d      	ldr	r3, [pc, #564]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039c2:	61bb      	str	r3, [r7, #24]
      break;
 80039c4:	e10e      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80039c6:	4b8d      	ldr	r3, [pc, #564]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039c8:	61bb      	str	r3, [r7, #24]
      break;
 80039ca:	e10b      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80039cc:	4b8c      	ldr	r3, [pc, #560]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039ce:	61bb      	str	r3, [r7, #24]
      break;
 80039d0:	e108      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039d2:	4b88      	ldr	r3, [pc, #544]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039dc:	4b85      	ldr	r3, [pc, #532]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039e8:	4b82      	ldr	r3, [pc, #520]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039f2:	4b80      	ldr	r3, [pc, #512]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	08db      	lsrs	r3, r3, #3
 80039f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80e1 	beq.w	8003bd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	f000 8083 	beq.w	8003b24 <HAL_RCC_GetSysClockFreq+0x204>
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	f200 80a1 	bhi.w	8003b68 <HAL_RCC_GetSysClockFreq+0x248>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x114>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d056      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a32:	e099      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a34:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02d      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a40:	4b6c      	ldr	r3, [pc, #432]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	4a6b      	ldr	r2, [pc, #428]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6a:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003a9a:	e087      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aae:	4b51      	ldr	r3, [pc, #324]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ac2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ada:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ade:	e065      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af2:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b22:	e043      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b36:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b66:	e021      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003baa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	0a5b      	lsrs	r3, r3, #9
 8003bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	ee07 3a90 	vmov	s15, r3
 8003bc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd0:	ee17 3a90 	vmov	r3, s15
 8003bd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003bd6:	e005      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
      break;
 8003bdc:	e002      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003be0:	61bb      	str	r3, [r7, #24]
      break;
 8003be2:	bf00      	nop
  }

  return sysclockfreq;
 8003be4:	69bb      	ldr	r3, [r7, #24]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	58024400 	.word	0x58024400
 8003bf8:	03d09000 	.word	0x03d09000
 8003bfc:	003d0900 	.word	0x003d0900
 8003c00:	017d7840 	.word	0x017d7840
 8003c04:	46000000 	.word	0x46000000
 8003c08:	4c742400 	.word	0x4c742400
 8003c0c:	4a742400 	.word	0x4a742400
 8003c10:	4bbebc20 	.word	0x4bbebc20

08003c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c1a:	f7ff fe81 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	490f      	ldr	r1, [pc, #60]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c2c:	5ccb      	ldrb	r3, [r1, r3]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	fa22 f303 	lsr.w	r3, r2, r3
 8003c36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4e:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <HAL_RCC_GetHCLKFreq+0x58>)
 8003c50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c52:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <HAL_RCC_GetHCLKFreq+0x58>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	58024400 	.word	0x58024400
 8003c68:	0800d92c 	.word	0x0800d92c
 8003c6c:	24000004 	.word	0x24000004
 8003c70:	24000000 	.word	0x24000000

08003c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c78:	f7ff ffcc 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4904      	ldr	r1, [pc, #16]	; (8003c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	0800d92c 	.word	0x0800d92c

08003ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ca4:	f7ff ffb6 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	4904      	ldr	r1, [pc, #16]	; (8003cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	58024400 	.word	0x58024400
 8003cc8:	0800d92c 	.word	0x0800d92c

08003ccc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	223f      	movs	r2, #63	; 0x3f
 8003cda:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_RCC_GetClockConfig+0x7c>)
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f003 0207 	and.w	r2, r3, #7
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003ce8:	4b17      	ldr	r3, [pc, #92]	; (8003d48 <HAL_RCC_GetClockConfig+0x7c>)
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003cf4:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <HAL_RCC_GetClockConfig+0x7c>)
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	f003 020f 	and.w	r2, r3, #15
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003d00:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <HAL_RCC_GetClockConfig+0x7c>)
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_RCC_GetClockConfig+0x7c>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_RCC_GetClockConfig+0x7c>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_RCC_GetClockConfig+0x7c>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_RCC_GetClockConfig+0x80>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	601a      	str	r2, [r3, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	58024400 	.word	0x58024400
 8003d4c:	52002000 	.word	0x52002000

08003d50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d54:	b0ca      	sub	sp, #296	; 0x128
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d62:	2300      	movs	r3, #0
 8003d64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003d74:	2500      	movs	r5, #0
 8003d76:	ea54 0305 	orrs.w	r3, r4, r5
 8003d7a:	d049      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d86:	d02f      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d8c:	d828      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d92:	d01a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d98:	d822      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da2:	d007      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003da4:	e01c      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da6:	4bb8      	ldr	r3, [pc, #736]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	4ab7      	ldr	r2, [pc, #732]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003db2:	e01a      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db8:	3308      	adds	r3, #8
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 fc8f 	bl	80056e0 <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dc8:	e00f      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dce:	3328      	adds	r3, #40	; 0x28
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 fd36 	bl	8005844 <RCCEx_PLL3_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dde:	e004      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003de6:	e000      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003df2:	4ba5      	ldr	r3, [pc, #660]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e00:	4aa1      	ldr	r2, [pc, #644]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6513      	str	r3, [r2, #80]	; 0x50
 8003e06:	e003      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003e1c:	f04f 0900 	mov.w	r9, #0
 8003e20:	ea58 0309 	orrs.w	r3, r8, r9
 8003e24:	d047      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d82a      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e30:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e4d 	.word	0x08003e4d
 8003e3c:	08003e5b 	.word	0x08003e5b
 8003e40:	08003e71 	.word	0x08003e71
 8003e44:	08003e8f 	.word	0x08003e8f
 8003e48:	08003e8f 	.word	0x08003e8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e4c:	4b8e      	ldr	r3, [pc, #568]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	4a8d      	ldr	r2, [pc, #564]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e58:	e01a      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5e:	3308      	adds	r3, #8
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 fc3c 	bl	80056e0 <RCCEx_PLL2_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e6e:	e00f      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e74:	3328      	adds	r3, #40	; 0x28
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 fce3 	bl	8005844 <RCCEx_PLL3_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e84:	e004      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e8c:	e000      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e98:	4b7b      	ldr	r3, [pc, #492]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9c:	f023 0107 	bic.w	r1, r3, #7
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	4a78      	ldr	r2, [pc, #480]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6513      	str	r3, [r2, #80]	; 0x50
 8003eac:	e003      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003ec2:	f04f 0b00 	mov.w	fp, #0
 8003ec6:	ea5a 030b 	orrs.w	r3, sl, fp
 8003eca:	d04c      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed6:	d030      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003edc:	d829      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ede:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee0:	d02d      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee4:	d825      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d018      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d821      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d007      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003ef6:	e01c      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef8:	4b63      	ldr	r3, [pc, #396]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	4a62      	ldr	r2, [pc, #392]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f04:	e01c      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 fbe6 	bl	80056e0 <RCCEx_PLL2_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f1a:	e011      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f20:	3328      	adds	r3, #40	; 0x28
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 fc8d 	bl	8005844 <RCCEx_PLL3_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f30:	e006      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f38:	e002      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f48:	4b4f      	ldr	r3, [pc, #316]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	4a4c      	ldr	r2, [pc, #304]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	6513      	str	r3, [r2, #80]	; 0x50
 8003f5c:	e003      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003f72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003f7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003f80:	460b      	mov	r3, r1
 8003f82:	4313      	orrs	r3, r2
 8003f84:	d053      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f92:	d035      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003f94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f98:	d82e      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f9e:	d031      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003fa0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003fa4:	d828      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003faa:	d01a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb0:	d822      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fba:	d007      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003fbc:	e01c      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fbe:	4b32      	ldr	r3, [pc, #200]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	4a31      	ldr	r2, [pc, #196]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fca:	e01c      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 fb83 	bl	80056e0 <RCCEx_PLL2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e011      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	3328      	adds	r3, #40	; 0x28
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 fc2a 	bl	8005844 <RCCEx_PLL3_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ff6:	e006      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ffe:	e002      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004000:	bf00      	nop
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800400e:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800401a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800401e:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004020:	430b      	orrs	r3, r1
 8004022:	6593      	str	r3, [r2, #88]	; 0x58
 8004024:	e003      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800402a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800403a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800403e:	2300      	movs	r3, #0
 8004040:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004044:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004048:	460b      	mov	r3, r1
 800404a:	4313      	orrs	r3, r2
 800404c:	d056      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004056:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800405a:	d038      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800405c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004060:	d831      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004062:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004066:	d034      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004068:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800406c:	d82b      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800406e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004072:	d01d      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004078:	d825      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d006      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800407e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004084:	e01f      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004086:	bf00      	nop
 8004088:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800408c:	4ba2      	ldr	r3, [pc, #648]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4aa1      	ldr	r2, [pc, #644]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004096:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004098:	e01c      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409e:	3308      	adds	r3, #8
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 fb1c 	bl	80056e0 <RCCEx_PLL2_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80040ae:	e011      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b4:	3328      	adds	r3, #40	; 0x28
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 fbc3 	bl	8005844 <RCCEx_PLL3_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040c4:	e006      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040cc:	e002      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040dc:	4b8e      	ldr	r3, [pc, #568]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040ec:	4a8a      	ldr	r2, [pc, #552]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6593      	str	r3, [r2, #88]	; 0x58
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004112:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d03a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004122:	2b30      	cmp	r3, #48	; 0x30
 8004124:	d01f      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004126:	2b30      	cmp	r3, #48	; 0x30
 8004128:	d819      	bhi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800412a:	2b20      	cmp	r3, #32
 800412c:	d00c      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800412e:	2b20      	cmp	r3, #32
 8004130:	d815      	bhi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d019      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004136:	2b10      	cmp	r3, #16
 8004138:	d111      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413a:	4b77      	ldr	r3, [pc, #476]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	4a76      	ldr	r2, [pc, #472]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004144:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004146:	e011      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414c:	3308      	adds	r3, #8
 800414e:	2102      	movs	r1, #2
 8004150:	4618      	mov	r0, r3
 8004152:	f001 fac5 	bl	80056e0 <RCCEx_PLL2_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004164:	e002      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800416a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004174:	4b68      	ldr	r3, [pc, #416]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004178:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004182:	4a65      	ldr	r2, [pc, #404]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004184:	430b      	orrs	r3, r1
 8004186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004188:	e003      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800418e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800419e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80041a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4313      	orrs	r3, r2
 80041b0:	d051      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041bc:	d035      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80041be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c2:	d82e      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041c8:	d031      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80041ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ce:	d828      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d4:	d01a      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80041d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041da:	d822      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80041e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e4:	d007      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80041e6:	e01c      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e8:	4b4b      	ldr	r3, [pc, #300]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	4a4a      	ldr	r2, [pc, #296]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041f4:	e01c      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	3308      	adds	r3, #8
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 fa6e 	bl	80056e0 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800420a:	e011      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004210:	3328      	adds	r3, #40	; 0x28
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fb15 	bl	8005844 <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004220:	e006      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800422e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004238:	4b37      	ldr	r3, [pc, #220]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004246:	4a34      	ldr	r2, [pc, #208]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004248:	430b      	orrs	r3, r1
 800424a:	6513      	str	r3, [r2, #80]	; 0x50
 800424c:	e003      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004252:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800426c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004270:	460b      	mov	r3, r1
 8004272:	4313      	orrs	r3, r2
 8004274:	d056      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004280:	d033      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004282:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004286:	d82c      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004288:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800428c:	d02f      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800428e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004292:	d826      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004294:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004298:	d02b      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800429a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800429e:	d820      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042a4:	d012      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80042a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042aa:	d81a      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d022      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b4:	d115      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ba:	3308      	adds	r3, #8
 80042bc:	2101      	movs	r1, #1
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 fa0e 	bl	80056e0 <RCCEx_PLL2_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042ca:	e015      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d0:	3328      	adds	r3, #40	; 0x28
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 fab5 	bl	8005844 <RCCEx_PLL3_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042e0:	e00a      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042e8:	e006      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042ea:	bf00      	nop
 80042ec:	e004      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10d      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800430e:	4a02      	ldr	r2, [pc, #8]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004310:	430b      	orrs	r3, r1
 8004312:	6513      	str	r3, [r2, #80]	; 0x50
 8004314:	e006      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004316:	bf00      	nop
 8004318:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004320:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800433a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800433e:	460b      	mov	r3, r1
 8004340:	4313      	orrs	r3, r2
 8004342:	d055      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800434c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004350:	d033      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004356:	d82c      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d02f      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004362:	d826      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004364:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004368:	d02b      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800436a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800436e:	d820      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004374:	d012      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800437a:	d81a      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d022      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004384:	d115      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438a:	3308      	adds	r3, #8
 800438c:	2101      	movs	r1, #1
 800438e:	4618      	mov	r0, r3
 8004390:	f001 f9a6 	bl	80056e0 <RCCEx_PLL2_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800439a:	e015      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a0:	3328      	adds	r3, #40	; 0x28
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 fa4d 	bl	8005844 <RCCEx_PLL3_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043b0:	e00a      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043b8:	e006      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043ba:	bf00      	nop
 80043bc:	e004      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043be:	bf00      	nop
 80043c0:	e002      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043d0:	4ba3      	ldr	r3, [pc, #652]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043e0:	4a9f      	ldr	r2, [pc, #636]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043e2:	430b      	orrs	r3, r1
 80043e4:	6593      	str	r3, [r2, #88]	; 0x58
 80043e6:	e003      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80043fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004400:	2300      	movs	r3, #0
 8004402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800440a:	460b      	mov	r3, r1
 800440c:	4313      	orrs	r3, r2
 800440e:	d037      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800441a:	d00e      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800441c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004420:	d816      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d018      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800442a:	d111      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442c:	4b8c      	ldr	r3, [pc, #560]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4a8b      	ldr	r2, [pc, #556]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443e:	3308      	adds	r3, #8
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f94c 	bl	80056e0 <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800444e:	e004      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004462:	4b7f      	ldr	r3, [pc, #508]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004466:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	4a7b      	ldr	r2, [pc, #492]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6513      	str	r3, [r2, #80]	; 0x50
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800447c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800448c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004496:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d039      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d81c      	bhi.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044ed 	.word	0x080044ed
 80044b4:	080044c1 	.word	0x080044c1
 80044b8:	080044cf 	.word	0x080044cf
 80044bc:	080044ed 	.word	0x080044ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c0:	4b67      	ldr	r3, [pc, #412]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4a66      	ldr	r2, [pc, #408]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044cc:	e00f      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d2:	3308      	adds	r3, #8
 80044d4:	2102      	movs	r1, #2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f001 f902 	bl	80056e0 <RCCEx_PLL2_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044e2:	e004      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044ea:	e000      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80044ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044f6:	4b5a      	ldr	r3, [pc, #360]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fa:	f023 0103 	bic.w	r1, r3, #3
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004504:	4a56      	ldr	r2, [pc, #344]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004506:	430b      	orrs	r3, r1
 8004508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800450a:	e003      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004510:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800452a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	f000 809f 	beq.w	8004674 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004536:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a4a      	ldr	r2, [pc, #296]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004540:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004542:	f7fd fa63 	bl	8001a0c <HAL_GetTick>
 8004546:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454a:	e00b      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454c:	f7fd fa5e 	bl	8001a0c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b64      	cmp	r3, #100	; 0x64
 800455a:	d903      	bls.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004562:	e005      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004564:	4b3f      	ldr	r3, [pc, #252]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ed      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004574:	2b00      	cmp	r3, #0
 8004576:	d179      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004578:	4b39      	ldr	r3, [pc, #228]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800457a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004580:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004584:	4053      	eors	r3, r2
 8004586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458a:	2b00      	cmp	r3, #0
 800458c:	d015      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800458e:	4b34      	ldr	r3, [pc, #208]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004596:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4a30      	ldr	r2, [pc, #192]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045a6:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a2d      	ldr	r2, [pc, #180]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045b2:	4a2b      	ldr	r2, [pc, #172]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c6:	d118      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fd fa20 	bl	8001a0c <HAL_GetTick>
 80045cc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045d0:	e00d      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fd fa1b 	bl	8001a0c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045dc:	1ad2      	subs	r2, r2, r3
 80045de:	f241 3388 	movw	r3, #5000	; 0x1388
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d903      	bls.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80045ec:	e005      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045ee:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0eb      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d129      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004606:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800460a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004612:	d10e      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004624:	091a      	lsrs	r2, r3, #4
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004628:	4013      	ands	r3, r2
 800462a:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800462c:	430b      	orrs	r3, r1
 800462e:	6113      	str	r3, [r2, #16]
 8004630:	e005      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004638:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800463c:	6113      	str	r3, [r2, #16]
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004640:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004646:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800464a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464e:	4a04      	ldr	r2, [pc, #16]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004650:	430b      	orrs	r3, r1
 8004652:	6713      	str	r3, [r2, #112]	; 0x70
 8004654:	e00e      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800465a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800465e:	e009      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004660:	58024400 	.word	0x58024400
 8004664:	58024800 	.word	0x58024800
 8004668:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f002 0301 	and.w	r3, r2, #1
 8004680:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004684:	2300      	movs	r3, #0
 8004686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800468a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800468e:	460b      	mov	r3, r1
 8004690:	4313      	orrs	r3, r2
 8004692:	f000 8089 	beq.w	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800469c:	2b28      	cmp	r3, #40	; 0x28
 800469e:	d86b      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	08004781 	.word	0x08004781
 80046ac:	08004779 	.word	0x08004779
 80046b0:	08004779 	.word	0x08004779
 80046b4:	08004779 	.word	0x08004779
 80046b8:	08004779 	.word	0x08004779
 80046bc:	08004779 	.word	0x08004779
 80046c0:	08004779 	.word	0x08004779
 80046c4:	08004779 	.word	0x08004779
 80046c8:	0800474d 	.word	0x0800474d
 80046cc:	08004779 	.word	0x08004779
 80046d0:	08004779 	.word	0x08004779
 80046d4:	08004779 	.word	0x08004779
 80046d8:	08004779 	.word	0x08004779
 80046dc:	08004779 	.word	0x08004779
 80046e0:	08004779 	.word	0x08004779
 80046e4:	08004779 	.word	0x08004779
 80046e8:	08004763 	.word	0x08004763
 80046ec:	08004779 	.word	0x08004779
 80046f0:	08004779 	.word	0x08004779
 80046f4:	08004779 	.word	0x08004779
 80046f8:	08004779 	.word	0x08004779
 80046fc:	08004779 	.word	0x08004779
 8004700:	08004779 	.word	0x08004779
 8004704:	08004779 	.word	0x08004779
 8004708:	08004781 	.word	0x08004781
 800470c:	08004779 	.word	0x08004779
 8004710:	08004779 	.word	0x08004779
 8004714:	08004779 	.word	0x08004779
 8004718:	08004779 	.word	0x08004779
 800471c:	08004779 	.word	0x08004779
 8004720:	08004779 	.word	0x08004779
 8004724:	08004779 	.word	0x08004779
 8004728:	08004781 	.word	0x08004781
 800472c:	08004779 	.word	0x08004779
 8004730:	08004779 	.word	0x08004779
 8004734:	08004779 	.word	0x08004779
 8004738:	08004779 	.word	0x08004779
 800473c:	08004779 	.word	0x08004779
 8004740:	08004779 	.word	0x08004779
 8004744:	08004779 	.word	0x08004779
 8004748:	08004781 	.word	0x08004781
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004750:	3308      	adds	r3, #8
 8004752:	2101      	movs	r1, #1
 8004754:	4618      	mov	r0, r3
 8004756:	f000 ffc3 	bl	80056e0 <RCCEx_PLL2_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004760:	e00f      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004766:	3328      	adds	r3, #40	; 0x28
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f001 f86a 	bl	8005844 <RCCEx_PLL3_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004776:	e004      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800478a:	4bbf      	ldr	r3, [pc, #764]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004798:	4abb      	ldr	r2, [pc, #748]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800479a:	430b      	orrs	r3, r1
 800479c:	6553      	str	r3, [r2, #84]	; 0x54
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f002 0302 	and.w	r3, r2, #2
 80047b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d041      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	d824      	bhi.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80047d2:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	08004825 	.word	0x08004825
 80047dc:	080047f1 	.word	0x080047f1
 80047e0:	08004807 	.word	0x08004807
 80047e4:	08004825 	.word	0x08004825
 80047e8:	08004825 	.word	0x08004825
 80047ec:	08004825 	.word	0x08004825
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f4:	3308      	adds	r3, #8
 80047f6:	2101      	movs	r1, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 ff71 	bl	80056e0 <RCCEx_PLL2_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004804:	e00f      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480a:	3328      	adds	r3, #40	; 0x28
 800480c:	2101      	movs	r1, #1
 800480e:	4618      	mov	r0, r3
 8004810:	f001 f818 	bl	8005844 <RCCEx_PLL3_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800481a:	e004      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800482e:	4b96      	ldr	r3, [pc, #600]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	f023 0107 	bic.w	r1, r3, #7
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800483c:	4a92      	ldr	r2, [pc, #584]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800483e:	430b      	orrs	r3, r1
 8004840:	6553      	str	r3, [r2, #84]	; 0x54
 8004842:	e003      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004848:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f002 0304 	and.w	r3, r2, #4
 8004858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800485c:	2300      	movs	r3, #0
 800485e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004862:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004866:	460b      	mov	r3, r1
 8004868:	4313      	orrs	r3, r2
 800486a:	d044      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004874:	2b05      	cmp	r3, #5
 8004876:	d825      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004878:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048cd 	.word	0x080048cd
 8004884:	08004899 	.word	0x08004899
 8004888:	080048af 	.word	0x080048af
 800488c:	080048cd 	.word	0x080048cd
 8004890:	080048cd 	.word	0x080048cd
 8004894:	080048cd 	.word	0x080048cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489c:	3308      	adds	r3, #8
 800489e:	2101      	movs	r1, #1
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 ff1d 	bl	80056e0 <RCCEx_PLL2_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048ac:	e00f      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b2:	3328      	adds	r3, #40	; 0x28
 80048b4:	2101      	movs	r1, #1
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 ffc4 	bl	8005844 <RCCEx_PLL3_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048c2:	e004      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048ca:	e000      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80048cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d6:	4b6c      	ldr	r3, [pc, #432]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	f023 0107 	bic.w	r1, r3, #7
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e6:	4a68      	ldr	r2, [pc, #416]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6593      	str	r3, [r2, #88]	; 0x58
 80048ec:	e003      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f002 0320 	and.w	r3, r2, #32
 8004902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004906:	2300      	movs	r3, #0
 8004908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800490c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004910:	460b      	mov	r3, r1
 8004912:	4313      	orrs	r3, r2
 8004914:	d055      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004922:	d033      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004928:	d82c      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492e:	d02f      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d826      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004936:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800493a:	d02b      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800493c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004940:	d820      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004946:	d012      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800494c:	d81a      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d022      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004956:	d115      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495c:	3308      	adds	r3, #8
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f000 febd 	bl	80056e0 <RCCEx_PLL2_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800496c:	e015      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004972:	3328      	adds	r3, #40	; 0x28
 8004974:	2102      	movs	r1, #2
 8004976:	4618      	mov	r0, r3
 8004978:	f000 ff64 	bl	8005844 <RCCEx_PLL3_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004982:	e00a      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800498a:	e006      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800498c:	bf00      	nop
 800498e:	e004      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004990:	bf00      	nop
 8004992:	e002      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004994:	bf00      	nop
 8004996:	e000      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10b      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049a2:	4b39      	ldr	r3, [pc, #228]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	4a35      	ldr	r2, [pc, #212]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6553      	str	r3, [r2, #84]	; 0x54
 80049b8:	e003      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80049ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049d2:	2300      	movs	r3, #0
 80049d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80049dc:	460b      	mov	r3, r1
 80049de:	4313      	orrs	r3, r2
 80049e0:	d058      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049ee:	d033      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80049f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049f4:	d82c      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fa:	d02f      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a00:	d826      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a06:	d02b      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004a08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a0c:	d820      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a12:	d012      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a18:	d81a      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d022      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a22:	d115      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a28:	3308      	adds	r3, #8
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fe57 	bl	80056e0 <RCCEx_PLL2_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a38:	e015      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	3328      	adds	r3, #40	; 0x28
 8004a40:	2102      	movs	r1, #2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fefe 	bl	8005844 <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a56:	e006      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a58:	bf00      	nop
 8004a5a:	e004      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a5c:	bf00      	nop
 8004a5e:	e002      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a60:	bf00      	nop
 8004a62:	e000      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10e      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a7e:	4a02      	ldr	r2, [pc, #8]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6593      	str	r3, [r2, #88]	; 0x58
 8004a84:	e006      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a86:	bf00      	nop
 8004a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aaa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	d055      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004abc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ac0:	d033      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004ac2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ac6:	d82c      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004acc:	d02f      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad2:	d826      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ad4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ad8:	d02b      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004ada:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ade:	d820      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae4:	d012      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aea:	d81a      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d022      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af4:	d115      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afa:	3308      	adds	r3, #8
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fdee 	bl	80056e0 <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b0a:	e015      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b10:	3328      	adds	r3, #40	; 0x28
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fe95 	bl	8005844 <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b20:	e00a      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b28:	e006      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e004      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10b      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b40:	4ba1      	ldr	r3, [pc, #644]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b50:	4a9d      	ldr	r2, [pc, #628]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6593      	str	r3, [r2, #88]	; 0x58
 8004b56:	e003      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f002 0308 	and.w	r3, r2, #8
 8004b6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b70:	2300      	movs	r3, #0
 8004b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	d01e      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b92:	3328      	adds	r3, #40	; 0x28
 8004b94:	2102      	movs	r1, #2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fe54 	bl	8005844 <RCCEx_PLL3_Config>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ba8:	4b87      	ldr	r3, [pc, #540]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb8:	4a83      	ldr	r2, [pc, #524]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f002 0310 	and.w	r3, r2, #16
 8004bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bd4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	d01e      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bea:	d10c      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf0:	3328      	adds	r3, #40	; 0x28
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fe25 	bl	8005844 <RCCEx_PLL3_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c06:	4b70      	ldr	r3, [pc, #448]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c16:	4a6c      	ldr	r2, [pc, #432]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004c36:	460b      	mov	r3, r1
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	d03e      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c48:	d022      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c4e:	d81b      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c58:	d00b      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004c5a:	e015      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c60:	3308      	adds	r3, #8
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fd3b 	bl	80056e0 <RCCEx_PLL2_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c70:	e00f      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c76:	3328      	adds	r3, #40	; 0x28
 8004c78:	2102      	movs	r1, #2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fde2 	bl	8005844 <RCCEx_PLL3_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c86:	e004      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c8e:	e000      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c9a:	4b4b      	ldr	r3, [pc, #300]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004caa:	4a47      	ldr	r2, [pc, #284]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb0:	e003      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004cc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cc8:	2300      	movs	r3, #0
 8004cca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ccc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	d03b      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ce2:	d01f      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004ce4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ce8:	d818      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cee:	d003      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cf4:	d007      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004cf6:	e011      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf8:	4b33      	ldr	r3, [pc, #204]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	4a32      	ldr	r2, [pc, #200]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d04:	e00f      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0a:	3328      	adds	r3, #40	; 0x28
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fd98 	bl	8005844 <RCCEx_PLL3_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d1a:	e004      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d22:	e000      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d2e:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	4a22      	ldr	r2, [pc, #136]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6553      	str	r3, [r2, #84]	; 0x54
 8004d44:	e003      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004d5a:	673b      	str	r3, [r7, #112]	; 0x70
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	677b      	str	r3, [r7, #116]	; 0x74
 8004d60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004d64:	460b      	mov	r3, r1
 8004d66:	4313      	orrs	r3, r2
 8004d68:	d034      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d78:	d007      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004d7a:	e011      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7c:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d88:	e00e      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8e:	3308      	adds	r3, #8
 8004d90:	2102      	movs	r1, #2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fca4 	bl	80056e0 <RCCEx_PLL2_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d9e:	e003      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10d      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbe:	4a02      	ldr	r2, [pc, #8]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dc4:	e006      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004dc6:	bf00      	nop
 8004dc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004de0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004de2:	2300      	movs	r3, #0
 8004de4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004de6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004dea:	460b      	mov	r3, r1
 8004dec:	4313      	orrs	r3, r2
 8004dee:	d00c      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df4:	3328      	adds	r3, #40	; 0x28
 8004df6:	2102      	movs	r1, #2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fd23 	bl	8005844 <RCCEx_PLL3_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004e16:	663b      	str	r3, [r7, #96]	; 0x60
 8004e18:	2300      	movs	r3, #0
 8004e1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004e1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004e20:	460b      	mov	r3, r1
 8004e22:	4313      	orrs	r3, r2
 8004e24:	d038      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e32:	d018      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e38:	d811      	bhi.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3e:	d014      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d80b      	bhi.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d011      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e50:	4bc3      	ldr	r3, [pc, #780]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4ac2      	ldr	r2, [pc, #776]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e5c:	e008      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e64:	e004      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e66:	bf00      	nop
 8004e68:	e002      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10b      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e78:	4bb9      	ldr	r3, [pc, #740]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e88:	4ab5      	ldr	r2, [pc, #724]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	6553      	str	r3, [r2, #84]	; 0x54
 8004e8e:	e003      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004ea4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eaa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004eb4:	4baa      	ldr	r3, [pc, #680]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec2:	4aa7      	ldr	r2, [pc, #668]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004ed4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	657b      	str	r3, [r7, #84]	; 0x54
 8004eda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	d00a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ee4:	4b9e      	ldr	r3, [pc, #632]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ef4:	4a9a      	ldr	r2, [pc, #616]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f08:	2300      	movs	r3, #0
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004f10:	460b      	mov	r3, r1
 8004f12:	4313      	orrs	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f16:	4b92      	ldr	r3, [pc, #584]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f24:	4a8e      	ldr	r2, [pc, #568]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004f36:	643b      	str	r3, [r7, #64]	; 0x40
 8004f38:	2300      	movs	r3, #0
 8004f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004f40:	460b      	mov	r3, r1
 8004f42:	4313      	orrs	r3, r2
 8004f44:	d00e      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f46:	4b86      	ldr	r3, [pc, #536]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	4a85      	ldr	r2, [pc, #532]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f50:	6113      	str	r3, [r2, #16]
 8004f52:	4b83      	ldr	r3, [pc, #524]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f54:	6919      	ldr	r1, [r3, #16]
 8004f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f5e:	4a80      	ldr	r2, [pc, #512]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f72:	2300      	movs	r3, #0
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	d009      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f80:	4b77      	ldr	r3, [pc, #476]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f84:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	4a74      	ldr	r2, [pc, #464]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f90:	430b      	orrs	r3, r1
 8004f92:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004faa:	460b      	mov	r3, r1
 8004fac:	4313      	orrs	r3, r2
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fb0:	4b6b      	ldr	r3, [pc, #428]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc0:	4a67      	ldr	r2, [pc, #412]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	2100      	movs	r1, #0
 8004fd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	d011      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fb78 	bl	80056e0 <RCCEx_PLL2_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	2100      	movs	r1, #0
 8005010:	6239      	str	r1, [r7, #32]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
 8005018:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800501c:	460b      	mov	r3, r1
 800501e:	4313      	orrs	r3, r2
 8005020:	d011      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005026:	3308      	adds	r3, #8
 8005028:	2101      	movs	r1, #1
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fb58 	bl	80056e0 <RCCEx_PLL2_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005042:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	2100      	movs	r1, #0
 8005050:	61b9      	str	r1, [r7, #24]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800505c:	460b      	mov	r3, r1
 800505e:	4313      	orrs	r3, r2
 8005060:	d011      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005066:	3308      	adds	r3, #8
 8005068:	2102      	movs	r1, #2
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fb38 	bl	80056e0 <RCCEx_PLL2_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005082:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	2100      	movs	r1, #0
 8005090:	6139      	str	r1, [r7, #16]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800509c:	460b      	mov	r3, r1
 800509e:	4313      	orrs	r3, r2
 80050a0:	d011      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a6:	3328      	adds	r3, #40	; 0x28
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fbca 	bl	8005844 <RCCEx_PLL3_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80050b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	2100      	movs	r1, #0
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050dc:	460b      	mov	r3, r1
 80050de:	4313      	orrs	r3, r2
 80050e0:	d011      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e6:	3328      	adds	r3, #40	; 0x28
 80050e8:	2101      	movs	r1, #1
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fbaa 	bl	8005844 <RCCEx_PLL3_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80050f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	2100      	movs	r1, #0
 8005110:	6039      	str	r1, [r7, #0]
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	e9d7 1200 	ldrd	r1, r2, [r7]
 800511c:	460b      	mov	r3, r1
 800511e:	4313      	orrs	r3, r2
 8005120:	d011      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005126:	3328      	adds	r3, #40	; 0x28
 8005128:	2102      	movs	r1, #2
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fb8a 	bl	8005844 <RCCEx_PLL3_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005142:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005146:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e000      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
}
 8005154:	4618      	mov	r0, r3
 8005156:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800515a:	46bd      	mov	sp, r7
 800515c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005160:	58024400 	.word	0x58024400

08005164 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005168:	f7fe fd54 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 800516c:	4602      	mov	r2, r0
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	091b      	lsrs	r3, r3, #4
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	4904      	ldr	r1, [pc, #16]	; (800518c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800517a:	5ccb      	ldrb	r3, [r1, r3]
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005184:	4618      	mov	r0, r3
 8005186:	bd80      	pop	{r7, pc}
 8005188:	58024400 	.word	0x58024400
 800518c:	0800d92c 	.word	0x0800d92c

08005190 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	; 0x24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005198:	4ba1      	ldr	r3, [pc, #644]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80051a2:	4b9f      	ldr	r3, [pc, #636]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	0b1b      	lsrs	r3, r3, #12
 80051a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051ae:	4b9c      	ldr	r3, [pc, #624]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051ba:	4b99      	ldr	r3, [pc, #612]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	08db      	lsrs	r3, r3, #3
 80051c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8111 	beq.w	8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	f000 8083 	beq.w	80052ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	f200 80a1 	bhi.w	8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d056      	beq.n	80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051fa:	e099      	b.n	8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051fc:	4b88      	ldr	r3, [pc, #544]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d02d      	beq.n	8005264 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005208:	4b85      	ldr	r3, [pc, #532]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	08db      	lsrs	r3, r3, #3
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	4a84      	ldr	r2, [pc, #528]	; (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
 8005218:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005232:	4b7b      	ldr	r3, [pc, #492]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005242:	ed97 6a03 	vldr	s12, [r7, #12]
 8005246:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800524a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005262:	e087      	b.n	8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800542c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005276:	4b6a      	ldr	r3, [pc, #424]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005286:	ed97 6a03 	vldr	s12, [r7, #12]
 800528a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800528e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800529a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052a6:	e065      	b.n	8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ba:	4b59      	ldr	r3, [pc, #356]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ea:	e043      	b.n	8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fe:	4b48      	ldr	r3, [pc, #288]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005312:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800532e:	e021      	b.n	8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800533e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005342:	4b37      	ldr	r3, [pc, #220]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005352:	ed97 6a03 	vldr	s12, [r7, #12]
 8005356:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800535a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005372:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005374:	4b2a      	ldr	r3, [pc, #168]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	0a5b      	lsrs	r3, r3, #9
 800537a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800538a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800539a:	ee17 2a90 	vmov	r2, s15
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80053a2:	4b1f      	ldr	r3, [pc, #124]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	0c1b      	lsrs	r3, r3, #16
 80053a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80053c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c8:	ee17 2a90 	vmov	r2, s15
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80053d0:	4b13      	ldr	r3, [pc, #76]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	0e1b      	lsrs	r3, r3, #24
 80053d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f6:	ee17 2a90 	vmov	r2, s15
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053fe:	e008      	b.n	8005412 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
}
 8005412:	bf00      	nop
 8005414:	3724      	adds	r7, #36	; 0x24
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	58024400 	.word	0x58024400
 8005424:	03d09000 	.word	0x03d09000
 8005428:	46000000 	.word	0x46000000
 800542c:	4c742400 	.word	0x4c742400
 8005430:	4a742400 	.word	0x4a742400
 8005434:	4bbebc20 	.word	0x4bbebc20

08005438 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005438:	b480      	push	{r7}
 800543a:	b089      	sub	sp, #36	; 0x24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005440:	4ba1      	ldr	r3, [pc, #644]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800544a:	4b9f      	ldr	r3, [pc, #636]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	0d1b      	lsrs	r3, r3, #20
 8005450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005454:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005456:	4b9c      	ldr	r3, [pc, #624]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005462:	4b99      	ldr	r3, [pc, #612]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	08db      	lsrs	r3, r3, #3
 8005468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8111 	beq.w	80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b02      	cmp	r3, #2
 800548a:	f000 8083 	beq.w	8005594 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b02      	cmp	r3, #2
 8005492:	f200 80a1 	bhi.w	80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d056      	beq.n	8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80054a2:	e099      	b.n	80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a4:	4b88      	ldr	r3, [pc, #544]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d02d      	beq.n	800550c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054b0:	4b85      	ldr	r3, [pc, #532]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	08db      	lsrs	r3, r3, #3
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	4a84      	ldr	r2, [pc, #528]	; (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
 80054c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	ee07 3a90 	vmov	s15, r3
 80054c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054da:	4b7b      	ldr	r3, [pc, #492]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005506:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800550a:	e087      	b.n	800561c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800551a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551e:	4b6a      	ldr	r3, [pc, #424]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005532:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800554e:	e065      	b.n	800561c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800555e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005562:	4b59      	ldr	r3, [pc, #356]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005572:	ed97 6a03 	vldr	s12, [r7, #12]
 8005576:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800557a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005592:	e043      	b.n	800561c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80055a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a6:	4b48      	ldr	r3, [pc, #288]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055d6:	e021      	b.n	800561c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ea:	4b37      	ldr	r3, [pc, #220]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800561a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800561c:	4b2a      	ldr	r3, [pc, #168]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	0a5b      	lsrs	r3, r3, #9
 8005622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005636:	edd7 6a07 	vldr	s13, [r7, #28]
 800563a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005642:	ee17 2a90 	vmov	r2, s15
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800564a:	4b1f      	ldr	r3, [pc, #124]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	0c1b      	lsrs	r3, r3, #16
 8005650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005664:	edd7 6a07 	vldr	s13, [r7, #28]
 8005668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800566c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005670:	ee17 2a90 	vmov	r2, s15
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	0e1b      	lsrs	r3, r3, #24
 800567e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800568e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005692:	edd7 6a07 	vldr	s13, [r7, #28]
 8005696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800569a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800569e:	ee17 2a90 	vmov	r2, s15
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80056a6:	e008      	b.n	80056ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	609a      	str	r2, [r3, #8]
}
 80056ba:	bf00      	nop
 80056bc:	3724      	adds	r7, #36	; 0x24
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
 80056cc:	03d09000 	.word	0x03d09000
 80056d0:	46000000 	.word	0x46000000
 80056d4:	4c742400 	.word	0x4c742400
 80056d8:	4a742400 	.word	0x4a742400
 80056dc:	4bbebc20 	.word	0x4bbebc20

080056e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056ee:	4b53      	ldr	r3, [pc, #332]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d101      	bne.n	80056fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e099      	b.n	8005832 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056fe:	4b4f      	ldr	r3, [pc, #316]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a4e      	ldr	r2, [pc, #312]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 8005704:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800570a:	f7fc f97f 	bl	8001a0c <HAL_GetTick>
 800570e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005710:	e008      	b.n	8005724 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005712:	f7fc f97b 	bl	8001a0c <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e086      	b.n	8005832 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005724:	4b45      	ldr	r3, [pc, #276]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f0      	bne.n	8005712 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005730:	4b42      	ldr	r3, [pc, #264]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	031b      	lsls	r3, r3, #12
 800573e:	493f      	ldr	r1, [pc, #252]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 8005740:	4313      	orrs	r3, r2
 8005742:	628b      	str	r3, [r1, #40]	; 0x28
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	3b01      	subs	r3, #1
 800574a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	3b01      	subs	r3, #1
 8005754:	025b      	lsls	r3, r3, #9
 8005756:	b29b      	uxth	r3, r3
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	3b01      	subs	r3, #1
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	3b01      	subs	r3, #1
 800576e:	061b      	lsls	r3, r3, #24
 8005770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005774:	4931      	ldr	r1, [pc, #196]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800577a:	4b30      	ldr	r3, [pc, #192]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	492d      	ldr	r1, [pc, #180]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 8005788:	4313      	orrs	r3, r2
 800578a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800578c:	4b2b      	ldr	r3, [pc, #172]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	f023 0220 	bic.w	r2, r3, #32
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	4928      	ldr	r1, [pc, #160]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 800579a:	4313      	orrs	r3, r2
 800579c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800579e:	4b27      	ldr	r3, [pc, #156]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	4a26      	ldr	r2, [pc, #152]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057a4:	f023 0310 	bic.w	r3, r3, #16
 80057a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057aa:	4b24      	ldr	r3, [pc, #144]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ae:	4b24      	ldr	r3, [pc, #144]	; (8005840 <RCCEx_PLL2_Config+0x160>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	69d2      	ldr	r2, [r2, #28]
 80057b6:	00d2      	lsls	r2, r2, #3
 80057b8:	4920      	ldr	r1, [pc, #128]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057be:	4b1f      	ldr	r3, [pc, #124]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	4a1e      	ldr	r2, [pc, #120]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057c4:	f043 0310 	orr.w	r3, r3, #16
 80057c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057d0:	4b1a      	ldr	r3, [pc, #104]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4a19      	ldr	r2, [pc, #100]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057dc:	e00f      	b.n	80057fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d106      	bne.n	80057f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057e4:	4b15      	ldr	r3, [pc, #84]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4a14      	ldr	r2, [pc, #80]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057f0:	e005      	b.n	80057fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057f2:	4b12      	ldr	r3, [pc, #72]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	4a11      	ldr	r2, [pc, #68]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 80057f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057fe:	4b0f      	ldr	r3, [pc, #60]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a0e      	ldr	r2, [pc, #56]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 8005804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580a:	f7fc f8ff 	bl	8001a0c <HAL_GetTick>
 800580e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005810:	e008      	b.n	8005824 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005812:	f7fc f8fb 	bl	8001a0c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e006      	b.n	8005832 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <RCCEx_PLL2_Config+0x15c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	58024400 	.word	0x58024400
 8005840:	ffff0007 	.word	0xffff0007

08005844 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005852:	4b53      	ldr	r3, [pc, #332]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b03      	cmp	r3, #3
 800585c:	d101      	bne.n	8005862 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e099      	b.n	8005996 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005862:	4b4f      	ldr	r3, [pc, #316]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a4e      	ldr	r2, [pc, #312]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586e:	f7fc f8cd 	bl	8001a0c <HAL_GetTick>
 8005872:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005874:	e008      	b.n	8005888 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005876:	f7fc f8c9 	bl	8001a0c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e086      	b.n	8005996 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005888:	4b45      	ldr	r3, [pc, #276]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f0      	bne.n	8005876 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005894:	4b42      	ldr	r3, [pc, #264]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	051b      	lsls	r3, r3, #20
 80058a2:	493f      	ldr	r1, [pc, #252]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	628b      	str	r3, [r1, #40]	; 0x28
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	025b      	lsls	r3, r3, #9
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	041b      	lsls	r3, r3, #16
 80058c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	061b      	lsls	r3, r3, #24
 80058d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058d8:	4931      	ldr	r1, [pc, #196]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058de:	4b30      	ldr	r3, [pc, #192]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	492d      	ldr	r1, [pc, #180]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058f0:	4b2b      	ldr	r3, [pc, #172]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	4928      	ldr	r1, [pc, #160]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005902:	4b27      	ldr	r3, [pc, #156]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800590e:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005912:	4b24      	ldr	r3, [pc, #144]	; (80059a4 <RCCEx_PLL3_Config+0x160>)
 8005914:	4013      	ands	r3, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	69d2      	ldr	r2, [r2, #28]
 800591a:	00d2      	lsls	r2, r2, #3
 800591c:	4920      	ldr	r1, [pc, #128]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 800591e:	4313      	orrs	r3, r2
 8005920:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005922:	4b1f      	ldr	r3, [pc, #124]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 800593a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800593e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005940:	e00f      	b.n	8005962 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d106      	bne.n	8005956 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a14      	ldr	r2, [pc, #80]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 800594e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005954:	e005      	b.n	8005962 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005956:	4b12      	ldr	r3, [pc, #72]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	4a11      	ldr	r2, [pc, #68]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 800595c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005962:	4b0f      	ldr	r3, [pc, #60]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a0e      	ldr	r2, [pc, #56]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 8005968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596e:	f7fc f84d 	bl	8001a0c <HAL_GetTick>
 8005972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005974:	e008      	b.n	8005988 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005976:	f7fc f849 	bl	8001a0c <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e006      	b.n	8005996 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <RCCEx_PLL3_Config+0x15c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0f0      	beq.n	8005976 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	58024400 	.word	0x58024400
 80059a4:	ffff0007 	.word	0xffff0007

080059a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e10f      	b.n	8005bda <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a87      	ldr	r2, [pc, #540]	; (8005be4 <HAL_SPI_Init+0x23c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00f      	beq.n	80059ea <HAL_SPI_Init+0x42>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a86      	ldr	r2, [pc, #536]	; (8005be8 <HAL_SPI_Init+0x240>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00a      	beq.n	80059ea <HAL_SPI_Init+0x42>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a84      	ldr	r2, [pc, #528]	; (8005bec <HAL_SPI_Init+0x244>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d005      	beq.n	80059ea <HAL_SPI_Init+0x42>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	2b0f      	cmp	r3, #15
 80059e4:	d901      	bls.n	80059ea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e0f7      	b.n	8005bda <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f900 	bl	8005bf0 <SPI_GetPacketSize>
 80059f0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a7b      	ldr	r2, [pc, #492]	; (8005be4 <HAL_SPI_Init+0x23c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00c      	beq.n	8005a16 <HAL_SPI_Init+0x6e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a79      	ldr	r2, [pc, #484]	; (8005be8 <HAL_SPI_Init+0x240>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d007      	beq.n	8005a16 <HAL_SPI_Init+0x6e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a78      	ldr	r2, [pc, #480]	; (8005bec <HAL_SPI_Init+0x244>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d002      	beq.n	8005a16 <HAL_SPI_Init+0x6e>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d811      	bhi.n	8005a3a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a1a:	4a72      	ldr	r2, [pc, #456]	; (8005be4 <HAL_SPI_Init+0x23c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d009      	beq.n	8005a34 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a70      	ldr	r2, [pc, #448]	; (8005be8 <HAL_SPI_Init+0x240>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_SPI_Init+0x8c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a6f      	ldr	r2, [pc, #444]	; (8005bec <HAL_SPI_Init+0x244>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d104      	bne.n	8005a3e <HAL_SPI_Init+0x96>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b10      	cmp	r3, #16
 8005a38:	d901      	bls.n	8005a3e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e0cd      	b.n	8005bda <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fb fb80 	bl	8001158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005a7a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a84:	d119      	bne.n	8005aba <HAL_SPI_Init+0x112>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a8e:	d103      	bne.n	8005a98 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10c      	bne.n	8005aba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005aa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aa8:	d107      	bne.n	8005aba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ab8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00f      	beq.n	8005ae6 <HAL_SPI_Init+0x13e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	2b06      	cmp	r3, #6
 8005acc:	d90b      	bls.n	8005ae6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	e007      	b.n	8005af6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005af4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	431a      	orrs	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b08:	ea42 0103 	orr.w	r1, r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b56:	ea42 0103 	orr.w	r1, r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d113      	bne.n	8005b96 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b80:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b94:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0201 	bic.w	r2, r2, #1
 8005ba4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	40013000 	.word	0x40013000
 8005be8:	40003800 	.word	0x40003800
 8005bec:	40003c00 	.word	0x40003c00

08005bf0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	3307      	adds	r3, #7
 8005c0e:	08db      	lsrs	r3, r3, #3
 8005c10:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	fb02 f303 	mul.w	r3, r2, r3
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e049      	b.n	8005ccc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fb faeb 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f000 fd99 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d001      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e054      	b.n	8005d96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a26      	ldr	r2, [pc, #152]	; (8005da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d022      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d16:	d01d      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a22      	ldr	r2, [pc, #136]	; (8005da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d018      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a21      	ldr	r2, [pc, #132]	; (8005dac <HAL_TIM_Base_Start_IT+0xd8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d013      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00e      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1e      	ldr	r2, [pc, #120]	; (8005db4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <HAL_TIM_Base_Start_IT+0xe8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d115      	bne.n	8005d80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <HAL_TIM_Base_Start_IT+0xec>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b06      	cmp	r3, #6
 8005d64:	d015      	beq.n	8005d92 <HAL_TIM_Base_Start_IT+0xbe>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6c:	d011      	beq.n	8005d92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7e:	e008      	b.n	8005d92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e000      	b.n	8005d94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40010000 	.word	0x40010000
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40000c00 	.word	0x40000c00
 8005db4:	40010400 	.word	0x40010400
 8005db8:	40001800 	.word	0x40001800
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	00010007 	.word	0x00010007

08005dc4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d109      	bne.n	8005dec <HAL_TIM_OC_Start_IT+0x28>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	bf14      	ite	ne
 8005de4:	2301      	movne	r3, #1
 8005de6:	2300      	moveq	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	e03c      	b.n	8005e66 <HAL_TIM_OC_Start_IT+0xa2>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d109      	bne.n	8005e06 <HAL_TIM_OC_Start_IT+0x42>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	bf14      	ite	ne
 8005dfe:	2301      	movne	r3, #1
 8005e00:	2300      	moveq	r3, #0
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	e02f      	b.n	8005e66 <HAL_TIM_OC_Start_IT+0xa2>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d109      	bne.n	8005e20 <HAL_TIM_OC_Start_IT+0x5c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	bf14      	ite	ne
 8005e18:	2301      	movne	r3, #1
 8005e1a:	2300      	moveq	r3, #0
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	e022      	b.n	8005e66 <HAL_TIM_OC_Start_IT+0xa2>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b0c      	cmp	r3, #12
 8005e24:	d109      	bne.n	8005e3a <HAL_TIM_OC_Start_IT+0x76>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	bf14      	ite	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	2300      	moveq	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	e015      	b.n	8005e66 <HAL_TIM_OC_Start_IT+0xa2>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b10      	cmp	r3, #16
 8005e3e:	d109      	bne.n	8005e54 <HAL_TIM_OC_Start_IT+0x90>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	bf14      	ite	ne
 8005e4c:	2301      	movne	r3, #1
 8005e4e:	2300      	moveq	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	e008      	b.n	8005e66 <HAL_TIM_OC_Start_IT+0xa2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	bf14      	ite	ne
 8005e60:	2301      	movne	r3, #1
 8005e62:	2300      	moveq	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0ec      	b.n	8006048 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_OC_Start_IT+0xba>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e7c:	e023      	b.n	8005ec6 <HAL_TIM_OC_Start_IT+0x102>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_OC_Start_IT+0xca>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e8c:	e01b      	b.n	8005ec6 <HAL_TIM_OC_Start_IT+0x102>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d104      	bne.n	8005e9e <HAL_TIM_OC_Start_IT+0xda>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e9c:	e013      	b.n	8005ec6 <HAL_TIM_OC_Start_IT+0x102>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b0c      	cmp	r3, #12
 8005ea2:	d104      	bne.n	8005eae <HAL_TIM_OC_Start_IT+0xea>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eac:	e00b      	b.n	8005ec6 <HAL_TIM_OC_Start_IT+0x102>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIM_OC_Start_IT+0xfa>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ebc:	e003      	b.n	8005ec6 <HAL_TIM_OC_Start_IT+0x102>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b0c      	cmp	r3, #12
 8005eca:	d841      	bhi.n	8005f50 <HAL_TIM_OC_Start_IT+0x18c>
 8005ecc:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <HAL_TIM_OC_Start_IT+0x110>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005f09 	.word	0x08005f09
 8005ed8:	08005f51 	.word	0x08005f51
 8005edc:	08005f51 	.word	0x08005f51
 8005ee0:	08005f51 	.word	0x08005f51
 8005ee4:	08005f1b 	.word	0x08005f1b
 8005ee8:	08005f51 	.word	0x08005f51
 8005eec:	08005f51 	.word	0x08005f51
 8005ef0:	08005f51 	.word	0x08005f51
 8005ef4:	08005f2d 	.word	0x08005f2d
 8005ef8:	08005f51 	.word	0x08005f51
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	08005f51 	.word	0x08005f51
 8005f04:	08005f3f 	.word	0x08005f3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0202 	orr.w	r2, r2, #2
 8005f16:	60da      	str	r2, [r3, #12]
      break;
 8005f18:	e01d      	b.n	8005f56 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0204 	orr.w	r2, r2, #4
 8005f28:	60da      	str	r2, [r3, #12]
      break;
 8005f2a:	e014      	b.n	8005f56 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0208 	orr.w	r2, r2, #8
 8005f3a:	60da      	str	r2, [r3, #12]
      break;
 8005f3c:	e00b      	b.n	8005f56 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0210 	orr.w	r2, r2, #16
 8005f4c:	60da      	str	r2, [r3, #12]
      break;
 8005f4e:	e002      	b.n	8005f56 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
      break;
 8005f54:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d174      	bne.n	8006046 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2201      	movs	r2, #1
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 f833 	bl	8006fd0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a38      	ldr	r2, [pc, #224]	; (8006050 <HAL_TIM_OC_Start_IT+0x28c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d013      	beq.n	8005f9c <HAL_TIM_OC_Start_IT+0x1d8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a36      	ldr	r2, [pc, #216]	; (8006054 <HAL_TIM_OC_Start_IT+0x290>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00e      	beq.n	8005f9c <HAL_TIM_OC_Start_IT+0x1d8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a35      	ldr	r2, [pc, #212]	; (8006058 <HAL_TIM_OC_Start_IT+0x294>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d009      	beq.n	8005f9c <HAL_TIM_OC_Start_IT+0x1d8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a33      	ldr	r2, [pc, #204]	; (800605c <HAL_TIM_OC_Start_IT+0x298>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d004      	beq.n	8005f9c <HAL_TIM_OC_Start_IT+0x1d8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a32      	ldr	r2, [pc, #200]	; (8006060 <HAL_TIM_OC_Start_IT+0x29c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d101      	bne.n	8005fa0 <HAL_TIM_OC_Start_IT+0x1dc>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <HAL_TIM_OC_Start_IT+0x1de>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a25      	ldr	r2, [pc, #148]	; (8006050 <HAL_TIM_OC_Start_IT+0x28c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d022      	beq.n	8006006 <HAL_TIM_OC_Start_IT+0x242>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc8:	d01d      	beq.n	8006006 <HAL_TIM_OC_Start_IT+0x242>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a25      	ldr	r2, [pc, #148]	; (8006064 <HAL_TIM_OC_Start_IT+0x2a0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d018      	beq.n	8006006 <HAL_TIM_OC_Start_IT+0x242>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a23      	ldr	r2, [pc, #140]	; (8006068 <HAL_TIM_OC_Start_IT+0x2a4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <HAL_TIM_OC_Start_IT+0x242>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a22      	ldr	r2, [pc, #136]	; (800606c <HAL_TIM_OC_Start_IT+0x2a8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00e      	beq.n	8006006 <HAL_TIM_OC_Start_IT+0x242>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a19      	ldr	r2, [pc, #100]	; (8006054 <HAL_TIM_OC_Start_IT+0x290>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d009      	beq.n	8006006 <HAL_TIM_OC_Start_IT+0x242>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	; (8006070 <HAL_TIM_OC_Start_IT+0x2ac>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d004      	beq.n	8006006 <HAL_TIM_OC_Start_IT+0x242>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a15      	ldr	r2, [pc, #84]	; (8006058 <HAL_TIM_OC_Start_IT+0x294>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d115      	bne.n	8006032 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	4b19      	ldr	r3, [pc, #100]	; (8006074 <HAL_TIM_OC_Start_IT+0x2b0>)
 800600e:	4013      	ands	r3, r2
 8006010:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b06      	cmp	r3, #6
 8006016:	d015      	beq.n	8006044 <HAL_TIM_OC_Start_IT+0x280>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800601e:	d011      	beq.n	8006044 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006030:	e008      	b.n	8006044 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0201 	orr.w	r2, r2, #1
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	e000      	b.n	8006046 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006044:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40010000 	.word	0x40010000
 8006054:	40010400 	.word	0x40010400
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800
 800606c:	40000c00 	.word	0x40000c00
 8006070:	40001800 	.word	0x40001800
 8006074:	00010007 	.word	0x00010007

08006078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e049      	b.n	800611e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f841 	bl	8006126 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4619      	mov	r1, r3
 80060b6:	4610      	mov	r0, r2
 80060b8:	f000 fb70 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d020      	beq.n	800619e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d01b      	beq.n	800619e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f06f 0202 	mvn.w	r2, #2
 800616e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 faeb 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 800618a:	e005      	b.n	8006198 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7fa fa29 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 faee 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d020      	beq.n	80061ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01b      	beq.n	80061ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f06f 0204 	mvn.w	r2, #4
 80061ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fac5 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 80061d6:	e005      	b.n	80061e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fa fa03 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fac8 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d020      	beq.n	8006236 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01b      	beq.n	8006236 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f06f 0208 	mvn.w	r2, #8
 8006206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2204      	movs	r2, #4
 800620c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f003 0303 	and.w	r3, r3, #3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fa9f 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 8006222:	e005      	b.n	8006230 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7fa f9dd 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 faa2 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	d020      	beq.n	8006282 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01b      	beq.n	8006282 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f06f 0210 	mvn.w	r2, #16
 8006252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2208      	movs	r2, #8
 8006258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fa79 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 800626e:	e005      	b.n	800627c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fa f9b7 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa7c 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00c      	beq.n	80062a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f06f 0201 	mvn.w	r2, #1
 800629e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7fa feb9 	bl	8001018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80062cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 ffba 	bl	8007248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00c      	beq.n	80062f8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d007      	beq.n	80062f8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 ffb2 	bl	800725c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00c      	beq.n	800631c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fa36 	bl	8006788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00c      	beq.n	8006340 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b00      	cmp	r3, #0
 800632e:	d007      	beq.n	8006340 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0220 	mvn.w	r2, #32
 8006338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 ff7a 	bl	8007234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006362:	2302      	movs	r3, #2
 8006364:	e0ff      	b.n	8006566 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b14      	cmp	r3, #20
 8006372:	f200 80f0 	bhi.w	8006556 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006376:	a201      	add	r2, pc, #4	; (adr r2, 800637c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	080063d1 	.word	0x080063d1
 8006380:	08006557 	.word	0x08006557
 8006384:	08006557 	.word	0x08006557
 8006388:	08006557 	.word	0x08006557
 800638c:	08006411 	.word	0x08006411
 8006390:	08006557 	.word	0x08006557
 8006394:	08006557 	.word	0x08006557
 8006398:	08006557 	.word	0x08006557
 800639c:	08006453 	.word	0x08006453
 80063a0:	08006557 	.word	0x08006557
 80063a4:	08006557 	.word	0x08006557
 80063a8:	08006557 	.word	0x08006557
 80063ac:	08006493 	.word	0x08006493
 80063b0:	08006557 	.word	0x08006557
 80063b4:	08006557 	.word	0x08006557
 80063b8:	08006557 	.word	0x08006557
 80063bc:	080064d5 	.word	0x080064d5
 80063c0:	08006557 	.word	0x08006557
 80063c4:	08006557 	.word	0x08006557
 80063c8:	08006557 	.word	0x08006557
 80063cc:	08006515 	.word	0x08006515
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fa86 	bl	80068e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0208 	orr.w	r2, r2, #8
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0204 	bic.w	r2, r2, #4
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	619a      	str	r2, [r3, #24]
      break;
 800640e:	e0a5      	b.n	800655c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 faf6 	bl	8006a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800642a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6999      	ldr	r1, [r3, #24]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	021a      	lsls	r2, r3, #8
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	619a      	str	r2, [r3, #24]
      break;
 8006450:	e084      	b.n	800655c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fb5f 	bl	8006b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0208 	orr.w	r2, r2, #8
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0204 	bic.w	r2, r2, #4
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	61da      	str	r2, [r3, #28]
      break;
 8006490:	e064      	b.n	800655c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fbc7 	bl	8006c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69d9      	ldr	r1, [r3, #28]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	021a      	lsls	r2, r3, #8
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	61da      	str	r2, [r3, #28]
      break;
 80064d2:	e043      	b.n	800655c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fc10 	bl	8006d00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0208 	orr.w	r2, r2, #8
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0204 	bic.w	r2, r2, #4
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006512:	e023      	b.n	800655c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fc54 	bl	8006dc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	021a      	lsls	r2, r3, #8
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006554:	e002      	b.n	800655c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
      break;
 800655a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006564:	7dfb      	ldrb	r3, [r7, #23]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop

08006570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_TIM_ConfigClockSource+0x1c>
 8006588:	2302      	movs	r3, #2
 800658a:	e0dc      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x1d6>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	4b6a      	ldr	r3, [pc, #424]	; (8006750 <HAL_TIM_ConfigClockSource+0x1e0>)
 80065a8:	4013      	ands	r3, r2
 80065aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a64      	ldr	r2, [pc, #400]	; (8006754 <HAL_TIM_ConfigClockSource+0x1e4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	f000 80a9 	beq.w	800671a <HAL_TIM_ConfigClockSource+0x1aa>
 80065c8:	4a62      	ldr	r2, [pc, #392]	; (8006754 <HAL_TIM_ConfigClockSource+0x1e4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	f200 80ae 	bhi.w	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 80065d0:	4a61      	ldr	r2, [pc, #388]	; (8006758 <HAL_TIM_ConfigClockSource+0x1e8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	f000 80a1 	beq.w	800671a <HAL_TIM_ConfigClockSource+0x1aa>
 80065d8:	4a5f      	ldr	r2, [pc, #380]	; (8006758 <HAL_TIM_ConfigClockSource+0x1e8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	f200 80a6 	bhi.w	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 80065e0:	4a5e      	ldr	r2, [pc, #376]	; (800675c <HAL_TIM_ConfigClockSource+0x1ec>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	f000 8099 	beq.w	800671a <HAL_TIM_ConfigClockSource+0x1aa>
 80065e8:	4a5c      	ldr	r2, [pc, #368]	; (800675c <HAL_TIM_ConfigClockSource+0x1ec>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	f200 809e 	bhi.w	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 80065f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065f4:	f000 8091 	beq.w	800671a <HAL_TIM_ConfigClockSource+0x1aa>
 80065f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065fc:	f200 8096 	bhi.w	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 8006600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006604:	f000 8089 	beq.w	800671a <HAL_TIM_ConfigClockSource+0x1aa>
 8006608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800660c:	f200 808e 	bhi.w	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 8006610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006614:	d03e      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0x124>
 8006616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661a:	f200 8087 	bhi.w	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 800661e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006622:	f000 8086 	beq.w	8006732 <HAL_TIM_ConfigClockSource+0x1c2>
 8006626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662a:	d87f      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 800662c:	2b70      	cmp	r3, #112	; 0x70
 800662e:	d01a      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0xf6>
 8006630:	2b70      	cmp	r3, #112	; 0x70
 8006632:	d87b      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 8006634:	2b60      	cmp	r3, #96	; 0x60
 8006636:	d050      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x16a>
 8006638:	2b60      	cmp	r3, #96	; 0x60
 800663a:	d877      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 800663c:	2b50      	cmp	r3, #80	; 0x50
 800663e:	d03c      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x14a>
 8006640:	2b50      	cmp	r3, #80	; 0x50
 8006642:	d873      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d058      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x18a>
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d86f      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 800664c:	2b30      	cmp	r3, #48	; 0x30
 800664e:	d064      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x1aa>
 8006650:	2b30      	cmp	r3, #48	; 0x30
 8006652:	d86b      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 8006654:	2b20      	cmp	r3, #32
 8006656:	d060      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x1aa>
 8006658:	2b20      	cmp	r3, #32
 800665a:	d867      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x1bc>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d05c      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x1aa>
 8006660:	2b10      	cmp	r3, #16
 8006662:	d05a      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x1aa>
 8006664:	e062      	b.n	800672c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6899      	ldr	r1, [r3, #8]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f000 fc8b 	bl	8006f90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	609a      	str	r2, [r3, #8]
      break;
 8006692:	e04f      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6899      	ldr	r1, [r3, #8]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f000 fc74 	bl	8006f90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066b6:	609a      	str	r2, [r3, #8]
      break;
 80066b8:	e03c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6859      	ldr	r1, [r3, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f000 fbe4 	bl	8006e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2150      	movs	r1, #80	; 0x50
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fc3e 	bl	8006f54 <TIM_ITRx_SetConfig>
      break;
 80066d8:	e02c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6859      	ldr	r1, [r3, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	461a      	mov	r2, r3
 80066e8:	f000 fc03 	bl	8006ef2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2160      	movs	r1, #96	; 0x60
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fc2e 	bl	8006f54 <TIM_ITRx_SetConfig>
      break;
 80066f8:	e01c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	6859      	ldr	r1, [r3, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	461a      	mov	r2, r3
 8006708:	f000 fbc4 	bl	8006e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2140      	movs	r1, #64	; 0x40
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fc1e 	bl	8006f54 <TIM_ITRx_SetConfig>
      break;
 8006718:	e00c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f000 fc15 	bl	8006f54 <TIM_ITRx_SetConfig>
      break;
 800672a:	e003      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
      break;
 8006730:	e000      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	ffceff88 	.word	0xffceff88
 8006754:	00100040 	.word	0x00100040
 8006758:	00100030 	.word	0x00100030
 800675c:	00100020 	.word	0x00100020

08006760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a46      	ldr	r2, [pc, #280]	; (80068c8 <TIM_Base_SetConfig+0x12c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d013      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ba:	d00f      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a43      	ldr	r2, [pc, #268]	; (80068cc <TIM_Base_SetConfig+0x130>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00b      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a42      	ldr	r2, [pc, #264]	; (80068d0 <TIM_Base_SetConfig+0x134>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a41      	ldr	r2, [pc, #260]	; (80068d4 <TIM_Base_SetConfig+0x138>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a40      	ldr	r2, [pc, #256]	; (80068d8 <TIM_Base_SetConfig+0x13c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d108      	bne.n	80067ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a35      	ldr	r2, [pc, #212]	; (80068c8 <TIM_Base_SetConfig+0x12c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d01f      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fc:	d01b      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a32      	ldr	r2, [pc, #200]	; (80068cc <TIM_Base_SetConfig+0x130>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d017      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a31      	ldr	r2, [pc, #196]	; (80068d0 <TIM_Base_SetConfig+0x134>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a30      	ldr	r2, [pc, #192]	; (80068d4 <TIM_Base_SetConfig+0x138>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00f      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2f      	ldr	r2, [pc, #188]	; (80068d8 <TIM_Base_SetConfig+0x13c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00b      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2e      	ldr	r2, [pc, #184]	; (80068dc <TIM_Base_SetConfig+0x140>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d007      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2d      	ldr	r2, [pc, #180]	; (80068e0 <TIM_Base_SetConfig+0x144>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2c      	ldr	r2, [pc, #176]	; (80068e4 <TIM_Base_SetConfig+0x148>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d108      	bne.n	8006848 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a16      	ldr	r2, [pc, #88]	; (80068c8 <TIM_Base_SetConfig+0x12c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00f      	beq.n	8006894 <TIM_Base_SetConfig+0xf8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <TIM_Base_SetConfig+0x13c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00b      	beq.n	8006894 <TIM_Base_SetConfig+0xf8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a17      	ldr	r2, [pc, #92]	; (80068dc <TIM_Base_SetConfig+0x140>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <TIM_Base_SetConfig+0xf8>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a16      	ldr	r2, [pc, #88]	; (80068e0 <TIM_Base_SetConfig+0x144>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_Base_SetConfig+0xf8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <TIM_Base_SetConfig+0x148>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d103      	bne.n	800689c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d105      	bne.n	80068ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f023 0201 	bic.w	r2, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	611a      	str	r2, [r3, #16]
  }
}
 80068ba:	bf00      	nop
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00
 80068d8:	40010400 	.word	0x40010400
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40014400 	.word	0x40014400
 80068e4:	40014800 	.word	0x40014800

080068e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	f023 0201 	bic.w	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4b37      	ldr	r3, [pc, #220]	; (80069f0 <TIM_OC1_SetConfig+0x108>)
 8006914:	4013      	ands	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f023 0302 	bic.w	r3, r3, #2
 8006930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a2d      	ldr	r2, [pc, #180]	; (80069f4 <TIM_OC1_SetConfig+0x10c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00f      	beq.n	8006964 <TIM_OC1_SetConfig+0x7c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a2c      	ldr	r2, [pc, #176]	; (80069f8 <TIM_OC1_SetConfig+0x110>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00b      	beq.n	8006964 <TIM_OC1_SetConfig+0x7c>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a2b      	ldr	r2, [pc, #172]	; (80069fc <TIM_OC1_SetConfig+0x114>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d007      	beq.n	8006964 <TIM_OC1_SetConfig+0x7c>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a2a      	ldr	r2, [pc, #168]	; (8006a00 <TIM_OC1_SetConfig+0x118>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d003      	beq.n	8006964 <TIM_OC1_SetConfig+0x7c>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a29      	ldr	r2, [pc, #164]	; (8006a04 <TIM_OC1_SetConfig+0x11c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d10c      	bne.n	800697e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f023 0308 	bic.w	r3, r3, #8
 800696a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f023 0304 	bic.w	r3, r3, #4
 800697c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1c      	ldr	r2, [pc, #112]	; (80069f4 <TIM_OC1_SetConfig+0x10c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00f      	beq.n	80069a6 <TIM_OC1_SetConfig+0xbe>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1b      	ldr	r2, [pc, #108]	; (80069f8 <TIM_OC1_SetConfig+0x110>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00b      	beq.n	80069a6 <TIM_OC1_SetConfig+0xbe>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a1a      	ldr	r2, [pc, #104]	; (80069fc <TIM_OC1_SetConfig+0x114>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d007      	beq.n	80069a6 <TIM_OC1_SetConfig+0xbe>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a19      	ldr	r2, [pc, #100]	; (8006a00 <TIM_OC1_SetConfig+0x118>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_OC1_SetConfig+0xbe>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a18      	ldr	r2, [pc, #96]	; (8006a04 <TIM_OC1_SetConfig+0x11c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d111      	bne.n	80069ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	621a      	str	r2, [r3, #32]
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	fffeff8f 	.word	0xfffeff8f
 80069f4:	40010000 	.word	0x40010000
 80069f8:	40010400 	.word	0x40010400
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40014400 	.word	0x40014400
 8006a04:	40014800 	.word	0x40014800

08006a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	f023 0210 	bic.w	r2, r3, #16
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4b34      	ldr	r3, [pc, #208]	; (8006b04 <TIM_OC2_SetConfig+0xfc>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f023 0320 	bic.w	r3, r3, #32
 8006a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a29      	ldr	r2, [pc, #164]	; (8006b08 <TIM_OC2_SetConfig+0x100>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC2_SetConfig+0x68>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a28      	ldr	r2, [pc, #160]	; (8006b0c <TIM_OC2_SetConfig+0x104>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10d      	bne.n	8006a8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a1e      	ldr	r2, [pc, #120]	; (8006b08 <TIM_OC2_SetConfig+0x100>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00f      	beq.n	8006ab4 <TIM_OC2_SetConfig+0xac>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1d      	ldr	r2, [pc, #116]	; (8006b0c <TIM_OC2_SetConfig+0x104>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_OC2_SetConfig+0xac>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <TIM_OC2_SetConfig+0x108>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_OC2_SetConfig+0xac>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <TIM_OC2_SetConfig+0x10c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC2_SetConfig+0xac>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a1a      	ldr	r2, [pc, #104]	; (8006b18 <TIM_OC2_SetConfig+0x110>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d113      	bne.n	8006adc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	feff8fff 	.word	0xfeff8fff
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	40010400 	.word	0x40010400
 8006b10:	40014000 	.word	0x40014000
 8006b14:	40014400 	.word	0x40014400
 8006b18:	40014800 	.word	0x40014800

08006b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4b33      	ldr	r3, [pc, #204]	; (8006c14 <TIM_OC3_SetConfig+0xf8>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a28      	ldr	r2, [pc, #160]	; (8006c18 <TIM_OC3_SetConfig+0xfc>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_OC3_SetConfig+0x66>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a27      	ldr	r2, [pc, #156]	; (8006c1c <TIM_OC3_SetConfig+0x100>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d10d      	bne.n	8006b9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	021b      	lsls	r3, r3, #8
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	; (8006c18 <TIM_OC3_SetConfig+0xfc>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00f      	beq.n	8006bc6 <TIM_OC3_SetConfig+0xaa>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <TIM_OC3_SetConfig+0x100>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00b      	beq.n	8006bc6 <TIM_OC3_SetConfig+0xaa>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <TIM_OC3_SetConfig+0x104>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d007      	beq.n	8006bc6 <TIM_OC3_SetConfig+0xaa>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <TIM_OC3_SetConfig+0x108>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d003      	beq.n	8006bc6 <TIM_OC3_SetConfig+0xaa>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a19      	ldr	r2, [pc, #100]	; (8006c28 <TIM_OC3_SetConfig+0x10c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d113      	bne.n	8006bee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	621a      	str	r2, [r3, #32]
}
 8006c08:	bf00      	nop
 8006c0a:	371c      	adds	r7, #28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	fffeff8f 	.word	0xfffeff8f
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40010400 	.word	0x40010400
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800

08006c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4b24      	ldr	r3, [pc, #144]	; (8006ce8 <TIM_OC4_SetConfig+0xbc>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	031b      	lsls	r3, r3, #12
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a19      	ldr	r2, [pc, #100]	; (8006cec <TIM_OC4_SetConfig+0xc0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00f      	beq.n	8006cac <TIM_OC4_SetConfig+0x80>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a18      	ldr	r2, [pc, #96]	; (8006cf0 <TIM_OC4_SetConfig+0xc4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00b      	beq.n	8006cac <TIM_OC4_SetConfig+0x80>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a17      	ldr	r2, [pc, #92]	; (8006cf4 <TIM_OC4_SetConfig+0xc8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d007      	beq.n	8006cac <TIM_OC4_SetConfig+0x80>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <TIM_OC4_SetConfig+0xcc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d003      	beq.n	8006cac <TIM_OC4_SetConfig+0x80>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <TIM_OC4_SetConfig+0xd0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d109      	bne.n	8006cc0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	019b      	lsls	r3, r3, #6
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	feff8fff 	.word	0xfeff8fff
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40010400 	.word	0x40010400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800

08006d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4b21      	ldr	r3, [pc, #132]	; (8006db0 <TIM_OC5_SetConfig+0xb0>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	041b      	lsls	r3, r3, #16
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <TIM_OC5_SetConfig+0xb4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00f      	beq.n	8006d76 <TIM_OC5_SetConfig+0x76>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <TIM_OC5_SetConfig+0xb8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00b      	beq.n	8006d76 <TIM_OC5_SetConfig+0x76>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <TIM_OC5_SetConfig+0xbc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <TIM_OC5_SetConfig+0x76>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a15      	ldr	r2, [pc, #84]	; (8006dc0 <TIM_OC5_SetConfig+0xc0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_OC5_SetConfig+0x76>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a14      	ldr	r2, [pc, #80]	; (8006dc4 <TIM_OC5_SetConfig+0xc4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d109      	bne.n	8006d8a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	fffeff8f 	.word	0xfffeff8f
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40010400 	.word	0x40010400
 8006dbc:	40014000 	.word	0x40014000
 8006dc0:	40014400 	.word	0x40014400
 8006dc4:	40014800 	.word	0x40014800

08006dc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4b22      	ldr	r3, [pc, #136]	; (8006e7c <TIM_OC6_SetConfig+0xb4>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	051b      	lsls	r3, r3, #20
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a19      	ldr	r2, [pc, #100]	; (8006e80 <TIM_OC6_SetConfig+0xb8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00f      	beq.n	8006e40 <TIM_OC6_SetConfig+0x78>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <TIM_OC6_SetConfig+0xbc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00b      	beq.n	8006e40 <TIM_OC6_SetConfig+0x78>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a17      	ldr	r2, [pc, #92]	; (8006e88 <TIM_OC6_SetConfig+0xc0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d007      	beq.n	8006e40 <TIM_OC6_SetConfig+0x78>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a16      	ldr	r2, [pc, #88]	; (8006e8c <TIM_OC6_SetConfig+0xc4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d003      	beq.n	8006e40 <TIM_OC6_SetConfig+0x78>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <TIM_OC6_SetConfig+0xc8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d109      	bne.n	8006e54 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	029b      	lsls	r3, r3, #10
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	621a      	str	r2, [r3, #32]
}
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	feff8fff 	.word	0xfeff8fff
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40010400 	.word	0x40010400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40014400 	.word	0x40014400
 8006e90:	40014800 	.word	0x40014800

08006e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	f023 0201 	bic.w	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 030a 	bic.w	r3, r3, #10
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f023 0210 	bic.w	r2, r3, #16
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	031b      	lsls	r3, r3, #12
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	621a      	str	r2, [r3, #32]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <TIM_ITRx_SetConfig+0x38>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	f043 0307 	orr.w	r3, r3, #7
 8006f76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	609a      	str	r2, [r3, #8]
}
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	ffcfff8f 	.word	0xffcfff8f

08006f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	021a      	lsls	r2, r3, #8
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	609a      	str	r2, [r3, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f003 031f 	and.w	r3, r3, #31
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a1a      	ldr	r2, [r3, #32]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	43db      	mvns	r3, r3
 8006ff2:	401a      	ands	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a1a      	ldr	r2, [r3, #32]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f003 031f 	and.w	r3, r3, #31
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	fa01 f303 	lsl.w	r3, r1, r3
 8007008:	431a      	orrs	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
	...

0800701c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007030:	2302      	movs	r3, #2
 8007032:	e06d      	b.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a30      	ldr	r2, [pc, #192]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d004      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a2f      	ldr	r2, [pc, #188]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d108      	bne.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800706e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007080:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a20      	ldr	r2, [pc, #128]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d022      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a6:	d01d      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d018      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d013      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1a      	ldr	r2, [pc, #104]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00e      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a15      	ldr	r2, [pc, #84]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d009      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a16      	ldr	r2, [pc, #88]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a15      	ldr	r2, [pc, #84]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d10c      	bne.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	40010000 	.word	0x40010000
 8007120:	40010400 	.word	0x40010400
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40000c00 	.word	0x40000c00
 8007130:	40001800 	.word	0x40001800
 8007134:	40014000 	.word	0x40014000

08007138 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007150:	2302      	movs	r3, #2
 8007152:	e065      	b.n	8007220 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	041b      	lsls	r3, r3, #16
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a16      	ldr	r2, [pc, #88]	; (800722c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d004      	beq.n	80071e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a14      	ldr	r2, [pc, #80]	; (8007230 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d115      	bne.n	800720e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	051b      	lsls	r3, r3, #20
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	40010000 	.word	0x40010000
 8007230:	40010400 	.word	0x40010400

08007234 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e042      	b.n	8007308 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007288:	2b00      	cmp	r3, #0
 800728a:	d106      	bne.n	800729a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7fa f8a7 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2224      	movs	r2, #36	; 0x24
 800729e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 f9b6 	bl	800862c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fc4b 	bl	8007b5c <UART_SetConfig>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e01b      	b.n	8007308 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 fa35 	bl	8008770 <UART_CheckIdleState>
 8007306:	4603      	mov	r3, r0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	; 0x28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007324:	2b20      	cmp	r3, #32
 8007326:	d137      	bne.n	8007398 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <HAL_UART_Receive_IT+0x24>
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e030      	b.n	800739a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a18      	ldr	r2, [pc, #96]	; (80073a4 <HAL_UART_Receive_IT+0x94>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d01f      	beq.n	8007388 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d018      	beq.n	8007388 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	613b      	str	r3, [r7, #16]
   return(result);
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	623b      	str	r3, [r7, #32]
 8007376:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	69f9      	ldr	r1, [r7, #28]
 800737a:	6a3a      	ldr	r2, [r7, #32]
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	61bb      	str	r3, [r7, #24]
   return(result);
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	461a      	mov	r2, r3
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f001 fb06 	bl	80089a0 <UART_Start_Receive_IT>
 8007394:	4603      	mov	r3, r0
 8007396:	e000      	b.n	800739a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007398:	2302      	movs	r3, #2
  }
}
 800739a:	4618      	mov	r0, r3
 800739c:	3728      	adds	r7, #40	; 0x28
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	58000c00 	.word	0x58000c00

080073a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b0ba      	sub	sp, #232	; 0xe8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80073d6:	4013      	ands	r3, r2
 80073d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80073dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d11b      	bne.n	800741c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d015      	beq.n	800741c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d009      	beq.n	800741c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8377 	beq.w	8007b00 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
      }
      return;
 800741a:	e371      	b.n	8007b00 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800741c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 8123 	beq.w	800766c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007426:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800742a:	4b8d      	ldr	r3, [pc, #564]	; (8007660 <HAL_UART_IRQHandler+0x2b8>)
 800742c:	4013      	ands	r3, r2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007432:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007436:	4b8b      	ldr	r3, [pc, #556]	; (8007664 <HAL_UART_IRQHandler+0x2bc>)
 8007438:	4013      	ands	r3, r2
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 8116 	beq.w	800766c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d011      	beq.n	8007470 <HAL_UART_IRQHandler+0xc8>
 800744c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00b      	beq.n	8007470 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2201      	movs	r2, #1
 800745e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007466:	f043 0201 	orr.w	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d011      	beq.n	80074a0 <HAL_UART_IRQHandler+0xf8>
 800747c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2202      	movs	r2, #2
 800748e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007496:	f043 0204 	orr.w	r2, r3, #4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d011      	beq.n	80074d0 <HAL_UART_IRQHandler+0x128>
 80074ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2204      	movs	r2, #4
 80074be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c6:	f043 0202 	orr.w	r2, r3, #2
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d017      	beq.n	800750c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d105      	bne.n	80074f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80074ec:	4b5c      	ldr	r3, [pc, #368]	; (8007660 <HAL_UART_IRQHandler+0x2b8>)
 80074ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2208      	movs	r2, #8
 80074fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007502:	f043 0208 	orr.w	r2, r3, #8
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800750c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007514:	2b00      	cmp	r3, #0
 8007516:	d012      	beq.n	800753e <HAL_UART_IRQHandler+0x196>
 8007518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00c      	beq.n	800753e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800752c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007534:	f043 0220 	orr.w	r2, r3, #32
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 82dd 	beq.w	8007b04 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800754a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d013      	beq.n	800757e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d105      	bne.n	800756e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d007      	beq.n	800757e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007584:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d005      	beq.n	80075a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800759a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d054      	beq.n	800764c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 fb1e 	bl	8008be4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d146      	bne.n	8007644 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3308      	adds	r3, #8
 80075de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1d9      	bne.n	80075b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007608:	2b00      	cmp	r3, #0
 800760a:	d017      	beq.n	800763c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007612:	4a15      	ldr	r2, [pc, #84]	; (8007668 <HAL_UART_IRQHandler+0x2c0>)
 8007614:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800761c:	4618      	mov	r0, r3
 800761e:	f7fa fe0b 	bl	8002238 <HAL_DMA_Abort_IT>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d019      	beq.n	800765c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800762e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007636:	4610      	mov	r0, r2
 8007638:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763a:	e00f      	b.n	800765c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fa77 	bl	8007b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007642:	e00b      	b.n	800765c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fa73 	bl	8007b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764a:	e007      	b.n	800765c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fa6f 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800765a:	e253      	b.n	8007b04 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765c:	bf00      	nop
    return;
 800765e:	e251      	b.n	8007b04 <HAL_UART_IRQHandler+0x75c>
 8007660:	10000001 	.word	0x10000001
 8007664:	04000120 	.word	0x04000120
 8007668:	08008cb1 	.word	0x08008cb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007670:	2b01      	cmp	r3, #1
 8007672:	f040 81e7 	bne.w	8007a44 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 81e0 	beq.w	8007a44 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 81d9 	beq.w	8007a44 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2210      	movs	r2, #16
 8007698:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	f040 8151 	bne.w	800794c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a96      	ldr	r2, [pc, #600]	; (800790c <HAL_UART_IRQHandler+0x564>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d068      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a93      	ldr	r2, [pc, #588]	; (8007910 <HAL_UART_IRQHandler+0x568>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d061      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a91      	ldr	r2, [pc, #580]	; (8007914 <HAL_UART_IRQHandler+0x56c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d05a      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a8e      	ldr	r2, [pc, #568]	; (8007918 <HAL_UART_IRQHandler+0x570>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d053      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a8c      	ldr	r2, [pc, #560]	; (800791c <HAL_UART_IRQHandler+0x574>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d04c      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a89      	ldr	r2, [pc, #548]	; (8007920 <HAL_UART_IRQHandler+0x578>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d045      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a87      	ldr	r2, [pc, #540]	; (8007924 <HAL_UART_IRQHandler+0x57c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d03e      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a84      	ldr	r2, [pc, #528]	; (8007928 <HAL_UART_IRQHandler+0x580>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d037      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a82      	ldr	r2, [pc, #520]	; (800792c <HAL_UART_IRQHandler+0x584>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d030      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a7f      	ldr	r2, [pc, #508]	; (8007930 <HAL_UART_IRQHandler+0x588>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d029      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a7d      	ldr	r2, [pc, #500]	; (8007934 <HAL_UART_IRQHandler+0x58c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d022      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a7a      	ldr	r2, [pc, #488]	; (8007938 <HAL_UART_IRQHandler+0x590>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d01b      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a78      	ldr	r2, [pc, #480]	; (800793c <HAL_UART_IRQHandler+0x594>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d014      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a75      	ldr	r2, [pc, #468]	; (8007940 <HAL_UART_IRQHandler+0x598>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00d      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a73      	ldr	r2, [pc, #460]	; (8007944 <HAL_UART_IRQHandler+0x59c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d006      	beq.n	800778a <HAL_UART_IRQHandler+0x3e2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a70      	ldr	r2, [pc, #448]	; (8007948 <HAL_UART_IRQHandler+0x5a0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d106      	bne.n	8007798 <HAL_UART_IRQHandler+0x3f0>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	b29b      	uxth	r3, r3
 8007796:	e005      	b.n	80077a4 <HAL_UART_IRQHandler+0x3fc>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 81ab 	beq.w	8007b08 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077bc:	429a      	cmp	r2, r3
 80077be:	f080 81a3 	bcs.w	8007b08 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d8:	f000 8087 	beq.w	80078ea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800780a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800781e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1da      	bne.n	80077dc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800784a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800784e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800785c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e1      	bne.n	8007826 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3308      	adds	r3, #8
 8007868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3308      	adds	r3, #8
 8007882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800788c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e3      	bne.n	8007862 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078b8:	f023 0310 	bic.w	r3, r3, #16
 80078bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80078cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e4      	bne.n	80078a8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fa f989 	bl	8001bfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2202      	movs	r2, #2
 80078ee:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	b29b      	uxth	r3, r3
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f91d 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800790a:	e0fd      	b.n	8007b08 <HAL_UART_IRQHandler+0x760>
 800790c:	40020010 	.word	0x40020010
 8007910:	40020028 	.word	0x40020028
 8007914:	40020040 	.word	0x40020040
 8007918:	40020058 	.word	0x40020058
 800791c:	40020070 	.word	0x40020070
 8007920:	40020088 	.word	0x40020088
 8007924:	400200a0 	.word	0x400200a0
 8007928:	400200b8 	.word	0x400200b8
 800792c:	40020410 	.word	0x40020410
 8007930:	40020428 	.word	0x40020428
 8007934:	40020440 	.word	0x40020440
 8007938:	40020458 	.word	0x40020458
 800793c:	40020470 	.word	0x40020470
 8007940:	40020488 	.word	0x40020488
 8007944:	400204a0 	.word	0x400204a0
 8007948:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007958:	b29b      	uxth	r3, r3
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 80cf 	beq.w	8007b0c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800796e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 80ca 	beq.w	8007b0c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800798c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800799a:	647b      	str	r3, [r7, #68]	; 0x44
 800799c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1e4      	bne.n	8007978 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	623b      	str	r3, [r7, #32]
   return(result);
 80079be:	6a3a      	ldr	r2, [r7, #32]
 80079c0:	4b55      	ldr	r3, [pc, #340]	; (8007b18 <HAL_UART_IRQHandler+0x770>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3308      	adds	r3, #8
 80079ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079d2:	633a      	str	r2, [r7, #48]	; 0x30
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e3      	bne.n	80079ae <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0310 	bic.w	r3, r3, #16
 8007a0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a1c:	61fb      	str	r3, [r7, #28]
 8007a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	69b9      	ldr	r1, [r7, #24]
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	e841 2300 	strex	r3, r2, [r1]
 8007a28:	617b      	str	r3, [r7, #20]
   return(result);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e4      	bne.n	80079fa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f881 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a42:	e063      	b.n	8007b0c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00e      	beq.n	8007a6e <HAL_UART_IRQHandler+0x6c6>
 8007a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d008      	beq.n	8007a6e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fe80 	bl	800976c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a6c:	e051      	b.n	8007b12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d014      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d105      	bne.n	8007a92 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d008      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d03a      	beq.n	8007b10 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
    }
    return;
 8007aa2:	e035      	b.n	8007b10 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d009      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x71c>
 8007ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f90d 	bl	8008cdc <UART_EndTransmit_IT>
    return;
 8007ac2:	e026      	b.n	8007b12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x73c>
 8007ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fe59 	bl	8009794 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ae2:	e016      	b.n	8007b12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d010      	beq.n	8007b12 <HAL_UART_IRQHandler+0x76a>
 8007af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da0c      	bge.n	8007b12 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fe41 	bl	8009780 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007afe:	e008      	b.n	8007b12 <HAL_UART_IRQHandler+0x76a>
      return;
 8007b00:	bf00      	nop
 8007b02:	e006      	b.n	8007b12 <HAL_UART_IRQHandler+0x76a>
    return;
 8007b04:	bf00      	nop
 8007b06:	e004      	b.n	8007b12 <HAL_UART_IRQHandler+0x76a>
      return;
 8007b08:	bf00      	nop
 8007b0a:	e002      	b.n	8007b12 <HAL_UART_IRQHandler+0x76a>
      return;
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <HAL_UART_IRQHandler+0x76a>
    return;
 8007b10:	bf00      	nop
  }
}
 8007b12:	37e8      	adds	r7, #232	; 0xe8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	effffffe 	.word	0xeffffffe

08007b1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b60:	b092      	sub	sp, #72	; 0x48
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	431a      	orrs	r2, r3
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4bbe      	ldr	r3, [pc, #760]	; (8007e84 <UART_SetConfig+0x328>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	6812      	ldr	r2, [r2, #0]
 8007b92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b94:	430b      	orrs	r3, r1
 8007b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4ab3      	ldr	r2, [pc, #716]	; (8007e88 <UART_SetConfig+0x32c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d004      	beq.n	8007bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	4baf      	ldr	r3, [pc, #700]	; (8007e8c <UART_SetConfig+0x330>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	6812      	ldr	r2, [r2, #0]
 8007bd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	f023 010f 	bic.w	r1, r3, #15
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4aa6      	ldr	r2, [pc, #664]	; (8007e90 <UART_SetConfig+0x334>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d177      	bne.n	8007cec <UART_SetConfig+0x190>
 8007bfc:	4ba5      	ldr	r3, [pc, #660]	; (8007e94 <UART_SetConfig+0x338>)
 8007bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c04:	2b28      	cmp	r3, #40	; 0x28
 8007c06:	d86d      	bhi.n	8007ce4 <UART_SetConfig+0x188>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <UART_SetConfig+0xb4>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007cb5 	.word	0x08007cb5
 8007c14:	08007ce5 	.word	0x08007ce5
 8007c18:	08007ce5 	.word	0x08007ce5
 8007c1c:	08007ce5 	.word	0x08007ce5
 8007c20:	08007ce5 	.word	0x08007ce5
 8007c24:	08007ce5 	.word	0x08007ce5
 8007c28:	08007ce5 	.word	0x08007ce5
 8007c2c:	08007ce5 	.word	0x08007ce5
 8007c30:	08007cbd 	.word	0x08007cbd
 8007c34:	08007ce5 	.word	0x08007ce5
 8007c38:	08007ce5 	.word	0x08007ce5
 8007c3c:	08007ce5 	.word	0x08007ce5
 8007c40:	08007ce5 	.word	0x08007ce5
 8007c44:	08007ce5 	.word	0x08007ce5
 8007c48:	08007ce5 	.word	0x08007ce5
 8007c4c:	08007ce5 	.word	0x08007ce5
 8007c50:	08007cc5 	.word	0x08007cc5
 8007c54:	08007ce5 	.word	0x08007ce5
 8007c58:	08007ce5 	.word	0x08007ce5
 8007c5c:	08007ce5 	.word	0x08007ce5
 8007c60:	08007ce5 	.word	0x08007ce5
 8007c64:	08007ce5 	.word	0x08007ce5
 8007c68:	08007ce5 	.word	0x08007ce5
 8007c6c:	08007ce5 	.word	0x08007ce5
 8007c70:	08007ccd 	.word	0x08007ccd
 8007c74:	08007ce5 	.word	0x08007ce5
 8007c78:	08007ce5 	.word	0x08007ce5
 8007c7c:	08007ce5 	.word	0x08007ce5
 8007c80:	08007ce5 	.word	0x08007ce5
 8007c84:	08007ce5 	.word	0x08007ce5
 8007c88:	08007ce5 	.word	0x08007ce5
 8007c8c:	08007ce5 	.word	0x08007ce5
 8007c90:	08007cd5 	.word	0x08007cd5
 8007c94:	08007ce5 	.word	0x08007ce5
 8007c98:	08007ce5 	.word	0x08007ce5
 8007c9c:	08007ce5 	.word	0x08007ce5
 8007ca0:	08007ce5 	.word	0x08007ce5
 8007ca4:	08007ce5 	.word	0x08007ce5
 8007ca8:	08007ce5 	.word	0x08007ce5
 8007cac:	08007ce5 	.word	0x08007ce5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cba:	e222      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cc2:	e21e      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e21a      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007ccc:	2310      	movs	r3, #16
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cd2:	e216      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007cd4:	2320      	movs	r3, #32
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e212      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007cdc:	2340      	movs	r3, #64	; 0x40
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e20e      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007ce4:	2380      	movs	r3, #128	; 0x80
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e20a      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a69      	ldr	r2, [pc, #420]	; (8007e98 <UART_SetConfig+0x33c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d130      	bne.n	8007d58 <UART_SetConfig+0x1fc>
 8007cf6:	4b67      	ldr	r3, [pc, #412]	; (8007e94 <UART_SetConfig+0x338>)
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	2b05      	cmp	r3, #5
 8007d00:	d826      	bhi.n	8007d50 <UART_SetConfig+0x1f4>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <UART_SetConfig+0x1ac>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d21 	.word	0x08007d21
 8007d0c:	08007d29 	.word	0x08007d29
 8007d10:	08007d31 	.word	0x08007d31
 8007d14:	08007d39 	.word	0x08007d39
 8007d18:	08007d41 	.word	0x08007d41
 8007d1c:	08007d49 	.word	0x08007d49
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e1ec      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e1e8      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007d30:	2308      	movs	r3, #8
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e1e4      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3e:	e1e0      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007d40:	2320      	movs	r3, #32
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e1dc      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e1d8      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007d50:	2380      	movs	r3, #128	; 0x80
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d56:	e1d4      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a4f      	ldr	r2, [pc, #316]	; (8007e9c <UART_SetConfig+0x340>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d130      	bne.n	8007dc4 <UART_SetConfig+0x268>
 8007d62:	4b4c      	ldr	r3, [pc, #304]	; (8007e94 <UART_SetConfig+0x338>)
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b05      	cmp	r3, #5
 8007d6c:	d826      	bhi.n	8007dbc <UART_SetConfig+0x260>
 8007d6e:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <UART_SetConfig+0x218>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d8d 	.word	0x08007d8d
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	08007d9d 	.word	0x08007d9d
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dad 	.word	0x08007dad
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e1b6      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007d94:	2304      	movs	r3, #4
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e1b2      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e1ae      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007da4:	2310      	movs	r3, #16
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e1aa      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007dac:	2320      	movs	r3, #32
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db2:	e1a6      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007db4:	2340      	movs	r3, #64	; 0x40
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dba:	e1a2      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007dbc:	2380      	movs	r3, #128	; 0x80
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc2:	e19e      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a35      	ldr	r2, [pc, #212]	; (8007ea0 <UART_SetConfig+0x344>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d130      	bne.n	8007e30 <UART_SetConfig+0x2d4>
 8007dce:	4b31      	ldr	r3, [pc, #196]	; (8007e94 <UART_SetConfig+0x338>)
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	2b05      	cmp	r3, #5
 8007dd8:	d826      	bhi.n	8007e28 <UART_SetConfig+0x2cc>
 8007dda:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <UART_SetConfig+0x284>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007df9 	.word	0x08007df9
 8007de4:	08007e01 	.word	0x08007e01
 8007de8:	08007e09 	.word	0x08007e09
 8007dec:	08007e11 	.word	0x08007e11
 8007df0:	08007e19 	.word	0x08007e19
 8007df4:	08007e21 	.word	0x08007e21
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e180      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e00:	2304      	movs	r3, #4
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e17c      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e08:	2308      	movs	r3, #8
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e178      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e10:	2310      	movs	r3, #16
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e174      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e18:	2320      	movs	r3, #32
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e170      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e20:	2340      	movs	r3, #64	; 0x40
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e16c      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e28:	2380      	movs	r3, #128	; 0x80
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2e:	e168      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1b      	ldr	r2, [pc, #108]	; (8007ea4 <UART_SetConfig+0x348>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d142      	bne.n	8007ec0 <UART_SetConfig+0x364>
 8007e3a:	4b16      	ldr	r3, [pc, #88]	; (8007e94 <UART_SetConfig+0x338>)
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	2b05      	cmp	r3, #5
 8007e44:	d838      	bhi.n	8007eb8 <UART_SetConfig+0x35c>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <UART_SetConfig+0x2f0>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007e65 	.word	0x08007e65
 8007e50:	08007e6d 	.word	0x08007e6d
 8007e54:	08007e75 	.word	0x08007e75
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007ea9 	.word	0x08007ea9
 8007e60:	08007eb1 	.word	0x08007eb1
 8007e64:	2300      	movs	r3, #0
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6a:	e14a      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e6c:	2304      	movs	r3, #4
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e146      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e74:	2308      	movs	r3, #8
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e142      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e7c:	2310      	movs	r3, #16
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e82:	e13e      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007e84:	cfff69f3 	.word	0xcfff69f3
 8007e88:	58000c00 	.word	0x58000c00
 8007e8c:	11fff4ff 	.word	0x11fff4ff
 8007e90:	40011000 	.word	0x40011000
 8007e94:	58024400 	.word	0x58024400
 8007e98:	40004400 	.word	0x40004400
 8007e9c:	40004800 	.word	0x40004800
 8007ea0:	40004c00 	.word	0x40004c00
 8007ea4:	40005000 	.word	0x40005000
 8007ea8:	2320      	movs	r3, #32
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eae:	e128      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007eb0:	2340      	movs	r3, #64	; 0x40
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eb6:	e124      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007eb8:	2380      	movs	r3, #128	; 0x80
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ebe:	e120      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4acb      	ldr	r2, [pc, #812]	; (80081f4 <UART_SetConfig+0x698>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d176      	bne.n	8007fb8 <UART_SetConfig+0x45c>
 8007eca:	4bcb      	ldr	r3, [pc, #812]	; (80081f8 <UART_SetConfig+0x69c>)
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ed2:	2b28      	cmp	r3, #40	; 0x28
 8007ed4:	d86c      	bhi.n	8007fb0 <UART_SetConfig+0x454>
 8007ed6:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <UART_SetConfig+0x380>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007f81 	.word	0x08007f81
 8007ee0:	08007fb1 	.word	0x08007fb1
 8007ee4:	08007fb1 	.word	0x08007fb1
 8007ee8:	08007fb1 	.word	0x08007fb1
 8007eec:	08007fb1 	.word	0x08007fb1
 8007ef0:	08007fb1 	.word	0x08007fb1
 8007ef4:	08007fb1 	.word	0x08007fb1
 8007ef8:	08007fb1 	.word	0x08007fb1
 8007efc:	08007f89 	.word	0x08007f89
 8007f00:	08007fb1 	.word	0x08007fb1
 8007f04:	08007fb1 	.word	0x08007fb1
 8007f08:	08007fb1 	.word	0x08007fb1
 8007f0c:	08007fb1 	.word	0x08007fb1
 8007f10:	08007fb1 	.word	0x08007fb1
 8007f14:	08007fb1 	.word	0x08007fb1
 8007f18:	08007fb1 	.word	0x08007fb1
 8007f1c:	08007f91 	.word	0x08007f91
 8007f20:	08007fb1 	.word	0x08007fb1
 8007f24:	08007fb1 	.word	0x08007fb1
 8007f28:	08007fb1 	.word	0x08007fb1
 8007f2c:	08007fb1 	.word	0x08007fb1
 8007f30:	08007fb1 	.word	0x08007fb1
 8007f34:	08007fb1 	.word	0x08007fb1
 8007f38:	08007fb1 	.word	0x08007fb1
 8007f3c:	08007f99 	.word	0x08007f99
 8007f40:	08007fb1 	.word	0x08007fb1
 8007f44:	08007fb1 	.word	0x08007fb1
 8007f48:	08007fb1 	.word	0x08007fb1
 8007f4c:	08007fb1 	.word	0x08007fb1
 8007f50:	08007fb1 	.word	0x08007fb1
 8007f54:	08007fb1 	.word	0x08007fb1
 8007f58:	08007fb1 	.word	0x08007fb1
 8007f5c:	08007fa1 	.word	0x08007fa1
 8007f60:	08007fb1 	.word	0x08007fb1
 8007f64:	08007fb1 	.word	0x08007fb1
 8007f68:	08007fb1 	.word	0x08007fb1
 8007f6c:	08007fb1 	.word	0x08007fb1
 8007f70:	08007fb1 	.word	0x08007fb1
 8007f74:	08007fb1 	.word	0x08007fb1
 8007f78:	08007fb1 	.word	0x08007fb1
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f86:	e0bc      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8e:	e0b8      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007f90:	2308      	movs	r3, #8
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f96:	e0b4      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9e:	e0b0      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa6:	e0ac      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007fa8:	2340      	movs	r3, #64	; 0x40
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fae:	e0a8      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007fb0:	2380      	movs	r3, #128	; 0x80
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb6:	e0a4      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a8f      	ldr	r2, [pc, #572]	; (80081fc <UART_SetConfig+0x6a0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d130      	bne.n	8008024 <UART_SetConfig+0x4c8>
 8007fc2:	4b8d      	ldr	r3, [pc, #564]	; (80081f8 <UART_SetConfig+0x69c>)
 8007fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	2b05      	cmp	r3, #5
 8007fcc:	d826      	bhi.n	800801c <UART_SetConfig+0x4c0>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <UART_SetConfig+0x478>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007fed 	.word	0x08007fed
 8007fd8:	08007ff5 	.word	0x08007ff5
 8007fdc:	08007ffd 	.word	0x08007ffd
 8007fe0:	08008005 	.word	0x08008005
 8007fe4:	0800800d 	.word	0x0800800d
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	2300      	movs	r3, #0
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff2:	e086      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e082      	b.n	8008102 <UART_SetConfig+0x5a6>
 8007ffc:	2308      	movs	r3, #8
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e07e      	b.n	8008102 <UART_SetConfig+0x5a6>
 8008004:	2310      	movs	r3, #16
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800a:	e07a      	b.n	8008102 <UART_SetConfig+0x5a6>
 800800c:	2320      	movs	r3, #32
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e076      	b.n	8008102 <UART_SetConfig+0x5a6>
 8008014:	2340      	movs	r3, #64	; 0x40
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e072      	b.n	8008102 <UART_SetConfig+0x5a6>
 800801c:	2380      	movs	r3, #128	; 0x80
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008022:	e06e      	b.n	8008102 <UART_SetConfig+0x5a6>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a75      	ldr	r2, [pc, #468]	; (8008200 <UART_SetConfig+0x6a4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d130      	bne.n	8008090 <UART_SetConfig+0x534>
 800802e:	4b72      	ldr	r3, [pc, #456]	; (80081f8 <UART_SetConfig+0x69c>)
 8008030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	2b05      	cmp	r3, #5
 8008038:	d826      	bhi.n	8008088 <UART_SetConfig+0x52c>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <UART_SetConfig+0x4e4>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008059 	.word	0x08008059
 8008044:	08008061 	.word	0x08008061
 8008048:	08008069 	.word	0x08008069
 800804c:	08008071 	.word	0x08008071
 8008050:	08008079 	.word	0x08008079
 8008054:	08008081 	.word	0x08008081
 8008058:	2300      	movs	r3, #0
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805e:	e050      	b.n	8008102 <UART_SetConfig+0x5a6>
 8008060:	2304      	movs	r3, #4
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008066:	e04c      	b.n	8008102 <UART_SetConfig+0x5a6>
 8008068:	2308      	movs	r3, #8
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e048      	b.n	8008102 <UART_SetConfig+0x5a6>
 8008070:	2310      	movs	r3, #16
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008076:	e044      	b.n	8008102 <UART_SetConfig+0x5a6>
 8008078:	2320      	movs	r3, #32
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807e:	e040      	b.n	8008102 <UART_SetConfig+0x5a6>
 8008080:	2340      	movs	r3, #64	; 0x40
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008086:	e03c      	b.n	8008102 <UART_SetConfig+0x5a6>
 8008088:	2380      	movs	r3, #128	; 0x80
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808e:	e038      	b.n	8008102 <UART_SetConfig+0x5a6>
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a5b      	ldr	r2, [pc, #364]	; (8008204 <UART_SetConfig+0x6a8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d130      	bne.n	80080fc <UART_SetConfig+0x5a0>
 800809a:	4b57      	ldr	r3, [pc, #348]	; (80081f8 <UART_SetConfig+0x69c>)
 800809c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	2b05      	cmp	r3, #5
 80080a4:	d826      	bhi.n	80080f4 <UART_SetConfig+0x598>
 80080a6:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <UART_SetConfig+0x550>)
 80080a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ac:	080080c5 	.word	0x080080c5
 80080b0:	080080cd 	.word	0x080080cd
 80080b4:	080080d5 	.word	0x080080d5
 80080b8:	080080dd 	.word	0x080080dd
 80080bc:	080080e5 	.word	0x080080e5
 80080c0:	080080ed 	.word	0x080080ed
 80080c4:	2302      	movs	r3, #2
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ca:	e01a      	b.n	8008102 <UART_SetConfig+0x5a6>
 80080cc:	2304      	movs	r3, #4
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d2:	e016      	b.n	8008102 <UART_SetConfig+0x5a6>
 80080d4:	2308      	movs	r3, #8
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e012      	b.n	8008102 <UART_SetConfig+0x5a6>
 80080dc:	2310      	movs	r3, #16
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e2:	e00e      	b.n	8008102 <UART_SetConfig+0x5a6>
 80080e4:	2320      	movs	r3, #32
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ea:	e00a      	b.n	8008102 <UART_SetConfig+0x5a6>
 80080ec:	2340      	movs	r3, #64	; 0x40
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f2:	e006      	b.n	8008102 <UART_SetConfig+0x5a6>
 80080f4:	2380      	movs	r3, #128	; 0x80
 80080f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fa:	e002      	b.n	8008102 <UART_SetConfig+0x5a6>
 80080fc:	2380      	movs	r3, #128	; 0x80
 80080fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a3f      	ldr	r2, [pc, #252]	; (8008204 <UART_SetConfig+0x6a8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	f040 80f8 	bne.w	80082fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800810e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008112:	2b20      	cmp	r3, #32
 8008114:	dc46      	bgt.n	80081a4 <UART_SetConfig+0x648>
 8008116:	2b02      	cmp	r3, #2
 8008118:	f2c0 8082 	blt.w	8008220 <UART_SetConfig+0x6c4>
 800811c:	3b02      	subs	r3, #2
 800811e:	2b1e      	cmp	r3, #30
 8008120:	d87e      	bhi.n	8008220 <UART_SetConfig+0x6c4>
 8008122:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <UART_SetConfig+0x5cc>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	080081ab 	.word	0x080081ab
 800812c:	08008221 	.word	0x08008221
 8008130:	080081b3 	.word	0x080081b3
 8008134:	08008221 	.word	0x08008221
 8008138:	08008221 	.word	0x08008221
 800813c:	08008221 	.word	0x08008221
 8008140:	080081c3 	.word	0x080081c3
 8008144:	08008221 	.word	0x08008221
 8008148:	08008221 	.word	0x08008221
 800814c:	08008221 	.word	0x08008221
 8008150:	08008221 	.word	0x08008221
 8008154:	08008221 	.word	0x08008221
 8008158:	08008221 	.word	0x08008221
 800815c:	08008221 	.word	0x08008221
 8008160:	080081d3 	.word	0x080081d3
 8008164:	08008221 	.word	0x08008221
 8008168:	08008221 	.word	0x08008221
 800816c:	08008221 	.word	0x08008221
 8008170:	08008221 	.word	0x08008221
 8008174:	08008221 	.word	0x08008221
 8008178:	08008221 	.word	0x08008221
 800817c:	08008221 	.word	0x08008221
 8008180:	08008221 	.word	0x08008221
 8008184:	08008221 	.word	0x08008221
 8008188:	08008221 	.word	0x08008221
 800818c:	08008221 	.word	0x08008221
 8008190:	08008221 	.word	0x08008221
 8008194:	08008221 	.word	0x08008221
 8008198:	08008221 	.word	0x08008221
 800819c:	08008221 	.word	0x08008221
 80081a0:	08008213 	.word	0x08008213
 80081a4:	2b40      	cmp	r3, #64	; 0x40
 80081a6:	d037      	beq.n	8008218 <UART_SetConfig+0x6bc>
 80081a8:	e03a      	b.n	8008220 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80081aa:	f7fc ffdb 	bl	8005164 <HAL_RCCEx_GetD3PCLK1Freq>
 80081ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081b0:	e03c      	b.n	800822c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fc ffea 	bl	8005190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c0:	e034      	b.n	800822c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081c2:	f107 0318 	add.w	r3, r7, #24
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fd f936 	bl	8005438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d0:	e02c      	b.n	800822c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081d2:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <UART_SetConfig+0x69c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d016      	beq.n	800820c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081de:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <UART_SetConfig+0x69c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	08db      	lsrs	r3, r3, #3
 80081e4:	f003 0303 	and.w	r3, r3, #3
 80081e8:	4a07      	ldr	r2, [pc, #28]	; (8008208 <UART_SetConfig+0x6ac>)
 80081ea:	fa22 f303 	lsr.w	r3, r2, r3
 80081ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081f0:	e01c      	b.n	800822c <UART_SetConfig+0x6d0>
 80081f2:	bf00      	nop
 80081f4:	40011400 	.word	0x40011400
 80081f8:	58024400 	.word	0x58024400
 80081fc:	40007800 	.word	0x40007800
 8008200:	40007c00 	.word	0x40007c00
 8008204:	58000c00 	.word	0x58000c00
 8008208:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800820c:	4b9d      	ldr	r3, [pc, #628]	; (8008484 <UART_SetConfig+0x928>)
 800820e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008210:	e00c      	b.n	800822c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008212:	4b9d      	ldr	r3, [pc, #628]	; (8008488 <UART_SetConfig+0x92c>)
 8008214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008216:	e009      	b.n	800822c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800821e:	e005      	b.n	800822c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800822a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800822c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 81de 	beq.w	80085f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	4a94      	ldr	r2, [pc, #592]	; (800848c <UART_SetConfig+0x930>)
 800823a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800823e:	461a      	mov	r2, r3
 8008240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008242:	fbb3 f3f2 	udiv	r3, r3, r2
 8008246:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	4613      	mov	r3, r2
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	4413      	add	r3, r2
 8008252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008254:	429a      	cmp	r2, r3
 8008256:	d305      	bcc.n	8008264 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800825e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008260:	429a      	cmp	r2, r3
 8008262:	d903      	bls.n	800826c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800826a:	e1c1      	b.n	80085f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800826c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826e:	2200      	movs	r2, #0
 8008270:	60bb      	str	r3, [r7, #8]
 8008272:	60fa      	str	r2, [r7, #12]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	4a84      	ldr	r2, [pc, #528]	; (800848c <UART_SetConfig+0x930>)
 800827a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800827e:	b29b      	uxth	r3, r3
 8008280:	2200      	movs	r2, #0
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	607a      	str	r2, [r7, #4]
 8008286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800828e:	f7f8 f827 	bl	80002e0 <__aeabi_uldivmod>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	020b      	lsls	r3, r1, #8
 80082a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082a8:	0202      	lsls	r2, r0, #8
 80082aa:	6979      	ldr	r1, [r7, #20]
 80082ac:	6849      	ldr	r1, [r1, #4]
 80082ae:	0849      	lsrs	r1, r1, #1
 80082b0:	2000      	movs	r0, #0
 80082b2:	460c      	mov	r4, r1
 80082b4:	4605      	mov	r5, r0
 80082b6:	eb12 0804 	adds.w	r8, r2, r4
 80082ba:	eb43 0905 	adc.w	r9, r3, r5
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	469a      	mov	sl, r3
 80082c6:	4693      	mov	fp, r2
 80082c8:	4652      	mov	r2, sl
 80082ca:	465b      	mov	r3, fp
 80082cc:	4640      	mov	r0, r8
 80082ce:	4649      	mov	r1, r9
 80082d0:	f7f8 f806 	bl	80002e0 <__aeabi_uldivmod>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4613      	mov	r3, r2
 80082da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e2:	d308      	bcc.n	80082f6 <UART_SetConfig+0x79a>
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ea:	d204      	bcs.n	80082f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082f2:	60da      	str	r2, [r3, #12]
 80082f4:	e17c      	b.n	80085f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082fc:	e178      	b.n	80085f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008306:	f040 80c5 	bne.w	8008494 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800830a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800830e:	2b20      	cmp	r3, #32
 8008310:	dc48      	bgt.n	80083a4 <UART_SetConfig+0x848>
 8008312:	2b00      	cmp	r3, #0
 8008314:	db7b      	blt.n	800840e <UART_SetConfig+0x8b2>
 8008316:	2b20      	cmp	r3, #32
 8008318:	d879      	bhi.n	800840e <UART_SetConfig+0x8b2>
 800831a:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <UART_SetConfig+0x7c4>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	080083ab 	.word	0x080083ab
 8008324:	080083b3 	.word	0x080083b3
 8008328:	0800840f 	.word	0x0800840f
 800832c:	0800840f 	.word	0x0800840f
 8008330:	080083bb 	.word	0x080083bb
 8008334:	0800840f 	.word	0x0800840f
 8008338:	0800840f 	.word	0x0800840f
 800833c:	0800840f 	.word	0x0800840f
 8008340:	080083cb 	.word	0x080083cb
 8008344:	0800840f 	.word	0x0800840f
 8008348:	0800840f 	.word	0x0800840f
 800834c:	0800840f 	.word	0x0800840f
 8008350:	0800840f 	.word	0x0800840f
 8008354:	0800840f 	.word	0x0800840f
 8008358:	0800840f 	.word	0x0800840f
 800835c:	0800840f 	.word	0x0800840f
 8008360:	080083db 	.word	0x080083db
 8008364:	0800840f 	.word	0x0800840f
 8008368:	0800840f 	.word	0x0800840f
 800836c:	0800840f 	.word	0x0800840f
 8008370:	0800840f 	.word	0x0800840f
 8008374:	0800840f 	.word	0x0800840f
 8008378:	0800840f 	.word	0x0800840f
 800837c:	0800840f 	.word	0x0800840f
 8008380:	0800840f 	.word	0x0800840f
 8008384:	0800840f 	.word	0x0800840f
 8008388:	0800840f 	.word	0x0800840f
 800838c:	0800840f 	.word	0x0800840f
 8008390:	0800840f 	.word	0x0800840f
 8008394:	0800840f 	.word	0x0800840f
 8008398:	0800840f 	.word	0x0800840f
 800839c:	0800840f 	.word	0x0800840f
 80083a0:	08008401 	.word	0x08008401
 80083a4:	2b40      	cmp	r3, #64	; 0x40
 80083a6:	d02e      	beq.n	8008406 <UART_SetConfig+0x8aa>
 80083a8:	e031      	b.n	800840e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083aa:	f7fb fc63 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 80083ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083b0:	e033      	b.n	800841a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083b2:	f7fb fc75 	bl	8003ca0 <HAL_RCC_GetPCLK2Freq>
 80083b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083b8:	e02f      	b.n	800841a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fc fee6 	bl	8005190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c8:	e027      	b.n	800841a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ca:	f107 0318 	add.w	r3, r7, #24
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fd f832 	bl	8005438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d8:	e01f      	b.n	800841a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083da:	4b2d      	ldr	r3, [pc, #180]	; (8008490 <UART_SetConfig+0x934>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083e6:	4b2a      	ldr	r3, [pc, #168]	; (8008490 <UART_SetConfig+0x934>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	08db      	lsrs	r3, r3, #3
 80083ec:	f003 0303 	and.w	r3, r3, #3
 80083f0:	4a24      	ldr	r2, [pc, #144]	; (8008484 <UART_SetConfig+0x928>)
 80083f2:	fa22 f303 	lsr.w	r3, r2, r3
 80083f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083f8:	e00f      	b.n	800841a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80083fa:	4b22      	ldr	r3, [pc, #136]	; (8008484 <UART_SetConfig+0x928>)
 80083fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083fe:	e00c      	b.n	800841a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008400:	4b21      	ldr	r3, [pc, #132]	; (8008488 <UART_SetConfig+0x92c>)
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008404:	e009      	b.n	800841a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800840c:	e005      	b.n	800841a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008418:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800841a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80e7 	beq.w	80085f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	4a19      	ldr	r2, [pc, #100]	; (800848c <UART_SetConfig+0x930>)
 8008428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800842c:	461a      	mov	r2, r3
 800842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008430:	fbb3 f3f2 	udiv	r3, r3, r2
 8008434:	005a      	lsls	r2, r3, #1
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	085b      	lsrs	r3, r3, #1
 800843c:	441a      	add	r2, r3
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	fbb2 f3f3 	udiv	r3, r2, r3
 8008446:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	2b0f      	cmp	r3, #15
 800844c:	d916      	bls.n	800847c <UART_SetConfig+0x920>
 800844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008454:	d212      	bcs.n	800847c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	b29b      	uxth	r3, r3
 800845a:	f023 030f 	bic.w	r3, r3, #15
 800845e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008462:	085b      	lsrs	r3, r3, #1
 8008464:	b29b      	uxth	r3, r3
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	b29a      	uxth	r2, r3
 800846c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800846e:	4313      	orrs	r3, r2
 8008470:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008478:	60da      	str	r2, [r3, #12]
 800847a:	e0b9      	b.n	80085f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008482:	e0b5      	b.n	80085f0 <UART_SetConfig+0xa94>
 8008484:	03d09000 	.word	0x03d09000
 8008488:	003d0900 	.word	0x003d0900
 800848c:	0800d93c 	.word	0x0800d93c
 8008490:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008494:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008498:	2b20      	cmp	r3, #32
 800849a:	dc49      	bgt.n	8008530 <UART_SetConfig+0x9d4>
 800849c:	2b00      	cmp	r3, #0
 800849e:	db7c      	blt.n	800859a <UART_SetConfig+0xa3e>
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d87a      	bhi.n	800859a <UART_SetConfig+0xa3e>
 80084a4:	a201      	add	r2, pc, #4	; (adr r2, 80084ac <UART_SetConfig+0x950>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	08008537 	.word	0x08008537
 80084b0:	0800853f 	.word	0x0800853f
 80084b4:	0800859b 	.word	0x0800859b
 80084b8:	0800859b 	.word	0x0800859b
 80084bc:	08008547 	.word	0x08008547
 80084c0:	0800859b 	.word	0x0800859b
 80084c4:	0800859b 	.word	0x0800859b
 80084c8:	0800859b 	.word	0x0800859b
 80084cc:	08008557 	.word	0x08008557
 80084d0:	0800859b 	.word	0x0800859b
 80084d4:	0800859b 	.word	0x0800859b
 80084d8:	0800859b 	.word	0x0800859b
 80084dc:	0800859b 	.word	0x0800859b
 80084e0:	0800859b 	.word	0x0800859b
 80084e4:	0800859b 	.word	0x0800859b
 80084e8:	0800859b 	.word	0x0800859b
 80084ec:	08008567 	.word	0x08008567
 80084f0:	0800859b 	.word	0x0800859b
 80084f4:	0800859b 	.word	0x0800859b
 80084f8:	0800859b 	.word	0x0800859b
 80084fc:	0800859b 	.word	0x0800859b
 8008500:	0800859b 	.word	0x0800859b
 8008504:	0800859b 	.word	0x0800859b
 8008508:	0800859b 	.word	0x0800859b
 800850c:	0800859b 	.word	0x0800859b
 8008510:	0800859b 	.word	0x0800859b
 8008514:	0800859b 	.word	0x0800859b
 8008518:	0800859b 	.word	0x0800859b
 800851c:	0800859b 	.word	0x0800859b
 8008520:	0800859b 	.word	0x0800859b
 8008524:	0800859b 	.word	0x0800859b
 8008528:	0800859b 	.word	0x0800859b
 800852c:	0800858d 	.word	0x0800858d
 8008530:	2b40      	cmp	r3, #64	; 0x40
 8008532:	d02e      	beq.n	8008592 <UART_SetConfig+0xa36>
 8008534:	e031      	b.n	800859a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008536:	f7fb fb9d 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 800853a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800853c:	e033      	b.n	80085a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800853e:	f7fb fbaf 	bl	8003ca0 <HAL_RCC_GetPCLK2Freq>
 8008542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008544:	e02f      	b.n	80085a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800854a:	4618      	mov	r0, r3
 800854c:	f7fc fe20 	bl	8005190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008554:	e027      	b.n	80085a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008556:	f107 0318 	add.w	r3, r7, #24
 800855a:	4618      	mov	r0, r3
 800855c:	f7fc ff6c 	bl	8005438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008564:	e01f      	b.n	80085a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008566:	4b2d      	ldr	r3, [pc, #180]	; (800861c <UART_SetConfig+0xac0>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b00      	cmp	r3, #0
 8008570:	d009      	beq.n	8008586 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008572:	4b2a      	ldr	r3, [pc, #168]	; (800861c <UART_SetConfig+0xac0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	08db      	lsrs	r3, r3, #3
 8008578:	f003 0303 	and.w	r3, r3, #3
 800857c:	4a28      	ldr	r2, [pc, #160]	; (8008620 <UART_SetConfig+0xac4>)
 800857e:	fa22 f303 	lsr.w	r3, r2, r3
 8008582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008584:	e00f      	b.n	80085a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008586:	4b26      	ldr	r3, [pc, #152]	; (8008620 <UART_SetConfig+0xac4>)
 8008588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800858a:	e00c      	b.n	80085a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800858c:	4b25      	ldr	r3, [pc, #148]	; (8008624 <UART_SetConfig+0xac8>)
 800858e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008590:	e009      	b.n	80085a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008598:	e005      	b.n	80085a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80085a4:	bf00      	nop
    }

    if (pclk != 0U)
 80085a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d021      	beq.n	80085f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	4a1d      	ldr	r2, [pc, #116]	; (8008628 <UART_SetConfig+0xacc>)
 80085b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b6:	461a      	mov	r2, r3
 80085b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	085b      	lsrs	r3, r3, #1
 80085c4:	441a      	add	r2, r3
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	2b0f      	cmp	r3, #15
 80085d4:	d909      	bls.n	80085ea <UART_SetConfig+0xa8e>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085dc:	d205      	bcs.n	80085ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60da      	str	r2, [r3, #12]
 80085e8:	e002      	b.n	80085f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2200      	movs	r2, #0
 8008604:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2200      	movs	r2, #0
 800860a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800860c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008610:	4618      	mov	r0, r3
 8008612:	3748      	adds	r7, #72	; 0x48
 8008614:	46bd      	mov	sp, r7
 8008616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800861a:	bf00      	nop
 800861c:	58024400 	.word	0x58024400
 8008620:	03d09000 	.word	0x03d09000
 8008624:	003d0900 	.word	0x003d0900
 8008628:	0800d93c 	.word	0x0800d93c

0800862c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008638:	f003 0308 	and.w	r3, r3, #8
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00a      	beq.n	8008656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	f003 0310 	and.w	r3, r3, #16
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	430a      	orrs	r2, r1
 80086fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d01a      	beq.n	8008742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800872a:	d10a      	bne.n	8008742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	605a      	str	r2, [r3, #4]
  }
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b098      	sub	sp, #96	; 0x60
 8008774:	af02      	add	r7, sp, #8
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008780:	f7f9 f944 	bl	8001a0c <HAL_GetTick>
 8008784:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0308 	and.w	r3, r3, #8
 8008790:	2b08      	cmp	r3, #8
 8008792:	d12f      	bne.n	80087f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800879c:	2200      	movs	r2, #0
 800879e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f88e 	bl	80088c4 <UART_WaitOnFlagUntilTimeout>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d022      	beq.n	80087f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087c2:	653b      	str	r3, [r7, #80]	; 0x50
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	461a      	mov	r2, r3
 80087ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087cc:	647b      	str	r3, [r7, #68]	; 0x44
 80087ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e6      	bne.n	80087ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e063      	b.n	80088bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0304 	and.w	r3, r3, #4
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d149      	bne.n	8008896 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008802:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800880a:	2200      	movs	r2, #0
 800880c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f857 	bl	80088c4 <UART_WaitOnFlagUntilTimeout>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d03c      	beq.n	8008896 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	623b      	str	r3, [r7, #32]
   return(result);
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800883a:	633b      	str	r3, [r7, #48]	; 0x30
 800883c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1e6      	bne.n	800881c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3308      	adds	r3, #8
 8008854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	e853 3f00 	ldrex	r3, [r3]
 800885c:	60fb      	str	r3, [r7, #12]
   return(result);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f023 0301 	bic.w	r3, r3, #1
 8008864:	64bb      	str	r3, [r7, #72]	; 0x48
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3308      	adds	r3, #8
 800886c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800886e:	61fa      	str	r2, [r7, #28]
 8008870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008872:	69b9      	ldr	r1, [r7, #24]
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	e841 2300 	strex	r3, r2, [r1]
 800887a:	617b      	str	r3, [r7, #20]
   return(result);
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1e5      	bne.n	800884e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2220      	movs	r2, #32
 8008886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e012      	b.n	80088bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3758      	adds	r7, #88	; 0x58
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088d4:	e04f      	b.n	8008976 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088dc:	d04b      	beq.n	8008976 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088de:	f7f9 f895 	bl	8001a0c <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d302      	bcc.n	80088f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e04e      	b.n	8008996 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0304 	and.w	r3, r3, #4
 8008902:	2b00      	cmp	r3, #0
 8008904:	d037      	beq.n	8008976 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b80      	cmp	r3, #128	; 0x80
 800890a:	d034      	beq.n	8008976 <UART_WaitOnFlagUntilTimeout+0xb2>
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b40      	cmp	r3, #64	; 0x40
 8008910:	d031      	beq.n	8008976 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	f003 0308 	and.w	r3, r3, #8
 800891c:	2b08      	cmp	r3, #8
 800891e:	d110      	bne.n	8008942 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2208      	movs	r2, #8
 8008926:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 f95b 	bl	8008be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2208      	movs	r2, #8
 8008932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e029      	b.n	8008996 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800894c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008950:	d111      	bne.n	8008976 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800895a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 f941 	bl	8008be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2220      	movs	r2, #32
 8008966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e00f      	b.n	8008996 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69da      	ldr	r2, [r3, #28]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4013      	ands	r3, r2
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	429a      	cmp	r2, r3
 8008984:	bf0c      	ite	eq
 8008986:	2301      	moveq	r3, #1
 8008988:	2300      	movne	r3, #0
 800898a:	b2db      	uxtb	r3, r3
 800898c:	461a      	mov	r2, r3
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	429a      	cmp	r2, r3
 8008992:	d0a0      	beq.n	80088d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b0a3      	sub	sp, #140	; 0x8c
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	4613      	mov	r3, r2
 80089ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	88fa      	ldrh	r2, [r7, #6]
 80089b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	88fa      	ldrh	r2, [r7, #6]
 80089c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d2:	d10e      	bne.n	80089f2 <UART_Start_Receive_IT+0x52>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d105      	bne.n	80089e8 <UART_Start_Receive_IT+0x48>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80089e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089e6:	e02d      	b.n	8008a44 <UART_Start_Receive_IT+0xa4>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	22ff      	movs	r2, #255	; 0xff
 80089ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089f0:	e028      	b.n	8008a44 <UART_Start_Receive_IT+0xa4>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10d      	bne.n	8008a16 <UART_Start_Receive_IT+0x76>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d104      	bne.n	8008a0c <UART_Start_Receive_IT+0x6c>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	22ff      	movs	r2, #255	; 0xff
 8008a06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a0a:	e01b      	b.n	8008a44 <UART_Start_Receive_IT+0xa4>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	227f      	movs	r2, #127	; 0x7f
 8008a10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a14:	e016      	b.n	8008a44 <UART_Start_Receive_IT+0xa4>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a1e:	d10d      	bne.n	8008a3c <UART_Start_Receive_IT+0x9c>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d104      	bne.n	8008a32 <UART_Start_Receive_IT+0x92>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	227f      	movs	r2, #127	; 0x7f
 8008a2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a30:	e008      	b.n	8008a44 <UART_Start_Receive_IT+0xa4>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	223f      	movs	r2, #63	; 0x3f
 8008a36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a3a:	e003      	b.n	8008a44 <UART_Start_Receive_IT+0xa4>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2222      	movs	r2, #34	; 0x22
 8008a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3308      	adds	r3, #8
 8008a5a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a66:	f043 0301 	orr.w	r3, r3, #1
 8008a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008a78:	673a      	str	r2, [r7, #112]	; 0x70
 8008a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008a7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a80:	e841 2300 	strex	r3, r2, [r1]
 8008a84:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1e3      	bne.n	8008a54 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a94:	d14f      	bne.n	8008b36 <UART_Start_Receive_IT+0x196>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a9c:	88fa      	ldrh	r2, [r7, #6]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d349      	bcc.n	8008b36 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aaa:	d107      	bne.n	8008abc <UART_Start_Receive_IT+0x11c>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d103      	bne.n	8008abc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4a47      	ldr	r2, [pc, #284]	; (8008bd4 <UART_Start_Receive_IT+0x234>)
 8008ab8:	675a      	str	r2, [r3, #116]	; 0x74
 8008aba:	e002      	b.n	8008ac2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4a46      	ldr	r2, [pc, #280]	; (8008bd8 <UART_Start_Receive_IT+0x238>)
 8008ac0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d01a      	beq.n	8008b00 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad2:	e853 3f00 	ldrex	r3, [r3]
 8008ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008af2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008af4:	e841 2300 	strex	r3, r2, [r1]
 8008af8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1e4      	bne.n	8008aca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3308      	adds	r3, #8
 8008b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b20:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e5      	bne.n	8008b00 <UART_Start_Receive_IT+0x160>
 8008b34:	e046      	b.n	8008bc4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3e:	d107      	bne.n	8008b50 <UART_Start_Receive_IT+0x1b0>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d103      	bne.n	8008b50 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4a24      	ldr	r2, [pc, #144]	; (8008bdc <UART_Start_Receive_IT+0x23c>)
 8008b4c:	675a      	str	r2, [r3, #116]	; 0x74
 8008b4e:	e002      	b.n	8008b56 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4a23      	ldr	r2, [pc, #140]	; (8008be0 <UART_Start_Receive_IT+0x240>)
 8008b54:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d019      	beq.n	8008b92 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008b72:	677b      	str	r3, [r7, #116]	; 0x74
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e6      	bne.n	8008b5e <UART_Start_Receive_IT+0x1be>
 8008b90:	e018      	b.n	8008bc4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f043 0320 	orr.w	r3, r3, #32
 8008ba6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bb0:	623b      	str	r3, [r7, #32]
 8008bb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	69f9      	ldr	r1, [r7, #28]
 8008bb6:	6a3a      	ldr	r2, [r7, #32]
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e6      	bne.n	8008b92 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	378c      	adds	r7, #140	; 0x8c
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	08009405 	.word	0x08009405
 8008bd8:	080090a5 	.word	0x080090a5
 8008bdc:	08008eed 	.word	0x08008eed
 8008be0:	08008d35 	.word	0x08008d35

08008be4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b095      	sub	sp, #84	; 0x54
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e6      	bne.n	8008bec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3308      	adds	r3, #8
 8008c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	4b1e      	ldr	r3, [pc, #120]	; (8008cac <UART_EndRxTransfer+0xc8>)
 8008c32:	4013      	ands	r3, r2
 8008c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c46:	e841 2300 	strex	r3, r2, [r1]
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1e5      	bne.n	8008c1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d118      	bne.n	8008c8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	e853 3f00 	ldrex	r3, [r3]
 8008c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f023 0310 	bic.w	r3, r3, #16
 8008c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	461a      	mov	r2, r3
 8008c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	6979      	ldr	r1, [r7, #20]
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	613b      	str	r3, [r7, #16]
   return(result);
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e6      	bne.n	8008c5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008ca0:	bf00      	nop
 8008ca2:	3754      	adds	r7, #84	; 0x54
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	effffffe 	.word	0xeffffffe

08008cb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7fe ff2e 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b088      	sub	sp, #32
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	61bb      	str	r3, [r7, #24]
 8008d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6979      	ldr	r1, [r7, #20]
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e6      	bne.n	8008ce4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7fe fef9 	bl	8007b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d2a:	bf00      	nop
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b09c      	sub	sp, #112	; 0x70
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d42:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d4c:	2b22      	cmp	r3, #34	; 0x22
 8008d4e:	f040 80be 	bne.w	8008ece <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d60:	b2d9      	uxtb	r1, r3
 8008d62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6c:	400a      	ands	r2, r1
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	3b01      	subs	r3, #1
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f040 80a1 	bne.w	8008ede <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008db0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dba:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dc2:	e841 2300 	strex	r3, r2, [r1]
 8008dc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1e6      	bne.n	8008d9c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de0:	f023 0301 	bic.w	r3, r3, #1
 8008de4:	667b      	str	r3, [r7, #100]	; 0x64
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3308      	adds	r3, #8
 8008dec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008dee:	647a      	str	r2, [r7, #68]	; 0x44
 8008df0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e5      	bne.n	8008dce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a33      	ldr	r2, [pc, #204]	; (8008ee8 <UART_RxISR_8BIT+0x1b4>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d01f      	beq.n	8008e60 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d018      	beq.n	8008e60 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	623b      	str	r3, [r7, #32]
   return(result);
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e42:	663b      	str	r3, [r7, #96]	; 0x60
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8008e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e54:	e841 2300 	strex	r3, r2, [r1]
 8008e58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e6      	bne.n	8008e2e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d12e      	bne.n	8008ec6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f023 0310 	bic.w	r3, r3, #16
 8008e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e90:	69b9      	ldr	r1, [r7, #24]
 8008e92:	69fa      	ldr	r2, [r7, #28]
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	617b      	str	r3, [r7, #20]
   return(result);
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e6      	bne.n	8008e6e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	f003 0310 	and.w	r3, r3, #16
 8008eaa:	2b10      	cmp	r3, #16
 8008eac:	d103      	bne.n	8008eb6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2210      	movs	r2, #16
 8008eb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7fe fe40 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ec4:	e00b      	b.n	8008ede <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7f7 fbc2 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8008ecc:	e007      	b.n	8008ede <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	699a      	ldr	r2, [r3, #24]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f042 0208 	orr.w	r2, r2, #8
 8008edc:	619a      	str	r2, [r3, #24]
}
 8008ede:	bf00      	nop
 8008ee0:	3770      	adds	r7, #112	; 0x70
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	58000c00 	.word	0x58000c00

08008eec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b09c      	sub	sp, #112	; 0x70
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008efa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f04:	2b22      	cmp	r3, #34	; 0x22
 8008f06:	f040 80be 	bne.w	8009086 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f18:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f1a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008f1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008f22:	4013      	ands	r3, r2
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f2e:	1c9a      	adds	r2, r3, #2
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f040 80a1 	bne.w	8009096 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f68:	667b      	str	r3, [r7, #100]	; 0x64
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f72:	657b      	str	r3, [r7, #84]	; 0x54
 8008f74:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1e6      	bne.n	8008f54 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f90:	e853 3f00 	ldrex	r3, [r3]
 8008f94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	f023 0301 	bic.w	r3, r3, #1
 8008f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fa6:	643a      	str	r2, [r7, #64]	; 0x40
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e5      	bne.n	8008f86 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a33      	ldr	r2, [pc, #204]	; (80090a0 <UART_RxISR_16BIT+0x1b4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d01f      	beq.n	8009018 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d018      	beq.n	8009018 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009006:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800900a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e6      	bne.n	8008fe6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800901c:	2b01      	cmp	r3, #1
 800901e:	d12e      	bne.n	800907e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	60bb      	str	r3, [r7, #8]
   return(result);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f023 0310 	bic.w	r3, r3, #16
 800903a:	65bb      	str	r3, [r7, #88]	; 0x58
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6979      	ldr	r1, [r7, #20]
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	613b      	str	r3, [r7, #16]
   return(result);
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e6      	bne.n	8009026 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	f003 0310 	and.w	r3, r3, #16
 8009062:	2b10      	cmp	r3, #16
 8009064:	d103      	bne.n	800906e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2210      	movs	r2, #16
 800906c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7fe fd64 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800907c:	e00b      	b.n	8009096 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7f7 fae6 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8009084:	e007      	b.n	8009096 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	699a      	ldr	r2, [r3, #24]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f042 0208 	orr.w	r2, r2, #8
 8009094:	619a      	str	r2, [r3, #24]
}
 8009096:	bf00      	nop
 8009098:	3770      	adds	r7, #112	; 0x70
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	58000c00 	.word	0x58000c00

080090a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b0ac      	sub	sp, #176	; 0xb0
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090da:	2b22      	cmp	r3, #34	; 0x22
 80090dc:	f040 8180 	bne.w	80093e0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090e6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090ea:	e123      	b.n	8009334 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80090fa:	b2d9      	uxtb	r1, r3
 80090fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009100:	b2da      	uxtb	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009106:	400a      	ands	r2, r1
 8009108:	b2d2      	uxtb	r2, r2
 800910a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800911c:	b29b      	uxth	r3, r3
 800911e:	3b01      	subs	r3, #1
 8009120:	b29a      	uxth	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	2b00      	cmp	r3, #0
 800913c:	d053      	beq.n	80091e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800913e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d011      	beq.n	800916e <UART_RxISR_8BIT_FIFOEN+0xca>
 800914a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800914e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00b      	beq.n	800916e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2201      	movs	r2, #1
 800915c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009164:	f043 0201 	orr.w	r2, r3, #1
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800916e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d011      	beq.n	800919e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800917a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00b      	beq.n	800919e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2202      	movs	r2, #2
 800918c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009194:	f043 0204 	orr.w	r2, r3, #4
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800919e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091a2:	f003 0304 	and.w	r3, r3, #4
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d011      	beq.n	80091ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80091aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00b      	beq.n	80091ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2204      	movs	r2, #4
 80091bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c4:	f043 0202 	orr.w	r2, r3, #2
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d006      	beq.n	80091e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7fe fca9 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f040 80a0 	bne.w	8009334 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	461a      	mov	r2, r3
 8009212:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009216:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009218:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800921c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e4      	bne.n	80091f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3308      	adds	r3, #8
 8009230:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800923a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800923c:	4b6e      	ldr	r3, [pc, #440]	; (80093f8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800923e:	4013      	ands	r3, r2
 8009240:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3308      	adds	r3, #8
 800924a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800924e:	66ba      	str	r2, [r7, #104]	; 0x68
 8009250:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009254:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009256:	e841 2300 	strex	r3, r2, [r1]
 800925a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800925c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1e3      	bne.n	800922a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2220      	movs	r2, #32
 8009266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a60      	ldr	r2, [pc, #384]	; (80093fc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d021      	beq.n	80092c4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d01a      	beq.n	80092c4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800929c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800929e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092b0:	657b      	str	r3, [r7, #84]	; 0x54
 80092b2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e4      	bne.n	800928e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d130      	bne.n	800932e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	e853 3f00 	ldrex	r3, [r3]
 80092de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	f023 0310 	bic.w	r3, r3, #16
 80092e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092f4:	643b      	str	r3, [r7, #64]	; 0x40
 80092f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092fc:	e841 2300 	strex	r3, r2, [r1]
 8009300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e4      	bne.n	80092d2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	f003 0310 	and.w	r3, r3, #16
 8009312:	2b10      	cmp	r3, #16
 8009314:	d103      	bne.n	800931e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2210      	movs	r2, #16
 800931c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7fe fc0c 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
 800932c:	e002      	b.n	8009334 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7f7 f98e 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009334:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009338:	2b00      	cmp	r3, #0
 800933a:	d006      	beq.n	800934a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800933c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009340:	f003 0320 	and.w	r3, r3, #32
 8009344:	2b00      	cmp	r3, #0
 8009346:	f47f aed1 	bne.w	80090ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009350:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009354:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009358:	2b00      	cmp	r3, #0
 800935a:	d049      	beq.n	80093f0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009362:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009366:	429a      	cmp	r2, r3
 8009368:	d242      	bcs.n	80093f0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	61fb      	str	r3, [r7, #28]
   return(result);
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3308      	adds	r3, #8
 800938a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800938e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009390:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e3      	bne.n	800936a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a16      	ldr	r2, [pc, #88]	; (8009400 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80093a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	f043 0320 	orr.w	r3, r3, #32
 80093bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093ca:	61bb      	str	r3, [r7, #24]
 80093cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	6979      	ldr	r1, [r7, #20]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	613b      	str	r3, [r7, #16]
   return(result);
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e4      	bne.n	80093a8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093de:	e007      	b.n	80093f0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699a      	ldr	r2, [r3, #24]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f042 0208 	orr.w	r2, r2, #8
 80093ee:	619a      	str	r2, [r3, #24]
}
 80093f0:	bf00      	nop
 80093f2:	37b0      	adds	r7, #176	; 0xb0
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	effffffe 	.word	0xeffffffe
 80093fc:	58000c00 	.word	0x58000c00
 8009400:	08008d35 	.word	0x08008d35

08009404 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b0ae      	sub	sp, #184	; 0xb8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009412:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800943a:	2b22      	cmp	r3, #34	; 0x22
 800943c:	f040 8184 	bne.w	8009748 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009446:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800944a:	e127      	b.n	800969c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800945e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009462:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009466:	4013      	ands	r3, r2
 8009468:	b29a      	uxth	r2, r3
 800946a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800946e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009474:	1c9a      	adds	r2, r3, #2
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009480:	b29b      	uxth	r3, r3
 8009482:	3b01      	subs	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d053      	beq.n	800954a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d011      	beq.n	80094d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80094ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00b      	beq.n	80094d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2201      	movs	r2, #1
 80094c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094c8:	f043 0201 	orr.w	r2, r3, #1
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d011      	beq.n	8009502 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80094de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00b      	beq.n	8009502 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2202      	movs	r2, #2
 80094f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f8:	f043 0204 	orr.w	r2, r3, #4
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009506:	f003 0304 	and.w	r3, r3, #4
 800950a:	2b00      	cmp	r3, #0
 800950c:	d011      	beq.n	8009532 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800950e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00b      	beq.n	8009532 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2204      	movs	r2, #4
 8009520:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009528:	f043 0202 	orr.w	r2, r3, #2
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009538:	2b00      	cmp	r3, #0
 800953a:	d006      	beq.n	800954a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7fe faf7 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009550:	b29b      	uxth	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	f040 80a2 	bne.w	800969c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009560:	e853 3f00 	ldrex	r3, [r3]
 8009564:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800956c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800957a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800957e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009580:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009582:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800958c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e2      	bne.n	8009558 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3308      	adds	r3, #8
 8009598:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800959c:	e853 3f00 	ldrex	r3, [r3]
 80095a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095a4:	4b6e      	ldr	r3, [pc, #440]	; (8009760 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80095a6:	4013      	ands	r3, r2
 80095a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3308      	adds	r3, #8
 80095b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80095b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e3      	bne.n	8009592 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a60      	ldr	r2, [pc, #384]	; (8009764 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d021      	beq.n	800962c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d01a      	beq.n	800962c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095fe:	e853 3f00 	ldrex	r3, [r3]
 8009602:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800960a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009618:	65bb      	str	r3, [r7, #88]	; 0x58
 800961a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800961e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009620:	e841 2300 	strex	r3, r2, [r1]
 8009624:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1e4      	bne.n	80095f6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009630:	2b01      	cmp	r3, #1
 8009632:	d130      	bne.n	8009696 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	e853 3f00 	ldrex	r3, [r3]
 8009646:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964a:	f023 0310 	bic.w	r3, r3, #16
 800964e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800965c:	647b      	str	r3, [r7, #68]	; 0x44
 800965e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009660:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009664:	e841 2300 	strex	r3, r2, [r1]
 8009668:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800966a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1e4      	bne.n	800963a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f003 0310 	and.w	r3, r3, #16
 800967a:	2b10      	cmp	r3, #16
 800967c:	d103      	bne.n	8009686 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2210      	movs	r2, #16
 8009684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7fe fa58 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
 8009694:	e002      	b.n	800969c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7f6 ffda 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800969c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d006      	beq.n	80096b2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80096a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096a8:	f003 0320 	and.w	r3, r3, #32
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f47f aecd 	bne.w	800944c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096b8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d049      	beq.n	8009758 <UART_RxISR_16BIT_FIFOEN+0x354>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096ca:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d242      	bcs.n	8009758 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3308      	adds	r3, #8
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	623b      	str	r3, [r7, #32]
   return(result);
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3308      	adds	r3, #8
 80096f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80096f6:	633a      	str	r2, [r7, #48]	; 0x30
 80096f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e3      	bne.n	80096d2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a16      	ldr	r2, [pc, #88]	; (8009768 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800970e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	60fb      	str	r3, [r7, #12]
   return(result);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f043 0320 	orr.w	r3, r3, #32
 8009724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009732:	61fb      	str	r3, [r7, #28]
 8009734:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	69b9      	ldr	r1, [r7, #24]
 8009738:	69fa      	ldr	r2, [r7, #28]
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	617b      	str	r3, [r7, #20]
   return(result);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e4      	bne.n	8009710 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009746:	e007      	b.n	8009758 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699a      	ldr	r2, [r3, #24]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f042 0208 	orr.w	r2, r2, #8
 8009756:	619a      	str	r2, [r3, #24]
}
 8009758:	bf00      	nop
 800975a:	37b8      	adds	r7, #184	; 0xb8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	effffffe 	.word	0xeffffffe
 8009764:	58000c00 	.word	0x58000c00
 8009768:	08008eed 	.word	0x08008eed

0800976c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d101      	bne.n	80097be <HAL_UARTEx_DisableFifoMode+0x16>
 80097ba:	2302      	movs	r3, #2
 80097bc:	e027      	b.n	800980e <HAL_UARTEx_DisableFifoMode+0x66>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2224      	movs	r2, #36	; 0x24
 80097ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0201 	bic.w	r2, r2, #1
 80097e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800982a:	2b01      	cmp	r3, #1
 800982c:	d101      	bne.n	8009832 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800982e:	2302      	movs	r3, #2
 8009830:	e02d      	b.n	800988e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2224      	movs	r2, #36	; 0x24
 800983e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f022 0201 	bic.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f850 	bl	8009914 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2220      	movs	r2, #32
 8009880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e02d      	b.n	800990a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2224      	movs	r2, #36	; 0x24
 80098ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0201 	bic.w	r2, r2, #1
 80098d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f812 	bl	8009914 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2220      	movs	r2, #32
 80098fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009920:	2b00      	cmp	r3, #0
 8009922:	d108      	bne.n	8009936 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009934:	e031      	b.n	800999a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009936:	2310      	movs	r3, #16
 8009938:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800993a:	2310      	movs	r3, #16
 800993c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	0e5b      	lsrs	r3, r3, #25
 8009946:	b2db      	uxtb	r3, r3
 8009948:	f003 0307 	and.w	r3, r3, #7
 800994c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	0f5b      	lsrs	r3, r3, #29
 8009956:	b2db      	uxtb	r3, r3
 8009958:	f003 0307 	and.w	r3, r3, #7
 800995c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	7b3a      	ldrb	r2, [r7, #12]
 8009962:	4911      	ldr	r1, [pc, #68]	; (80099a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009964:	5c8a      	ldrb	r2, [r1, r2]
 8009966:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800996a:	7b3a      	ldrb	r2, [r7, #12]
 800996c:	490f      	ldr	r1, [pc, #60]	; (80099ac <UARTEx_SetNbDataToProcess+0x98>)
 800996e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009970:	fb93 f3f2 	sdiv	r3, r3, r2
 8009974:	b29a      	uxth	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800997c:	7bfb      	ldrb	r3, [r7, #15]
 800997e:	7b7a      	ldrb	r2, [r7, #13]
 8009980:	4909      	ldr	r1, [pc, #36]	; (80099a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009982:	5c8a      	ldrb	r2, [r1, r2]
 8009984:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009988:	7b7a      	ldrb	r2, [r7, #13]
 800998a:	4908      	ldr	r1, [pc, #32]	; (80099ac <UARTEx_SetNbDataToProcess+0x98>)
 800998c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800998e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800999a:	bf00      	nop
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	0800d954 	.word	0x0800d954
 80099ac:	0800d95c 	.word	0x0800d95c

080099b0 <__NVIC_SetPriority>:
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	6039      	str	r1, [r7, #0]
 80099ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80099bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	db0a      	blt.n	80099da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	490c      	ldr	r1, [pc, #48]	; (80099fc <__NVIC_SetPriority+0x4c>)
 80099ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099ce:	0112      	lsls	r2, r2, #4
 80099d0:	b2d2      	uxtb	r2, r2
 80099d2:	440b      	add	r3, r1
 80099d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80099d8:	e00a      	b.n	80099f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	4908      	ldr	r1, [pc, #32]	; (8009a00 <__NVIC_SetPriority+0x50>)
 80099e0:	88fb      	ldrh	r3, [r7, #6]
 80099e2:	f003 030f 	and.w	r3, r3, #15
 80099e6:	3b04      	subs	r3, #4
 80099e8:	0112      	lsls	r2, r2, #4
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	440b      	add	r3, r1
 80099ee:	761a      	strb	r2, [r3, #24]
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	e000e100 	.word	0xe000e100
 8009a00:	e000ed00 	.word	0xe000ed00

08009a04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a08:	4b05      	ldr	r3, [pc, #20]	; (8009a20 <SysTick_Handler+0x1c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a0c:	f002 f872 	bl	800baf4 <xTaskGetSchedulerState>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d001      	beq.n	8009a1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a16:	f002 fe8f 	bl	800c738 <xPortSysTickHandler>
  }
}
 8009a1a:	bf00      	nop
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	e000e010 	.word	0xe000e010

08009a24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a24:	b580      	push	{r7, lr}
 8009a26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a28:	2100      	movs	r1, #0
 8009a2a:	f06f 0004 	mvn.w	r0, #4
 8009a2e:	f7ff ffbf 	bl	80099b0 <__NVIC_SetPriority>
#endif
}
 8009a32:	bf00      	nop
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a3e:	f3ef 8305 	mrs	r3, IPSR
 8009a42:	603b      	str	r3, [r7, #0]
  return(result);
 8009a44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a4a:	f06f 0305 	mvn.w	r3, #5
 8009a4e:	607b      	str	r3, [r7, #4]
 8009a50:	e00c      	b.n	8009a6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a52:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <osKernelInitialize+0x44>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d105      	bne.n	8009a66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a5a:	4b08      	ldr	r3, [pc, #32]	; (8009a7c <osKernelInitialize+0x44>)
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	607b      	str	r3, [r7, #4]
 8009a64:	e002      	b.n	8009a6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a6c:	687b      	ldr	r3, [r7, #4]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	240003b8 	.word	0x240003b8

08009a80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a86:	f3ef 8305 	mrs	r3, IPSR
 8009a8a:	603b      	str	r3, [r7, #0]
  return(result);
 8009a8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009a92:	f06f 0305 	mvn.w	r3, #5
 8009a96:	607b      	str	r3, [r7, #4]
 8009a98:	e010      	b.n	8009abc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009a9a:	4b0b      	ldr	r3, [pc, #44]	; (8009ac8 <osKernelStart+0x48>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d109      	bne.n	8009ab6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009aa2:	f7ff ffbf 	bl	8009a24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009aa6:	4b08      	ldr	r3, [pc, #32]	; (8009ac8 <osKernelStart+0x48>)
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009aac:	f001 fb3c 	bl	800b128 <vTaskStartScheduler>
      stat = osOK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	607b      	str	r3, [r7, #4]
 8009ab4:	e002      	b.n	8009abc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009aba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009abc:	687b      	ldr	r3, [r7, #4]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	240003b8 	.word	0x240003b8

08009acc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08e      	sub	sp, #56	; 0x38
 8009ad0:	af04      	add	r7, sp, #16
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009adc:	f3ef 8305 	mrs	r3, IPSR
 8009ae0:	617b      	str	r3, [r7, #20]
  return(result);
 8009ae2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d17e      	bne.n	8009be6 <osThreadNew+0x11a>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d07b      	beq.n	8009be6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009aee:	2380      	movs	r3, #128	; 0x80
 8009af0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009af2:	2318      	movs	r3, #24
 8009af4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009afe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d045      	beq.n	8009b92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <osThreadNew+0x48>
        name = attr->name;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d008      	beq.n	8009b3a <osThreadNew+0x6e>
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	2b38      	cmp	r3, #56	; 0x38
 8009b2c:	d805      	bhi.n	8009b3a <osThreadNew+0x6e>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <osThreadNew+0x72>
        return (NULL);
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e054      	b.n	8009be8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	089b      	lsrs	r3, r3, #2
 8009b4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00e      	beq.n	8009b74 <osThreadNew+0xa8>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	2b5b      	cmp	r3, #91	; 0x5b
 8009b5c:	d90a      	bls.n	8009b74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d006      	beq.n	8009b74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <osThreadNew+0xa8>
        mem = 1;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	61bb      	str	r3, [r7, #24]
 8009b72:	e010      	b.n	8009b96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10c      	bne.n	8009b96 <osThreadNew+0xca>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d108      	bne.n	8009b96 <osThreadNew+0xca>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d104      	bne.n	8009b96 <osThreadNew+0xca>
          mem = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61bb      	str	r3, [r7, #24]
 8009b90:	e001      	b.n	8009b96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d110      	bne.n	8009bbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ba4:	9202      	str	r2, [sp, #8]
 8009ba6:	9301      	str	r3, [sp, #4]
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	6a3a      	ldr	r2, [r7, #32]
 8009bb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f001 f8e2 	bl	800ad7c <xTaskCreateStatic>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	613b      	str	r3, [r7, #16]
 8009bbc:	e013      	b.n	8009be6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d110      	bne.n	8009be6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	f107 0310 	add.w	r3, r7, #16
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f001 f92d 	bl	800ae36 <xTaskCreate>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d001      	beq.n	8009be6 <osThreadNew+0x11a>
            hTask = NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009be6:	693b      	ldr	r3, [r7, #16]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3728      	adds	r7, #40	; 0x28
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bf8:	f3ef 8305 	mrs	r3, IPSR
 8009bfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d003      	beq.n	8009c0c <osDelay+0x1c>
    stat = osErrorISR;
 8009c04:	f06f 0305 	mvn.w	r3, #5
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	e007      	b.n	8009c1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 fa52 	bl	800b0c0 <vTaskDelay>
    }
  }

  return (stat);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b086      	sub	sp, #24
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c32:	f3ef 8305 	mrs	r3, IPSR
 8009c36:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c38:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d12d      	bne.n	8009c9a <osEventFlagsNew+0x74>
    mem = -1;
 8009c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c42:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d015      	beq.n	8009c76 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d006      	beq.n	8009c60 <osEventFlagsNew+0x3a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	2b1f      	cmp	r3, #31
 8009c58:	d902      	bls.n	8009c60 <osEventFlagsNew+0x3a>
        mem = 1;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	613b      	str	r3, [r7, #16]
 8009c5e:	e00c      	b.n	8009c7a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d108      	bne.n	8009c7a <osEventFlagsNew+0x54>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d104      	bne.n	8009c7a <osEventFlagsNew+0x54>
          mem = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	613b      	str	r3, [r7, #16]
 8009c74:	e001      	b.n	8009c7a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d106      	bne.n	8009c8e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 f8eb 	bl	8009e60 <xEventGroupCreateStatic>
 8009c8a:	6178      	str	r0, [r7, #20]
 8009c8c:	e005      	b.n	8009c9a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d102      	bne.n	8009c9a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009c94:	f000 f91b 	bl	8009ece <xEventGroupCreate>
 8009c98:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009c9a:	697b      	ldr	r3, [r7, #20]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d004      	beq.n	8009cc2 <osEventFlagsSet+0x1e>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8009cc2:	f06f 0303 	mvn.w	r3, #3
 8009cc6:	617b      	str	r3, [r7, #20]
 8009cc8:	e028      	b.n	8009d1c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cca:	f3ef 8305 	mrs	r3, IPSR
 8009cce:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d01d      	beq.n	8009d12 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009cda:	f107 0308 	add.w	r3, r7, #8
 8009cde:	461a      	mov	r2, r3
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6938      	ldr	r0, [r7, #16]
 8009ce4:	f000 fa96 	bl	800a214 <xEventGroupSetBitsFromISR>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d103      	bne.n	8009cf6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8009cee:	f06f 0302 	mvn.w	r3, #2
 8009cf2:	617b      	str	r3, [r7, #20]
 8009cf4:	e012      	b.n	8009d1c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00d      	beq.n	8009d1c <osEventFlagsSet+0x78>
 8009d00:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <osEventFlagsSet+0x84>)
 8009d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	e004      	b.n	8009d1c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6938      	ldr	r0, [r7, #16]
 8009d16:	f000 f9c3 	bl	800a0a0 <xEventGroupSetBits>
 8009d1a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8009d1c:	697b      	ldr	r3, [r7, #20]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	e000ed04 	.word	0xe000ed04

08009d2c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08c      	sub	sp, #48	; 0x30
 8009d30:	af02      	add	r7, sp, #8
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d004      	beq.n	8009d4e <osEventFlagsWait+0x22>
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8009d4e:	f06f 0303 	mvn.w	r3, #3
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	e04b      	b.n	8009dee <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d56:	f3ef 8305 	mrs	r3, IPSR
 8009d5a:	617b      	str	r3, [r7, #20]
  return(result);
 8009d5c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8009d62:	f06f 0305 	mvn.w	r3, #5
 8009d66:	61fb      	str	r3, [r7, #28]
 8009d68:	e041      	b.n	8009dee <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8009d74:	2301      	movs	r3, #1
 8009d76:	627b      	str	r3, [r7, #36]	; 0x24
 8009d78:	e001      	b.n	8009d7e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f003 0302 	and.w	r3, r3, #2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	623b      	str	r3, [r7, #32]
 8009d8c:	e001      	b.n	8009d92 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	6a3a      	ldr	r2, [r7, #32]
 8009d9a:	68b9      	ldr	r1, [r7, #8]
 8009d9c:	69b8      	ldr	r0, [r7, #24]
 8009d9e:	f000 f8b1 	bl	8009f04 <xEventGroupWaitBits>
 8009da2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d010      	beq.n	8009dd0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	4013      	ands	r3, r2
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d019      	beq.n	8009dee <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8009dc0:	f06f 0301 	mvn.w	r3, #1
 8009dc4:	61fb      	str	r3, [r7, #28]
 8009dc6:	e012      	b.n	8009dee <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009dc8:	f06f 0302 	mvn.w	r3, #2
 8009dcc:	61fb      	str	r3, [r7, #28]
 8009dce:	e00e      	b.n	8009dee <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d109      	bne.n	8009dee <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d003      	beq.n	8009de8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8009de0:	f06f 0301 	mvn.w	r3, #1
 8009de4:	61fb      	str	r3, [r7, #28]
 8009de6:	e002      	b.n	8009dee <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009de8:	f06f 0302 	mvn.w	r3, #2
 8009dec:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8009dee:	69fb      	ldr	r3, [r7, #28]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3728      	adds	r7, #40	; 0x28
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4a07      	ldr	r2, [pc, #28]	; (8009e24 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	4a06      	ldr	r2, [pc, #24]	; (8009e28 <vApplicationGetIdleTaskMemory+0x30>)
 8009e0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2280      	movs	r2, #128	; 0x80
 8009e14:	601a      	str	r2, [r3, #0]
}
 8009e16:	bf00      	nop
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	240003bc 	.word	0x240003bc
 8009e28:	24000418 	.word	0x24000418

08009e2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4a07      	ldr	r2, [pc, #28]	; (8009e58 <vApplicationGetTimerTaskMemory+0x2c>)
 8009e3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	4a06      	ldr	r2, [pc, #24]	; (8009e5c <vApplicationGetTimerTaskMemory+0x30>)
 8009e42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e4a:	601a      	str	r2, [r3, #0]
}
 8009e4c:	bf00      	nop
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	24000618 	.word	0x24000618
 8009e5c:	24000674 	.word	0x24000674

08009e60 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10a      	bne.n	8009e84 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e80:	bf00      	nop
 8009e82:	e7fe      	b.n	8009e82 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009e84:	2320      	movs	r3, #32
 8009e86:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	d00a      	beq.n	8009ea4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	60fb      	str	r3, [r7, #12]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 f9bf 	bl	800a23c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8009ec4:	697b      	ldr	r3, [r7, #20]
	}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009ed4:	2020      	movs	r0, #32
 8009ed6:	f002 fcbf 	bl	800c858 <pvPortMalloc>
 8009eda:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00a      	beq.n	8009ef8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3304      	adds	r3, #4
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 f9a5 	bl	800a23c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009ef8:	687b      	ldr	r3, [r7, #4]
	}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
	...

08009f04 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b090      	sub	sp, #64	; 0x40
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <xEventGroupWaitBits+0x36>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	623b      	str	r3, [r7, #32]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00a      	beq.n	8009f5a <xEventGroupWaitBits+0x56>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	61fb      	str	r3, [r7, #28]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10a      	bne.n	8009f76 <xEventGroupWaitBits+0x72>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	61bb      	str	r3, [r7, #24]
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f76:	f001 fdbd 	bl	800baf4 <xTaskGetSchedulerState>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d102      	bne.n	8009f86 <xEventGroupWaitBits+0x82>
 8009f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <xEventGroupWaitBits+0x86>
 8009f86:	2301      	movs	r3, #1
 8009f88:	e000      	b.n	8009f8c <xEventGroupWaitBits+0x88>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	617b      	str	r3, [r7, #20]
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8009fa6:	f001 f925 	bl	800b1f4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fb6:	f000 f90b 	bl	800a1d0 <prvTestWaitCondition>
 8009fba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00e      	beq.n	8009fe0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d028      	beq.n	800a022 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	43db      	mvns	r3, r3
 8009fd8:	401a      	ands	r2, r3
 8009fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	e020      	b.n	800a022 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d104      	bne.n	8009ff0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8009fea:	2301      	movs	r3, #1
 8009fec:	633b      	str	r3, [r7, #48]	; 0x30
 8009fee:	e018      	b.n	800a022 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ffc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a00a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00e:	1d18      	adds	r0, r3, #4
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a014:	4313      	orrs	r3, r2
 800a016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a018:	4619      	mov	r1, r3
 800a01a:	f001 fae3 	bl	800b5e4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a022:	f001 f8f5 	bl	800b210 <xTaskResumeAll>
 800a026:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d031      	beq.n	800a092 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d107      	bne.n	800a044 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800a034:	4b19      	ldr	r3, [pc, #100]	; (800a09c <xEventGroupWaitBits+0x198>)
 800a036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a044:	f001 fde2 	bl	800bc0c <uxTaskResetEventItemValue>
 800a048:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a04c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d11a      	bne.n	800a08a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800a054:	f002 fade 	bl	800c614 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a064:	f000 f8b4 	bl	800a1d0 <prvTestWaitCondition>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d009      	beq.n	800a082 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d006      	beq.n	800a082 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	43db      	mvns	r3, r3
 800a07c:	401a      	ands	r2, r3
 800a07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a080:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a082:	2301      	movs	r3, #1
 800a084:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800a086:	f002 faf5 	bl	800c674 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a08c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a090:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a094:	4618      	mov	r0, r3
 800a096:	3740      	adds	r7, #64	; 0x40
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	e000ed04 	.word	0xe000ed04

0800a0a0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b08e      	sub	sp, #56	; 0x38
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <xEventGroupSetBits+0x32>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	613b      	str	r3, [r7, #16]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00a      	beq.n	800a0f2 <xEventGroupSetBits+0x52>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	60fb      	str	r3, [r7, #12]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a0fe:	f001 f879 	bl	800b1f4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	431a      	orrs	r2, r3
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a114:	e03c      	b.n	800a190 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a122:	2300      	movs	r3, #0
 800a124:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a12c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a134:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d108      	bne.n	800a152 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	4013      	ands	r3, r2
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800a14c:	2301      	movs	r3, #1
 800a14e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a150:	e008      	b.n	800a164 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	4013      	ands	r3, r2
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d101      	bne.n	800a164 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a160:	2301      	movs	r3, #1
 800a162:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a166:	2b00      	cmp	r3, #0
 800a168:	d010      	beq.n	800a18c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d003      	beq.n	800a17c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	4313      	orrs	r3, r2
 800a17a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a184:	4619      	mov	r1, r3
 800a186:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a188:	f001 faf8 	bl	800b77c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800a190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	429a      	cmp	r2, r3
 800a196:	d1be      	bne.n	800a116 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19e:	43db      	mvns	r3, r3
 800a1a0:	401a      	ands	r2, r3
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a1a6:	f001 f833 	bl	800b210 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	681b      	ldr	r3, [r3, #0]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3738      	adds	r7, #56	; 0x38
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff ff6c 	bl	800a0a0 <xEventGroupSetBits>
}
 800a1c8:	bf00      	nop
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d107      	bne.n	800a1f6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00a      	beq.n	800a206 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	617b      	str	r3, [r7, #20]
 800a1f4:	e007      	b.n	800a206 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d101      	bne.n	800a206 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a202:	2301      	movs	r3, #1
 800a204:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a206:	697b      	ldr	r3, [r7, #20]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	371c      	adds	r7, #28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	68f9      	ldr	r1, [r7, #12]
 800a226:	4804      	ldr	r0, [pc, #16]	; (800a238 <xEventGroupSetBitsFromISR+0x24>)
 800a228:	f002 f8aa 	bl	800c380 <xTimerPendFunctionCallFromISR>
 800a22c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800a22e:	697b      	ldr	r3, [r7, #20]
	}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	0800a1b7 	.word	0x0800a1b7

0800a23c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f103 0208 	add.w	r2, r3, #8
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f103 0208 	add.w	r2, r3, #8
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f103 0208 	add.w	r2, r3, #8
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a28a:	bf00      	nop
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a296:	b480      	push	{r7}
 800a298:	b085      	sub	sp, #20
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	689a      	ldr	r2, [r3, #8]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	601a      	str	r2, [r3, #0]
}
 800a2d2:	bf00      	nop
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b085      	sub	sp, #20
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2f4:	d103      	bne.n	800a2fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	e00c      	b.n	800a318 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3308      	adds	r3, #8
 800a302:	60fb      	str	r3, [r7, #12]
 800a304:	e002      	b.n	800a30c <vListInsert+0x2e>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	429a      	cmp	r2, r3
 800a316:	d2f6      	bcs.n	800a306 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	1c5a      	adds	r2, r3, #1
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	601a      	str	r2, [r3, #0]
}
 800a344:	bf00      	nop
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	6892      	ldr	r2, [r2, #8]
 800a366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6852      	ldr	r2, [r2, #4]
 800a370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d103      	bne.n	800a384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	689a      	ldr	r2, [r3, #8]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	1e5a      	subs	r2, r3, #1
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10a      	bne.n	800a3ce <xQueueGenericReset+0x2a>
	__asm volatile
 800a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	60bb      	str	r3, [r7, #8]
}
 800a3ca:	bf00      	nop
 800a3cc:	e7fe      	b.n	800a3cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a3ce:	f002 f921 	bl	800c614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3da:	68f9      	ldr	r1, [r7, #12]
 800a3dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3de:	fb01 f303 	mul.w	r3, r1, r3
 800a3e2:	441a      	add	r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fe:	3b01      	subs	r3, #1
 800a400:	68f9      	ldr	r1, [r7, #12]
 800a402:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a404:	fb01 f303 	mul.w	r3, r1, r3
 800a408:	441a      	add	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	22ff      	movs	r2, #255	; 0xff
 800a412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	22ff      	movs	r2, #255	; 0xff
 800a41a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d114      	bne.n	800a44e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01a      	beq.n	800a462 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	3310      	adds	r3, #16
 800a430:	4618      	mov	r0, r3
 800a432:	f001 f93f 	bl	800b6b4 <xTaskRemoveFromEventList>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d012      	beq.n	800a462 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a43c:	4b0c      	ldr	r3, [pc, #48]	; (800a470 <xQueueGenericReset+0xcc>)
 800a43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	e009      	b.n	800a462 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3310      	adds	r3, #16
 800a452:	4618      	mov	r0, r3
 800a454:	f7ff fef2 	bl	800a23c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3324      	adds	r3, #36	; 0x24
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7ff feed 	bl	800a23c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a462:	f002 f907 	bl	800c674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a466:	2301      	movs	r3, #1
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	e000ed04 	.word	0xe000ed04

0800a474 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08e      	sub	sp, #56	; 0x38
 800a478:	af02      	add	r7, sp, #8
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10a      	bne.n	800a49e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a49a:	bf00      	nop
 800a49c:	e7fe      	b.n	800a49c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10a      	bne.n	800a4ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <xQueueGenericCreateStatic+0x52>
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <xQueueGenericCreateStatic+0x56>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e000      	b.n	800a4cc <xQueueGenericCreateStatic+0x58>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10a      	bne.n	800a4e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	623b      	str	r3, [r7, #32]
}
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <xQueueGenericCreateStatic+0x7e>
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <xQueueGenericCreateStatic+0x82>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e000      	b.n	800a4f8 <xQueueGenericCreateStatic+0x84>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10a      	bne.n	800a512 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	61fb      	str	r3, [r7, #28]
}
 800a50e:	bf00      	nop
 800a510:	e7fe      	b.n	800a510 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a512:	2350      	movs	r3, #80	; 0x50
 800a514:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2b50      	cmp	r3, #80	; 0x50
 800a51a:	d00a      	beq.n	800a532 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	61bb      	str	r3, [r7, #24]
}
 800a52e:	bf00      	nop
 800a530:	e7fe      	b.n	800a530 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a532:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00d      	beq.n	800a55a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a546:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	4613      	mov	r3, r2
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 f805 	bl	800a564 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3730      	adds	r7, #48	; 0x30
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
 800a570:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d103      	bne.n	800a580 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	e002      	b.n	800a586 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a592:	2101      	movs	r1, #1
 800a594:	69b8      	ldr	r0, [r7, #24]
 800a596:	f7ff ff05 	bl	800a3a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	78fa      	ldrb	r2, [r7, #3]
 800a59e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5a2:	bf00      	nop
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08e      	sub	sp, #56	; 0x38
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <xQueueGenericSend+0x32>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d103      	bne.n	800a5ec <xQueueGenericSend+0x40>
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <xQueueGenericSend+0x44>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e000      	b.n	800a5f2 <xQueueGenericSend+0x46>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10a      	bne.n	800a60c <xQueueGenericSend+0x60>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a608:	bf00      	nop
 800a60a:	e7fe      	b.n	800a60a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d103      	bne.n	800a61a <xQueueGenericSend+0x6e>
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a616:	2b01      	cmp	r3, #1
 800a618:	d101      	bne.n	800a61e <xQueueGenericSend+0x72>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e000      	b.n	800a620 <xQueueGenericSend+0x74>
 800a61e:	2300      	movs	r3, #0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10a      	bne.n	800a63a <xQueueGenericSend+0x8e>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	623b      	str	r3, [r7, #32]
}
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a63a:	f001 fa5b 	bl	800baf4 <xTaskGetSchedulerState>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <xQueueGenericSend+0x9e>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <xQueueGenericSend+0xa2>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueGenericSend+0xa4>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <xQueueGenericSend+0xbe>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	61fb      	str	r3, [r7, #28]
}
 800a666:	bf00      	nop
 800a668:	e7fe      	b.n	800a668 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a66a:	f001 ffd3 	bl	800c614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a676:	429a      	cmp	r2, r3
 800a678:	d302      	bcc.n	800a680 <xQueueGenericSend+0xd4>
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d129      	bne.n	800a6d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	68b9      	ldr	r1, [r7, #8]
 800a684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a686:	f000 fa0b 	bl	800aaa0 <prvCopyDataToQueue>
 800a68a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b00      	cmp	r3, #0
 800a692:	d010      	beq.n	800a6b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	3324      	adds	r3, #36	; 0x24
 800a698:	4618      	mov	r0, r3
 800a69a:	f001 f80b 	bl	800b6b4 <xTaskRemoveFromEventList>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d013      	beq.n	800a6cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6a4:	4b3f      	ldr	r3, [pc, #252]	; (800a7a4 <xQueueGenericSend+0x1f8>)
 800a6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	e00a      	b.n	800a6cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d007      	beq.n	800a6cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6bc:	4b39      	ldr	r3, [pc, #228]	; (800a7a4 <xQueueGenericSend+0x1f8>)
 800a6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6cc:	f001 ffd2 	bl	800c674 <vPortExitCritical>
				return pdPASS;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e063      	b.n	800a79c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d103      	bne.n	800a6e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6da:	f001 ffcb 	bl	800c674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e05c      	b.n	800a79c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d106      	bne.n	800a6f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6e8:	f107 0314 	add.w	r3, r7, #20
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f001 f8a7 	bl	800b840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6f6:	f001 ffbd 	bl	800c674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6fa:	f000 fd7b 	bl	800b1f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6fe:	f001 ff89 	bl	800c614 <vPortEnterCritical>
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a708:	b25b      	sxtb	r3, r3
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a70e:	d103      	bne.n	800a718 <xQueueGenericSend+0x16c>
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a71e:	b25b      	sxtb	r3, r3
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a724:	d103      	bne.n	800a72e <xQueueGenericSend+0x182>
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a72e:	f001 ffa1 	bl	800c674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a732:	1d3a      	adds	r2, r7, #4
 800a734:	f107 0314 	add.w	r3, r7, #20
 800a738:	4611      	mov	r1, r2
 800a73a:	4618      	mov	r0, r3
 800a73c:	f001 f896 	bl	800b86c <xTaskCheckForTimeOut>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d124      	bne.n	800a790 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a748:	f000 faa2 	bl	800ac90 <prvIsQueueFull>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d018      	beq.n	800a784 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	3310      	adds	r3, #16
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 ff1e 	bl	800b59c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a762:	f000 fa2d 	bl	800abc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a766:	f000 fd53 	bl	800b210 <xTaskResumeAll>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f47f af7c 	bne.w	800a66a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a772:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <xQueueGenericSend+0x1f8>)
 800a774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	e772      	b.n	800a66a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a786:	f000 fa1b 	bl	800abc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a78a:	f000 fd41 	bl	800b210 <xTaskResumeAll>
 800a78e:	e76c      	b.n	800a66a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a792:	f000 fa15 	bl	800abc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a796:	f000 fd3b 	bl	800b210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a79a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3738      	adds	r7, #56	; 0x38
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	e000ed04 	.word	0xe000ed04

0800a7a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b090      	sub	sp, #64	; 0x40
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10a      	bne.n	800a7d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d103      	bne.n	800a7e4 <xQueueGenericSendFromISR+0x3c>
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <xQueueGenericSendFromISR+0x40>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e000      	b.n	800a7ea <xQueueGenericSendFromISR+0x42>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10a      	bne.n	800a804 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a800:	bf00      	nop
 800a802:	e7fe      	b.n	800a802 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b02      	cmp	r3, #2
 800a808:	d103      	bne.n	800a812 <xQueueGenericSendFromISR+0x6a>
 800a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d101      	bne.n	800a816 <xQueueGenericSendFromISR+0x6e>
 800a812:	2301      	movs	r3, #1
 800a814:	e000      	b.n	800a818 <xQueueGenericSendFromISR+0x70>
 800a816:	2300      	movs	r3, #0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10a      	bne.n	800a832 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	623b      	str	r3, [r7, #32]
}
 800a82e:	bf00      	nop
 800a830:	e7fe      	b.n	800a830 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a832:	f001 ffd1 	bl	800c7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a836:	f3ef 8211 	mrs	r2, BASEPRI
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	61fa      	str	r2, [r7, #28]
 800a84c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a84e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a850:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d302      	bcc.n	800a864 <xQueueGenericSendFromISR+0xbc>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b02      	cmp	r3, #2
 800a862:	d12f      	bne.n	800a8c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	68b9      	ldr	r1, [r7, #8]
 800a878:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a87a:	f000 f911 	bl	800aaa0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a87e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a886:	d112      	bne.n	800a8ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d016      	beq.n	800a8be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	3324      	adds	r3, #36	; 0x24
 800a894:	4618      	mov	r0, r3
 800a896:	f000 ff0d 	bl	800b6b4 <xTaskRemoveFromEventList>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00e      	beq.n	800a8be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00b      	beq.n	800a8be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	e007      	b.n	800a8be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	b25a      	sxtb	r2, r3
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a8c2:	e001      	b.n	800a8c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3740      	adds	r7, #64	; 0x40
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
	...

0800a8e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08c      	sub	sp, #48	; 0x30
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10a      	bne.n	800a910 <xQueueReceive+0x30>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	623b      	str	r3, [r7, #32]
}
 800a90c:	bf00      	nop
 800a90e:	e7fe      	b.n	800a90e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d103      	bne.n	800a91e <xQueueReceive+0x3e>
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <xQueueReceive+0x42>
 800a91e:	2301      	movs	r3, #1
 800a920:	e000      	b.n	800a924 <xQueueReceive+0x44>
 800a922:	2300      	movs	r3, #0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <xQueueReceive+0x5e>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	61fb      	str	r3, [r7, #28]
}
 800a93a:	bf00      	nop
 800a93c:	e7fe      	b.n	800a93c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a93e:	f001 f8d9 	bl	800baf4 <xTaskGetSchedulerState>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d102      	bne.n	800a94e <xQueueReceive+0x6e>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <xQueueReceive+0x72>
 800a94e:	2301      	movs	r3, #1
 800a950:	e000      	b.n	800a954 <xQueueReceive+0x74>
 800a952:	2300      	movs	r3, #0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10a      	bne.n	800a96e <xQueueReceive+0x8e>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	61bb      	str	r3, [r7, #24]
}
 800a96a:	bf00      	nop
 800a96c:	e7fe      	b.n	800a96c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a96e:	f001 fe51 	bl	800c614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a976:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d01f      	beq.n	800a9be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a97e:	68b9      	ldr	r1, [r7, #8]
 800a980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a982:	f000 f8f7 	bl	800ab74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	1e5a      	subs	r2, r3, #1
 800a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00f      	beq.n	800a9b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	3310      	adds	r3, #16
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 fe8a 	bl	800b6b4 <xTaskRemoveFromEventList>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d007      	beq.n	800a9b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9a6:	4b3d      	ldr	r3, [pc, #244]	; (800aa9c <xQueueReceive+0x1bc>)
 800a9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9b6:	f001 fe5d 	bl	800c674 <vPortExitCritical>
				return pdPASS;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e069      	b.n	800aa92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d103      	bne.n	800a9cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9c4:	f001 fe56 	bl	800c674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	e062      	b.n	800aa92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d106      	bne.n	800a9e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9d2:	f107 0310 	add.w	r3, r7, #16
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 ff32 	bl	800b840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9e0:	f001 fe48 	bl	800c674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9e4:	f000 fc06 	bl	800b1f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9e8:	f001 fe14 	bl	800c614 <vPortEnterCritical>
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9f2:	b25b      	sxtb	r3, r3
 800a9f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9f8:	d103      	bne.n	800aa02 <xQueueReceive+0x122>
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa08:	b25b      	sxtb	r3, r3
 800aa0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa0e:	d103      	bne.n	800aa18 <xQueueReceive+0x138>
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa18:	f001 fe2c 	bl	800c674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa1c:	1d3a      	adds	r2, r7, #4
 800aa1e:	f107 0310 	add.w	r3, r7, #16
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 ff21 	bl	800b86c <xTaskCheckForTimeOut>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d123      	bne.n	800aa78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa32:	f000 f917 	bl	800ac64 <prvIsQueueEmpty>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d017      	beq.n	800aa6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	3324      	adds	r3, #36	; 0x24
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	4611      	mov	r1, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 fda9 	bl	800b59c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa4c:	f000 f8b8 	bl	800abc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa50:	f000 fbde 	bl	800b210 <xTaskResumeAll>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d189      	bne.n	800a96e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa5a:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <xQueueReceive+0x1bc>)
 800aa5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	e780      	b.n	800a96e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa6e:	f000 f8a7 	bl	800abc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa72:	f000 fbcd 	bl	800b210 <xTaskResumeAll>
 800aa76:	e77a      	b.n	800a96e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa7a:	f000 f8a1 	bl	800abc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa7e:	f000 fbc7 	bl	800b210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa84:	f000 f8ee 	bl	800ac64 <prvIsQueueEmpty>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f43f af6f 	beq.w	800a96e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3730      	adds	r7, #48	; 0x30
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	e000ed04 	.word	0xe000ed04

0800aaa0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aaac:	2300      	movs	r3, #0
 800aaae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10d      	bne.n	800aada <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d14d      	bne.n	800ab62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f001 f830 	bl	800bb30 <xTaskPriorityDisinherit>
 800aad0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	609a      	str	r2, [r3, #8]
 800aad8:	e043      	b.n	800ab62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d119      	bne.n	800ab14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6858      	ldr	r0, [r3, #4]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae8:	461a      	mov	r2, r3
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	f002 f8c8 	bl	800cc80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf8:	441a      	add	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d32b      	bcc.n	800ab62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	605a      	str	r2, [r3, #4]
 800ab12:	e026      	b.n	800ab62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	68d8      	ldr	r0, [r3, #12]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	68b9      	ldr	r1, [r7, #8]
 800ab20:	f002 f8ae 	bl	800cc80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2c:	425b      	negs	r3, r3
 800ab2e:	441a      	add	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	68da      	ldr	r2, [r3, #12]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d207      	bcs.n	800ab50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	689a      	ldr	r2, [r3, #8]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab48:	425b      	negs	r3, r3
 800ab4a:	441a      	add	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d105      	bne.n	800ab62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	1c5a      	adds	r2, r3, #1
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab6a:	697b      	ldr	r3, [r7, #20]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d018      	beq.n	800abb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	441a      	add	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68da      	ldr	r2, [r3, #12]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d303      	bcc.n	800aba8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68d9      	ldr	r1, [r3, #12]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb0:	461a      	mov	r2, r3
 800abb2:	6838      	ldr	r0, [r7, #0]
 800abb4:	f002 f864 	bl	800cc80 <memcpy>
	}
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abc8:	f001 fd24 	bl	800c614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abd4:	e011      	b.n	800abfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d012      	beq.n	800ac04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3324      	adds	r3, #36	; 0x24
 800abe2:	4618      	mov	r0, r3
 800abe4:	f000 fd66 	bl	800b6b4 <xTaskRemoveFromEventList>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abee:	f000 fe9f 	bl	800b930 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	dce9      	bgt.n	800abd6 <prvUnlockQueue+0x16>
 800ac02:	e000      	b.n	800ac06 <prvUnlockQueue+0x46>
					break;
 800ac04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	22ff      	movs	r2, #255	; 0xff
 800ac0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac0e:	f001 fd31 	bl	800c674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac12:	f001 fcff 	bl	800c614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac1e:	e011      	b.n	800ac44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d012      	beq.n	800ac4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3310      	adds	r3, #16
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fd41 	bl	800b6b4 <xTaskRemoveFromEventList>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac38:	f000 fe7a 	bl	800b930 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	dce9      	bgt.n	800ac20 <prvUnlockQueue+0x60>
 800ac4c:	e000      	b.n	800ac50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	22ff      	movs	r2, #255	; 0xff
 800ac54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac58:	f001 fd0c 	bl	800c674 <vPortExitCritical>
}
 800ac5c:	bf00      	nop
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac6c:	f001 fcd2 	bl	800c614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d102      	bne.n	800ac7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	60fb      	str	r3, [r7, #12]
 800ac7c:	e001      	b.n	800ac82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac82:	f001 fcf7 	bl	800c674 <vPortExitCritical>

	return xReturn;
 800ac86:	68fb      	ldr	r3, [r7, #12]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac98:	f001 fcbc 	bl	800c614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d102      	bne.n	800acae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aca8:	2301      	movs	r3, #1
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	e001      	b.n	800acb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800acae:	2300      	movs	r3, #0
 800acb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acb2:	f001 fcdf 	bl	800c674 <vPortExitCritical>

	return xReturn;
 800acb6:	68fb      	ldr	r3, [r7, #12]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acca:	2300      	movs	r3, #0
 800accc:	60fb      	str	r3, [r7, #12]
 800acce:	e014      	b.n	800acfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800acd0:	4a0f      	ldr	r2, [pc, #60]	; (800ad10 <vQueueAddToRegistry+0x50>)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10b      	bne.n	800acf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800acdc:	490c      	ldr	r1, [pc, #48]	; (800ad10 <vQueueAddToRegistry+0x50>)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ace6:	4a0a      	ldr	r2, [pc, #40]	; (800ad10 <vQueueAddToRegistry+0x50>)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	4413      	add	r3, r2
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acf2:	e006      	b.n	800ad02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3301      	adds	r3, #1
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b07      	cmp	r3, #7
 800acfe:	d9e7      	bls.n	800acd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad00:	bf00      	nop
 800ad02:	bf00      	nop
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	24000a74 	.word	0x24000a74

0800ad14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad24:	f001 fc76 	bl	800c614 <vPortEnterCritical>
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad2e:	b25b      	sxtb	r3, r3
 800ad30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad34:	d103      	bne.n	800ad3e <vQueueWaitForMessageRestricted+0x2a>
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad44:	b25b      	sxtb	r3, r3
 800ad46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad4a:	d103      	bne.n	800ad54 <vQueueWaitForMessageRestricted+0x40>
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad54:	f001 fc8e 	bl	800c674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d106      	bne.n	800ad6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	3324      	adds	r3, #36	; 0x24
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	68b9      	ldr	r1, [r7, #8]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f000 fc77 	bl	800b65c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad6e:	6978      	ldr	r0, [r7, #20]
 800ad70:	f7ff ff26 	bl	800abc0 <prvUnlockQueue>
	}
 800ad74:	bf00      	nop
 800ad76:	3718      	adds	r7, #24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08e      	sub	sp, #56	; 0x38
 800ad80:	af04      	add	r7, sp, #16
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
 800ad88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	623b      	str	r3, [r7, #32]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ada6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <xTaskCreateStatic+0x46>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	61fb      	str	r3, [r7, #28]
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adc2:	235c      	movs	r3, #92	; 0x5c
 800adc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b5c      	cmp	r3, #92	; 0x5c
 800adca:	d00a      	beq.n	800ade2 <xTaskCreateStatic+0x66>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	61bb      	str	r3, [r7, #24]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ade2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ade4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d01e      	beq.n	800ae28 <xTaskCreateStatic+0xac>
 800adea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adec:	2b00      	cmp	r3, #0
 800adee:	d01b      	beq.n	800ae28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800adf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	2202      	movs	r2, #2
 800adfe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae02:	2300      	movs	r3, #0
 800ae04:	9303      	str	r3, [sp, #12]
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	9302      	str	r3, [sp, #8]
 800ae0a:	f107 0314 	add.w	r3, r7, #20
 800ae0e:	9301      	str	r3, [sp, #4]
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	68b9      	ldr	r1, [r7, #8]
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 f850 	bl	800aec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae22:	f000 f8dd 	bl	800afe0 <prvAddNewTaskToReadyList>
 800ae26:	e001      	b.n	800ae2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae2c:	697b      	ldr	r3, [r7, #20]
	}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3728      	adds	r7, #40	; 0x28
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b08c      	sub	sp, #48	; 0x30
 800ae3a:	af04      	add	r7, sp, #16
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	603b      	str	r3, [r7, #0]
 800ae42:	4613      	mov	r3, r2
 800ae44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae46:	88fb      	ldrh	r3, [r7, #6]
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 fd04 	bl	800c858 <pvPortMalloc>
 800ae50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00e      	beq.n	800ae76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae58:	205c      	movs	r0, #92	; 0x5c
 800ae5a:	f001 fcfd 	bl	800c858 <pvPortMalloc>
 800ae5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	631a      	str	r2, [r3, #48]	; 0x30
 800ae6c:	e005      	b.n	800ae7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae6e:	6978      	ldr	r0, [r7, #20]
 800ae70:	f001 fdbe 	bl	800c9f0 <vPortFree>
 800ae74:	e001      	b.n	800ae7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d017      	beq.n	800aeb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae88:	88fa      	ldrh	r2, [r7, #6]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	9303      	str	r3, [sp, #12]
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	9302      	str	r3, [sp, #8]
 800ae92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68b9      	ldr	r1, [r7, #8]
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f000 f80e 	bl	800aec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aea4:	69f8      	ldr	r0, [r7, #28]
 800aea6:	f000 f89b 	bl	800afe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	61bb      	str	r3, [r7, #24]
 800aeae:	e002      	b.n	800aeb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aeb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aeb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aeb6:	69bb      	ldr	r3, [r7, #24]
	}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3720      	adds	r7, #32
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
 800aecc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	461a      	mov	r2, r3
 800aed8:	21a5      	movs	r1, #165	; 0xa5
 800aeda:	f001 fedf 	bl	800cc9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aee2:	6879      	ldr	r1, [r7, #4]
 800aee4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aee8:	440b      	add	r3, r1
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	f023 0307 	bic.w	r3, r3, #7
 800aef6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	f003 0307 	and.w	r3, r3, #7
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00a      	beq.n	800af18 <prvInitialiseNewTask+0x58>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	617b      	str	r3, [r7, #20]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d01f      	beq.n	800af5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af1e:	2300      	movs	r3, #0
 800af20:	61fb      	str	r3, [r7, #28]
 800af22:	e012      	b.n	800af4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	4413      	add	r3, r2
 800af2a:	7819      	ldrb	r1, [r3, #0]
 800af2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	4413      	add	r3, r2
 800af32:	3334      	adds	r3, #52	; 0x34
 800af34:	460a      	mov	r2, r1
 800af36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	4413      	add	r3, r2
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d006      	beq.n	800af52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	3301      	adds	r3, #1
 800af48:	61fb      	str	r3, [r7, #28]
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	2b0f      	cmp	r3, #15
 800af4e:	d9e9      	bls.n	800af24 <prvInitialiseNewTask+0x64>
 800af50:	e000      	b.n	800af54 <prvInitialiseNewTask+0x94>
			{
				break;
 800af52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af5c:	e003      	b.n	800af66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	2200      	movs	r2, #0
 800af62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	2b37      	cmp	r3, #55	; 0x37
 800af6a:	d901      	bls.n	800af70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af6c:	2337      	movs	r3, #55	; 0x37
 800af6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	2200      	movs	r2, #0
 800af80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	3304      	adds	r3, #4
 800af86:	4618      	mov	r0, r3
 800af88:	f7ff f978 	bl	800a27c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	3318      	adds	r3, #24
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff f973 	bl	800a27c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	2200      	movs	r2, #0
 800afb0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	68f9      	ldr	r1, [r7, #12]
 800afbe:	69b8      	ldr	r0, [r7, #24]
 800afc0:	f001 f9fe 	bl	800c3c0 <pxPortInitialiseStack>
 800afc4:	4602      	mov	r2, r0
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d002      	beq.n	800afd6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afd6:	bf00      	nop
 800afd8:	3720      	adds	r7, #32
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afe8:	f001 fb14 	bl	800c614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afec:	4b2d      	ldr	r3, [pc, #180]	; (800b0a4 <prvAddNewTaskToReadyList+0xc4>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3301      	adds	r3, #1
 800aff2:	4a2c      	ldr	r2, [pc, #176]	; (800b0a4 <prvAddNewTaskToReadyList+0xc4>)
 800aff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aff6:	4b2c      	ldr	r3, [pc, #176]	; (800b0a8 <prvAddNewTaskToReadyList+0xc8>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d109      	bne.n	800b012 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800affe:	4a2a      	ldr	r2, [pc, #168]	; (800b0a8 <prvAddNewTaskToReadyList+0xc8>)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b004:	4b27      	ldr	r3, [pc, #156]	; (800b0a4 <prvAddNewTaskToReadyList+0xc4>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d110      	bne.n	800b02e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b00c:	f000 fcb4 	bl	800b978 <prvInitialiseTaskLists>
 800b010:	e00d      	b.n	800b02e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b012:	4b26      	ldr	r3, [pc, #152]	; (800b0ac <prvAddNewTaskToReadyList+0xcc>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d109      	bne.n	800b02e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b01a:	4b23      	ldr	r3, [pc, #140]	; (800b0a8 <prvAddNewTaskToReadyList+0xc8>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b024:	429a      	cmp	r2, r3
 800b026:	d802      	bhi.n	800b02e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b028:	4a1f      	ldr	r2, [pc, #124]	; (800b0a8 <prvAddNewTaskToReadyList+0xc8>)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b02e:	4b20      	ldr	r3, [pc, #128]	; (800b0b0 <prvAddNewTaskToReadyList+0xd0>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3301      	adds	r3, #1
 800b034:	4a1e      	ldr	r2, [pc, #120]	; (800b0b0 <prvAddNewTaskToReadyList+0xd0>)
 800b036:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b038:	4b1d      	ldr	r3, [pc, #116]	; (800b0b0 <prvAddNewTaskToReadyList+0xd0>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b044:	4b1b      	ldr	r3, [pc, #108]	; (800b0b4 <prvAddNewTaskToReadyList+0xd4>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d903      	bls.n	800b054 <prvAddNewTaskToReadyList+0x74>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b050:	4a18      	ldr	r2, [pc, #96]	; (800b0b4 <prvAddNewTaskToReadyList+0xd4>)
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b058:	4613      	mov	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4a15      	ldr	r2, [pc, #84]	; (800b0b8 <prvAddNewTaskToReadyList+0xd8>)
 800b062:	441a      	add	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3304      	adds	r3, #4
 800b068:	4619      	mov	r1, r3
 800b06a:	4610      	mov	r0, r2
 800b06c:	f7ff f913 	bl	800a296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b070:	f001 fb00 	bl	800c674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b074:	4b0d      	ldr	r3, [pc, #52]	; (800b0ac <prvAddNewTaskToReadyList+0xcc>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00e      	beq.n	800b09a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b07c:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <prvAddNewTaskToReadyList+0xc8>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	429a      	cmp	r2, r3
 800b088:	d207      	bcs.n	800b09a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b08a:	4b0c      	ldr	r3, [pc, #48]	; (800b0bc <prvAddNewTaskToReadyList+0xdc>)
 800b08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b090:	601a      	str	r2, [r3, #0]
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b09a:	bf00      	nop
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	24000f88 	.word	0x24000f88
 800b0a8:	24000ab4 	.word	0x24000ab4
 800b0ac:	24000f94 	.word	0x24000f94
 800b0b0:	24000fa4 	.word	0x24000fa4
 800b0b4:	24000f90 	.word	0x24000f90
 800b0b8:	24000ab8 	.word	0x24000ab8
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d017      	beq.n	800b102 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0d2:	4b13      	ldr	r3, [pc, #76]	; (800b120 <vTaskDelay+0x60>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <vTaskDelay+0x30>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	60bb      	str	r3, [r7, #8]
}
 800b0ec:	bf00      	nop
 800b0ee:	e7fe      	b.n	800b0ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b0f0:	f000 f880 	bl	800b1f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fda0 	bl	800bc3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0fc:	f000 f888 	bl	800b210 <xTaskResumeAll>
 800b100:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d107      	bne.n	800b118 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b108:	4b06      	ldr	r3, [pc, #24]	; (800b124 <vTaskDelay+0x64>)
 800b10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b118:	bf00      	nop
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	24000fb0 	.word	0x24000fb0
 800b124:	e000ed04 	.word	0xe000ed04

0800b128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08a      	sub	sp, #40	; 0x28
 800b12c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b132:	2300      	movs	r3, #0
 800b134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b136:	463a      	mov	r2, r7
 800b138:	1d39      	adds	r1, r7, #4
 800b13a:	f107 0308 	add.w	r3, r7, #8
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fe fe5a 	bl	8009df8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	9202      	str	r2, [sp, #8]
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	2300      	movs	r3, #0
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	2300      	movs	r3, #0
 800b154:	460a      	mov	r2, r1
 800b156:	4921      	ldr	r1, [pc, #132]	; (800b1dc <vTaskStartScheduler+0xb4>)
 800b158:	4821      	ldr	r0, [pc, #132]	; (800b1e0 <vTaskStartScheduler+0xb8>)
 800b15a:	f7ff fe0f 	bl	800ad7c <xTaskCreateStatic>
 800b15e:	4603      	mov	r3, r0
 800b160:	4a20      	ldr	r2, [pc, #128]	; (800b1e4 <vTaskStartScheduler+0xbc>)
 800b162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b164:	4b1f      	ldr	r3, [pc, #124]	; (800b1e4 <vTaskStartScheduler+0xbc>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b16c:	2301      	movs	r3, #1
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	e001      	b.n	800b176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b172:	2300      	movs	r3, #0
 800b174:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d102      	bne.n	800b182 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b17c:	f000 fdb2 	bl	800bce4 <xTimerCreateTimerTask>
 800b180:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d116      	bne.n	800b1b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	613b      	str	r3, [r7, #16]
}
 800b19a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b19c:	4b12      	ldr	r3, [pc, #72]	; (800b1e8 <vTaskStartScheduler+0xc0>)
 800b19e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1a4:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <vTaskStartScheduler+0xc4>)
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1aa:	4b11      	ldr	r3, [pc, #68]	; (800b1f0 <vTaskStartScheduler+0xc8>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1b0:	f001 f98e 	bl	800c4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1b4:	e00e      	b.n	800b1d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1bc:	d10a      	bne.n	800b1d4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	60fb      	str	r3, [r7, #12]
}
 800b1d0:	bf00      	nop
 800b1d2:	e7fe      	b.n	800b1d2 <vTaskStartScheduler+0xaa>
}
 800b1d4:	bf00      	nop
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	0800d884 	.word	0x0800d884
 800b1e0:	0800b949 	.word	0x0800b949
 800b1e4:	24000fac 	.word	0x24000fac
 800b1e8:	24000fa8 	.word	0x24000fa8
 800b1ec:	24000f94 	.word	0x24000f94
 800b1f0:	24000f8c 	.word	0x24000f8c

0800b1f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1f8:	4b04      	ldr	r3, [pc, #16]	; (800b20c <vTaskSuspendAll+0x18>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	4a03      	ldr	r2, [pc, #12]	; (800b20c <vTaskSuspendAll+0x18>)
 800b200:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b202:	bf00      	nop
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	24000fb0 	.word	0x24000fb0

0800b210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b21a:	2300      	movs	r3, #0
 800b21c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b21e:	4b42      	ldr	r3, [pc, #264]	; (800b328 <xTaskResumeAll+0x118>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10a      	bne.n	800b23c <xTaskResumeAll+0x2c>
	__asm volatile
 800b226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22a:	f383 8811 	msr	BASEPRI, r3
 800b22e:	f3bf 8f6f 	isb	sy
 800b232:	f3bf 8f4f 	dsb	sy
 800b236:	603b      	str	r3, [r7, #0]
}
 800b238:	bf00      	nop
 800b23a:	e7fe      	b.n	800b23a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b23c:	f001 f9ea 	bl	800c614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b240:	4b39      	ldr	r3, [pc, #228]	; (800b328 <xTaskResumeAll+0x118>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3b01      	subs	r3, #1
 800b246:	4a38      	ldr	r2, [pc, #224]	; (800b328 <xTaskResumeAll+0x118>)
 800b248:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b24a:	4b37      	ldr	r3, [pc, #220]	; (800b328 <xTaskResumeAll+0x118>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d162      	bne.n	800b318 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b252:	4b36      	ldr	r3, [pc, #216]	; (800b32c <xTaskResumeAll+0x11c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d05e      	beq.n	800b318 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b25a:	e02f      	b.n	800b2bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b25c:	4b34      	ldr	r3, [pc, #208]	; (800b330 <xTaskResumeAll+0x120>)
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	3318      	adds	r3, #24
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff f871 	bl	800a350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3304      	adds	r3, #4
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff f86c 	bl	800a350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b27c:	4b2d      	ldr	r3, [pc, #180]	; (800b334 <xTaskResumeAll+0x124>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d903      	bls.n	800b28c <xTaskResumeAll+0x7c>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b288:	4a2a      	ldr	r2, [pc, #168]	; (800b334 <xTaskResumeAll+0x124>)
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4a27      	ldr	r2, [pc, #156]	; (800b338 <xTaskResumeAll+0x128>)
 800b29a:	441a      	add	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	3304      	adds	r3, #4
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	f7fe fff7 	bl	800a296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ac:	4b23      	ldr	r3, [pc, #140]	; (800b33c <xTaskResumeAll+0x12c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d302      	bcc.n	800b2bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b2b6:	4b22      	ldr	r3, [pc, #136]	; (800b340 <xTaskResumeAll+0x130>)
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2bc:	4b1c      	ldr	r3, [pc, #112]	; (800b330 <xTaskResumeAll+0x120>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1cb      	bne.n	800b25c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2ca:	f000 fbf3 	bl	800bab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2ce:	4b1d      	ldr	r3, [pc, #116]	; (800b344 <xTaskResumeAll+0x134>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d010      	beq.n	800b2fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2da:	f000 f847 	bl	800b36c <xTaskIncrementTick>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b2e4:	4b16      	ldr	r3, [pc, #88]	; (800b340 <xTaskResumeAll+0x130>)
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1f1      	bne.n	800b2da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b2f6:	4b13      	ldr	r3, [pc, #76]	; (800b344 <xTaskResumeAll+0x134>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2fc:	4b10      	ldr	r3, [pc, #64]	; (800b340 <xTaskResumeAll+0x130>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d009      	beq.n	800b318 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b304:	2301      	movs	r3, #1
 800b306:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b308:	4b0f      	ldr	r3, [pc, #60]	; (800b348 <xTaskResumeAll+0x138>)
 800b30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b30e:	601a      	str	r2, [r3, #0]
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b318:	f001 f9ac 	bl	800c674 <vPortExitCritical>

	return xAlreadyYielded;
 800b31c:	68bb      	ldr	r3, [r7, #8]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	24000fb0 	.word	0x24000fb0
 800b32c:	24000f88 	.word	0x24000f88
 800b330:	24000f48 	.word	0x24000f48
 800b334:	24000f90 	.word	0x24000f90
 800b338:	24000ab8 	.word	0x24000ab8
 800b33c:	24000ab4 	.word	0x24000ab4
 800b340:	24000f9c 	.word	0x24000f9c
 800b344:	24000f98 	.word	0x24000f98
 800b348:	e000ed04 	.word	0xe000ed04

0800b34c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b352:	4b05      	ldr	r3, [pc, #20]	; (800b368 <xTaskGetTickCount+0x1c>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b358:	687b      	ldr	r3, [r7, #4]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	24000f8c 	.word	0x24000f8c

0800b36c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b372:	2300      	movs	r3, #0
 800b374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b376:	4b4f      	ldr	r3, [pc, #316]	; (800b4b4 <xTaskIncrementTick+0x148>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f040 808f 	bne.w	800b49e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b380:	4b4d      	ldr	r3, [pc, #308]	; (800b4b8 <xTaskIncrementTick+0x14c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3301      	adds	r3, #1
 800b386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b388:	4a4b      	ldr	r2, [pc, #300]	; (800b4b8 <xTaskIncrementTick+0x14c>)
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d120      	bne.n	800b3d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b394:	4b49      	ldr	r3, [pc, #292]	; (800b4bc <xTaskIncrementTick+0x150>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00a      	beq.n	800b3b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	603b      	str	r3, [r7, #0]
}
 800b3b0:	bf00      	nop
 800b3b2:	e7fe      	b.n	800b3b2 <xTaskIncrementTick+0x46>
 800b3b4:	4b41      	ldr	r3, [pc, #260]	; (800b4bc <xTaskIncrementTick+0x150>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	60fb      	str	r3, [r7, #12]
 800b3ba:	4b41      	ldr	r3, [pc, #260]	; (800b4c0 <xTaskIncrementTick+0x154>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a3f      	ldr	r2, [pc, #252]	; (800b4bc <xTaskIncrementTick+0x150>)
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	4a3f      	ldr	r2, [pc, #252]	; (800b4c0 <xTaskIncrementTick+0x154>)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6013      	str	r3, [r2, #0]
 800b3c8:	4b3e      	ldr	r3, [pc, #248]	; (800b4c4 <xTaskIncrementTick+0x158>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	4a3d      	ldr	r2, [pc, #244]	; (800b4c4 <xTaskIncrementTick+0x158>)
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	f000 fb6f 	bl	800bab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3d6:	4b3c      	ldr	r3, [pc, #240]	; (800b4c8 <xTaskIncrementTick+0x15c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	693a      	ldr	r2, [r7, #16]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d349      	bcc.n	800b474 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3e0:	4b36      	ldr	r3, [pc, #216]	; (800b4bc <xTaskIncrementTick+0x150>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d104      	bne.n	800b3f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3ea:	4b37      	ldr	r3, [pc, #220]	; (800b4c8 <xTaskIncrementTick+0x15c>)
 800b3ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3f0:	601a      	str	r2, [r3, #0]
					break;
 800b3f2:	e03f      	b.n	800b474 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f4:	4b31      	ldr	r3, [pc, #196]	; (800b4bc <xTaskIncrementTick+0x150>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b404:	693a      	ldr	r2, [r7, #16]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d203      	bcs.n	800b414 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b40c:	4a2e      	ldr	r2, [pc, #184]	; (800b4c8 <xTaskIncrementTick+0x15c>)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b412:	e02f      	b.n	800b474 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	3304      	adds	r3, #4
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe ff99 	bl	800a350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b422:	2b00      	cmp	r3, #0
 800b424:	d004      	beq.n	800b430 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	3318      	adds	r3, #24
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fe ff90 	bl	800a350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b434:	4b25      	ldr	r3, [pc, #148]	; (800b4cc <xTaskIncrementTick+0x160>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d903      	bls.n	800b444 <xTaskIncrementTick+0xd8>
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	4a22      	ldr	r2, [pc, #136]	; (800b4cc <xTaskIncrementTick+0x160>)
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b448:	4613      	mov	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	4a1f      	ldr	r2, [pc, #124]	; (800b4d0 <xTaskIncrementTick+0x164>)
 800b452:	441a      	add	r2, r3
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	3304      	adds	r3, #4
 800b458:	4619      	mov	r1, r3
 800b45a:	4610      	mov	r0, r2
 800b45c:	f7fe ff1b 	bl	800a296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b464:	4b1b      	ldr	r3, [pc, #108]	; (800b4d4 <xTaskIncrementTick+0x168>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d3b8      	bcc.n	800b3e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b46e:	2301      	movs	r3, #1
 800b470:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b472:	e7b5      	b.n	800b3e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b474:	4b17      	ldr	r3, [pc, #92]	; (800b4d4 <xTaskIncrementTick+0x168>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47a:	4915      	ldr	r1, [pc, #84]	; (800b4d0 <xTaskIncrementTick+0x164>)
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	440b      	add	r3, r1
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d901      	bls.n	800b490 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b48c:	2301      	movs	r3, #1
 800b48e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b490:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <xTaskIncrementTick+0x16c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d007      	beq.n	800b4a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b498:	2301      	movs	r3, #1
 800b49a:	617b      	str	r3, [r7, #20]
 800b49c:	e004      	b.n	800b4a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b49e:	4b0f      	ldr	r3, [pc, #60]	; (800b4dc <xTaskIncrementTick+0x170>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	4a0d      	ldr	r2, [pc, #52]	; (800b4dc <xTaskIncrementTick+0x170>)
 800b4a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4a8:	697b      	ldr	r3, [r7, #20]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	24000fb0 	.word	0x24000fb0
 800b4b8:	24000f8c 	.word	0x24000f8c
 800b4bc:	24000f40 	.word	0x24000f40
 800b4c0:	24000f44 	.word	0x24000f44
 800b4c4:	24000fa0 	.word	0x24000fa0
 800b4c8:	24000fa8 	.word	0x24000fa8
 800b4cc:	24000f90 	.word	0x24000f90
 800b4d0:	24000ab8 	.word	0x24000ab8
 800b4d4:	24000ab4 	.word	0x24000ab4
 800b4d8:	24000f9c 	.word	0x24000f9c
 800b4dc:	24000f98 	.word	0x24000f98

0800b4e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4e6:	4b28      	ldr	r3, [pc, #160]	; (800b588 <vTaskSwitchContext+0xa8>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4ee:	4b27      	ldr	r3, [pc, #156]	; (800b58c <vTaskSwitchContext+0xac>)
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4f4:	e041      	b.n	800b57a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b4f6:	4b25      	ldr	r3, [pc, #148]	; (800b58c <vTaskSwitchContext+0xac>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4fc:	4b24      	ldr	r3, [pc, #144]	; (800b590 <vTaskSwitchContext+0xb0>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	60fb      	str	r3, [r7, #12]
 800b502:	e010      	b.n	800b526 <vTaskSwitchContext+0x46>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10a      	bne.n	800b520 <vTaskSwitchContext+0x40>
	__asm volatile
 800b50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50e:	f383 8811 	msr	BASEPRI, r3
 800b512:	f3bf 8f6f 	isb	sy
 800b516:	f3bf 8f4f 	dsb	sy
 800b51a:	607b      	str	r3, [r7, #4]
}
 800b51c:	bf00      	nop
 800b51e:	e7fe      	b.n	800b51e <vTaskSwitchContext+0x3e>
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	3b01      	subs	r3, #1
 800b524:	60fb      	str	r3, [r7, #12]
 800b526:	491b      	ldr	r1, [pc, #108]	; (800b594 <vTaskSwitchContext+0xb4>)
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	4613      	mov	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4413      	add	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	440b      	add	r3, r1
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0e4      	beq.n	800b504 <vTaskSwitchContext+0x24>
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	4613      	mov	r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4413      	add	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4a13      	ldr	r2, [pc, #76]	; (800b594 <vTaskSwitchContext+0xb4>)
 800b546:	4413      	add	r3, r2
 800b548:	60bb      	str	r3, [r7, #8]
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	685a      	ldr	r2, [r3, #4]
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	605a      	str	r2, [r3, #4]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	3308      	adds	r3, #8
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d104      	bne.n	800b56a <vTaskSwitchContext+0x8a>
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	605a      	str	r2, [r3, #4]
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	4a09      	ldr	r2, [pc, #36]	; (800b598 <vTaskSwitchContext+0xb8>)
 800b572:	6013      	str	r3, [r2, #0]
 800b574:	4a06      	ldr	r2, [pc, #24]	; (800b590 <vTaskSwitchContext+0xb0>)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6013      	str	r3, [r2, #0]
}
 800b57a:	bf00      	nop
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	24000fb0 	.word	0x24000fb0
 800b58c:	24000f9c 	.word	0x24000f9c
 800b590:	24000f90 	.word	0x24000f90
 800b594:	24000ab8 	.word	0x24000ab8
 800b598:	24000ab4 	.word	0x24000ab4

0800b59c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10a      	bne.n	800b5c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	60fb      	str	r3, [r7, #12]
}
 800b5be:	bf00      	nop
 800b5c0:	e7fe      	b.n	800b5c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5c2:	4b07      	ldr	r3, [pc, #28]	; (800b5e0 <vTaskPlaceOnEventList+0x44>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	3318      	adds	r3, #24
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7fe fe87 	bl	800a2de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	6838      	ldr	r0, [r7, #0]
 800b5d4:	f000 fb32 	bl	800bc3c <prvAddCurrentTaskToDelayedList>
}
 800b5d8:	bf00      	nop
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	24000ab4 	.word	0x24000ab4

0800b5e4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d10a      	bne.n	800b60c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
 800b606:	617b      	str	r3, [r7, #20]
}
 800b608:	bf00      	nop
 800b60a:	e7fe      	b.n	800b60a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b60c:	4b11      	ldr	r3, [pc, #68]	; (800b654 <vTaskPlaceOnUnorderedEventList+0x70>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10a      	bne.n	800b62a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	613b      	str	r3, [r7, #16]
}
 800b626:	bf00      	nop
 800b628:	e7fe      	b.n	800b628 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b62a:	4b0b      	ldr	r3, [pc, #44]	; (800b658 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b634:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b636:	4b08      	ldr	r3, [pc, #32]	; (800b658 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	3318      	adds	r3, #24
 800b63c:	4619      	mov	r1, r3
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7fe fe29 	bl	800a296 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b644:	2101      	movs	r1, #1
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 faf8 	bl	800bc3c <prvAddCurrentTaskToDelayedList>
}
 800b64c:	bf00      	nop
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	24000fb0 	.word	0x24000fb0
 800b658:	24000ab4 	.word	0x24000ab4

0800b65c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10a      	bne.n	800b684 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	617b      	str	r3, [r7, #20]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b684:	4b0a      	ldr	r3, [pc, #40]	; (800b6b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	3318      	adds	r3, #24
 800b68a:	4619      	mov	r1, r3
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f7fe fe02 	bl	800a296 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b69c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	68b8      	ldr	r0, [r7, #8]
 800b6a2:	f000 facb 	bl	800bc3c <prvAddCurrentTaskToDelayedList>
	}
 800b6a6:	bf00      	nop
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	24000ab4 	.word	0x24000ab4

0800b6b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10a      	bne.n	800b6e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	60fb      	str	r3, [r7, #12]
}
 800b6dc:	bf00      	nop
 800b6de:	e7fe      	b.n	800b6de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	3318      	adds	r3, #24
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fe fe33 	bl	800a350 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ea:	4b1e      	ldr	r3, [pc, #120]	; (800b764 <xTaskRemoveFromEventList+0xb0>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d11d      	bne.n	800b72e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fe fe2a 	bl	800a350 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	4b19      	ldr	r3, [pc, #100]	; (800b768 <xTaskRemoveFromEventList+0xb4>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d903      	bls.n	800b710 <xTaskRemoveFromEventList+0x5c>
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70c:	4a16      	ldr	r2, [pc, #88]	; (800b768 <xTaskRemoveFromEventList+0xb4>)
 800b70e:	6013      	str	r3, [r2, #0]
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b714:	4613      	mov	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4a13      	ldr	r2, [pc, #76]	; (800b76c <xTaskRemoveFromEventList+0xb8>)
 800b71e:	441a      	add	r2, r3
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	3304      	adds	r3, #4
 800b724:	4619      	mov	r1, r3
 800b726:	4610      	mov	r0, r2
 800b728:	f7fe fdb5 	bl	800a296 <vListInsertEnd>
 800b72c:	e005      	b.n	800b73a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	3318      	adds	r3, #24
 800b732:	4619      	mov	r1, r3
 800b734:	480e      	ldr	r0, [pc, #56]	; (800b770 <xTaskRemoveFromEventList+0xbc>)
 800b736:	f7fe fdae 	bl	800a296 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73e:	4b0d      	ldr	r3, [pc, #52]	; (800b774 <xTaskRemoveFromEventList+0xc0>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b744:	429a      	cmp	r2, r3
 800b746:	d905      	bls.n	800b754 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b748:	2301      	movs	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b74c:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <xTaskRemoveFromEventList+0xc4>)
 800b74e:	2201      	movs	r2, #1
 800b750:	601a      	str	r2, [r3, #0]
 800b752:	e001      	b.n	800b758 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b754:	2300      	movs	r3, #0
 800b756:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b758:	697b      	ldr	r3, [r7, #20]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	24000fb0 	.word	0x24000fb0
 800b768:	24000f90 	.word	0x24000f90
 800b76c:	24000ab8 	.word	0x24000ab8
 800b770:	24000f48 	.word	0x24000f48
 800b774:	24000ab4 	.word	0x24000ab4
 800b778:	24000f9c 	.word	0x24000f9c

0800b77c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b786:	4b29      	ldr	r3, [pc, #164]	; (800b82c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10a      	bne.n	800b7a4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	613b      	str	r3, [r7, #16]
}
 800b7a0:	bf00      	nop
 800b7a2:	e7fe      	b.n	800b7a2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10a      	bne.n	800b7d0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	60fb      	str	r3, [r7, #12]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7fe fdbd 	bl	800a350 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fe fdb8 	bl	800a350 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e4:	4b12      	ldr	r3, [pc, #72]	; (800b830 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d903      	bls.n	800b7f4 <vTaskRemoveFromUnorderedEventList+0x78>
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	4a0f      	ldr	r2, [pc, #60]	; (800b830 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4a0c      	ldr	r2, [pc, #48]	; (800b834 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b802:	441a      	add	r2, r3
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	3304      	adds	r3, #4
 800b808:	4619      	mov	r1, r3
 800b80a:	4610      	mov	r0, r2
 800b80c:	f7fe fd43 	bl	800a296 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b814:	4b08      	ldr	r3, [pc, #32]	; (800b838 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d902      	bls.n	800b824 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b81e:	4b07      	ldr	r3, [pc, #28]	; (800b83c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b820:	2201      	movs	r2, #1
 800b822:	601a      	str	r2, [r3, #0]
	}
}
 800b824:	bf00      	nop
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	24000fb0 	.word	0x24000fb0
 800b830:	24000f90 	.word	0x24000f90
 800b834:	24000ab8 	.word	0x24000ab8
 800b838:	24000ab4 	.word	0x24000ab4
 800b83c:	24000f9c 	.word	0x24000f9c

0800b840 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b848:	4b06      	ldr	r3, [pc, #24]	; (800b864 <vTaskInternalSetTimeOutState+0x24>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b850:	4b05      	ldr	r3, [pc, #20]	; (800b868 <vTaskInternalSetTimeOutState+0x28>)
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	605a      	str	r2, [r3, #4]
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	24000fa0 	.word	0x24000fa0
 800b868:	24000f8c 	.word	0x24000f8c

0800b86c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10a      	bne.n	800b892 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	613b      	str	r3, [r7, #16]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10a      	bne.n	800b8ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	60fb      	str	r3, [r7, #12]
}
 800b8aa:	bf00      	nop
 800b8ac:	e7fe      	b.n	800b8ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8ae:	f000 feb1 	bl	800c614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8b2:	4b1d      	ldr	r3, [pc, #116]	; (800b928 <xTaskCheckForTimeOut+0xbc>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	69ba      	ldr	r2, [r7, #24]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8ca:	d102      	bne.n	800b8d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	61fb      	str	r3, [r7, #28]
 800b8d0:	e023      	b.n	800b91a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	4b15      	ldr	r3, [pc, #84]	; (800b92c <xTaskCheckForTimeOut+0xc0>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d007      	beq.n	800b8ee <xTaskCheckForTimeOut+0x82>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	69ba      	ldr	r2, [r7, #24]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d302      	bcc.n	800b8ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	61fb      	str	r3, [r7, #28]
 800b8ec:	e015      	b.n	800b91a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d20b      	bcs.n	800b910 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	1ad2      	subs	r2, r2, r3
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff ff9b 	bl	800b840 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b90a:	2300      	movs	r3, #0
 800b90c:	61fb      	str	r3, [r7, #28]
 800b90e:	e004      	b.n	800b91a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b916:	2301      	movs	r3, #1
 800b918:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b91a:	f000 feab 	bl	800c674 <vPortExitCritical>

	return xReturn;
 800b91e:	69fb      	ldr	r3, [r7, #28]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3720      	adds	r7, #32
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	24000f8c 	.word	0x24000f8c
 800b92c:	24000fa0 	.word	0x24000fa0

0800b930 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b930:	b480      	push	{r7}
 800b932:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b934:	4b03      	ldr	r3, [pc, #12]	; (800b944 <vTaskMissedYield+0x14>)
 800b936:	2201      	movs	r2, #1
 800b938:	601a      	str	r2, [r3, #0]
}
 800b93a:	bf00      	nop
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	24000f9c 	.word	0x24000f9c

0800b948 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b950:	f000 f852 	bl	800b9f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b954:	4b06      	ldr	r3, [pc, #24]	; (800b970 <prvIdleTask+0x28>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d9f9      	bls.n	800b950 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b95c:	4b05      	ldr	r3, [pc, #20]	; (800b974 <prvIdleTask+0x2c>)
 800b95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b96c:	e7f0      	b.n	800b950 <prvIdleTask+0x8>
 800b96e:	bf00      	nop
 800b970:	24000ab8 	.word	0x24000ab8
 800b974:	e000ed04 	.word	0xe000ed04

0800b978 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b97e:	2300      	movs	r3, #0
 800b980:	607b      	str	r3, [r7, #4]
 800b982:	e00c      	b.n	800b99e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	4613      	mov	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	4413      	add	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4a12      	ldr	r2, [pc, #72]	; (800b9d8 <prvInitialiseTaskLists+0x60>)
 800b990:	4413      	add	r3, r2
 800b992:	4618      	mov	r0, r3
 800b994:	f7fe fc52 	bl	800a23c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	3301      	adds	r3, #1
 800b99c:	607b      	str	r3, [r7, #4]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b37      	cmp	r3, #55	; 0x37
 800b9a2:	d9ef      	bls.n	800b984 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9a4:	480d      	ldr	r0, [pc, #52]	; (800b9dc <prvInitialiseTaskLists+0x64>)
 800b9a6:	f7fe fc49 	bl	800a23c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9aa:	480d      	ldr	r0, [pc, #52]	; (800b9e0 <prvInitialiseTaskLists+0x68>)
 800b9ac:	f7fe fc46 	bl	800a23c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9b0:	480c      	ldr	r0, [pc, #48]	; (800b9e4 <prvInitialiseTaskLists+0x6c>)
 800b9b2:	f7fe fc43 	bl	800a23c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9b6:	480c      	ldr	r0, [pc, #48]	; (800b9e8 <prvInitialiseTaskLists+0x70>)
 800b9b8:	f7fe fc40 	bl	800a23c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9bc:	480b      	ldr	r0, [pc, #44]	; (800b9ec <prvInitialiseTaskLists+0x74>)
 800b9be:	f7fe fc3d 	bl	800a23c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9c2:	4b0b      	ldr	r3, [pc, #44]	; (800b9f0 <prvInitialiseTaskLists+0x78>)
 800b9c4:	4a05      	ldr	r2, [pc, #20]	; (800b9dc <prvInitialiseTaskLists+0x64>)
 800b9c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9c8:	4b0a      	ldr	r3, [pc, #40]	; (800b9f4 <prvInitialiseTaskLists+0x7c>)
 800b9ca:	4a05      	ldr	r2, [pc, #20]	; (800b9e0 <prvInitialiseTaskLists+0x68>)
 800b9cc:	601a      	str	r2, [r3, #0]
}
 800b9ce:	bf00      	nop
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	24000ab8 	.word	0x24000ab8
 800b9dc:	24000f18 	.word	0x24000f18
 800b9e0:	24000f2c 	.word	0x24000f2c
 800b9e4:	24000f48 	.word	0x24000f48
 800b9e8:	24000f5c 	.word	0x24000f5c
 800b9ec:	24000f74 	.word	0x24000f74
 800b9f0:	24000f40 	.word	0x24000f40
 800b9f4:	24000f44 	.word	0x24000f44

0800b9f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9fe:	e019      	b.n	800ba34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba00:	f000 fe08 	bl	800c614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba04:	4b10      	ldr	r3, [pc, #64]	; (800ba48 <prvCheckTasksWaitingTermination+0x50>)
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	3304      	adds	r3, #4
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fc9d 	bl	800a350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba16:	4b0d      	ldr	r3, [pc, #52]	; (800ba4c <prvCheckTasksWaitingTermination+0x54>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	4a0b      	ldr	r2, [pc, #44]	; (800ba4c <prvCheckTasksWaitingTermination+0x54>)
 800ba1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba20:	4b0b      	ldr	r3, [pc, #44]	; (800ba50 <prvCheckTasksWaitingTermination+0x58>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	4a0a      	ldr	r2, [pc, #40]	; (800ba50 <prvCheckTasksWaitingTermination+0x58>)
 800ba28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba2a:	f000 fe23 	bl	800c674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f810 	bl	800ba54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba34:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <prvCheckTasksWaitingTermination+0x58>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1e1      	bne.n	800ba00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba3c:	bf00      	nop
 800ba3e:	bf00      	nop
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	24000f5c 	.word	0x24000f5c
 800ba4c:	24000f88 	.word	0x24000f88
 800ba50:	24000f70 	.word	0x24000f70

0800ba54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d108      	bne.n	800ba78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 ffc0 	bl	800c9f0 <vPortFree>
				vPortFree( pxTCB );
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 ffbd 	bl	800c9f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba76:	e018      	b.n	800baaa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d103      	bne.n	800ba8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 ffb4 	bl	800c9f0 <vPortFree>
	}
 800ba88:	e00f      	b.n	800baaa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d00a      	beq.n	800baaa <prvDeleteTCB+0x56>
	__asm volatile
 800ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	60fb      	str	r3, [r7, #12]
}
 800baa6:	bf00      	nop
 800baa8:	e7fe      	b.n	800baa8 <prvDeleteTCB+0x54>
	}
 800baaa:	bf00      	nop
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baba:	4b0c      	ldr	r3, [pc, #48]	; (800baec <prvResetNextTaskUnblockTime+0x38>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d104      	bne.n	800bace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bac4:	4b0a      	ldr	r3, [pc, #40]	; (800baf0 <prvResetNextTaskUnblockTime+0x3c>)
 800bac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800baca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bacc:	e008      	b.n	800bae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bace:	4b07      	ldr	r3, [pc, #28]	; (800baec <prvResetNextTaskUnblockTime+0x38>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	4a04      	ldr	r2, [pc, #16]	; (800baf0 <prvResetNextTaskUnblockTime+0x3c>)
 800bade:	6013      	str	r3, [r2, #0]
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	24000f40 	.word	0x24000f40
 800baf0:	24000fa8 	.word	0x24000fa8

0800baf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bafa:	4b0b      	ldr	r3, [pc, #44]	; (800bb28 <xTaskGetSchedulerState+0x34>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d102      	bne.n	800bb08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb02:	2301      	movs	r3, #1
 800bb04:	607b      	str	r3, [r7, #4]
 800bb06:	e008      	b.n	800bb1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb08:	4b08      	ldr	r3, [pc, #32]	; (800bb2c <xTaskGetSchedulerState+0x38>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d102      	bne.n	800bb16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb10:	2302      	movs	r3, #2
 800bb12:	607b      	str	r3, [r7, #4]
 800bb14:	e001      	b.n	800bb1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb16:	2300      	movs	r3, #0
 800bb18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb1a:	687b      	ldr	r3, [r7, #4]
	}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	24000f94 	.word	0x24000f94
 800bb2c:	24000fb0 	.word	0x24000fb0

0800bb30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d056      	beq.n	800bbf4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb46:	4b2e      	ldr	r3, [pc, #184]	; (800bc00 <xTaskPriorityDisinherit+0xd0>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	693a      	ldr	r2, [r7, #16]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d00a      	beq.n	800bb66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	60fb      	str	r3, [r7, #12]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	60bb      	str	r3, [r7, #8]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb88:	1e5a      	subs	r2, r3, #1
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d02c      	beq.n	800bbf4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d128      	bne.n	800bbf4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	3304      	adds	r3, #4
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe fbd2 	bl	800a350 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc4:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <xTaskPriorityDisinherit+0xd4>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d903      	bls.n	800bbd4 <xTaskPriorityDisinherit+0xa4>
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd0:	4a0c      	ldr	r2, [pc, #48]	; (800bc04 <xTaskPriorityDisinherit+0xd4>)
 800bbd2:	6013      	str	r3, [r2, #0]
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd8:	4613      	mov	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4a09      	ldr	r2, [pc, #36]	; (800bc08 <xTaskPriorityDisinherit+0xd8>)
 800bbe2:	441a      	add	r2, r3
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4610      	mov	r0, r2
 800bbec:	f7fe fb53 	bl	800a296 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbf4:	697b      	ldr	r3, [r7, #20]
	}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	24000ab4 	.word	0x24000ab4
 800bc04:	24000f90 	.word	0x24000f90
 800bc08:	24000ab8 	.word	0x24000ab8

0800bc0c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bc12:	4b09      	ldr	r3, [pc, #36]	; (800bc38 <uxTaskResetEventItemValue+0x2c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	699b      	ldr	r3, [r3, #24]
 800bc18:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc1a:	4b07      	ldr	r3, [pc, #28]	; (800bc38 <uxTaskResetEventItemValue+0x2c>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc20:	4b05      	ldr	r3, [pc, #20]	; (800bc38 <uxTaskResetEventItemValue+0x2c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bc28:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bc2a:	687b      	ldr	r3, [r7, #4]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	24000ab4 	.word	0x24000ab4

0800bc3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc46:	4b21      	ldr	r3, [pc, #132]	; (800bccc <prvAddCurrentTaskToDelayedList+0x90>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4c:	4b20      	ldr	r3, [pc, #128]	; (800bcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe fb7c 	bl	800a350 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc5e:	d10a      	bne.n	800bc76 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d007      	beq.n	800bc76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc66:	4b1a      	ldr	r3, [pc, #104]	; (800bcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	4819      	ldr	r0, [pc, #100]	; (800bcd4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc70:	f7fe fb11 	bl	800a296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc74:	e026      	b.n	800bcc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc7e:	4b14      	ldr	r3, [pc, #80]	; (800bcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d209      	bcs.n	800bca2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc8e:	4b12      	ldr	r3, [pc, #72]	; (800bcd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	4b0f      	ldr	r3, [pc, #60]	; (800bcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3304      	adds	r3, #4
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	f7fe fb1f 	bl	800a2de <vListInsert>
}
 800bca0:	e010      	b.n	800bcc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bca2:	4b0e      	ldr	r3, [pc, #56]	; (800bcdc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	4b0a      	ldr	r3, [pc, #40]	; (800bcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3304      	adds	r3, #4
 800bcac:	4619      	mov	r1, r3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	f7fe fb15 	bl	800a2de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d202      	bcs.n	800bcc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcbe:	4a08      	ldr	r2, [pc, #32]	; (800bce0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	6013      	str	r3, [r2, #0]
}
 800bcc4:	bf00      	nop
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	24000f8c 	.word	0x24000f8c
 800bcd0:	24000ab4 	.word	0x24000ab4
 800bcd4:	24000f74 	.word	0x24000f74
 800bcd8:	24000f44 	.word	0x24000f44
 800bcdc:	24000f40 	.word	0x24000f40
 800bce0:	24000fa8 	.word	0x24000fa8

0800bce4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08a      	sub	sp, #40	; 0x28
 800bce8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcee:	f000 fb07 	bl	800c300 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcf2:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <xTimerCreateTimerTask+0x80>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d021      	beq.n	800bd3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd02:	1d3a      	adds	r2, r7, #4
 800bd04:	f107 0108 	add.w	r1, r7, #8
 800bd08:	f107 030c 	add.w	r3, r7, #12
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe f88d 	bl	8009e2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	9202      	str	r2, [sp, #8]
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	2300      	movs	r3, #0
 800bd22:	460a      	mov	r2, r1
 800bd24:	4910      	ldr	r1, [pc, #64]	; (800bd68 <xTimerCreateTimerTask+0x84>)
 800bd26:	4811      	ldr	r0, [pc, #68]	; (800bd6c <xTimerCreateTimerTask+0x88>)
 800bd28:	f7ff f828 	bl	800ad7c <xTaskCreateStatic>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	4a10      	ldr	r2, [pc, #64]	; (800bd70 <xTimerCreateTimerTask+0x8c>)
 800bd30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd32:	4b0f      	ldr	r3, [pc, #60]	; (800bd70 <xTimerCreateTimerTask+0x8c>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d001      	beq.n	800bd3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10a      	bne.n	800bd5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	613b      	str	r3, [r7, #16]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd5a:	697b      	ldr	r3, [r7, #20]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	24000fe4 	.word	0x24000fe4
 800bd68:	0800d88c 	.word	0x0800d88c
 800bd6c:	0800bea9 	.word	0x0800bea9
 800bd70:	24000fe8 	.word	0x24000fe8

0800bd74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08a      	sub	sp, #40	; 0x28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd82:	2300      	movs	r3, #0
 800bd84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10a      	bne.n	800bda2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	623b      	str	r3, [r7, #32]
}
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bda2:	4b1a      	ldr	r3, [pc, #104]	; (800be0c <xTimerGenericCommand+0x98>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d02a      	beq.n	800be00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	2b05      	cmp	r3, #5
 800bdba:	dc18      	bgt.n	800bdee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bdbc:	f7ff fe9a 	bl	800baf4 <xTaskGetSchedulerState>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d109      	bne.n	800bdda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bdc6:	4b11      	ldr	r3, [pc, #68]	; (800be0c <xTimerGenericCommand+0x98>)
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	f107 0110 	add.w	r1, r7, #16
 800bdce:	2300      	movs	r3, #0
 800bdd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdd2:	f7fe fbeb 	bl	800a5ac <xQueueGenericSend>
 800bdd6:	6278      	str	r0, [r7, #36]	; 0x24
 800bdd8:	e012      	b.n	800be00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bdda:	4b0c      	ldr	r3, [pc, #48]	; (800be0c <xTimerGenericCommand+0x98>)
 800bddc:	6818      	ldr	r0, [r3, #0]
 800bdde:	f107 0110 	add.w	r1, r7, #16
 800bde2:	2300      	movs	r3, #0
 800bde4:	2200      	movs	r2, #0
 800bde6:	f7fe fbe1 	bl	800a5ac <xQueueGenericSend>
 800bdea:	6278      	str	r0, [r7, #36]	; 0x24
 800bdec:	e008      	b.n	800be00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdee:	4b07      	ldr	r3, [pc, #28]	; (800be0c <xTimerGenericCommand+0x98>)
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	f107 0110 	add.w	r1, r7, #16
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	f7fe fcd5 	bl	800a7a8 <xQueueGenericSendFromISR>
 800bdfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be02:	4618      	mov	r0, r3
 800be04:	3728      	adds	r7, #40	; 0x28
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	24000fe4 	.word	0x24000fe4

0800be10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af02      	add	r7, sp, #8
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be1a:	4b22      	ldr	r3, [pc, #136]	; (800bea4 <prvProcessExpiredTimer+0x94>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	3304      	adds	r3, #4
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe fa91 	bl	800a350 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be34:	f003 0304 	and.w	r3, r3, #4
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d022      	beq.n	800be82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	699a      	ldr	r2, [r3, #24]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	18d1      	adds	r1, r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	6978      	ldr	r0, [r7, #20]
 800be4a:	f000 f8d1 	bl	800bff0 <prvInsertTimerInActiveList>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d01f      	beq.n	800be94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be54:	2300      	movs	r3, #0
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	2300      	movs	r3, #0
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	2100      	movs	r1, #0
 800be5e:	6978      	ldr	r0, [r7, #20]
 800be60:	f7ff ff88 	bl	800bd74 <xTimerGenericCommand>
 800be64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d113      	bne.n	800be94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	60fb      	str	r3, [r7, #12]
}
 800be7e:	bf00      	nop
 800be80:	e7fe      	b.n	800be80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be88:	f023 0301 	bic.w	r3, r3, #1
 800be8c:	b2da      	uxtb	r2, r3
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	6a1b      	ldr	r3, [r3, #32]
 800be98:	6978      	ldr	r0, [r7, #20]
 800be9a:	4798      	blx	r3
}
 800be9c:	bf00      	nop
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	24000fdc 	.word	0x24000fdc

0800bea8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800beb0:	f107 0308 	add.w	r3, r7, #8
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 f857 	bl	800bf68 <prvGetNextExpireTime>
 800beba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	4619      	mov	r1, r3
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f000 f803 	bl	800becc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bec6:	f000 f8d5 	bl	800c074 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800beca:	e7f1      	b.n	800beb0 <prvTimerTask+0x8>

0800becc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bed6:	f7ff f98d 	bl	800b1f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800beda:	f107 0308 	add.w	r3, r7, #8
 800bede:	4618      	mov	r0, r3
 800bee0:	f000 f866 	bl	800bfb0 <prvSampleTimeNow>
 800bee4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d130      	bne.n	800bf4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10a      	bne.n	800bf08 <prvProcessTimerOrBlockTask+0x3c>
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d806      	bhi.n	800bf08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800befa:	f7ff f989 	bl	800b210 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800befe:	68f9      	ldr	r1, [r7, #12]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7ff ff85 	bl	800be10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf06:	e024      	b.n	800bf52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d008      	beq.n	800bf20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf0e:	4b13      	ldr	r3, [pc, #76]	; (800bf5c <prvProcessTimerOrBlockTask+0x90>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <prvProcessTimerOrBlockTask+0x50>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e000      	b.n	800bf1e <prvProcessTimerOrBlockTask+0x52>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf20:	4b0f      	ldr	r3, [pc, #60]	; (800bf60 <prvProcessTimerOrBlockTask+0x94>)
 800bf22:	6818      	ldr	r0, [r3, #0]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	f7fe fef1 	bl	800ad14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf32:	f7ff f96d 	bl	800b210 <xTaskResumeAll>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf3c:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <prvProcessTimerOrBlockTask+0x98>)
 800bf3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf42:	601a      	str	r2, [r3, #0]
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	f3bf 8f6f 	isb	sy
}
 800bf4c:	e001      	b.n	800bf52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf4e:	f7ff f95f 	bl	800b210 <xTaskResumeAll>
}
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	24000fe0 	.word	0x24000fe0
 800bf60:	24000fe4 	.word	0x24000fe4
 800bf64:	e000ed04 	.word	0xe000ed04

0800bf68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf70:	4b0e      	ldr	r3, [pc, #56]	; (800bfac <prvGetNextExpireTime+0x44>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d101      	bne.n	800bf7e <prvGetNextExpireTime+0x16>
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	e000      	b.n	800bf80 <prvGetNextExpireTime+0x18>
 800bf7e:	2200      	movs	r2, #0
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d105      	bne.n	800bf98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf8c:	4b07      	ldr	r3, [pc, #28]	; (800bfac <prvGetNextExpireTime+0x44>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	60fb      	str	r3, [r7, #12]
 800bf96:	e001      	b.n	800bf9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	24000fdc 	.word	0x24000fdc

0800bfb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bfb8:	f7ff f9c8 	bl	800b34c <xTaskGetTickCount>
 800bfbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfbe:	4b0b      	ldr	r3, [pc, #44]	; (800bfec <prvSampleTimeNow+0x3c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d205      	bcs.n	800bfd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfc8:	f000 f936 	bl	800c238 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	601a      	str	r2, [r3, #0]
 800bfd2:	e002      	b.n	800bfda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfda:	4a04      	ldr	r2, [pc, #16]	; (800bfec <prvSampleTimeNow+0x3c>)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	24000fec 	.word	0x24000fec

0800bff0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bffe:	2300      	movs	r3, #0
 800c000:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	429a      	cmp	r2, r3
 800c014:	d812      	bhi.n	800c03c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	1ad2      	subs	r2, r2, r3
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	429a      	cmp	r2, r3
 800c022:	d302      	bcc.n	800c02a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c024:	2301      	movs	r3, #1
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	e01b      	b.n	800c062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c02a:	4b10      	ldr	r3, [pc, #64]	; (800c06c <prvInsertTimerInActiveList+0x7c>)
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	3304      	adds	r3, #4
 800c032:	4619      	mov	r1, r3
 800c034:	4610      	mov	r0, r2
 800c036:	f7fe f952 	bl	800a2de <vListInsert>
 800c03a:	e012      	b.n	800c062 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d206      	bcs.n	800c052 <prvInsertTimerInActiveList+0x62>
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d302      	bcc.n	800c052 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c04c:	2301      	movs	r3, #1
 800c04e:	617b      	str	r3, [r7, #20]
 800c050:	e007      	b.n	800c062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c052:	4b07      	ldr	r3, [pc, #28]	; (800c070 <prvInsertTimerInActiveList+0x80>)
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	3304      	adds	r3, #4
 800c05a:	4619      	mov	r1, r3
 800c05c:	4610      	mov	r0, r2
 800c05e:	f7fe f93e 	bl	800a2de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c062:	697b      	ldr	r3, [r7, #20]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	24000fe0 	.word	0x24000fe0
 800c070:	24000fdc 	.word	0x24000fdc

0800c074 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b08e      	sub	sp, #56	; 0x38
 800c078:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c07a:	e0ca      	b.n	800c212 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	da18      	bge.n	800c0b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c082:	1d3b      	adds	r3, r7, #4
 800c084:	3304      	adds	r3, #4
 800c086:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10a      	bne.n	800c0a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	61fb      	str	r3, [r7, #28]
}
 800c0a0:	bf00      	nop
 800c0a2:	e7fe      	b.n	800c0a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0aa:	6850      	ldr	r0, [r2, #4]
 800c0ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0ae:	6892      	ldr	r2, [r2, #8]
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f2c0 80aa 	blt.w	800c210 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d004      	beq.n	800c0d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fe f93f 	bl	800a350 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0d2:	463b      	mov	r3, r7
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7ff ff6b 	bl	800bfb0 <prvSampleTimeNow>
 800c0da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b09      	cmp	r3, #9
 800c0e0:	f200 8097 	bhi.w	800c212 <prvProcessReceivedCommands+0x19e>
 800c0e4:	a201      	add	r2, pc, #4	; (adr r2, 800c0ec <prvProcessReceivedCommands+0x78>)
 800c0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ea:	bf00      	nop
 800c0ec:	0800c115 	.word	0x0800c115
 800c0f0:	0800c115 	.word	0x0800c115
 800c0f4:	0800c115 	.word	0x0800c115
 800c0f8:	0800c189 	.word	0x0800c189
 800c0fc:	0800c19d 	.word	0x0800c19d
 800c100:	0800c1e7 	.word	0x0800c1e7
 800c104:	0800c115 	.word	0x0800c115
 800c108:	0800c115 	.word	0x0800c115
 800c10c:	0800c189 	.word	0x0800c189
 800c110:	0800c19d 	.word	0x0800c19d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c11a:	f043 0301 	orr.w	r3, r3, #1
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	18d1      	adds	r1, r2, r3
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c134:	f7ff ff5c 	bl	800bff0 <prvInsertTimerInActiveList>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d069      	beq.n	800c212 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c140:	6a1b      	ldr	r3, [r3, #32]
 800c142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c14c:	f003 0304 	and.w	r3, r3, #4
 800c150:	2b00      	cmp	r3, #0
 800c152:	d05e      	beq.n	800c212 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	441a      	add	r2, r3
 800c15c:	2300      	movs	r3, #0
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	2300      	movs	r3, #0
 800c162:	2100      	movs	r1, #0
 800c164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c166:	f7ff fe05 	bl	800bd74 <xTimerGenericCommand>
 800c16a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d14f      	bne.n	800c212 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	61bb      	str	r3, [r7, #24]
}
 800c184:	bf00      	nop
 800c186:	e7fe      	b.n	800c186 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c18e:	f023 0301 	bic.w	r3, r3, #1
 800c192:	b2da      	uxtb	r2, r3
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c19a:	e03a      	b.n	800c212 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1a2:	f043 0301 	orr.w	r3, r3, #1
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b6:	699b      	ldr	r3, [r3, #24]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	617b      	str	r3, [r7, #20]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d4:	699a      	ldr	r2, [r3, #24]
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	18d1      	adds	r1, r2, r3
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1e0:	f7ff ff06 	bl	800bff0 <prvInsertTimerInActiveList>
					break;
 800c1e4:	e015      	b.n	800c212 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1ec:	f003 0302 	and.w	r3, r3, #2
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d103      	bne.n	800c1fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c1f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1f6:	f000 fbfb 	bl	800c9f0 <vPortFree>
 800c1fa:	e00a      	b.n	800c212 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c202:	f023 0301 	bic.w	r3, r3, #1
 800c206:	b2da      	uxtb	r2, r3
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c20e:	e000      	b.n	800c212 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c210:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c212:	4b08      	ldr	r3, [pc, #32]	; (800c234 <prvProcessReceivedCommands+0x1c0>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	1d39      	adds	r1, r7, #4
 800c218:	2200      	movs	r2, #0
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fe fb60 	bl	800a8e0 <xQueueReceive>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	f47f af2a 	bne.w	800c07c <prvProcessReceivedCommands+0x8>
	}
}
 800c228:	bf00      	nop
 800c22a:	bf00      	nop
 800c22c:	3730      	adds	r7, #48	; 0x30
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	24000fe4 	.word	0x24000fe4

0800c238 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b088      	sub	sp, #32
 800c23c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c23e:	e048      	b.n	800c2d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c240:	4b2d      	ldr	r3, [pc, #180]	; (800c2f8 <prvSwitchTimerLists+0xc0>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c24a:	4b2b      	ldr	r3, [pc, #172]	; (800c2f8 <prvSwitchTimerLists+0xc0>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	3304      	adds	r3, #4
 800c258:	4618      	mov	r0, r3
 800c25a:	f7fe f879 	bl	800a350 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c26c:	f003 0304 	and.w	r3, r3, #4
 800c270:	2b00      	cmp	r3, #0
 800c272:	d02e      	beq.n	800c2d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	699b      	ldr	r3, [r3, #24]
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	4413      	add	r3, r2
 800c27c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	429a      	cmp	r2, r3
 800c284:	d90e      	bls.n	800c2a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c292:	4b19      	ldr	r3, [pc, #100]	; (800c2f8 <prvSwitchTimerLists+0xc0>)
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	3304      	adds	r3, #4
 800c29a:	4619      	mov	r1, r3
 800c29c:	4610      	mov	r0, r2
 800c29e:	f7fe f81e 	bl	800a2de <vListInsert>
 800c2a2:	e016      	b.n	800c2d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	693a      	ldr	r2, [r7, #16]
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f7ff fd60 	bl	800bd74 <xTimerGenericCommand>
 800c2b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d10a      	bne.n	800c2d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	603b      	str	r3, [r7, #0]
}
 800c2ce:	bf00      	nop
 800c2d0:	e7fe      	b.n	800c2d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2d2:	4b09      	ldr	r3, [pc, #36]	; (800c2f8 <prvSwitchTimerLists+0xc0>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1b1      	bne.n	800c240 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2dc:	4b06      	ldr	r3, [pc, #24]	; (800c2f8 <prvSwitchTimerLists+0xc0>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2e2:	4b06      	ldr	r3, [pc, #24]	; (800c2fc <prvSwitchTimerLists+0xc4>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a04      	ldr	r2, [pc, #16]	; (800c2f8 <prvSwitchTimerLists+0xc0>)
 800c2e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2ea:	4a04      	ldr	r2, [pc, #16]	; (800c2fc <prvSwitchTimerLists+0xc4>)
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	6013      	str	r3, [r2, #0]
}
 800c2f0:	bf00      	nop
 800c2f2:	3718      	adds	r7, #24
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	24000fdc 	.word	0x24000fdc
 800c2fc:	24000fe0 	.word	0x24000fe0

0800c300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c306:	f000 f985 	bl	800c614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c30a:	4b15      	ldr	r3, [pc, #84]	; (800c360 <prvCheckForValidListAndQueue+0x60>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d120      	bne.n	800c354 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c312:	4814      	ldr	r0, [pc, #80]	; (800c364 <prvCheckForValidListAndQueue+0x64>)
 800c314:	f7fd ff92 	bl	800a23c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c318:	4813      	ldr	r0, [pc, #76]	; (800c368 <prvCheckForValidListAndQueue+0x68>)
 800c31a:	f7fd ff8f 	bl	800a23c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c31e:	4b13      	ldr	r3, [pc, #76]	; (800c36c <prvCheckForValidListAndQueue+0x6c>)
 800c320:	4a10      	ldr	r2, [pc, #64]	; (800c364 <prvCheckForValidListAndQueue+0x64>)
 800c322:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c324:	4b12      	ldr	r3, [pc, #72]	; (800c370 <prvCheckForValidListAndQueue+0x70>)
 800c326:	4a10      	ldr	r2, [pc, #64]	; (800c368 <prvCheckForValidListAndQueue+0x68>)
 800c328:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c32a:	2300      	movs	r3, #0
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	4b11      	ldr	r3, [pc, #68]	; (800c374 <prvCheckForValidListAndQueue+0x74>)
 800c330:	4a11      	ldr	r2, [pc, #68]	; (800c378 <prvCheckForValidListAndQueue+0x78>)
 800c332:	2110      	movs	r1, #16
 800c334:	200a      	movs	r0, #10
 800c336:	f7fe f89d 	bl	800a474 <xQueueGenericCreateStatic>
 800c33a:	4603      	mov	r3, r0
 800c33c:	4a08      	ldr	r2, [pc, #32]	; (800c360 <prvCheckForValidListAndQueue+0x60>)
 800c33e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c340:	4b07      	ldr	r3, [pc, #28]	; (800c360 <prvCheckForValidListAndQueue+0x60>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d005      	beq.n	800c354 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c348:	4b05      	ldr	r3, [pc, #20]	; (800c360 <prvCheckForValidListAndQueue+0x60>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	490b      	ldr	r1, [pc, #44]	; (800c37c <prvCheckForValidListAndQueue+0x7c>)
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe fcb6 	bl	800acc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c354:	f000 f98e 	bl	800c674 <vPortExitCritical>
}
 800c358:	bf00      	nop
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	24000fe4 	.word	0x24000fe4
 800c364:	24000fb4 	.word	0x24000fb4
 800c368:	24000fc8 	.word	0x24000fc8
 800c36c:	24000fdc 	.word	0x24000fdc
 800c370:	24000fe0 	.word	0x24000fe0
 800c374:	24001090 	.word	0x24001090
 800c378:	24000ff0 	.word	0x24000ff0
 800c37c:	0800d894 	.word	0x0800d894

0800c380 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c380:	b580      	push	{r7, lr}
 800c382:	b08a      	sub	sp, #40	; 0x28
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c38e:	f06f 0301 	mvn.w	r3, #1
 800c392:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3a0:	4b06      	ldr	r3, [pc, #24]	; (800c3bc <xTimerPendFunctionCallFromISR+0x3c>)
 800c3a2:	6818      	ldr	r0, [r3, #0]
 800c3a4:	f107 0114 	add.w	r1, r7, #20
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	f7fe f9fc 	bl	800a7a8 <xQueueGenericSendFromISR>
 800c3b0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3728      	adds	r7, #40	; 0x28
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	24000fe4 	.word	0x24000fe4

0800c3c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3b04      	subs	r3, #4
 800c3d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3b04      	subs	r3, #4
 800c3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	f023 0201 	bic.w	r2, r3, #1
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	3b04      	subs	r3, #4
 800c3ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3f0:	4a0c      	ldr	r2, [pc, #48]	; (800c424 <pxPortInitialiseStack+0x64>)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3b14      	subs	r3, #20
 800c3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	3b04      	subs	r3, #4
 800c406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f06f 0202 	mvn.w	r2, #2
 800c40e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3b20      	subs	r3, #32
 800c414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c416:	68fb      	ldr	r3, [r7, #12]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	0800c429 	.word	0x0800c429

0800c428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c432:	4b12      	ldr	r3, [pc, #72]	; (800c47c <prvTaskExitError+0x54>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c43a:	d00a      	beq.n	800c452 <prvTaskExitError+0x2a>
	__asm volatile
 800c43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	60fb      	str	r3, [r7, #12]
}
 800c44e:	bf00      	nop
 800c450:	e7fe      	b.n	800c450 <prvTaskExitError+0x28>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	60bb      	str	r3, [r7, #8]
}
 800c464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c466:	bf00      	nop
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d0fc      	beq.n	800c468 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c46e:	bf00      	nop
 800c470:	bf00      	nop
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	24000010 	.word	0x24000010

0800c480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c480:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <pxCurrentTCBConst2>)
 800c482:	6819      	ldr	r1, [r3, #0]
 800c484:	6808      	ldr	r0, [r1, #0]
 800c486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48a:	f380 8809 	msr	PSP, r0
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f04f 0000 	mov.w	r0, #0
 800c496:	f380 8811 	msr	BASEPRI, r0
 800c49a:	4770      	bx	lr
 800c49c:	f3af 8000 	nop.w

0800c4a0 <pxCurrentTCBConst2>:
 800c4a0:	24000ab4 	.word	0x24000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop

0800c4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4a8:	4808      	ldr	r0, [pc, #32]	; (800c4cc <prvPortStartFirstTask+0x24>)
 800c4aa:	6800      	ldr	r0, [r0, #0]
 800c4ac:	6800      	ldr	r0, [r0, #0]
 800c4ae:	f380 8808 	msr	MSP, r0
 800c4b2:	f04f 0000 	mov.w	r0, #0
 800c4b6:	f380 8814 	msr	CONTROL, r0
 800c4ba:	b662      	cpsie	i
 800c4bc:	b661      	cpsie	f
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	df00      	svc	0
 800c4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4ca:	bf00      	nop
 800c4cc:	e000ed08 	.word	0xe000ed08

0800c4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4d6:	4b46      	ldr	r3, [pc, #280]	; (800c5f0 <xPortStartScheduler+0x120>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a46      	ldr	r2, [pc, #280]	; (800c5f4 <xPortStartScheduler+0x124>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d10a      	bne.n	800c4f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	613b      	str	r3, [r7, #16]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4f6:	4b3e      	ldr	r3, [pc, #248]	; (800c5f0 <xPortStartScheduler+0x120>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a3f      	ldr	r2, [pc, #252]	; (800c5f8 <xPortStartScheduler+0x128>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d10a      	bne.n	800c516 <xPortStartScheduler+0x46>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	60fb      	str	r3, [r7, #12]
}
 800c512:	bf00      	nop
 800c514:	e7fe      	b.n	800c514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c516:	4b39      	ldr	r3, [pc, #228]	; (800c5fc <xPortStartScheduler+0x12c>)
 800c518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	22ff      	movs	r2, #255	; 0xff
 800c526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c530:	78fb      	ldrb	r3, [r7, #3]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	4b31      	ldr	r3, [pc, #196]	; (800c600 <xPortStartScheduler+0x130>)
 800c53c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c53e:	4b31      	ldr	r3, [pc, #196]	; (800c604 <xPortStartScheduler+0x134>)
 800c540:	2207      	movs	r2, #7
 800c542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c544:	e009      	b.n	800c55a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c546:	4b2f      	ldr	r3, [pc, #188]	; (800c604 <xPortStartScheduler+0x134>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3b01      	subs	r3, #1
 800c54c:	4a2d      	ldr	r2, [pc, #180]	; (800c604 <xPortStartScheduler+0x134>)
 800c54e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	b2db      	uxtb	r3, r3
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	b2db      	uxtb	r3, r3
 800c558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c55a:	78fb      	ldrb	r3, [r7, #3]
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c562:	2b80      	cmp	r3, #128	; 0x80
 800c564:	d0ef      	beq.n	800c546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c566:	4b27      	ldr	r3, [pc, #156]	; (800c604 <xPortStartScheduler+0x134>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f1c3 0307 	rsb	r3, r3, #7
 800c56e:	2b04      	cmp	r3, #4
 800c570:	d00a      	beq.n	800c588 <xPortStartScheduler+0xb8>
	__asm volatile
 800c572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	60bb      	str	r3, [r7, #8]
}
 800c584:	bf00      	nop
 800c586:	e7fe      	b.n	800c586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c588:	4b1e      	ldr	r3, [pc, #120]	; (800c604 <xPortStartScheduler+0x134>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	021b      	lsls	r3, r3, #8
 800c58e:	4a1d      	ldr	r2, [pc, #116]	; (800c604 <xPortStartScheduler+0x134>)
 800c590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c592:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <xPortStartScheduler+0x134>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c59a:	4a1a      	ldr	r2, [pc, #104]	; (800c604 <xPortStartScheduler+0x134>)
 800c59c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c5a6:	4b18      	ldr	r3, [pc, #96]	; (800c608 <xPortStartScheduler+0x138>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a17      	ldr	r2, [pc, #92]	; (800c608 <xPortStartScheduler+0x138>)
 800c5ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5b2:	4b15      	ldr	r3, [pc, #84]	; (800c608 <xPortStartScheduler+0x138>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a14      	ldr	r2, [pc, #80]	; (800c608 <xPortStartScheduler+0x138>)
 800c5b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c5bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5be:	f000 f8dd 	bl	800c77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5c2:	4b12      	ldr	r3, [pc, #72]	; (800c60c <xPortStartScheduler+0x13c>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5c8:	f000 f8fc 	bl	800c7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5cc:	4b10      	ldr	r3, [pc, #64]	; (800c610 <xPortStartScheduler+0x140>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a0f      	ldr	r2, [pc, #60]	; (800c610 <xPortStartScheduler+0x140>)
 800c5d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5d8:	f7ff ff66 	bl	800c4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5dc:	f7fe ff80 	bl	800b4e0 <vTaskSwitchContext>
	prvTaskExitError();
 800c5e0:	f7ff ff22 	bl	800c428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3718      	adds	r7, #24
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	e000ed00 	.word	0xe000ed00
 800c5f4:	410fc271 	.word	0x410fc271
 800c5f8:	410fc270 	.word	0x410fc270
 800c5fc:	e000e400 	.word	0xe000e400
 800c600:	240010e0 	.word	0x240010e0
 800c604:	240010e4 	.word	0x240010e4
 800c608:	e000ed20 	.word	0xe000ed20
 800c60c:	24000010 	.word	0x24000010
 800c610:	e000ef34 	.word	0xe000ef34

0800c614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	607b      	str	r3, [r7, #4]
}
 800c62c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c62e:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <vPortEnterCritical+0x58>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3301      	adds	r3, #1
 800c634:	4a0d      	ldr	r2, [pc, #52]	; (800c66c <vPortEnterCritical+0x58>)
 800c636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c638:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <vPortEnterCritical+0x58>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d10f      	bne.n	800c660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c640:	4b0b      	ldr	r3, [pc, #44]	; (800c670 <vPortEnterCritical+0x5c>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	b2db      	uxtb	r3, r3
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <vPortEnterCritical+0x4c>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	603b      	str	r3, [r7, #0]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <vPortEnterCritical+0x4a>
	}
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	24000010 	.word	0x24000010
 800c670:	e000ed04 	.word	0xe000ed04

0800c674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c67a:	4b12      	ldr	r3, [pc, #72]	; (800c6c4 <vPortExitCritical+0x50>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10a      	bne.n	800c698 <vPortExitCritical+0x24>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	607b      	str	r3, [r7, #4]
}
 800c694:	bf00      	nop
 800c696:	e7fe      	b.n	800c696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c698:	4b0a      	ldr	r3, [pc, #40]	; (800c6c4 <vPortExitCritical+0x50>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3b01      	subs	r3, #1
 800c69e:	4a09      	ldr	r2, [pc, #36]	; (800c6c4 <vPortExitCritical+0x50>)
 800c6a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6a2:	4b08      	ldr	r3, [pc, #32]	; (800c6c4 <vPortExitCritical+0x50>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d105      	bne.n	800c6b6 <vPortExitCritical+0x42>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	f383 8811 	msr	BASEPRI, r3
}
 800c6b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6b6:	bf00      	nop
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	24000010 	.word	0x24000010
	...

0800c6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6d0:	f3ef 8009 	mrs	r0, PSP
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	4b15      	ldr	r3, [pc, #84]	; (800c730 <pxCurrentTCBConst>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	f01e 0f10 	tst.w	lr, #16
 800c6e0:	bf08      	it	eq
 800c6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ea:	6010      	str	r0, [r2, #0]
 800c6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6f4:	f380 8811 	msr	BASEPRI, r0
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f7fe feee 	bl	800b4e0 <vTaskSwitchContext>
 800c704:	f04f 0000 	mov.w	r0, #0
 800c708:	f380 8811 	msr	BASEPRI, r0
 800c70c:	bc09      	pop	{r0, r3}
 800c70e:	6819      	ldr	r1, [r3, #0]
 800c710:	6808      	ldr	r0, [r1, #0]
 800c712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c716:	f01e 0f10 	tst.w	lr, #16
 800c71a:	bf08      	it	eq
 800c71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c720:	f380 8809 	msr	PSP, r0
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	f3af 8000 	nop.w

0800c730 <pxCurrentTCBConst>:
 800c730:	24000ab4 	.word	0x24000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c734:	bf00      	nop
 800c736:	bf00      	nop

0800c738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c752:	f7fe fe0b 	bl	800b36c <xTaskIncrementTick>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c75c:	4b06      	ldr	r3, [pc, #24]	; (800c778 <xPortSysTickHandler+0x40>)
 800c75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	2300      	movs	r3, #0
 800c766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	f383 8811 	msr	BASEPRI, r3
}
 800c76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	e000ed04 	.word	0xe000ed04

0800c77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c77c:	b480      	push	{r7}
 800c77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c780:	4b0b      	ldr	r3, [pc, #44]	; (800c7b0 <vPortSetupTimerInterrupt+0x34>)
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c786:	4b0b      	ldr	r3, [pc, #44]	; (800c7b4 <vPortSetupTimerInterrupt+0x38>)
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c78c:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <vPortSetupTimerInterrupt+0x3c>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a0a      	ldr	r2, [pc, #40]	; (800c7bc <vPortSetupTimerInterrupt+0x40>)
 800c792:	fba2 2303 	umull	r2, r3, r2, r3
 800c796:	099b      	lsrs	r3, r3, #6
 800c798:	4a09      	ldr	r2, [pc, #36]	; (800c7c0 <vPortSetupTimerInterrupt+0x44>)
 800c79a:	3b01      	subs	r3, #1
 800c79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c79e:	4b04      	ldr	r3, [pc, #16]	; (800c7b0 <vPortSetupTimerInterrupt+0x34>)
 800c7a0:	2207      	movs	r2, #7
 800c7a2:	601a      	str	r2, [r3, #0]
}
 800c7a4:	bf00      	nop
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	e000e010 	.word	0xe000e010
 800c7b4:	e000e018 	.word	0xe000e018
 800c7b8:	24000000 	.word	0x24000000
 800c7bc:	10624dd3 	.word	0x10624dd3
 800c7c0:	e000e014 	.word	0xe000e014

0800c7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7d4 <vPortEnableVFP+0x10>
 800c7c8:	6801      	ldr	r1, [r0, #0]
 800c7ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7ce:	6001      	str	r1, [r0, #0]
 800c7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7d2:	bf00      	nop
 800c7d4:	e000ed88 	.word	0xe000ed88

0800c7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7de:	f3ef 8305 	mrs	r3, IPSR
 800c7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2b0f      	cmp	r3, #15
 800c7e8:	d914      	bls.n	800c814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7ea:	4a17      	ldr	r2, [pc, #92]	; (800c848 <vPortValidateInterruptPriority+0x70>)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7f4:	4b15      	ldr	r3, [pc, #84]	; (800c84c <vPortValidateInterruptPriority+0x74>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	7afa      	ldrb	r2, [r7, #11]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d20a      	bcs.n	800c814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	607b      	str	r3, [r7, #4]
}
 800c810:	bf00      	nop
 800c812:	e7fe      	b.n	800c812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c814:	4b0e      	ldr	r3, [pc, #56]	; (800c850 <vPortValidateInterruptPriority+0x78>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c81c:	4b0d      	ldr	r3, [pc, #52]	; (800c854 <vPortValidateInterruptPriority+0x7c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	429a      	cmp	r2, r3
 800c822:	d90a      	bls.n	800c83a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	603b      	str	r3, [r7, #0]
}
 800c836:	bf00      	nop
 800c838:	e7fe      	b.n	800c838 <vPortValidateInterruptPriority+0x60>
	}
 800c83a:	bf00      	nop
 800c83c:	3714      	adds	r7, #20
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	e000e3f0 	.word	0xe000e3f0
 800c84c:	240010e0 	.word	0x240010e0
 800c850:	e000ed0c 	.word	0xe000ed0c
 800c854:	240010e4 	.word	0x240010e4

0800c858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08a      	sub	sp, #40	; 0x28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c860:	2300      	movs	r3, #0
 800c862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c864:	f7fe fcc6 	bl	800b1f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c868:	4b5b      	ldr	r3, [pc, #364]	; (800c9d8 <pvPortMalloc+0x180>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c870:	f000 f920 	bl	800cab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c874:	4b59      	ldr	r3, [pc, #356]	; (800c9dc <pvPortMalloc+0x184>)
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4013      	ands	r3, r2
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f040 8093 	bne.w	800c9a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d01d      	beq.n	800c8c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c888:	2208      	movs	r2, #8
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4413      	add	r3, r2
 800c88e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f003 0307 	and.w	r3, r3, #7
 800c896:	2b00      	cmp	r3, #0
 800c898:	d014      	beq.n	800c8c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f023 0307 	bic.w	r3, r3, #7
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f003 0307 	and.w	r3, r3, #7
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00a      	beq.n	800c8c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	617b      	str	r3, [r7, #20]
}
 800c8c0:	bf00      	nop
 800c8c2:	e7fe      	b.n	800c8c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d06e      	beq.n	800c9a8 <pvPortMalloc+0x150>
 800c8ca:	4b45      	ldr	r3, [pc, #276]	; (800c9e0 <pvPortMalloc+0x188>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d869      	bhi.n	800c9a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8d4:	4b43      	ldr	r3, [pc, #268]	; (800c9e4 <pvPortMalloc+0x18c>)
 800c8d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8d8:	4b42      	ldr	r3, [pc, #264]	; (800c9e4 <pvPortMalloc+0x18c>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8de:	e004      	b.n	800c8ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d903      	bls.n	800c8fc <pvPortMalloc+0xa4>
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1f1      	bne.n	800c8e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8fc:	4b36      	ldr	r3, [pc, #216]	; (800c9d8 <pvPortMalloc+0x180>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c902:	429a      	cmp	r2, r3
 800c904:	d050      	beq.n	800c9a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c906:	6a3b      	ldr	r3, [r7, #32]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2208      	movs	r2, #8
 800c90c:	4413      	add	r3, r2
 800c90e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	6a3b      	ldr	r3, [r7, #32]
 800c916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	1ad2      	subs	r2, r2, r3
 800c920:	2308      	movs	r3, #8
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	429a      	cmp	r2, r3
 800c926:	d91f      	bls.n	800c968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4413      	add	r3, r2
 800c92e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	f003 0307 	and.w	r3, r3, #7
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00a      	beq.n	800c950 <pvPortMalloc+0xf8>
	__asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	613b      	str	r3, [r7, #16]
}
 800c94c:	bf00      	nop
 800c94e:	e7fe      	b.n	800c94e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	1ad2      	subs	r2, r2, r3
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c962:	69b8      	ldr	r0, [r7, #24]
 800c964:	f000 f908 	bl	800cb78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c968:	4b1d      	ldr	r3, [pc, #116]	; (800c9e0 <pvPortMalloc+0x188>)
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	4a1b      	ldr	r2, [pc, #108]	; (800c9e0 <pvPortMalloc+0x188>)
 800c974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c976:	4b1a      	ldr	r3, [pc, #104]	; (800c9e0 <pvPortMalloc+0x188>)
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	4b1b      	ldr	r3, [pc, #108]	; (800c9e8 <pvPortMalloc+0x190>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d203      	bcs.n	800c98a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c982:	4b17      	ldr	r3, [pc, #92]	; (800c9e0 <pvPortMalloc+0x188>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a18      	ldr	r2, [pc, #96]	; (800c9e8 <pvPortMalloc+0x190>)
 800c988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	685a      	ldr	r2, [r3, #4]
 800c98e:	4b13      	ldr	r3, [pc, #76]	; (800c9dc <pvPortMalloc+0x184>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	431a      	orrs	r2, r3
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99a:	2200      	movs	r2, #0
 800c99c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c99e:	4b13      	ldr	r3, [pc, #76]	; (800c9ec <pvPortMalloc+0x194>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	4a11      	ldr	r2, [pc, #68]	; (800c9ec <pvPortMalloc+0x194>)
 800c9a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9a8:	f7fe fc32 	bl	800b210 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	f003 0307 	and.w	r3, r3, #7
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00a      	beq.n	800c9cc <pvPortMalloc+0x174>
	__asm volatile
 800c9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	60fb      	str	r3, [r7, #12]
}
 800c9c8:	bf00      	nop
 800c9ca:	e7fe      	b.n	800c9ca <pvPortMalloc+0x172>
	return pvReturn;
 800c9cc:	69fb      	ldr	r3, [r7, #28]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3728      	adds	r7, #40	; 0x28
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	24004cf0 	.word	0x24004cf0
 800c9dc:	24004d04 	.word	0x24004d04
 800c9e0:	24004cf4 	.word	0x24004cf4
 800c9e4:	24004ce8 	.word	0x24004ce8
 800c9e8:	24004cf8 	.word	0x24004cf8
 800c9ec:	24004cfc 	.word	0x24004cfc

0800c9f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d04d      	beq.n	800ca9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca02:	2308      	movs	r3, #8
 800ca04:	425b      	negs	r3, r3
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	4413      	add	r3, r2
 800ca0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	4b24      	ldr	r3, [pc, #144]	; (800caa8 <vPortFree+0xb8>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4013      	ands	r3, r2
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10a      	bne.n	800ca34 <vPortFree+0x44>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	60fb      	str	r3, [r7, #12]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00a      	beq.n	800ca52 <vPortFree+0x62>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	60bb      	str	r3, [r7, #8]
}
 800ca4e:	bf00      	nop
 800ca50:	e7fe      	b.n	800ca50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	4b14      	ldr	r3, [pc, #80]	; (800caa8 <vPortFree+0xb8>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d01e      	beq.n	800ca9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d11a      	bne.n	800ca9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	4b0e      	ldr	r3, [pc, #56]	; (800caa8 <vPortFree+0xb8>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	43db      	mvns	r3, r3
 800ca72:	401a      	ands	r2, r3
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca78:	f7fe fbbc 	bl	800b1f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	4b0a      	ldr	r3, [pc, #40]	; (800caac <vPortFree+0xbc>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4413      	add	r3, r2
 800ca86:	4a09      	ldr	r2, [pc, #36]	; (800caac <vPortFree+0xbc>)
 800ca88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca8a:	6938      	ldr	r0, [r7, #16]
 800ca8c:	f000 f874 	bl	800cb78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca90:	4b07      	ldr	r3, [pc, #28]	; (800cab0 <vPortFree+0xc0>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	3301      	adds	r3, #1
 800ca96:	4a06      	ldr	r2, [pc, #24]	; (800cab0 <vPortFree+0xc0>)
 800ca98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca9a:	f7fe fbb9 	bl	800b210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca9e:	bf00      	nop
 800caa0:	3718      	adds	r7, #24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	24004d04 	.word	0x24004d04
 800caac:	24004cf4 	.word	0x24004cf4
 800cab0:	24004d00 	.word	0x24004d00

0800cab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800caba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cabe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cac0:	4b27      	ldr	r3, [pc, #156]	; (800cb60 <prvHeapInit+0xac>)
 800cac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00c      	beq.n	800cae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3307      	adds	r3, #7
 800cad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f023 0307 	bic.w	r3, r3, #7
 800cada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	4a1f      	ldr	r2, [pc, #124]	; (800cb60 <prvHeapInit+0xac>)
 800cae4:	4413      	add	r3, r2
 800cae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800caec:	4a1d      	ldr	r2, [pc, #116]	; (800cb64 <prvHeapInit+0xb0>)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800caf2:	4b1c      	ldr	r3, [pc, #112]	; (800cb64 <prvHeapInit+0xb0>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	4413      	add	r3, r2
 800cafe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb00:	2208      	movs	r2, #8
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	1a9b      	subs	r3, r3, r2
 800cb06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f023 0307 	bic.w	r3, r3, #7
 800cb0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	4a15      	ldr	r2, [pc, #84]	; (800cb68 <prvHeapInit+0xb4>)
 800cb14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb16:	4b14      	ldr	r3, [pc, #80]	; (800cb68 <prvHeapInit+0xb4>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb1e:	4b12      	ldr	r3, [pc, #72]	; (800cb68 <prvHeapInit+0xb4>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	1ad2      	subs	r2, r2, r3
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb34:	4b0c      	ldr	r3, [pc, #48]	; (800cb68 <prvHeapInit+0xb4>)
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	4a0a      	ldr	r2, [pc, #40]	; (800cb6c <prvHeapInit+0xb8>)
 800cb42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	4a09      	ldr	r2, [pc, #36]	; (800cb70 <prvHeapInit+0xbc>)
 800cb4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb4c:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <prvHeapInit+0xc0>)
 800cb4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb52:	601a      	str	r2, [r3, #0]
}
 800cb54:	bf00      	nop
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	240010e8 	.word	0x240010e8
 800cb64:	24004ce8 	.word	0x24004ce8
 800cb68:	24004cf0 	.word	0x24004cf0
 800cb6c:	24004cf8 	.word	0x24004cf8
 800cb70:	24004cf4 	.word	0x24004cf4
 800cb74:	24004d04 	.word	0x24004d04

0800cb78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb80:	4b28      	ldr	r3, [pc, #160]	; (800cc24 <prvInsertBlockIntoFreeList+0xac>)
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	e002      	b.n	800cb8c <prvInsertBlockIntoFreeList+0x14>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d8f7      	bhi.n	800cb86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	4413      	add	r3, r2
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d108      	bne.n	800cbba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	441a      	add	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	441a      	add	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d118      	bne.n	800cc00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	4b15      	ldr	r3, [pc, #84]	; (800cc28 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d00d      	beq.n	800cbf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	441a      	add	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	e008      	b.n	800cc08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbf6:	4b0c      	ldr	r3, [pc, #48]	; (800cc28 <prvInsertBlockIntoFreeList+0xb0>)
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	e003      	b.n	800cc08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d002      	beq.n	800cc16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc16:	bf00      	nop
 800cc18:	3714      	adds	r7, #20
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	24004ce8 	.word	0x24004ce8
 800cc28:	24004cf0 	.word	0x24004cf0

0800cc2c <__errno>:
 800cc2c:	4b01      	ldr	r3, [pc, #4]	; (800cc34 <__errno+0x8>)
 800cc2e:	6818      	ldr	r0, [r3, #0]
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	24000014 	.word	0x24000014

0800cc38 <__libc_init_array>:
 800cc38:	b570      	push	{r4, r5, r6, lr}
 800cc3a:	4d0d      	ldr	r5, [pc, #52]	; (800cc70 <__libc_init_array+0x38>)
 800cc3c:	4c0d      	ldr	r4, [pc, #52]	; (800cc74 <__libc_init_array+0x3c>)
 800cc3e:	1b64      	subs	r4, r4, r5
 800cc40:	10a4      	asrs	r4, r4, #2
 800cc42:	2600      	movs	r6, #0
 800cc44:	42a6      	cmp	r6, r4
 800cc46:	d109      	bne.n	800cc5c <__libc_init_array+0x24>
 800cc48:	4d0b      	ldr	r5, [pc, #44]	; (800cc78 <__libc_init_array+0x40>)
 800cc4a:	4c0c      	ldr	r4, [pc, #48]	; (800cc7c <__libc_init_array+0x44>)
 800cc4c:	f000 fd2c 	bl	800d6a8 <_init>
 800cc50:	1b64      	subs	r4, r4, r5
 800cc52:	10a4      	asrs	r4, r4, #2
 800cc54:	2600      	movs	r6, #0
 800cc56:	42a6      	cmp	r6, r4
 800cc58:	d105      	bne.n	800cc66 <__libc_init_array+0x2e>
 800cc5a:	bd70      	pop	{r4, r5, r6, pc}
 800cc5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc60:	4798      	blx	r3
 800cc62:	3601      	adds	r6, #1
 800cc64:	e7ee      	b.n	800cc44 <__libc_init_array+0xc>
 800cc66:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc6a:	4798      	blx	r3
 800cc6c:	3601      	adds	r6, #1
 800cc6e:	e7f2      	b.n	800cc56 <__libc_init_array+0x1e>
 800cc70:	0800d9d0 	.word	0x0800d9d0
 800cc74:	0800d9d0 	.word	0x0800d9d0
 800cc78:	0800d9d0 	.word	0x0800d9d0
 800cc7c:	0800d9d4 	.word	0x0800d9d4

0800cc80 <memcpy>:
 800cc80:	440a      	add	r2, r1
 800cc82:	4291      	cmp	r1, r2
 800cc84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cc88:	d100      	bne.n	800cc8c <memcpy+0xc>
 800cc8a:	4770      	bx	lr
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc96:	4291      	cmp	r1, r2
 800cc98:	d1f9      	bne.n	800cc8e <memcpy+0xe>
 800cc9a:	bd10      	pop	{r4, pc}

0800cc9c <memset>:
 800cc9c:	4402      	add	r2, r0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d100      	bne.n	800cca6 <memset+0xa>
 800cca4:	4770      	bx	lr
 800cca6:	f803 1b01 	strb.w	r1, [r3], #1
 800ccaa:	e7f9      	b.n	800cca0 <memset+0x4>

0800ccac <_puts_r>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	460e      	mov	r6, r1
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	b118      	cbz	r0, 800ccbc <_puts_r+0x10>
 800ccb4:	6983      	ldr	r3, [r0, #24]
 800ccb6:	b90b      	cbnz	r3, 800ccbc <_puts_r+0x10>
 800ccb8:	f000 fa48 	bl	800d14c <__sinit>
 800ccbc:	69ab      	ldr	r3, [r5, #24]
 800ccbe:	68ac      	ldr	r4, [r5, #8]
 800ccc0:	b913      	cbnz	r3, 800ccc8 <_puts_r+0x1c>
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	f000 fa42 	bl	800d14c <__sinit>
 800ccc8:	4b2c      	ldr	r3, [pc, #176]	; (800cd7c <_puts_r+0xd0>)
 800ccca:	429c      	cmp	r4, r3
 800cccc:	d120      	bne.n	800cd10 <_puts_r+0x64>
 800ccce:	686c      	ldr	r4, [r5, #4]
 800ccd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccd2:	07db      	lsls	r3, r3, #31
 800ccd4:	d405      	bmi.n	800cce2 <_puts_r+0x36>
 800ccd6:	89a3      	ldrh	r3, [r4, #12]
 800ccd8:	0598      	lsls	r0, r3, #22
 800ccda:	d402      	bmi.n	800cce2 <_puts_r+0x36>
 800ccdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccde:	f000 fad3 	bl	800d288 <__retarget_lock_acquire_recursive>
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	0719      	lsls	r1, r3, #28
 800cce6:	d51d      	bpl.n	800cd24 <_puts_r+0x78>
 800cce8:	6923      	ldr	r3, [r4, #16]
 800ccea:	b1db      	cbz	r3, 800cd24 <_puts_r+0x78>
 800ccec:	3e01      	subs	r6, #1
 800ccee:	68a3      	ldr	r3, [r4, #8]
 800ccf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	60a3      	str	r3, [r4, #8]
 800ccf8:	bb39      	cbnz	r1, 800cd4a <_puts_r+0x9e>
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	da38      	bge.n	800cd70 <_puts_r+0xc4>
 800ccfe:	4622      	mov	r2, r4
 800cd00:	210a      	movs	r1, #10
 800cd02:	4628      	mov	r0, r5
 800cd04:	f000 f848 	bl	800cd98 <__swbuf_r>
 800cd08:	3001      	adds	r0, #1
 800cd0a:	d011      	beq.n	800cd30 <_puts_r+0x84>
 800cd0c:	250a      	movs	r5, #10
 800cd0e:	e011      	b.n	800cd34 <_puts_r+0x88>
 800cd10:	4b1b      	ldr	r3, [pc, #108]	; (800cd80 <_puts_r+0xd4>)
 800cd12:	429c      	cmp	r4, r3
 800cd14:	d101      	bne.n	800cd1a <_puts_r+0x6e>
 800cd16:	68ac      	ldr	r4, [r5, #8]
 800cd18:	e7da      	b.n	800ccd0 <_puts_r+0x24>
 800cd1a:	4b1a      	ldr	r3, [pc, #104]	; (800cd84 <_puts_r+0xd8>)
 800cd1c:	429c      	cmp	r4, r3
 800cd1e:	bf08      	it	eq
 800cd20:	68ec      	ldreq	r4, [r5, #12]
 800cd22:	e7d5      	b.n	800ccd0 <_puts_r+0x24>
 800cd24:	4621      	mov	r1, r4
 800cd26:	4628      	mov	r0, r5
 800cd28:	f000 f888 	bl	800ce3c <__swsetup_r>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d0dd      	beq.n	800ccec <_puts_r+0x40>
 800cd30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cd34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd36:	07da      	lsls	r2, r3, #31
 800cd38:	d405      	bmi.n	800cd46 <_puts_r+0x9a>
 800cd3a:	89a3      	ldrh	r3, [r4, #12]
 800cd3c:	059b      	lsls	r3, r3, #22
 800cd3e:	d402      	bmi.n	800cd46 <_puts_r+0x9a>
 800cd40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd42:	f000 faa2 	bl	800d28a <__retarget_lock_release_recursive>
 800cd46:	4628      	mov	r0, r5
 800cd48:	bd70      	pop	{r4, r5, r6, pc}
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	da04      	bge.n	800cd58 <_puts_r+0xac>
 800cd4e:	69a2      	ldr	r2, [r4, #24]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	dc06      	bgt.n	800cd62 <_puts_r+0xb6>
 800cd54:	290a      	cmp	r1, #10
 800cd56:	d004      	beq.n	800cd62 <_puts_r+0xb6>
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	1c5a      	adds	r2, r3, #1
 800cd5c:	6022      	str	r2, [r4, #0]
 800cd5e:	7019      	strb	r1, [r3, #0]
 800cd60:	e7c5      	b.n	800ccee <_puts_r+0x42>
 800cd62:	4622      	mov	r2, r4
 800cd64:	4628      	mov	r0, r5
 800cd66:	f000 f817 	bl	800cd98 <__swbuf_r>
 800cd6a:	3001      	adds	r0, #1
 800cd6c:	d1bf      	bne.n	800ccee <_puts_r+0x42>
 800cd6e:	e7df      	b.n	800cd30 <_puts_r+0x84>
 800cd70:	6823      	ldr	r3, [r4, #0]
 800cd72:	250a      	movs	r5, #10
 800cd74:	1c5a      	adds	r2, r3, #1
 800cd76:	6022      	str	r2, [r4, #0]
 800cd78:	701d      	strb	r5, [r3, #0]
 800cd7a:	e7db      	b.n	800cd34 <_puts_r+0x88>
 800cd7c:	0800d988 	.word	0x0800d988
 800cd80:	0800d9a8 	.word	0x0800d9a8
 800cd84:	0800d968 	.word	0x0800d968

0800cd88 <puts>:
 800cd88:	4b02      	ldr	r3, [pc, #8]	; (800cd94 <puts+0xc>)
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	6818      	ldr	r0, [r3, #0]
 800cd8e:	f7ff bf8d 	b.w	800ccac <_puts_r>
 800cd92:	bf00      	nop
 800cd94:	24000014 	.word	0x24000014

0800cd98 <__swbuf_r>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	460e      	mov	r6, r1
 800cd9c:	4614      	mov	r4, r2
 800cd9e:	4605      	mov	r5, r0
 800cda0:	b118      	cbz	r0, 800cdaa <__swbuf_r+0x12>
 800cda2:	6983      	ldr	r3, [r0, #24]
 800cda4:	b90b      	cbnz	r3, 800cdaa <__swbuf_r+0x12>
 800cda6:	f000 f9d1 	bl	800d14c <__sinit>
 800cdaa:	4b21      	ldr	r3, [pc, #132]	; (800ce30 <__swbuf_r+0x98>)
 800cdac:	429c      	cmp	r4, r3
 800cdae:	d12b      	bne.n	800ce08 <__swbuf_r+0x70>
 800cdb0:	686c      	ldr	r4, [r5, #4]
 800cdb2:	69a3      	ldr	r3, [r4, #24]
 800cdb4:	60a3      	str	r3, [r4, #8]
 800cdb6:	89a3      	ldrh	r3, [r4, #12]
 800cdb8:	071a      	lsls	r2, r3, #28
 800cdba:	d52f      	bpl.n	800ce1c <__swbuf_r+0x84>
 800cdbc:	6923      	ldr	r3, [r4, #16]
 800cdbe:	b36b      	cbz	r3, 800ce1c <__swbuf_r+0x84>
 800cdc0:	6923      	ldr	r3, [r4, #16]
 800cdc2:	6820      	ldr	r0, [r4, #0]
 800cdc4:	1ac0      	subs	r0, r0, r3
 800cdc6:	6963      	ldr	r3, [r4, #20]
 800cdc8:	b2f6      	uxtb	r6, r6
 800cdca:	4283      	cmp	r3, r0
 800cdcc:	4637      	mov	r7, r6
 800cdce:	dc04      	bgt.n	800cdda <__swbuf_r+0x42>
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	f000 f926 	bl	800d024 <_fflush_r>
 800cdd8:	bb30      	cbnz	r0, 800ce28 <__swbuf_r+0x90>
 800cdda:	68a3      	ldr	r3, [r4, #8]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	60a3      	str	r3, [r4, #8]
 800cde0:	6823      	ldr	r3, [r4, #0]
 800cde2:	1c5a      	adds	r2, r3, #1
 800cde4:	6022      	str	r2, [r4, #0]
 800cde6:	701e      	strb	r6, [r3, #0]
 800cde8:	6963      	ldr	r3, [r4, #20]
 800cdea:	3001      	adds	r0, #1
 800cdec:	4283      	cmp	r3, r0
 800cdee:	d004      	beq.n	800cdfa <__swbuf_r+0x62>
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	07db      	lsls	r3, r3, #31
 800cdf4:	d506      	bpl.n	800ce04 <__swbuf_r+0x6c>
 800cdf6:	2e0a      	cmp	r6, #10
 800cdf8:	d104      	bne.n	800ce04 <__swbuf_r+0x6c>
 800cdfa:	4621      	mov	r1, r4
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	f000 f911 	bl	800d024 <_fflush_r>
 800ce02:	b988      	cbnz	r0, 800ce28 <__swbuf_r+0x90>
 800ce04:	4638      	mov	r0, r7
 800ce06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce08:	4b0a      	ldr	r3, [pc, #40]	; (800ce34 <__swbuf_r+0x9c>)
 800ce0a:	429c      	cmp	r4, r3
 800ce0c:	d101      	bne.n	800ce12 <__swbuf_r+0x7a>
 800ce0e:	68ac      	ldr	r4, [r5, #8]
 800ce10:	e7cf      	b.n	800cdb2 <__swbuf_r+0x1a>
 800ce12:	4b09      	ldr	r3, [pc, #36]	; (800ce38 <__swbuf_r+0xa0>)
 800ce14:	429c      	cmp	r4, r3
 800ce16:	bf08      	it	eq
 800ce18:	68ec      	ldreq	r4, [r5, #12]
 800ce1a:	e7ca      	b.n	800cdb2 <__swbuf_r+0x1a>
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	4628      	mov	r0, r5
 800ce20:	f000 f80c 	bl	800ce3c <__swsetup_r>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d0cb      	beq.n	800cdc0 <__swbuf_r+0x28>
 800ce28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ce2c:	e7ea      	b.n	800ce04 <__swbuf_r+0x6c>
 800ce2e:	bf00      	nop
 800ce30:	0800d988 	.word	0x0800d988
 800ce34:	0800d9a8 	.word	0x0800d9a8
 800ce38:	0800d968 	.word	0x0800d968

0800ce3c <__swsetup_r>:
 800ce3c:	4b32      	ldr	r3, [pc, #200]	; (800cf08 <__swsetup_r+0xcc>)
 800ce3e:	b570      	push	{r4, r5, r6, lr}
 800ce40:	681d      	ldr	r5, [r3, #0]
 800ce42:	4606      	mov	r6, r0
 800ce44:	460c      	mov	r4, r1
 800ce46:	b125      	cbz	r5, 800ce52 <__swsetup_r+0x16>
 800ce48:	69ab      	ldr	r3, [r5, #24]
 800ce4a:	b913      	cbnz	r3, 800ce52 <__swsetup_r+0x16>
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	f000 f97d 	bl	800d14c <__sinit>
 800ce52:	4b2e      	ldr	r3, [pc, #184]	; (800cf0c <__swsetup_r+0xd0>)
 800ce54:	429c      	cmp	r4, r3
 800ce56:	d10f      	bne.n	800ce78 <__swsetup_r+0x3c>
 800ce58:	686c      	ldr	r4, [r5, #4]
 800ce5a:	89a3      	ldrh	r3, [r4, #12]
 800ce5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce60:	0719      	lsls	r1, r3, #28
 800ce62:	d42c      	bmi.n	800cebe <__swsetup_r+0x82>
 800ce64:	06dd      	lsls	r5, r3, #27
 800ce66:	d411      	bmi.n	800ce8c <__swsetup_r+0x50>
 800ce68:	2309      	movs	r3, #9
 800ce6a:	6033      	str	r3, [r6, #0]
 800ce6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce70:	81a3      	strh	r3, [r4, #12]
 800ce72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce76:	e03e      	b.n	800cef6 <__swsetup_r+0xba>
 800ce78:	4b25      	ldr	r3, [pc, #148]	; (800cf10 <__swsetup_r+0xd4>)
 800ce7a:	429c      	cmp	r4, r3
 800ce7c:	d101      	bne.n	800ce82 <__swsetup_r+0x46>
 800ce7e:	68ac      	ldr	r4, [r5, #8]
 800ce80:	e7eb      	b.n	800ce5a <__swsetup_r+0x1e>
 800ce82:	4b24      	ldr	r3, [pc, #144]	; (800cf14 <__swsetup_r+0xd8>)
 800ce84:	429c      	cmp	r4, r3
 800ce86:	bf08      	it	eq
 800ce88:	68ec      	ldreq	r4, [r5, #12]
 800ce8a:	e7e6      	b.n	800ce5a <__swsetup_r+0x1e>
 800ce8c:	0758      	lsls	r0, r3, #29
 800ce8e:	d512      	bpl.n	800ceb6 <__swsetup_r+0x7a>
 800ce90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce92:	b141      	cbz	r1, 800cea6 <__swsetup_r+0x6a>
 800ce94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce98:	4299      	cmp	r1, r3
 800ce9a:	d002      	beq.n	800cea2 <__swsetup_r+0x66>
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	f000 fa5b 	bl	800d358 <_free_r>
 800cea2:	2300      	movs	r3, #0
 800cea4:	6363      	str	r3, [r4, #52]	; 0x34
 800cea6:	89a3      	ldrh	r3, [r4, #12]
 800cea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ceac:	81a3      	strh	r3, [r4, #12]
 800ceae:	2300      	movs	r3, #0
 800ceb0:	6063      	str	r3, [r4, #4]
 800ceb2:	6923      	ldr	r3, [r4, #16]
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	89a3      	ldrh	r3, [r4, #12]
 800ceb8:	f043 0308 	orr.w	r3, r3, #8
 800cebc:	81a3      	strh	r3, [r4, #12]
 800cebe:	6923      	ldr	r3, [r4, #16]
 800cec0:	b94b      	cbnz	r3, 800ced6 <__swsetup_r+0x9a>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cecc:	d003      	beq.n	800ced6 <__swsetup_r+0x9a>
 800cece:	4621      	mov	r1, r4
 800ced0:	4630      	mov	r0, r6
 800ced2:	f000 fa01 	bl	800d2d8 <__smakebuf_r>
 800ced6:	89a0      	ldrh	r0, [r4, #12]
 800ced8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cedc:	f010 0301 	ands.w	r3, r0, #1
 800cee0:	d00a      	beq.n	800cef8 <__swsetup_r+0xbc>
 800cee2:	2300      	movs	r3, #0
 800cee4:	60a3      	str	r3, [r4, #8]
 800cee6:	6963      	ldr	r3, [r4, #20]
 800cee8:	425b      	negs	r3, r3
 800ceea:	61a3      	str	r3, [r4, #24]
 800ceec:	6923      	ldr	r3, [r4, #16]
 800ceee:	b943      	cbnz	r3, 800cf02 <__swsetup_r+0xc6>
 800cef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cef4:	d1ba      	bne.n	800ce6c <__swsetup_r+0x30>
 800cef6:	bd70      	pop	{r4, r5, r6, pc}
 800cef8:	0781      	lsls	r1, r0, #30
 800cefa:	bf58      	it	pl
 800cefc:	6963      	ldrpl	r3, [r4, #20]
 800cefe:	60a3      	str	r3, [r4, #8]
 800cf00:	e7f4      	b.n	800ceec <__swsetup_r+0xb0>
 800cf02:	2000      	movs	r0, #0
 800cf04:	e7f7      	b.n	800cef6 <__swsetup_r+0xba>
 800cf06:	bf00      	nop
 800cf08:	24000014 	.word	0x24000014
 800cf0c:	0800d988 	.word	0x0800d988
 800cf10:	0800d9a8 	.word	0x0800d9a8
 800cf14:	0800d968 	.word	0x0800d968

0800cf18 <__sflush_r>:
 800cf18:	898a      	ldrh	r2, [r1, #12]
 800cf1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf1e:	4605      	mov	r5, r0
 800cf20:	0710      	lsls	r0, r2, #28
 800cf22:	460c      	mov	r4, r1
 800cf24:	d458      	bmi.n	800cfd8 <__sflush_r+0xc0>
 800cf26:	684b      	ldr	r3, [r1, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	dc05      	bgt.n	800cf38 <__sflush_r+0x20>
 800cf2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	dc02      	bgt.n	800cf38 <__sflush_r+0x20>
 800cf32:	2000      	movs	r0, #0
 800cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf3a:	2e00      	cmp	r6, #0
 800cf3c:	d0f9      	beq.n	800cf32 <__sflush_r+0x1a>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf44:	682f      	ldr	r7, [r5, #0]
 800cf46:	602b      	str	r3, [r5, #0]
 800cf48:	d032      	beq.n	800cfb0 <__sflush_r+0x98>
 800cf4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf4c:	89a3      	ldrh	r3, [r4, #12]
 800cf4e:	075a      	lsls	r2, r3, #29
 800cf50:	d505      	bpl.n	800cf5e <__sflush_r+0x46>
 800cf52:	6863      	ldr	r3, [r4, #4]
 800cf54:	1ac0      	subs	r0, r0, r3
 800cf56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf58:	b10b      	cbz	r3, 800cf5e <__sflush_r+0x46>
 800cf5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf5c:	1ac0      	subs	r0, r0, r3
 800cf5e:	2300      	movs	r3, #0
 800cf60:	4602      	mov	r2, r0
 800cf62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf64:	6a21      	ldr	r1, [r4, #32]
 800cf66:	4628      	mov	r0, r5
 800cf68:	47b0      	blx	r6
 800cf6a:	1c43      	adds	r3, r0, #1
 800cf6c:	89a3      	ldrh	r3, [r4, #12]
 800cf6e:	d106      	bne.n	800cf7e <__sflush_r+0x66>
 800cf70:	6829      	ldr	r1, [r5, #0]
 800cf72:	291d      	cmp	r1, #29
 800cf74:	d82c      	bhi.n	800cfd0 <__sflush_r+0xb8>
 800cf76:	4a2a      	ldr	r2, [pc, #168]	; (800d020 <__sflush_r+0x108>)
 800cf78:	40ca      	lsrs	r2, r1
 800cf7a:	07d6      	lsls	r6, r2, #31
 800cf7c:	d528      	bpl.n	800cfd0 <__sflush_r+0xb8>
 800cf7e:	2200      	movs	r2, #0
 800cf80:	6062      	str	r2, [r4, #4]
 800cf82:	04d9      	lsls	r1, r3, #19
 800cf84:	6922      	ldr	r2, [r4, #16]
 800cf86:	6022      	str	r2, [r4, #0]
 800cf88:	d504      	bpl.n	800cf94 <__sflush_r+0x7c>
 800cf8a:	1c42      	adds	r2, r0, #1
 800cf8c:	d101      	bne.n	800cf92 <__sflush_r+0x7a>
 800cf8e:	682b      	ldr	r3, [r5, #0]
 800cf90:	b903      	cbnz	r3, 800cf94 <__sflush_r+0x7c>
 800cf92:	6560      	str	r0, [r4, #84]	; 0x54
 800cf94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf96:	602f      	str	r7, [r5, #0]
 800cf98:	2900      	cmp	r1, #0
 800cf9a:	d0ca      	beq.n	800cf32 <__sflush_r+0x1a>
 800cf9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfa0:	4299      	cmp	r1, r3
 800cfa2:	d002      	beq.n	800cfaa <__sflush_r+0x92>
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f000 f9d7 	bl	800d358 <_free_r>
 800cfaa:	2000      	movs	r0, #0
 800cfac:	6360      	str	r0, [r4, #52]	; 0x34
 800cfae:	e7c1      	b.n	800cf34 <__sflush_r+0x1c>
 800cfb0:	6a21      	ldr	r1, [r4, #32]
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	47b0      	blx	r6
 800cfb8:	1c41      	adds	r1, r0, #1
 800cfba:	d1c7      	bne.n	800cf4c <__sflush_r+0x34>
 800cfbc:	682b      	ldr	r3, [r5, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d0c4      	beq.n	800cf4c <__sflush_r+0x34>
 800cfc2:	2b1d      	cmp	r3, #29
 800cfc4:	d001      	beq.n	800cfca <__sflush_r+0xb2>
 800cfc6:	2b16      	cmp	r3, #22
 800cfc8:	d101      	bne.n	800cfce <__sflush_r+0xb6>
 800cfca:	602f      	str	r7, [r5, #0]
 800cfcc:	e7b1      	b.n	800cf32 <__sflush_r+0x1a>
 800cfce:	89a3      	ldrh	r3, [r4, #12]
 800cfd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfd4:	81a3      	strh	r3, [r4, #12]
 800cfd6:	e7ad      	b.n	800cf34 <__sflush_r+0x1c>
 800cfd8:	690f      	ldr	r7, [r1, #16]
 800cfda:	2f00      	cmp	r7, #0
 800cfdc:	d0a9      	beq.n	800cf32 <__sflush_r+0x1a>
 800cfde:	0793      	lsls	r3, r2, #30
 800cfe0:	680e      	ldr	r6, [r1, #0]
 800cfe2:	bf08      	it	eq
 800cfe4:	694b      	ldreq	r3, [r1, #20]
 800cfe6:	600f      	str	r7, [r1, #0]
 800cfe8:	bf18      	it	ne
 800cfea:	2300      	movne	r3, #0
 800cfec:	eba6 0807 	sub.w	r8, r6, r7
 800cff0:	608b      	str	r3, [r1, #8]
 800cff2:	f1b8 0f00 	cmp.w	r8, #0
 800cff6:	dd9c      	ble.n	800cf32 <__sflush_r+0x1a>
 800cff8:	6a21      	ldr	r1, [r4, #32]
 800cffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cffc:	4643      	mov	r3, r8
 800cffe:	463a      	mov	r2, r7
 800d000:	4628      	mov	r0, r5
 800d002:	47b0      	blx	r6
 800d004:	2800      	cmp	r0, #0
 800d006:	dc06      	bgt.n	800d016 <__sflush_r+0xfe>
 800d008:	89a3      	ldrh	r3, [r4, #12]
 800d00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d00e:	81a3      	strh	r3, [r4, #12]
 800d010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d014:	e78e      	b.n	800cf34 <__sflush_r+0x1c>
 800d016:	4407      	add	r7, r0
 800d018:	eba8 0800 	sub.w	r8, r8, r0
 800d01c:	e7e9      	b.n	800cff2 <__sflush_r+0xda>
 800d01e:	bf00      	nop
 800d020:	20400001 	.word	0x20400001

0800d024 <_fflush_r>:
 800d024:	b538      	push	{r3, r4, r5, lr}
 800d026:	690b      	ldr	r3, [r1, #16]
 800d028:	4605      	mov	r5, r0
 800d02a:	460c      	mov	r4, r1
 800d02c:	b913      	cbnz	r3, 800d034 <_fflush_r+0x10>
 800d02e:	2500      	movs	r5, #0
 800d030:	4628      	mov	r0, r5
 800d032:	bd38      	pop	{r3, r4, r5, pc}
 800d034:	b118      	cbz	r0, 800d03e <_fflush_r+0x1a>
 800d036:	6983      	ldr	r3, [r0, #24]
 800d038:	b90b      	cbnz	r3, 800d03e <_fflush_r+0x1a>
 800d03a:	f000 f887 	bl	800d14c <__sinit>
 800d03e:	4b14      	ldr	r3, [pc, #80]	; (800d090 <_fflush_r+0x6c>)
 800d040:	429c      	cmp	r4, r3
 800d042:	d11b      	bne.n	800d07c <_fflush_r+0x58>
 800d044:	686c      	ldr	r4, [r5, #4]
 800d046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d0ef      	beq.n	800d02e <_fflush_r+0xa>
 800d04e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d050:	07d0      	lsls	r0, r2, #31
 800d052:	d404      	bmi.n	800d05e <_fflush_r+0x3a>
 800d054:	0599      	lsls	r1, r3, #22
 800d056:	d402      	bmi.n	800d05e <_fflush_r+0x3a>
 800d058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d05a:	f000 f915 	bl	800d288 <__retarget_lock_acquire_recursive>
 800d05e:	4628      	mov	r0, r5
 800d060:	4621      	mov	r1, r4
 800d062:	f7ff ff59 	bl	800cf18 <__sflush_r>
 800d066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d068:	07da      	lsls	r2, r3, #31
 800d06a:	4605      	mov	r5, r0
 800d06c:	d4e0      	bmi.n	800d030 <_fflush_r+0xc>
 800d06e:	89a3      	ldrh	r3, [r4, #12]
 800d070:	059b      	lsls	r3, r3, #22
 800d072:	d4dd      	bmi.n	800d030 <_fflush_r+0xc>
 800d074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d076:	f000 f908 	bl	800d28a <__retarget_lock_release_recursive>
 800d07a:	e7d9      	b.n	800d030 <_fflush_r+0xc>
 800d07c:	4b05      	ldr	r3, [pc, #20]	; (800d094 <_fflush_r+0x70>)
 800d07e:	429c      	cmp	r4, r3
 800d080:	d101      	bne.n	800d086 <_fflush_r+0x62>
 800d082:	68ac      	ldr	r4, [r5, #8]
 800d084:	e7df      	b.n	800d046 <_fflush_r+0x22>
 800d086:	4b04      	ldr	r3, [pc, #16]	; (800d098 <_fflush_r+0x74>)
 800d088:	429c      	cmp	r4, r3
 800d08a:	bf08      	it	eq
 800d08c:	68ec      	ldreq	r4, [r5, #12]
 800d08e:	e7da      	b.n	800d046 <_fflush_r+0x22>
 800d090:	0800d988 	.word	0x0800d988
 800d094:	0800d9a8 	.word	0x0800d9a8
 800d098:	0800d968 	.word	0x0800d968

0800d09c <std>:
 800d09c:	2300      	movs	r3, #0
 800d09e:	b510      	push	{r4, lr}
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	e9c0 3300 	strd	r3, r3, [r0]
 800d0a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0aa:	6083      	str	r3, [r0, #8]
 800d0ac:	8181      	strh	r1, [r0, #12]
 800d0ae:	6643      	str	r3, [r0, #100]	; 0x64
 800d0b0:	81c2      	strh	r2, [r0, #14]
 800d0b2:	6183      	str	r3, [r0, #24]
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	2208      	movs	r2, #8
 800d0b8:	305c      	adds	r0, #92	; 0x5c
 800d0ba:	f7ff fdef 	bl	800cc9c <memset>
 800d0be:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <std+0x38>)
 800d0c0:	6263      	str	r3, [r4, #36]	; 0x24
 800d0c2:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <std+0x3c>)
 800d0c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0c6:	4b05      	ldr	r3, [pc, #20]	; (800d0dc <std+0x40>)
 800d0c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0ca:	4b05      	ldr	r3, [pc, #20]	; (800d0e0 <std+0x44>)
 800d0cc:	6224      	str	r4, [r4, #32]
 800d0ce:	6323      	str	r3, [r4, #48]	; 0x30
 800d0d0:	bd10      	pop	{r4, pc}
 800d0d2:	bf00      	nop
 800d0d4:	0800d539 	.word	0x0800d539
 800d0d8:	0800d55b 	.word	0x0800d55b
 800d0dc:	0800d593 	.word	0x0800d593
 800d0e0:	0800d5b7 	.word	0x0800d5b7

0800d0e4 <_cleanup_r>:
 800d0e4:	4901      	ldr	r1, [pc, #4]	; (800d0ec <_cleanup_r+0x8>)
 800d0e6:	f000 b8af 	b.w	800d248 <_fwalk_reent>
 800d0ea:	bf00      	nop
 800d0ec:	0800d025 	.word	0x0800d025

0800d0f0 <__sfmoreglue>:
 800d0f0:	b570      	push	{r4, r5, r6, lr}
 800d0f2:	2268      	movs	r2, #104	; 0x68
 800d0f4:	1e4d      	subs	r5, r1, #1
 800d0f6:	4355      	muls	r5, r2
 800d0f8:	460e      	mov	r6, r1
 800d0fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0fe:	f000 f997 	bl	800d430 <_malloc_r>
 800d102:	4604      	mov	r4, r0
 800d104:	b140      	cbz	r0, 800d118 <__sfmoreglue+0x28>
 800d106:	2100      	movs	r1, #0
 800d108:	e9c0 1600 	strd	r1, r6, [r0]
 800d10c:	300c      	adds	r0, #12
 800d10e:	60a0      	str	r0, [r4, #8]
 800d110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d114:	f7ff fdc2 	bl	800cc9c <memset>
 800d118:	4620      	mov	r0, r4
 800d11a:	bd70      	pop	{r4, r5, r6, pc}

0800d11c <__sfp_lock_acquire>:
 800d11c:	4801      	ldr	r0, [pc, #4]	; (800d124 <__sfp_lock_acquire+0x8>)
 800d11e:	f000 b8b3 	b.w	800d288 <__retarget_lock_acquire_recursive>
 800d122:	bf00      	nop
 800d124:	24004d09 	.word	0x24004d09

0800d128 <__sfp_lock_release>:
 800d128:	4801      	ldr	r0, [pc, #4]	; (800d130 <__sfp_lock_release+0x8>)
 800d12a:	f000 b8ae 	b.w	800d28a <__retarget_lock_release_recursive>
 800d12e:	bf00      	nop
 800d130:	24004d09 	.word	0x24004d09

0800d134 <__sinit_lock_acquire>:
 800d134:	4801      	ldr	r0, [pc, #4]	; (800d13c <__sinit_lock_acquire+0x8>)
 800d136:	f000 b8a7 	b.w	800d288 <__retarget_lock_acquire_recursive>
 800d13a:	bf00      	nop
 800d13c:	24004d0a 	.word	0x24004d0a

0800d140 <__sinit_lock_release>:
 800d140:	4801      	ldr	r0, [pc, #4]	; (800d148 <__sinit_lock_release+0x8>)
 800d142:	f000 b8a2 	b.w	800d28a <__retarget_lock_release_recursive>
 800d146:	bf00      	nop
 800d148:	24004d0a 	.word	0x24004d0a

0800d14c <__sinit>:
 800d14c:	b510      	push	{r4, lr}
 800d14e:	4604      	mov	r4, r0
 800d150:	f7ff fff0 	bl	800d134 <__sinit_lock_acquire>
 800d154:	69a3      	ldr	r3, [r4, #24]
 800d156:	b11b      	cbz	r3, 800d160 <__sinit+0x14>
 800d158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d15c:	f7ff bff0 	b.w	800d140 <__sinit_lock_release>
 800d160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d164:	6523      	str	r3, [r4, #80]	; 0x50
 800d166:	4b13      	ldr	r3, [pc, #76]	; (800d1b4 <__sinit+0x68>)
 800d168:	4a13      	ldr	r2, [pc, #76]	; (800d1b8 <__sinit+0x6c>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d16e:	42a3      	cmp	r3, r4
 800d170:	bf04      	itt	eq
 800d172:	2301      	moveq	r3, #1
 800d174:	61a3      	streq	r3, [r4, #24]
 800d176:	4620      	mov	r0, r4
 800d178:	f000 f820 	bl	800d1bc <__sfp>
 800d17c:	6060      	str	r0, [r4, #4]
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 f81c 	bl	800d1bc <__sfp>
 800d184:	60a0      	str	r0, [r4, #8]
 800d186:	4620      	mov	r0, r4
 800d188:	f000 f818 	bl	800d1bc <__sfp>
 800d18c:	2200      	movs	r2, #0
 800d18e:	60e0      	str	r0, [r4, #12]
 800d190:	2104      	movs	r1, #4
 800d192:	6860      	ldr	r0, [r4, #4]
 800d194:	f7ff ff82 	bl	800d09c <std>
 800d198:	68a0      	ldr	r0, [r4, #8]
 800d19a:	2201      	movs	r2, #1
 800d19c:	2109      	movs	r1, #9
 800d19e:	f7ff ff7d 	bl	800d09c <std>
 800d1a2:	68e0      	ldr	r0, [r4, #12]
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	2112      	movs	r1, #18
 800d1a8:	f7ff ff78 	bl	800d09c <std>
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	61a3      	str	r3, [r4, #24]
 800d1b0:	e7d2      	b.n	800d158 <__sinit+0xc>
 800d1b2:	bf00      	nop
 800d1b4:	0800d964 	.word	0x0800d964
 800d1b8:	0800d0e5 	.word	0x0800d0e5

0800d1bc <__sfp>:
 800d1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1be:	4607      	mov	r7, r0
 800d1c0:	f7ff ffac 	bl	800d11c <__sfp_lock_acquire>
 800d1c4:	4b1e      	ldr	r3, [pc, #120]	; (800d240 <__sfp+0x84>)
 800d1c6:	681e      	ldr	r6, [r3, #0]
 800d1c8:	69b3      	ldr	r3, [r6, #24]
 800d1ca:	b913      	cbnz	r3, 800d1d2 <__sfp+0x16>
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	f7ff ffbd 	bl	800d14c <__sinit>
 800d1d2:	3648      	adds	r6, #72	; 0x48
 800d1d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	d503      	bpl.n	800d1e4 <__sfp+0x28>
 800d1dc:	6833      	ldr	r3, [r6, #0]
 800d1de:	b30b      	cbz	r3, 800d224 <__sfp+0x68>
 800d1e0:	6836      	ldr	r6, [r6, #0]
 800d1e2:	e7f7      	b.n	800d1d4 <__sfp+0x18>
 800d1e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d1e8:	b9d5      	cbnz	r5, 800d220 <__sfp+0x64>
 800d1ea:	4b16      	ldr	r3, [pc, #88]	; (800d244 <__sfp+0x88>)
 800d1ec:	60e3      	str	r3, [r4, #12]
 800d1ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1f2:	6665      	str	r5, [r4, #100]	; 0x64
 800d1f4:	f000 f847 	bl	800d286 <__retarget_lock_init_recursive>
 800d1f8:	f7ff ff96 	bl	800d128 <__sfp_lock_release>
 800d1fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d204:	6025      	str	r5, [r4, #0]
 800d206:	61a5      	str	r5, [r4, #24]
 800d208:	2208      	movs	r2, #8
 800d20a:	4629      	mov	r1, r5
 800d20c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d210:	f7ff fd44 	bl	800cc9c <memset>
 800d214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d21c:	4620      	mov	r0, r4
 800d21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d220:	3468      	adds	r4, #104	; 0x68
 800d222:	e7d9      	b.n	800d1d8 <__sfp+0x1c>
 800d224:	2104      	movs	r1, #4
 800d226:	4638      	mov	r0, r7
 800d228:	f7ff ff62 	bl	800d0f0 <__sfmoreglue>
 800d22c:	4604      	mov	r4, r0
 800d22e:	6030      	str	r0, [r6, #0]
 800d230:	2800      	cmp	r0, #0
 800d232:	d1d5      	bne.n	800d1e0 <__sfp+0x24>
 800d234:	f7ff ff78 	bl	800d128 <__sfp_lock_release>
 800d238:	230c      	movs	r3, #12
 800d23a:	603b      	str	r3, [r7, #0]
 800d23c:	e7ee      	b.n	800d21c <__sfp+0x60>
 800d23e:	bf00      	nop
 800d240:	0800d964 	.word	0x0800d964
 800d244:	ffff0001 	.word	0xffff0001

0800d248 <_fwalk_reent>:
 800d248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d24c:	4606      	mov	r6, r0
 800d24e:	4688      	mov	r8, r1
 800d250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d254:	2700      	movs	r7, #0
 800d256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d25a:	f1b9 0901 	subs.w	r9, r9, #1
 800d25e:	d505      	bpl.n	800d26c <_fwalk_reent+0x24>
 800d260:	6824      	ldr	r4, [r4, #0]
 800d262:	2c00      	cmp	r4, #0
 800d264:	d1f7      	bne.n	800d256 <_fwalk_reent+0xe>
 800d266:	4638      	mov	r0, r7
 800d268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d26c:	89ab      	ldrh	r3, [r5, #12]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d907      	bls.n	800d282 <_fwalk_reent+0x3a>
 800d272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d276:	3301      	adds	r3, #1
 800d278:	d003      	beq.n	800d282 <_fwalk_reent+0x3a>
 800d27a:	4629      	mov	r1, r5
 800d27c:	4630      	mov	r0, r6
 800d27e:	47c0      	blx	r8
 800d280:	4307      	orrs	r7, r0
 800d282:	3568      	adds	r5, #104	; 0x68
 800d284:	e7e9      	b.n	800d25a <_fwalk_reent+0x12>

0800d286 <__retarget_lock_init_recursive>:
 800d286:	4770      	bx	lr

0800d288 <__retarget_lock_acquire_recursive>:
 800d288:	4770      	bx	lr

0800d28a <__retarget_lock_release_recursive>:
 800d28a:	4770      	bx	lr

0800d28c <__swhatbuf_r>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	460e      	mov	r6, r1
 800d290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d294:	2900      	cmp	r1, #0
 800d296:	b096      	sub	sp, #88	; 0x58
 800d298:	4614      	mov	r4, r2
 800d29a:	461d      	mov	r5, r3
 800d29c:	da08      	bge.n	800d2b0 <__swhatbuf_r+0x24>
 800d29e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	602a      	str	r2, [r5, #0]
 800d2a6:	061a      	lsls	r2, r3, #24
 800d2a8:	d410      	bmi.n	800d2cc <__swhatbuf_r+0x40>
 800d2aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2ae:	e00e      	b.n	800d2ce <__swhatbuf_r+0x42>
 800d2b0:	466a      	mov	r2, sp
 800d2b2:	f000 f9a7 	bl	800d604 <_fstat_r>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	dbf1      	blt.n	800d29e <__swhatbuf_r+0x12>
 800d2ba:	9a01      	ldr	r2, [sp, #4]
 800d2bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d2c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d2c4:	425a      	negs	r2, r3
 800d2c6:	415a      	adcs	r2, r3
 800d2c8:	602a      	str	r2, [r5, #0]
 800d2ca:	e7ee      	b.n	800d2aa <__swhatbuf_r+0x1e>
 800d2cc:	2340      	movs	r3, #64	; 0x40
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	6023      	str	r3, [r4, #0]
 800d2d2:	b016      	add	sp, #88	; 0x58
 800d2d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d2d8 <__smakebuf_r>:
 800d2d8:	898b      	ldrh	r3, [r1, #12]
 800d2da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2dc:	079d      	lsls	r5, r3, #30
 800d2de:	4606      	mov	r6, r0
 800d2e0:	460c      	mov	r4, r1
 800d2e2:	d507      	bpl.n	800d2f4 <__smakebuf_r+0x1c>
 800d2e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	6123      	str	r3, [r4, #16]
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	6163      	str	r3, [r4, #20]
 800d2f0:	b002      	add	sp, #8
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}
 800d2f4:	ab01      	add	r3, sp, #4
 800d2f6:	466a      	mov	r2, sp
 800d2f8:	f7ff ffc8 	bl	800d28c <__swhatbuf_r>
 800d2fc:	9900      	ldr	r1, [sp, #0]
 800d2fe:	4605      	mov	r5, r0
 800d300:	4630      	mov	r0, r6
 800d302:	f000 f895 	bl	800d430 <_malloc_r>
 800d306:	b948      	cbnz	r0, 800d31c <__smakebuf_r+0x44>
 800d308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d30c:	059a      	lsls	r2, r3, #22
 800d30e:	d4ef      	bmi.n	800d2f0 <__smakebuf_r+0x18>
 800d310:	f023 0303 	bic.w	r3, r3, #3
 800d314:	f043 0302 	orr.w	r3, r3, #2
 800d318:	81a3      	strh	r3, [r4, #12]
 800d31a:	e7e3      	b.n	800d2e4 <__smakebuf_r+0xc>
 800d31c:	4b0d      	ldr	r3, [pc, #52]	; (800d354 <__smakebuf_r+0x7c>)
 800d31e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	6020      	str	r0, [r4, #0]
 800d324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d328:	81a3      	strh	r3, [r4, #12]
 800d32a:	9b00      	ldr	r3, [sp, #0]
 800d32c:	6163      	str	r3, [r4, #20]
 800d32e:	9b01      	ldr	r3, [sp, #4]
 800d330:	6120      	str	r0, [r4, #16]
 800d332:	b15b      	cbz	r3, 800d34c <__smakebuf_r+0x74>
 800d334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d338:	4630      	mov	r0, r6
 800d33a:	f000 f975 	bl	800d628 <_isatty_r>
 800d33e:	b128      	cbz	r0, 800d34c <__smakebuf_r+0x74>
 800d340:	89a3      	ldrh	r3, [r4, #12]
 800d342:	f023 0303 	bic.w	r3, r3, #3
 800d346:	f043 0301 	orr.w	r3, r3, #1
 800d34a:	81a3      	strh	r3, [r4, #12]
 800d34c:	89a0      	ldrh	r0, [r4, #12]
 800d34e:	4305      	orrs	r5, r0
 800d350:	81a5      	strh	r5, [r4, #12]
 800d352:	e7cd      	b.n	800d2f0 <__smakebuf_r+0x18>
 800d354:	0800d0e5 	.word	0x0800d0e5

0800d358 <_free_r>:
 800d358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d35a:	2900      	cmp	r1, #0
 800d35c:	d044      	beq.n	800d3e8 <_free_r+0x90>
 800d35e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d362:	9001      	str	r0, [sp, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	f1a1 0404 	sub.w	r4, r1, #4
 800d36a:	bfb8      	it	lt
 800d36c:	18e4      	addlt	r4, r4, r3
 800d36e:	f000 f97d 	bl	800d66c <__malloc_lock>
 800d372:	4a1e      	ldr	r2, [pc, #120]	; (800d3ec <_free_r+0x94>)
 800d374:	9801      	ldr	r0, [sp, #4]
 800d376:	6813      	ldr	r3, [r2, #0]
 800d378:	b933      	cbnz	r3, 800d388 <_free_r+0x30>
 800d37a:	6063      	str	r3, [r4, #4]
 800d37c:	6014      	str	r4, [r2, #0]
 800d37e:	b003      	add	sp, #12
 800d380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d384:	f000 b978 	b.w	800d678 <__malloc_unlock>
 800d388:	42a3      	cmp	r3, r4
 800d38a:	d908      	bls.n	800d39e <_free_r+0x46>
 800d38c:	6825      	ldr	r5, [r4, #0]
 800d38e:	1961      	adds	r1, r4, r5
 800d390:	428b      	cmp	r3, r1
 800d392:	bf01      	itttt	eq
 800d394:	6819      	ldreq	r1, [r3, #0]
 800d396:	685b      	ldreq	r3, [r3, #4]
 800d398:	1949      	addeq	r1, r1, r5
 800d39a:	6021      	streq	r1, [r4, #0]
 800d39c:	e7ed      	b.n	800d37a <_free_r+0x22>
 800d39e:	461a      	mov	r2, r3
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	b10b      	cbz	r3, 800d3a8 <_free_r+0x50>
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	d9fa      	bls.n	800d39e <_free_r+0x46>
 800d3a8:	6811      	ldr	r1, [r2, #0]
 800d3aa:	1855      	adds	r5, r2, r1
 800d3ac:	42a5      	cmp	r5, r4
 800d3ae:	d10b      	bne.n	800d3c8 <_free_r+0x70>
 800d3b0:	6824      	ldr	r4, [r4, #0]
 800d3b2:	4421      	add	r1, r4
 800d3b4:	1854      	adds	r4, r2, r1
 800d3b6:	42a3      	cmp	r3, r4
 800d3b8:	6011      	str	r1, [r2, #0]
 800d3ba:	d1e0      	bne.n	800d37e <_free_r+0x26>
 800d3bc:	681c      	ldr	r4, [r3, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	6053      	str	r3, [r2, #4]
 800d3c2:	4421      	add	r1, r4
 800d3c4:	6011      	str	r1, [r2, #0]
 800d3c6:	e7da      	b.n	800d37e <_free_r+0x26>
 800d3c8:	d902      	bls.n	800d3d0 <_free_r+0x78>
 800d3ca:	230c      	movs	r3, #12
 800d3cc:	6003      	str	r3, [r0, #0]
 800d3ce:	e7d6      	b.n	800d37e <_free_r+0x26>
 800d3d0:	6825      	ldr	r5, [r4, #0]
 800d3d2:	1961      	adds	r1, r4, r5
 800d3d4:	428b      	cmp	r3, r1
 800d3d6:	bf04      	itt	eq
 800d3d8:	6819      	ldreq	r1, [r3, #0]
 800d3da:	685b      	ldreq	r3, [r3, #4]
 800d3dc:	6063      	str	r3, [r4, #4]
 800d3de:	bf04      	itt	eq
 800d3e0:	1949      	addeq	r1, r1, r5
 800d3e2:	6021      	streq	r1, [r4, #0]
 800d3e4:	6054      	str	r4, [r2, #4]
 800d3e6:	e7ca      	b.n	800d37e <_free_r+0x26>
 800d3e8:	b003      	add	sp, #12
 800d3ea:	bd30      	pop	{r4, r5, pc}
 800d3ec:	24004d0c 	.word	0x24004d0c

0800d3f0 <sbrk_aligned>:
 800d3f0:	b570      	push	{r4, r5, r6, lr}
 800d3f2:	4e0e      	ldr	r6, [pc, #56]	; (800d42c <sbrk_aligned+0x3c>)
 800d3f4:	460c      	mov	r4, r1
 800d3f6:	6831      	ldr	r1, [r6, #0]
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	b911      	cbnz	r1, 800d402 <sbrk_aligned+0x12>
 800d3fc:	f000 f88c 	bl	800d518 <_sbrk_r>
 800d400:	6030      	str	r0, [r6, #0]
 800d402:	4621      	mov	r1, r4
 800d404:	4628      	mov	r0, r5
 800d406:	f000 f887 	bl	800d518 <_sbrk_r>
 800d40a:	1c43      	adds	r3, r0, #1
 800d40c:	d00a      	beq.n	800d424 <sbrk_aligned+0x34>
 800d40e:	1cc4      	adds	r4, r0, #3
 800d410:	f024 0403 	bic.w	r4, r4, #3
 800d414:	42a0      	cmp	r0, r4
 800d416:	d007      	beq.n	800d428 <sbrk_aligned+0x38>
 800d418:	1a21      	subs	r1, r4, r0
 800d41a:	4628      	mov	r0, r5
 800d41c:	f000 f87c 	bl	800d518 <_sbrk_r>
 800d420:	3001      	adds	r0, #1
 800d422:	d101      	bne.n	800d428 <sbrk_aligned+0x38>
 800d424:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d428:	4620      	mov	r0, r4
 800d42a:	bd70      	pop	{r4, r5, r6, pc}
 800d42c:	24004d10 	.word	0x24004d10

0800d430 <_malloc_r>:
 800d430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d434:	1ccd      	adds	r5, r1, #3
 800d436:	f025 0503 	bic.w	r5, r5, #3
 800d43a:	3508      	adds	r5, #8
 800d43c:	2d0c      	cmp	r5, #12
 800d43e:	bf38      	it	cc
 800d440:	250c      	movcc	r5, #12
 800d442:	2d00      	cmp	r5, #0
 800d444:	4607      	mov	r7, r0
 800d446:	db01      	blt.n	800d44c <_malloc_r+0x1c>
 800d448:	42a9      	cmp	r1, r5
 800d44a:	d905      	bls.n	800d458 <_malloc_r+0x28>
 800d44c:	230c      	movs	r3, #12
 800d44e:	603b      	str	r3, [r7, #0]
 800d450:	2600      	movs	r6, #0
 800d452:	4630      	mov	r0, r6
 800d454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d458:	4e2e      	ldr	r6, [pc, #184]	; (800d514 <_malloc_r+0xe4>)
 800d45a:	f000 f907 	bl	800d66c <__malloc_lock>
 800d45e:	6833      	ldr	r3, [r6, #0]
 800d460:	461c      	mov	r4, r3
 800d462:	bb34      	cbnz	r4, 800d4b2 <_malloc_r+0x82>
 800d464:	4629      	mov	r1, r5
 800d466:	4638      	mov	r0, r7
 800d468:	f7ff ffc2 	bl	800d3f0 <sbrk_aligned>
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	4604      	mov	r4, r0
 800d470:	d14d      	bne.n	800d50e <_malloc_r+0xde>
 800d472:	6834      	ldr	r4, [r6, #0]
 800d474:	4626      	mov	r6, r4
 800d476:	2e00      	cmp	r6, #0
 800d478:	d140      	bne.n	800d4fc <_malloc_r+0xcc>
 800d47a:	6823      	ldr	r3, [r4, #0]
 800d47c:	4631      	mov	r1, r6
 800d47e:	4638      	mov	r0, r7
 800d480:	eb04 0803 	add.w	r8, r4, r3
 800d484:	f000 f848 	bl	800d518 <_sbrk_r>
 800d488:	4580      	cmp	r8, r0
 800d48a:	d13a      	bne.n	800d502 <_malloc_r+0xd2>
 800d48c:	6821      	ldr	r1, [r4, #0]
 800d48e:	3503      	adds	r5, #3
 800d490:	1a6d      	subs	r5, r5, r1
 800d492:	f025 0503 	bic.w	r5, r5, #3
 800d496:	3508      	adds	r5, #8
 800d498:	2d0c      	cmp	r5, #12
 800d49a:	bf38      	it	cc
 800d49c:	250c      	movcc	r5, #12
 800d49e:	4629      	mov	r1, r5
 800d4a0:	4638      	mov	r0, r7
 800d4a2:	f7ff ffa5 	bl	800d3f0 <sbrk_aligned>
 800d4a6:	3001      	adds	r0, #1
 800d4a8:	d02b      	beq.n	800d502 <_malloc_r+0xd2>
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	442b      	add	r3, r5
 800d4ae:	6023      	str	r3, [r4, #0]
 800d4b0:	e00e      	b.n	800d4d0 <_malloc_r+0xa0>
 800d4b2:	6822      	ldr	r2, [r4, #0]
 800d4b4:	1b52      	subs	r2, r2, r5
 800d4b6:	d41e      	bmi.n	800d4f6 <_malloc_r+0xc6>
 800d4b8:	2a0b      	cmp	r2, #11
 800d4ba:	d916      	bls.n	800d4ea <_malloc_r+0xba>
 800d4bc:	1961      	adds	r1, r4, r5
 800d4be:	42a3      	cmp	r3, r4
 800d4c0:	6025      	str	r5, [r4, #0]
 800d4c2:	bf18      	it	ne
 800d4c4:	6059      	strne	r1, [r3, #4]
 800d4c6:	6863      	ldr	r3, [r4, #4]
 800d4c8:	bf08      	it	eq
 800d4ca:	6031      	streq	r1, [r6, #0]
 800d4cc:	5162      	str	r2, [r4, r5]
 800d4ce:	604b      	str	r3, [r1, #4]
 800d4d0:	4638      	mov	r0, r7
 800d4d2:	f104 060b 	add.w	r6, r4, #11
 800d4d6:	f000 f8cf 	bl	800d678 <__malloc_unlock>
 800d4da:	f026 0607 	bic.w	r6, r6, #7
 800d4de:	1d23      	adds	r3, r4, #4
 800d4e0:	1af2      	subs	r2, r6, r3
 800d4e2:	d0b6      	beq.n	800d452 <_malloc_r+0x22>
 800d4e4:	1b9b      	subs	r3, r3, r6
 800d4e6:	50a3      	str	r3, [r4, r2]
 800d4e8:	e7b3      	b.n	800d452 <_malloc_r+0x22>
 800d4ea:	6862      	ldr	r2, [r4, #4]
 800d4ec:	42a3      	cmp	r3, r4
 800d4ee:	bf0c      	ite	eq
 800d4f0:	6032      	streq	r2, [r6, #0]
 800d4f2:	605a      	strne	r2, [r3, #4]
 800d4f4:	e7ec      	b.n	800d4d0 <_malloc_r+0xa0>
 800d4f6:	4623      	mov	r3, r4
 800d4f8:	6864      	ldr	r4, [r4, #4]
 800d4fa:	e7b2      	b.n	800d462 <_malloc_r+0x32>
 800d4fc:	4634      	mov	r4, r6
 800d4fe:	6876      	ldr	r6, [r6, #4]
 800d500:	e7b9      	b.n	800d476 <_malloc_r+0x46>
 800d502:	230c      	movs	r3, #12
 800d504:	603b      	str	r3, [r7, #0]
 800d506:	4638      	mov	r0, r7
 800d508:	f000 f8b6 	bl	800d678 <__malloc_unlock>
 800d50c:	e7a1      	b.n	800d452 <_malloc_r+0x22>
 800d50e:	6025      	str	r5, [r4, #0]
 800d510:	e7de      	b.n	800d4d0 <_malloc_r+0xa0>
 800d512:	bf00      	nop
 800d514:	24004d0c 	.word	0x24004d0c

0800d518 <_sbrk_r>:
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	4d06      	ldr	r5, [pc, #24]	; (800d534 <_sbrk_r+0x1c>)
 800d51c:	2300      	movs	r3, #0
 800d51e:	4604      	mov	r4, r0
 800d520:	4608      	mov	r0, r1
 800d522:	602b      	str	r3, [r5, #0]
 800d524:	f7f4 f93a 	bl	800179c <_sbrk>
 800d528:	1c43      	adds	r3, r0, #1
 800d52a:	d102      	bne.n	800d532 <_sbrk_r+0x1a>
 800d52c:	682b      	ldr	r3, [r5, #0]
 800d52e:	b103      	cbz	r3, 800d532 <_sbrk_r+0x1a>
 800d530:	6023      	str	r3, [r4, #0]
 800d532:	bd38      	pop	{r3, r4, r5, pc}
 800d534:	24004d14 	.word	0x24004d14

0800d538 <__sread>:
 800d538:	b510      	push	{r4, lr}
 800d53a:	460c      	mov	r4, r1
 800d53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d540:	f000 f8a0 	bl	800d684 <_read_r>
 800d544:	2800      	cmp	r0, #0
 800d546:	bfab      	itete	ge
 800d548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d54a:	89a3      	ldrhlt	r3, [r4, #12]
 800d54c:	181b      	addge	r3, r3, r0
 800d54e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d552:	bfac      	ite	ge
 800d554:	6563      	strge	r3, [r4, #84]	; 0x54
 800d556:	81a3      	strhlt	r3, [r4, #12]
 800d558:	bd10      	pop	{r4, pc}

0800d55a <__swrite>:
 800d55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55e:	461f      	mov	r7, r3
 800d560:	898b      	ldrh	r3, [r1, #12]
 800d562:	05db      	lsls	r3, r3, #23
 800d564:	4605      	mov	r5, r0
 800d566:	460c      	mov	r4, r1
 800d568:	4616      	mov	r6, r2
 800d56a:	d505      	bpl.n	800d578 <__swrite+0x1e>
 800d56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d570:	2302      	movs	r3, #2
 800d572:	2200      	movs	r2, #0
 800d574:	f000 f868 	bl	800d648 <_lseek_r>
 800d578:	89a3      	ldrh	r3, [r4, #12]
 800d57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d57e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d582:	81a3      	strh	r3, [r4, #12]
 800d584:	4632      	mov	r2, r6
 800d586:	463b      	mov	r3, r7
 800d588:	4628      	mov	r0, r5
 800d58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d58e:	f000 b817 	b.w	800d5c0 <_write_r>

0800d592 <__sseek>:
 800d592:	b510      	push	{r4, lr}
 800d594:	460c      	mov	r4, r1
 800d596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d59a:	f000 f855 	bl	800d648 <_lseek_r>
 800d59e:	1c43      	adds	r3, r0, #1
 800d5a0:	89a3      	ldrh	r3, [r4, #12]
 800d5a2:	bf15      	itete	ne
 800d5a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5ae:	81a3      	strheq	r3, [r4, #12]
 800d5b0:	bf18      	it	ne
 800d5b2:	81a3      	strhne	r3, [r4, #12]
 800d5b4:	bd10      	pop	{r4, pc}

0800d5b6 <__sclose>:
 800d5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ba:	f000 b813 	b.w	800d5e4 <_close_r>
	...

0800d5c0 <_write_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4d07      	ldr	r5, [pc, #28]	; (800d5e0 <_write_r+0x20>)
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	4608      	mov	r0, r1
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	602a      	str	r2, [r5, #0]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f7f4 f893 	bl	80016fa <_write>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d102      	bne.n	800d5de <_write_r+0x1e>
 800d5d8:	682b      	ldr	r3, [r5, #0]
 800d5da:	b103      	cbz	r3, 800d5de <_write_r+0x1e>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	24004d14 	.word	0x24004d14

0800d5e4 <_close_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	4d06      	ldr	r5, [pc, #24]	; (800d600 <_close_r+0x1c>)
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	602b      	str	r3, [r5, #0]
 800d5f0:	f7f4 f89f 	bl	8001732 <_close>
 800d5f4:	1c43      	adds	r3, r0, #1
 800d5f6:	d102      	bne.n	800d5fe <_close_r+0x1a>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b103      	cbz	r3, 800d5fe <_close_r+0x1a>
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	24004d14 	.word	0x24004d14

0800d604 <_fstat_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	4d07      	ldr	r5, [pc, #28]	; (800d624 <_fstat_r+0x20>)
 800d608:	2300      	movs	r3, #0
 800d60a:	4604      	mov	r4, r0
 800d60c:	4608      	mov	r0, r1
 800d60e:	4611      	mov	r1, r2
 800d610:	602b      	str	r3, [r5, #0]
 800d612:	f7f4 f89a 	bl	800174a <_fstat>
 800d616:	1c43      	adds	r3, r0, #1
 800d618:	d102      	bne.n	800d620 <_fstat_r+0x1c>
 800d61a:	682b      	ldr	r3, [r5, #0]
 800d61c:	b103      	cbz	r3, 800d620 <_fstat_r+0x1c>
 800d61e:	6023      	str	r3, [r4, #0]
 800d620:	bd38      	pop	{r3, r4, r5, pc}
 800d622:	bf00      	nop
 800d624:	24004d14 	.word	0x24004d14

0800d628 <_isatty_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4d06      	ldr	r5, [pc, #24]	; (800d644 <_isatty_r+0x1c>)
 800d62c:	2300      	movs	r3, #0
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	602b      	str	r3, [r5, #0]
 800d634:	f7f4 f899 	bl	800176a <_isatty>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	d102      	bne.n	800d642 <_isatty_r+0x1a>
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	b103      	cbz	r3, 800d642 <_isatty_r+0x1a>
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	bd38      	pop	{r3, r4, r5, pc}
 800d644:	24004d14 	.word	0x24004d14

0800d648 <_lseek_r>:
 800d648:	b538      	push	{r3, r4, r5, lr}
 800d64a:	4d07      	ldr	r5, [pc, #28]	; (800d668 <_lseek_r+0x20>)
 800d64c:	4604      	mov	r4, r0
 800d64e:	4608      	mov	r0, r1
 800d650:	4611      	mov	r1, r2
 800d652:	2200      	movs	r2, #0
 800d654:	602a      	str	r2, [r5, #0]
 800d656:	461a      	mov	r2, r3
 800d658:	f7f4 f892 	bl	8001780 <_lseek>
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	d102      	bne.n	800d666 <_lseek_r+0x1e>
 800d660:	682b      	ldr	r3, [r5, #0]
 800d662:	b103      	cbz	r3, 800d666 <_lseek_r+0x1e>
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	bd38      	pop	{r3, r4, r5, pc}
 800d668:	24004d14 	.word	0x24004d14

0800d66c <__malloc_lock>:
 800d66c:	4801      	ldr	r0, [pc, #4]	; (800d674 <__malloc_lock+0x8>)
 800d66e:	f7ff be0b 	b.w	800d288 <__retarget_lock_acquire_recursive>
 800d672:	bf00      	nop
 800d674:	24004d08 	.word	0x24004d08

0800d678 <__malloc_unlock>:
 800d678:	4801      	ldr	r0, [pc, #4]	; (800d680 <__malloc_unlock+0x8>)
 800d67a:	f7ff be06 	b.w	800d28a <__retarget_lock_release_recursive>
 800d67e:	bf00      	nop
 800d680:	24004d08 	.word	0x24004d08

0800d684 <_read_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4d07      	ldr	r5, [pc, #28]	; (800d6a4 <_read_r+0x20>)
 800d688:	4604      	mov	r4, r0
 800d68a:	4608      	mov	r0, r1
 800d68c:	4611      	mov	r1, r2
 800d68e:	2200      	movs	r2, #0
 800d690:	602a      	str	r2, [r5, #0]
 800d692:	461a      	mov	r2, r3
 800d694:	f7f4 f814 	bl	80016c0 <_read>
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	d102      	bne.n	800d6a2 <_read_r+0x1e>
 800d69c:	682b      	ldr	r3, [r5, #0]
 800d69e:	b103      	cbz	r3, 800d6a2 <_read_r+0x1e>
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	bd38      	pop	{r3, r4, r5, pc}
 800d6a4:	24004d14 	.word	0x24004d14

0800d6a8 <_init>:
 800d6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6aa:	bf00      	nop
 800d6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ae:	bc08      	pop	{r3}
 800d6b0:	469e      	mov	lr, r3
 800d6b2:	4770      	bx	lr

0800d6b4 <_fini>:
 800d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b6:	bf00      	nop
 800d6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ba:	bc08      	pop	{r3}
 800d6bc:	469e      	mov	lr, r3
 800d6be:	4770      	bx	lr
