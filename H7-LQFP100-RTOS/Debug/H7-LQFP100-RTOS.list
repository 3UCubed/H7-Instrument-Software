
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a780  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801aa20  0801aa20  0002aa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801aeb8  0801aeb8  0002aeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801aec0  0801aec0  0002aec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801aec4  0801aec4  0002aec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000138  24000000  0801aec8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801b000  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801b000  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040c34  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007cc3  00000000  00000000  00070d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bb0  00000000  00000000  00078a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002868  00000000  00000000  0007b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004681f  00000000  00000000  0007de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043260  00000000  00000000  000c4697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196a6d  00000000  00000000  001078f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029e364  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bcc0  00000000  00000000  0029e3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801aa08 	.word	0x0801aa08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801aa08 	.word	0x0801aa08

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fc77 	bl	8005f5c <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f958 	bl	8003928 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fd92 	bl	80071ac <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f94b 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fed5 	bl	8006464 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f932 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 fec7 	bl	8006464 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f924 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 feb9 	bl	8006464 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f916 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 feab 	bl	8006464 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f908 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 fe9c 	bl	8006464 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f8f9 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 fe8d 	bl	8006464 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f8ea 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 fe7e 	bl	8006464 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f8db 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 fe6f 	bl	8006464 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f8cc 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fe60 	bl	8006464 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f8bd 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fe51 	bl	8006464 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f8ae 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 fe42 	bl	8006464 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f89f 	bl	8003928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 fb5f 	bl	8005f5c <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f840 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fdca 	bl	8006464 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f827 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fdbc 	bl	8006464 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f819 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fdae 	bl	8006464 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f80b 	bl	8003928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fda0 	bl	8006464 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 fffd 	bl	8003928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a faca 	bl	800af94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fabe 	bl	800af94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fab2 	bl	800af94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 f95d 	bl	8007d34 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 ff52 	bl	8003928 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 f818 	bl	8005b14 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 f812 	bl	8005b14 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 f8fd 	bl	8007d34 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 fef2 	bl	8003928 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 fa35 	bl	8019ffc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fcc5 	bl	8007528 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fec0 	bl	8003928 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fee0 	bl	8007988 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 feab 	bl	8003928 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a f99d 	bl	800af94 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 f848 	bl	8007d34 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fe3d 	bl	8003928 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fc0a 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fc21 	bl	800750c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fbe1 	bl	80074d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fbf8 	bl	800750c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fbd9 	bl	80074d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fbf0 	bl	800750c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fbd1 	bl	80074d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fbe8 	bl	800750c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fbc9 	bl	80074d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fbe0 	bl	800750c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fbc1 	bl	80074d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fbd8 	bl	800750c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fbb9 	bl	80074d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fbd0 	bl	800750c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fbb1 	bl	80074d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fbc8 	bl	800750c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fba9 	bl	80074d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fbc0 	bl	800750c <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 f916 	bl	8019ffc <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 ff20 	bl	800acb0 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fec5 	bl	800acb0 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 fd12 	bl	800a9e0 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1c      	cmp	r3, #28
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fc66 	bl	800a9e0 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fd72 	bl	800acb0 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fd0f 	bl	800acb0 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fb5c 	bl	800a9e0 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fc3a 	bl	800acb0 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1c      	cmp	r3, #28
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fa45 	bl	800a9e0 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fb52 	bl	800acb0 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fc02 	bl	8019ffc <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fa2d 	bl	800acb0 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 f87b 	bl	800a9e0 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f98f 	bl	800acb0 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fa9d 	bl	8019ffc <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fa94 	bl	8019ffc <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 ff47 	bl	800a9e0 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f008 ff34 	bl	800a9e0 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 f9df 	bl	8019ffc <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 f9d8 	bl	8019ffc <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f008 fe8d 	bl	800a9e0 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1c      	cmp	r3, #28
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f008 fea5 	bl	800ab04 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 ff4d 	bl	800acb0 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fd99 	bl	800a9e0 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
uint16_t VirtAddVarTab[NB_OF_VAR] = {0x5550, 0x5551, 0x5552, 0x5553, 0x5554, 0x5555, 0x5556, 0x5557, 0x5558, 0x5559, 0x555A, 0x555B, 0x555C, 0x555D, 0x555E, 0x555F, 0x6660, 0x6661, 0x6662, 0x6663, 0x6664, 0x6665, 0x6666, 0x6667, 0x6668, 0x6669, 0x666A, 0x666B, 0x666C};
uint16_t VarDataTab[NB_OF_VAR] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

uint16_t local_cpy[NUM_ERROR_COUNTERS];

void handle_error(ERROR_STRUCT error) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	80b8      	strh	r0, [r7, #4]

	increment_error_counter(error);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f837 	bl	8001fac <increment_error_counter>
	set_previous_error(error);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f898 	bl	8002074 <set_previous_error>
//		increment_error_counter(error);
//		break;
//	default:
//		break;
//	}
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <error_counter_init>:

void error_counter_init() {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
	// Starting up EEPROM Emulator
	HAL_FLASH_Unlock();
 8001f52:	f008 fdd7 	bl	800ab04 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001f56:	f7fe ff1f 	bl	8000d98 <EE_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <error_counter_init+0x18>
		Error_Handler();
 8001f60:	f001 fce2 	bl	8003928 <Error_Handler>
	}

	// Updating our local copy of error counters from EE
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	e013      	b.n	8001f92 <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <error_counter_init+0x58>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <error_counter_init+0x5c>)
 8001f78:	440b      	add	r3, r1
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	f7ff fbc3 	bl	8001708 <EE_ReadVariable>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <error_counter_init+0x40>
			Error_Handler();
 8001f88:	f001 fcce 	bl	8003928 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b1a      	cmp	r3, #26
 8001f96:	dde8      	ble.n	8001f6a <error_counter_init+0x1e>
		}
	}
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	24000000 	.word	0x24000000
 8001fa8:	240003a4 	.word	0x240003a4

08001fac <increment_error_counter>:


void increment_error_counter(ERROR_STRUCT error) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 8001fb4:	793b      	ldrb	r3, [r7, #4]
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <increment_error_counter+0x38>)
 8001fb8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fbc:	3201      	adds	r2, #1
 8001fbe:	b291      	uxth	r1, r2
 8001fc0:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <increment_error_counter+0x38>)
 8001fc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 8001fc6:	797b      	ldrb	r3, [r7, #5]
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <increment_error_counter+0x38>)
 8001fca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fce:	3201      	adds	r2, #1
 8001fd0:	b291      	uxth	r1, r2
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <increment_error_counter+0x38>)
 8001fd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 8001fd8:	f000 f806 	bl	8001fe8 <update_error_counter>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	240003a4 	.word	0x240003a4

08001fe8 <update_error_counter>:




void update_error_counter(){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
	// Writes our local copy of the error counters to EE
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	e013      	b.n	800201c <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <update_error_counter+0x44>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <update_error_counter+0x48>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f7ff fbc6 	bl	8001798 <EE_WriteVariable>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <update_error_counter+0x2e>
			Error_Handler();
 8002012:	f001 fc89 	bl	8003928 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3301      	adds	r3, #1
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b1a      	cmp	r3, #26
 8002020:	dde8      	ble.n	8001ff4 <update_error_counter+0xc>
		}
	}
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	24000000 	.word	0x24000000
 8002030:	240003a4 	.word	0x240003a4

08002034 <reset_error_counters>:


void reset_error_counters() {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
	// Resets all error counters to 0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	e00f      	b.n	8002060 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <reset_error_counters+0x3c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fba4 	bl	8001798 <EE_WriteVariable>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <reset_error_counters+0x26>
			Error_Handler();
 8002056:	f001 fc67 	bl	8003928 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3301      	adds	r3, #1
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b1a      	cmp	r3, #26
 8002064:	ddec      	ble.n	8002040 <reset_error_counters+0xc>
		}
	}
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	24000000 	.word	0x24000000

08002074 <set_previous_error>:
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], 0xFF)) != HAL_OK) {
		Error_Handler();
	}
}

void set_previous_error(ERROR_STRUCT error) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	80b8      	strh	r0, [r7, #4]
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <set_previous_error+0x44>)
 800207e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002080:	793a      	ldrb	r2, [r7, #4]
 8002082:	b292      	uxth	r2, r2
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fb86 	bl	8001798 <EE_WriteVariable>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <set_previous_error+0x22>
		Error_Handler();
 8002092:	f001 fc49 	bl	8003928 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <set_previous_error+0x44>)
 8002098:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800209a:	797a      	ldrb	r2, [r7, #5]
 800209c:	b292      	uxth	r2, r2
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fb79 	bl	8001798 <EE_WriteVariable>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <set_previous_error+0x3c>
		Error_Handler();
 80020ac:	f001 fc3c 	bl	8003928 <Error_Handler>
	}
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	24000000 	.word	0x24000000

080020bc <get_previous_error>:

ERROR_STRUCT get_previous_error() {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <get_previous_error+0x5c>)
 80020c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c6:	1dba      	adds	r2, r7, #6
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fb1c 	bl	8001708 <EE_ReadVariable>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <get_previous_error+0x1e>
		Error_Handler();
 80020d6:	f001 fc27 	bl	8003928 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <get_previous_error+0x5c>)
 80020dc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80020de:	1d3a      	adds	r2, r7, #4
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fb10 	bl	8001708 <EE_ReadVariable>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <get_previous_error+0x36>
		Error_Handler();
 80020ee:	f001 fc1b 	bl	8003928 <Error_Handler>
	}
	prev_error.category = category;
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	723b      	strb	r3, [r7, #8]
	prev_error.detail = detail;
 80020f8:	88bb      	ldrh	r3, [r7, #4]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	727b      	strb	r3, [r7, #9]

	return prev_error;
 80020fe:	893b      	ldrh	r3, [r7, #8]
 8002100:	81bb      	strh	r3, [r7, #12]
 8002102:	2300      	movs	r3, #0
 8002104:	7b3a      	ldrb	r2, [r7, #12]
 8002106:	f362 0307 	bfi	r3, r2, #0, #8
 800210a:	7b7a      	ldrb	r2, [r7, #13]
 800210c:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	24000000 	.word	0x24000000

0800211c <send_error_counter_packet>:

void send_error_counter_packet() {
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	; 0x38
 8002120:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 8002122:	23cc      	movs	r3, #204	; 0xcc
 8002124:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 8002126:	23cc      	movs	r3, #204	; 0xcc
 8002128:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 800212a:	4b98      	ldr	r3, [pc, #608]	; (800238c <send_error_counter_packet+0x270>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	b29b      	uxth	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 8002136:	4b95      	ldr	r3, [pc, #596]	; (800238c <send_error_counter_packet+0x270>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 800213e:	4b93      	ldr	r3, [pc, #588]	; (800238c <send_error_counter_packet+0x270>)
 8002140:	885b      	ldrh	r3, [r3, #2]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	b29b      	uxth	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 800214a:	4b90      	ldr	r3, [pc, #576]	; (800238c <send_error_counter_packet+0x270>)
 800214c:	885b      	ldrh	r3, [r3, #2]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 8002152:	4b8e      	ldr	r3, [pc, #568]	; (800238c <send_error_counter_packet+0x270>)
 8002154:	889b      	ldrh	r3, [r3, #4]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	b29b      	uxth	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 800215e:	4b8b      	ldr	r3, [pc, #556]	; (800238c <send_error_counter_packet+0x270>)
 8002160:	889b      	ldrh	r3, [r3, #4]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 8002166:	4b89      	ldr	r3, [pc, #548]	; (800238c <send_error_counter_packet+0x270>)
 8002168:	88db      	ldrh	r3, [r3, #6]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	b29b      	uxth	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 8002172:	4b86      	ldr	r3, [pc, #536]	; (800238c <send_error_counter_packet+0x270>)
 8002174:	88db      	ldrh	r3, [r3, #6]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 800217a:	4b84      	ldr	r3, [pc, #528]	; (800238c <send_error_counter_packet+0x270>)
 800217c:	891b      	ldrh	r3, [r3, #8]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	b29b      	uxth	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 8002186:	4b81      	ldr	r3, [pc, #516]	; (800238c <send_error_counter_packet+0x270>)
 8002188:	891b      	ldrh	r3, [r3, #8]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 800218e:	4b7f      	ldr	r3, [pc, #508]	; (800238c <send_error_counter_packet+0x270>)
 8002190:	895b      	ldrh	r3, [r3, #10]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b29b      	uxth	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 800219a:	4b7c      	ldr	r3, [pc, #496]	; (800238c <send_error_counter_packet+0x270>)
 800219c:	895b      	ldrh	r3, [r3, #10]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 80021a2:	4b7a      	ldr	r3, [pc, #488]	; (800238c <send_error_counter_packet+0x270>)
 80021a4:	899b      	ldrh	r3, [r3, #12]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 80021ae:	4b77      	ldr	r3, [pc, #476]	; (800238c <send_error_counter_packet+0x270>)
 80021b0:	899b      	ldrh	r3, [r3, #12]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 80021b6:	4b75      	ldr	r3, [pc, #468]	; (800238c <send_error_counter_packet+0x270>)
 80021b8:	89db      	ldrh	r3, [r3, #14]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 80021c2:	4b72      	ldr	r3, [pc, #456]	; (800238c <send_error_counter_packet+0x270>)
 80021c4:	89db      	ldrh	r3, [r3, #14]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 80021ca:	4b70      	ldr	r3, [pc, #448]	; (800238c <send_error_counter_packet+0x270>)
 80021cc:	8a1b      	ldrh	r3, [r3, #16]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 80021d6:	4b6d      	ldr	r3, [pc, #436]	; (800238c <send_error_counter_packet+0x270>)
 80021d8:	8a1b      	ldrh	r3, [r3, #16]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 80021de:	4b6b      	ldr	r3, [pc, #428]	; (800238c <send_error_counter_packet+0x270>)
 80021e0:	8a5b      	ldrh	r3, [r3, #18]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 80021ea:	4b68      	ldr	r3, [pc, #416]	; (800238c <send_error_counter_packet+0x270>)
 80021ec:	8a5b      	ldrh	r3, [r3, #18]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 80021f2:	4b66      	ldr	r3, [pc, #408]	; (800238c <send_error_counter_packet+0x270>)
 80021f4:	8a9b      	ldrh	r3, [r3, #20]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 80021fe:	4b63      	ldr	r3, [pc, #396]	; (800238c <send_error_counter_packet+0x270>)
 8002200:	8a9b      	ldrh	r3, [r3, #20]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 8002206:	4b61      	ldr	r3, [pc, #388]	; (800238c <send_error_counter_packet+0x270>)
 8002208:	8adb      	ldrh	r3, [r3, #22]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 8002212:	4b5e      	ldr	r3, [pc, #376]	; (800238c <send_error_counter_packet+0x270>)
 8002214:	8adb      	ldrh	r3, [r3, #22]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 800221a:	4b5c      	ldr	r3, [pc, #368]	; (800238c <send_error_counter_packet+0x270>)
 800221c:	8b1b      	ldrh	r3, [r3, #24]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	b29b      	uxth	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 8002226:	4b59      	ldr	r3, [pc, #356]	; (800238c <send_error_counter_packet+0x270>)
 8002228:	8b1b      	ldrh	r3, [r3, #24]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 800222e:	4b57      	ldr	r3, [pc, #348]	; (800238c <send_error_counter_packet+0x270>)
 8002230:	8b5b      	ldrh	r3, [r3, #26]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	b29b      	uxth	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 800223a:	4b54      	ldr	r3, [pc, #336]	; (800238c <send_error_counter_packet+0x270>)
 800223c:	8b5b      	ldrh	r3, [r3, #26]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 8002242:	4b52      	ldr	r3, [pc, #328]	; (800238c <send_error_counter_packet+0x270>)
 8002244:	8b9b      	ldrh	r3, [r3, #28]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	b29b      	uxth	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 800224e:	4b4f      	ldr	r3, [pc, #316]	; (800238c <send_error_counter_packet+0x270>)
 8002250:	8b9b      	ldrh	r3, [r3, #28]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 8002256:	4b4d      	ldr	r3, [pc, #308]	; (800238c <send_error_counter_packet+0x270>)
 8002258:	8bdb      	ldrh	r3, [r3, #30]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 8002264:	4b49      	ldr	r3, [pc, #292]	; (800238c <send_error_counter_packet+0x270>)
 8002266:	8bdb      	ldrh	r3, [r3, #30]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <send_error_counter_packet+0x270>)
 8002270:	8c1b      	ldrh	r3, [r3, #32]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29b      	uxth	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 800227c:	4b43      	ldr	r3, [pc, #268]	; (800238c <send_error_counter_packet+0x270>)
 800227e:	8c1b      	ldrh	r3, [r3, #32]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <send_error_counter_packet+0x270>)
 8002288:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b29b      	uxth	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 8002294:	4b3d      	ldr	r3, [pc, #244]	; (800238c <send_error_counter_packet+0x270>)
 8002296:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 800229e:	4b3b      	ldr	r3, [pc, #236]	; (800238c <send_error_counter_packet+0x270>)
 80022a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 80022ac:	4b37      	ldr	r3, [pc, #220]	; (800238c <send_error_counter_packet+0x270>)
 80022ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 80022b6:	4b35      	ldr	r3, [pc, #212]	; (800238c <send_error_counter_packet+0x270>)
 80022b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	b29b      	uxth	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 80022c4:	4b31      	ldr	r3, [pc, #196]	; (800238c <send_error_counter_packet+0x270>)
 80022c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 80022ce:	4b2f      	ldr	r3, [pc, #188]	; (800238c <send_error_counter_packet+0x270>)
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <send_error_counter_packet+0x270>)
 80022de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <send_error_counter_packet+0x270>)
 80022e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <send_error_counter_packet+0x270>)
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <send_error_counter_packet+0x270>)
 8002300:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	b29b      	uxth	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 800230c:	4b1f      	ldr	r3, [pc, #124]	; (800238c <send_error_counter_packet+0x270>)
 800230e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <send_error_counter_packet+0x270>)
 8002318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	b29b      	uxth	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <send_error_counter_packet+0x270>)
 8002326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <send_error_counter_packet+0x270>)
 8002330:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	b29b      	uxth	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <send_error_counter_packet+0x270>)
 800233e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <send_error_counter_packet+0x270>)
 8002348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b29b      	uxth	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <send_error_counter_packet+0x270>)
 8002356:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <send_error_counter_packet+0x270>)
 8002360:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	b29b      	uxth	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <send_error_counter_packet+0x270>)
 800236e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 8002376:	4639      	mov	r1, r7
 8002378:	2364      	movs	r3, #100	; 0x64
 800237a:	2238      	movs	r2, #56	; 0x38
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <send_error_counter_packet+0x274>)
 800237e:	f011 fe15 	bl	8013fac <HAL_UART_Transmit>
}
 8002382:	bf00      	nop
 8002384:	3738      	adds	r7, #56	; 0x38
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	240003a4 	.word	0x240003a4
 8002390:	24001e3c 	.word	0x24001e3c

08002394 <send_previous_error_packet>:

void send_previous_error_packet() {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 800239a:	f7ff fe8f 	bl	80020bc <get_previous_error>
 800239e:	4603      	mov	r3, r0
 80023a0:	80bb      	strh	r3, [r7, #4]

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 80023a2:	23aa      	movs	r3, #170	; 0xaa
 80023a4:	703b      	strb	r3, [r7, #0]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 80023a6:	23aa      	movs	r3, #170	; 0xaa
 80023a8:	707b      	strb	r3, [r7, #1]
	buffer[2] = prev_error.category;
 80023aa:	793b      	ldrb	r3, [r7, #4]
 80023ac:	70bb      	strb	r3, [r7, #2]
	buffer[3] = prev_error.detail;
 80023ae:	797b      	ldrb	r3, [r7, #5]
 80023b0:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 80023b2:	4639      	mov	r1, r7
 80023b4:	2364      	movs	r3, #100	; 0x64
 80023b6:	2204      	movs	r2, #4
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <send_previous_error_packet+0x34>)
 80023ba:	f011 fdf7 	bl	8013fac <HAL_UART_Transmit>

}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	24001e3c 	.word	0x24001e3c

080023cc <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <vApplicationTickHook+0x18>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <vApplicationTickHook+0x18>)
 80023d8:	6013      	str	r3, [r2, #0]
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	24001ae0 	.word	0x24001ae0

080023e8 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8002404:	4a24      	ldr	r2, [pc, #144]	; (8002498 <MX_FREERTOS_Init+0x98>)
 8002406:	2100      	movs	r1, #0
 8002408:	4824      	ldr	r0, [pc, #144]	; (800249c <MX_FREERTOS_Init+0x9c>)
 800240a:	f014 fc27 	bl	8016c5c <osThreadNew>
 800240e:	4603      	mov	r3, r0
 8002410:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <MX_FREERTOS_Init+0xa0>)
 8002412:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <MX_FREERTOS_Init+0xa4>)
 8002416:	2100      	movs	r1, #0
 8002418:	4823      	ldr	r0, [pc, #140]	; (80024a8 <MX_FREERTOS_Init+0xa8>)
 800241a:	f014 fc1f 	bl	8016c5c <osThreadNew>
 800241e:	4603      	mov	r3, r0
 8002420:	4a22      	ldr	r2, [pc, #136]	; (80024ac <MX_FREERTOS_Init+0xac>)
 8002422:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002424:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <MX_FREERTOS_Init+0xb0>)
 8002426:	2100      	movs	r1, #0
 8002428:	4822      	ldr	r0, [pc, #136]	; (80024b4 <MX_FREERTOS_Init+0xb4>)
 800242a:	f014 fc17 	bl	8016c5c <osThreadNew>
 800242e:	4603      	mov	r3, r0
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <MX_FREERTOS_Init+0xb8>)
 8002432:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002434:	4a21      	ldr	r2, [pc, #132]	; (80024bc <MX_FREERTOS_Init+0xbc>)
 8002436:	2100      	movs	r1, #0
 8002438:	4821      	ldr	r0, [pc, #132]	; (80024c0 <MX_FREERTOS_Init+0xc0>)
 800243a:	f014 fc0f 	bl	8016c5c <osThreadNew>
 800243e:	4603      	mov	r3, r0
 8002440:	4a20      	ldr	r2, [pc, #128]	; (80024c4 <MX_FREERTOS_Init+0xc4>)
 8002442:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002444:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <MX_FREERTOS_Init+0xc8>)
 8002446:	2100      	movs	r1, #0
 8002448:	4820      	ldr	r0, [pc, #128]	; (80024cc <MX_FREERTOS_Init+0xcc>)
 800244a:	f014 fc07 	bl	8016c5c <osThreadNew>
 800244e:	4603      	mov	r3, r0
 8002450:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <MX_FREERTOS_Init+0xd0>)
 8002452:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <MX_FREERTOS_Init+0xd4>)
 8002456:	2100      	movs	r1, #0
 8002458:	481f      	ldr	r0, [pc, #124]	; (80024d8 <MX_FREERTOS_Init+0xd8>)
 800245a:	f014 fbff 	bl	8016c5c <osThreadNew>
 800245e:	4603      	mov	r3, r0
 8002460:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <MX_FREERTOS_Init+0xdc>)
 8002462:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002464:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <MX_FREERTOS_Init+0xe0>)
 8002466:	2100      	movs	r1, #0
 8002468:	481e      	ldr	r0, [pc, #120]	; (80024e4 <MX_FREERTOS_Init+0xe4>)
 800246a:	f014 fbf7 	bl	8016c5c <osThreadNew>
 800246e:	4603      	mov	r3, r0
 8002470:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <MX_FREERTOS_Init+0xe8>)
 8002472:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002474:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <MX_FREERTOS_Init+0xec>)
 8002476:	2100      	movs	r1, #0
 8002478:	481d      	ldr	r0, [pc, #116]	; (80024f0 <MX_FREERTOS_Init+0xf0>)
 800247a:	f014 fbef 	bl	8016c5c <osThreadNew>
 800247e:	4603      	mov	r3, r0
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <MX_FREERTOS_Init+0xf4>)
 8002482:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002484:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <MX_FREERTOS_Init+0xf8>)
 8002486:	2100      	movs	r1, #0
 8002488:	481c      	ldr	r0, [pc, #112]	; (80024fc <MX_FREERTOS_Init+0xfc>)
 800248a:	f014 fbe7 	bl	8016c5c <osThreadNew>
 800248e:	4603      	mov	r3, r0
 8002490:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <MX_FREERTOS_Init+0x100>)
 8002492:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	0801ac88 	.word	0x0801ac88
 800249c:	08002505 	.word	0x08002505
 80024a0:	240003dc 	.word	0x240003dc
 80024a4:	0801acac 	.word	0x0801acac
 80024a8:	0800252d 	.word	0x0800252d
 80024ac:	2400063c 	.word	0x2400063c
 80024b0:	0801acd0 	.word	0x0801acd0
 80024b4:	08002555 	.word	0x08002555
 80024b8:	2400089c 	.word	0x2400089c
 80024bc:	0801acf4 	.word	0x0801acf4
 80024c0:	0800257d 	.word	0x0800257d
 80024c4:	24000afc 	.word	0x24000afc
 80024c8:	0801ad18 	.word	0x0801ad18
 80024cc:	080025f5 	.word	0x080025f5
 80024d0:	24000d5c 	.word	0x24000d5c
 80024d4:	0801ad3c 	.word	0x0801ad3c
 80024d8:	0800266d 	.word	0x0800266d
 80024dc:	24000fbc 	.word	0x24000fbc
 80024e0:	0801ad60 	.word	0x0801ad60
 80024e4:	0800269d 	.word	0x0800269d
 80024e8:	2400121c 	.word	0x2400121c
 80024ec:	0801ad84 	.word	0x0801ad84
 80024f0:	080026cd 	.word	0x080026cd
 80024f4:	2400147c 	.word	0x2400147c
 80024f8:	0801ada8 	.word	0x0801ada8
 80024fc:	080027ad 	.word	0x080027ad
 8002500:	240016dc 	.word	0x240016dc

08002504 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <PMT_init+0x24>)
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002514:	2200      	movs	r2, #0
 8002516:	2101      	movs	r1, #1
 8002518:	f014 fd22 	bl	8016f60 <osEventFlagsWait>

		create_pmt_packet();
 800251c:	f001 fa12 	bl	8003944 <create_pmt_packet>

		osThreadYield();
 8002520:	f014 fc2e 	bl	8016d80 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002524:	e7f2      	b.n	800250c <PMT_init+0x8>
 8002526:	bf00      	nop
 8002528:	24001a90 	.word	0x24001a90

0800252c <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <ERPA_init+0x24>)
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800253c:	2200      	movs	r2, #0
 800253e:	2102      	movs	r1, #2
 8002540:	f014 fd0e 	bl	8016f60 <osEventFlagsWait>

		create_erpa_packet();
 8002544:	f001 fa44 	bl	80039d0 <create_erpa_packet>

		osThreadYield();
 8002548:	f014 fc1a 	bl	8016d80 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800254c:	e7f2      	b.n	8002534 <ERPA_init+0x8>
 800254e:	bf00      	nop
 8002550:	24001a90 	.word	0x24001a90

08002554 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HK_init+0x24>)
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002564:	2200      	movs	r2, #0
 8002566:	2104      	movs	r1, #4
 8002568:	f014 fcfa 	bl	8016f60 <osEventFlagsWait>

		create_hk_packet();
 800256c:	f001 fa8e 	bl	8003a8c <create_hk_packet>

		osThreadYield();
 8002570:	f014 fc06 	bl	8016d80 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002574:	e7f2      	b.n	800255c <HK_init+0x8>
 8002576:	bf00      	nop
 8002578:	24001a90 	.word	0x24001a90

0800257c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <AUTOINIT_init+0x70>)
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800258c:	2200      	movs	r2, #0
 800258e:	2104      	movs	r1, #4
 8002590:	f014 fce6 	bl	8016f60 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e012      	b.n	80025c0 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800259a:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <AUTOINIT_init+0x74>)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80025a2:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <AUTOINIT_init+0x74>)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	889b      	ldrh	r3, [r3, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	4619      	mov	r1, r3
 80025b0:	f008 feb8 	bl	800b324 <HAL_GPIO_WritePin>
			osDelay(100);
 80025b4:	2064      	movs	r0, #100	; 0x64
 80025b6:	f014 fc03 	bl	8016dc0 <osDelay>
		for (int i = 0; i < 7; i++) {
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3301      	adds	r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	dde9      	ble.n	800259a <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80025c6:	2308      	movs	r3, #8
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	e008      	b.n	80025de <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2101      	movs	r1, #1
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 f898 	bl	8005708 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	3301      	adds	r3, #1
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b0d      	cmp	r3, #13
 80025e2:	ddf3      	ble.n	80025cc <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80025e4:	f014 fbcc 	bl	8016d80 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80025e8:	e7cc      	b.n	8002584 <AUTOINIT_init+0x8>
 80025ea:	bf00      	nop
 80025ec:	24001a94 	.word	0x24001a94
 80025f0:	0801adcc 	.word	0x0801adcc

080025f4 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <AUTODEINIT_init+0x70>)
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002604:	2200      	movs	r2, #0
 8002606:	2108      	movs	r1, #8
 8002608:	f014 fcaa 	bl	8016f60 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800260c:	230d      	movs	r3, #13
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e008      	b.n	8002624 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f003 f875 	bl	8005708 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3b01      	subs	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b07      	cmp	r3, #7
 8002628:	dcf3      	bgt.n	8002612 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800262a:	2306      	movs	r3, #6
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	e012      	b.n	8002656 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002630:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <AUTODEINIT_init+0x74>)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002638:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <AUTODEINIT_init+0x74>)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	889b      	ldrh	r3, [r3, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	4619      	mov	r1, r3
 8002646:	f008 fe6d 	bl	800b324 <HAL_GPIO_WritePin>
			osDelay(100);
 800264a:	2064      	movs	r0, #100	; 0x64
 800264c:	f014 fbb8 	bl	8016dc0 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	3b01      	subs	r3, #1
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	dae9      	bge.n	8002630 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 800265c:	f014 fb90 	bl	8016d80 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002660:	e7cc      	b.n	80025fc <AUTODEINIT_init+0x8>
 8002662:	bf00      	nop
 8002664:	24001a94 	.word	0x24001a94
 8002668:	0801adcc 	.word	0x0801adcc

0800266c <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <Voltage_Monitor_init+0x28>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800267c:	2200      	movs	r2, #0
 800267e:	2101      	movs	r1, #1
 8002680:	f014 fc6e 	bl	8016f60 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 8002684:	4804      	ldr	r0, [pc, #16]	; (8002698 <Voltage_Monitor_init+0x2c>)
 8002686:	f00b f9cb 	bl	800da20 <HAL_IWDG_Refresh>
	  set_rail_monitor();
 800268a:	f003 f85d 	bl	8005748 <set_rail_monitor>
	  monitor_rails();
 800268e:	f003 f8df 	bl	8005850 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002692:	e7ef      	b.n	8002674 <Voltage_Monitor_init+0x8>
 8002694:	24001a94 	.word	0x24001a94
 8002698:	24001a80 	.word	0x24001a80

0800269c <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <STOP_init+0x2c>)
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ac:	2200      	movs	r2, #0
 80026ae:	2102      	movs	r1, #2
 80026b0:	f014 fc56 	bl	8016f60 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <STOP_init+0x2c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2102      	movs	r1, #2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f014 fc1e 	bl	8016efc <osEventFlagsClear>

	  enter_stop();
 80026c0:	f001 f914 	bl	80038ec <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80026c4:	e7ee      	b.n	80026a4 <STOP_init+0x8>
 80026c6:	bf00      	nop
 80026c8:	24001a94 	.word	0x24001a94

080026cc <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80026d4:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <Science_init+0xbc>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026dc:	2200      	movs	r2, #0
 80026de:	2101      	movs	r1, #1
 80026e0:	f014 fc3e 	bl	8016f60 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e012      	b.n	8002710 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80026ea:	4a28      	ldr	r2, [pc, #160]	; (800278c <Science_init+0xc0>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80026f2:	4a26      	ldr	r2, [pc, #152]	; (800278c <Science_init+0xc0>)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	889b      	ldrh	r3, [r3, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4619      	mov	r1, r3
 8002700:	f008 fe10 	bl	800b324 <HAL_GPIO_WritePin>
			osDelay(200);
 8002704:	20c8      	movs	r0, #200	; 0xc8
 8002706:	f014 fb5b 	bl	8016dc0 <osDelay>
		for (int i = 0; i < 9; i++) {
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3301      	adds	r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b08      	cmp	r3, #8
 8002714:	dde9      	ble.n	80026ea <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8002716:	2308      	movs	r3, #8
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	e008      	b.n	800272e <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fff0 	bl	8005708 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	3301      	adds	r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b10      	cmp	r3, #16
 8002732:	ddf3      	ble.n	800271c <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8002734:	b672      	cpsid	i
}
 8002736:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8002738:	2300      	movs	r3, #0
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2320      	movs	r3, #32
 800273e:	4a14      	ldr	r2, [pc, #80]	; (8002790 <Science_init+0xc4>)
 8002740:	2100      	movs	r1, #0
 8002742:	4814      	ldr	r0, [pc, #80]	; (8002794 <Science_init+0xc8>)
 8002744:	f004 ff6a 	bl	800761c <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <Science_init+0xcc>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <Science_init+0xd0>)
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <Science_init+0xd4>)
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800275a:	f001 fae5 	bl	8003d28 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <Science_init+0xd8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2104      	movs	r1, #4
 8002764:	4618      	mov	r0, r3
 8002766:	f014 fb85 	bl	8016e74 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 800276a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800276e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8002774:	2100      	movs	r1, #0
 8002776:	480c      	ldr	r0, [pc, #48]	; (80027a8 <Science_init+0xdc>)
 8002778:	f010 f88e 	bl	8012898 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800277c:	b662      	cpsie	i
}
 800277e:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002780:	f014 fafe 	bl	8016d80 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002784:	e7a6      	b.n	80026d4 <Science_init+0x8>
 8002786:	bf00      	nop
 8002788:	24001a98 	.word	0x24001a98
 800278c:	0801adcc 	.word	0x0801adcc
 8002790:	2400003c 	.word	0x2400003c
 8002794:	24000314 	.word	0x24000314
 8002798:	24001adc 	.word	0x24001adc
 800279c:	24001add 	.word	0x24001add
 80027a0:	24001ae0 	.word	0x24001ae0
 80027a4:	24001a90 	.word	0x24001a90
 80027a8:	24001da4 	.word	0x24001da4

080027ac <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <Idle_init+0x94>)
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027bc:	2200      	movs	r2, #0
 80027be:	2102      	movs	r1, #2
 80027c0:	f014 fbce 	bl	8016f60 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 80027c4:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <Idle_init+0x98>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80027ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ce:	2200      	movs	r2, #0
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80027d2:	2100      	movs	r1, #0
 80027d4:	481c      	ldr	r0, [pc, #112]	; (8002848 <Idle_init+0x9c>)
 80027d6:	f010 f9b9 	bl	8012b4c <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <Idle_init+0xa0>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80027e0:	2100      	movs	r1, #0
 80027e2:	481b      	ldr	r0, [pc, #108]	; (8002850 <Idle_init+0xa4>)
 80027e4:	f004 ffda 	bl	800779c <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80027e8:	2310      	movs	r3, #16
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e008      	b.n	8002800 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 ff87 	bl	8005708 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b07      	cmp	r3, #7
 8002804:	dcf3      	bgt.n	80027ee <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8002806:	2308      	movs	r3, #8
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	e012      	b.n	8002832 <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <Idle_init+0xa8>)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <Idle_init+0xa8>)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	889b      	ldrh	r3, [r3, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	4619      	mov	r1, r3
 8002822:	f008 fd7f 	bl	800b324 <HAL_GPIO_WritePin>
			osDelay(200);
 8002826:	20c8      	movs	r0, #200	; 0xc8
 8002828:	f014 faca 	bl	8016dc0 <osDelay>
		for (int i = 8; i >= 0; i--) {
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3b01      	subs	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	dae9      	bge.n	800280c <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 8002838:	f014 faa2 	bl	8016d80 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800283c:	e7ba      	b.n	80027b4 <Idle_init+0x8>
 800283e:	bf00      	nop
 8002840:	24001a98 	.word	0x24001a98
 8002844:	24001add 	.word	0x24001add
 8002848:	24001da4 	.word	0x24001da4
 800284c:	24001adc 	.word	0x24001adc
 8002850:	24000314 	.word	0x24000314
 8002854:	0801adcc 	.word	0x0801adcc

08002858 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4b34      	ldr	r3, [pc, #208]	; (8002940 <MX_GPIO_Init+0xe8>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002874:	4a32      	ldr	r2, [pc, #200]	; (8002940 <MX_GPIO_Init+0xe8>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <MX_GPIO_Init+0xe8>)
 8002880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800288c:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <MX_GPIO_Init+0xe8>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002892:	4a2b      	ldr	r2, [pc, #172]	; (8002940 <MX_GPIO_Init+0xe8>)
 8002894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800289c:	4b28      	ldr	r3, [pc, #160]	; (8002940 <MX_GPIO_Init+0xe8>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	4b25      	ldr	r3, [pc, #148]	; (8002940 <MX_GPIO_Init+0xe8>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b0:	4a23      	ldr	r2, [pc, #140]	; (8002940 <MX_GPIO_Init+0xe8>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <MX_GPIO_Init+0xe8>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <MX_GPIO_Init+0xe8>)
 80028ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <MX_GPIO_Init+0xe8>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <MX_GPIO_Init+0xe8>)
 80028da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80028e6:	2200      	movs	r2, #0
 80028e8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80028ec:	4815      	ldr	r0, [pc, #84]	; (8002944 <MX_GPIO_Init+0xec>)
 80028ee:	f008 fd19 	bl	800b324 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2164      	movs	r1, #100	; 0x64
 80028f6:	4814      	ldr	r0, [pc, #80]	; (8002948 <MX_GPIO_Init+0xf0>)
 80028f8:	f008 fd14 	bl	800b324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80028fc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002900:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002902:	2301      	movs	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002906:	2302      	movs	r3, #2
 8002908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	480b      	ldr	r0, [pc, #44]	; (8002944 <MX_GPIO_Init+0xec>)
 8002916:	f008 fb3d 	bl	800af94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800291a:	2364      	movs	r3, #100	; 0x64
 800291c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002922:	2302      	movs	r3, #2
 8002924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292a:	f107 0314 	add.w	r3, r7, #20
 800292e:	4619      	mov	r1, r3
 8002930:	4805      	ldr	r0, [pc, #20]	; (8002948 <MX_GPIO_Init+0xf0>)
 8002932:	f008 fb2f 	bl	800af94 <HAL_GPIO_Init>

}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	; 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	58024400 	.word	0x58024400
 8002944:	58020800 	.word	0x58020800
 8002948:	58020400 	.word	0x58020400

0800294c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002950:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <MX_I2C1_Init+0x78>)
 8002952:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <MX_I2C1_Init+0x7c>)
 8002954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <MX_I2C1_Init+0x78>)
 8002958:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <MX_I2C1_Init+0x80>)
 800295a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <MX_I2C1_Init+0x78>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <MX_I2C1_Init+0x78>)
 8002964:	2201      	movs	r2, #1
 8002966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <MX_I2C1_Init+0x78>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <MX_I2C1_Init+0x78>)
 8002970:	2200      	movs	r2, #0
 8002972:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <MX_I2C1_Init+0x78>)
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <MX_I2C1_Init+0x78>)
 800297c:	2200      	movs	r2, #0
 800297e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002980:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <MX_I2C1_Init+0x78>)
 8002982:	2200      	movs	r2, #0
 8002984:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002986:	480f      	ldr	r0, [pc, #60]	; (80029c4 <MX_I2C1_Init+0x78>)
 8002988:	f008 fce6 	bl	800b358 <HAL_I2C_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002992:	f000 ffc9 	bl	8003928 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002996:	2100      	movs	r1, #0
 8002998:	480a      	ldr	r0, [pc, #40]	; (80029c4 <MX_I2C1_Init+0x78>)
 800299a:	f00a ff85 	bl	800d8a8 <HAL_I2CEx_ConfigAnalogFilter>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029a4:	f000 ffc0 	bl	8003928 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029a8:	2100      	movs	r1, #0
 80029aa:	4806      	ldr	r0, [pc, #24]	; (80029c4 <MX_I2C1_Init+0x78>)
 80029ac:	f00a ffc7 	bl	800d93e <HAL_I2CEx_ConfigDigitalFilter>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029b6:	f000 ffb7 	bl	8003928 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80029ba:	2001      	movs	r0, #1
 80029bc:	f00b f80c 	bl	800d9d8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2400193c 	.word	0x2400193c
 80029c8:	40005400 	.word	0x40005400
 80029cc:	00100517 	.word	0x00100517

080029d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0ba      	sub	sp, #232	; 0xe8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	22c0      	movs	r2, #192	; 0xc0
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f017 fb03 	bl	8019ffc <memset>
  if(i2cHandle->Instance==I2C1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5d      	ldr	r2, [pc, #372]	; (8002b70 <HAL_I2C_MspInit+0x1a0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	f040 80b3 	bne.w	8002b68 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a02:	f04f 0208 	mov.w	r2, #8
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f00c f8af 	bl	800eb7c <HAL_RCCEx_PeriphCLKConfig>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002a24:	f000 ff80 	bl	8003928 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a28:	4b52      	ldr	r3, [pc, #328]	; (8002b74 <HAL_I2C_MspInit+0x1a4>)
 8002a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2e:	4a51      	ldr	r2, [pc, #324]	; (8002b74 <HAL_I2C_MspInit+0x1a4>)
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a38:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <HAL_I2C_MspInit+0x1a4>)
 8002a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a4e:	2312      	movs	r3, #18
 8002a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a60:	2304      	movs	r3, #4
 8002a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4842      	ldr	r0, [pc, #264]	; (8002b78 <HAL_I2C_MspInit+0x1a8>)
 8002a6e:	f008 fa91 	bl	800af94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a72:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <HAL_I2C_MspInit+0x1a4>)
 8002a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a78:	4a3e      	ldr	r2, [pc, #248]	; (8002b74 <HAL_I2C_MspInit+0x1a4>)
 8002a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a82:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <HAL_I2C_MspInit+0x1a4>)
 8002a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002a90:	4b3a      	ldr	r3, [pc, #232]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002a92:	4a3b      	ldr	r2, [pc, #236]	; (8002b80 <HAL_I2C_MspInit+0x1b0>)
 8002a94:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002a96:	4b39      	ldr	r3, [pc, #228]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002a98:	2222      	movs	r2, #34	; 0x22
 8002a9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a9c:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa2:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa8:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ab6:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002abc:	4b2f      	ldr	r3, [pc, #188]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ac2:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002ac4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ac8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002ad0:	482a      	ldr	r0, [pc, #168]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002ad2:	f005 f92f 	bl	8007d34 <HAL_DMA_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002adc:	f000 ff24 	bl	8003928 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a26      	ldr	r2, [pc, #152]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ae6:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <HAL_I2C_MspInit+0x1ac>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002aee:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <HAL_I2C_MspInit+0x1b8>)
 8002af0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002af4:	2221      	movs	r2, #33	; 0x21
 8002af6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002af8:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002afe:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b0a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002b20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b24:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002b2c:	4815      	ldr	r0, [pc, #84]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002b2e:	f005 f901 	bl	8007d34 <HAL_DMA_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002b38:	f000 fef6 	bl	8003928 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b42:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_I2C_MspInit+0x1b4>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2105      	movs	r1, #5
 8002b4c:	201f      	movs	r0, #31
 8002b4e:	f004 fcc3 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b52:	201f      	movs	r0, #31
 8002b54:	f004 fcda 	bl	800750c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2105      	movs	r1, #5
 8002b5c:	2020      	movs	r0, #32
 8002b5e:	f004 fcbb 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002b62:	2020      	movs	r0, #32
 8002b64:	f004 fcd2 	bl	800750c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b68:	bf00      	nop
 8002b6a:	37e8      	adds	r7, #232	; 0xe8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40005400 	.word	0x40005400
 8002b74:	58024400 	.word	0x58024400
 8002b78:	58020400 	.word	0x58020400
 8002b7c:	24001990 	.word	0x24001990
 8002b80:	400200a0 	.word	0x400200a0
 8002b84:	24001a08 	.word	0x24001a08
 8002b88:	400200b8 	.word	0x400200b8

08002b8c <__NVIC_SystemReset>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002b90:	f3bf 8f4f 	dsb	sy
}
 8002b94:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <__NVIC_SystemReset+0x24>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b9e:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <__NVIC_SystemReset+0x24>)
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <__NVIC_SystemReset+0x28>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ba6:	f3bf 8f4f 	dsb	sy
}
 8002baa:	bf00      	nop
    __NOP();
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <__NVIC_SystemReset+0x20>
 8002bb0:	e000ed00 	.word	0xe000ed00
 8002bb4:	05fa0004 	.word	0x05fa0004

08002bb8 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d106      	bne.n	8002bd6 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f014 f950 	bl	8016e74 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002bd4:	e032      	b.n	8002c3c <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d12b      	bne.n	8002c36 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002be8:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2102      	movs	r1, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f014 f940 	bl	8016e74 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002bf4:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d113      	bne.n	8002c26 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2101      	movs	r1, #1
 8002c04:	4618      	mov	r0, r3
 8002c06:	f014 f935 	bl	8016e74 <osEventFlagsSet>
			if (HK_ENABLED){
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2104      	movs	r1, #4
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f014 f92a 	bl	8016e74 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002c32:	701a      	strb	r2, [r3, #0]
}
 8002c34:	e002      	b.n	8002c3c <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002c36:	480a      	ldr	r0, [pc, #40]	; (8002c60 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002c38:	f017 fa56 	bl	801a0e8 <puts>
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	24001da4 	.word	0x24001da4
 8002c48:	24001a90 	.word	0x24001a90
 8002c4c:	24001df0 	.word	0x24001df0
 8002c50:	24001add 	.word	0x24001add
 8002c54:	24001ae4 	.word	0x24001ae4
 8002c58:	24001a94 	.word	0x24001a94
 8002c5c:	24001adc 	.word	0x24001adc
 8002c60:	0801aa98 	.word	0x0801aa98

08002c64 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	49f7      	ldr	r1, [pc, #988]	; (800304c <HAL_UART_RxCpltCallback+0x3e8>)
 8002c70:	48f7      	ldr	r0, [pc, #988]	; (8003050 <HAL_UART_RxCpltCallback+0x3ec>)
 8002c72:	f011 faf1 	bl	8014258 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002c76:	4bf5      	ldr	r3, [pc, #980]	; (800304c <HAL_UART_RxCpltCallback+0x3e8>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2bef      	cmp	r3, #239	; 0xef
 8002c80:	f200 843e 	bhi.w	8003500 <HAL_UART_RxCpltCallback+0x89c>
 8002c84:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <HAL_UART_RxCpltCallback+0x28>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08003069 	.word	0x08003069
 8002c90:	08003099 	.word	0x08003099
 8002c94:	08003109 	.word	0x08003109
 8002c98:	08003143 	.word	0x08003143
 8002c9c:	0800317b 	.word	0x0800317b
 8002ca0:	080031b5 	.word	0x080031b5
 8002ca4:	080031f1 	.word	0x080031f1
 8002ca8:	0800322d 	.word	0x0800322d
 8002cac:	08003267 	.word	0x08003267
 8002cb0:	0800329b 	.word	0x0800329b
 8002cb4:	080032cf 	.word	0x080032cf
 8002cb8:	08003301 	.word	0x08003301
 8002cbc:	0800332b 	.word	0x0800332b
 8002cc0:	08003407 	.word	0x08003407
 8002cc4:	0800346f 	.word	0x0800346f
 8002cc8:	08003497 	.word	0x08003497
 8002ccc:	08003055 	.word	0x08003055
 8002cd0:	0800307d 	.word	0x0800307d
 8002cd4:	080030eb 	.word	0x080030eb
 8002cd8:	08003127 	.word	0x08003127
 8002cdc:	0800315f 	.word	0x0800315f
 8002ce0:	08003197 	.word	0x08003197
 8002ce4:	080031d3 	.word	0x080031d3
 8002ce8:	0800320f 	.word	0x0800320f
 8002cec:	0800324b 	.word	0x0800324b
 8002cf0:	08003283 	.word	0x08003283
 8002cf4:	080032ab 	.word	0x080032ab
 8002cf8:	080032e5 	.word	0x080032e5
 8002cfc:	08003311 	.word	0x08003311
 8002d00:	080033c5 	.word	0x080033c5
 8002d04:	08003447 	.word	0x08003447
 8002d08:	08003501 	.word	0x08003501
 8002d0c:	08003501 	.word	0x08003501
 8002d10:	08003501 	.word	0x08003501
 8002d14:	08003501 	.word	0x08003501
 8002d18:	08003501 	.word	0x08003501
 8002d1c:	08003501 	.word	0x08003501
 8002d20:	08003501 	.word	0x08003501
 8002d24:	08003501 	.word	0x08003501
 8002d28:	08003501 	.word	0x08003501
 8002d2c:	08003501 	.word	0x08003501
 8002d30:	08003501 	.word	0x08003501
 8002d34:	08003501 	.word	0x08003501
 8002d38:	08003501 	.word	0x08003501
 8002d3c:	08003501 	.word	0x08003501
 8002d40:	08003501 	.word	0x08003501
 8002d44:	08003501 	.word	0x08003501
 8002d48:	08003501 	.word	0x08003501
 8002d4c:	08003501 	.word	0x08003501
 8002d50:	08003501 	.word	0x08003501
 8002d54:	08003501 	.word	0x08003501
 8002d58:	08003501 	.word	0x08003501
 8002d5c:	08003501 	.word	0x08003501
 8002d60:	08003501 	.word	0x08003501
 8002d64:	08003501 	.word	0x08003501
 8002d68:	08003501 	.word	0x08003501
 8002d6c:	08003501 	.word	0x08003501
 8002d70:	08003501 	.word	0x08003501
 8002d74:	08003501 	.word	0x08003501
 8002d78:	08003501 	.word	0x08003501
 8002d7c:	08003501 	.word	0x08003501
 8002d80:	08003501 	.word	0x08003501
 8002d84:	08003501 	.word	0x08003501
 8002d88:	08003501 	.word	0x08003501
 8002d8c:	08003501 	.word	0x08003501
 8002d90:	08003501 	.word	0x08003501
 8002d94:	08003501 	.word	0x08003501
 8002d98:	08003501 	.word	0x08003501
 8002d9c:	08003501 	.word	0x08003501
 8002da0:	08003501 	.word	0x08003501
 8002da4:	08003501 	.word	0x08003501
 8002da8:	08003501 	.word	0x08003501
 8002dac:	08003501 	.word	0x08003501
 8002db0:	08003501 	.word	0x08003501
 8002db4:	08003501 	.word	0x08003501
 8002db8:	08003501 	.word	0x08003501
 8002dbc:	08003501 	.word	0x08003501
 8002dc0:	08003501 	.word	0x08003501
 8002dc4:	08003501 	.word	0x08003501
 8002dc8:	08003501 	.word	0x08003501
 8002dcc:	08003501 	.word	0x08003501
 8002dd0:	08003501 	.word	0x08003501
 8002dd4:	08003501 	.word	0x08003501
 8002dd8:	08003501 	.word	0x08003501
 8002ddc:	08003501 	.word	0x08003501
 8002de0:	08003501 	.word	0x08003501
 8002de4:	08003501 	.word	0x08003501
 8002de8:	08003501 	.word	0x08003501
 8002dec:	08003501 	.word	0x08003501
 8002df0:	08003501 	.word	0x08003501
 8002df4:	08003501 	.word	0x08003501
 8002df8:	08003501 	.word	0x08003501
 8002dfc:	08003501 	.word	0x08003501
 8002e00:	08003501 	.word	0x08003501
 8002e04:	08003501 	.word	0x08003501
 8002e08:	08003501 	.word	0x08003501
 8002e0c:	08003501 	.word	0x08003501
 8002e10:	08003501 	.word	0x08003501
 8002e14:	08003501 	.word	0x08003501
 8002e18:	08003501 	.word	0x08003501
 8002e1c:	08003501 	.word	0x08003501
 8002e20:	08003501 	.word	0x08003501
 8002e24:	08003501 	.word	0x08003501
 8002e28:	08003501 	.word	0x08003501
 8002e2c:	08003501 	.word	0x08003501
 8002e30:	08003501 	.word	0x08003501
 8002e34:	08003501 	.word	0x08003501
 8002e38:	08003501 	.word	0x08003501
 8002e3c:	08003501 	.word	0x08003501
 8002e40:	08003501 	.word	0x08003501
 8002e44:	08003501 	.word	0x08003501
 8002e48:	08003501 	.word	0x08003501
 8002e4c:	08003501 	.word	0x08003501
 8002e50:	08003501 	.word	0x08003501
 8002e54:	08003501 	.word	0x08003501
 8002e58:	08003501 	.word	0x08003501
 8002e5c:	08003501 	.word	0x08003501
 8002e60:	08003501 	.word	0x08003501
 8002e64:	08003501 	.word	0x08003501
 8002e68:	08003501 	.word	0x08003501
 8002e6c:	08003501 	.word	0x08003501
 8002e70:	08003501 	.word	0x08003501
 8002e74:	08003501 	.word	0x08003501
 8002e78:	08003501 	.word	0x08003501
 8002e7c:	08003501 	.word	0x08003501
 8002e80:	08003501 	.word	0x08003501
 8002e84:	08003501 	.word	0x08003501
 8002e88:	08003501 	.word	0x08003501
 8002e8c:	08003501 	.word	0x08003501
 8002e90:	08003501 	.word	0x08003501
 8002e94:	08003501 	.word	0x08003501
 8002e98:	08003501 	.word	0x08003501
 8002e9c:	08003501 	.word	0x08003501
 8002ea0:	08003501 	.word	0x08003501
 8002ea4:	08003501 	.word	0x08003501
 8002ea8:	08003501 	.word	0x08003501
 8002eac:	08003501 	.word	0x08003501
 8002eb0:	08003501 	.word	0x08003501
 8002eb4:	08003501 	.word	0x08003501
 8002eb8:	08003501 	.word	0x08003501
 8002ebc:	08003501 	.word	0x08003501
 8002ec0:	08003501 	.word	0x08003501
 8002ec4:	08003501 	.word	0x08003501
 8002ec8:	08003501 	.word	0x08003501
 8002ecc:	08003501 	.word	0x08003501
 8002ed0:	08003501 	.word	0x08003501
 8002ed4:	08003501 	.word	0x08003501
 8002ed8:	08003501 	.word	0x08003501
 8002edc:	08003501 	.word	0x08003501
 8002ee0:	08003501 	.word	0x08003501
 8002ee4:	08003501 	.word	0x08003501
 8002ee8:	08003501 	.word	0x08003501
 8002eec:	08003501 	.word	0x08003501
 8002ef0:	08003501 	.word	0x08003501
 8002ef4:	08003501 	.word	0x08003501
 8002ef8:	08003501 	.word	0x08003501
 8002efc:	08003501 	.word	0x08003501
 8002f00:	08003501 	.word	0x08003501
 8002f04:	08003501 	.word	0x08003501
 8002f08:	08003501 	.word	0x08003501
 8002f0c:	08003501 	.word	0x08003501
 8002f10:	08003501 	.word	0x08003501
 8002f14:	08003501 	.word	0x08003501
 8002f18:	08003501 	.word	0x08003501
 8002f1c:	08003501 	.word	0x08003501
 8002f20:	08003501 	.word	0x08003501
 8002f24:	08003501 	.word	0x08003501
 8002f28:	08003501 	.word	0x08003501
 8002f2c:	08003501 	.word	0x08003501
 8002f30:	08003501 	.word	0x08003501
 8002f34:	08003501 	.word	0x08003501
 8002f38:	08003501 	.word	0x08003501
 8002f3c:	08003501 	.word	0x08003501
 8002f40:	08003501 	.word	0x08003501
 8002f44:	08003501 	.word	0x08003501
 8002f48:	080034d3 	.word	0x080034d3
 8002f4c:	08003501 	.word	0x08003501
 8002f50:	08003501 	.word	0x08003501
 8002f54:	08003501 	.word	0x08003501
 8002f58:	08003501 	.word	0x08003501
 8002f5c:	08003501 	.word	0x08003501
 8002f60:	08003501 	.word	0x08003501
 8002f64:	08003501 	.word	0x08003501
 8002f68:	08003501 	.word	0x08003501
 8002f6c:	08003501 	.word	0x08003501
 8002f70:	08003501 	.word	0x08003501
 8002f74:	08003501 	.word	0x08003501
 8002f78:	08003501 	.word	0x08003501
 8002f7c:	08003501 	.word	0x08003501
 8002f80:	08003501 	.word	0x08003501
 8002f84:	08003501 	.word	0x08003501
 8002f88:	080034d9 	.word	0x080034d9
 8002f8c:	08003501 	.word	0x08003501
 8002f90:	08003501 	.word	0x08003501
 8002f94:	08003501 	.word	0x08003501
 8002f98:	08003501 	.word	0x08003501
 8002f9c:	08003501 	.word	0x08003501
 8002fa0:	08003501 	.word	0x08003501
 8002fa4:	08003501 	.word	0x08003501
 8002fa8:	08003501 	.word	0x08003501
 8002fac:	08003501 	.word	0x08003501
 8002fb0:	08003501 	.word	0x08003501
 8002fb4:	08003501 	.word	0x08003501
 8002fb8:	08003501 	.word	0x08003501
 8002fbc:	08003501 	.word	0x08003501
 8002fc0:	08003501 	.word	0x08003501
 8002fc4:	08003501 	.word	0x08003501
 8002fc8:	080034e7 	.word	0x080034e7
 8002fcc:	080034bf 	.word	0x080034bf
 8002fd0:	08003501 	.word	0x08003501
 8002fd4:	08003501 	.word	0x08003501
 8002fd8:	08003501 	.word	0x08003501
 8002fdc:	08003501 	.word	0x08003501
 8002fe0:	08003501 	.word	0x08003501
 8002fe4:	08003501 	.word	0x08003501
 8002fe8:	08003501 	.word	0x08003501
 8002fec:	08003501 	.word	0x08003501
 8002ff0:	08003501 	.word	0x08003501
 8002ff4:	08003501 	.word	0x08003501
 8002ff8:	08003501 	.word	0x08003501
 8002ffc:	08003501 	.word	0x08003501
 8003000:	08003501 	.word	0x08003501
 8003004:	08003501 	.word	0x08003501
 8003008:	080034f5 	.word	0x080034f5
 800300c:	080034ab 	.word	0x080034ab
 8003010:	08003501 	.word	0x08003501
 8003014:	08003501 	.word	0x08003501
 8003018:	08003501 	.word	0x08003501
 800301c:	08003501 	.word	0x08003501
 8003020:	08003501 	.word	0x08003501
 8003024:	08003501 	.word	0x08003501
 8003028:	08003501 	.word	0x08003501
 800302c:	08003501 	.word	0x08003501
 8003030:	08003501 	.word	0x08003501
 8003034:	08003501 	.word	0x08003501
 8003038:	08003501 	.word	0x08003501
 800303c:	08003501 	.word	0x08003501
 8003040:	08003501 	.word	0x08003501
 8003044:	08003501 	.word	0x08003501
 8003048:	080034fb 	.word	0x080034fb
 800304c:	24001a9c 	.word	0x24001a9c
 8003050:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 8003054:	48b8      	ldr	r0, [pc, #736]	; (8003338 <HAL_UART_RxCpltCallback+0x6d4>)
 8003056:	f017 f847 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800305a:	4bb8      	ldr	r3, [pc, #736]	; (800333c <HAL_UART_RxCpltCallback+0x6d8>)
 800305c:	2104      	movs	r1, #4
 800305e:	2201      	movs	r2, #1
 8003060:	4618      	mov	r0, r3
 8003062:	f008 f95f 	bl	800b324 <HAL_GPIO_WritePin>
		break;
 8003066:	e256      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8003068:	48b5      	ldr	r0, [pc, #724]	; (8003340 <HAL_UART_RxCpltCallback+0x6dc>)
 800306a:	f017 f83d 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800306e:	4bb3      	ldr	r3, [pc, #716]	; (800333c <HAL_UART_RxCpltCallback+0x6d8>)
 8003070:	2104      	movs	r1, #4
 8003072:	2200      	movs	r2, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f008 f955 	bl	800b324 <HAL_GPIO_WritePin>
		break;
 800307a:	e24c      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 800307c:	48b1      	ldr	r0, [pc, #708]	; (8003344 <HAL_UART_RxCpltCallback+0x6e0>)
 800307e:	f017 f833 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8003082:	4bae      	ldr	r3, [pc, #696]	; (800333c <HAL_UART_RxCpltCallback+0x6d8>)
 8003084:	2120      	movs	r1, #32
 8003086:	2201      	movs	r2, #1
 8003088:	4618      	mov	r0, r3
 800308a:	f008 f94b 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 800308e:	2101      	movs	r1, #1
 8003090:	2008      	movs	r0, #8
 8003092:	f002 fb39 	bl	8005708 <set_rail_monitor_enable>
		break;
 8003096:	e23e      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8003098:	48ab      	ldr	r0, [pc, #684]	; (8003348 <HAL_UART_RxCpltCallback+0x6e4>)
 800309a:	f017 f825 	bl	801a0e8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 800309e:	2308      	movs	r3, #8
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	e00f      	b.n	80030c4 <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80030a4:	4aa9      	ldr	r2, [pc, #676]	; (800334c <HAL_UART_RxCpltCallback+0x6e8>)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80030ac:	4aa7      	ldr	r2, [pc, #668]	; (800334c <HAL_UART_RxCpltCallback+0x6e8>)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	889b      	ldrh	r3, [r3, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	4619      	mov	r1, r3
 80030ba:	f008 f933 	bl	800b324 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	dcec      	bgt.n	80030a4 <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80030ca:	2310      	movs	r3, #16
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	e008      	b.n	80030e2 <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 fb16 	bl	8005708 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	3b01      	subs	r3, #1
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b07      	cmp	r3, #7
 80030e6:	dcf3      	bgt.n	80030d0 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 80030e8:	e215      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80030ea:	4899      	ldr	r0, [pc, #612]	; (8003350 <HAL_UART_RxCpltCallback+0x6ec>)
 80030ec:	f016 fffc 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80030f0:	4b98      	ldr	r3, [pc, #608]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 80030f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030f6:	2201      	movs	r2, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f008 f913 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80030fe:	2101      	movs	r1, #1
 8003100:	2009      	movs	r0, #9
 8003102:	f002 fb01 	bl	8005708 <set_rail_monitor_enable>

		break;
 8003106:	e206      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003108:	4893      	ldr	r0, [pc, #588]	; (8003358 <HAL_UART_RxCpltCallback+0x6f4>)
 800310a:	f016 ffed 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 800310e:	4b91      	ldr	r3, [pc, #580]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 8003110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003114:	2200      	movs	r2, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f008 f904 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 800311c:	2100      	movs	r1, #0
 800311e:	2009      	movs	r0, #9
 8003120:	f002 faf2 	bl	8005708 <set_rail_monitor_enable>
		break;
 8003124:	e1f7      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8003126:	488d      	ldr	r0, [pc, #564]	; (800335c <HAL_UART_RxCpltCallback+0x6f8>)
 8003128:	f016 ffde 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 800312c:	4b89      	ldr	r3, [pc, #548]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 800312e:	2180      	movs	r1, #128	; 0x80
 8003130:	2201      	movs	r2, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f008 f8f6 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8003138:	2101      	movs	r1, #1
 800313a:	200a      	movs	r0, #10
 800313c:	f002 fae4 	bl	8005708 <set_rail_monitor_enable>

		break;
 8003140:	e1e9      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8003142:	4887      	ldr	r0, [pc, #540]	; (8003360 <HAL_UART_RxCpltCallback+0x6fc>)
 8003144:	f016 ffd0 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8003148:	4b82      	ldr	r3, [pc, #520]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 800314a:	2180      	movs	r1, #128	; 0x80
 800314c:	2200      	movs	r2, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f008 f8e8 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8003154:	2100      	movs	r1, #0
 8003156:	200a      	movs	r0, #10
 8003158:	f002 fad6 	bl	8005708 <set_rail_monitor_enable>
		break;
 800315c:	e1db      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 800315e:	4881      	ldr	r0, [pc, #516]	; (8003364 <HAL_UART_RxCpltCallback+0x700>)
 8003160:	f016 ffc2 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8003164:	4b7b      	ldr	r3, [pc, #492]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 8003166:	2140      	movs	r1, #64	; 0x40
 8003168:	2201      	movs	r2, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f008 f8da 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8003170:	2101      	movs	r1, #1
 8003172:	200b      	movs	r0, #11
 8003174:	f002 fac8 	bl	8005708 <set_rail_monitor_enable>

		break;
 8003178:	e1cd      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 800317a:	487b      	ldr	r0, [pc, #492]	; (8003368 <HAL_UART_RxCpltCallback+0x704>)
 800317c:	f016 ffb4 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8003180:	4b74      	ldr	r3, [pc, #464]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 8003182:	2140      	movs	r1, #64	; 0x40
 8003184:	2200      	movs	r2, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f008 f8cc 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 800318c:	2100      	movs	r1, #0
 800318e:	200b      	movs	r0, #11
 8003190:	f002 faba 	bl	8005708 <set_rail_monitor_enable>
		break;
 8003194:	e1bf      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8003196:	4875      	ldr	r0, [pc, #468]	; (800336c <HAL_UART_RxCpltCallback+0x708>)
 8003198:	f016 ffa6 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 800319c:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 800319e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031a2:	2201      	movs	r2, #1
 80031a4:	4618      	mov	r0, r3
 80031a6:	f008 f8bd 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80031aa:	2101      	movs	r1, #1
 80031ac:	200c      	movs	r0, #12
 80031ae:	f002 faab 	bl	8005708 <set_rail_monitor_enable>

		break;
 80031b2:	e1b0      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80031b4:	486e      	ldr	r0, [pc, #440]	; (8003370 <HAL_UART_RxCpltCallback+0x70c>)
 80031b6:	f016 ff97 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80031ba:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 80031bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031c0:	2200      	movs	r2, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f008 f8ae 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 80031c8:	2100      	movs	r1, #0
 80031ca:	200c      	movs	r0, #12
 80031cc:	f002 fa9c 	bl	8005708 <set_rail_monitor_enable>
		break;
 80031d0:	e1a1      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80031d2:	4868      	ldr	r0, [pc, #416]	; (8003374 <HAL_UART_RxCpltCallback+0x710>)
 80031d4:	f016 ff88 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80031d8:	4b5e      	ldr	r3, [pc, #376]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 80031da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031de:	2201      	movs	r2, #1
 80031e0:	4618      	mov	r0, r3
 80031e2:	f008 f89f 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80031e6:	2101      	movs	r1, #1
 80031e8:	200d      	movs	r0, #13
 80031ea:	f002 fa8d 	bl	8005708 <set_rail_monitor_enable>

		break;
 80031ee:	e192      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80031f0:	4861      	ldr	r0, [pc, #388]	; (8003378 <HAL_UART_RxCpltCallback+0x714>)
 80031f2:	f016 ff79 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80031f6:	4b57      	ldr	r3, [pc, #348]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 80031f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031fc:	2200      	movs	r2, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f008 f890 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8003204:	2100      	movs	r1, #0
 8003206:	200d      	movs	r0, #13
 8003208:	f002 fa7e 	bl	8005708 <set_rail_monitor_enable>
		break;
 800320c:	e183      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 800320e:	485b      	ldr	r0, [pc, #364]	; (800337c <HAL_UART_RxCpltCallback+0x718>)
 8003210:	f016 ff6a 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 8003216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800321a:	2201      	movs	r2, #1
 800321c:	4618      	mov	r0, r3
 800321e:	f008 f881 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8003222:	2101      	movs	r1, #1
 8003224:	200f      	movs	r0, #15
 8003226:	f002 fa6f 	bl	8005708 <set_rail_monitor_enable>

		break;
 800322a:	e174      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 800322c:	4854      	ldr	r0, [pc, #336]	; (8003380 <HAL_UART_RxCpltCallback+0x71c>)
 800322e:	f016 ff5b 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8003232:	4b48      	ldr	r3, [pc, #288]	; (8003354 <HAL_UART_RxCpltCallback+0x6f0>)
 8003234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003238:	2200      	movs	r2, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f008 f872 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8003240:	2100      	movs	r1, #0
 8003242:	200f      	movs	r0, #15
 8003244:	f002 fa60 	bl	8005708 <set_rail_monitor_enable>
		break;
 8003248:	e165      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 800324a:	484e      	ldr	r0, [pc, #312]	; (8003384 <HAL_UART_RxCpltCallback+0x720>)
 800324c:	f016 ff4c 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8003250:	4b3a      	ldr	r3, [pc, #232]	; (800333c <HAL_UART_RxCpltCallback+0x6d8>)
 8003252:	2140      	movs	r1, #64	; 0x40
 8003254:	2201      	movs	r2, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f008 f864 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 800325c:	2101      	movs	r1, #1
 800325e:	2010      	movs	r0, #16
 8003260:	f002 fa52 	bl	8005708 <set_rail_monitor_enable>

		break;
 8003264:	e157      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8003266:	4848      	ldr	r0, [pc, #288]	; (8003388 <HAL_UART_RxCpltCallback+0x724>)
 8003268:	f016 ff3e 	bl	801a0e8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 800326c:	4b33      	ldr	r3, [pc, #204]	; (800333c <HAL_UART_RxCpltCallback+0x6d8>)
 800326e:	2140      	movs	r1, #64	; 0x40
 8003270:	2200      	movs	r2, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f008 f856 	bl	800b324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8003278:	2100      	movs	r1, #0
 800327a:	2010      	movs	r0, #16
 800327c:	f002 fa44 	bl	8005708 <set_rail_monitor_enable>
		break;
 8003280:	e149      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8003282:	4842      	ldr	r0, [pc, #264]	; (800338c <HAL_UART_RxCpltCallback+0x728>)
 8003284:	f016 ff30 	bl	801a0e8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8003288:	2300      	movs	r3, #0
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	2320      	movs	r3, #32
 800328e:	4a40      	ldr	r2, [pc, #256]	; (8003390 <HAL_UART_RxCpltCallback+0x72c>)
 8003290:	2100      	movs	r1, #0
 8003292:	4840      	ldr	r0, [pc, #256]	; (8003394 <HAL_UART_RxCpltCallback+0x730>)
 8003294:	f004 f9c2 	bl	800761c <HAL_DAC_Start_DMA>
		break;
 8003298:	e13d      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 800329a:	483f      	ldr	r0, [pc, #252]	; (8003398 <HAL_UART_RxCpltCallback+0x734>)
 800329c:	f016 ff24 	bl	801a0e8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80032a0:	2100      	movs	r1, #0
 80032a2:	483c      	ldr	r0, [pc, #240]	; (8003394 <HAL_UART_RxCpltCallback+0x730>)
 80032a4:	f004 fa7a 	bl	800779c <HAL_DAC_Stop_DMA>
		break;
 80032a8:	e135      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80032aa:	483c      	ldr	r0, [pc, #240]	; (800339c <HAL_UART_RxCpltCallback+0x738>)
 80032ac:	f016 ff1c 	bl	801a0e8 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80032b0:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_UART_RxCpltCallback+0x73c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2102      	movs	r1, #2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f013 fddc 	bl	8016e74 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80032bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032c0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_UART_RxCpltCallback+0x740>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]

		break;
 80032cc:	e123      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80032ce:	4836      	ldr	r0, [pc, #216]	; (80033a8 <HAL_UART_RxCpltCallback+0x744>)
 80032d0:	f016 ff0a 	bl	801a0e8 <puts>
		ERPA_ENABLED = 0;
 80032d4:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <HAL_UART_RxCpltCallback+0x740>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80032da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80032e2:	e118      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80032e4:	4831      	ldr	r0, [pc, #196]	; (80033ac <HAL_UART_RxCpltCallback+0x748>)
 80032e6:	f016 feff 	bl	801a0e8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80032ea:	2100      	movs	r1, #0
 80032ec:	4830      	ldr	r0, [pc, #192]	; (80033b0 <HAL_UART_RxCpltCallback+0x74c>)
 80032ee:	f00f fad3 	bl	8012898 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80032f2:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <HAL_UART_RxCpltCallback+0x73c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f013 fdbb 	bl	8016e74 <osEventFlagsSet>
		break;
 80032fe:	e10a      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8003300:	482c      	ldr	r0, [pc, #176]	; (80033b4 <HAL_UART_RxCpltCallback+0x750>)
 8003302:	f016 fef1 	bl	801a0e8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8003306:	2100      	movs	r1, #0
 8003308:	4829      	ldr	r0, [pc, #164]	; (80033b0 <HAL_UART_RxCpltCallback+0x74c>)
 800330a:	f00f fc1f 	bl	8012b4c <HAL_TIM_OC_Stop_IT>
		break;
 800330e:	e102      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8003310:	4829      	ldr	r0, [pc, #164]	; (80033b8 <HAL_UART_RxCpltCallback+0x754>)
 8003312:	f016 fee9 	bl	801a0e8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8003316:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <HAL_UART_RxCpltCallback+0x73c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2104      	movs	r1, #4
 800331c:	4618      	mov	r0, r3
 800331e:	f013 fda9 	bl	8016e74 <osEventFlagsSet>
		HK_ENABLED = 1;
 8003322:	4b26      	ldr	r3, [pc, #152]	; (80033bc <HAL_UART_RxCpltCallback+0x758>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
		break;
 8003328:	e0f5      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 800332a:	4825      	ldr	r0, [pc, #148]	; (80033c0 <HAL_UART_RxCpltCallback+0x75c>)
 800332c:	f016 fedc 	bl	801a0e8 <puts>
		HK_ENABLED = 0;
 8003330:	4b22      	ldr	r3, [pc, #136]	; (80033bc <HAL_UART_RxCpltCallback+0x758>)
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]
		break;
 8003336:	e0ee      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
 8003338:	0801aab0 	.word	0x0801aab0
 800333c:	58020400 	.word	0x58020400
 8003340:	0801aab8 	.word	0x0801aab8
 8003344:	0801aac4 	.word	0x0801aac4
 8003348:	0801aad0 	.word	0x0801aad0
 800334c:	0801adcc 	.word	0x0801adcc
 8003350:	0801aadc 	.word	0x0801aadc
 8003354:	58020800 	.word	0x58020800
 8003358:	0801aae8 	.word	0x0801aae8
 800335c:	0801aaf8 	.word	0x0801aaf8
 8003360:	0801ab04 	.word	0x0801ab04
 8003364:	0801ab10 	.word	0x0801ab10
 8003368:	0801ab1c 	.word	0x0801ab1c
 800336c:	0801ab2c 	.word	0x0801ab2c
 8003370:	0801ab38 	.word	0x0801ab38
 8003374:	0801ab44 	.word	0x0801ab44
 8003378:	0801ab50 	.word	0x0801ab50
 800337c:	0801ab5c 	.word	0x0801ab5c
 8003380:	0801ab6c 	.word	0x0801ab6c
 8003384:	0801ab7c 	.word	0x0801ab7c
 8003388:	0801ab88 	.word	0x0801ab88
 800338c:	0801ab98 	.word	0x0801ab98
 8003390:	2400003c 	.word	0x2400003c
 8003394:	24000314 	.word	0x24000314
 8003398:	0801aba8 	.word	0x0801aba8
 800339c:	0801abb8 	.word	0x0801abb8
 80033a0:	24001a90 	.word	0x24001a90
 80033a4:	24001add 	.word	0x24001add
 80033a8:	0801abc0 	.word	0x0801abc0
 80033ac:	0801abcc 	.word	0x0801abcc
 80033b0:	24001da4 	.word	0x24001da4
 80033b4:	0801abd4 	.word	0x0801abd4
 80033b8:	0801abdc 	.word	0x0801abdc
 80033bc:	24001adc 	.word	0x24001adc
 80033c0:	0801abe4 	.word	0x0801abe4
	}
	case 0x1D: {
		printf("Step Up\n");
 80033c4:	4856      	ldr	r0, [pc, #344]	; (8003520 <HAL_UART_RxCpltCallback+0x8bc>)
 80033c6:	f016 fe8f 	bl	801a0e8 <puts>
		if (step < 14) {
 80033ca:	4b56      	ldr	r3, [pc, #344]	; (8003524 <HAL_UART_RxCpltCallback+0x8c0>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b0d      	cmp	r3, #13
 80033d2:	f200 8099 	bhi.w	8003508 <HAL_UART_RxCpltCallback+0x8a4>
			step += 2;
 80033d6:	4b53      	ldr	r3, [pc, #332]	; (8003524 <HAL_UART_RxCpltCallback+0x8c0>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	3302      	adds	r3, #2
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	4b50      	ldr	r3, [pc, #320]	; (8003524 <HAL_UART_RxCpltCallback+0x8c0>)
 80033e2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80033e4:	4b4f      	ldr	r3, [pc, #316]	; (8003524 <HAL_UART_RxCpltCallback+0x8c0>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b4e      	ldr	r3, [pc, #312]	; (8003528 <HAL_UART_RxCpltCallback+0x8c4>)
 80033ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2100      	movs	r1, #0
 80033f6:	484d      	ldr	r0, [pc, #308]	; (800352c <HAL_UART_RxCpltCallback+0x8c8>)
 80033f8:	f004 fa73 	bl	80078e2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80033fc:	2100      	movs	r1, #0
 80033fe:	484b      	ldr	r0, [pc, #300]	; (800352c <HAL_UART_RxCpltCallback+0x8c8>)
 8003400:	f004 f8b4 	bl	800756c <HAL_DAC_Start>
		}
		break;
 8003404:	e080      	b.n	8003508 <HAL_UART_RxCpltCallback+0x8a4>
	}
	case 0x0D: {
		printf("Step Down\n");
 8003406:	484a      	ldr	r0, [pc, #296]	; (8003530 <HAL_UART_RxCpltCallback+0x8cc>)
 8003408:	f016 fe6e 	bl	801a0e8 <puts>
		if (step > 1) {
 800340c:	4b45      	ldr	r3, [pc, #276]	; (8003524 <HAL_UART_RxCpltCallback+0x8c0>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d97a      	bls.n	800350c <HAL_UART_RxCpltCallback+0x8a8>
			step -= 2;
 8003416:	4b43      	ldr	r3, [pc, #268]	; (8003524 <HAL_UART_RxCpltCallback+0x8c0>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	3b02      	subs	r3, #2
 800341e:	b2da      	uxtb	r2, r3
 8003420:	4b40      	ldr	r3, [pc, #256]	; (8003524 <HAL_UART_RxCpltCallback+0x8c0>)
 8003422:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003424:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <HAL_UART_RxCpltCallback+0x8c0>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	4b3e      	ldr	r3, [pc, #248]	; (8003528 <HAL_UART_RxCpltCallback+0x8c4>)
 800342e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003432:	2200      	movs	r2, #0
 8003434:	2100      	movs	r1, #0
 8003436:	483d      	ldr	r0, [pc, #244]	; (800352c <HAL_UART_RxCpltCallback+0x8c8>)
 8003438:	f004 fa53 	bl	80078e2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800343c:	2100      	movs	r1, #0
 800343e:	483b      	ldr	r0, [pc, #236]	; (800352c <HAL_UART_RxCpltCallback+0x8c8>)
 8003440:	f004 f894 	bl	800756c <HAL_DAC_Start>
		}
		break;
 8003444:	e062      	b.n	800350c <HAL_UART_RxCpltCallback+0x8a8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8003446:	483b      	ldr	r0, [pc, #236]	; (8003534 <HAL_UART_RxCpltCallback+0x8d0>)
 8003448:	f016 fe4e 	bl	801a0e8 <puts>
		if (cadence <= 50000) {
 800344c:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <HAL_UART_RxCpltCallback+0x8d4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003454:	4293      	cmp	r3, r2
 8003456:	d85b      	bhi.n	8003510 <HAL_UART_RxCpltCallback+0x8ac>
			cadence *= 2;
 8003458:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HAL_UART_RxCpltCallback+0x8d4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4a36      	ldr	r2, [pc, #216]	; (8003538 <HAL_UART_RxCpltCallback+0x8d4>)
 8003460:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003466:	4b34      	ldr	r3, [pc, #208]	; (8003538 <HAL_UART_RxCpltCallback+0x8d4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800346c:	e050      	b.n	8003510 <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0E: {
		printf("Factor Down\n");
 800346e:	4833      	ldr	r0, [pc, #204]	; (800353c <HAL_UART_RxCpltCallback+0x8d8>)
 8003470:	f016 fe3a 	bl	801a0e8 <puts>
		if (cadence >= 6250) {
 8003474:	4b30      	ldr	r3, [pc, #192]	; (8003538 <HAL_UART_RxCpltCallback+0x8d4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f641 0269 	movw	r2, #6249	; 0x1869
 800347c:	4293      	cmp	r3, r2
 800347e:	d949      	bls.n	8003514 <HAL_UART_RxCpltCallback+0x8b0>
			cadence /= 2;
 8003480:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_UART_RxCpltCallback+0x8d4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <HAL_UART_RxCpltCallback+0x8d4>)
 8003488:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800348a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <HAL_UART_RxCpltCallback+0x8d4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003494:	e03e      	b.n	8003514 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8003496:	482a      	ldr	r0, [pc, #168]	; (8003540 <HAL_UART_RxCpltCallback+0x8dc>)
 8003498:	f016 fe26 	bl	801a0e8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 800349c:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_UART_RxCpltCallback+0x8e0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2102      	movs	r1, #2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f013 fce6 	bl	8016e74 <osEventFlagsSet>
		break;
 80034a8:	e035      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80034aa:	4827      	ldr	r0, [pc, #156]	; (8003548 <HAL_UART_RxCpltCallback+0x8e4>)
 80034ac:	f016 fe1c 	bl	801a0e8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80034b0:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_UART_RxCpltCallback+0x8e0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2104      	movs	r1, #4
 80034b6:	4618      	mov	r0, r3
 80034b8:	f013 fcdc 	bl	8016e74 <osEventFlagsSet>
		break;
 80034bc:	e02b      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80034be:	4823      	ldr	r0, [pc, #140]	; (800354c <HAL_UART_RxCpltCallback+0x8e8>)
 80034c0:	f016 fe12 	bl	801a0e8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80034c4:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_UART_RxCpltCallback+0x8e0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2108      	movs	r1, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f013 fcd2 	bl	8016e74 <osEventFlagsSet>
		break;
 80034d0:	e021      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xAF: {
		sync();
 80034d2:	f000 f971 	bl	80037b8 <sync>
		break;
 80034d6:	e01e      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_UART_RxCpltCallback+0x8ec>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f013 fcc8 	bl	8016e74 <osEventFlagsSet>
		break;
 80034e4:	e017      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <HAL_UART_RxCpltCallback+0x8ec>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2102      	movs	r1, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f013 fcc1 	bl	8016e74 <osEventFlagsSet>
		break;
 80034f2:	e010      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xDF: {
		reset_error_counters();
 80034f4:	f7fe fd9e 	bl	8002034 <reset_error_counters>
		break;
 80034f8:	e00d      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xEF: {
		send_previous_error_packet();
 80034fa:	f7fe ff4b 	bl	8002394 <send_previous_error_packet>
		break;
 80034fe:	e00a      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
	}
	default: {
		printf("Unknown Command\n");
 8003500:	4814      	ldr	r0, [pc, #80]	; (8003554 <HAL_UART_RxCpltCallback+0x8f0>)
 8003502:	f016 fdf1 	bl	801a0e8 <puts>
		break;
 8003506:	e006      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003508:	bf00      	nop
 800350a:	e004      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
		break;
 800350c:	bf00      	nop
 800350e:	e002      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003514:	bf00      	nop
	}
	}
}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	0801abec 	.word	0x0801abec
 8003524:	24001ade 	.word	0x24001ade
 8003528:	2400003c 	.word	0x2400003c
 800352c:	24000314 	.word	0x24000314
 8003530:	0801abf4 	.word	0x0801abf4
 8003534:	0801ac00 	.word	0x0801ac00
 8003538:	240000bc 	.word	0x240000bc
 800353c:	0801ac0c 	.word	0x0801ac0c
 8003540:	0801ac18 	.word	0x0801ac18
 8003544:	24001a94 	.word	0x24001a94
 8003548:	0801ac28 	.word	0x0801ac28
 800354c:	0801ac34 	.word	0x0801ac34
 8003550:	24001a98 	.word	0x24001a98
 8003554:	0801ac40 	.word	0x0801ac40

08003558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800355e:	f002 fa71 	bl	8005a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003562:	f000 f82b 	bl	80035bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003566:	f000 f8ab 	bl	80036c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800356a:	f7ff f975 	bl	8002858 <MX_GPIO_Init>
  MX_DMA_Init();
 800356e:	f7fd fbbb 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003572:	f001 fe01 	bl	8005178 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003576:	f7ff f9e9 	bl	800294c <MX_I2C1_Init>
  MX_SPI2_Init();
 800357a:	f000 fe75 	bl	8004268 <MX_SPI2_Init>
  MX_TIM2_Init();
 800357e:	f001 fb61 	bl	8004c44 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003582:	f001 fab1 	bl	8004ae8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8003586:	f7fd f94f 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 800358a:	f7fd f82b 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 800358e:	f7fd faf7 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003592:	f000 fe11 	bl	80041b8 <MX_SPI1_Init>
  MX_RTC_Init();
 8003596:	f000 fbdd 	bl	8003d54 <MX_RTC_Init>
 // MX_IWDG1_Init();
  /* USER CODE BEGIN 2 */
  //get_reset_cause();
  system_setup();
 800359a:	f000 f8c1 	bl	8003720 <system_setup>

  ERROR_STRUCT error;
  error.category = EC_watchdog;
 800359e:	2304      	movs	r3, #4
 80035a0:	713b      	strb	r3, [r7, #4]
  error.detail = ED_UNDEFINED;
 80035a2:	231a      	movs	r3, #26
 80035a4:	717b      	strb	r3, [r7, #5]
  handle_error(error);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fe fcc2 	bl	8001f30 <handle_error>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80035ac:	f013 fb0c 	bl	8016bc8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80035b0:	f7fe ff26 	bl	8002400 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80035b4:	f013 fb2c 	bl	8016c10 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80035b8:	e7fe      	b.n	80035b8 <main+0x60>
	...

080035bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b09c      	sub	sp, #112	; 0x70
 80035c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c6:	224c      	movs	r2, #76	; 0x4c
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f016 fd16 	bl	8019ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	2220      	movs	r2, #32
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f016 fd10 	bl	8019ffc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80035dc:	2002      	movs	r0, #2
 80035de:	f00a fa6b 	bl	800dab8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80035e2:	2300      	movs	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <SystemClock_Config+0xfc>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	4a33      	ldr	r2, [pc, #204]	; (80036b8 <SystemClock_Config+0xfc>)
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035f2:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <SystemClock_Config+0xfc>)
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4b2f      	ldr	r3, [pc, #188]	; (80036bc <SystemClock_Config+0x100>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003604:	4a2d      	ldr	r2, [pc, #180]	; (80036bc <SystemClock_Config+0x100>)
 8003606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360a:	6193      	str	r3, [r2, #24]
 800360c:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <SystemClock_Config+0x100>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003618:	bf00      	nop
 800361a:	4b28      	ldr	r3, [pc, #160]	; (80036bc <SystemClock_Config+0x100>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003626:	d1f8      	bne.n	800361a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003628:	230b      	movs	r3, #11
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800362c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8003632:	2309      	movs	r3, #9
 8003634:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003636:	2340      	movs	r3, #64	; 0x40
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800363a:	2301      	movs	r3, #1
 800363c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800363e:	2302      	movs	r3, #2
 8003640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003642:	2302      	movs	r3, #2
 8003644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003646:	2304      	movs	r3, #4
 8003648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800364a:	2318      	movs	r3, #24
 800364c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800364e:	2302      	movs	r3, #2
 8003650:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003652:	2302      	movs	r3, #2
 8003654:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003656:	2302      	movs	r3, #2
 8003658:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800365a:	2308      	movs	r3, #8
 800365c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800365e:	2302      	movs	r3, #2
 8003660:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366a:	4618      	mov	r0, r3
 800366c:	f00a fa5e 	bl	800db2c <HAL_RCC_OscConfig>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003676:	f000 f957 	bl	8003928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800367a:	233f      	movs	r3, #63	; 0x3f
 800367c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800367e:	2303      	movs	r3, #3
 8003680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003686:	2300      	movs	r3, #0
 8003688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003696:	2300      	movs	r3, #0
 8003698:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	2101      	movs	r1, #1
 800369e:	4618      	mov	r0, r3
 80036a0:	f00a fe9e 	bl	800e3e0 <HAL_RCC_ClockConfig>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80036aa:	f000 f93d 	bl	8003928 <Error_Handler>
  }
}
 80036ae:	bf00      	nop
 80036b0:	3770      	adds	r7, #112	; 0x70
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	58000400 	.word	0x58000400
 80036bc:	58024800 	.word	0x58024800

080036c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b0b0      	sub	sp, #192	; 0xc0
 80036c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036c6:	463b      	mov	r3, r7
 80036c8:	22c0      	movs	r2, #192	; 0xc0
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f016 fc95 	bl	8019ffc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80036d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80036de:	2304      	movs	r3, #4
 80036e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80036e2:	2318      	movs	r3, #24
 80036e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80036e6:	2308      	movs	r3, #8
 80036e8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80036ea:	2302      	movs	r3, #2
 80036ec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80036ee:	2302      	movs	r3, #2
 80036f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80036f6:	2320      	movs	r3, #32
 80036f8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003704:	463b      	mov	r3, r7
 8003706:	4618      	mov	r0, r3
 8003708:	f00b fa38 	bl	800eb7c <HAL_RCCEx_PeriphCLKConfig>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8003712:	f000 f909 	bl	8003928 <Error_Handler>
  }
}
 8003716:	bf00      	nop
 8003718:	37c0      	adds	r7, #192	; 0xc0
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
	// 3 -- Init rail monitor
	// 4 -- Start timer 3
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts
  	error_counter_init();
 8003724:	f7fe fc12 	bl	8001f4c <error_counter_init>


	packet_event_flags = osEventFlagsNew(NULL);
 8003728:	2000      	movs	r0, #0
 800372a:	f013 fb64 	bl	8016df6 <osEventFlagsNew>
 800372e:	4603      	mov	r3, r0
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <system_setup+0x80>)
 8003732:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003734:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <system_setup+0x80>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d100      	bne.n	800373e <system_setup+0x1e>
        while (1);
 800373c:	e7fe      	b.n	800373c <system_setup+0x1c>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800373e:	2000      	movs	r0, #0
 8003740:	f013 fb59 	bl	8016df6 <osEventFlagsNew>
 8003744:	4603      	mov	r3, r0
 8003746:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <system_setup+0x84>)
 8003748:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <system_setup+0x84>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d100      	bne.n	8003754 <system_setup+0x34>
        while (1);
 8003752:	e7fe      	b.n	8003752 <system_setup+0x32>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003754:	2000      	movs	r0, #0
 8003756:	f013 fb4e 	bl	8016df6 <osEventFlagsNew>
 800375a:	4603      	mov	r3, r0
 800375c:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <system_setup+0x88>)
 800375e:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <system_setup+0x88>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d100      	bne.n	800376a <system_setup+0x4a>
        while (1);
 8003768:	e7fe      	b.n	8003768 <system_setup+0x48>
    }

    TIM2->CCR4 = 0;
 800376a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800376e:	2200      	movs	r2, #0
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8003772:	210c      	movs	r1, #12
 8003774:	480d      	ldr	r0, [pc, #52]	; (80037ac <system_setup+0x8c>)
 8003776:	f00f f88f 	bl	8012898 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 800377a:	f001 fe07 	bl	800538c <voltage_monitor_init>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d100      	bne.n	8003786 <system_setup+0x66>
		while (1);
 8003784:	e7fe      	b.n	8003784 <system_setup+0x64>
	}

	if (!init_adc_dma()) {
 8003786:	f000 fb77 	bl	8003e78 <init_adc_dma>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d100      	bne.n	8003792 <system_setup+0x72>
		while (1);
 8003790:	e7fe      	b.n	8003790 <system_setup+0x70>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003792:	2201      	movs	r2, #1
 8003794:	4906      	ldr	r1, [pc, #24]	; (80037b0 <system_setup+0x90>)
 8003796:	4807      	ldr	r0, [pc, #28]	; (80037b4 <system_setup+0x94>)
 8003798:	f010 fd5e 	bl	8014258 <HAL_UART_Receive_IT>

}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	24001a90 	.word	0x24001a90
 80037a4:	24001a94 	.word	0x24001a94
 80037a8:	24001a98 	.word	0x24001a98
 80037ac:	24001df0 	.word	0x24001df0
 80037b0:	24001a9c 	.word	0x24001a9c
 80037b4:	24001e3c 	.word	0x24001e3c

080037b8 <sync>:

void sync() {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
	send_ACK();
 80037be:	f000 f821 	bl	8003804 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80037c2:	480e      	ldr	r0, [pc, #56]	; (80037fc <sync+0x44>)
 80037c4:	f010 fd94 	bl	80142f0 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80037c8:	2364      	movs	r3, #100	; 0x64
 80037ca:	2209      	movs	r2, #9
 80037cc:	490c      	ldr	r1, [pc, #48]	; (8003800 <sync+0x48>)
 80037ce:	480b      	ldr	r0, [pc, #44]	; (80037fc <sync+0x44>)
 80037d0:	f010 fc7a 	bl	80140c8 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <sync+0x48>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	2bff      	cmp	r3, #255	; 0xff
 80037de:	d1f3      	bne.n	80037c8 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 80037e0:	4807      	ldr	r0, [pc, #28]	; (8003800 <sync+0x48>)
 80037e2:	f001 fc07 	bl	8004ff4 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80037e6:	2201      	movs	r2, #1
 80037e8:	4905      	ldr	r1, [pc, #20]	; (8003800 <sync+0x48>)
 80037ea:	4804      	ldr	r0, [pc, #16]	; (80037fc <sync+0x44>)
 80037ec:	f010 fd34 	bl	8014258 <HAL_UART_Receive_IT>
	send_error_counter_packet();
 80037f0:	f7fe fc94 	bl	800211c <send_error_counter_packet>
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	24001e3c 	.word	0x24001e3c
 8003800:	24001a9c 	.word	0x24001a9c

08003804 <send_ACK>:

void send_ACK() {
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <send_ACK+0x1c>)
 800380a:	22ff      	movs	r2, #255	; 0xff
 800380c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800380e:	2364      	movs	r3, #100	; 0x64
 8003810:	2201      	movs	r2, #1
 8003812:	4903      	ldr	r1, [pc, #12]	; (8003820 <send_ACK+0x1c>)
 8003814:	4803      	ldr	r0, [pc, #12]	; (8003824 <send_ACK+0x20>)
 8003816:	f010 fbc9 	bl	8013fac <HAL_UART_Transmit>
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	24001ae8 	.word	0x24001ae8
 8003824:	24001e3c 	.word	0x24001e3c

08003828 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <get_current_step+0xc0>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f640 72ff 	movw	r2, #4095	; 0xfff
 800383a:	4293      	cmp	r3, r2
 800383c:	d04a      	beq.n	80038d4 <get_current_step+0xac>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003844:	da48      	bge.n	80038d8 <get_current_step+0xb0>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f640 628b 	movw	r2, #3723	; 0xe8b
 800384c:	4293      	cmp	r3, r2
 800384e:	d03f      	beq.n	80038d0 <get_current_step+0xa8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003856:	4293      	cmp	r3, r2
 8003858:	dc3e      	bgt.n	80038d8 <get_current_step+0xb0>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003860:	4293      	cmp	r3, r2
 8003862:	d033      	beq.n	80038cc <get_current_step+0xa4>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800386a:	da35      	bge.n	80038d8 <get_current_step+0xb0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003872:	4293      	cmp	r3, r2
 8003874:	d028      	beq.n	80038c8 <get_current_step+0xa0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800387c:	4293      	cmp	r3, r2
 800387e:	dc2b      	bgt.n	80038d8 <get_current_step+0xb0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f240 7245 	movw	r2, #1861	; 0x745
 8003886:	4293      	cmp	r3, r2
 8003888:	d01c      	beq.n	80038c4 <get_current_step+0x9c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f240 7245 	movw	r2, #1861	; 0x745
 8003890:	4293      	cmp	r3, r2
 8003892:	dc21      	bgt.n	80038d8 <get_current_step+0xb0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800389a:	4293      	cmp	r3, r2
 800389c:	d010      	beq.n	80038c0 <get_current_step+0x98>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80038a4:	4293      	cmp	r3, r2
 80038a6:	dc17      	bgt.n	80038d8 <get_current_step+0xb0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <get_current_step+0x90>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80038b4:	d002      	beq.n	80038bc <get_current_step+0x94>
 80038b6:	e00f      	b.n	80038d8 <get_current_step+0xb0>
	case 0:
		return 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e00e      	b.n	80038da <get_current_step+0xb2>
	case 620:
		return 1;
 80038bc:	2301      	movs	r3, #1
 80038be:	e00c      	b.n	80038da <get_current_step+0xb2>
	case 1241:
		return 2;
 80038c0:	2302      	movs	r3, #2
 80038c2:	e00a      	b.n	80038da <get_current_step+0xb2>
	case 1861:
		return 3;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e008      	b.n	80038da <get_current_step+0xb2>
	case 2482:
		return 4;
 80038c8:	2304      	movs	r3, #4
 80038ca:	e006      	b.n	80038da <get_current_step+0xb2>
	case 3103:
		return 5;
 80038cc:	2305      	movs	r3, #5
 80038ce:	e004      	b.n	80038da <get_current_step+0xb2>
	case 3723:
		return 6;
 80038d0:	2306      	movs	r3, #6
 80038d2:	e002      	b.n	80038da <get_current_step+0xb2>
	case 4095:
		return 7;
 80038d4:	2307      	movs	r3, #7
 80038d6:	e000      	b.n	80038da <get_current_step+0xb2>
	default:
		return -1;
 80038d8:	23ff      	movs	r3, #255	; 0xff
	}
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40007400 	.word	0x40007400

080038ec <enter_stop>:

void enter_stop() {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	  send_ACK();
 80038f0:	f7ff ff88 	bl	8003804 <send_ACK>

	  vTaskSuspendAll();
 80038f4:	f014 fe16 	bl	8018524 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80038f8:	2101      	movs	r1, #1
 80038fa:	2001      	movs	r0, #1
 80038fc:	f00a f8a0 	bl	800da40 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003900:	f7ff f944 	bl	8002b8c <__NVIC_SystemReset>

08003904 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003916:	f002 f8d1 	bl	8005abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40001000 	.word	0x40001000

08003928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 800392e:	2302      	movs	r3, #2
 8003930:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8003932:	231a      	movs	r3, #26
 8003934:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe fafa 	bl	8001f30 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800394a:	bf00      	nop
 800394c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003950:	481c      	ldr	r0, [pc, #112]	; (80039c4 <create_pmt_packet+0x80>)
 8003952:	f007 fccf 	bl	800b2f4 <HAL_GPIO_ReadPin>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f7      	bne.n	800394c <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	4618      	mov	r0, r3
 8003960:	f001 faa8 	bl	8004eb4 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003964:	f107 0308 	add.w	r3, r7, #8
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fad9 	bl	8003f20 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 800396e:	23ff      	movs	r3, #255	; 0xff
 8003970:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003972:	23ff      	movs	r3, #255	; 0xff
 8003974:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <create_pmt_packet+0x84>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	b29b      	uxth	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003982:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <create_pmt_packet+0x84>)
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 800398a:	7a3b      	ldrb	r3, [r7, #8]
 800398c:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 800398e:	7a7b      	ldrb	r3, [r7, #9]
 8003990:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003992:	793b      	ldrb	r3, [r7, #4]
 8003994:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003996:	797b      	ldrb	r3, [r7, #5]
 8003998:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 800399a:	79bb      	ldrb	r3, [r7, #6]
 800399c:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 80039a2:	f107 010c 	add.w	r1, r7, #12
 80039a6:	2364      	movs	r3, #100	; 0x64
 80039a8:	220a      	movs	r2, #10
 80039aa:	4808      	ldr	r0, [pc, #32]	; (80039cc <create_pmt_packet+0x88>)
 80039ac:	f010 fafe 	bl	8013fac <HAL_UART_Transmit>

	pmt_seq++;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <create_pmt_packet+0x84>)
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <create_pmt_packet+0x84>)
 80039ba:	801a      	strh	r2, [r3, #0]
}
 80039bc:	bf00      	nop
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	58020000 	.word	0x58020000
 80039c8:	24001aea 	.word	0x24001aea
 80039cc:	24001e3c 	.word	0x24001e3c

080039d0 <create_erpa_packet>:


void create_erpa_packet() {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80039d6:	bf00      	nop
 80039d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039dc:	4828      	ldr	r0, [pc, #160]	; (8003a80 <create_erpa_packet+0xb0>)
 80039de:	f007 fc89 	bl	800b2f4 <HAL_GPIO_ReadPin>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f7      	bne.n	80039d8 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 80039e8:	23ff      	movs	r3, #255	; 0xff
 80039ea:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 80039ec:	1d3b      	adds	r3, r7, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fa60 	bl	8004eb4 <get_uptime>
	sweep_step = get_current_step();
 80039f4:	f7ff ff18 	bl	8003828 <get_current_step>
 80039f8:	4603      	mov	r3, r0
 80039fa:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 faad 	bl	8003f60 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003a06:	f107 0308 	add.w	r3, r7, #8
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fac8 	bl	8003fa0 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003a10:	23ee      	movs	r3, #238	; 0xee
 8003a12:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003a14:	23ee      	movs	r3, #238	; 0xee
 8003a16:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <create_erpa_packet+0xb4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <create_erpa_packet+0xb4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003a2c:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <create_erpa_packet+0xb4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003a34:	7ffb      	ldrb	r3, [r7, #31]
 8003a36:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003a38:	893b      	ldrh	r3, [r7, #8]
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003a42:	893b      	ldrh	r3, [r7, #8]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003a48:	7b3b      	ldrb	r3, [r7, #12]
 8003a4a:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003a4c:	7b7b      	ldrb	r3, [r7, #13]
 8003a4e:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003a50:	793b      	ldrb	r3, [r7, #4]
 8003a52:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003a54:	797b      	ldrb	r3, [r7, #5]
 8003a56:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003a58:	79bb      	ldrb	r3, [r7, #6]
 8003a5a:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003a60:	f107 0110 	add.w	r1, r7, #16
 8003a64:	2364      	movs	r3, #100	; 0x64
 8003a66:	220e      	movs	r2, #14
 8003a68:	4807      	ldr	r0, [pc, #28]	; (8003a88 <create_erpa_packet+0xb8>)
 8003a6a:	f010 fa9f 	bl	8013fac <HAL_UART_Transmit>

	erpa_seq++;
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <create_erpa_packet+0xb4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a03      	ldr	r2, [pc, #12]	; (8003a84 <create_erpa_packet+0xb4>)
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	58020400 	.word	0x58020400
 8003a84:	24001aec 	.word	0x24001aec
 8003a88:	24001e3c 	.word	0x24001e3c

08003a8c <create_hk_packet>:


void create_hk_packet() {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b094      	sub	sp, #80	; 0x50
 8003a90:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fa0d 	bl	8004eb4 <get_uptime>
	get_timestamp(timestamp);
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 fa58 	bl	8004f54 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8003aa4:	f001 feb2 	bl	800580c <get_rail_monitor>
 8003aa8:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003aaa:	23dd      	movs	r3, #221	; 0xdd
 8003aac:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003aae:	23dd      	movs	r3, #221	; 0xdd
 8003ab0:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003ab2:	4b9b      	ldr	r3, [pc, #620]	; (8003d20 <create_hk_packet+0x294>)
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003abe:	4b98      	ldr	r3, [pc, #608]	; (8003d20 <create_hk_packet+0x294>)
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	889b      	ldrh	r3, [r3, #4]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad4:	889b      	ldrh	r3, [r3, #4]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003adc:	330a      	adds	r3, #10
 8003ade:	889b      	ldrh	r3, [r3, #4]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aea:	330a      	adds	r3, #10
 8003aec:	889b      	ldrh	r3, [r3, #4]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af4:	3314      	adds	r3, #20
 8003af6:	889b      	ldrh	r3, [r3, #4]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b02:	3314      	adds	r3, #20
 8003b04:	889b      	ldrh	r3, [r3, #4]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0c:	331e      	adds	r3, #30
 8003b0e:	889b      	ldrh	r3, [r3, #4]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1a:	331e      	adds	r3, #30
 8003b1c:	889b      	ldrh	r3, [r3, #4]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b24:	3328      	adds	r3, #40	; 0x28
 8003b26:	889b      	ldrh	r3, [r3, #4]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b34:	3328      	adds	r3, #40	; 0x28
 8003b36:	889b      	ldrh	r3, [r3, #4]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b40:	3332      	adds	r3, #50	; 0x32
 8003b42:	889b      	ldrh	r3, [r3, #4]
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b50:	3332      	adds	r3, #50	; 0x32
 8003b52:	889b      	ldrh	r3, [r3, #4]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	333c      	adds	r3, #60	; 0x3c
 8003b5e:	889b      	ldrh	r3, [r3, #4]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6c:	333c      	adds	r3, #60	; 0x3c
 8003b6e:	889b      	ldrh	r3, [r3, #4]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b78:	3346      	adds	r3, #70	; 0x46
 8003b7a:	889b      	ldrh	r3, [r3, #4]
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b88:	3346      	adds	r3, #70	; 0x46
 8003b8a:	889b      	ldrh	r3, [r3, #4]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b94:	3350      	adds	r3, #80	; 0x50
 8003b96:	889b      	ldrh	r3, [r3, #4]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba4:	3350      	adds	r3, #80	; 0x50
 8003ba6:	889b      	ldrh	r3, [r3, #4]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb0:	335a      	adds	r3, #90	; 0x5a
 8003bb2:	889b      	ldrh	r3, [r3, #4]
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc0:	335a      	adds	r3, #90	; 0x5a
 8003bc2:	889b      	ldrh	r3, [r3, #4]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bcc:	3364      	adds	r3, #100	; 0x64
 8003bce:	889b      	ldrh	r3, [r3, #4]
 8003bd0:	0a1b      	lsrs	r3, r3, #8
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bdc:	3364      	adds	r3, #100	; 0x64
 8003bde:	889b      	ldrh	r3, [r3, #4]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be8:	336e      	adds	r3, #110	; 0x6e
 8003bea:	889b      	ldrh	r3, [r3, #4]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf8:	336e      	adds	r3, #110	; 0x6e
 8003bfa:	889b      	ldrh	r3, [r3, #4]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c04:	3378      	adds	r3, #120	; 0x78
 8003c06:	889b      	ldrh	r3, [r3, #4]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c14:	3378      	adds	r3, #120	; 0x78
 8003c16:	889b      	ldrh	r3, [r3, #4]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c20:	3382      	adds	r3, #130	; 0x82
 8003c22:	889b      	ldrh	r3, [r3, #4]
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c30:	3382      	adds	r3, #130	; 0x82
 8003c32:	889b      	ldrh	r3, [r3, #4]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3c:	338c      	adds	r3, #140	; 0x8c
 8003c3e:	889b      	ldrh	r3, [r3, #4]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4c:	338c      	adds	r3, #140	; 0x8c
 8003c4e:	889b      	ldrh	r3, [r3, #4]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c58:	3396      	adds	r3, #150	; 0x96
 8003c5a:	889b      	ldrh	r3, [r3, #4]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c68:	3396      	adds	r3, #150	; 0x96
 8003c6a:	889b      	ldrh	r3, [r3, #4]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c74:	33a0      	adds	r3, #160	; 0xa0
 8003c76:	889b      	ldrh	r3, [r3, #4]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c84:	33a0      	adds	r3, #160	; 0xa0
 8003c86:	889b      	ldrh	r3, [r3, #4]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c90:	33aa      	adds	r3, #170	; 0xaa
 8003c92:	889b      	ldrh	r3, [r3, #4]
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca0:	33aa      	adds	r3, #170	; 0xaa
 8003ca2:	889b      	ldrh	r3, [r3, #4]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8003caa:	7a3b      	ldrb	r3, [r7, #8]
 8003cac:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8003cb0:	7a7b      	ldrb	r3, [r7, #9]
 8003cb2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8003cb6:	7abb      	ldrb	r3, [r7, #10]
 8003cb8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8003cbc:	7afb      	ldrb	r3, [r7, #11]
 8003cbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8003cc2:	7b3b      	ldrb	r3, [r7, #12]
 8003cc4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8003cc8:	7b7b      	ldrb	r3, [r7, #13]
 8003cca:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003cce:	7bbb      	ldrb	r3, [r7, #14]
 8003cd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8003cda:	7c3b      	ldrb	r3, [r7, #16]
 8003cdc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003ce0:	7c7b      	ldrb	r3, [r7, #17]
 8003ce2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8003ce6:	793b      	ldrb	r3, [r7, #4]
 8003ce8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003cec:	797b      	ldrb	r3, [r7, #5]
 8003cee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003cf2:	79bb      	ldrb	r3, [r7, #6]
 8003cf4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003cfe:	f107 0114 	add.w	r1, r7, #20
 8003d02:	2364      	movs	r3, #100	; 0x64
 8003d04:	2236      	movs	r2, #54	; 0x36
 8003d06:	4807      	ldr	r0, [pc, #28]	; (8003d24 <create_hk_packet+0x298>)
 8003d08:	f010 f950 	bl	8013fac <HAL_UART_Transmit>

	hk_seq++;
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <create_hk_packet+0x294>)
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	4b02      	ldr	r3, [pc, #8]	; (8003d20 <create_hk_packet+0x294>)
 8003d16:	801a      	strh	r2, [r3, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	3750      	adds	r7, #80	; 0x50
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	24001af0 	.word	0x24001af0
 8003d24:	24001e3c 	.word	0x24001e3c

08003d28 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <reset_packet_sequence_numbers+0x20>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <reset_packet_sequence_numbers+0x24>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <reset_packet_sequence_numbers+0x28>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	801a      	strh	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	24001aea 	.word	0x24001aea
 8003d4c:	24001aec 	.word	0x24001aec
 8003d50:	24001af0 	.word	0x24001af0

08003d54 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003d5a:	1d3b      	adds	r3, r7, #4
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003d68:	2300      	movs	r3, #0
 8003d6a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d6c:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003d6e:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <MX_RTC_Init+0xb8>)
 8003d70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d72:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003d78:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003d7a:	2263      	movs	r2, #99	; 0x63
 8003d7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003d7e:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003d80:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d86:	4b20      	ldr	r3, [pc, #128]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d9e:	481a      	ldr	r0, [pc, #104]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003da0:	f00d fbea 	bl	8011578 <HAL_RTC_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003daa:	f7ff fdbd 	bl	8003928 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	480f      	ldr	r0, [pc, #60]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003dca:	f00d fc57 	bl	801167c <HAL_RTC_SetTime>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003dd4:	f7ff fda8 	bl	8003928 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003de0:	2301      	movs	r3, #1
 8003de2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003de8:	463b      	mov	r3, r7
 8003dea:	2201      	movs	r2, #1
 8003dec:	4619      	mov	r1, r3
 8003dee:	4806      	ldr	r0, [pc, #24]	; (8003e08 <MX_RTC_Init+0xb4>)
 8003df0:	f00d fd3e 	bl	8011870 <HAL_RTC_SetDate>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003dfa:	f7ff fd95 	bl	8003928 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	24001af4 	.word	0x24001af4
 8003e0c:	58004000 	.word	0x58004000

08003e10 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b0b2      	sub	sp, #200	; 0xc8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e18:	f107 0308 	add.w	r3, r7, #8
 8003e1c:	22c0      	movs	r2, #192	; 0xc0
 8003e1e:	2100      	movs	r1, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f016 f8eb 	bl	8019ffc <memset>
  if(rtcHandle->Instance==RTC)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <HAL_RTC_MspInit+0x5c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d118      	bne.n	8003e62 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_RTC_MspInit+0x60>)
 8003e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e42:	f107 0308 	add.w	r3, r7, #8
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00a fe98 	bl	800eb7c <HAL_RCCEx_PeriphCLKConfig>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003e52:	f7ff fd69 	bl	8003928 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_RTC_MspInit+0x64>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <HAL_RTC_MspInit+0x64>)
 8003e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e60:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003e62:	bf00      	nop
 8003e64:	37c8      	adds	r7, #200	; 0xc8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	58004000 	.word	0x58004000
 8003e70:	00019300 	.word	0x00019300
 8003e74:	58024400 	.word	0x58024400

08003e78 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003e82:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003e86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e8a:	481f      	ldr	r0, [pc, #124]	; (8003f08 <init_adc_dma+0x90>)
 8003e8c:	f003 f92a 	bl	80070e4 <HAL_ADCEx_Calibration_Start>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003e96:	f7ff fd47 	bl	8003928 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003e9a:	220b      	movs	r2, #11
 8003e9c:	491b      	ldr	r1, [pc, #108]	; (8003f0c <init_adc_dma+0x94>)
 8003e9e:	481a      	ldr	r0, [pc, #104]	; (8003f08 <init_adc_dma+0x90>)
 8003ea0:	f002 f9fe 	bl	80062a0 <HAL_ADC_Start_DMA>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003eaa:	f7ff fd3d 	bl	8003928 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003eae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003eb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eb6:	4816      	ldr	r0, [pc, #88]	; (8003f10 <init_adc_dma+0x98>)
 8003eb8:	f003 f914 	bl	80070e4 <HAL_ADCEx_Calibration_Start>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003ec2:	f7ff fd31 	bl	8003928 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	4912      	ldr	r1, [pc, #72]	; (8003f14 <init_adc_dma+0x9c>)
 8003eca:	4811      	ldr	r0, [pc, #68]	; (8003f10 <init_adc_dma+0x98>)
 8003ecc:	f002 f9e8 	bl	80062a0 <HAL_ADC_Start_DMA>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003ed6:	f7ff fd27 	bl	8003928 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003eda:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <init_adc_dma+0xa0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <init_adc_dma+0xa0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ee8:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <init_adc_dma+0xa4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <init_adc_dma+0xa4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ef8:	601a      	str	r2, [r3, #0]


	status = 1;
 8003efa:	2301      	movs	r3, #1
 8003efc:	71fb      	strb	r3, [r7, #7]

	return status;
 8003efe:	79fb      	ldrb	r3, [r7, #7]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	2400015c 	.word	0x2400015c
 8003f0c:	24001b20 	.word	0x24001b20
 8003f10:	240001c0 	.word	0x240001c0
 8003f14:	24001b40 	.word	0x24001b40
 8003f18:	24001bdc 	.word	0x24001bdc
 8003f1c:	24001b54 	.word	0x24001b54

08003f20 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003f28:	2201      	movs	r2, #1
 8003f2a:	490b      	ldr	r1, [pc, #44]	; (8003f58 <sample_pmt_spi+0x38>)
 8003f2c:	480b      	ldr	r0, [pc, #44]	; (8003f5c <sample_pmt_spi+0x3c>)
 8003f2e:	f00d ff69 	bl	8011e04 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <sample_pmt_spi+0x38>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <sample_pmt_spi+0x38>)
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	7bba      	ldrb	r2, [r7, #14]
 8003f4e:	701a      	strb	r2, [r3, #0]
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	24001b4c 	.word	0x24001b4c
 8003f5c:	24001b54 	.word	0x24001b54

08003f60 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8003f68:	2201      	movs	r2, #1
 8003f6a:	490b      	ldr	r1, [pc, #44]	; (8003f98 <sample_erpa_spi+0x38>)
 8003f6c:	480b      	ldr	r0, [pc, #44]	; (8003f9c <sample_erpa_spi+0x3c>)
 8003f6e:	f00d ff49 	bl	8011e04 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <sample_erpa_spi+0x38>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <sample_erpa_spi+0x38>)
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	7bba      	ldrb	r2, [r7, #14]
 8003f8e:	701a      	strb	r2, [r3, #0]
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	24001b48 	.word	0x24001b48
 8003f9c:	24001bdc 	.word	0x24001bdc

08003fa0 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <sample_erpa_adc+0x20>)
 8003faa:	885b      	ldrh	r3, [r3, #2]
 8003fac:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	89fa      	ldrh	r2, [r7, #14]
 8003fb2:	801a      	strh	r2, [r3, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	24001b20 	.word	0x24001b20

08003fc4 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8003fcc:	2390      	movs	r3, #144	; 0x90
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f8a2 	bl	8004118 <poll_i2c_sensor>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8003fd8:	2394      	movs	r3, #148	; 0x94
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f89c 	bl	8004118 <poll_i2c_sensor>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8003fe4:	2392      	movs	r3, #146	; 0x92
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f896 	bl	8004118 <poll_i2c_sensor>
 8003fec:	4603      	mov	r3, r0
 8003fee:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8003ff0:	2396      	movs	r3, #150	; 0x96
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f890 	bl	8004118 <poll_i2c_sensor>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	89fa      	ldrh	r2, [r7, #14]
 8004000:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3302      	adds	r3, #2
 8004006:	89ba      	ldrh	r2, [r7, #12]
 8004008:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	897a      	ldrh	r2, [r7, #10]
 8004010:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3306      	adds	r3, #6
 8004016:	893a      	ldrh	r2, [r7, #8]
 8004018:	801a      	strh	r2, [r3, #0]
}
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8004024:	b480      	push	{r7}
 8004026:	b089      	sub	sp, #36	; 0x24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <sample_hk_adc1+0xa0>)
 800402e:	8a9b      	ldrh	r3, [r3, #20]
 8004030:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8004032:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <sample_hk_adc1+0xa0>)
 8004034:	8a1b      	ldrh	r3, [r3, #16]
 8004036:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8004038:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <sample_hk_adc1+0xa0>)
 800403a:	899b      	ldrh	r3, [r3, #12]
 800403c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800403e:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <sample_hk_adc1+0xa0>)
 8004040:	8a5b      	ldrh	r3, [r3, #18]
 8004042:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8004044:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <sample_hk_adc1+0xa0>)
 8004046:	889b      	ldrh	r3, [r3, #4]
 8004048:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800404a:	4b1e      	ldr	r3, [pc, #120]	; (80040c4 <sample_hk_adc1+0xa0>)
 800404c:	88db      	ldrh	r3, [r3, #6]
 800404e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8004050:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <sample_hk_adc1+0xa0>)
 8004052:	89db      	ldrh	r3, [r3, #14]
 8004054:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8004056:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <sample_hk_adc1+0xa0>)
 8004058:	891b      	ldrh	r3, [r3, #8]
 800405a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 800405c:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <sample_hk_adc1+0xa0>)
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8004062:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <sample_hk_adc1+0xa0>)
 8004064:	895b      	ldrh	r3, [r3, #10]
 8004066:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8bfa      	ldrh	r2, [r7, #30]
 800406c:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3302      	adds	r3, #2
 8004072:	8bba      	ldrh	r2, [r7, #28]
 8004074:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	8b7a      	ldrh	r2, [r7, #26]
 800407c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3306      	adds	r3, #6
 8004082:	8b3a      	ldrh	r2, [r7, #24]
 8004084:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3308      	adds	r3, #8
 800408a:	8afa      	ldrh	r2, [r7, #22]
 800408c:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	330a      	adds	r3, #10
 8004092:	8aba      	ldrh	r2, [r7, #20]
 8004094:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	330c      	adds	r3, #12
 800409a:	8a7a      	ldrh	r2, [r7, #18]
 800409c:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	330e      	adds	r3, #14
 80040a2:	8a3a      	ldrh	r2, [r7, #16]
 80040a4:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3310      	adds	r3, #16
 80040aa:	89fa      	ldrh	r2, [r7, #14]
 80040ac:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3312      	adds	r3, #18
 80040b2:	89ba      	ldrh	r2, [r7, #12]
 80040b4:	801a      	strh	r2, [r3, #0]
}
 80040b6:	bf00      	nop
 80040b8:	3724      	adds	r7, #36	; 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	24001b20 	.word	0x24001b20

080040c8 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <sample_hk_adc3+0x4c>)
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <sample_hk_adc3+0x4c>)
 80040d8:	885b      	ldrh	r3, [r3, #2]
 80040da:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80040dc:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <sample_hk_adc3+0x4c>)
 80040de:	889b      	ldrh	r3, [r3, #4]
 80040e0:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <sample_hk_adc3+0x4c>)
 80040e4:	88db      	ldrh	r3, [r3, #6]
 80040e6:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	89fa      	ldrh	r2, [r7, #14]
 80040ec:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3302      	adds	r3, #2
 80040f2:	89ba      	ldrh	r2, [r7, #12]
 80040f4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	897a      	ldrh	r2, [r7, #10]
 80040fc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3306      	adds	r3, #6
 8004102:	893a      	ldrh	r2, [r7, #8]
 8004104:	801a      	strh	r2, [r3, #0]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	24001b40 	.word	0x24001b40

08004118 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8004122:	2200      	movs	r2, #0
 8004124:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <poll_i2c_sensor+0x90>)
 8004126:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	b299      	uxth	r1, r3
 800412c:	2301      	movs	r3, #1
 800412e:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <poll_i2c_sensor+0x90>)
 8004130:	481e      	ldr	r0, [pc, #120]	; (80041ac <poll_i2c_sensor+0x94>)
 8004132:	f007 f9ad 	bl	800b490 <HAL_I2C_Master_Transmit_DMA>
 8004136:	4603      	mov	r3, r0
 8004138:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 800413a:	7b7b      	ldrb	r3, [r7, #13]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8004140:	481b      	ldr	r0, [pc, #108]	; (80041b0 <poll_i2c_sensor+0x98>)
 8004142:	f015 ffd1 	bl	801a0e8 <puts>
 8004146:	e028      	b.n	800419a <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004148:	bf00      	nop
 800414a:	4818      	ldr	r0, [pc, #96]	; (80041ac <poll_i2c_sensor+0x94>)
 800414c:	f007 fc87 	bl	800ba5e <HAL_I2C_GetState>
 8004150:	4603      	mov	r3, r0
 8004152:	2b20      	cmp	r3, #32
 8004154:	d1f9      	bne.n	800414a <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	b299      	uxth	r1, r3
 800415a:	2302      	movs	r3, #2
 800415c:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <poll_i2c_sensor+0x90>)
 800415e:	4813      	ldr	r0, [pc, #76]	; (80041ac <poll_i2c_sensor+0x94>)
 8004160:	f007 faaa 	bl	800b6b8 <HAL_I2C_Master_Receive_DMA>
 8004164:	4603      	mov	r3, r0
 8004166:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8004168:	7b7b      	ldrb	r3, [r7, #13]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 800416e:	4811      	ldr	r0, [pc, #68]	; (80041b4 <poll_i2c_sensor+0x9c>)
 8004170:	f015 ffba 	bl	801a0e8 <puts>
 8004174:	e011      	b.n	800419a <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004176:	bf00      	nop
 8004178:	480c      	ldr	r0, [pc, #48]	; (80041ac <poll_i2c_sensor+0x94>)
 800417a:	f007 fc70 	bl	800ba5e <HAL_I2C_GetState>
 800417e:	4603      	mov	r3, r0
 8004180:	2b20      	cmp	r3, #32
 8004182:	d1f9      	bne.n	8004178 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <poll_i2c_sensor+0x90>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 800418c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004190:	4a05      	ldr	r2, [pc, #20]	; (80041a8 <poll_i2c_sensor+0x90>)
 8004192:	7852      	ldrb	r2, [r2, #1]
 8004194:	4313      	orrs	r3, r2
 8004196:	10db      	asrs	r3, r3, #3
 8004198:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 800419a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	24001b50 	.word	0x24001b50
 80041ac:	2400193c 	.word	0x2400193c
 80041b0:	0801ac50 	.word	0x0801ac50
 80041b4:	0801ac60 	.word	0x0801ac60

080041b8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80041bc:	4b28      	ldr	r3, [pc, #160]	; (8004260 <MX_SPI1_Init+0xa8>)
 80041be:	4a29      	ldr	r2, [pc, #164]	; (8004264 <MX_SPI1_Init+0xac>)
 80041c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041c2:	4b27      	ldr	r3, [pc, #156]	; (8004260 <MX_SPI1_Init+0xa8>)
 80041c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80041c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80041ca:	4b25      	ldr	r3, [pc, #148]	; (8004260 <MX_SPI1_Init+0xa8>)
 80041cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80041d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <MX_SPI1_Init+0xa8>)
 80041d4:	220f      	movs	r2, #15
 80041d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <MX_SPI1_Init+0xa8>)
 80041da:	2200      	movs	r2, #0
 80041dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <MX_SPI1_Init+0xa8>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041e4:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <MX_SPI1_Init+0xa8>)
 80041e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80041ec:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <MX_SPI1_Init+0xa8>)
 80041ee:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80041f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041f4:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <MX_SPI1_Init+0xa8>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041fa:	4b19      	ldr	r3, [pc, #100]	; (8004260 <MX_SPI1_Init+0xa8>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004200:	4b17      	ldr	r3, [pc, #92]	; (8004260 <MX_SPI1_Init+0xa8>)
 8004202:	2200      	movs	r2, #0
 8004204:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004206:	4b16      	ldr	r3, [pc, #88]	; (8004260 <MX_SPI1_Init+0xa8>)
 8004208:	2200      	movs	r2, #0
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800420c:	4b14      	ldr	r3, [pc, #80]	; (8004260 <MX_SPI1_Init+0xa8>)
 800420e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004212:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004214:	4b12      	ldr	r3, [pc, #72]	; (8004260 <MX_SPI1_Init+0xa8>)
 8004216:	2200      	movs	r2, #0
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800421a:	4b11      	ldr	r3, [pc, #68]	; (8004260 <MX_SPI1_Init+0xa8>)
 800421c:	2200      	movs	r2, #0
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <MX_SPI1_Init+0xa8>)
 8004222:	2200      	movs	r2, #0
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004226:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <MX_SPI1_Init+0xa8>)
 8004228:	2200      	movs	r2, #0
 800422a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <MX_SPI1_Init+0xa8>)
 800422e:	2200      	movs	r2, #0
 8004230:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <MX_SPI1_Init+0xa8>)
 8004234:	2200      	movs	r2, #0
 8004236:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <MX_SPI1_Init+0xa8>)
 800423a:	2200      	movs	r2, #0
 800423c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <MX_SPI1_Init+0xa8>)
 8004240:	2200      	movs	r2, #0
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <MX_SPI1_Init+0xa8>)
 8004246:	2200      	movs	r2, #0
 8004248:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800424a:	4805      	ldr	r0, [pc, #20]	; (8004260 <MX_SPI1_Init+0xa8>)
 800424c:	f00d fcb6 	bl	8011bbc <HAL_SPI_Init>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8004256:	f7ff fb67 	bl	8003928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	24001b54 	.word	0x24001b54
 8004264:	40013000 	.word	0x40013000

08004268 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <MX_SPI2_Init+0xa8>)
 800426e:	4a29      	ldr	r2, [pc, #164]	; (8004314 <MX_SPI2_Init+0xac>)
 8004270:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004272:	4b27      	ldr	r3, [pc, #156]	; (8004310 <MX_SPI2_Init+0xa8>)
 8004274:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004278:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800427a:	4b25      	ldr	r3, [pc, #148]	; (8004310 <MX_SPI2_Init+0xa8>)
 800427c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004280:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004282:	4b23      	ldr	r3, [pc, #140]	; (8004310 <MX_SPI2_Init+0xa8>)
 8004284:	220f      	movs	r2, #15
 8004286:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004288:	4b21      	ldr	r3, [pc, #132]	; (8004310 <MX_SPI2_Init+0xa8>)
 800428a:	2200      	movs	r2, #0
 800428c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800428e:	4b20      	ldr	r3, [pc, #128]	; (8004310 <MX_SPI2_Init+0xa8>)
 8004290:	2200      	movs	r2, #0
 8004292:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004294:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <MX_SPI2_Init+0xa8>)
 8004296:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800429a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800429c:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <MX_SPI2_Init+0xa8>)
 800429e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80042a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042a4:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80042aa:	4b19      	ldr	r3, [pc, #100]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b0:	4b17      	ldr	r3, [pc, #92]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80042b6:	4b16      	ldr	r3, [pc, #88]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042c2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80042c4:	4b12      	ldr	r3, [pc, #72]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042d8:	2200      	movs	r2, #0
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042de:	2200      	movs	r2, #0
 80042e0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80042fa:	4805      	ldr	r0, [pc, #20]	; (8004310 <MX_SPI2_Init+0xa8>)
 80042fc:	f00d fc5e 	bl	8011bbc <HAL_SPI_Init>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004306:	f7ff fb0f 	bl	8003928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	24001bdc 	.word	0x24001bdc
 8004314:	40003800 	.word	0x40003800

08004318 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b0bc      	sub	sp, #240	; 0xf0
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004320:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004330:	f107 0318 	add.w	r3, r7, #24
 8004334:	22c0      	movs	r2, #192	; 0xc0
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f015 fe5f 	bl	8019ffc <memset>
  if(spiHandle->Instance==SPI1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a83      	ldr	r2, [pc, #524]	; (8004550 <HAL_SPI_MspInit+0x238>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d17c      	bne.n	8004442 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004354:	2300      	movs	r3, #0
 8004356:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004358:	f107 0318 	add.w	r3, r7, #24
 800435c:	4618      	mov	r0, r3
 800435e:	f00a fc0d 	bl	800eb7c <HAL_RCCEx_PeriphCLKConfig>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004368:	f7ff fade 	bl	8003928 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800436c:	4b79      	ldr	r3, [pc, #484]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 800436e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004372:	4a78      	ldr	r2, [pc, #480]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 8004374:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004378:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800437c:	4b75      	ldr	r3, [pc, #468]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 800437e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800438a:	4b72      	ldr	r3, [pc, #456]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 800438c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004390:	4a70      	ldr	r2, [pc, #448]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 8004392:	f043 0302 	orr.w	r3, r3, #2
 8004396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800439a:	4b6e      	ldr	r3, [pc, #440]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 800439c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80043a8:	2318      	movs	r3, #24
 80043aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ae:	2302      	movs	r3, #2
 80043b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043c0:	2305      	movs	r3, #5
 80043c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80043ca:	4619      	mov	r1, r3
 80043cc:	4862      	ldr	r0, [pc, #392]	; (8004558 <HAL_SPI_MspInit+0x240>)
 80043ce:	f006 fde1 	bl	800af94 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80043d2:	4b62      	ldr	r3, [pc, #392]	; (800455c <HAL_SPI_MspInit+0x244>)
 80043d4:	4a62      	ldr	r2, [pc, #392]	; (8004560 <HAL_SPI_MspInit+0x248>)
 80043d6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80043d8:	4b60      	ldr	r3, [pc, #384]	; (800455c <HAL_SPI_MspInit+0x244>)
 80043da:	2225      	movs	r2, #37	; 0x25
 80043dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043de:	4b5f      	ldr	r3, [pc, #380]	; (800455c <HAL_SPI_MspInit+0x244>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e4:	4b5d      	ldr	r3, [pc, #372]	; (800455c <HAL_SPI_MspInit+0x244>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043ea:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_SPI_MspInit+0x244>)
 80043ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043f2:	4b5a      	ldr	r3, [pc, #360]	; (800455c <HAL_SPI_MspInit+0x244>)
 80043f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043fa:	4b58      	ldr	r3, [pc, #352]	; (800455c <HAL_SPI_MspInit+0x244>)
 80043fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004400:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004402:	4b56      	ldr	r3, [pc, #344]	; (800455c <HAL_SPI_MspInit+0x244>)
 8004404:	2200      	movs	r2, #0
 8004406:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004408:	4b54      	ldr	r3, [pc, #336]	; (800455c <HAL_SPI_MspInit+0x244>)
 800440a:	2200      	movs	r2, #0
 800440c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800440e:	4b53      	ldr	r3, [pc, #332]	; (800455c <HAL_SPI_MspInit+0x244>)
 8004410:	2200      	movs	r2, #0
 8004412:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004414:	4851      	ldr	r0, [pc, #324]	; (800455c <HAL_SPI_MspInit+0x244>)
 8004416:	f003 fc8d 	bl	8007d34 <HAL_DMA_Init>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004420:	f7ff fa82 	bl	8003928 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a4d      	ldr	r2, [pc, #308]	; (800455c <HAL_SPI_MspInit+0x244>)
 8004428:	67da      	str	r2, [r3, #124]	; 0x7c
 800442a:	4a4c      	ldr	r2, [pc, #304]	; (800455c <HAL_SPI_MspInit+0x244>)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004430:	2200      	movs	r2, #0
 8004432:	2105      	movs	r1, #5
 8004434:	2023      	movs	r0, #35	; 0x23
 8004436:	f003 f84f 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800443a:	2023      	movs	r0, #35	; 0x23
 800443c:	f003 f866 	bl	800750c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004440:	e081      	b.n	8004546 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a47      	ldr	r2, [pc, #284]	; (8004564 <HAL_SPI_MspInit+0x24c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d17c      	bne.n	8004546 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800444c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004458:	2300      	movs	r3, #0
 800445a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800445c:	f107 0318 	add.w	r3, r7, #24
 8004460:	4618      	mov	r0, r3
 8004462:	f00a fb8b 	bl	800eb7c <HAL_RCCEx_PeriphCLKConfig>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 800446c:	f7ff fa5c 	bl	8003928 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004470:	4b38      	ldr	r3, [pc, #224]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 8004472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004476:	4a37      	ldr	r2, [pc, #220]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 8004478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800447c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004480:	4b34      	ldr	r3, [pc, #208]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 8004482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800448e:	4b31      	ldr	r3, [pc, #196]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 8004490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004494:	4a2f      	ldr	r2, [pc, #188]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 8004496:	f043 0302 	orr.w	r3, r3, #2
 800449a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800449e:	4b2d      	ldr	r3, [pc, #180]	; (8004554 <HAL_SPI_MspInit+0x23c>)
 80044a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80044ac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80044b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	2302      	movs	r3, #2
 80044b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044c6:	2305      	movs	r3, #5
 80044c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80044d0:	4619      	mov	r1, r3
 80044d2:	4821      	ldr	r0, [pc, #132]	; (8004558 <HAL_SPI_MspInit+0x240>)
 80044d4:	f006 fd5e 	bl	800af94 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80044d8:	4b23      	ldr	r3, [pc, #140]	; (8004568 <HAL_SPI_MspInit+0x250>)
 80044da:	4a24      	ldr	r2, [pc, #144]	; (800456c <HAL_SPI_MspInit+0x254>)
 80044dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80044de:	4b22      	ldr	r3, [pc, #136]	; (8004568 <HAL_SPI_MspInit+0x250>)
 80044e0:	2227      	movs	r2, #39	; 0x27
 80044e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_SPI_MspInit+0x250>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ea:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <HAL_SPI_MspInit+0x250>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044f0:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_SPI_MspInit+0x250>)
 80044f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <HAL_SPI_MspInit+0x250>)
 80044fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044fe:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_SPI_MspInit+0x250>)
 8004502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004506:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004508:	4b17      	ldr	r3, [pc, #92]	; (8004568 <HAL_SPI_MspInit+0x250>)
 800450a:	2200      	movs	r2, #0
 800450c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800450e:	4b16      	ldr	r3, [pc, #88]	; (8004568 <HAL_SPI_MspInit+0x250>)
 8004510:	2200      	movs	r2, #0
 8004512:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004514:	4b14      	ldr	r3, [pc, #80]	; (8004568 <HAL_SPI_MspInit+0x250>)
 8004516:	2200      	movs	r2, #0
 8004518:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800451a:	4813      	ldr	r0, [pc, #76]	; (8004568 <HAL_SPI_MspInit+0x250>)
 800451c:	f003 fc0a 	bl	8007d34 <HAL_DMA_Init>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004526:	f7ff f9ff 	bl	8003928 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a0e      	ldr	r2, [pc, #56]	; (8004568 <HAL_SPI_MspInit+0x250>)
 800452e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004530:	4a0d      	ldr	r2, [pc, #52]	; (8004568 <HAL_SPI_MspInit+0x250>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004536:	2200      	movs	r2, #0
 8004538:	2105      	movs	r1, #5
 800453a:	2024      	movs	r0, #36	; 0x24
 800453c:	f002 ffcc 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004540:	2024      	movs	r0, #36	; 0x24
 8004542:	f002 ffe3 	bl	800750c <HAL_NVIC_EnableIRQ>
}
 8004546:	bf00      	nop
 8004548:	37f0      	adds	r7, #240	; 0xf0
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40013000 	.word	0x40013000
 8004554:	58024400 	.word	0x58024400
 8004558:	58020400 	.word	0x58020400
 800455c:	24001c64 	.word	0x24001c64
 8004560:	40020070 	.word	0x40020070
 8004564:	40003800 	.word	0x40003800
 8004568:	24001cdc 	.word	0x24001cdc
 800456c:	40020058 	.word	0x40020058

08004570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004576:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_MspInit+0x38>)
 8004578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800457c:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <HAL_MspInit+0x38>)
 800457e:	f043 0302 	orr.w	r3, r3, #2
 8004582:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004586:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <HAL_MspInit+0x38>)
 8004588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004594:	2200      	movs	r2, #0
 8004596:	210f      	movs	r1, #15
 8004598:	f06f 0001 	mvn.w	r0, #1
 800459c:	f002 ff9c 	bl	80074d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	58024400 	.word	0x58024400

080045ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b090      	sub	sp, #64	; 0x40
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	d827      	bhi.n	800460a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80045ba:	2200      	movs	r2, #0
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	2036      	movs	r0, #54	; 0x36
 80045c0:	f002 ff8a 	bl	80074d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80045c4:	2036      	movs	r0, #54	; 0x36
 80045c6:	f002 ffa1 	bl	800750c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80045ca:	4a29      	ldr	r2, [pc, #164]	; (8004670 <HAL_InitTick+0xc4>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80045d0:	4b28      	ldr	r3, [pc, #160]	; (8004674 <HAL_InitTick+0xc8>)
 80045d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045d6:	4a27      	ldr	r2, [pc, #156]	; (8004674 <HAL_InitTick+0xc8>)
 80045d8:	f043 0310 	orr.w	r3, r3, #16
 80045dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045e0:	4b24      	ldr	r3, [pc, #144]	; (8004674 <HAL_InitTick+0xc8>)
 80045e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80045ee:	f107 0210 	add.w	r2, r7, #16
 80045f2:	f107 0314 	add.w	r3, r7, #20
 80045f6:	4611      	mov	r1, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f00a fa7d 	bl	800eaf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <HAL_InitTick+0x6a>
 8004608:	e001      	b.n	800460e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e02b      	b.n	8004666 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800460e:	f00a fa47 	bl	800eaa0 <HAL_RCC_GetPCLK1Freq>
 8004612:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004614:	e004      	b.n	8004620 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004616:	f00a fa43 	bl	800eaa0 <HAL_RCC_GetPCLK1Freq>
 800461a:	4603      	mov	r3, r0
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004622:	4a15      	ldr	r2, [pc, #84]	; (8004678 <HAL_InitTick+0xcc>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	0c9b      	lsrs	r3, r3, #18
 800462a:	3b01      	subs	r3, #1
 800462c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <HAL_InitTick+0xd0>)
 8004630:	4a13      	ldr	r2, [pc, #76]	; (8004680 <HAL_InitTick+0xd4>)
 8004632:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_InitTick+0xd0>)
 8004636:	f240 32e7 	movw	r2, #999	; 0x3e7
 800463a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800463c:	4a0f      	ldr	r2, [pc, #60]	; (800467c <HAL_InitTick+0xd0>)
 800463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004640:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004642:	4b0e      	ldr	r3, [pc, #56]	; (800467c <HAL_InitTick+0xd0>)
 8004644:	2200      	movs	r2, #0
 8004646:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <HAL_InitTick+0xd0>)
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800464e:	480b      	ldr	r0, [pc, #44]	; (800467c <HAL_InitTick+0xd0>)
 8004650:	f00e f853 	bl	80126fa <HAL_TIM_Base_Init>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800465a:	4808      	ldr	r0, [pc, #32]	; (800467c <HAL_InitTick+0xd0>)
 800465c:	f00e f8a4 	bl	80127a8 <HAL_TIM_Base_Start_IT>
 8004660:	4603      	mov	r3, r0
 8004662:	e000      	b.n	8004666 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
}
 8004666:	4618      	mov	r0, r3
 8004668:	3740      	adds	r7, #64	; 0x40
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	240000c8 	.word	0x240000c8
 8004674:	58024400 	.word	0x58024400
 8004678:	431bde83 	.word	0x431bde83
 800467c:	24001d54 	.word	0x24001d54
 8004680:	40001000 	.word	0x40001000

08004684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004688:	e7fe      	b.n	8004688 <NMI_Handler+0x4>

0800468a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800468e:	e7fe      	b.n	800468e <HardFault_Handler+0x4>

08004690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004694:	e7fe      	b.n	8004694 <MemManage_Handler+0x4>

08004696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800469a:	e7fe      	b.n	800469a <BusFault_Handler+0x4>

0800469c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046a0:	e7fe      	b.n	80046a0 <UsageFault_Handler+0x4>

080046a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046a2:	b480      	push	{r7}
 80046a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80046b4:	4802      	ldr	r0, [pc, #8]	; (80046c0 <DMA1_Stream0_IRQHandler+0x10>)
 80046b6:	f004 fe67 	bl	8009388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	24000224 	.word	0x24000224

080046c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80046c8:	4802      	ldr	r0, [pc, #8]	; (80046d4 <DMA1_Stream1_IRQHandler+0x10>)
 80046ca:	f004 fe5d 	bl	8009388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2400029c 	.word	0x2400029c

080046d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80046dc:	4802      	ldr	r0, [pc, #8]	; (80046e8 <DMA1_Stream2_IRQHandler+0x10>)
 80046de:	f004 fe53 	bl	8009388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	24001ed0 	.word	0x24001ed0

080046ec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80046f0:	4802      	ldr	r0, [pc, #8]	; (80046fc <DMA1_Stream3_IRQHandler+0x10>)
 80046f2:	f004 fe49 	bl	8009388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	24001cdc 	.word	0x24001cdc

08004700 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004704:	4802      	ldr	r0, [pc, #8]	; (8004710 <DMA1_Stream4_IRQHandler+0x10>)
 8004706:	f004 fe3f 	bl	8009388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	24001c64 	.word	0x24001c64

08004714 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004718:	4802      	ldr	r0, [pc, #8]	; (8004724 <DMA1_Stream5_IRQHandler+0x10>)
 800471a:	f004 fe35 	bl	8009388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	24000328 	.word	0x24000328

08004728 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800472c:	4802      	ldr	r0, [pc, #8]	; (8004738 <DMA1_Stream6_IRQHandler+0x10>)
 800472e:	f004 fe2b 	bl	8009388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	24001990 	.word	0x24001990

0800473c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004740:	4802      	ldr	r0, [pc, #8]	; (800474c <TIM1_BRK_IRQHandler+0x10>)
 8004742:	f00e fb48 	bl	8012dd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	24001da4 	.word	0x24001da4

08004750 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004754:	4802      	ldr	r0, [pc, #8]	; (8004760 <TIM1_UP_IRQHandler+0x10>)
 8004756:	f00e fb3e 	bl	8012dd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	24001da4 	.word	0x24001da4

08004764 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004768:	4802      	ldr	r0, [pc, #8]	; (8004774 <TIM1_TRG_COM_IRQHandler+0x10>)
 800476a:	f00e fb34 	bl	8012dd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	24001da4 	.word	0x24001da4

08004778 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <TIM1_CC_IRQHandler+0x10>)
 800477e:	f00e fb2a 	bl	8012dd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	24001da4 	.word	0x24001da4

0800478c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <TIM2_IRQHandler+0x10>)
 8004792:	f00e fb20 	bl	8012dd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	24001df0 	.word	0x24001df0

080047a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <I2C1_EV_IRQHandler+0x10>)
 80047a6:	f007 f877 	bl	800b898 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	2400193c 	.word	0x2400193c

080047b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80047b8:	4802      	ldr	r0, [pc, #8]	; (80047c4 <I2C1_ER_IRQHandler+0x10>)
 80047ba:	f007 f887 	bl	800b8cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	2400193c 	.word	0x2400193c

080047c8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80047cc:	4802      	ldr	r0, [pc, #8]	; (80047d8 <SPI1_IRQHandler+0x10>)
 80047ce:	f00d fc61 	bl	8012094 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	24001b54 	.word	0x24001b54

080047dc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80047e0:	4802      	ldr	r0, [pc, #8]	; (80047ec <SPI2_IRQHandler+0x10>)
 80047e2:	f00d fc57 	bl	8012094 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	24001bdc 	.word	0x24001bdc

080047f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80047f4:	4802      	ldr	r0, [pc, #8]	; (8004800 <USART1_IRQHandler+0x10>)
 80047f6:	f00f fe31 	bl	801445c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	24001e3c 	.word	0x24001e3c

08004804 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004808:	4802      	ldr	r0, [pc, #8]	; (8004814 <DMA1_Stream7_IRQHandler+0x10>)
 800480a:	f004 fdbd 	bl	8009388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	24001a08 	.word	0x24001a08

08004818 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <TIM6_DAC_IRQHandler+0x20>)
 800481e:	791b      	ldrb	r3, [r3, #4]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8004826:	4804      	ldr	r0, [pc, #16]	; (8004838 <TIM6_DAC_IRQHandler+0x20>)
 8004828:	f003 f805 	bl	8007836 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800482c:	4803      	ldr	r0, [pc, #12]	; (800483c <TIM6_DAC_IRQHandler+0x24>)
 800482e:	f00e fad2 	bl	8012dd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	24000314 	.word	0x24000314
 800483c:	24001d54 	.word	0x24001d54

08004840 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800484a:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <ITM_SendChar+0x48>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <ITM_SendChar+0x48>)
 8004850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004854:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <ITM_SendChar+0x4c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a0c      	ldr	r2, [pc, #48]	; (800488c <ITM_SendChar+0x4c>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8004862:	bf00      	nop
 8004864:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f8      	beq.n	8004864 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8004872:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	6013      	str	r3, [r2, #0]
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	e000edfc 	.word	0xe000edfc
 800488c:	e0000e00 	.word	0xe0000e00

08004890 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e00a      	b.n	80048b8 <_read+0x28>
		*ptr++ = __io_getchar();
 80048a2:	f3af 8000 	nop.w
 80048a6:	4601      	mov	r1, r0
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	60ba      	str	r2, [r7, #8]
 80048ae:	b2ca      	uxtb	r2, r1
 80048b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	3301      	adds	r3, #1
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	dbf0      	blt.n	80048a2 <_read+0x12>
	}

	return len;
 80048c0:	687b      	ldr	r3, [r7, #4]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e009      	b.n	80048f0 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	60ba      	str	r2, [r7, #8]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff ffab 	bl	8004840 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	3301      	adds	r3, #1
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	dbf1      	blt.n	80048dc <_write+0x12>
	}
	return len;
 80048f8:	687b      	ldr	r3, [r7, #4]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <_close>:

int _close(int file) {
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <_fstat>:

int _fstat(int file, struct stat *st) {
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800492a:	605a      	str	r2, [r3, #4]
	return 0;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <_isatty>:

int _isatty(int file) {
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004942:	2301      	movs	r3, #1
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004974:	4a14      	ldr	r2, [pc, #80]	; (80049c8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004976:	4b15      	ldr	r3, [pc, #84]	; (80049cc <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004980:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <_sbrk+0x64>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d102      	bne.n	800498e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <_sbrk+0x64>)
 800498a:	4a12      	ldr	r2, [pc, #72]	; (80049d4 <_sbrk+0x68>)
 800498c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <_sbrk+0x64>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	429a      	cmp	r2, r3
 800499a:	d207      	bcs.n	80049ac <_sbrk+0x40>
		errno = ENOMEM;
 800499c:	f015 faf6 	bl	8019f8c <__errno>
 80049a0:	4603      	mov	r3, r0
 80049a2:	220c      	movs	r2, #12
 80049a4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049aa:	e009      	b.n	80049c0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <_sbrk+0x64>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <_sbrk+0x64>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4413      	add	r3, r2
 80049ba:	4a05      	ldr	r2, [pc, #20]	; (80049d0 <_sbrk+0x64>)
 80049bc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80049be:	68fb      	ldr	r3, [r7, #12]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	24080000 	.word	0x24080000
 80049cc:	00000400 	.word	0x00000400
 80049d0:	24001da0 	.word	0x24001da0
 80049d4:	24006980 	.word	0x24006980

080049d8 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80049dc:	4b37      	ldr	r3, [pc, #220]	; (8004abc <SystemInit+0xe4>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	4a36      	ldr	r2, [pc, #216]	; (8004abc <SystemInit+0xe4>)
 80049e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80049ec:	4b34      	ldr	r3, [pc, #208]	; (8004ac0 <SystemInit+0xe8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d807      	bhi.n	8004a08 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80049f8:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <SystemInit+0xe8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f023 030f 	bic.w	r3, r3, #15
 8004a00:	4a2f      	ldr	r2, [pc, #188]	; (8004ac0 <SystemInit+0xe8>)
 8004a02:	f043 0307 	orr.w	r3, r3, #7
 8004a06:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004a08:	4b2e      	ldr	r3, [pc, #184]	; (8004ac4 <SystemInit+0xec>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a2d      	ldr	r2, [pc, #180]	; (8004ac4 <SystemInit+0xec>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004a14:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <SystemInit+0xec>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004a1a:	4b2a      	ldr	r3, [pc, #168]	; (8004ac4 <SystemInit+0xec>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4929      	ldr	r1, [pc, #164]	; (8004ac4 <SystemInit+0xec>)
 8004a20:	4b29      	ldr	r3, [pc, #164]	; (8004ac8 <SystemInit+0xf0>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004a26:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <SystemInit+0xe8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004a32:	4b23      	ldr	r3, [pc, #140]	; (8004ac0 <SystemInit+0xe8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 030f 	bic.w	r3, r3, #15
 8004a3a:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <SystemInit+0xe8>)
 8004a3c:	f043 0307 	orr.w	r3, r3, #7
 8004a40:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <SystemInit+0xec>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004a48:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <SystemInit+0xec>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <SystemInit+0xec>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <SystemInit+0xec>)
 8004a56:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <SystemInit+0xf4>)
 8004a58:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004a5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <SystemInit+0xec>)
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <SystemInit+0xf8>)
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <SystemInit+0xec>)
 8004a62:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <SystemInit+0xfc>)
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004a66:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <SystemInit+0xec>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004a6c:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <SystemInit+0xec>)
 8004a6e:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <SystemInit+0xfc>)
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004a72:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <SystemInit+0xec>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <SystemInit+0xec>)
 8004a7a:	4a16      	ldr	r2, [pc, #88]	; (8004ad4 <SystemInit+0xfc>)
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <SystemInit+0xec>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <SystemInit+0xec>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a0e      	ldr	r2, [pc, #56]	; (8004ac4 <SystemInit+0xec>)
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <SystemInit+0xec>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <SystemInit+0x100>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b10      	ldr	r3, [pc, #64]	; (8004adc <SystemInit+0x104>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa2:	d202      	bcs.n	8004aaa <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <SystemInit+0x108>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <SystemInit+0x10c>)
 8004aac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004ab0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004ab2:	bf00      	nop
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	e000ed00 	.word	0xe000ed00
 8004ac0:	52002000 	.word	0x52002000
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	eaf6ed7f 	.word	0xeaf6ed7f
 8004acc:	02020200 	.word	0x02020200
 8004ad0:	01ff0000 	.word	0x01ff0000
 8004ad4:	01010280 	.word	0x01010280
 8004ad8:	5c001000 	.word	0x5c001000
 8004adc:	ffff0000 	.word	0xffff0000
 8004ae0:	51008108 	.word	0x51008108
 8004ae4:	52004000 	.word	0x52004000

08004ae8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b09a      	sub	sp, #104	; 0x68
 8004aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	609a      	str	r2, [r3, #8]
 8004afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004afc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	611a      	str	r2, [r3, #16]
 8004b18:	615a      	str	r2, [r3, #20]
 8004b1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004b1c:	1d3b      	adds	r3, r7, #4
 8004b1e:	222c      	movs	r2, #44	; 0x2c
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f015 fa6a 	bl	8019ffc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004b28:	4b44      	ldr	r3, [pc, #272]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004b2a:	4a45      	ldr	r2, [pc, #276]	; (8004c40 <MX_TIM1_Init+0x158>)
 8004b2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004b2e:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004b30:	224a      	movs	r2, #74	; 0x4a
 8004b32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b34:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004b3a:	4b40      	ldr	r3, [pc, #256]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004b3c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004b40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b42:	4b3e      	ldr	r3, [pc, #248]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004b48:	4b3c      	ldr	r3, [pc, #240]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004b54:	4839      	ldr	r0, [pc, #228]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004b56:	f00d fdd0 	bl	80126fa <HAL_TIM_Base_Init>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004b60:	f7fe fee2 	bl	8003928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b68:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004b6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4832      	ldr	r0, [pc, #200]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004b72:	f00e fb4b 	bl	801320c <HAL_TIM_ConfigClockSource>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004b7c:	f7fe fed4 	bl	8003928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004b80:	482e      	ldr	r0, [pc, #184]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004b82:	f00e f8c7 	bl	8012d14 <HAL_TIM_PWM_Init>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004b8c:	f7fe fecc 	bl	8003928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b90:	2300      	movs	r3, #0
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004b94:	2300      	movs	r3, #0
 8004b96:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4826      	ldr	r0, [pc, #152]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004ba4:	f00f f888 	bl	8013cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004bae:	f7fe febb 	bl	8003928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bb2:	2360      	movs	r3, #96	; 0x60
 8004bb4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004bb6:	f240 13df 	movw	r3, #479	; 0x1df
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4818      	ldr	r0, [pc, #96]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004bda:	f00e fa03 	bl	8012fe4 <HAL_TIM_PWM_ConfigChannel>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004be4:	f7fe fea0 	bl	8003928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004c18:	1d3b      	adds	r3, r7, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4807      	ldr	r0, [pc, #28]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004c1e:	f00f f8d9 	bl	8013dd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004c28:	f7fe fe7e 	bl	8003928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004c2c:	4803      	ldr	r0, [pc, #12]	; (8004c3c <MX_TIM1_Init+0x154>)
 8004c2e:	f000 f8dd 	bl	8004dec <HAL_TIM_MspPostInit>

}
 8004c32:	bf00      	nop
 8004c34:	3768      	adds	r7, #104	; 0x68
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	24001da4 	.word	0x24001da4
 8004c40:	40010000 	.word	0x40010000

08004c44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08e      	sub	sp, #56	; 0x38
 8004c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	609a      	str	r2, [r3, #8]
 8004c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c58:	f107 031c 	add.w	r3, r7, #28
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	605a      	str	r2, [r3, #4]
 8004c62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c64:	463b      	mov	r3, r7
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	609a      	str	r2, [r3, #8]
 8004c6e:	60da      	str	r2, [r3, #12]
 8004c70:	611a      	str	r2, [r3, #16]
 8004c72:	615a      	str	r2, [r3, #20]
 8004c74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c76:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004c7e:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004c80:	224a      	movs	r2, #74	; 0x4a
 8004c82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004c8a:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004c8c:	f640 4234 	movw	r2, #3124	; 0xc34
 8004c90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c92:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c98:	4b24      	ldr	r3, [pc, #144]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004c9a:	2280      	movs	r2, #128	; 0x80
 8004c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c9e:	4823      	ldr	r0, [pc, #140]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004ca0:	f00d fd2b 	bl	80126fa <HAL_TIM_Base_Init>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004caa:	f7fe fe3d 	bl	8003928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cb8:	4619      	mov	r1, r3
 8004cba:	481c      	ldr	r0, [pc, #112]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004cbc:	f00e faa6 	bl	801320c <HAL_TIM_ConfigClockSource>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004cc6:	f7fe fe2f 	bl	8003928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004cca:	4818      	ldr	r0, [pc, #96]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004ccc:	f00e f822 	bl	8012d14 <HAL_TIM_PWM_Init>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004cd6:	f7fe fe27 	bl	8003928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004cda:	2320      	movs	r3, #32
 8004cdc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ce2:	f107 031c 	add.w	r3, r7, #28
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4810      	ldr	r0, [pc, #64]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004cea:	f00e ffe5 	bl	8013cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004cf4:	f7fe fe18 	bl	8003928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cf8:	2360      	movs	r3, #96	; 0x60
 8004cfa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004d08:	463b      	mov	r3, r7
 8004d0a:	220c      	movs	r2, #12
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4807      	ldr	r0, [pc, #28]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004d10:	f00e f968 	bl	8012fe4 <HAL_TIM_PWM_ConfigChannel>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004d1a:	f7fe fe05 	bl	8003928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004d1e:	4803      	ldr	r0, [pc, #12]	; (8004d2c <MX_TIM2_Init+0xe8>)
 8004d20:	f000 f864 	bl	8004dec <HAL_TIM_MspPostInit>

}
 8004d24:	bf00      	nop
 8004d26:	3738      	adds	r7, #56	; 0x38
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	24001df0 	.word	0x24001df0

08004d30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a29      	ldr	r2, [pc, #164]	; (8004de4 <HAL_TIM_Base_MspInit+0xb4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d12f      	bne.n	8004da2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d42:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <HAL_TIM_Base_MspInit+0xb8>)
 8004d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d48:	4a27      	ldr	r2, [pc, #156]	; (8004de8 <HAL_TIM_Base_MspInit+0xb8>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004d52:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <HAL_TIM_Base_MspInit+0xb8>)
 8004d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004d60:	2200      	movs	r2, #0
 8004d62:	2105      	movs	r1, #5
 8004d64:	2018      	movs	r0, #24
 8004d66:	f002 fbb7 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004d6a:	2018      	movs	r0, #24
 8004d6c:	f002 fbce 	bl	800750c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004d70:	2200      	movs	r2, #0
 8004d72:	2105      	movs	r1, #5
 8004d74:	2019      	movs	r0, #25
 8004d76:	f002 fbaf 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004d7a:	2019      	movs	r0, #25
 8004d7c:	f002 fbc6 	bl	800750c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004d80:	2200      	movs	r2, #0
 8004d82:	2105      	movs	r1, #5
 8004d84:	201a      	movs	r0, #26
 8004d86:	f002 fba7 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004d8a:	201a      	movs	r0, #26
 8004d8c:	f002 fbbe 	bl	800750c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004d90:	2200      	movs	r2, #0
 8004d92:	2105      	movs	r1, #5
 8004d94:	201b      	movs	r0, #27
 8004d96:	f002 fb9f 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004d9a:	201b      	movs	r0, #27
 8004d9c:	f002 fbb6 	bl	800750c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004da0:	e01b      	b.n	8004dda <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004daa:	d116      	bne.n	8004dda <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004dac:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <HAL_TIM_Base_MspInit+0xb8>)
 8004dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004db2:	4a0d      	ldr	r2, [pc, #52]	; (8004de8 <HAL_TIM_Base_MspInit+0xb8>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <HAL_TIM_Base_MspInit+0xb8>)
 8004dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2105      	movs	r1, #5
 8004dce:	201c      	movs	r0, #28
 8004dd0:	f002 fb82 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004dd4:	201c      	movs	r0, #28
 8004dd6:	f002 fb99 	bl	800750c <HAL_NVIC_EnableIRQ>
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000
 8004de8:	58024400 	.word	0x58024400

08004dec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df4:	f107 0314 	add.w	r3, r7, #20
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	60da      	str	r2, [r3, #12]
 8004e02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <HAL_TIM_MspPostInit+0xb8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d120      	bne.n	8004e50 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e0e:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <HAL_TIM_MspPostInit+0xbc>)
 8004e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e14:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <HAL_TIM_MspPostInit+0xbc>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e1e:	4b22      	ldr	r3, [pc, #136]	; (8004ea8 <HAL_TIM_MspPostInit+0xbc>)
 8004e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e32:	2302      	movs	r3, #2
 8004e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e42:	f107 0314 	add.w	r3, r7, #20
 8004e46:	4619      	mov	r1, r3
 8004e48:	4818      	ldr	r0, [pc, #96]	; (8004eac <HAL_TIM_MspPostInit+0xc0>)
 8004e4a:	f006 f8a3 	bl	800af94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004e4e:	e024      	b.n	8004e9a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d11f      	bne.n	8004e9a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5a:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <HAL_TIM_MspPostInit+0xbc>)
 8004e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e60:	4a11      	ldr	r2, [pc, #68]	; (8004ea8 <HAL_TIM_MspPostInit+0xbc>)
 8004e62:	f043 0302 	orr.w	r3, r3, #2
 8004e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <HAL_TIM_MspPostInit+0xbc>)
 8004e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e86:	2300      	movs	r3, #0
 8004e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8e:	f107 0314 	add.w	r3, r7, #20
 8004e92:	4619      	mov	r1, r3
 8004e94:	4806      	ldr	r0, [pc, #24]	; (8004eb0 <HAL_TIM_MspPostInit+0xc4>)
 8004e96:	f006 f87d 	bl	800af94 <HAL_GPIO_Init>
}
 8004e9a:	bf00      	nop
 8004e9c:	3728      	adds	r7, #40	; 0x28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	58024400 	.word	0x58024400
 8004eac:	58020000 	.word	0x58020000
 8004eb0:	58020400 	.word	0x58020400

08004eb4 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004ec0:	4b21      	ldr	r3, [pc, #132]	; (8004f48 <get_uptime+0x94>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004ec6:	4b21      	ldr	r3, [pc, #132]	; (8004f4c <get_uptime+0x98>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004ecc:	4b1e      	ldr	r3, [pc, #120]	; (8004f48 <get_uptime+0x94>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d005      	beq.n	8004ee2 <get_uptime+0x2e>
		ms = uptime_millis;
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <get_uptime+0x94>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <get_uptime+0x98>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ee8:	fb03 f202 	mul.w	r2, r3, r2
 8004eec:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <get_uptime+0x98>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	4917      	ldr	r1, [pc, #92]	; (8004f50 <get_uptime+0x9c>)
 8004ef4:	fba1 1303 	umull	r1, r3, r1, r3
 8004ef8:	099b      	lsrs	r3, r3, #6
 8004efa:	68f9      	ldr	r1, [r7, #12]
 8004efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <get_uptime+0x5a>
		uptime = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	0e1b      	lsrs	r3, r3, #24
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	0c1a      	lsrs	r2, r3, #16
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	0a1a      	lsrs	r2, r3, #8
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3303      	adds	r3, #3
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	24001ae0 	.word	0x24001ae0
 8004f4c:	e000e010 	.word	0xe000e010
 8004f50:	10624dd3 	.word	0x10624dd3

08004f54 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004f5c:	f107 0310 	add.w	r3, r7, #16
 8004f60:	2200      	movs	r2, #0
 8004f62:	4619      	mov	r1, r3
 8004f64:	4821      	ldr	r0, [pc, #132]	; (8004fec <get_timestamp+0x98>)
 8004f66:	f00c fc27 	bl	80117b8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8004f6a:	f107 030c 	add.w	r3, r7, #12
 8004f6e:	2200      	movs	r2, #0
 8004f70:	4619      	mov	r1, r3
 8004f72:	481e      	ldr	r0, [pc, #120]	; (8004fec <get_timestamp+0x98>)
 8004f74:	f00c fd04 	bl	8011980 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2264      	movs	r2, #100	; 0x64
 8004f7c:	fb03 f202 	mul.w	r2, r3, r2
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <get_timestamp+0x9c>)
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	7b7a      	ldrb	r2, [r7, #13]
 8004f92:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3302      	adds	r3, #2
 8004f98:	7bba      	ldrb	r2, [r7, #14]
 8004f9a:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3303      	adds	r3, #3
 8004fa0:	7c3a      	ldrb	r2, [r7, #16]
 8004fa2:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	7c7a      	ldrb	r2, [r7, #17]
 8004faa:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3305      	adds	r3, #5
 8004fb0:	7cba      	ldrb	r2, [r7, #18]
 8004fb2:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	0e1a      	lsrs	r2, r3, #24
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3306      	adds	r3, #6
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	0c1a      	lsrs	r2, r3, #16
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3307      	adds	r3, #7
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	0a1a      	lsrs	r2, r3, #8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3309      	adds	r3, #9
 8004fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	3728      	adds	r7, #40	; 0x28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	24001af4 	.word	0x24001af4
 8004ff0:	000f4240 	.word	0x000f4240

08004ff4 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	; 0x30
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	789b      	ldrb	r3, [r3, #2]
 8005008:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	78db      	ldrb	r3, [r3, #3]
 8005010:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	791b      	ldrb	r3, [r3, #4]
 8005018:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	795b      	ldrb	r3, [r3, #5]
 8005020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	799b      	ldrb	r3, [r3, #6]
 8005028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3307      	adds	r3, #7
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	b21a      	sxth	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3308      	adds	r3, #8
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b21b      	sxth	r3, r3
 800503e:	4313      	orrs	r3, r2
 8005040:	b21b      	sxth	r3, r3
 8005042:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 800504c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005050:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005054:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 800505c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005060:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8005062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005066:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8005068:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800506c:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800506e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005070:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8005072:	f107 0320 	add.w	r3, r7, #32
 8005076:	2200      	movs	r2, #0
 8005078:	4619      	mov	r1, r3
 800507a:	480b      	ldr	r0, [pc, #44]	; (80050a8 <calibrateRTC+0xb4>)
 800507c:	f00c fbf8 	bl	8011870 <HAL_RTC_SetDate>
 8005080:	4603      	mov	r3, r0
 8005082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8005086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <calibrateRTC+0x9e>
		Error_Handler();
 800508e:	f7fe fc4b 	bl	8003928 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8005092:	f107 030c 	add.w	r3, r7, #12
 8005096:	2200      	movs	r2, #0
 8005098:	4619      	mov	r1, r3
 800509a:	4803      	ldr	r0, [pc, #12]	; (80050a8 <calibrateRTC+0xb4>)
 800509c:	f000 f806 	bl	80050ac <RTC_SetTime>
}
 80050a0:	bf00      	nop
 80050a2:	3730      	adds	r7, #48	; 0x30
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	24001af4 	.word	0x24001af4

080050ac <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <RTC_SetTime+0x1a>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e051      	b.n	800516a <RTC_SetTime+0xbe>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2202      	movs	r2, #2
 80050d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	22ca      	movs	r2, #202	; 0xca
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2253      	movs	r2, #83	; 0x53
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f00c fcbc 	bl	8011a64 <RTC_EnterInitMode>
 80050ec:	4603      	mov	r3, r0
 80050ee:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d129      	bne.n	800514a <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2200      	movs	r2, #0
 80050fa:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f00c fd21 	bl	8011b48 <RTC_ByteToBcd2>
 8005106:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005108:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	4618      	mov	r0, r3
 8005110:	f00c fd1a 	bl	8011b48 <RTC_ByteToBcd2>
 8005114:	4603      	mov	r3, r0
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	789b      	ldrb	r3, [r3, #2]
 800511e:	4618      	mov	r0, r3
 8005120:	f00c fd12 	bl	8011b48 <RTC_ByteToBcd2>
 8005124:	4603      	mov	r3, r0
 8005126:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	78db      	ldrb	r3, [r3, #3]
 800512e:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	6939      	ldr	r1, [r7, #16]
 800513a:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <RTC_SetTime+0xc8>)
 800513c:	400b      	ands	r3, r1
 800513e:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f00c fcc3 	bl	8011acc <RTC_ExitInitMode>
 8005146:	4603      	mov	r3, r0
 8005148:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	22ff      	movs	r2, #255	; 0xff
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8005168:	7dfb      	ldrb	r3, [r7, #23]

}
 800516a:	4618      	mov	r0, r3
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd90      	pop	{r4, r7, pc}
 8005172:	bf00      	nop
 8005174:	007f7f7f 	.word	0x007f7f7f

08005178 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800517c:	4b30      	ldr	r3, [pc, #192]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 800517e:	4a31      	ldr	r2, [pc, #196]	; (8005244 <MX_USART1_UART_Init+0xcc>)
 8005180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8005182:	4b2f      	ldr	r3, [pc, #188]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 8005184:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8005188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800518a:	4b2d      	ldr	r3, [pc, #180]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 800518c:	2200      	movs	r2, #0
 800518e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005190:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 8005192:	2200      	movs	r2, #0
 8005194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005196:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 8005198:	2200      	movs	r2, #0
 800519a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800519c:	4b28      	ldr	r3, [pc, #160]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 800519e:	220c      	movs	r2, #12
 80051a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051a2:	4b27      	ldr	r3, [pc, #156]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051a8:	4b25      	ldr	r3, [pc, #148]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051ae:	4b24      	ldr	r3, [pc, #144]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80051b4:	4b22      	ldr	r3, [pc, #136]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051ba:	4b21      	ldr	r3, [pc, #132]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 80051bc:	2200      	movs	r2, #0
 80051be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80051c0:	481f      	ldr	r0, [pc, #124]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 80051c2:	f00e fea3 	bl	8013f0c <HAL_UART_Init>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80051cc:	f7fe fbac 	bl	8003928 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051d0:	2100      	movs	r1, #0
 80051d2:	481b      	ldr	r0, [pc, #108]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 80051d4:	f011 fbe9 	bl	80169aa <HAL_UARTEx_SetTxFifoThreshold>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80051de:	f7fe fba3 	bl	8003928 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051e2:	2100      	movs	r1, #0
 80051e4:	4816      	ldr	r0, [pc, #88]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 80051e6:	f011 fc1e 	bl	8016a26 <HAL_UARTEx_SetRxFifoThreshold>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80051f0:	f7fe fb9a 	bl	8003928 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80051f4:	4812      	ldr	r0, [pc, #72]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 80051f6:	f011 fb9f 	bl	8016938 <HAL_UARTEx_DisableFifoMode>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005200:	f7fe fb92 	bl	8003928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005204:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005208:	480d      	ldr	r0, [pc, #52]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 800520a:	f011 fc0c 	bl	8016a26 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800520e:	480c      	ldr	r0, [pc, #48]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 8005210:	f011 fb57 	bl	80168c2 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005214:	480a      	ldr	r0, [pc, #40]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 8005216:	f011 fb21 	bl	801685c <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 800521a:	4b09      	ldr	r3, [pc, #36]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005228:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	4b03      	ldr	r3, [pc, #12]	; (8005240 <MX_USART1_UART_Init+0xc8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005238:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 800523a:	bf00      	nop
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	24001e3c 	.word	0x24001e3c
 8005244:	40011000 	.word	0x40011000

08005248 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b0ba      	sub	sp, #232	; 0xe8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005250:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	609a      	str	r2, [r3, #8]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005260:	f107 0310 	add.w	r3, r7, #16
 8005264:	22c0      	movs	r2, #192	; 0xc0
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f014 fec7 	bl	8019ffc <memset>
  if(uartHandle->Instance==USART1)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a41      	ldr	r2, [pc, #260]	; (8005378 <HAL_UART_MspInit+0x130>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d17b      	bne.n	8005370 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005278:	f04f 0201 	mov.w	r2, #1
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8005284:	2318      	movs	r3, #24
 8005286:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	4618      	mov	r0, r3
 8005290:	f009 fc74 	bl	800eb7c <HAL_RCCEx_PeriphCLKConfig>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800529a:	f7fe fb45 	bl	8003928 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800529e:	4b37      	ldr	r3, [pc, #220]	; (800537c <HAL_UART_MspInit+0x134>)
 80052a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052a4:	4a35      	ldr	r2, [pc, #212]	; (800537c <HAL_UART_MspInit+0x134>)
 80052a6:	f043 0310 	orr.w	r3, r3, #16
 80052aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80052ae:	4b33      	ldr	r3, [pc, #204]	; (800537c <HAL_UART_MspInit+0x134>)
 80052b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052bc:	4b2f      	ldr	r3, [pc, #188]	; (800537c <HAL_UART_MspInit+0x134>)
 80052be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052c2:	4a2e      	ldr	r2, [pc, #184]	; (800537c <HAL_UART_MspInit+0x134>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052cc:	4b2b      	ldr	r3, [pc, #172]	; (800537c <HAL_UART_MspInit+0x134>)
 80052ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	60bb      	str	r3, [r7, #8]
 80052d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80052da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80052de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e2:	2302      	movs	r3, #2
 80052e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052f4:	2307      	movs	r3, #7
 80052f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80052fe:	4619      	mov	r1, r3
 8005300:	481f      	ldr	r0, [pc, #124]	; (8005380 <HAL_UART_MspInit+0x138>)
 8005302:	f005 fe47 	bl	800af94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005306:	4b1f      	ldr	r3, [pc, #124]	; (8005384 <HAL_UART_MspInit+0x13c>)
 8005308:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <HAL_UART_MspInit+0x140>)
 800530a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800530c:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <HAL_UART_MspInit+0x13c>)
 800530e:	222a      	movs	r2, #42	; 0x2a
 8005310:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005312:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <HAL_UART_MspInit+0x13c>)
 8005314:	2240      	movs	r2, #64	; 0x40
 8005316:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <HAL_UART_MspInit+0x13c>)
 800531a:	2200      	movs	r2, #0
 800531c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800531e:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HAL_UART_MspInit+0x13c>)
 8005320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005324:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005326:	4b17      	ldr	r3, [pc, #92]	; (8005384 <HAL_UART_MspInit+0x13c>)
 8005328:	2200      	movs	r2, #0
 800532a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800532c:	4b15      	ldr	r3, [pc, #84]	; (8005384 <HAL_UART_MspInit+0x13c>)
 800532e:	2200      	movs	r2, #0
 8005330:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005332:	4b14      	ldr	r3, [pc, #80]	; (8005384 <HAL_UART_MspInit+0x13c>)
 8005334:	2200      	movs	r2, #0
 8005336:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005338:	4b12      	ldr	r3, [pc, #72]	; (8005384 <HAL_UART_MspInit+0x13c>)
 800533a:	2200      	movs	r2, #0
 800533c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800533e:	4b11      	ldr	r3, [pc, #68]	; (8005384 <HAL_UART_MspInit+0x13c>)
 8005340:	2200      	movs	r2, #0
 8005342:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005344:	480f      	ldr	r0, [pc, #60]	; (8005384 <HAL_UART_MspInit+0x13c>)
 8005346:	f002 fcf5 	bl	8007d34 <HAL_DMA_Init>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005350:	f7fe faea 	bl	8003928 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a0b      	ldr	r2, [pc, #44]	; (8005384 <HAL_UART_MspInit+0x13c>)
 8005358:	67da      	str	r2, [r3, #124]	; 0x7c
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <HAL_UART_MspInit+0x13c>)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005360:	2200      	movs	r2, #0
 8005362:	2105      	movs	r1, #5
 8005364:	2025      	movs	r0, #37	; 0x25
 8005366:	f002 f8b7 	bl	80074d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800536a:	2025      	movs	r0, #37	; 0x25
 800536c:	f002 f8ce 	bl	800750c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005370:	bf00      	nop
 8005372:	37e8      	adds	r7, #232	; 0xe8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40011000 	.word	0x40011000
 800537c:	58024400 	.word	0x58024400
 8005380:	58020000 	.word	0x58020000
 8005384:	24001ed0 	.word	0x24001ed0
 8005388:	40020040 	.word	0x40020040

0800538c <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8005396:	4bc2      	ldr	r3, [pc, #776]	; (80056a0 <voltage_monitor_init+0x314>)
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 800539c:	4bc0      	ldr	r3, [pc, #768]	; (80056a0 <voltage_monitor_init+0x314>)
 800539e:	2200      	movs	r2, #0
 80053a0:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80053a2:	4bbf      	ldr	r3, [pc, #764]	; (80056a0 <voltage_monitor_init+0x314>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80053a8:	4bbd      	ldr	r3, [pc, #756]	; (80056a0 <voltage_monitor_init+0x314>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 80053ae:	4bbc      	ldr	r3, [pc, #752]	; (80056a0 <voltage_monitor_init+0x314>)
 80053b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80053b4:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 80053b6:	4bba      	ldr	r3, [pc, #744]	; (80056a0 <voltage_monitor_init+0x314>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80053bc:	4bb8      	ldr	r3, [pc, #736]	; (80056a0 <voltage_monitor_init+0x314>)
 80053be:	2201      	movs	r2, #1
 80053c0:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80053c2:	4bb7      	ldr	r3, [pc, #732]	; (80056a0 <voltage_monitor_init+0x314>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80053c8:	4bb5      	ldr	r3, [pc, #724]	; (80056a0 <voltage_monitor_init+0x314>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 80053ce:	4bb4      	ldr	r3, [pc, #720]	; (80056a0 <voltage_monitor_init+0x314>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80053d4:	4bb2      	ldr	r3, [pc, #712]	; (80056a0 <voltage_monitor_init+0x314>)
 80053d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80053da:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80053dc:	4bb0      	ldr	r3, [pc, #704]	; (80056a0 <voltage_monitor_init+0x314>)
 80053de:	2200      	movs	r2, #0
 80053e0:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80053e2:	4baf      	ldr	r3, [pc, #700]	; (80056a0 <voltage_monitor_init+0x314>)
 80053e4:	2202      	movs	r2, #2
 80053e6:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80053e8:	4bad      	ldr	r3, [pc, #692]	; (80056a0 <voltage_monitor_init+0x314>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80053ee:	4bac      	ldr	r3, [pc, #688]	; (80056a0 <voltage_monitor_init+0x314>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80053f4:	4baa      	ldr	r3, [pc, #680]	; (80056a0 <voltage_monitor_init+0x314>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80053fa:	4ba9      	ldr	r3, [pc, #676]	; (80056a0 <voltage_monitor_init+0x314>)
 80053fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8005400:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8005402:	4ba7      	ldr	r3, [pc, #668]	; (80056a0 <voltage_monitor_init+0x314>)
 8005404:	2200      	movs	r2, #0
 8005406:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005408:	4ba5      	ldr	r3, [pc, #660]	; (80056a0 <voltage_monitor_init+0x314>)
 800540a:	2203      	movs	r2, #3
 800540c:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 800540e:	4ba4      	ldr	r3, [pc, #656]	; (80056a0 <voltage_monitor_init+0x314>)
 8005410:	2200      	movs	r2, #0
 8005412:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8005414:	4ba2      	ldr	r3, [pc, #648]	; (80056a0 <voltage_monitor_init+0x314>)
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 800541c:	4ba0      	ldr	r3, [pc, #640]	; (80056a0 <voltage_monitor_init+0x314>)
 800541e:	2200      	movs	r2, #0
 8005420:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005422:	4b9f      	ldr	r3, [pc, #636]	; (80056a0 <voltage_monitor_init+0x314>)
 8005424:	f242 7210 	movw	r2, #10000	; 0x2710
 8005428:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 800542a:	4b9d      	ldr	r3, [pc, #628]	; (80056a0 <voltage_monitor_init+0x314>)
 800542c:	2200      	movs	r2, #0
 800542e:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8005430:	4b9b      	ldr	r3, [pc, #620]	; (80056a0 <voltage_monitor_init+0x314>)
 8005432:	2204      	movs	r2, #4
 8005434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005438:	4b99      	ldr	r3, [pc, #612]	; (80056a0 <voltage_monitor_init+0x314>)
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8005440:	4b97      	ldr	r3, [pc, #604]	; (80056a0 <voltage_monitor_init+0x314>)
 8005442:	2201      	movs	r2, #1
 8005444:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005448:	4b95      	ldr	r3, [pc, #596]	; (80056a0 <voltage_monitor_init+0x314>)
 800544a:	2200      	movs	r2, #0
 800544c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800544e:	4b94      	ldr	r3, [pc, #592]	; (80056a0 <voltage_monitor_init+0x314>)
 8005450:	f242 7210 	movw	r2, #10000	; 0x2710
 8005454:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8005456:	4b92      	ldr	r3, [pc, #584]	; (80056a0 <voltage_monitor_init+0x314>)
 8005458:	2200      	movs	r2, #0
 800545a:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 800545c:	4b90      	ldr	r3, [pc, #576]	; (80056a0 <voltage_monitor_init+0x314>)
 800545e:	2205      	movs	r2, #5
 8005460:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8005464:	4b8e      	ldr	r3, [pc, #568]	; (80056a0 <voltage_monitor_init+0x314>)
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 800546c:	4b8c      	ldr	r3, [pc, #560]	; (80056a0 <voltage_monitor_init+0x314>)
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8005474:	4b8a      	ldr	r3, [pc, #552]	; (80056a0 <voltage_monitor_init+0x314>)
 8005476:	2200      	movs	r2, #0
 8005478:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 800547a:	4b89      	ldr	r3, [pc, #548]	; (80056a0 <voltage_monitor_init+0x314>)
 800547c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005480:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8005482:	4b87      	ldr	r3, [pc, #540]	; (80056a0 <voltage_monitor_init+0x314>)
 8005484:	2200      	movs	r2, #0
 8005486:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8005488:	4b85      	ldr	r3, [pc, #532]	; (80056a0 <voltage_monitor_init+0x314>)
 800548a:	2206      	movs	r2, #6
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8005490:	4b83      	ldr	r3, [pc, #524]	; (80056a0 <voltage_monitor_init+0x314>)
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8005498:	4b81      	ldr	r3, [pc, #516]	; (80056a0 <voltage_monitor_init+0x314>)
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80054a0:	4b7f      	ldr	r3, [pc, #508]	; (80056a0 <voltage_monitor_init+0x314>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80054a8:	4b7d      	ldr	r3, [pc, #500]	; (80056a0 <voltage_monitor_init+0x314>)
 80054aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80054ae:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80054b2:	4b7b      	ldr	r3, [pc, #492]	; (80056a0 <voltage_monitor_init+0x314>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80054ba:	4b79      	ldr	r3, [pc, #484]	; (80056a0 <voltage_monitor_init+0x314>)
 80054bc:	2207      	movs	r2, #7
 80054be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80054c2:	4b77      	ldr	r3, [pc, #476]	; (80056a0 <voltage_monitor_init+0x314>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 80054ca:	4b75      	ldr	r3, [pc, #468]	; (80056a0 <voltage_monitor_init+0x314>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80054d2:	4b73      	ldr	r3, [pc, #460]	; (80056a0 <voltage_monitor_init+0x314>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80054da:	4b71      	ldr	r3, [pc, #452]	; (80056a0 <voltage_monitor_init+0x314>)
 80054dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80054e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80054e4:	4b6e      	ldr	r3, [pc, #440]	; (80056a0 <voltage_monitor_init+0x314>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80054ec:	4b6c      	ldr	r3, [pc, #432]	; (80056a0 <voltage_monitor_init+0x314>)
 80054ee:	2208      	movs	r2, #8
 80054f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80054f4:	4b6a      	ldr	r3, [pc, #424]	; (80056a0 <voltage_monitor_init+0x314>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80054fc:	4b68      	ldr	r3, [pc, #416]	; (80056a0 <voltage_monitor_init+0x314>)
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8005504:	4b66      	ldr	r3, [pc, #408]	; (80056a0 <voltage_monitor_init+0x314>)
 8005506:	2200      	movs	r2, #0
 8005508:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 800550c:	4b64      	ldr	r3, [pc, #400]	; (80056a0 <voltage_monitor_init+0x314>)
 800550e:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8005512:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8005516:	4b62      	ldr	r3, [pc, #392]	; (80056a0 <voltage_monitor_init+0x314>)
 8005518:	f640 3283 	movw	r2, #2947	; 0xb83
 800551c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8005520:	4b5f      	ldr	r3, [pc, #380]	; (80056a0 <voltage_monitor_init+0x314>)
 8005522:	2209      	movs	r2, #9
 8005524:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005528:	4b5d      	ldr	r3, [pc, #372]	; (80056a0 <voltage_monitor_init+0x314>)
 800552a:	2200      	movs	r2, #0
 800552c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8005530:	4b5b      	ldr	r3, [pc, #364]	; (80056a0 <voltage_monitor_init+0x314>)
 8005532:	2200      	movs	r2, #0
 8005534:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005538:	4b59      	ldr	r3, [pc, #356]	; (80056a0 <voltage_monitor_init+0x314>)
 800553a:	2200      	movs	r2, #0
 800553c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8005540:	4b57      	ldr	r3, [pc, #348]	; (80056a0 <voltage_monitor_init+0x314>)
 8005542:	f640 7245 	movw	r2, #3909	; 0xf45
 8005546:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 800554a:	4b55      	ldr	r3, [pc, #340]	; (80056a0 <voltage_monitor_init+0x314>)
 800554c:	2200      	movs	r2, #0
 800554e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8005552:	4b53      	ldr	r3, [pc, #332]	; (80056a0 <voltage_monitor_init+0x314>)
 8005554:	220a      	movs	r2, #10
 8005556:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 800555a:	4b51      	ldr	r3, [pc, #324]	; (80056a0 <voltage_monitor_init+0x314>)
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8005562:	4b4f      	ldr	r3, [pc, #316]	; (80056a0 <voltage_monitor_init+0x314>)
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 800556a:	4b4d      	ldr	r3, [pc, #308]	; (80056a0 <voltage_monitor_init+0x314>)
 800556c:	2200      	movs	r2, #0
 800556e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8005572:	4b4b      	ldr	r3, [pc, #300]	; (80056a0 <voltage_monitor_init+0x314>)
 8005574:	f640 7245 	movw	r2, #3909	; 0xf45
 8005578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3909;
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <voltage_monitor_init+0x314>)
 800557e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005582:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
//	rail_monitor[RAIL_5v].min_voltage = 3537;

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8005586:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <voltage_monitor_init+0x314>)
 8005588:	220b      	movs	r2, #11
 800558a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 800558e:	4b44      	ldr	r3, [pc, #272]	; (80056a0 <voltage_monitor_init+0x314>)
 8005590:	2200      	movs	r2, #0
 8005592:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8005596:	4b42      	ldr	r3, [pc, #264]	; (80056a0 <voltage_monitor_init+0x314>)
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 800559e:	4b40      	ldr	r3, [pc, #256]	; (80056a0 <voltage_monitor_init+0x314>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80055a6:	4b3e      	ldr	r3, [pc, #248]	; (80056a0 <voltage_monitor_init+0x314>)
 80055a8:	f640 72fb 	movw	r2, #4091	; 0xffb
 80055ac:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80055b0:	4b3b      	ldr	r3, [pc, #236]	; (80056a0 <voltage_monitor_init+0x314>)
 80055b2:	f640 6276 	movw	r2, #3702	; 0xe76
 80055b6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80055ba:	4b39      	ldr	r3, [pc, #228]	; (80056a0 <voltage_monitor_init+0x314>)
 80055bc:	220c      	movs	r2, #12
 80055be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80055c2:	4b37      	ldr	r3, [pc, #220]	; (80056a0 <voltage_monitor_init+0x314>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80055ca:	4b35      	ldr	r3, [pc, #212]	; (80056a0 <voltage_monitor_init+0x314>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 80055d2:	4b33      	ldr	r3, [pc, #204]	; (80056a0 <voltage_monitor_init+0x314>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 80055da:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <voltage_monitor_init+0x314>)
 80055dc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80055e0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80055e4:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <voltage_monitor_init+0x314>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 80055ec:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <voltage_monitor_init+0x314>)
 80055ee:	220d      	movs	r2, #13
 80055f0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80055f4:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <voltage_monitor_init+0x314>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80055fc:	4b28      	ldr	r3, [pc, #160]	; (80056a0 <voltage_monitor_init+0x314>)
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8005604:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <voltage_monitor_init+0x314>)
 8005606:	2200      	movs	r2, #0
 8005608:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 800560c:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <voltage_monitor_init+0x314>)
 800560e:	f640 7238 	movw	r2, #3896	; 0xf38
 8005612:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8005616:	4b22      	ldr	r3, [pc, #136]	; (80056a0 <voltage_monitor_init+0x314>)
 8005618:	f640 52c5 	movw	r2, #3525	; 0xdc5
 800561c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8005620:	4b1f      	ldr	r3, [pc, #124]	; (80056a0 <voltage_monitor_init+0x314>)
 8005622:	220e      	movs	r2, #14
 8005624:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005628:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <voltage_monitor_init+0x314>)
 800562a:	2200      	movs	r2, #0
 800562c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005630:	4b1b      	ldr	r3, [pc, #108]	; (80056a0 <voltage_monitor_init+0x314>)
 8005632:	2200      	movs	r2, #0
 8005634:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005638:	4b19      	ldr	r3, [pc, #100]	; (80056a0 <voltage_monitor_init+0x314>)
 800563a:	2200      	movs	r2, #0
 800563c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8005640:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <voltage_monitor_init+0x314>)
 8005642:	f640 7245 	movw	r2, #3909	; 0xf45
 8005646:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 800564a:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <voltage_monitor_init+0x314>)
 800564c:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005650:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <voltage_monitor_init+0x314>)
 8005656:	220f      	movs	r2, #15
 8005658:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 800565c:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <voltage_monitor_init+0x314>)
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <voltage_monitor_init+0x314>)
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 800566c:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <voltage_monitor_init+0x314>)
 800566e:	2200      	movs	r2, #0
 8005670:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <voltage_monitor_init+0x314>)
 8005676:	f241 0264 	movw	r2, #4196	; 0x1064
 800567a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 800567e:	4b08      	ldr	r3, [pc, #32]	; (80056a0 <voltage_monitor_init+0x314>)
 8005680:	2200      	movs	r2, #0
 8005682:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <voltage_monitor_init+0x314>)
 8005688:	2210      	movs	r2, #16
 800568a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 800568e:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <voltage_monitor_init+0x314>)
 8005690:	2200      	movs	r2, #0
 8005692:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8005696:	4b02      	ldr	r3, [pc, #8]	; (80056a0 <voltage_monitor_init+0x314>)
 8005698:	2200      	movs	r2, #0
 800569a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800569e:	e001      	b.n	80056a4 <voltage_monitor_init+0x318>
 80056a0:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 80056a4:	4b17      	ldr	r3, [pc, #92]	; (8005704 <voltage_monitor_init+0x378>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80056ac:	4b15      	ldr	r3, [pc, #84]	; (8005704 <voltage_monitor_init+0x378>)
 80056ae:	f640 5208 	movw	r2, #3336	; 0xd08
 80056b2:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 80056b6:	4b13      	ldr	r3, [pc, #76]	; (8005704 <voltage_monitor_init+0x378>)
 80056b8:	f640 32ca 	movw	r2, #3018	; 0xbca
 80056bc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80056c0:	4b10      	ldr	r3, [pc, #64]	; (8005704 <voltage_monitor_init+0x378>)
 80056c2:	2211      	movs	r2, #17
 80056c4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 80056c8:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <voltage_monitor_init+0x378>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 80056d0:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <voltage_monitor_init+0x378>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 80056d8:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <voltage_monitor_init+0x378>)
 80056da:	2200      	movs	r2, #0
 80056dc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80056e0:	4b08      	ldr	r3, [pc, #32]	; (8005704 <voltage_monitor_init+0x378>)
 80056e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80056e6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 80056ea:	4b06      	ldr	r3, [pc, #24]	; (8005704 <voltage_monitor_init+0x378>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 80056f2:	2301      	movs	r3, #1
 80056f4:	71fb      	strb	r3, [r7, #7]

	return status;
 80056f6:	79fb      	ldrb	r3, [r7, #7]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	24001f48 	.word	0x24001f48

08005708 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	460a      	mov	r2, r1
 8005712:	71fb      	strb	r3, [r7, #7]
 8005714:	4613      	mov	r3, r2
 8005716:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 800571c:	79fa      	ldrb	r2, [r7, #7]
 800571e:	4909      	ldr	r1, [pc, #36]	; (8005744 <set_rail_monitor_enable+0x3c>)
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	440b      	add	r3, r1
 800572a:	3302      	adds	r3, #2
 800572c:	79ba      	ldrb	r2, [r7, #6]
 800572e:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]

	return status;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	24001f48 	.word	0x24001f48

08005748 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005754:	463b      	mov	r3, r7
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe fc34 	bl	8003fc4 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 800575c:	f107 0310 	add.w	r3, r7, #16
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe fc5f 	bl	8004024 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005766:	f107 0308 	add.w	r3, r7, #8
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe fcac 	bl	80040c8 <sample_hk_adc3>
 8005770:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8005772:	4b25      	ldr	r3, [pc, #148]	; (8005808 <set_rail_monitor+0xc0>)
 8005774:	809a      	strh	r2, [r3, #4]
 8005776:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005778:	4b23      	ldr	r3, [pc, #140]	; (8005808 <set_rail_monitor+0xc0>)
 800577a:	81da      	strh	r2, [r3, #14]
 800577c:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 800577e:	4b22      	ldr	r3, [pc, #136]	; (8005808 <set_rail_monitor+0xc0>)
 8005780:	831a      	strh	r2, [r3, #24]
 8005782:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005784:	4b20      	ldr	r3, [pc, #128]	; (8005808 <set_rail_monitor+0xc0>)
 8005786:	845a      	strh	r2, [r3, #34]	; 0x22
 8005788:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 800578a:	4b1f      	ldr	r3, [pc, #124]	; (8005808 <set_rail_monitor+0xc0>)
 800578c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800578e:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005790:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <set_rail_monitor+0xc0>)
 8005792:	86da      	strh	r2, [r3, #54]	; 0x36
 8005794:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005796:	4b1c      	ldr	r3, [pc, #112]	; (8005808 <set_rail_monitor+0xc0>)
 8005798:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800579c:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 800579e:	4b1a      	ldr	r3, [pc, #104]	; (8005808 <set_rail_monitor+0xc0>)
 80057a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80057a4:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 80057a6:	4b18      	ldr	r3, [pc, #96]	; (8005808 <set_rail_monitor+0xc0>)
 80057a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80057ac:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 80057ae:	4b16      	ldr	r3, [pc, #88]	; (8005808 <set_rail_monitor+0xc0>)
 80057b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80057b4:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 80057b6:	4b14      	ldr	r3, [pc, #80]	; (8005808 <set_rail_monitor+0xc0>)
 80057b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80057bc:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <set_rail_monitor+0xc0>)
 80057c0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80057c4:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <set_rail_monitor+0xc0>)
 80057c8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80057cc:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 80057ce:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <set_rail_monitor+0xc0>)
 80057d0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80057d4:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <set_rail_monitor+0xc0>)
 80057d8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80057dc:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 80057de:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <set_rail_monitor+0xc0>)
 80057e0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80057e4:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 80057e6:	4b08      	ldr	r3, [pc, #32]	; (8005808 <set_rail_monitor+0xc0>)
 80057e8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80057ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 80057ee:	4b06      	ldr	r3, [pc, #24]	; (8005808 <set_rail_monitor+0xc0>)
 80057f0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 80057fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3728      	adds	r7, #40	; 0x28
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	24001f48 	.word	0x24001f48

0800580c <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005810:	4b02      	ldr	r3, [pc, #8]	; (800581c <get_rail_monitor+0x10>)
}
 8005812:	4618      	mov	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	24001f48 	.word	0x24001f48

08005820 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 800582e:	89fb      	ldrh	r3, [r7, #14]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	db05      	blt.n	8005842 <in_range+0x22>
 8005836:	89fb      	ldrh	r3, [r7, #14]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	429a      	cmp	r2, r3
 800583c:	dc01      	bgt.n	8005842 <in_range+0x22>
		return 1;
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <in_range+0x24>
	}
	return 0;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <monitor_rails>:


void monitor_rails() {
 8005850:	b590      	push	{r4, r7, lr}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	e062      	b.n	8005922 <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 800585c:	4935      	ldr	r1, [pc, #212]	; (8005934 <monitor_rails+0xe4>)
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	440b      	add	r3, r1
 800586a:	3302      	adds	r3, #2
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d054      	beq.n	800591c <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8005872:	4930      	ldr	r1, [pc, #192]	; (8005934 <monitor_rails+0xe4>)
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	440b      	add	r3, r1
 8005880:	3304      	adds	r3, #4
 8005882:	8818      	ldrh	r0, [r3, #0]
 8005884:	492b      	ldr	r1, [pc, #172]	; (8005934 <monitor_rails+0xe4>)
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	440b      	add	r3, r1
 8005892:	3308      	adds	r3, #8
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	461c      	mov	r4, r3
 8005898:	4926      	ldr	r1, [pc, #152]	; (8005934 <monitor_rails+0xe4>)
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	440b      	add	r3, r1
 80058a6:	3306      	adds	r3, #6
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	4621      	mov	r1, r4
 80058ae:	f7ff ffb7 	bl	8005820 <in_range>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d131      	bne.n	800591c <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 80058b8:	491e      	ldr	r1, [pc, #120]	; (8005934 <monitor_rails+0xe4>)
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	440b      	add	r3, r1
 80058c6:	3301      	adds	r3, #1
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	b2d8      	uxtb	r0, r3
 80058ce:	4919      	ldr	r1, [pc, #100]	; (8005934 <monitor_rails+0xe4>)
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	440b      	add	r3, r1
 80058dc:	3301      	adds	r3, #1
 80058de:	4602      	mov	r2, r0
 80058e0:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 80058e2:	4914      	ldr	r1, [pc, #80]	; (8005934 <monitor_rails+0xe4>)
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	440b      	add	r3, r1
 80058f0:	3301      	adds	r3, #1
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d111      	bne.n	800591c <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 80058f8:	490e      	ldr	r1, [pc, #56]	; (8005934 <monitor_rails+0xe4>)
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	440b      	add	r3, r1
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 f815 	bl	8005938 <get_rail_name_error_detail>
 800590e:	4603      	mov	r3, r0
 8005910:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 8005912:	2300      	movs	r3, #0
 8005914:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 8005916:	6838      	ldr	r0, [r7, #0]
 8005918:	f7fc fb0a 	bl	8001f30 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3301      	adds	r3, #1
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b11      	cmp	r3, #17
 8005926:	dd99      	ble.n	800585c <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	bd90      	pop	{r4, r7, pc}
 8005932:	bf00      	nop
 8005934:	24001f48 	.word	0x24001f48

08005938 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b11      	cmp	r3, #17
 8005946:	d84b      	bhi.n	80059e0 <get_rail_name_error_detail+0xa8>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <get_rail_name_error_detail+0x18>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005999 	.word	0x08005999
 8005954:	0800599d 	.word	0x0800599d
 8005958:	080059a1 	.word	0x080059a1
 800595c:	080059a5 	.word	0x080059a5
 8005960:	080059a9 	.word	0x080059a9
 8005964:	080059ad 	.word	0x080059ad
 8005968:	080059b1 	.word	0x080059b1
 800596c:	080059b5 	.word	0x080059b5
 8005970:	080059b9 	.word	0x080059b9
 8005974:	080059bd 	.word	0x080059bd
 8005978:	080059c1 	.word	0x080059c1
 800597c:	080059c5 	.word	0x080059c5
 8005980:	080059c9 	.word	0x080059c9
 8005984:	080059cd 	.word	0x080059cd
 8005988:	080059d1 	.word	0x080059d1
 800598c:	080059d5 	.word	0x080059d5
 8005990:	080059d9 	.word	0x080059d9
 8005994:	080059dd 	.word	0x080059dd
	case RAIL_vsense:
		return ED_vsense;
 8005998:	2306      	movs	r3, #6
 800599a:	e022      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 800599c:	2307      	movs	r3, #7
 800599e:	e020      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 80059a0:	2308      	movs	r3, #8
 80059a2:	e01e      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 80059a4:	2309      	movs	r3, #9
 80059a6:	e01c      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 80059a8:	230a      	movs	r3, #10
 80059aa:	e01a      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 80059ac:	230b      	movs	r3, #11
 80059ae:	e018      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 80059b0:	230c      	movs	r3, #12
 80059b2:	e016      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 80059b4:	230d      	movs	r3, #13
 80059b6:	e014      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 80059b8:	230e      	movs	r3, #14
 80059ba:	e012      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 80059bc:	230f      	movs	r3, #15
 80059be:	e010      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 80059c0:	2310      	movs	r3, #16
 80059c2:	e00e      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 80059c4:	2311      	movs	r3, #17
 80059c6:	e00c      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 80059c8:	2312      	movs	r3, #18
 80059ca:	e00a      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 80059cc:	2313      	movs	r3, #19
 80059ce:	e008      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 80059d0:	2314      	movs	r3, #20
 80059d2:	e006      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 80059d4:	2315      	movs	r3, #21
 80059d6:	e004      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 80059d8:	2316      	movs	r3, #22
 80059da:	e002      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 80059dc:	2317      	movs	r3, #23
 80059de:	e000      	b.n	80059e2 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 80059e0:	231a      	movs	r3, #26
	}
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop

080059f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80059f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80059f4:	f7fe fff0 	bl	80049d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059f8:	480c      	ldr	r0, [pc, #48]	; (8005a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80059fa:	490d      	ldr	r1, [pc, #52]	; (8005a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80059fc:	4a0d      	ldr	r2, [pc, #52]	; (8005a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80059fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a00:	e002      	b.n	8005a08 <LoopCopyDataInit>

08005a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a06:	3304      	adds	r3, #4

08005a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a0c:	d3f9      	bcc.n	8005a02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a10:	4c0a      	ldr	r4, [pc, #40]	; (8005a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a14:	e001      	b.n	8005a1a <LoopFillZerobss>

08005a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a18:	3204      	adds	r2, #4

08005a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a1c:	d3fb      	bcc.n	8005a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a1e:	f014 fabb 	bl	8019f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a22:	f7fd fd99 	bl	8003558 <main>
  bx  lr
 8005a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005a2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005a30:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8005a34:	0801aec8 	.word	0x0801aec8
  ldr r2, =_sbss
 8005a38:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8005a3c:	2400697c 	.word	0x2400697c

08005a40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a40:	e7fe      	b.n	8005a40 <ADC3_IRQHandler>
	...

08005a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a4a:	2003      	movs	r0, #3
 8005a4c:	f001 fd39 	bl	80074c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a50:	f008 fe7c 	bl	800e74c <HAL_RCC_GetSysClockFreq>
 8005a54:	4602      	mov	r2, r0
 8005a56:	4b15      	ldr	r3, [pc, #84]	; (8005aac <HAL_Init+0x68>)
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	4913      	ldr	r1, [pc, #76]	; (8005ab0 <HAL_Init+0x6c>)
 8005a62:	5ccb      	ldrb	r3, [r1, r3]
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <HAL_Init+0x68>)
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	4a0e      	ldr	r2, [pc, #56]	; (8005ab0 <HAL_Init+0x6c>)
 8005a78:	5cd3      	ldrb	r3, [r2, r3]
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	fa22 f303 	lsr.w	r3, r2, r3
 8005a84:	4a0b      	ldr	r2, [pc, #44]	; (8005ab4 <HAL_Init+0x70>)
 8005a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a88:	4a0b      	ldr	r2, [pc, #44]	; (8005ab8 <HAL_Init+0x74>)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a8e:	2005      	movs	r0, #5
 8005a90:	f7fe fd8c 	bl	80045ac <HAL_InitTick>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e002      	b.n	8005aa4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005a9e:	f7fe fd67 	bl	8004570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	0801ae14 	.word	0x0801ae14
 8005ab4:	240000c4 	.word	0x240000c4
 8005ab8:	240000c0 	.word	0x240000c0

08005abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <HAL_IncTick+0x20>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <HAL_IncTick+0x24>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4413      	add	r3, r2
 8005acc:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <HAL_IncTick+0x24>)
 8005ace:	6013      	str	r3, [r2, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	240000cc 	.word	0x240000cc
 8005ae0:	24001ffc 	.word	0x24001ffc

08005ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <HAL_GetTick+0x14>)
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	24001ffc 	.word	0x24001ffc

08005afc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <HAL_GetREVID+0x14>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	0c1b      	lsrs	r3, r3, #16
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	5c001000 	.word	0x5c001000

08005b14 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	401a      	ands	r2, r3
 8005b28:	4904      	ldr	r1, [pc, #16]	; (8005b3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	604b      	str	r3, [r1, #4]
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	58000400 	.word	0x58000400

08005b40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	609a      	str	r2, [r3, #8]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3360      	adds	r3, #96	; 0x60
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	fa01 f303 	lsl.w	r3, r1, r3
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	611a      	str	r2, [r3, #16]
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3360      	adds	r3, #96	; 0x60
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	601a      	str	r2, [r3, #0]
  }
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b087      	sub	sp, #28
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3330      	adds	r3, #48	; 0x30
 8005c86:	461a      	mov	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	0a1b      	lsrs	r3, r3, #8
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	4413      	add	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	211f      	movs	r1, #31
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	401a      	ands	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	0e9b      	lsrs	r3, r3, #26
 8005cae:	f003 011f 	and.w	r1, r3, #31
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f023 0203 	bic.w	r2, r3, #3
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60da      	str	r2, [r3, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3314      	adds	r3, #20
 8005d04:	461a      	mov	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	0e5b      	lsrs	r3, r3, #25
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	4413      	add	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	0d1b      	lsrs	r3, r3, #20
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	2107      	movs	r1, #7
 8005d22:	fa01 f303 	lsl.w	r3, r1, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	401a      	ands	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	0d1b      	lsrs	r3, r3, #20
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	fa01 f303 	lsl.w	r3, r1, r3
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d64:	43db      	mvns	r3, r3
 8005d66:	401a      	ands	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f003 0318 	and.w	r3, r3, #24
 8005d6e:	4908      	ldr	r1, [pc, #32]	; (8005d90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005d70:	40d9      	lsrs	r1, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	400b      	ands	r3, r1
 8005d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	000fffff 	.word	0x000fffff

08005d94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 031f 	and.w	r3, r3, #31
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6093      	str	r3, [r2, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	5fffffc0 	.word	0x5fffffc0

08005dd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de8:	d101      	bne.n	8005dee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <LL_ADC_EnableInternalRegulator+0x24>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	6fffffc0 	.word	0x6fffffc0

08005e24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e38:	d101      	bne.n	8005e3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <LL_ADC_Enable+0x24>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	f043 0201 	orr.w	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	7fffffc0 	.word	0x7fffffc0

08005e74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <LL_ADC_Disable+0x24>)
 8005e82:	4013      	ands	r3, r2
 8005e84:	f043 0202 	orr.w	r2, r3, #2
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	7fffffc0 	.word	0x7fffffc0

08005e9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <LL_ADC_IsEnabled+0x18>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <LL_ADC_IsEnabled+0x1a>
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d101      	bne.n	8005eda <LL_ADC_IsDisableOngoing+0x18>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <LL_ADC_IsDisableOngoing+0x1a>
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <LL_ADC_REG_StartConversion+0x24>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	f043 0204 	orr.w	r2, r3, #4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	7fffffc0 	.word	0x7fffffc0

08005f10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d101      	bne.n	8005f28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d101      	bne.n	8005f4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f5c:	b590      	push	{r4, r7, lr}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e18f      	b.n	8006296 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d109      	bne.n	8005f98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7fa fce1 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff ff19 	bl	8005dd4 <LL_ADC_IsDeepPowerDownEnabled>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff feff 	bl	8005db0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff ff34 	bl	8005e24 <LL_ADC_IsInternalRegulatorEnabled>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d114      	bne.n	8005fec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff ff18 	bl	8005dfc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fcc:	4b87      	ldr	r3, [pc, #540]	; (80061ec <HAL_ADC_Init+0x290>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	099b      	lsrs	r3, r3, #6
 8005fd2:	4a87      	ldr	r2, [pc, #540]	; (80061f0 <HAL_ADC_Init+0x294>)
 8005fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd8:	099b      	lsrs	r3, r3, #6
 8005fda:	3301      	adds	r3, #1
 8005fdc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005fde:	e002      	b.n	8005fe6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f9      	bne.n	8005fe0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff ff17 	bl	8005e24 <LL_ADC_IsInternalRegulatorEnabled>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10d      	bne.n	8006018 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	f043 0210 	orr.w	r2, r3, #16
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600c:	f043 0201 	orr.w	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff ff77 	bl	8005f10 <LL_ADC_REG_IsConversionOngoing>
 8006022:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b00      	cmp	r3, #0
 800602e:	f040 8129 	bne.w	8006284 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 8125 	bne.w	8006284 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006042:	f043 0202 	orr.w	r2, r3, #2
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff ff24 	bl	8005e9c <LL_ADC_IsEnabled>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d136      	bne.n	80060c8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a65      	ldr	r2, [pc, #404]	; (80061f4 <HAL_ADC_Init+0x298>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <HAL_ADC_Init+0x112>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a63      	ldr	r2, [pc, #396]	; (80061f8 <HAL_ADC_Init+0x29c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d10e      	bne.n	800608c <HAL_ADC_Init+0x130>
 800606e:	4861      	ldr	r0, [pc, #388]	; (80061f4 <HAL_ADC_Init+0x298>)
 8006070:	f7ff ff14 	bl	8005e9c <LL_ADC_IsEnabled>
 8006074:	4604      	mov	r4, r0
 8006076:	4860      	ldr	r0, [pc, #384]	; (80061f8 <HAL_ADC_Init+0x29c>)
 8006078:	f7ff ff10 	bl	8005e9c <LL_ADC_IsEnabled>
 800607c:	4603      	mov	r3, r0
 800607e:	4323      	orrs	r3, r4
 8006080:	2b00      	cmp	r3, #0
 8006082:	bf0c      	ite	eq
 8006084:	2301      	moveq	r3, #1
 8006086:	2300      	movne	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e008      	b.n	800609e <HAL_ADC_Init+0x142>
 800608c:	485b      	ldr	r0, [pc, #364]	; (80061fc <HAL_ADC_Init+0x2a0>)
 800608e:	f7ff ff05 	bl	8005e9c <LL_ADC_IsEnabled>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d012      	beq.n	80060c8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a53      	ldr	r2, [pc, #332]	; (80061f4 <HAL_ADC_Init+0x298>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_ADC_Init+0x15a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a51      	ldr	r2, [pc, #324]	; (80061f8 <HAL_ADC_Init+0x29c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <HAL_ADC_Init+0x15e>
 80060b6:	4a52      	ldr	r2, [pc, #328]	; (8006200 <HAL_ADC_Init+0x2a4>)
 80060b8:	e000      	b.n	80060bc <HAL_ADC_Init+0x160>
 80060ba:	4a52      	ldr	r2, [pc, #328]	; (8006204 <HAL_ADC_Init+0x2a8>)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7ff fd3c 	bl	8005b40 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80060c8:	f7ff fd18 	bl	8005afc <HAL_GetREVID>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d914      	bls.n	8006100 <HAL_ADC_Init+0x1a4>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d110      	bne.n	8006100 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	7d5b      	ldrb	r3, [r3, #21]
 80060e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80060e8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80060ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	7f1b      	ldrb	r3, [r3, #28]
 80060f4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80060f6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80060f8:	f043 030c 	orr.w	r3, r3, #12
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e00d      	b.n	800611c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	7d5b      	ldrb	r3, [r3, #21]
 8006104:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800610a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006110:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	7f1b      	ldrb	r3, [r3, #28]
 8006116:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006118:	4313      	orrs	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	7f1b      	ldrb	r3, [r3, #28]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d106      	bne.n	8006132 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	3b01      	subs	r3, #1
 800612a:	045b      	lsls	r3, r3, #17
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4313      	orrs	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4313      	orrs	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	4b2c      	ldr	r3, [pc, #176]	; (8006208 <HAL_ADC_Init+0x2ac>)
 8006156:	4013      	ands	r3, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	69b9      	ldr	r1, [r7, #24]
 800615e:	430b      	orrs	r3, r1
 8006160:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fed2 	bl	8005f10 <LL_ADC_REG_IsConversionOngoing>
 800616c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff fedf 	bl	8005f36 <LL_ADC_INJ_IsConversionOngoing>
 8006178:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d15f      	bne.n	8006240 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d15c      	bne.n	8006240 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	7d1b      	ldrb	r3, [r3, #20]
 800618a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8006190:	4313      	orrs	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	4b1c      	ldr	r3, [pc, #112]	; (800620c <HAL_ADC_Init+0x2b0>)
 800619c:	4013      	ands	r3, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	69b9      	ldr	r1, [r7, #24]
 80061a4:	430b      	orrs	r3, r1
 80061a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d130      	bne.n	8006214 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	4b14      	ldr	r3, [pc, #80]	; (8006210 <HAL_ADC_Init+0x2b4>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061c6:	3a01      	subs	r2, #1
 80061c8:	0411      	lsls	r1, r2, #16
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061ce:	4311      	orrs	r1, r2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80061d4:	4311      	orrs	r1, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061da:	430a      	orrs	r2, r1
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	611a      	str	r2, [r3, #16]
 80061e8:	e01c      	b.n	8006224 <HAL_ADC_Init+0x2c8>
 80061ea:	bf00      	nop
 80061ec:	240000c0 	.word	0x240000c0
 80061f0:	053e2d63 	.word	0x053e2d63
 80061f4:	40022000 	.word	0x40022000
 80061f8:	40022100 	.word	0x40022100
 80061fc:	58026000 	.word	0x58026000
 8006200:	40022300 	.word	0x40022300
 8006204:	58026300 	.word	0x58026300
 8006208:	fff0c003 	.word	0xfff0c003
 800620c:	ffffbffc 	.word	0xffffbffc
 8006210:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0201 	bic.w	r2, r2, #1
 8006222:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fdec 	bl	8006e18 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d10c      	bne.n	8006262 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	f023 010f 	bic.w	r1, r3, #15
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	1e5a      	subs	r2, r3, #1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
 8006260:	e007      	b.n	8006272 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 020f 	bic.w	r2, r2, #15
 8006270:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	f043 0201 	orr.w	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	655a      	str	r2, [r3, #84]	; 0x54
 8006282:	e007      	b.n	8006294 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006288:	f043 0210 	orr.w	r2, r3, #16
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006294:	7ffb      	ldrb	r3, [r7, #31]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3724      	adds	r7, #36	; 0x24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd90      	pop	{r4, r7, pc}
 800629e:	bf00      	nop

080062a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a55      	ldr	r2, [pc, #340]	; (8006408 <HAL_ADC_Start_DMA+0x168>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <HAL_ADC_Start_DMA+0x20>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a54      	ldr	r2, [pc, #336]	; (800640c <HAL_ADC_Start_DMA+0x16c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d101      	bne.n	80062c4 <HAL_ADC_Start_DMA+0x24>
 80062c0:	4b53      	ldr	r3, [pc, #332]	; (8006410 <HAL_ADC_Start_DMA+0x170>)
 80062c2:	e000      	b.n	80062c6 <HAL_ADC_Start_DMA+0x26>
 80062c4:	4b53      	ldr	r3, [pc, #332]	; (8006414 <HAL_ADC_Start_DMA+0x174>)
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff fd64 	bl	8005d94 <LL_ADC_GetMultimode>
 80062cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fe1c 	bl	8005f10 <LL_ADC_REG_IsConversionOngoing>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f040 808c 	bne.w	80063f8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_ADC_Start_DMA+0x4e>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e087      	b.n	80063fe <HAL_ADC_Start_DMA+0x15e>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d002      	beq.n	8006308 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b09      	cmp	r3, #9
 8006306:	d170      	bne.n	80063ea <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fc07 	bl	8006b1c <ADC_Enable>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d163      	bne.n	80063e0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800631c:	4b3e      	ldr	r3, [pc, #248]	; (8006418 <HAL_ADC_Start_DMA+0x178>)
 800631e:	4013      	ands	r3, r2
 8006320:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a37      	ldr	r2, [pc, #220]	; (800640c <HAL_ADC_Start_DMA+0x16c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d002      	beq.n	8006338 <HAL_ADC_Start_DMA+0x98>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	e000      	b.n	800633a <HAL_ADC_Start_DMA+0x9a>
 8006338:	4b33      	ldr	r3, [pc, #204]	; (8006408 <HAL_ADC_Start_DMA+0x168>)
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	4293      	cmp	r3, r2
 8006340:	d002      	beq.n	8006348 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d105      	bne.n	8006354 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006364:	f023 0206 	bic.w	r2, r3, #6
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	659a      	str	r2, [r3, #88]	; 0x58
 800636c:	e002      	b.n	8006374 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006378:	4a28      	ldr	r2, [pc, #160]	; (800641c <HAL_ADC_Start_DMA+0x17c>)
 800637a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006380:	4a27      	ldr	r2, [pc, #156]	; (8006420 <HAL_ADC_Start_DMA+0x180>)
 8006382:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006388:	4a26      	ldr	r2, [pc, #152]	; (8006424 <HAL_ADC_Start_DMA+0x184>)
 800638a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	221c      	movs	r2, #28
 8006392:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0210 	orr.w	r2, r2, #16
 80063aa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f7ff fc89 	bl	8005cce <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3340      	adds	r3, #64	; 0x40
 80063c6:	4619      	mov	r1, r3
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f002 f80e 	bl	80083ec <HAL_DMA_Start_IT>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fd85 	bl	8005ee8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80063de:	e00d      	b.n	80063fc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80063e8:	e008      	b.n	80063fc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80063f6:	e001      	b.n	80063fc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
 80063fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40022000 	.word	0x40022000
 800640c:	40022100 	.word	0x40022100
 8006410:	40022300 	.word	0x40022300
 8006414:	58026300 	.word	0x58026300
 8006418:	fffff0fe 	.word	0xfffff0fe
 800641c:	08006cef 	.word	0x08006cef
 8006420:	08006dc7 	.word	0x08006dc7
 8006424:	08006de3 	.word	0x08006de3

08006428 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b0a1      	sub	sp, #132	; 0x84
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4a65      	ldr	r2, [pc, #404]	; (8006614 <HAL_ADC_ConfigChannel+0x1b0>)
 800647e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_ADC_ConfigChannel+0x2a>
 800648a:	2302      	movs	r3, #2
 800648c:	e32e      	b.n	8006aec <HAL_ADC_ConfigChannel+0x688>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fd38 	bl	8005f10 <LL_ADC_REG_IsConversionOngoing>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f040 8313 	bne.w	8006ace <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	db2c      	blt.n	800650a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d108      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x6a>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	0e9b      	lsrs	r3, r3, #26
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	2201      	movs	r2, #1
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	e016      	b.n	80064fc <HAL_ADC_ConfigChannel+0x98>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064d6:	fa93 f3a3 	rbit	r3, r3
 80064da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80064dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80064e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80064e6:	2320      	movs	r3, #32
 80064e8:	e003      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80064ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ec:	fab3 f383 	clz	r3, r3
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2201      	movs	r2, #1
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	69d1      	ldr	r1, [r2, #28]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	430b      	orrs	r3, r1
 8006508:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6859      	ldr	r1, [r3, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	f7ff fbad 	bl	8005c76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fcf5 	bl	8005f10 <LL_ADC_REG_IsConversionOngoing>
 8006526:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff fd02 	bl	8005f36 <LL_ADC_INJ_IsConversionOngoing>
 8006532:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006536:	2b00      	cmp	r3, #0
 8006538:	f040 80b8 	bne.w	80066ac <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800653c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800653e:	2b00      	cmp	r3, #0
 8006540:	f040 80b4 	bne.w	80066ac <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6819      	ldr	r1, [r3, #0]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	461a      	mov	r2, r3
 8006552:	f7ff fbcf 	bl	8005cf4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006556:	4b30      	ldr	r3, [pc, #192]	; (8006618 <HAL_ADC_ConfigChannel+0x1b4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800655e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006562:	d10b      	bne.n	800657c <HAL_ADC_ConfigChannel+0x118>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	695a      	ldr	r2, [r3, #20]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	089b      	lsrs	r3, r3, #2
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	fa02 f303 	lsl.w	r3, r2, r3
 800657a:	e01d      	b.n	80065b8 <HAL_ADC_ConfigChannel+0x154>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <HAL_ADC_ConfigChannel+0x13e>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695a      	ldr	r2, [r3, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	089b      	lsrs	r3, r3, #2
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	e00a      	b.n	80065b8 <HAL_ADC_ConfigChannel+0x154>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695a      	ldr	r2, [r3, #20]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	089b      	lsrs	r3, r3, #2
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d02c      	beq.n	800661c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6919      	ldr	r1, [r3, #16]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d0:	f7ff faea 	bl	8005ba8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	6919      	ldr	r1, [r3, #16]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	7e5b      	ldrb	r3, [r3, #25]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d102      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x186>
 80065e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065e8:	e000      	b.n	80065ec <HAL_ADC_ConfigChannel+0x188>
 80065ea:	2300      	movs	r3, #0
 80065ec:	461a      	mov	r2, r3
 80065ee:	f7ff fb14 	bl	8005c1a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6919      	ldr	r1, [r3, #16]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	7e1b      	ldrb	r3, [r3, #24]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d102      	bne.n	8006608 <HAL_ADC_ConfigChannel+0x1a4>
 8006602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006606:	e000      	b.n	800660a <HAL_ADC_ConfigChannel+0x1a6>
 8006608:	2300      	movs	r3, #0
 800660a:	461a      	mov	r2, r3
 800660c:	f7ff faec 	bl	8005be8 <LL_ADC_SetDataRightShift>
 8006610:	e04c      	b.n	80066ac <HAL_ADC_ConfigChannel+0x248>
 8006612:	bf00      	nop
 8006614:	47ff0000 	.word	0x47ff0000
 8006618:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	069b      	lsls	r3, r3, #26
 800662c:	429a      	cmp	r2, r3
 800662e:	d107      	bne.n	8006640 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800663e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	069b      	lsls	r3, r3, #26
 8006650:	429a      	cmp	r2, r3
 8006652:	d107      	bne.n	8006664 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006662:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800666a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	069b      	lsls	r3, r3, #26
 8006674:	429a      	cmp	r2, r3
 8006676:	d107      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006686:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800668e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	069b      	lsls	r3, r3, #26
 8006698:	429a      	cmp	r2, r3
 800669a:	d107      	bne.n	80066ac <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80066aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff fbf3 	bl	8005e9c <LL_ADC_IsEnabled>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f040 8211 	bne.w	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	461a      	mov	r2, r3
 80066cc:	f7ff fb3e 	bl	8005d4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	4aa1      	ldr	r2, [pc, #644]	; (800695c <HAL_ADC_ConfigChannel+0x4f8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	f040 812e 	bne.w	8006938 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10b      	bne.n	8006704 <HAL_ADC_ConfigChannel+0x2a0>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	0e9b      	lsrs	r3, r3, #26
 80066f2:	3301      	adds	r3, #1
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	2b09      	cmp	r3, #9
 80066fa:	bf94      	ite	ls
 80066fc:	2301      	movls	r3, #1
 80066fe:	2300      	movhi	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	e019      	b.n	8006738 <HAL_ADC_ConfigChannel+0x2d4>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800670c:	fa93 f3a3 	rbit	r3, r3
 8006710:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006714:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800671c:	2320      	movs	r3, #32
 800671e:	e003      	b.n	8006728 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006722:	fab3 f383 	clz	r3, r3
 8006726:	b2db      	uxtb	r3, r3
 8006728:	3301      	adds	r3, #1
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	2b09      	cmp	r3, #9
 8006730:	bf94      	ite	ls
 8006732:	2301      	movls	r3, #1
 8006734:	2300      	movhi	r3, #0
 8006736:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006738:	2b00      	cmp	r3, #0
 800673a:	d079      	beq.n	8006830 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006744:	2b00      	cmp	r3, #0
 8006746:	d107      	bne.n	8006758 <HAL_ADC_ConfigChannel+0x2f4>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	0e9b      	lsrs	r3, r3, #26
 800674e:	3301      	adds	r3, #1
 8006750:	069b      	lsls	r3, r3, #26
 8006752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006756:	e015      	b.n	8006784 <HAL_ADC_ConfigChannel+0x320>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006760:	fa93 f3a3 	rbit	r3, r3
 8006764:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006768:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800676a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006770:	2320      	movs	r3, #32
 8006772:	e003      	b.n	800677c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006776:	fab3 f383 	clz	r3, r3
 800677a:	b2db      	uxtb	r3, r3
 800677c:	3301      	adds	r3, #1
 800677e:	069b      	lsls	r3, r3, #26
 8006780:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800678c:	2b00      	cmp	r3, #0
 800678e:	d109      	bne.n	80067a4 <HAL_ADC_ConfigChannel+0x340>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	0e9b      	lsrs	r3, r3, #26
 8006796:	3301      	adds	r3, #1
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	2101      	movs	r1, #1
 800679e:	fa01 f303 	lsl.w	r3, r1, r3
 80067a2:	e017      	b.n	80067d4 <HAL_ADC_ConfigChannel+0x370>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ac:	fa93 f3a3 	rbit	r3, r3
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80067b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80067b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80067bc:	2320      	movs	r3, #32
 80067be:	e003      	b.n	80067c8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80067c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c2:	fab3 f383 	clz	r3, r3
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	3301      	adds	r3, #1
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2101      	movs	r1, #1
 80067d0:	fa01 f303 	lsl.w	r3, r1, r3
 80067d4:	ea42 0103 	orr.w	r1, r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <HAL_ADC_ConfigChannel+0x396>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	0e9b      	lsrs	r3, r3, #26
 80067ea:	3301      	adds	r3, #1
 80067ec:	f003 021f 	and.w	r2, r3, #31
 80067f0:	4613      	mov	r3, r2
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4413      	add	r3, r2
 80067f6:	051b      	lsls	r3, r3, #20
 80067f8:	e018      	b.n	800682c <HAL_ADC_ConfigChannel+0x3c8>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	fa93 f3a3 	rbit	r3, r3
 8006806:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8006812:	2320      	movs	r3, #32
 8006814:	e003      	b.n	800681e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	fab3 f383 	clz	r3, r3
 800681c:	b2db      	uxtb	r3, r3
 800681e:	3301      	adds	r3, #1
 8006820:	f003 021f 	and.w	r2, r3, #31
 8006824:	4613      	mov	r3, r2
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	4413      	add	r3, r2
 800682a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800682c:	430b      	orrs	r3, r1
 800682e:	e07e      	b.n	800692e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006838:	2b00      	cmp	r3, #0
 800683a:	d107      	bne.n	800684c <HAL_ADC_ConfigChannel+0x3e8>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	0e9b      	lsrs	r3, r3, #26
 8006842:	3301      	adds	r3, #1
 8006844:	069b      	lsls	r3, r3, #26
 8006846:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800684a:	e015      	b.n	8006878 <HAL_ADC_ConfigChannel+0x414>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	fa93 f3a3 	rbit	r3, r3
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8006864:	2320      	movs	r3, #32
 8006866:	e003      	b.n	8006870 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	fab3 f383 	clz	r3, r3
 800686e:	b2db      	uxtb	r3, r3
 8006870:	3301      	adds	r3, #1
 8006872:	069b      	lsls	r3, r3, #26
 8006874:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <HAL_ADC_ConfigChannel+0x434>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	0e9b      	lsrs	r3, r3, #26
 800688a:	3301      	adds	r3, #1
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	2101      	movs	r1, #1
 8006892:	fa01 f303 	lsl.w	r3, r1, r3
 8006896:	e017      	b.n	80068c8 <HAL_ADC_ConfigChannel+0x464>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	fa93 f3a3 	rbit	r3, r3
 80068a4:	61bb      	str	r3, [r7, #24]
  return result;
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80068b0:	2320      	movs	r3, #32
 80068b2:	e003      	b.n	80068bc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	fab3 f383 	clz	r3, r3
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	3301      	adds	r3, #1
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2101      	movs	r1, #1
 80068c4:	fa01 f303 	lsl.w	r3, r1, r3
 80068c8:	ea42 0103 	orr.w	r1, r2, r3
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10d      	bne.n	80068f4 <HAL_ADC_ConfigChannel+0x490>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	0e9b      	lsrs	r3, r3, #26
 80068de:	3301      	adds	r3, #1
 80068e0:	f003 021f 	and.w	r2, r3, #31
 80068e4:	4613      	mov	r3, r2
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	4413      	add	r3, r2
 80068ea:	3b1e      	subs	r3, #30
 80068ec:	051b      	lsls	r3, r3, #20
 80068ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068f2:	e01b      	b.n	800692c <HAL_ADC_ConfigChannel+0x4c8>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	fa93 f3a3 	rbit	r3, r3
 8006900:	60fb      	str	r3, [r7, #12]
  return result;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800690c:	2320      	movs	r3, #32
 800690e:	e003      	b.n	8006918 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	fab3 f383 	clz	r3, r3
 8006916:	b2db      	uxtb	r3, r3
 8006918:	3301      	adds	r3, #1
 800691a:	f003 021f 	and.w	r2, r3, #31
 800691e:	4613      	mov	r3, r2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	4413      	add	r3, r2
 8006924:	3b1e      	subs	r3, #30
 8006926:	051b      	lsls	r3, r3, #20
 8006928:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800692c:	430b      	orrs	r3, r1
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	6892      	ldr	r2, [r2, #8]
 8006932:	4619      	mov	r1, r3
 8006934:	f7ff f9de 	bl	8005cf4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f280 80cf 	bge.w	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a06      	ldr	r2, [pc, #24]	; (8006960 <HAL_ADC_ConfigChannel+0x4fc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d004      	beq.n	8006956 <HAL_ADC_ConfigChannel+0x4f2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a04      	ldr	r2, [pc, #16]	; (8006964 <HAL_ADC_ConfigChannel+0x500>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d10a      	bne.n	800696c <HAL_ADC_ConfigChannel+0x508>
 8006956:	4b04      	ldr	r3, [pc, #16]	; (8006968 <HAL_ADC_ConfigChannel+0x504>)
 8006958:	e009      	b.n	800696e <HAL_ADC_ConfigChannel+0x50a>
 800695a:	bf00      	nop
 800695c:	47ff0000 	.word	0x47ff0000
 8006960:	40022000 	.word	0x40022000
 8006964:	40022100 	.word	0x40022100
 8006968:	40022300 	.word	0x40022300
 800696c:	4b61      	ldr	r3, [pc, #388]	; (8006af4 <HAL_ADC_ConfigChannel+0x690>)
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff f90c 	bl	8005b8c <LL_ADC_GetCommonPathInternalCh>
 8006974:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a5f      	ldr	r2, [pc, #380]	; (8006af8 <HAL_ADC_ConfigChannel+0x694>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_ADC_ConfigChannel+0x526>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a5d      	ldr	r2, [pc, #372]	; (8006afc <HAL_ADC_ConfigChannel+0x698>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10e      	bne.n	80069a8 <HAL_ADC_ConfigChannel+0x544>
 800698a:	485b      	ldr	r0, [pc, #364]	; (8006af8 <HAL_ADC_ConfigChannel+0x694>)
 800698c:	f7ff fa86 	bl	8005e9c <LL_ADC_IsEnabled>
 8006990:	4604      	mov	r4, r0
 8006992:	485a      	ldr	r0, [pc, #360]	; (8006afc <HAL_ADC_ConfigChannel+0x698>)
 8006994:	f7ff fa82 	bl	8005e9c <LL_ADC_IsEnabled>
 8006998:	4603      	mov	r3, r0
 800699a:	4323      	orrs	r3, r4
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf0c      	ite	eq
 80069a0:	2301      	moveq	r3, #1
 80069a2:	2300      	movne	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	e008      	b.n	80069ba <HAL_ADC_ConfigChannel+0x556>
 80069a8:	4855      	ldr	r0, [pc, #340]	; (8006b00 <HAL_ADC_ConfigChannel+0x69c>)
 80069aa:	f7ff fa77 	bl	8005e9c <LL_ADC_IsEnabled>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bf0c      	ite	eq
 80069b4:	2301      	moveq	r3, #1
 80069b6:	2300      	movne	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d07d      	beq.n	8006aba <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a50      	ldr	r2, [pc, #320]	; (8006b04 <HAL_ADC_ConfigChannel+0x6a0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d130      	bne.n	8006a2a <HAL_ADC_ConfigChannel+0x5c6>
 80069c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d12b      	bne.n	8006a2a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a4a      	ldr	r2, [pc, #296]	; (8006b00 <HAL_ADC_ConfigChannel+0x69c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	f040 8081 	bne.w	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a45      	ldr	r2, [pc, #276]	; (8006af8 <HAL_ADC_ConfigChannel+0x694>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d004      	beq.n	80069f2 <HAL_ADC_ConfigChannel+0x58e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a43      	ldr	r2, [pc, #268]	; (8006afc <HAL_ADC_ConfigChannel+0x698>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d101      	bne.n	80069f6 <HAL_ADC_ConfigChannel+0x592>
 80069f2:	4a45      	ldr	r2, [pc, #276]	; (8006b08 <HAL_ADC_ConfigChannel+0x6a4>)
 80069f4:	e000      	b.n	80069f8 <HAL_ADC_ConfigChannel+0x594>
 80069f6:	4a3f      	ldr	r2, [pc, #252]	; (8006af4 <HAL_ADC_ConfigChannel+0x690>)
 80069f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f7ff f8b0 	bl	8005b66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a06:	4b41      	ldr	r3, [pc, #260]	; (8006b0c <HAL_ADC_ConfigChannel+0x6a8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	099b      	lsrs	r3, r3, #6
 8006a0c:	4a40      	ldr	r2, [pc, #256]	; (8006b10 <HAL_ADC_ConfigChannel+0x6ac>)
 8006a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a12:	099b      	lsrs	r3, r3, #6
 8006a14:	3301      	adds	r3, #1
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006a1a:	e002      	b.n	8006a22 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1f9      	bne.n	8006a1c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a28:	e05a      	b.n	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a39      	ldr	r2, [pc, #228]	; (8006b14 <HAL_ADC_ConfigChannel+0x6b0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d11e      	bne.n	8006a72 <HAL_ADC_ConfigChannel+0x60e>
 8006a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d119      	bne.n	8006a72 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a2f      	ldr	r2, [pc, #188]	; (8006b00 <HAL_ADC_ConfigChannel+0x69c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d14b      	bne.n	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a2a      	ldr	r2, [pc, #168]	; (8006af8 <HAL_ADC_ConfigChannel+0x694>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <HAL_ADC_ConfigChannel+0x5f8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a29      	ldr	r2, [pc, #164]	; (8006afc <HAL_ADC_ConfigChannel+0x698>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d101      	bne.n	8006a60 <HAL_ADC_ConfigChannel+0x5fc>
 8006a5c:	4a2a      	ldr	r2, [pc, #168]	; (8006b08 <HAL_ADC_ConfigChannel+0x6a4>)
 8006a5e:	e000      	b.n	8006a62 <HAL_ADC_ConfigChannel+0x5fe>
 8006a60:	4a24      	ldr	r2, [pc, #144]	; (8006af4 <HAL_ADC_ConfigChannel+0x690>)
 8006a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f7ff f87b 	bl	8005b66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a70:	e036      	b.n	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a28      	ldr	r2, [pc, #160]	; (8006b18 <HAL_ADC_ConfigChannel+0x6b4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d131      	bne.n	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
 8006a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d12c      	bne.n	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <HAL_ADC_ConfigChannel+0x69c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d127      	bne.n	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <HAL_ADC_ConfigChannel+0x694>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <HAL_ADC_ConfigChannel+0x640>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a17      	ldr	r2, [pc, #92]	; (8006afc <HAL_ADC_ConfigChannel+0x698>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d101      	bne.n	8006aa8 <HAL_ADC_ConfigChannel+0x644>
 8006aa4:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <HAL_ADC_ConfigChannel+0x6a4>)
 8006aa6:	e000      	b.n	8006aaa <HAL_ADC_ConfigChannel+0x646>
 8006aa8:	4a12      	ldr	r2, [pc, #72]	; (8006af4 <HAL_ADC_ConfigChannel+0x690>)
 8006aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7ff f857 	bl	8005b66 <LL_ADC_SetCommonPathInternalCh>
 8006ab8:	e012      	b.n	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006acc:	e008      	b.n	8006ae0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006ae8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3784      	adds	r7, #132	; 0x84
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd90      	pop	{r4, r7, pc}
 8006af4:	58026300 	.word	0x58026300
 8006af8:	40022000 	.word	0x40022000
 8006afc:	40022100 	.word	0x40022100
 8006b00:	58026000 	.word	0x58026000
 8006b04:	cb840000 	.word	0xcb840000
 8006b08:	40022300 	.word	0x40022300
 8006b0c:	240000c0 	.word	0x240000c0
 8006b10:	053e2d63 	.word	0x053e2d63
 8006b14:	c7520000 	.word	0xc7520000
 8006b18:	cfb80000 	.word	0xcfb80000

08006b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff f9b7 	bl	8005e9c <LL_ADC_IsEnabled>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d16e      	bne.n	8006c12 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	4b38      	ldr	r3, [pc, #224]	; (8006c1c <ADC_Enable+0x100>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00d      	beq.n	8006b5e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b46:	f043 0210 	orr.w	r2, r3, #16
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b52:	f043 0201 	orr.w	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e05a      	b.n	8006c14 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff f972 	bl	8005e4c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006b68:	f7fe ffbc 	bl	8005ae4 <HAL_GetTick>
 8006b6c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a2b      	ldr	r2, [pc, #172]	; (8006c20 <ADC_Enable+0x104>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d004      	beq.n	8006b82 <ADC_Enable+0x66>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a29      	ldr	r2, [pc, #164]	; (8006c24 <ADC_Enable+0x108>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d101      	bne.n	8006b86 <ADC_Enable+0x6a>
 8006b82:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <ADC_Enable+0x10c>)
 8006b84:	e000      	b.n	8006b88 <ADC_Enable+0x6c>
 8006b86:	4b29      	ldr	r3, [pc, #164]	; (8006c2c <ADC_Enable+0x110>)
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff f903 	bl	8005d94 <LL_ADC_GetMultimode>
 8006b8e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a23      	ldr	r2, [pc, #140]	; (8006c24 <ADC_Enable+0x108>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d002      	beq.n	8006ba0 <ADC_Enable+0x84>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	e000      	b.n	8006ba2 <ADC_Enable+0x86>
 8006ba0:	4b1f      	ldr	r3, [pc, #124]	; (8006c20 <ADC_Enable+0x104>)
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6812      	ldr	r2, [r2, #0]
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d02c      	beq.n	8006c04 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d130      	bne.n	8006c12 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006bb0:	e028      	b.n	8006c04 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff f970 	bl	8005e9c <LL_ADC_IsEnabled>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff f940 	bl	8005e4c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006bcc:	f7fe ff8a 	bl	8005ae4 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d914      	bls.n	8006c04 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d00d      	beq.n	8006c04 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bec:	f043 0210 	orr.w	r2, r3, #16
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	f043 0201 	orr.w	r2, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e007      	b.n	8006c14 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d1cf      	bne.n	8006bb2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	8000003f 	.word	0x8000003f
 8006c20:	40022000 	.word	0x40022000
 8006c24:	40022100 	.word	0x40022100
 8006c28:	40022300 	.word	0x40022300
 8006c2c:	58026300 	.word	0x58026300

08006c30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff f940 	bl	8005ec2 <LL_ADC_IsDisableOngoing>
 8006c42:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff f927 	bl	8005e9c <LL_ADC_IsEnabled>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d047      	beq.n	8006ce4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d144      	bne.n	8006ce4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f003 030d 	and.w	r3, r3, #13
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d10c      	bne.n	8006c82 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff f901 	bl	8005e74 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2203      	movs	r2, #3
 8006c78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006c7a:	f7fe ff33 	bl	8005ae4 <HAL_GetTick>
 8006c7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c80:	e029      	b.n	8006cd6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	f043 0210 	orr.w	r2, r3, #16
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c92:	f043 0201 	orr.w	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e023      	b.n	8006ce6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006c9e:	f7fe ff21 	bl	8005ae4 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d914      	bls.n	8006cd6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00d      	beq.n	8006cd6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbe:	f043 0210 	orr.w	r2, r3, #16
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cca:	f043 0201 	orr.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e007      	b.n	8006ce6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1dc      	bne.n	8006c9e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d14b      	bne.n	8006da0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d021      	beq.n	8006d66 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe ff92 	bl	8005c50 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d032      	beq.n	8006d98 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d12b      	bne.n	8006d98 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d11f      	bne.n	8006d98 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5c:	f043 0201 	orr.w	r2, r3, #1
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	655a      	str	r2, [r3, #84]	; 0x54
 8006d64:	e018      	b.n	8006d98 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f003 0303 	and.w	r3, r3, #3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d111      	bne.n	8006d98 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d90:	f043 0201 	orr.w	r2, r3, #1
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff fb45 	bl	8006428 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d9e:	e00e      	b.n	8006dbe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff fb4f 	bl	8006450 <HAL_ADC_ErrorCallback>
}
 8006db2:	e004      	b.n	8006dbe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	4798      	blx	r3
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff fb31 	bl	800643c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e00:	f043 0204 	orr.w	r2, r3, #4
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7ff fb21 	bl	8006450 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a7a      	ldr	r2, [pc, #488]	; (8007010 <ADC_ConfigureBoostMode+0x1f8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d004      	beq.n	8006e34 <ADC_ConfigureBoostMode+0x1c>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a79      	ldr	r2, [pc, #484]	; (8007014 <ADC_ConfigureBoostMode+0x1fc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d109      	bne.n	8006e48 <ADC_ConfigureBoostMode+0x30>
 8006e34:	4b78      	ldr	r3, [pc, #480]	; (8007018 <ADC_ConfigureBoostMode+0x200>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bf14      	ite	ne
 8006e40:	2301      	movne	r3, #1
 8006e42:	2300      	moveq	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	e008      	b.n	8006e5a <ADC_ConfigureBoostMode+0x42>
 8006e48:	4b74      	ldr	r3, [pc, #464]	; (800701c <ADC_ConfigureBoostMode+0x204>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bf14      	ite	ne
 8006e54:	2301      	movne	r3, #1
 8006e56:	2300      	moveq	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01c      	beq.n	8006e98 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006e5e:	f007 fdef 	bl	800ea40 <HAL_RCC_GetHCLKFreq>
 8006e62:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e6c:	d010      	beq.n	8006e90 <ADC_ConfigureBoostMode+0x78>
 8006e6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e72:	d873      	bhi.n	8006f5c <ADC_ConfigureBoostMode+0x144>
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e78:	d002      	beq.n	8006e80 <ADC_ConfigureBoostMode+0x68>
 8006e7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e7e:	d16d      	bne.n	8006f5c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	60fb      	str	r3, [r7, #12]
        break;
 8006e8e:	e068      	b.n	8006f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	089b      	lsrs	r3, r3, #2
 8006e94:	60fb      	str	r3, [r7, #12]
        break;
 8006e96:	e064      	b.n	8006f62 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006e98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006e9c:	f04f 0100 	mov.w	r1, #0
 8006ea0:	f009 f876 	bl	800ff90 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ea4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006eae:	d051      	beq.n	8006f54 <ADC_ConfigureBoostMode+0x13c>
 8006eb0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006eb4:	d854      	bhi.n	8006f60 <ADC_ConfigureBoostMode+0x148>
 8006eb6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006eba:	d047      	beq.n	8006f4c <ADC_ConfigureBoostMode+0x134>
 8006ebc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006ec0:	d84e      	bhi.n	8006f60 <ADC_ConfigureBoostMode+0x148>
 8006ec2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006ec6:	d03d      	beq.n	8006f44 <ADC_ConfigureBoostMode+0x12c>
 8006ec8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006ecc:	d848      	bhi.n	8006f60 <ADC_ConfigureBoostMode+0x148>
 8006ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ed2:	d033      	beq.n	8006f3c <ADC_ConfigureBoostMode+0x124>
 8006ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ed8:	d842      	bhi.n	8006f60 <ADC_ConfigureBoostMode+0x148>
 8006eda:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006ede:	d029      	beq.n	8006f34 <ADC_ConfigureBoostMode+0x11c>
 8006ee0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006ee4:	d83c      	bhi.n	8006f60 <ADC_ConfigureBoostMode+0x148>
 8006ee6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006eea:	d01a      	beq.n	8006f22 <ADC_ConfigureBoostMode+0x10a>
 8006eec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006ef0:	d836      	bhi.n	8006f60 <ADC_ConfigureBoostMode+0x148>
 8006ef2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006ef6:	d014      	beq.n	8006f22 <ADC_ConfigureBoostMode+0x10a>
 8006ef8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006efc:	d830      	bhi.n	8006f60 <ADC_ConfigureBoostMode+0x148>
 8006efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f02:	d00e      	beq.n	8006f22 <ADC_ConfigureBoostMode+0x10a>
 8006f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f08:	d82a      	bhi.n	8006f60 <ADC_ConfigureBoostMode+0x148>
 8006f0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f0e:	d008      	beq.n	8006f22 <ADC_ConfigureBoostMode+0x10a>
 8006f10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f14:	d824      	bhi.n	8006f60 <ADC_ConfigureBoostMode+0x148>
 8006f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f1a:	d002      	beq.n	8006f22 <ADC_ConfigureBoostMode+0x10a>
 8006f1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f20:	d11e      	bne.n	8006f60 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	0c9b      	lsrs	r3, r3, #18
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f30:	60fb      	str	r3, [r7, #12]
        break;
 8006f32:	e016      	b.n	8006f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	091b      	lsrs	r3, r3, #4
 8006f38:	60fb      	str	r3, [r7, #12]
        break;
 8006f3a:	e012      	b.n	8006f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	60fb      	str	r3, [r7, #12]
        break;
 8006f42:	e00e      	b.n	8006f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	099b      	lsrs	r3, r3, #6
 8006f48:	60fb      	str	r3, [r7, #12]
        break;
 8006f4a:	e00a      	b.n	8006f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	09db      	lsrs	r3, r3, #7
 8006f50:	60fb      	str	r3, [r7, #12]
        break;
 8006f52:	e006      	b.n	8006f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	60fb      	str	r3, [r7, #12]
        break;
 8006f5a:	e002      	b.n	8006f62 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006f5c:	bf00      	nop
 8006f5e:	e000      	b.n	8006f62 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006f60:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006f62:	f7fe fdcb 	bl	8005afc <HAL_GetREVID>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d815      	bhi.n	8006f9c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a2b      	ldr	r2, [pc, #172]	; (8007020 <ADC_ConfigureBoostMode+0x208>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d908      	bls.n	8006f8a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f86:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006f88:	e03e      	b.n	8007008 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f98:	609a      	str	r2, [r3, #8]
}
 8006f9a:	e035      	b.n	8007008 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4a1f      	ldr	r2, [pc, #124]	; (8007024 <ADC_ConfigureBoostMode+0x20c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d808      	bhi.n	8006fbc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006fb8:	609a      	str	r2, [r3, #8]
}
 8006fba:	e025      	b.n	8007008 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4a1a      	ldr	r2, [pc, #104]	; (8007028 <ADC_ConfigureBoostMode+0x210>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d80a      	bhi.n	8006fda <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fd6:	609a      	str	r2, [r3, #8]
}
 8006fd8:	e016      	b.n	8007008 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4a13      	ldr	r2, [pc, #76]	; (800702c <ADC_ConfigureBoostMode+0x214>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d80a      	bhi.n	8006ff8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ff4:	609a      	str	r2, [r3, #8]
}
 8006ff6:	e007      	b.n	8007008 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007006:	609a      	str	r2, [r3, #8]
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40022000 	.word	0x40022000
 8007014:	40022100 	.word	0x40022100
 8007018:	40022300 	.word	0x40022300
 800701c:	58026300 	.word	0x58026300
 8007020:	01312d00 	.word	0x01312d00
 8007024:	005f5e10 	.word	0x005f5e10
 8007028:	00bebc20 	.word	0x00bebc20
 800702c:	017d7840 	.word	0x017d7840

08007030 <LL_ADC_IsEnabled>:
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <LL_ADC_IsEnabled+0x18>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <LL_ADC_IsEnabled+0x1a>
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <LL_ADC_StartCalibration>:
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	4b09      	ldr	r3, [pc, #36]	; (8007090 <LL_ADC_StartCalibration+0x38>)
 800706a:	4013      	ands	r3, r2
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007078:	430a      	orrs	r2, r1
 800707a:	4313      	orrs	r3, r2
 800707c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	609a      	str	r2, [r3, #8]
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	3ffeffc0 	.word	0x3ffeffc0

08007094 <LL_ADC_IsCalibrationOnGoing>:
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a8:	d101      	bne.n	80070ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <LL_ADC_REG_IsConversionOngoing>:
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d101      	bne.n	80070d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
	...

080070e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_ADCEx_Calibration_Start+0x1e>
 80070fe:	2302      	movs	r3, #2
 8007100:	e04c      	b.n	800719c <HAL_ADCEx_Calibration_Start+0xb8>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7ff fd90 	bl	8006c30 <ADC_Disable>
 8007110:	4603      	mov	r3, r0
 8007112:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d135      	bne.n	8007186 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800711e:	4b21      	ldr	r3, [pc, #132]	; (80071a4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007120:	4013      	ands	r3, r2
 8007122:	f043 0202 	orr.w	r2, r3, #2
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff ff90 	bl	8007058 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007138:	e014      	b.n	8007164 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3301      	adds	r3, #1
 800713e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	4a19      	ldr	r2, [pc, #100]	; (80071a8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d30d      	bcc.n	8007164 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714c:	f023 0312 	bic.w	r3, r3, #18
 8007150:	f043 0210 	orr.w	r2, r3, #16
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e01b      	b.n	800719c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff ff93 	bl	8007094 <LL_ADC_IsCalibrationOnGoing>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e2      	bne.n	800713a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007178:	f023 0303 	bic.w	r3, r3, #3
 800717c:	f043 0201 	orr.w	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	655a      	str	r2, [r3, #84]	; 0x54
 8007184:	e005      	b.n	8007192 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	f043 0210 	orr.w	r2, r3, #16
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800719a:	7dfb      	ldrb	r3, [r7, #23]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	ffffeefd 	.word	0xffffeefd
 80071a8:	25c3f800 	.word	0x25c3f800

080071ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b09f      	sub	sp, #124	; 0x7c
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d101      	bne.n	80071ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80071c6:	2302      	movs	r3, #2
 80071c8:	e0be      	b.n	8007348 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80071d2:	2300      	movs	r3, #0
 80071d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80071d6:	2300      	movs	r3, #0
 80071d8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a5c      	ldr	r2, [pc, #368]	; (8007350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d102      	bne.n	80071ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80071e4:	4b5b      	ldr	r3, [pc, #364]	; (8007354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80071e6:	60bb      	str	r3, [r7, #8]
 80071e8:	e001      	b.n	80071ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80071ea:	2300      	movs	r3, #0
 80071ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	f043 0220 	orr.w	r2, r3, #32
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e09d      	b.n	8007348 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff ff54 	bl	80070bc <LL_ADC_REG_IsConversionOngoing>
 8007214:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff ff4e 	bl	80070bc <LL_ADC_REG_IsConversionOngoing>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d17f      	bne.n	8007326 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007228:	2b00      	cmp	r3, #0
 800722a:	d17c      	bne.n	8007326 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a47      	ldr	r2, [pc, #284]	; (8007350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a46      	ldr	r2, [pc, #280]	; (8007354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d101      	bne.n	8007244 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007240:	4b45      	ldr	r3, [pc, #276]	; (8007358 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007242:	e000      	b.n	8007246 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007244:	4b45      	ldr	r3, [pc, #276]	; (800735c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007246:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d039      	beq.n	80072c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	431a      	orrs	r2, r3
 800725e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007260:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a3a      	ldr	r2, [pc, #232]	; (8007350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d004      	beq.n	8007276 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a38      	ldr	r2, [pc, #224]	; (8007354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d10e      	bne.n	8007294 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007276:	4836      	ldr	r0, [pc, #216]	; (8007350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007278:	f7ff feda 	bl	8007030 <LL_ADC_IsEnabled>
 800727c:	4604      	mov	r4, r0
 800727e:	4835      	ldr	r0, [pc, #212]	; (8007354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007280:	f7ff fed6 	bl	8007030 <LL_ADC_IsEnabled>
 8007284:	4603      	mov	r3, r0
 8007286:	4323      	orrs	r3, r4
 8007288:	2b00      	cmp	r3, #0
 800728a:	bf0c      	ite	eq
 800728c:	2301      	moveq	r3, #1
 800728e:	2300      	movne	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	e008      	b.n	80072a6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8007294:	4832      	ldr	r0, [pc, #200]	; (8007360 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007296:	f7ff fecb 	bl	8007030 <LL_ADC_IsEnabled>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	bf0c      	ite	eq
 80072a0:	2301      	moveq	r3, #1
 80072a2:	2300      	movne	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d047      	beq.n	800733a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80072aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	4b2d      	ldr	r3, [pc, #180]	; (8007364 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	6811      	ldr	r1, [r2, #0]
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	6892      	ldr	r2, [r2, #8]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	431a      	orrs	r2, r3
 80072be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80072c2:	e03a      	b.n	800733a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80072c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1e      	ldr	r2, [pc, #120]	; (8007350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d10e      	bne.n	8007302 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80072e4:	481a      	ldr	r0, [pc, #104]	; (8007350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80072e6:	f7ff fea3 	bl	8007030 <LL_ADC_IsEnabled>
 80072ea:	4604      	mov	r4, r0
 80072ec:	4819      	ldr	r0, [pc, #100]	; (8007354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80072ee:	f7ff fe9f 	bl	8007030 <LL_ADC_IsEnabled>
 80072f2:	4603      	mov	r3, r0
 80072f4:	4323      	orrs	r3, r4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf0c      	ite	eq
 80072fa:	2301      	moveq	r3, #1
 80072fc:	2300      	movne	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	e008      	b.n	8007314 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007302:	4817      	ldr	r0, [pc, #92]	; (8007360 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007304:	f7ff fe94 	bl	8007030 <LL_ADC_IsEnabled>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	bf0c      	ite	eq
 800730e:	2301      	moveq	r3, #1
 8007310:	2300      	movne	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d010      	beq.n	800733a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	4b11      	ldr	r3, [pc, #68]	; (8007364 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800731e:	4013      	ands	r3, r2
 8007320:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007322:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007324:	e009      	b.n	800733a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732a:	f043 0220 	orr.w	r2, r3, #32
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007338:	e000      	b.n	800733c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800733a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007344:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007348:	4618      	mov	r0, r3
 800734a:	377c      	adds	r7, #124	; 0x7c
 800734c:	46bd      	mov	sp, r7
 800734e:	bd90      	pop	{r4, r7, pc}
 8007350:	40022000 	.word	0x40022000
 8007354:	40022100 	.word	0x40022100
 8007358:	40022300 	.word	0x40022300
 800735c:	58026300 	.word	0x58026300
 8007360:	58026000 	.word	0x58026000
 8007364:	fffff0e0 	.word	0xfffff0e0

08007368 <__NVIC_SetPriorityGrouping>:
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007378:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <__NVIC_SetPriorityGrouping+0x40>)
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007384:	4013      	ands	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007390:	4b06      	ldr	r3, [pc, #24]	; (80073ac <__NVIC_SetPriorityGrouping+0x44>)
 8007392:	4313      	orrs	r3, r2
 8007394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007396:	4a04      	ldr	r2, [pc, #16]	; (80073a8 <__NVIC_SetPriorityGrouping+0x40>)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	60d3      	str	r3, [r2, #12]
}
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	e000ed00 	.word	0xe000ed00
 80073ac:	05fa0000 	.word	0x05fa0000

080073b0 <__NVIC_GetPriorityGrouping>:
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073b4:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <__NVIC_GetPriorityGrouping+0x18>)
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	0a1b      	lsrs	r3, r3, #8
 80073ba:	f003 0307 	and.w	r3, r3, #7
}
 80073be:	4618      	mov	r0, r3
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	e000ed00 	.word	0xe000ed00

080073cc <__NVIC_EnableIRQ>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80073d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	db0b      	blt.n	80073f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	f003 021f 	and.w	r2, r3, #31
 80073e4:	4907      	ldr	r1, [pc, #28]	; (8007404 <__NVIC_EnableIRQ+0x38>)
 80073e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073ea:	095b      	lsrs	r3, r3, #5
 80073ec:	2001      	movs	r0, #1
 80073ee:	fa00 f202 	lsl.w	r2, r0, r2
 80073f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	e000e100 	.word	0xe000e100

08007408 <__NVIC_SetPriority>:
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	6039      	str	r1, [r7, #0]
 8007412:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007418:	2b00      	cmp	r3, #0
 800741a:	db0a      	blt.n	8007432 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	b2da      	uxtb	r2, r3
 8007420:	490c      	ldr	r1, [pc, #48]	; (8007454 <__NVIC_SetPriority+0x4c>)
 8007422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007426:	0112      	lsls	r2, r2, #4
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	440b      	add	r3, r1
 800742c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007430:	e00a      	b.n	8007448 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	b2da      	uxtb	r2, r3
 8007436:	4908      	ldr	r1, [pc, #32]	; (8007458 <__NVIC_SetPriority+0x50>)
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	3b04      	subs	r3, #4
 8007440:	0112      	lsls	r2, r2, #4
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	440b      	add	r3, r1
 8007446:	761a      	strb	r2, [r3, #24]
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	e000e100 	.word	0xe000e100
 8007458:	e000ed00 	.word	0xe000ed00

0800745c <NVIC_EncodePriority>:
{
 800745c:	b480      	push	{r7}
 800745e:	b089      	sub	sp, #36	; 0x24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f1c3 0307 	rsb	r3, r3, #7
 8007476:	2b04      	cmp	r3, #4
 8007478:	bf28      	it	cs
 800747a:	2304      	movcs	r3, #4
 800747c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	3304      	adds	r3, #4
 8007482:	2b06      	cmp	r3, #6
 8007484:	d902      	bls.n	800748c <NVIC_EncodePriority+0x30>
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	3b03      	subs	r3, #3
 800748a:	e000      	b.n	800748e <NVIC_EncodePriority+0x32>
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	43da      	mvns	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	401a      	ands	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	fa01 f303 	lsl.w	r3, r1, r3
 80074ae:	43d9      	mvns	r1, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074b4:	4313      	orrs	r3, r2
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3724      	adds	r7, #36	; 0x24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff ff4c 	bl	8007368 <__NVIC_SetPriorityGrouping>
}
 80074d0:	bf00      	nop
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80074e6:	f7ff ff63 	bl	80073b0 <__NVIC_GetPriorityGrouping>
 80074ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	68b9      	ldr	r1, [r7, #8]
 80074f0:	6978      	ldr	r0, [r7, #20]
 80074f2:	f7ff ffb3 	bl	800745c <NVIC_EncodePriority>
 80074f6:	4602      	mov	r2, r0
 80074f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80074fc:	4611      	mov	r1, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff ff82 	bl	8007408 <__NVIC_SetPriority>
}
 8007504:	bf00      	nop
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff ff56 	bl	80073cc <__NVIC_EnableIRQ>
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e014      	b.n	8007564 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	791b      	ldrb	r3, [r3, #4]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7f9 fb4a 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e046      	b.n	800760e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	795b      	ldrb	r3, [r3, #5]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_DAC_Start+0x20>
 8007588:	2302      	movs	r3, #2
 800758a:	e040      	b.n	800760e <HAL_DAC_Start+0xa2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6819      	ldr	r1, [r3, #0]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2201      	movs	r2, #1
 80075a6:	409a      	lsls	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10f      	bne.n	80075d6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d11d      	bne.n	8007600 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0201 	orr.w	r2, r2, #1
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	e014      	b.n	8007600 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	2102      	movs	r1, #2
 80075e8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d107      	bne.n	8007600 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0202 	orr.w	r2, r2, #2
 80075fe:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0a2      	b.n	800777a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	795b      	ldrb	r3, [r3, #5]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_DAC_Start_DMA+0x24>
 800763c:	2302      	movs	r3, #2
 800763e:	e09c      	b.n	800777a <HAL_DAC_Start_DMA+0x15e>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2202      	movs	r2, #2
 800764a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d129      	bne.n	80076a6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	4a4b      	ldr	r2, [pc, #300]	; (8007784 <HAL_DAC_Start_DMA+0x168>)
 8007658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	4a4a      	ldr	r2, [pc, #296]	; (8007788 <HAL_DAC_Start_DMA+0x16c>)
 8007660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	4a49      	ldr	r2, [pc, #292]	; (800778c <HAL_DAC_Start_DMA+0x170>)
 8007668:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007678:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <HAL_DAC_Start_DMA+0x6c>
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	2b04      	cmp	r3, #4
 8007684:	d005      	beq.n	8007692 <HAL_DAC_Start_DMA+0x76>
 8007686:	e009      	b.n	800769c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3308      	adds	r3, #8
 800768e:	613b      	str	r3, [r7, #16]
        break;
 8007690:	e033      	b.n	80076fa <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	613b      	str	r3, [r7, #16]
        break;
 800769a:	e02e      	b.n	80076fa <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3310      	adds	r3, #16
 80076a2:	613b      	str	r3, [r7, #16]
        break;
 80076a4:	e029      	b.n	80076fa <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	4a39      	ldr	r2, [pc, #228]	; (8007790 <HAL_DAC_Start_DMA+0x174>)
 80076ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	4a38      	ldr	r2, [pc, #224]	; (8007794 <HAL_DAC_Start_DMA+0x178>)
 80076b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	4a37      	ldr	r2, [pc, #220]	; (8007798 <HAL_DAC_Start_DMA+0x17c>)
 80076bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80076cc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <HAL_DAC_Start_DMA+0xc0>
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d005      	beq.n	80076e6 <HAL_DAC_Start_DMA+0xca>
 80076da:	e009      	b.n	80076f0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3314      	adds	r3, #20
 80076e2:	613b      	str	r3, [r7, #16]
        break;
 80076e4:	e009      	b.n	80076fa <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3318      	adds	r3, #24
 80076ec:	613b      	str	r3, [r7, #16]
        break;
 80076ee:	e004      	b.n	80076fa <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	331c      	adds	r3, #28
 80076f6:	613b      	str	r3, [r7, #16]
        break;
 80076f8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d111      	bne.n	8007724 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800770e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6898      	ldr	r0, [r3, #8]
 8007714:	6879      	ldr	r1, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	f000 fe67 	bl	80083ec <HAL_DMA_Start_IT>
 800771e:	4603      	mov	r3, r0
 8007720:	75fb      	strb	r3, [r7, #23]
 8007722:	e010      	b.n	8007746 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007732:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	68d8      	ldr	r0, [r3, #12]
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	f000 fe55 	bl	80083ec <HAL_DMA_Start_IT>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10c      	bne.n	800776c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6819      	ldr	r1, [r3, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	2201      	movs	r2, #1
 8007760:	409a      	lsls	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	e005      	b.n	8007778 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f043 0204 	orr.w	r2, r3, #4
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	08007c0d 	.word	0x08007c0d
 8007788:	08007c2f 	.word	0x08007c2f
 800778c:	08007c4b 	.word	0x08007c4b
 8007790:	08007cc9 	.word	0x08007cc9
 8007794:	08007ceb 	.word	0x08007ceb
 8007798:	08007d07 	.word	0x08007d07

0800779c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e03e      	b.n	800782e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6819      	ldr	r1, [r3, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	f003 0310 	and.w	r3, r3, #16
 80077bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077c0:	fa02 f303 	lsl.w	r3, r2, r3
 80077c4:	43da      	mvns	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	400a      	ands	r2, r1
 80077cc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6819      	ldr	r1, [r3, #0]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2201      	movs	r2, #1
 80077dc:	fa02 f303 	lsl.w	r3, r2, r3
 80077e0:	43da      	mvns	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	400a      	ands	r2, r1
 80077e8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10d      	bne.n	800780c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 f863 	bl	80088c0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	e00c      	b.n	8007826 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4618      	mov	r0, r3
 8007812:	f001 f855 	bl	80088c0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007824:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01d      	beq.n	8007894 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d018      	beq.n	8007894 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2204      	movs	r2, #4
 8007866:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f043 0201 	orr.w	r2, r3, #1
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800787c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800788c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f86f 	bl	8007972 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01d      	beq.n	80078da <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d018      	beq.n	80078da <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2204      	movs	r2, #4
 80078ac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f043 0202 	orr.w	r2, r3, #2
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80078c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f9ed 	bl	8007cb4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b087      	sub	sp, #28
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	607a      	str	r2, [r7, #4]
 80078ee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e015      	b.n	800792a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4413      	add	r3, r2
 8007910:	3308      	adds	r3, #8
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	e004      	b.n	8007920 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4413      	add	r3, r2
 800791c:	3314      	adds	r3, #20
 800791e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	461a      	mov	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <HAL_DAC_ConfigChannel+0x1e>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e12a      	b.n	8007c00 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	795b      	ldrb	r3, [r3, #5]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_DAC_ConfigChannel+0x2e>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e124      	b.n	8007c00 <HAL_DAC_ConfigChannel+0x278>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2202      	movs	r2, #2
 80079c0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d17a      	bne.n	8007ac0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80079ca:	f7fe f88b 	bl	8005ae4 <HAL_GetTick>
 80079ce:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d13d      	bne.n	8007a52 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80079d6:	e018      	b.n	8007a0a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80079d8:	f7fe f884 	bl	8005ae4 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d911      	bls.n	8007a0a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ec:	4b86      	ldr	r3, [pc, #536]	; (8007c08 <HAL_DAC_ConfigChannel+0x280>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f043 0208 	orr.w	r2, r3, #8
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2203      	movs	r2, #3
 8007a04:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e0fa      	b.n	8007c00 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a10:	4b7d      	ldr	r3, [pc, #500]	; (8007c08 <HAL_DAC_ConfigChannel+0x280>)
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1df      	bne.n	80079d8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	6992      	ldr	r2, [r2, #24]
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40
 8007a22:	e020      	b.n	8007a66 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007a24:	f7fe f85e 	bl	8005ae4 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d90f      	bls.n	8007a52 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	da0a      	bge.n	8007a52 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	f043 0208 	orr.w	r2, r3, #8
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e0d6      	b.n	8007c00 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	dbe3      	blt.n	8007a24 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	6992      	ldr	r2, [r2, #24]
 8007a64:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f003 0310 	and.w	r3, r3, #16
 8007a72:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007a76:	fa01 f303 	lsl.w	r3, r1, r3
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	ea02 0103 	and.w	r1, r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	409a      	lsls	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	21ff      	movs	r1, #255	; 0xff
 8007aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	ea02 0103 	and.w	r1, r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	6a1a      	ldr	r2, [r3, #32]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f003 0310 	and.w	r3, r3, #16
 8007ab6:	409a      	lsls	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d11d      	bne.n	8007b04 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ace:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	221f      	movs	r2, #31
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	43db      	mvns	r3, r3
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f003 0310 	and.w	r3, r3, #16
 8007b12:	2207      	movs	r2, #7
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	43db      	mvns	r3, r3
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d102      	bne.n	8007b2e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2c:	e00f      	b.n	8007b4e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d102      	bne.n	8007b3c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007b36:	2301      	movs	r3, #1
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
 8007b3a:	e008      	b.n	8007b4e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007b44:	2301      	movs	r3, #1
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
 8007b48:	e001      	b.n	8007b4e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f003 0310 	and.w	r3, r3, #16
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6819      	ldr	r1, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f003 0310 	and.w	r3, r3, #16
 8007b84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b88:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8c:	43da      	mvns	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	400a      	ands	r2, r1
 8007b94:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bac:	43db      	mvns	r3, r3
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6819      	ldr	r1, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	22c0      	movs	r2, #192	; 0xc0
 8007be2:	fa02 f303 	lsl.w	r3, r2, r3
 8007be6:	43da      	mvns	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	400a      	ands	r2, r1
 8007bee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3728      	adds	r7, #40	; 0x28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20008000 	.word	0x20008000

08007c0c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7ff fe8b 	bl	8007936 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	711a      	strb	r2, [r3, #4]
}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff fe84 	bl	800794a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f043 0204 	orr.w	r2, r3, #4
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff fe7a 	bl	800795e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	711a      	strb	r2, [r3, #4]
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7ff ffce 	bl	8007c78 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	711a      	strb	r2, [r3, #4]
}
 8007ce2:	bf00      	nop
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7ff ffc7 	bl	8007c8c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f043 0204 	orr.w	r2, r3, #4
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7ff ffbd 	bl	8007ca0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	711a      	strb	r2, [r3, #4]
}
 8007d2c:	bf00      	nop
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007d3c:	f7fd fed2 	bl	8005ae4 <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e316      	b.n	800837a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a66      	ldr	r2, [pc, #408]	; (8007eec <HAL_DMA_Init+0x1b8>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d04a      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a65      	ldr	r2, [pc, #404]	; (8007ef0 <HAL_DMA_Init+0x1bc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d045      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a63      	ldr	r2, [pc, #396]	; (8007ef4 <HAL_DMA_Init+0x1c0>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d040      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a62      	ldr	r2, [pc, #392]	; (8007ef8 <HAL_DMA_Init+0x1c4>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d03b      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a60      	ldr	r2, [pc, #384]	; (8007efc <HAL_DMA_Init+0x1c8>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d036      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a5f      	ldr	r2, [pc, #380]	; (8007f00 <HAL_DMA_Init+0x1cc>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d031      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a5d      	ldr	r2, [pc, #372]	; (8007f04 <HAL_DMA_Init+0x1d0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d02c      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a5c      	ldr	r2, [pc, #368]	; (8007f08 <HAL_DMA_Init+0x1d4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d027      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a5a      	ldr	r2, [pc, #360]	; (8007f0c <HAL_DMA_Init+0x1d8>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d022      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a59      	ldr	r2, [pc, #356]	; (8007f10 <HAL_DMA_Init+0x1dc>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d01d      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a57      	ldr	r2, [pc, #348]	; (8007f14 <HAL_DMA_Init+0x1e0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d018      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a56      	ldr	r2, [pc, #344]	; (8007f18 <HAL_DMA_Init+0x1e4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d013      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a54      	ldr	r2, [pc, #336]	; (8007f1c <HAL_DMA_Init+0x1e8>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00e      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a53      	ldr	r2, [pc, #332]	; (8007f20 <HAL_DMA_Init+0x1ec>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d009      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a51      	ldr	r2, [pc, #324]	; (8007f24 <HAL_DMA_Init+0x1f0>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d004      	beq.n	8007dec <HAL_DMA_Init+0xb8>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a50      	ldr	r2, [pc, #320]	; (8007f28 <HAL_DMA_Init+0x1f4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d101      	bne.n	8007df0 <HAL_DMA_Init+0xbc>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <HAL_DMA_Init+0xbe>
 8007df0:	2300      	movs	r3, #0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 813b 	beq.w	800806e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a37      	ldr	r2, [pc, #220]	; (8007eec <HAL_DMA_Init+0x1b8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d04a      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a36      	ldr	r2, [pc, #216]	; (8007ef0 <HAL_DMA_Init+0x1bc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d045      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a34      	ldr	r2, [pc, #208]	; (8007ef4 <HAL_DMA_Init+0x1c0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d040      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a33      	ldr	r2, [pc, #204]	; (8007ef8 <HAL_DMA_Init+0x1c4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d03b      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a31      	ldr	r2, [pc, #196]	; (8007efc <HAL_DMA_Init+0x1c8>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d036      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a30      	ldr	r2, [pc, #192]	; (8007f00 <HAL_DMA_Init+0x1cc>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d031      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a2e      	ldr	r2, [pc, #184]	; (8007f04 <HAL_DMA_Init+0x1d0>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d02c      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a2d      	ldr	r2, [pc, #180]	; (8007f08 <HAL_DMA_Init+0x1d4>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d027      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a2b      	ldr	r2, [pc, #172]	; (8007f0c <HAL_DMA_Init+0x1d8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d022      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a2a      	ldr	r2, [pc, #168]	; (8007f10 <HAL_DMA_Init+0x1dc>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d01d      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <HAL_DMA_Init+0x1e0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d018      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a27      	ldr	r2, [pc, #156]	; (8007f18 <HAL_DMA_Init+0x1e4>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d013      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a25      	ldr	r2, [pc, #148]	; (8007f1c <HAL_DMA_Init+0x1e8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00e      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a24      	ldr	r2, [pc, #144]	; (8007f20 <HAL_DMA_Init+0x1ec>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d009      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a22      	ldr	r2, [pc, #136]	; (8007f24 <HAL_DMA_Init+0x1f0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d004      	beq.n	8007ea8 <HAL_DMA_Init+0x174>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a21      	ldr	r2, [pc, #132]	; (8007f28 <HAL_DMA_Init+0x1f4>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d108      	bne.n	8007eba <HAL_DMA_Init+0x186>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0201 	bic.w	r2, r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e007      	b.n	8007eca <HAL_DMA_Init+0x196>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0201 	bic.w	r2, r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007eca:	e02f      	b.n	8007f2c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ecc:	f7fd fe0a 	bl	8005ae4 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b05      	cmp	r3, #5
 8007ed8:	d928      	bls.n	8007f2c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e246      	b.n	800837a <HAL_DMA_Init+0x646>
 8007eec:	40020010 	.word	0x40020010
 8007ef0:	40020028 	.word	0x40020028
 8007ef4:	40020040 	.word	0x40020040
 8007ef8:	40020058 	.word	0x40020058
 8007efc:	40020070 	.word	0x40020070
 8007f00:	40020088 	.word	0x40020088
 8007f04:	400200a0 	.word	0x400200a0
 8007f08:	400200b8 	.word	0x400200b8
 8007f0c:	40020410 	.word	0x40020410
 8007f10:	40020428 	.word	0x40020428
 8007f14:	40020440 	.word	0x40020440
 8007f18:	40020458 	.word	0x40020458
 8007f1c:	40020470 	.word	0x40020470
 8007f20:	40020488 	.word	0x40020488
 8007f24:	400204a0 	.word	0x400204a0
 8007f28:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1c8      	bne.n	8007ecc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	4b83      	ldr	r3, [pc, #524]	; (8008154 <HAL_DMA_Init+0x420>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007f52:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f6a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d107      	bne.n	8007f90 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007f90:	4b71      	ldr	r3, [pc, #452]	; (8008158 <HAL_DMA_Init+0x424>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	4b71      	ldr	r3, [pc, #452]	; (800815c <HAL_DMA_Init+0x428>)
 8007f96:	4013      	ands	r3, r2
 8007f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f9c:	d328      	bcc.n	8007ff0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	2b28      	cmp	r3, #40	; 0x28
 8007fa4:	d903      	bls.n	8007fae <HAL_DMA_Init+0x27a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	2b2e      	cmp	r3, #46	; 0x2e
 8007fac:	d917      	bls.n	8007fde <HAL_DMA_Init+0x2aa>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b3e      	cmp	r3, #62	; 0x3e
 8007fb4:	d903      	bls.n	8007fbe <HAL_DMA_Init+0x28a>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2b42      	cmp	r3, #66	; 0x42
 8007fbc:	d90f      	bls.n	8007fde <HAL_DMA_Init+0x2aa>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	2b46      	cmp	r3, #70	; 0x46
 8007fc4:	d903      	bls.n	8007fce <HAL_DMA_Init+0x29a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2b48      	cmp	r3, #72	; 0x48
 8007fcc:	d907      	bls.n	8007fde <HAL_DMA_Init+0x2aa>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	2b4e      	cmp	r3, #78	; 0x4e
 8007fd4:	d905      	bls.n	8007fe2 <HAL_DMA_Init+0x2ae>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b52      	cmp	r3, #82	; 0x52
 8007fdc:	d801      	bhi.n	8007fe2 <HAL_DMA_Init+0x2ae>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <HAL_DMA_Init+0x2b0>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f023 0307 	bic.w	r3, r3, #7
 8008006:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	2b04      	cmp	r3, #4
 8008018:	d117      	bne.n	800804a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00e      	beq.n	800804a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f002 fb4d 	bl	800a6cc <DMA_CheckFifoParam>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d008      	beq.n	800804a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2240      	movs	r2, #64	; 0x40
 800803c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e197      	b.n	800837a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f002 fa88 	bl	800a568 <DMA_CalcBaseAndBitshift>
 8008058:	4603      	mov	r3, r0
 800805a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008060:	f003 031f 	and.w	r3, r3, #31
 8008064:	223f      	movs	r2, #63	; 0x3f
 8008066:	409a      	lsls	r2, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	609a      	str	r2, [r3, #8]
 800806c:	e0cd      	b.n	800820a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a3b      	ldr	r2, [pc, #236]	; (8008160 <HAL_DMA_Init+0x42c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d022      	beq.n	80080be <HAL_DMA_Init+0x38a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a39      	ldr	r2, [pc, #228]	; (8008164 <HAL_DMA_Init+0x430>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d01d      	beq.n	80080be <HAL_DMA_Init+0x38a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a38      	ldr	r2, [pc, #224]	; (8008168 <HAL_DMA_Init+0x434>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d018      	beq.n	80080be <HAL_DMA_Init+0x38a>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a36      	ldr	r2, [pc, #216]	; (800816c <HAL_DMA_Init+0x438>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d013      	beq.n	80080be <HAL_DMA_Init+0x38a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a35      	ldr	r2, [pc, #212]	; (8008170 <HAL_DMA_Init+0x43c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d00e      	beq.n	80080be <HAL_DMA_Init+0x38a>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a33      	ldr	r2, [pc, #204]	; (8008174 <HAL_DMA_Init+0x440>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d009      	beq.n	80080be <HAL_DMA_Init+0x38a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a32      	ldr	r2, [pc, #200]	; (8008178 <HAL_DMA_Init+0x444>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d004      	beq.n	80080be <HAL_DMA_Init+0x38a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a30      	ldr	r2, [pc, #192]	; (800817c <HAL_DMA_Init+0x448>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d101      	bne.n	80080c2 <HAL_DMA_Init+0x38e>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <HAL_DMA_Init+0x390>
 80080c2:	2300      	movs	r3, #0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8097 	beq.w	80081f8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a24      	ldr	r2, [pc, #144]	; (8008160 <HAL_DMA_Init+0x42c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d021      	beq.n	8008118 <HAL_DMA_Init+0x3e4>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a22      	ldr	r2, [pc, #136]	; (8008164 <HAL_DMA_Init+0x430>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d01c      	beq.n	8008118 <HAL_DMA_Init+0x3e4>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a21      	ldr	r2, [pc, #132]	; (8008168 <HAL_DMA_Init+0x434>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d017      	beq.n	8008118 <HAL_DMA_Init+0x3e4>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a1f      	ldr	r2, [pc, #124]	; (800816c <HAL_DMA_Init+0x438>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d012      	beq.n	8008118 <HAL_DMA_Init+0x3e4>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1e      	ldr	r2, [pc, #120]	; (8008170 <HAL_DMA_Init+0x43c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00d      	beq.n	8008118 <HAL_DMA_Init+0x3e4>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a1c      	ldr	r2, [pc, #112]	; (8008174 <HAL_DMA_Init+0x440>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d008      	beq.n	8008118 <HAL_DMA_Init+0x3e4>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a1b      	ldr	r2, [pc, #108]	; (8008178 <HAL_DMA_Init+0x444>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d003      	beq.n	8008118 <HAL_DMA_Init+0x3e4>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a19      	ldr	r2, [pc, #100]	; (800817c <HAL_DMA_Init+0x448>)
 8008116:	4293      	cmp	r3, r2
 8008118:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2202      	movs	r2, #2
 800811e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	4b12      	ldr	r3, [pc, #72]	; (8008180 <HAL_DMA_Init+0x44c>)
 8008136:	4013      	ands	r3, r2
 8008138:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	2b40      	cmp	r3, #64	; 0x40
 8008140:	d020      	beq.n	8008184 <HAL_DMA_Init+0x450>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	2b80      	cmp	r3, #128	; 0x80
 8008148:	d102      	bne.n	8008150 <HAL_DMA_Init+0x41c>
 800814a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800814e:	e01a      	b.n	8008186 <HAL_DMA_Init+0x452>
 8008150:	2300      	movs	r3, #0
 8008152:	e018      	b.n	8008186 <HAL_DMA_Init+0x452>
 8008154:	fe10803f 	.word	0xfe10803f
 8008158:	5c001000 	.word	0x5c001000
 800815c:	ffff0000 	.word	0xffff0000
 8008160:	58025408 	.word	0x58025408
 8008164:	5802541c 	.word	0x5802541c
 8008168:	58025430 	.word	0x58025430
 800816c:	58025444 	.word	0x58025444
 8008170:	58025458 	.word	0x58025458
 8008174:	5802546c 	.word	0x5802546c
 8008178:	58025480 	.word	0x58025480
 800817c:	58025494 	.word	0x58025494
 8008180:	fffe000f 	.word	0xfffe000f
 8008184:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	68d2      	ldr	r2, [r2, #12]
 800818a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800818c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800819c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80081a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80081ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80081b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	4b6e      	ldr	r3, [pc, #440]	; (8008384 <HAL_DMA_Init+0x650>)
 80081cc:	4413      	add	r3, r2
 80081ce:	4a6e      	ldr	r2, [pc, #440]	; (8008388 <HAL_DMA_Init+0x654>)
 80081d0:	fba2 2303 	umull	r2, r3, r2, r3
 80081d4:	091b      	lsrs	r3, r3, #4
 80081d6:	009a      	lsls	r2, r3, #2
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f002 f9c3 	bl	800a568 <DMA_CalcBaseAndBitshift>
 80081e2:	4603      	mov	r3, r0
 80081e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ea:	f003 031f 	and.w	r3, r3, #31
 80081ee:	2201      	movs	r2, #1
 80081f0:	409a      	lsls	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	605a      	str	r2, [r3, #4]
 80081f6:	e008      	b.n	800820a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2240      	movs	r2, #64	; 0x40
 80081fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2203      	movs	r2, #3
 8008202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e0b7      	b.n	800837a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a5f      	ldr	r2, [pc, #380]	; (800838c <HAL_DMA_Init+0x658>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d072      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a5d      	ldr	r2, [pc, #372]	; (8008390 <HAL_DMA_Init+0x65c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d06d      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a5c      	ldr	r2, [pc, #368]	; (8008394 <HAL_DMA_Init+0x660>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d068      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a5a      	ldr	r2, [pc, #360]	; (8008398 <HAL_DMA_Init+0x664>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d063      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a59      	ldr	r2, [pc, #356]	; (800839c <HAL_DMA_Init+0x668>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d05e      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a57      	ldr	r2, [pc, #348]	; (80083a0 <HAL_DMA_Init+0x66c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d059      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a56      	ldr	r2, [pc, #344]	; (80083a4 <HAL_DMA_Init+0x670>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d054      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a54      	ldr	r2, [pc, #336]	; (80083a8 <HAL_DMA_Init+0x674>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d04f      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a53      	ldr	r2, [pc, #332]	; (80083ac <HAL_DMA_Init+0x678>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d04a      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a51      	ldr	r2, [pc, #324]	; (80083b0 <HAL_DMA_Init+0x67c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d045      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a50      	ldr	r2, [pc, #320]	; (80083b4 <HAL_DMA_Init+0x680>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d040      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a4e      	ldr	r2, [pc, #312]	; (80083b8 <HAL_DMA_Init+0x684>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d03b      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a4d      	ldr	r2, [pc, #308]	; (80083bc <HAL_DMA_Init+0x688>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d036      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a4b      	ldr	r2, [pc, #300]	; (80083c0 <HAL_DMA_Init+0x68c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d031      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a4a      	ldr	r2, [pc, #296]	; (80083c4 <HAL_DMA_Init+0x690>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d02c      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a48      	ldr	r2, [pc, #288]	; (80083c8 <HAL_DMA_Init+0x694>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d027      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a47      	ldr	r2, [pc, #284]	; (80083cc <HAL_DMA_Init+0x698>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d022      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a45      	ldr	r2, [pc, #276]	; (80083d0 <HAL_DMA_Init+0x69c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d01d      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a44      	ldr	r2, [pc, #272]	; (80083d4 <HAL_DMA_Init+0x6a0>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d018      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a42      	ldr	r2, [pc, #264]	; (80083d8 <HAL_DMA_Init+0x6a4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d013      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a41      	ldr	r2, [pc, #260]	; (80083dc <HAL_DMA_Init+0x6a8>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d00e      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a3f      	ldr	r2, [pc, #252]	; (80083e0 <HAL_DMA_Init+0x6ac>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d009      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a3e      	ldr	r2, [pc, #248]	; (80083e4 <HAL_DMA_Init+0x6b0>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d004      	beq.n	80082fa <HAL_DMA_Init+0x5c6>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a3c      	ldr	r2, [pc, #240]	; (80083e8 <HAL_DMA_Init+0x6b4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d101      	bne.n	80082fe <HAL_DMA_Init+0x5ca>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e000      	b.n	8008300 <HAL_DMA_Init+0x5cc>
 80082fe:	2300      	movs	r3, #0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d032      	beq.n	800836a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f002 fa5d 	bl	800a7c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	2b80      	cmp	r3, #128	; 0x80
 8008310:	d102      	bne.n	8008318 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008320:	b2d2      	uxtb	r2, r2
 8008322:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800832c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d010      	beq.n	8008358 <HAL_DMA_Init+0x624>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2b08      	cmp	r3, #8
 800833c:	d80c      	bhi.n	8008358 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f002 fada 	bl	800a8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008354:	605a      	str	r2, [r3, #4]
 8008356:	e008      	b.n	800836a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	a7fdabf8 	.word	0xa7fdabf8
 8008388:	cccccccd 	.word	0xcccccccd
 800838c:	40020010 	.word	0x40020010
 8008390:	40020028 	.word	0x40020028
 8008394:	40020040 	.word	0x40020040
 8008398:	40020058 	.word	0x40020058
 800839c:	40020070 	.word	0x40020070
 80083a0:	40020088 	.word	0x40020088
 80083a4:	400200a0 	.word	0x400200a0
 80083a8:	400200b8 	.word	0x400200b8
 80083ac:	40020410 	.word	0x40020410
 80083b0:	40020428 	.word	0x40020428
 80083b4:	40020440 	.word	0x40020440
 80083b8:	40020458 	.word	0x40020458
 80083bc:	40020470 	.word	0x40020470
 80083c0:	40020488 	.word	0x40020488
 80083c4:	400204a0 	.word	0x400204a0
 80083c8:	400204b8 	.word	0x400204b8
 80083cc:	58025408 	.word	0x58025408
 80083d0:	5802541c 	.word	0x5802541c
 80083d4:	58025430 	.word	0x58025430
 80083d8:	58025444 	.word	0x58025444
 80083dc:	58025458 	.word	0x58025458
 80083e0:	5802546c 	.word	0x5802546c
 80083e4:	58025480 	.word	0x58025480
 80083e8:	58025494 	.word	0x58025494

080083ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e226      	b.n	8008856 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800840e:	2b01      	cmp	r3, #1
 8008410:	d101      	bne.n	8008416 <HAL_DMA_Start_IT+0x2a>
 8008412:	2302      	movs	r3, #2
 8008414:	e21f      	b.n	8008856 <HAL_DMA_Start_IT+0x46a>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b01      	cmp	r3, #1
 8008428:	f040 820a 	bne.w	8008840 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a68      	ldr	r2, [pc, #416]	; (80085e0 <HAL_DMA_Start_IT+0x1f4>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d04a      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a66      	ldr	r2, [pc, #408]	; (80085e4 <HAL_DMA_Start_IT+0x1f8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d045      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a65      	ldr	r2, [pc, #404]	; (80085e8 <HAL_DMA_Start_IT+0x1fc>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d040      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a63      	ldr	r2, [pc, #396]	; (80085ec <HAL_DMA_Start_IT+0x200>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d03b      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a62      	ldr	r2, [pc, #392]	; (80085f0 <HAL_DMA_Start_IT+0x204>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d036      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a60      	ldr	r2, [pc, #384]	; (80085f4 <HAL_DMA_Start_IT+0x208>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d031      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a5f      	ldr	r2, [pc, #380]	; (80085f8 <HAL_DMA_Start_IT+0x20c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d02c      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a5d      	ldr	r2, [pc, #372]	; (80085fc <HAL_DMA_Start_IT+0x210>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d027      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a5c      	ldr	r2, [pc, #368]	; (8008600 <HAL_DMA_Start_IT+0x214>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d022      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a5a      	ldr	r2, [pc, #360]	; (8008604 <HAL_DMA_Start_IT+0x218>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d01d      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a59      	ldr	r2, [pc, #356]	; (8008608 <HAL_DMA_Start_IT+0x21c>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d018      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a57      	ldr	r2, [pc, #348]	; (800860c <HAL_DMA_Start_IT+0x220>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d013      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a56      	ldr	r2, [pc, #344]	; (8008610 <HAL_DMA_Start_IT+0x224>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00e      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a54      	ldr	r2, [pc, #336]	; (8008614 <HAL_DMA_Start_IT+0x228>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d009      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a53      	ldr	r2, [pc, #332]	; (8008618 <HAL_DMA_Start_IT+0x22c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d004      	beq.n	80084da <HAL_DMA_Start_IT+0xee>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a51      	ldr	r2, [pc, #324]	; (800861c <HAL_DMA_Start_IT+0x230>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d108      	bne.n	80084ec <HAL_DMA_Start_IT+0x100>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0201 	bic.w	r2, r2, #1
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	e007      	b.n	80084fc <HAL_DMA_Start_IT+0x110>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f022 0201 	bic.w	r2, r2, #1
 80084fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f001 fe84 	bl	800a210 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a34      	ldr	r2, [pc, #208]	; (80085e0 <HAL_DMA_Start_IT+0x1f4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d04a      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a33      	ldr	r2, [pc, #204]	; (80085e4 <HAL_DMA_Start_IT+0x1f8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d045      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a31      	ldr	r2, [pc, #196]	; (80085e8 <HAL_DMA_Start_IT+0x1fc>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d040      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a30      	ldr	r2, [pc, #192]	; (80085ec <HAL_DMA_Start_IT+0x200>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d03b      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a2e      	ldr	r2, [pc, #184]	; (80085f0 <HAL_DMA_Start_IT+0x204>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d036      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a2d      	ldr	r2, [pc, #180]	; (80085f4 <HAL_DMA_Start_IT+0x208>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d031      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a2b      	ldr	r2, [pc, #172]	; (80085f8 <HAL_DMA_Start_IT+0x20c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d02c      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a2a      	ldr	r2, [pc, #168]	; (80085fc <HAL_DMA_Start_IT+0x210>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d027      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a28      	ldr	r2, [pc, #160]	; (8008600 <HAL_DMA_Start_IT+0x214>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d022      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a27      	ldr	r2, [pc, #156]	; (8008604 <HAL_DMA_Start_IT+0x218>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d01d      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a25      	ldr	r2, [pc, #148]	; (8008608 <HAL_DMA_Start_IT+0x21c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d018      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a24      	ldr	r2, [pc, #144]	; (800860c <HAL_DMA_Start_IT+0x220>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d013      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a22      	ldr	r2, [pc, #136]	; (8008610 <HAL_DMA_Start_IT+0x224>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00e      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a21      	ldr	r2, [pc, #132]	; (8008614 <HAL_DMA_Start_IT+0x228>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d009      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a1f      	ldr	r2, [pc, #124]	; (8008618 <HAL_DMA_Start_IT+0x22c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d004      	beq.n	80085a8 <HAL_DMA_Start_IT+0x1bc>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a1e      	ldr	r2, [pc, #120]	; (800861c <HAL_DMA_Start_IT+0x230>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d101      	bne.n	80085ac <HAL_DMA_Start_IT+0x1c0>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <HAL_DMA_Start_IT+0x1c2>
 80085ac:	2300      	movs	r3, #0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d036      	beq.n	8008620 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f023 021e 	bic.w	r2, r3, #30
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0216 	orr.w	r2, r2, #22
 80085c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d03e      	beq.n	800864c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f042 0208 	orr.w	r2, r2, #8
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e035      	b.n	800864c <HAL_DMA_Start_IT+0x260>
 80085e0:	40020010 	.word	0x40020010
 80085e4:	40020028 	.word	0x40020028
 80085e8:	40020040 	.word	0x40020040
 80085ec:	40020058 	.word	0x40020058
 80085f0:	40020070 	.word	0x40020070
 80085f4:	40020088 	.word	0x40020088
 80085f8:	400200a0 	.word	0x400200a0
 80085fc:	400200b8 	.word	0x400200b8
 8008600:	40020410 	.word	0x40020410
 8008604:	40020428 	.word	0x40020428
 8008608:	40020440 	.word	0x40020440
 800860c:	40020458 	.word	0x40020458
 8008610:	40020470 	.word	0x40020470
 8008614:	40020488 	.word	0x40020488
 8008618:	400204a0 	.word	0x400204a0
 800861c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f023 020e 	bic.w	r2, r3, #14
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f042 020a 	orr.w	r2, r2, #10
 8008632:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	d007      	beq.n	800864c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0204 	orr.w	r2, r2, #4
 800864a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a83      	ldr	r2, [pc, #524]	; (8008860 <HAL_DMA_Start_IT+0x474>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d072      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a82      	ldr	r2, [pc, #520]	; (8008864 <HAL_DMA_Start_IT+0x478>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d06d      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a80      	ldr	r2, [pc, #512]	; (8008868 <HAL_DMA_Start_IT+0x47c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d068      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a7f      	ldr	r2, [pc, #508]	; (800886c <HAL_DMA_Start_IT+0x480>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d063      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a7d      	ldr	r2, [pc, #500]	; (8008870 <HAL_DMA_Start_IT+0x484>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d05e      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a7c      	ldr	r2, [pc, #496]	; (8008874 <HAL_DMA_Start_IT+0x488>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d059      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a7a      	ldr	r2, [pc, #488]	; (8008878 <HAL_DMA_Start_IT+0x48c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d054      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a79      	ldr	r2, [pc, #484]	; (800887c <HAL_DMA_Start_IT+0x490>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d04f      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a77      	ldr	r2, [pc, #476]	; (8008880 <HAL_DMA_Start_IT+0x494>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d04a      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a76      	ldr	r2, [pc, #472]	; (8008884 <HAL_DMA_Start_IT+0x498>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d045      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a74      	ldr	r2, [pc, #464]	; (8008888 <HAL_DMA_Start_IT+0x49c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d040      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a73      	ldr	r2, [pc, #460]	; (800888c <HAL_DMA_Start_IT+0x4a0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d03b      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a71      	ldr	r2, [pc, #452]	; (8008890 <HAL_DMA_Start_IT+0x4a4>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d036      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a70      	ldr	r2, [pc, #448]	; (8008894 <HAL_DMA_Start_IT+0x4a8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d031      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a6e      	ldr	r2, [pc, #440]	; (8008898 <HAL_DMA_Start_IT+0x4ac>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d02c      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a6d      	ldr	r2, [pc, #436]	; (800889c <HAL_DMA_Start_IT+0x4b0>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d027      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a6b      	ldr	r2, [pc, #428]	; (80088a0 <HAL_DMA_Start_IT+0x4b4>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d022      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a6a      	ldr	r2, [pc, #424]	; (80088a4 <HAL_DMA_Start_IT+0x4b8>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d01d      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a68      	ldr	r2, [pc, #416]	; (80088a8 <HAL_DMA_Start_IT+0x4bc>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d018      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a67      	ldr	r2, [pc, #412]	; (80088ac <HAL_DMA_Start_IT+0x4c0>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d013      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a65      	ldr	r2, [pc, #404]	; (80088b0 <HAL_DMA_Start_IT+0x4c4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00e      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a64      	ldr	r2, [pc, #400]	; (80088b4 <HAL_DMA_Start_IT+0x4c8>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d009      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a62      	ldr	r2, [pc, #392]	; (80088b8 <HAL_DMA_Start_IT+0x4cc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d004      	beq.n	800873c <HAL_DMA_Start_IT+0x350>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a61      	ldr	r2, [pc, #388]	; (80088bc <HAL_DMA_Start_IT+0x4d0>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d101      	bne.n	8008740 <HAL_DMA_Start_IT+0x354>
 800873c:	2301      	movs	r3, #1
 800873e:	e000      	b.n	8008742 <HAL_DMA_Start_IT+0x356>
 8008740:	2300      	movs	r3, #0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01a      	beq.n	800877c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d007      	beq.n	8008764 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800875e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008762:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d007      	beq.n	800877c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800877a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a37      	ldr	r2, [pc, #220]	; (8008860 <HAL_DMA_Start_IT+0x474>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d04a      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a36      	ldr	r2, [pc, #216]	; (8008864 <HAL_DMA_Start_IT+0x478>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d045      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a34      	ldr	r2, [pc, #208]	; (8008868 <HAL_DMA_Start_IT+0x47c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d040      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a33      	ldr	r2, [pc, #204]	; (800886c <HAL_DMA_Start_IT+0x480>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d03b      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a31      	ldr	r2, [pc, #196]	; (8008870 <HAL_DMA_Start_IT+0x484>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d036      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a30      	ldr	r2, [pc, #192]	; (8008874 <HAL_DMA_Start_IT+0x488>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d031      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a2e      	ldr	r2, [pc, #184]	; (8008878 <HAL_DMA_Start_IT+0x48c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d02c      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a2d      	ldr	r2, [pc, #180]	; (800887c <HAL_DMA_Start_IT+0x490>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d027      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a2b      	ldr	r2, [pc, #172]	; (8008880 <HAL_DMA_Start_IT+0x494>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d022      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a2a      	ldr	r2, [pc, #168]	; (8008884 <HAL_DMA_Start_IT+0x498>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d01d      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a28      	ldr	r2, [pc, #160]	; (8008888 <HAL_DMA_Start_IT+0x49c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d018      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a27      	ldr	r2, [pc, #156]	; (800888c <HAL_DMA_Start_IT+0x4a0>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d013      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a25      	ldr	r2, [pc, #148]	; (8008890 <HAL_DMA_Start_IT+0x4a4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00e      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a24      	ldr	r2, [pc, #144]	; (8008894 <HAL_DMA_Start_IT+0x4a8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d009      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a22      	ldr	r2, [pc, #136]	; (8008898 <HAL_DMA_Start_IT+0x4ac>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d004      	beq.n	800881c <HAL_DMA_Start_IT+0x430>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a21      	ldr	r2, [pc, #132]	; (800889c <HAL_DMA_Start_IT+0x4b0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d108      	bne.n	800882e <HAL_DMA_Start_IT+0x442>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e012      	b.n	8008854 <HAL_DMA_Start_IT+0x468>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 0201 	orr.w	r2, r2, #1
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e009      	b.n	8008854 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008846:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008854:	7dfb      	ldrb	r3, [r7, #23]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	40020010 	.word	0x40020010
 8008864:	40020028 	.word	0x40020028
 8008868:	40020040 	.word	0x40020040
 800886c:	40020058 	.word	0x40020058
 8008870:	40020070 	.word	0x40020070
 8008874:	40020088 	.word	0x40020088
 8008878:	400200a0 	.word	0x400200a0
 800887c:	400200b8 	.word	0x400200b8
 8008880:	40020410 	.word	0x40020410
 8008884:	40020428 	.word	0x40020428
 8008888:	40020440 	.word	0x40020440
 800888c:	40020458 	.word	0x40020458
 8008890:	40020470 	.word	0x40020470
 8008894:	40020488 	.word	0x40020488
 8008898:	400204a0 	.word	0x400204a0
 800889c:	400204b8 	.word	0x400204b8
 80088a0:	58025408 	.word	0x58025408
 80088a4:	5802541c 	.word	0x5802541c
 80088a8:	58025430 	.word	0x58025430
 80088ac:	58025444 	.word	0x58025444
 80088b0:	58025458 	.word	0x58025458
 80088b4:	5802546c 	.word	0x5802546c
 80088b8:	58025480 	.word	0x58025480
 80088bc:	58025494 	.word	0x58025494

080088c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80088c8:	f7fd f90c 	bl	8005ae4 <HAL_GetTick>
 80088cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e2dc      	b.n	8008e92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d008      	beq.n	80088f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2280      	movs	r2, #128	; 0x80
 80088e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e2cd      	b.n	8008e92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a76      	ldr	r2, [pc, #472]	; (8008ad4 <HAL_DMA_Abort+0x214>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d04a      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a74      	ldr	r2, [pc, #464]	; (8008ad8 <HAL_DMA_Abort+0x218>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d045      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a73      	ldr	r2, [pc, #460]	; (8008adc <HAL_DMA_Abort+0x21c>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d040      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a71      	ldr	r2, [pc, #452]	; (8008ae0 <HAL_DMA_Abort+0x220>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d03b      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a70      	ldr	r2, [pc, #448]	; (8008ae4 <HAL_DMA_Abort+0x224>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d036      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a6e      	ldr	r2, [pc, #440]	; (8008ae8 <HAL_DMA_Abort+0x228>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d031      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a6d      	ldr	r2, [pc, #436]	; (8008aec <HAL_DMA_Abort+0x22c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d02c      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a6b      	ldr	r2, [pc, #428]	; (8008af0 <HAL_DMA_Abort+0x230>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d027      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a6a      	ldr	r2, [pc, #424]	; (8008af4 <HAL_DMA_Abort+0x234>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d022      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a68      	ldr	r2, [pc, #416]	; (8008af8 <HAL_DMA_Abort+0x238>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d01d      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a67      	ldr	r2, [pc, #412]	; (8008afc <HAL_DMA_Abort+0x23c>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d018      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a65      	ldr	r2, [pc, #404]	; (8008b00 <HAL_DMA_Abort+0x240>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d013      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a64      	ldr	r2, [pc, #400]	; (8008b04 <HAL_DMA_Abort+0x244>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00e      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a62      	ldr	r2, [pc, #392]	; (8008b08 <HAL_DMA_Abort+0x248>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d009      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a61      	ldr	r2, [pc, #388]	; (8008b0c <HAL_DMA_Abort+0x24c>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d004      	beq.n	8008996 <HAL_DMA_Abort+0xd6>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a5f      	ldr	r2, [pc, #380]	; (8008b10 <HAL_DMA_Abort+0x250>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d101      	bne.n	800899a <HAL_DMA_Abort+0xda>
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <HAL_DMA_Abort+0xdc>
 800899a:	2300      	movs	r3, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d013      	beq.n	80089c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 021e 	bic.w	r2, r2, #30
 80089ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	695a      	ldr	r2, [r3, #20]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	e00a      	b.n	80089de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 020e 	bic.w	r2, r2, #14
 80089d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a3c      	ldr	r2, [pc, #240]	; (8008ad4 <HAL_DMA_Abort+0x214>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d072      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a3a      	ldr	r2, [pc, #232]	; (8008ad8 <HAL_DMA_Abort+0x218>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d06d      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a39      	ldr	r2, [pc, #228]	; (8008adc <HAL_DMA_Abort+0x21c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d068      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a37      	ldr	r2, [pc, #220]	; (8008ae0 <HAL_DMA_Abort+0x220>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d063      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a36      	ldr	r2, [pc, #216]	; (8008ae4 <HAL_DMA_Abort+0x224>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d05e      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a34      	ldr	r2, [pc, #208]	; (8008ae8 <HAL_DMA_Abort+0x228>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d059      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a33      	ldr	r2, [pc, #204]	; (8008aec <HAL_DMA_Abort+0x22c>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d054      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a31      	ldr	r2, [pc, #196]	; (8008af0 <HAL_DMA_Abort+0x230>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d04f      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a30      	ldr	r2, [pc, #192]	; (8008af4 <HAL_DMA_Abort+0x234>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d04a      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a2e      	ldr	r2, [pc, #184]	; (8008af8 <HAL_DMA_Abort+0x238>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d045      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a2d      	ldr	r2, [pc, #180]	; (8008afc <HAL_DMA_Abort+0x23c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d040      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a2b      	ldr	r2, [pc, #172]	; (8008b00 <HAL_DMA_Abort+0x240>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d03b      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a2a      	ldr	r2, [pc, #168]	; (8008b04 <HAL_DMA_Abort+0x244>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d036      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a28      	ldr	r2, [pc, #160]	; (8008b08 <HAL_DMA_Abort+0x248>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d031      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a27      	ldr	r2, [pc, #156]	; (8008b0c <HAL_DMA_Abort+0x24c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d02c      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a25      	ldr	r2, [pc, #148]	; (8008b10 <HAL_DMA_Abort+0x250>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d027      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a24      	ldr	r2, [pc, #144]	; (8008b14 <HAL_DMA_Abort+0x254>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d022      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a22      	ldr	r2, [pc, #136]	; (8008b18 <HAL_DMA_Abort+0x258>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d01d      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a21      	ldr	r2, [pc, #132]	; (8008b1c <HAL_DMA_Abort+0x25c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d018      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a1f      	ldr	r2, [pc, #124]	; (8008b20 <HAL_DMA_Abort+0x260>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d013      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a1e      	ldr	r2, [pc, #120]	; (8008b24 <HAL_DMA_Abort+0x264>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d00e      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a1c      	ldr	r2, [pc, #112]	; (8008b28 <HAL_DMA_Abort+0x268>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d009      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a1b      	ldr	r2, [pc, #108]	; (8008b2c <HAL_DMA_Abort+0x26c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d004      	beq.n	8008ace <HAL_DMA_Abort+0x20e>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a19      	ldr	r2, [pc, #100]	; (8008b30 <HAL_DMA_Abort+0x270>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d132      	bne.n	8008b34 <HAL_DMA_Abort+0x274>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e031      	b.n	8008b36 <HAL_DMA_Abort+0x276>
 8008ad2:	bf00      	nop
 8008ad4:	40020010 	.word	0x40020010
 8008ad8:	40020028 	.word	0x40020028
 8008adc:	40020040 	.word	0x40020040
 8008ae0:	40020058 	.word	0x40020058
 8008ae4:	40020070 	.word	0x40020070
 8008ae8:	40020088 	.word	0x40020088
 8008aec:	400200a0 	.word	0x400200a0
 8008af0:	400200b8 	.word	0x400200b8
 8008af4:	40020410 	.word	0x40020410
 8008af8:	40020428 	.word	0x40020428
 8008afc:	40020440 	.word	0x40020440
 8008b00:	40020458 	.word	0x40020458
 8008b04:	40020470 	.word	0x40020470
 8008b08:	40020488 	.word	0x40020488
 8008b0c:	400204a0 	.word	0x400204a0
 8008b10:	400204b8 	.word	0x400204b8
 8008b14:	58025408 	.word	0x58025408
 8008b18:	5802541c 	.word	0x5802541c
 8008b1c:	58025430 	.word	0x58025430
 8008b20:	58025444 	.word	0x58025444
 8008b24:	58025458 	.word	0x58025458
 8008b28:	5802546c 	.word	0x5802546c
 8008b2c:	58025480 	.word	0x58025480
 8008b30:	58025494 	.word	0x58025494
 8008b34:	2300      	movs	r3, #0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d007      	beq.n	8008b4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a6d      	ldr	r2, [pc, #436]	; (8008d04 <HAL_DMA_Abort+0x444>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d04a      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a6b      	ldr	r2, [pc, #428]	; (8008d08 <HAL_DMA_Abort+0x448>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d045      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a6a      	ldr	r2, [pc, #424]	; (8008d0c <HAL_DMA_Abort+0x44c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d040      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a68      	ldr	r2, [pc, #416]	; (8008d10 <HAL_DMA_Abort+0x450>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d03b      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a67      	ldr	r2, [pc, #412]	; (8008d14 <HAL_DMA_Abort+0x454>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d036      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a65      	ldr	r2, [pc, #404]	; (8008d18 <HAL_DMA_Abort+0x458>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d031      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a64      	ldr	r2, [pc, #400]	; (8008d1c <HAL_DMA_Abort+0x45c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d02c      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a62      	ldr	r2, [pc, #392]	; (8008d20 <HAL_DMA_Abort+0x460>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d027      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a61      	ldr	r2, [pc, #388]	; (8008d24 <HAL_DMA_Abort+0x464>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d022      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a5f      	ldr	r2, [pc, #380]	; (8008d28 <HAL_DMA_Abort+0x468>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d01d      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a5e      	ldr	r2, [pc, #376]	; (8008d2c <HAL_DMA_Abort+0x46c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d018      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a5c      	ldr	r2, [pc, #368]	; (8008d30 <HAL_DMA_Abort+0x470>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d013      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a5b      	ldr	r2, [pc, #364]	; (8008d34 <HAL_DMA_Abort+0x474>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00e      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a59      	ldr	r2, [pc, #356]	; (8008d38 <HAL_DMA_Abort+0x478>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d009      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a58      	ldr	r2, [pc, #352]	; (8008d3c <HAL_DMA_Abort+0x47c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d004      	beq.n	8008bea <HAL_DMA_Abort+0x32a>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a56      	ldr	r2, [pc, #344]	; (8008d40 <HAL_DMA_Abort+0x480>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d108      	bne.n	8008bfc <HAL_DMA_Abort+0x33c>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0201 	bic.w	r2, r2, #1
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	e007      	b.n	8008c0c <HAL_DMA_Abort+0x34c>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 0201 	bic.w	r2, r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008c0c:	e013      	b.n	8008c36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c0e:	f7fc ff69 	bl	8005ae4 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	2b05      	cmp	r3, #5
 8008c1a:	d90c      	bls.n	8008c36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2203      	movs	r2, #3
 8008c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e12d      	b.n	8008e92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e5      	bne.n	8008c0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a2f      	ldr	r2, [pc, #188]	; (8008d04 <HAL_DMA_Abort+0x444>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d04a      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a2d      	ldr	r2, [pc, #180]	; (8008d08 <HAL_DMA_Abort+0x448>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d045      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a2c      	ldr	r2, [pc, #176]	; (8008d0c <HAL_DMA_Abort+0x44c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d040      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a2a      	ldr	r2, [pc, #168]	; (8008d10 <HAL_DMA_Abort+0x450>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d03b      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a29      	ldr	r2, [pc, #164]	; (8008d14 <HAL_DMA_Abort+0x454>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d036      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a27      	ldr	r2, [pc, #156]	; (8008d18 <HAL_DMA_Abort+0x458>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d031      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a26      	ldr	r2, [pc, #152]	; (8008d1c <HAL_DMA_Abort+0x45c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d02c      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a24      	ldr	r2, [pc, #144]	; (8008d20 <HAL_DMA_Abort+0x460>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d027      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a23      	ldr	r2, [pc, #140]	; (8008d24 <HAL_DMA_Abort+0x464>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d022      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a21      	ldr	r2, [pc, #132]	; (8008d28 <HAL_DMA_Abort+0x468>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d01d      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a20      	ldr	r2, [pc, #128]	; (8008d2c <HAL_DMA_Abort+0x46c>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d018      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a1e      	ldr	r2, [pc, #120]	; (8008d30 <HAL_DMA_Abort+0x470>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d013      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a1d      	ldr	r2, [pc, #116]	; (8008d34 <HAL_DMA_Abort+0x474>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d00e      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a1b      	ldr	r2, [pc, #108]	; (8008d38 <HAL_DMA_Abort+0x478>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d009      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a1a      	ldr	r2, [pc, #104]	; (8008d3c <HAL_DMA_Abort+0x47c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d004      	beq.n	8008ce2 <HAL_DMA_Abort+0x422>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a18      	ldr	r2, [pc, #96]	; (8008d40 <HAL_DMA_Abort+0x480>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d101      	bne.n	8008ce6 <HAL_DMA_Abort+0x426>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e000      	b.n	8008ce8 <HAL_DMA_Abort+0x428>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d02b      	beq.n	8008d44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf6:	f003 031f 	and.w	r3, r3, #31
 8008cfa:	223f      	movs	r2, #63	; 0x3f
 8008cfc:	409a      	lsls	r2, r3
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	609a      	str	r2, [r3, #8]
 8008d02:	e02a      	b.n	8008d5a <HAL_DMA_Abort+0x49a>
 8008d04:	40020010 	.word	0x40020010
 8008d08:	40020028 	.word	0x40020028
 8008d0c:	40020040 	.word	0x40020040
 8008d10:	40020058 	.word	0x40020058
 8008d14:	40020070 	.word	0x40020070
 8008d18:	40020088 	.word	0x40020088
 8008d1c:	400200a0 	.word	0x400200a0
 8008d20:	400200b8 	.word	0x400200b8
 8008d24:	40020410 	.word	0x40020410
 8008d28:	40020428 	.word	0x40020428
 8008d2c:	40020440 	.word	0x40020440
 8008d30:	40020458 	.word	0x40020458
 8008d34:	40020470 	.word	0x40020470
 8008d38:	40020488 	.word	0x40020488
 8008d3c:	400204a0 	.word	0x400204a0
 8008d40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d4e:	f003 031f 	and.w	r3, r3, #31
 8008d52:	2201      	movs	r2, #1
 8008d54:	409a      	lsls	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a4f      	ldr	r2, [pc, #316]	; (8008e9c <HAL_DMA_Abort+0x5dc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d072      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a4d      	ldr	r2, [pc, #308]	; (8008ea0 <HAL_DMA_Abort+0x5e0>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d06d      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a4c      	ldr	r2, [pc, #304]	; (8008ea4 <HAL_DMA_Abort+0x5e4>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d068      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a4a      	ldr	r2, [pc, #296]	; (8008ea8 <HAL_DMA_Abort+0x5e8>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d063      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a49      	ldr	r2, [pc, #292]	; (8008eac <HAL_DMA_Abort+0x5ec>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d05e      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a47      	ldr	r2, [pc, #284]	; (8008eb0 <HAL_DMA_Abort+0x5f0>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d059      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a46      	ldr	r2, [pc, #280]	; (8008eb4 <HAL_DMA_Abort+0x5f4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d054      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a44      	ldr	r2, [pc, #272]	; (8008eb8 <HAL_DMA_Abort+0x5f8>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d04f      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a43      	ldr	r2, [pc, #268]	; (8008ebc <HAL_DMA_Abort+0x5fc>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d04a      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a41      	ldr	r2, [pc, #260]	; (8008ec0 <HAL_DMA_Abort+0x600>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d045      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a40      	ldr	r2, [pc, #256]	; (8008ec4 <HAL_DMA_Abort+0x604>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d040      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a3e      	ldr	r2, [pc, #248]	; (8008ec8 <HAL_DMA_Abort+0x608>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d03b      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a3d      	ldr	r2, [pc, #244]	; (8008ecc <HAL_DMA_Abort+0x60c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d036      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a3b      	ldr	r2, [pc, #236]	; (8008ed0 <HAL_DMA_Abort+0x610>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d031      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a3a      	ldr	r2, [pc, #232]	; (8008ed4 <HAL_DMA_Abort+0x614>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d02c      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a38      	ldr	r2, [pc, #224]	; (8008ed8 <HAL_DMA_Abort+0x618>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d027      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a37      	ldr	r2, [pc, #220]	; (8008edc <HAL_DMA_Abort+0x61c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d022      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a35      	ldr	r2, [pc, #212]	; (8008ee0 <HAL_DMA_Abort+0x620>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d01d      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a34      	ldr	r2, [pc, #208]	; (8008ee4 <HAL_DMA_Abort+0x624>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d018      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a32      	ldr	r2, [pc, #200]	; (8008ee8 <HAL_DMA_Abort+0x628>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d013      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a31      	ldr	r2, [pc, #196]	; (8008eec <HAL_DMA_Abort+0x62c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00e      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a2f      	ldr	r2, [pc, #188]	; (8008ef0 <HAL_DMA_Abort+0x630>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d009      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a2e      	ldr	r2, [pc, #184]	; (8008ef4 <HAL_DMA_Abort+0x634>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d004      	beq.n	8008e4a <HAL_DMA_Abort+0x58a>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a2c      	ldr	r2, [pc, #176]	; (8008ef8 <HAL_DMA_Abort+0x638>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d101      	bne.n	8008e4e <HAL_DMA_Abort+0x58e>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <HAL_DMA_Abort+0x590>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d015      	beq.n	8008e80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008e5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00c      	beq.n	8008e80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008e7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3718      	adds	r7, #24
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	40020010 	.word	0x40020010
 8008ea0:	40020028 	.word	0x40020028
 8008ea4:	40020040 	.word	0x40020040
 8008ea8:	40020058 	.word	0x40020058
 8008eac:	40020070 	.word	0x40020070
 8008eb0:	40020088 	.word	0x40020088
 8008eb4:	400200a0 	.word	0x400200a0
 8008eb8:	400200b8 	.word	0x400200b8
 8008ebc:	40020410 	.word	0x40020410
 8008ec0:	40020428 	.word	0x40020428
 8008ec4:	40020440 	.word	0x40020440
 8008ec8:	40020458 	.word	0x40020458
 8008ecc:	40020470 	.word	0x40020470
 8008ed0:	40020488 	.word	0x40020488
 8008ed4:	400204a0 	.word	0x400204a0
 8008ed8:	400204b8 	.word	0x400204b8
 8008edc:	58025408 	.word	0x58025408
 8008ee0:	5802541c 	.word	0x5802541c
 8008ee4:	58025430 	.word	0x58025430
 8008ee8:	58025444 	.word	0x58025444
 8008eec:	58025458 	.word	0x58025458
 8008ef0:	5802546c 	.word	0x5802546c
 8008ef4:	58025480 	.word	0x58025480
 8008ef8:	58025494 	.word	0x58025494

08008efc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e237      	b.n	800937e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d004      	beq.n	8008f24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2280      	movs	r2, #128	; 0x80
 8008f1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e22c      	b.n	800937e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a5c      	ldr	r2, [pc, #368]	; (800909c <HAL_DMA_Abort_IT+0x1a0>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d04a      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a5b      	ldr	r2, [pc, #364]	; (80090a0 <HAL_DMA_Abort_IT+0x1a4>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d045      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a59      	ldr	r2, [pc, #356]	; (80090a4 <HAL_DMA_Abort_IT+0x1a8>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d040      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a58      	ldr	r2, [pc, #352]	; (80090a8 <HAL_DMA_Abort_IT+0x1ac>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d03b      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a56      	ldr	r2, [pc, #344]	; (80090ac <HAL_DMA_Abort_IT+0x1b0>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d036      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a55      	ldr	r2, [pc, #340]	; (80090b0 <HAL_DMA_Abort_IT+0x1b4>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d031      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a53      	ldr	r2, [pc, #332]	; (80090b4 <HAL_DMA_Abort_IT+0x1b8>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d02c      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a52      	ldr	r2, [pc, #328]	; (80090b8 <HAL_DMA_Abort_IT+0x1bc>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d027      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a50      	ldr	r2, [pc, #320]	; (80090bc <HAL_DMA_Abort_IT+0x1c0>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d022      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a4f      	ldr	r2, [pc, #316]	; (80090c0 <HAL_DMA_Abort_IT+0x1c4>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d01d      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a4d      	ldr	r2, [pc, #308]	; (80090c4 <HAL_DMA_Abort_IT+0x1c8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d018      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a4c      	ldr	r2, [pc, #304]	; (80090c8 <HAL_DMA_Abort_IT+0x1cc>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d013      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a4a      	ldr	r2, [pc, #296]	; (80090cc <HAL_DMA_Abort_IT+0x1d0>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00e      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a49      	ldr	r2, [pc, #292]	; (80090d0 <HAL_DMA_Abort_IT+0x1d4>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d009      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a47      	ldr	r2, [pc, #284]	; (80090d4 <HAL_DMA_Abort_IT+0x1d8>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d004      	beq.n	8008fc4 <HAL_DMA_Abort_IT+0xc8>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a46      	ldr	r2, [pc, #280]	; (80090d8 <HAL_DMA_Abort_IT+0x1dc>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d101      	bne.n	8008fc8 <HAL_DMA_Abort_IT+0xcc>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e000      	b.n	8008fca <HAL_DMA_Abort_IT+0xce>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 8086 	beq.w	80090dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2204      	movs	r2, #4
 8008fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a2f      	ldr	r2, [pc, #188]	; (800909c <HAL_DMA_Abort_IT+0x1a0>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d04a      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a2e      	ldr	r2, [pc, #184]	; (80090a0 <HAL_DMA_Abort_IT+0x1a4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d045      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a2c      	ldr	r2, [pc, #176]	; (80090a4 <HAL_DMA_Abort_IT+0x1a8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d040      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a2b      	ldr	r2, [pc, #172]	; (80090a8 <HAL_DMA_Abort_IT+0x1ac>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d03b      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a29      	ldr	r2, [pc, #164]	; (80090ac <HAL_DMA_Abort_IT+0x1b0>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d036      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a28      	ldr	r2, [pc, #160]	; (80090b0 <HAL_DMA_Abort_IT+0x1b4>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d031      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a26      	ldr	r2, [pc, #152]	; (80090b4 <HAL_DMA_Abort_IT+0x1b8>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d02c      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a25      	ldr	r2, [pc, #148]	; (80090b8 <HAL_DMA_Abort_IT+0x1bc>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d027      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a23      	ldr	r2, [pc, #140]	; (80090bc <HAL_DMA_Abort_IT+0x1c0>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d022      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a22      	ldr	r2, [pc, #136]	; (80090c0 <HAL_DMA_Abort_IT+0x1c4>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d01d      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a20      	ldr	r2, [pc, #128]	; (80090c4 <HAL_DMA_Abort_IT+0x1c8>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d018      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a1f      	ldr	r2, [pc, #124]	; (80090c8 <HAL_DMA_Abort_IT+0x1cc>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d013      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a1d      	ldr	r2, [pc, #116]	; (80090cc <HAL_DMA_Abort_IT+0x1d0>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d00e      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a1c      	ldr	r2, [pc, #112]	; (80090d0 <HAL_DMA_Abort_IT+0x1d4>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d009      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a1a      	ldr	r2, [pc, #104]	; (80090d4 <HAL_DMA_Abort_IT+0x1d8>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d004      	beq.n	8009078 <HAL_DMA_Abort_IT+0x17c>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a19      	ldr	r2, [pc, #100]	; (80090d8 <HAL_DMA_Abort_IT+0x1dc>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d108      	bne.n	800908a <HAL_DMA_Abort_IT+0x18e>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f022 0201 	bic.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	e178      	b.n	800937c <HAL_DMA_Abort_IT+0x480>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 0201 	bic.w	r2, r2, #1
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	e16f      	b.n	800937c <HAL_DMA_Abort_IT+0x480>
 800909c:	40020010 	.word	0x40020010
 80090a0:	40020028 	.word	0x40020028
 80090a4:	40020040 	.word	0x40020040
 80090a8:	40020058 	.word	0x40020058
 80090ac:	40020070 	.word	0x40020070
 80090b0:	40020088 	.word	0x40020088
 80090b4:	400200a0 	.word	0x400200a0
 80090b8:	400200b8 	.word	0x400200b8
 80090bc:	40020410 	.word	0x40020410
 80090c0:	40020428 	.word	0x40020428
 80090c4:	40020440 	.word	0x40020440
 80090c8:	40020458 	.word	0x40020458
 80090cc:	40020470 	.word	0x40020470
 80090d0:	40020488 	.word	0x40020488
 80090d4:	400204a0 	.word	0x400204a0
 80090d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 020e 	bic.w	r2, r2, #14
 80090ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a6c      	ldr	r2, [pc, #432]	; (80092a4 <HAL_DMA_Abort_IT+0x3a8>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d04a      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a6b      	ldr	r2, [pc, #428]	; (80092a8 <HAL_DMA_Abort_IT+0x3ac>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d045      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a69      	ldr	r2, [pc, #420]	; (80092ac <HAL_DMA_Abort_IT+0x3b0>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d040      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a68      	ldr	r2, [pc, #416]	; (80092b0 <HAL_DMA_Abort_IT+0x3b4>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d03b      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a66      	ldr	r2, [pc, #408]	; (80092b4 <HAL_DMA_Abort_IT+0x3b8>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d036      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a65      	ldr	r2, [pc, #404]	; (80092b8 <HAL_DMA_Abort_IT+0x3bc>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d031      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a63      	ldr	r2, [pc, #396]	; (80092bc <HAL_DMA_Abort_IT+0x3c0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d02c      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a62      	ldr	r2, [pc, #392]	; (80092c0 <HAL_DMA_Abort_IT+0x3c4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d027      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a60      	ldr	r2, [pc, #384]	; (80092c4 <HAL_DMA_Abort_IT+0x3c8>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d022      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a5f      	ldr	r2, [pc, #380]	; (80092c8 <HAL_DMA_Abort_IT+0x3cc>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d01d      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a5d      	ldr	r2, [pc, #372]	; (80092cc <HAL_DMA_Abort_IT+0x3d0>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d018      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a5c      	ldr	r2, [pc, #368]	; (80092d0 <HAL_DMA_Abort_IT+0x3d4>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d013      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a5a      	ldr	r2, [pc, #360]	; (80092d4 <HAL_DMA_Abort_IT+0x3d8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d00e      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a59      	ldr	r2, [pc, #356]	; (80092d8 <HAL_DMA_Abort_IT+0x3dc>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d009      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a57      	ldr	r2, [pc, #348]	; (80092dc <HAL_DMA_Abort_IT+0x3e0>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d004      	beq.n	800918c <HAL_DMA_Abort_IT+0x290>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a56      	ldr	r2, [pc, #344]	; (80092e0 <HAL_DMA_Abort_IT+0x3e4>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d108      	bne.n	800919e <HAL_DMA_Abort_IT+0x2a2>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0201 	bic.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	e007      	b.n	80091ae <HAL_DMA_Abort_IT+0x2b2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 0201 	bic.w	r2, r2, #1
 80091ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a3c      	ldr	r2, [pc, #240]	; (80092a4 <HAL_DMA_Abort_IT+0x3a8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d072      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a3a      	ldr	r2, [pc, #232]	; (80092a8 <HAL_DMA_Abort_IT+0x3ac>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d06d      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a39      	ldr	r2, [pc, #228]	; (80092ac <HAL_DMA_Abort_IT+0x3b0>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d068      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a37      	ldr	r2, [pc, #220]	; (80092b0 <HAL_DMA_Abort_IT+0x3b4>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d063      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a36      	ldr	r2, [pc, #216]	; (80092b4 <HAL_DMA_Abort_IT+0x3b8>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d05e      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a34      	ldr	r2, [pc, #208]	; (80092b8 <HAL_DMA_Abort_IT+0x3bc>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d059      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a33      	ldr	r2, [pc, #204]	; (80092bc <HAL_DMA_Abort_IT+0x3c0>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d054      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a31      	ldr	r2, [pc, #196]	; (80092c0 <HAL_DMA_Abort_IT+0x3c4>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d04f      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a30      	ldr	r2, [pc, #192]	; (80092c4 <HAL_DMA_Abort_IT+0x3c8>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d04a      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a2e      	ldr	r2, [pc, #184]	; (80092c8 <HAL_DMA_Abort_IT+0x3cc>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d045      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a2d      	ldr	r2, [pc, #180]	; (80092cc <HAL_DMA_Abort_IT+0x3d0>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d040      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a2b      	ldr	r2, [pc, #172]	; (80092d0 <HAL_DMA_Abort_IT+0x3d4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d03b      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a2a      	ldr	r2, [pc, #168]	; (80092d4 <HAL_DMA_Abort_IT+0x3d8>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d036      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a28      	ldr	r2, [pc, #160]	; (80092d8 <HAL_DMA_Abort_IT+0x3dc>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d031      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a27      	ldr	r2, [pc, #156]	; (80092dc <HAL_DMA_Abort_IT+0x3e0>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d02c      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a25      	ldr	r2, [pc, #148]	; (80092e0 <HAL_DMA_Abort_IT+0x3e4>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d027      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a24      	ldr	r2, [pc, #144]	; (80092e4 <HAL_DMA_Abort_IT+0x3e8>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d022      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a22      	ldr	r2, [pc, #136]	; (80092e8 <HAL_DMA_Abort_IT+0x3ec>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d01d      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a21      	ldr	r2, [pc, #132]	; (80092ec <HAL_DMA_Abort_IT+0x3f0>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d018      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a1f      	ldr	r2, [pc, #124]	; (80092f0 <HAL_DMA_Abort_IT+0x3f4>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d013      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a1e      	ldr	r2, [pc, #120]	; (80092f4 <HAL_DMA_Abort_IT+0x3f8>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00e      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a1c      	ldr	r2, [pc, #112]	; (80092f8 <HAL_DMA_Abort_IT+0x3fc>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d009      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a1b      	ldr	r2, [pc, #108]	; (80092fc <HAL_DMA_Abort_IT+0x400>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d004      	beq.n	800929e <HAL_DMA_Abort_IT+0x3a2>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a19      	ldr	r2, [pc, #100]	; (8009300 <HAL_DMA_Abort_IT+0x404>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d132      	bne.n	8009304 <HAL_DMA_Abort_IT+0x408>
 800929e:	2301      	movs	r3, #1
 80092a0:	e031      	b.n	8009306 <HAL_DMA_Abort_IT+0x40a>
 80092a2:	bf00      	nop
 80092a4:	40020010 	.word	0x40020010
 80092a8:	40020028 	.word	0x40020028
 80092ac:	40020040 	.word	0x40020040
 80092b0:	40020058 	.word	0x40020058
 80092b4:	40020070 	.word	0x40020070
 80092b8:	40020088 	.word	0x40020088
 80092bc:	400200a0 	.word	0x400200a0
 80092c0:	400200b8 	.word	0x400200b8
 80092c4:	40020410 	.word	0x40020410
 80092c8:	40020428 	.word	0x40020428
 80092cc:	40020440 	.word	0x40020440
 80092d0:	40020458 	.word	0x40020458
 80092d4:	40020470 	.word	0x40020470
 80092d8:	40020488 	.word	0x40020488
 80092dc:	400204a0 	.word	0x400204a0
 80092e0:	400204b8 	.word	0x400204b8
 80092e4:	58025408 	.word	0x58025408
 80092e8:	5802541c 	.word	0x5802541c
 80092ec:	58025430 	.word	0x58025430
 80092f0:	58025444 	.word	0x58025444
 80092f4:	58025458 	.word	0x58025458
 80092f8:	5802546c 	.word	0x5802546c
 80092fc:	58025480 	.word	0x58025480
 8009300:	58025494 	.word	0x58025494
 8009304:	2300      	movs	r3, #0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d028      	beq.n	800935c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009318:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009324:	f003 031f 	and.w	r3, r3, #31
 8009328:	2201      	movs	r2, #1
 800932a:	409a      	lsls	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009338:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00c      	beq.n	800935c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009350:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800935a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop

08009388 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08a      	sub	sp, #40	; 0x28
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009394:	4b67      	ldr	r3, [pc, #412]	; (8009534 <HAL_DMA_IRQHandler+0x1ac>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a67      	ldr	r2, [pc, #412]	; (8009538 <HAL_DMA_IRQHandler+0x1b0>)
 800939a:	fba2 2303 	umull	r2, r3, r2, r3
 800939e:	0a9b      	lsrs	r3, r3, #10
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a5f      	ldr	r2, [pc, #380]	; (800953c <HAL_DMA_IRQHandler+0x1b4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d04a      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a5d      	ldr	r2, [pc, #372]	; (8009540 <HAL_DMA_IRQHandler+0x1b8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d045      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a5c      	ldr	r2, [pc, #368]	; (8009544 <HAL_DMA_IRQHandler+0x1bc>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d040      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a5a      	ldr	r2, [pc, #360]	; (8009548 <HAL_DMA_IRQHandler+0x1c0>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d03b      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a59      	ldr	r2, [pc, #356]	; (800954c <HAL_DMA_IRQHandler+0x1c4>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d036      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a57      	ldr	r2, [pc, #348]	; (8009550 <HAL_DMA_IRQHandler+0x1c8>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d031      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a56      	ldr	r2, [pc, #344]	; (8009554 <HAL_DMA_IRQHandler+0x1cc>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d02c      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a54      	ldr	r2, [pc, #336]	; (8009558 <HAL_DMA_IRQHandler+0x1d0>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d027      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a53      	ldr	r2, [pc, #332]	; (800955c <HAL_DMA_IRQHandler+0x1d4>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d022      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a51      	ldr	r2, [pc, #324]	; (8009560 <HAL_DMA_IRQHandler+0x1d8>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d01d      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a50      	ldr	r2, [pc, #320]	; (8009564 <HAL_DMA_IRQHandler+0x1dc>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d018      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a4e      	ldr	r2, [pc, #312]	; (8009568 <HAL_DMA_IRQHandler+0x1e0>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d013      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a4d      	ldr	r2, [pc, #308]	; (800956c <HAL_DMA_IRQHandler+0x1e4>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00e      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a4b      	ldr	r2, [pc, #300]	; (8009570 <HAL_DMA_IRQHandler+0x1e8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d009      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a4a      	ldr	r2, [pc, #296]	; (8009574 <HAL_DMA_IRQHandler+0x1ec>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d004      	beq.n	800945a <HAL_DMA_IRQHandler+0xd2>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a48      	ldr	r2, [pc, #288]	; (8009578 <HAL_DMA_IRQHandler+0x1f0>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d101      	bne.n	800945e <HAL_DMA_IRQHandler+0xd6>
 800945a:	2301      	movs	r3, #1
 800945c:	e000      	b.n	8009460 <HAL_DMA_IRQHandler+0xd8>
 800945e:	2300      	movs	r3, #0
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 842b 	beq.w	8009cbc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800946a:	f003 031f 	and.w	r3, r3, #31
 800946e:	2208      	movs	r2, #8
 8009470:	409a      	lsls	r2, r3
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	4013      	ands	r3, r2
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 80a2 	beq.w	80095c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a2e      	ldr	r2, [pc, #184]	; (800953c <HAL_DMA_IRQHandler+0x1b4>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d04a      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a2d      	ldr	r2, [pc, #180]	; (8009540 <HAL_DMA_IRQHandler+0x1b8>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d045      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a2b      	ldr	r2, [pc, #172]	; (8009544 <HAL_DMA_IRQHandler+0x1bc>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d040      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a2a      	ldr	r2, [pc, #168]	; (8009548 <HAL_DMA_IRQHandler+0x1c0>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d03b      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a28      	ldr	r2, [pc, #160]	; (800954c <HAL_DMA_IRQHandler+0x1c4>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d036      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a27      	ldr	r2, [pc, #156]	; (8009550 <HAL_DMA_IRQHandler+0x1c8>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d031      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a25      	ldr	r2, [pc, #148]	; (8009554 <HAL_DMA_IRQHandler+0x1cc>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d02c      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a24      	ldr	r2, [pc, #144]	; (8009558 <HAL_DMA_IRQHandler+0x1d0>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d027      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a22      	ldr	r2, [pc, #136]	; (800955c <HAL_DMA_IRQHandler+0x1d4>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d022      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a21      	ldr	r2, [pc, #132]	; (8009560 <HAL_DMA_IRQHandler+0x1d8>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d01d      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a1f      	ldr	r2, [pc, #124]	; (8009564 <HAL_DMA_IRQHandler+0x1dc>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d018      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a1e      	ldr	r2, [pc, #120]	; (8009568 <HAL_DMA_IRQHandler+0x1e0>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d013      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a1c      	ldr	r2, [pc, #112]	; (800956c <HAL_DMA_IRQHandler+0x1e4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00e      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a1b      	ldr	r2, [pc, #108]	; (8009570 <HAL_DMA_IRQHandler+0x1e8>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d009      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a19      	ldr	r2, [pc, #100]	; (8009574 <HAL_DMA_IRQHandler+0x1ec>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d004      	beq.n	800951c <HAL_DMA_IRQHandler+0x194>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a18      	ldr	r2, [pc, #96]	; (8009578 <HAL_DMA_IRQHandler+0x1f0>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d12f      	bne.n	800957c <HAL_DMA_IRQHandler+0x1f4>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	bf14      	ite	ne
 800952a:	2301      	movne	r3, #1
 800952c:	2300      	moveq	r3, #0
 800952e:	b2db      	uxtb	r3, r3
 8009530:	e02e      	b.n	8009590 <HAL_DMA_IRQHandler+0x208>
 8009532:	bf00      	nop
 8009534:	240000c0 	.word	0x240000c0
 8009538:	1b4e81b5 	.word	0x1b4e81b5
 800953c:	40020010 	.word	0x40020010
 8009540:	40020028 	.word	0x40020028
 8009544:	40020040 	.word	0x40020040
 8009548:	40020058 	.word	0x40020058
 800954c:	40020070 	.word	0x40020070
 8009550:	40020088 	.word	0x40020088
 8009554:	400200a0 	.word	0x400200a0
 8009558:	400200b8 	.word	0x400200b8
 800955c:	40020410 	.word	0x40020410
 8009560:	40020428 	.word	0x40020428
 8009564:	40020440 	.word	0x40020440
 8009568:	40020458 	.word	0x40020458
 800956c:	40020470 	.word	0x40020470
 8009570:	40020488 	.word	0x40020488
 8009574:	400204a0 	.word	0x400204a0
 8009578:	400204b8 	.word	0x400204b8
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0308 	and.w	r3, r3, #8
 8009586:	2b00      	cmp	r3, #0
 8009588:	bf14      	ite	ne
 800958a:	2301      	movne	r3, #1
 800958c:	2300      	moveq	r3, #0
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d015      	beq.n	80095c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f022 0204 	bic.w	r2, r2, #4
 80095a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a8:	f003 031f 	and.w	r3, r3, #31
 80095ac:	2208      	movs	r2, #8
 80095ae:	409a      	lsls	r2, r3
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b8:	f043 0201 	orr.w	r2, r3, #1
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095c4:	f003 031f 	and.w	r3, r3, #31
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	fa22 f303 	lsr.w	r3, r2, r3
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d06e      	beq.n	80096b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a69      	ldr	r2, [pc, #420]	; (8009780 <HAL_DMA_IRQHandler+0x3f8>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d04a      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a67      	ldr	r2, [pc, #412]	; (8009784 <HAL_DMA_IRQHandler+0x3fc>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d045      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a66      	ldr	r2, [pc, #408]	; (8009788 <HAL_DMA_IRQHandler+0x400>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d040      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a64      	ldr	r2, [pc, #400]	; (800978c <HAL_DMA_IRQHandler+0x404>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d03b      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a63      	ldr	r2, [pc, #396]	; (8009790 <HAL_DMA_IRQHandler+0x408>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d036      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a61      	ldr	r2, [pc, #388]	; (8009794 <HAL_DMA_IRQHandler+0x40c>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d031      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a60      	ldr	r2, [pc, #384]	; (8009798 <HAL_DMA_IRQHandler+0x410>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d02c      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a5e      	ldr	r2, [pc, #376]	; (800979c <HAL_DMA_IRQHandler+0x414>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d027      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a5d      	ldr	r2, [pc, #372]	; (80097a0 <HAL_DMA_IRQHandler+0x418>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d022      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a5b      	ldr	r2, [pc, #364]	; (80097a4 <HAL_DMA_IRQHandler+0x41c>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d01d      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a5a      	ldr	r2, [pc, #360]	; (80097a8 <HAL_DMA_IRQHandler+0x420>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d018      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a58      	ldr	r2, [pc, #352]	; (80097ac <HAL_DMA_IRQHandler+0x424>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d013      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a57      	ldr	r2, [pc, #348]	; (80097b0 <HAL_DMA_IRQHandler+0x428>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d00e      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a55      	ldr	r2, [pc, #340]	; (80097b4 <HAL_DMA_IRQHandler+0x42c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d009      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a54      	ldr	r2, [pc, #336]	; (80097b8 <HAL_DMA_IRQHandler+0x430>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d004      	beq.n	8009676 <HAL_DMA_IRQHandler+0x2ee>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a52      	ldr	r2, [pc, #328]	; (80097bc <HAL_DMA_IRQHandler+0x434>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d10a      	bne.n	800968c <HAL_DMA_IRQHandler+0x304>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009680:	2b00      	cmp	r3, #0
 8009682:	bf14      	ite	ne
 8009684:	2301      	movne	r3, #1
 8009686:	2300      	moveq	r3, #0
 8009688:	b2db      	uxtb	r3, r3
 800968a:	e003      	b.n	8009694 <HAL_DMA_IRQHandler+0x30c>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2300      	movs	r3, #0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00d      	beq.n	80096b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800969c:	f003 031f 	and.w	r3, r3, #31
 80096a0:	2201      	movs	r2, #1
 80096a2:	409a      	lsls	r2, r3
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ac:	f043 0202 	orr.w	r2, r3, #2
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096b8:	f003 031f 	and.w	r3, r3, #31
 80096bc:	2204      	movs	r2, #4
 80096be:	409a      	lsls	r2, r3
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	4013      	ands	r3, r2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 808f 	beq.w	80097e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a2c      	ldr	r2, [pc, #176]	; (8009780 <HAL_DMA_IRQHandler+0x3f8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d04a      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a2a      	ldr	r2, [pc, #168]	; (8009784 <HAL_DMA_IRQHandler+0x3fc>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d045      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a29      	ldr	r2, [pc, #164]	; (8009788 <HAL_DMA_IRQHandler+0x400>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d040      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a27      	ldr	r2, [pc, #156]	; (800978c <HAL_DMA_IRQHandler+0x404>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d03b      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a26      	ldr	r2, [pc, #152]	; (8009790 <HAL_DMA_IRQHandler+0x408>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d036      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a24      	ldr	r2, [pc, #144]	; (8009794 <HAL_DMA_IRQHandler+0x40c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d031      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a23      	ldr	r2, [pc, #140]	; (8009798 <HAL_DMA_IRQHandler+0x410>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d02c      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a21      	ldr	r2, [pc, #132]	; (800979c <HAL_DMA_IRQHandler+0x414>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d027      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a20      	ldr	r2, [pc, #128]	; (80097a0 <HAL_DMA_IRQHandler+0x418>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d022      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a1e      	ldr	r2, [pc, #120]	; (80097a4 <HAL_DMA_IRQHandler+0x41c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d01d      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a1d      	ldr	r2, [pc, #116]	; (80097a8 <HAL_DMA_IRQHandler+0x420>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d018      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a1b      	ldr	r2, [pc, #108]	; (80097ac <HAL_DMA_IRQHandler+0x424>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d013      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a1a      	ldr	r2, [pc, #104]	; (80097b0 <HAL_DMA_IRQHandler+0x428>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d00e      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a18      	ldr	r2, [pc, #96]	; (80097b4 <HAL_DMA_IRQHandler+0x42c>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d009      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a17      	ldr	r2, [pc, #92]	; (80097b8 <HAL_DMA_IRQHandler+0x430>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d004      	beq.n	800976a <HAL_DMA_IRQHandler+0x3e2>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a15      	ldr	r2, [pc, #84]	; (80097bc <HAL_DMA_IRQHandler+0x434>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d12a      	bne.n	80097c0 <HAL_DMA_IRQHandler+0x438>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0302 	and.w	r3, r3, #2
 8009774:	2b00      	cmp	r3, #0
 8009776:	bf14      	ite	ne
 8009778:	2301      	movne	r3, #1
 800977a:	2300      	moveq	r3, #0
 800977c:	b2db      	uxtb	r3, r3
 800977e:	e023      	b.n	80097c8 <HAL_DMA_IRQHandler+0x440>
 8009780:	40020010 	.word	0x40020010
 8009784:	40020028 	.word	0x40020028
 8009788:	40020040 	.word	0x40020040
 800978c:	40020058 	.word	0x40020058
 8009790:	40020070 	.word	0x40020070
 8009794:	40020088 	.word	0x40020088
 8009798:	400200a0 	.word	0x400200a0
 800979c:	400200b8 	.word	0x400200b8
 80097a0:	40020410 	.word	0x40020410
 80097a4:	40020428 	.word	0x40020428
 80097a8:	40020440 	.word	0x40020440
 80097ac:	40020458 	.word	0x40020458
 80097b0:	40020470 	.word	0x40020470
 80097b4:	40020488 	.word	0x40020488
 80097b8:	400204a0 	.word	0x400204a0
 80097bc:	400204b8 	.word	0x400204b8
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2300      	movs	r3, #0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00d      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097d0:	f003 031f 	and.w	r3, r3, #31
 80097d4:	2204      	movs	r2, #4
 80097d6:	409a      	lsls	r2, r3
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e0:	f043 0204 	orr.w	r2, r3, #4
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ec:	f003 031f 	and.w	r3, r3, #31
 80097f0:	2210      	movs	r2, #16
 80097f2:	409a      	lsls	r2, r3
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	4013      	ands	r3, r2
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80a6 	beq.w	800994a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a85      	ldr	r2, [pc, #532]	; (8009a18 <HAL_DMA_IRQHandler+0x690>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d04a      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a83      	ldr	r2, [pc, #524]	; (8009a1c <HAL_DMA_IRQHandler+0x694>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d045      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a82      	ldr	r2, [pc, #520]	; (8009a20 <HAL_DMA_IRQHandler+0x698>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d040      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a80      	ldr	r2, [pc, #512]	; (8009a24 <HAL_DMA_IRQHandler+0x69c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d03b      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a7f      	ldr	r2, [pc, #508]	; (8009a28 <HAL_DMA_IRQHandler+0x6a0>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d036      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a7d      	ldr	r2, [pc, #500]	; (8009a2c <HAL_DMA_IRQHandler+0x6a4>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d031      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a7c      	ldr	r2, [pc, #496]	; (8009a30 <HAL_DMA_IRQHandler+0x6a8>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d02c      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a7a      	ldr	r2, [pc, #488]	; (8009a34 <HAL_DMA_IRQHandler+0x6ac>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d027      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a79      	ldr	r2, [pc, #484]	; (8009a38 <HAL_DMA_IRQHandler+0x6b0>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d022      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a77      	ldr	r2, [pc, #476]	; (8009a3c <HAL_DMA_IRQHandler+0x6b4>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d01d      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a76      	ldr	r2, [pc, #472]	; (8009a40 <HAL_DMA_IRQHandler+0x6b8>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d018      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a74      	ldr	r2, [pc, #464]	; (8009a44 <HAL_DMA_IRQHandler+0x6bc>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d013      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a73      	ldr	r2, [pc, #460]	; (8009a48 <HAL_DMA_IRQHandler+0x6c0>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d00e      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a71      	ldr	r2, [pc, #452]	; (8009a4c <HAL_DMA_IRQHandler+0x6c4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d009      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a70      	ldr	r2, [pc, #448]	; (8009a50 <HAL_DMA_IRQHandler+0x6c8>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d004      	beq.n	800989e <HAL_DMA_IRQHandler+0x516>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a6e      	ldr	r2, [pc, #440]	; (8009a54 <HAL_DMA_IRQHandler+0x6cc>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d10a      	bne.n	80098b4 <HAL_DMA_IRQHandler+0x52c>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0308 	and.w	r3, r3, #8
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bf14      	ite	ne
 80098ac:	2301      	movne	r3, #1
 80098ae:	2300      	moveq	r3, #0
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	e009      	b.n	80098c8 <HAL_DMA_IRQHandler+0x540>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	bf14      	ite	ne
 80098c2:	2301      	movne	r3, #1
 80098c4:	2300      	moveq	r3, #0
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d03e      	beq.n	800994a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d0:	f003 031f 	and.w	r3, r3, #31
 80098d4:	2210      	movs	r2, #16
 80098d6:	409a      	lsls	r2, r3
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d018      	beq.n	800991c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d108      	bne.n	800990a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d024      	beq.n	800994a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
 8009908:	e01f      	b.n	800994a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800990e:	2b00      	cmp	r3, #0
 8009910:	d01b      	beq.n	800994a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	4798      	blx	r3
 800991a:	e016      	b.n	800994a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009926:	2b00      	cmp	r3, #0
 8009928:	d107      	bne.n	800993a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f022 0208 	bic.w	r2, r2, #8
 8009938:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800994e:	f003 031f 	and.w	r3, r3, #31
 8009952:	2220      	movs	r2, #32
 8009954:	409a      	lsls	r2, r3
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	4013      	ands	r3, r2
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 8110 	beq.w	8009b80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a2c      	ldr	r2, [pc, #176]	; (8009a18 <HAL_DMA_IRQHandler+0x690>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d04a      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a2b      	ldr	r2, [pc, #172]	; (8009a1c <HAL_DMA_IRQHandler+0x694>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d045      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a29      	ldr	r2, [pc, #164]	; (8009a20 <HAL_DMA_IRQHandler+0x698>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d040      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a28      	ldr	r2, [pc, #160]	; (8009a24 <HAL_DMA_IRQHandler+0x69c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d03b      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a26      	ldr	r2, [pc, #152]	; (8009a28 <HAL_DMA_IRQHandler+0x6a0>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d036      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a25      	ldr	r2, [pc, #148]	; (8009a2c <HAL_DMA_IRQHandler+0x6a4>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d031      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a23      	ldr	r2, [pc, #140]	; (8009a30 <HAL_DMA_IRQHandler+0x6a8>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d02c      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a22      	ldr	r2, [pc, #136]	; (8009a34 <HAL_DMA_IRQHandler+0x6ac>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d027      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a20      	ldr	r2, [pc, #128]	; (8009a38 <HAL_DMA_IRQHandler+0x6b0>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d022      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a1f      	ldr	r2, [pc, #124]	; (8009a3c <HAL_DMA_IRQHandler+0x6b4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d01d      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a1d      	ldr	r2, [pc, #116]	; (8009a40 <HAL_DMA_IRQHandler+0x6b8>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d018      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a1c      	ldr	r2, [pc, #112]	; (8009a44 <HAL_DMA_IRQHandler+0x6bc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d013      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a1a      	ldr	r2, [pc, #104]	; (8009a48 <HAL_DMA_IRQHandler+0x6c0>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d00e      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a19      	ldr	r2, [pc, #100]	; (8009a4c <HAL_DMA_IRQHandler+0x6c4>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d009      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a17      	ldr	r2, [pc, #92]	; (8009a50 <HAL_DMA_IRQHandler+0x6c8>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d004      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x678>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a16      	ldr	r2, [pc, #88]	; (8009a54 <HAL_DMA_IRQHandler+0x6cc>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d12b      	bne.n	8009a58 <HAL_DMA_IRQHandler+0x6d0>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0310 	and.w	r3, r3, #16
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	bf14      	ite	ne
 8009a0e:	2301      	movne	r3, #1
 8009a10:	2300      	moveq	r3, #0
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	e02a      	b.n	8009a6c <HAL_DMA_IRQHandler+0x6e4>
 8009a16:	bf00      	nop
 8009a18:	40020010 	.word	0x40020010
 8009a1c:	40020028 	.word	0x40020028
 8009a20:	40020040 	.word	0x40020040
 8009a24:	40020058 	.word	0x40020058
 8009a28:	40020070 	.word	0x40020070
 8009a2c:	40020088 	.word	0x40020088
 8009a30:	400200a0 	.word	0x400200a0
 8009a34:	400200b8 	.word	0x400200b8
 8009a38:	40020410 	.word	0x40020410
 8009a3c:	40020428 	.word	0x40020428
 8009a40:	40020440 	.word	0x40020440
 8009a44:	40020458 	.word	0x40020458
 8009a48:	40020470 	.word	0x40020470
 8009a4c:	40020488 	.word	0x40020488
 8009a50:	400204a0 	.word	0x400204a0
 8009a54:	400204b8 	.word	0x400204b8
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0302 	and.w	r3, r3, #2
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bf14      	ite	ne
 8009a66:	2301      	movne	r3, #1
 8009a68:	2300      	moveq	r3, #0
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8087 	beq.w	8009b80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a76:	f003 031f 	and.w	r3, r3, #31
 8009a7a:	2220      	movs	r2, #32
 8009a7c:	409a      	lsls	r2, r3
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b04      	cmp	r3, #4
 8009a8c:	d139      	bne.n	8009b02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 0216 	bic.w	r2, r2, #22
 8009a9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	695a      	ldr	r2, [r3, #20]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009aac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d103      	bne.n	8009abe <HAL_DMA_IRQHandler+0x736>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d007      	beq.n	8009ace <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0208 	bic.w	r2, r2, #8
 8009acc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ad2:	f003 031f 	and.w	r3, r3, #31
 8009ad6:	223f      	movs	r2, #63	; 0x3f
 8009ad8:	409a      	lsls	r2, r3
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 834a 	beq.w	800a18c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3
          }
          return;
 8009b00:	e344      	b.n	800a18c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d018      	beq.n	8009b42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d108      	bne.n	8009b30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d02c      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	4798      	blx	r3
 8009b2e:	e027      	b.n	8009b80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d023      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
 8009b40:	e01e      	b.n	8009b80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10f      	bne.n	8009b70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f022 0210 	bic.w	r2, r2, #16
 8009b5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 8306 	beq.w	800a196 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 8088 	beq.w	8009ca8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2204      	movs	r2, #4
 8009b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a7a      	ldr	r2, [pc, #488]	; (8009d90 <HAL_DMA_IRQHandler+0xa08>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d04a      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a79      	ldr	r2, [pc, #484]	; (8009d94 <HAL_DMA_IRQHandler+0xa0c>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d045      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a77      	ldr	r2, [pc, #476]	; (8009d98 <HAL_DMA_IRQHandler+0xa10>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d040      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a76      	ldr	r2, [pc, #472]	; (8009d9c <HAL_DMA_IRQHandler+0xa14>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d03b      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a74      	ldr	r2, [pc, #464]	; (8009da0 <HAL_DMA_IRQHandler+0xa18>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d036      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a73      	ldr	r2, [pc, #460]	; (8009da4 <HAL_DMA_IRQHandler+0xa1c>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d031      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a71      	ldr	r2, [pc, #452]	; (8009da8 <HAL_DMA_IRQHandler+0xa20>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d02c      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a70      	ldr	r2, [pc, #448]	; (8009dac <HAL_DMA_IRQHandler+0xa24>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d027      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a6e      	ldr	r2, [pc, #440]	; (8009db0 <HAL_DMA_IRQHandler+0xa28>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d022      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a6d      	ldr	r2, [pc, #436]	; (8009db4 <HAL_DMA_IRQHandler+0xa2c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d01d      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a6b      	ldr	r2, [pc, #428]	; (8009db8 <HAL_DMA_IRQHandler+0xa30>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d018      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a6a      	ldr	r2, [pc, #424]	; (8009dbc <HAL_DMA_IRQHandler+0xa34>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d013      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a68      	ldr	r2, [pc, #416]	; (8009dc0 <HAL_DMA_IRQHandler+0xa38>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d00e      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a67      	ldr	r2, [pc, #412]	; (8009dc4 <HAL_DMA_IRQHandler+0xa3c>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d009      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a65      	ldr	r2, [pc, #404]	; (8009dc8 <HAL_DMA_IRQHandler+0xa40>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d004      	beq.n	8009c40 <HAL_DMA_IRQHandler+0x8b8>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a64      	ldr	r2, [pc, #400]	; (8009dcc <HAL_DMA_IRQHandler+0xa44>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d108      	bne.n	8009c52 <HAL_DMA_IRQHandler+0x8ca>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f022 0201 	bic.w	r2, r2, #1
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	e007      	b.n	8009c62 <HAL_DMA_IRQHandler+0x8da>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 0201 	bic.w	r2, r2, #1
 8009c60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d307      	bcc.n	8009c7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0301 	and.w	r3, r3, #1
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1f2      	bne.n	8009c62 <HAL_DMA_IRQHandler+0x8da>
 8009c7c:	e000      	b.n	8009c80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009c7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d004      	beq.n	8009c98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2203      	movs	r2, #3
 8009c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009c96:	e003      	b.n	8009ca0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8272 	beq.w	800a196 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	4798      	blx	r3
 8009cba:	e26c      	b.n	800a196 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a43      	ldr	r2, [pc, #268]	; (8009dd0 <HAL_DMA_IRQHandler+0xa48>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d022      	beq.n	8009d0c <HAL_DMA_IRQHandler+0x984>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a42      	ldr	r2, [pc, #264]	; (8009dd4 <HAL_DMA_IRQHandler+0xa4c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d01d      	beq.n	8009d0c <HAL_DMA_IRQHandler+0x984>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a40      	ldr	r2, [pc, #256]	; (8009dd8 <HAL_DMA_IRQHandler+0xa50>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d018      	beq.n	8009d0c <HAL_DMA_IRQHandler+0x984>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a3f      	ldr	r2, [pc, #252]	; (8009ddc <HAL_DMA_IRQHandler+0xa54>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d013      	beq.n	8009d0c <HAL_DMA_IRQHandler+0x984>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a3d      	ldr	r2, [pc, #244]	; (8009de0 <HAL_DMA_IRQHandler+0xa58>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00e      	beq.n	8009d0c <HAL_DMA_IRQHandler+0x984>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a3c      	ldr	r2, [pc, #240]	; (8009de4 <HAL_DMA_IRQHandler+0xa5c>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d009      	beq.n	8009d0c <HAL_DMA_IRQHandler+0x984>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a3a      	ldr	r2, [pc, #232]	; (8009de8 <HAL_DMA_IRQHandler+0xa60>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d004      	beq.n	8009d0c <HAL_DMA_IRQHandler+0x984>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a39      	ldr	r2, [pc, #228]	; (8009dec <HAL_DMA_IRQHandler+0xa64>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d101      	bne.n	8009d10 <HAL_DMA_IRQHandler+0x988>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e000      	b.n	8009d12 <HAL_DMA_IRQHandler+0x98a>
 8009d10:	2300      	movs	r3, #0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 823f 	beq.w	800a196 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d24:	f003 031f 	and.w	r3, r3, #31
 8009d28:	2204      	movs	r2, #4
 8009d2a:	409a      	lsls	r2, r3
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	4013      	ands	r3, r2
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 80cd 	beq.w	8009ed0 <HAL_DMA_IRQHandler+0xb48>
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f003 0304 	and.w	r3, r3, #4
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 80c7 	beq.w	8009ed0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d46:	f003 031f 	and.w	r3, r3, #31
 8009d4a:	2204      	movs	r2, #4
 8009d4c:	409a      	lsls	r2, r3
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d049      	beq.n	8009df0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d109      	bne.n	8009d7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 8210 	beq.w	800a190 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d78:	e20a      	b.n	800a190 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 8206 	beq.w	800a190 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d8c:	e200      	b.n	800a190 <HAL_DMA_IRQHandler+0xe08>
 8009d8e:	bf00      	nop
 8009d90:	40020010 	.word	0x40020010
 8009d94:	40020028 	.word	0x40020028
 8009d98:	40020040 	.word	0x40020040
 8009d9c:	40020058 	.word	0x40020058
 8009da0:	40020070 	.word	0x40020070
 8009da4:	40020088 	.word	0x40020088
 8009da8:	400200a0 	.word	0x400200a0
 8009dac:	400200b8 	.word	0x400200b8
 8009db0:	40020410 	.word	0x40020410
 8009db4:	40020428 	.word	0x40020428
 8009db8:	40020440 	.word	0x40020440
 8009dbc:	40020458 	.word	0x40020458
 8009dc0:	40020470 	.word	0x40020470
 8009dc4:	40020488 	.word	0x40020488
 8009dc8:	400204a0 	.word	0x400204a0
 8009dcc:	400204b8 	.word	0x400204b8
 8009dd0:	58025408 	.word	0x58025408
 8009dd4:	5802541c 	.word	0x5802541c
 8009dd8:	58025430 	.word	0x58025430
 8009ddc:	58025444 	.word	0x58025444
 8009de0:	58025458 	.word	0x58025458
 8009de4:	5802546c 	.word	0x5802546c
 8009de8:	58025480 	.word	0x58025480
 8009dec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f003 0320 	and.w	r3, r3, #32
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d160      	bne.n	8009ebc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a7f      	ldr	r2, [pc, #508]	; (8009ffc <HAL_DMA_IRQHandler+0xc74>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d04a      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a7d      	ldr	r2, [pc, #500]	; (800a000 <HAL_DMA_IRQHandler+0xc78>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d045      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a7c      	ldr	r2, [pc, #496]	; (800a004 <HAL_DMA_IRQHandler+0xc7c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d040      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a7a      	ldr	r2, [pc, #488]	; (800a008 <HAL_DMA_IRQHandler+0xc80>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d03b      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a79      	ldr	r2, [pc, #484]	; (800a00c <HAL_DMA_IRQHandler+0xc84>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d036      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a77      	ldr	r2, [pc, #476]	; (800a010 <HAL_DMA_IRQHandler+0xc88>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d031      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a76      	ldr	r2, [pc, #472]	; (800a014 <HAL_DMA_IRQHandler+0xc8c>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d02c      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a74      	ldr	r2, [pc, #464]	; (800a018 <HAL_DMA_IRQHandler+0xc90>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d027      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a73      	ldr	r2, [pc, #460]	; (800a01c <HAL_DMA_IRQHandler+0xc94>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d022      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a71      	ldr	r2, [pc, #452]	; (800a020 <HAL_DMA_IRQHandler+0xc98>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d01d      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a70      	ldr	r2, [pc, #448]	; (800a024 <HAL_DMA_IRQHandler+0xc9c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d018      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a6e      	ldr	r2, [pc, #440]	; (800a028 <HAL_DMA_IRQHandler+0xca0>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d013      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a6d      	ldr	r2, [pc, #436]	; (800a02c <HAL_DMA_IRQHandler+0xca4>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00e      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a6b      	ldr	r2, [pc, #428]	; (800a030 <HAL_DMA_IRQHandler+0xca8>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d009      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a6a      	ldr	r2, [pc, #424]	; (800a034 <HAL_DMA_IRQHandler+0xcac>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d004      	beq.n	8009e9a <HAL_DMA_IRQHandler+0xb12>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a68      	ldr	r2, [pc, #416]	; (800a038 <HAL_DMA_IRQHandler+0xcb0>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d108      	bne.n	8009eac <HAL_DMA_IRQHandler+0xb24>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0208 	bic.w	r2, r2, #8
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	e007      	b.n	8009ebc <HAL_DMA_IRQHandler+0xb34>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 0204 	bic.w	r2, r2, #4
 8009eba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 8165 	beq.w	800a190 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009ece:	e15f      	b.n	800a190 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ed4:	f003 031f 	and.w	r3, r3, #31
 8009ed8:	2202      	movs	r2, #2
 8009eda:	409a      	lsls	r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	4013      	ands	r3, r2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 80c5 	beq.w	800a070 <HAL_DMA_IRQHandler+0xce8>
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 80bf 	beq.w	800a070 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef6:	f003 031f 	and.w	r3, r3, #31
 8009efa:	2202      	movs	r2, #2
 8009efc:	409a      	lsls	r2, r3
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d018      	beq.n	8009f3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d109      	bne.n	8009f2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 813a 	beq.w	800a194 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f28:	e134      	b.n	800a194 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 8130 	beq.w	800a194 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f3c:	e12a      	b.n	800a194 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f003 0320 	and.w	r3, r3, #32
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f040 8089 	bne.w	800a05c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a2b      	ldr	r2, [pc, #172]	; (8009ffc <HAL_DMA_IRQHandler+0xc74>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d04a      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a29      	ldr	r2, [pc, #164]	; (800a000 <HAL_DMA_IRQHandler+0xc78>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d045      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a28      	ldr	r2, [pc, #160]	; (800a004 <HAL_DMA_IRQHandler+0xc7c>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d040      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a26      	ldr	r2, [pc, #152]	; (800a008 <HAL_DMA_IRQHandler+0xc80>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d03b      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a25      	ldr	r2, [pc, #148]	; (800a00c <HAL_DMA_IRQHandler+0xc84>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d036      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a23      	ldr	r2, [pc, #140]	; (800a010 <HAL_DMA_IRQHandler+0xc88>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d031      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a22      	ldr	r2, [pc, #136]	; (800a014 <HAL_DMA_IRQHandler+0xc8c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d02c      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a20      	ldr	r2, [pc, #128]	; (800a018 <HAL_DMA_IRQHandler+0xc90>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d027      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a1f      	ldr	r2, [pc, #124]	; (800a01c <HAL_DMA_IRQHandler+0xc94>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d022      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a1d      	ldr	r2, [pc, #116]	; (800a020 <HAL_DMA_IRQHandler+0xc98>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d01d      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a1c      	ldr	r2, [pc, #112]	; (800a024 <HAL_DMA_IRQHandler+0xc9c>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d018      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a1a      	ldr	r2, [pc, #104]	; (800a028 <HAL_DMA_IRQHandler+0xca0>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d013      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a19      	ldr	r2, [pc, #100]	; (800a02c <HAL_DMA_IRQHandler+0xca4>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d00e      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a17      	ldr	r2, [pc, #92]	; (800a030 <HAL_DMA_IRQHandler+0xca8>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d009      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a16      	ldr	r2, [pc, #88]	; (800a034 <HAL_DMA_IRQHandler+0xcac>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d004      	beq.n	8009fea <HAL_DMA_IRQHandler+0xc62>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a14      	ldr	r2, [pc, #80]	; (800a038 <HAL_DMA_IRQHandler+0xcb0>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d128      	bne.n	800a03c <HAL_DMA_IRQHandler+0xcb4>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f022 0214 	bic.w	r2, r2, #20
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	e027      	b.n	800a04c <HAL_DMA_IRQHandler+0xcc4>
 8009ffc:	40020010 	.word	0x40020010
 800a000:	40020028 	.word	0x40020028
 800a004:	40020040 	.word	0x40020040
 800a008:	40020058 	.word	0x40020058
 800a00c:	40020070 	.word	0x40020070
 800a010:	40020088 	.word	0x40020088
 800a014:	400200a0 	.word	0x400200a0
 800a018:	400200b8 	.word	0x400200b8
 800a01c:	40020410 	.word	0x40020410
 800a020:	40020428 	.word	0x40020428
 800a024:	40020440 	.word	0x40020440
 800a028:	40020458 	.word	0x40020458
 800a02c:	40020470 	.word	0x40020470
 800a030:	40020488 	.word	0x40020488
 800a034:	400204a0 	.word	0x400204a0
 800a038:	400204b8 	.word	0x400204b8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 020a 	bic.w	r2, r2, #10
 800a04a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 8097 	beq.w	800a194 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a06e:	e091      	b.n	800a194 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a074:	f003 031f 	and.w	r3, r3, #31
 800a078:	2208      	movs	r2, #8
 800a07a:	409a      	lsls	r2, r3
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	4013      	ands	r3, r2
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 8088 	beq.w	800a196 <HAL_DMA_IRQHandler+0xe0e>
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f003 0308 	and.w	r3, r3, #8
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 8082 	beq.w	800a196 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a41      	ldr	r2, [pc, #260]	; (800a19c <HAL_DMA_IRQHandler+0xe14>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d04a      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a3f      	ldr	r2, [pc, #252]	; (800a1a0 <HAL_DMA_IRQHandler+0xe18>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d045      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a3e      	ldr	r2, [pc, #248]	; (800a1a4 <HAL_DMA_IRQHandler+0xe1c>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d040      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a3c      	ldr	r2, [pc, #240]	; (800a1a8 <HAL_DMA_IRQHandler+0xe20>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d03b      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a3b      	ldr	r2, [pc, #236]	; (800a1ac <HAL_DMA_IRQHandler+0xe24>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d036      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a39      	ldr	r2, [pc, #228]	; (800a1b0 <HAL_DMA_IRQHandler+0xe28>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d031      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a38      	ldr	r2, [pc, #224]	; (800a1b4 <HAL_DMA_IRQHandler+0xe2c>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d02c      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a36      	ldr	r2, [pc, #216]	; (800a1b8 <HAL_DMA_IRQHandler+0xe30>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d027      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a35      	ldr	r2, [pc, #212]	; (800a1bc <HAL_DMA_IRQHandler+0xe34>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d022      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a33      	ldr	r2, [pc, #204]	; (800a1c0 <HAL_DMA_IRQHandler+0xe38>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d01d      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a32      	ldr	r2, [pc, #200]	; (800a1c4 <HAL_DMA_IRQHandler+0xe3c>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d018      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a30      	ldr	r2, [pc, #192]	; (800a1c8 <HAL_DMA_IRQHandler+0xe40>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d013      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a2f      	ldr	r2, [pc, #188]	; (800a1cc <HAL_DMA_IRQHandler+0xe44>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d00e      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a2d      	ldr	r2, [pc, #180]	; (800a1d0 <HAL_DMA_IRQHandler+0xe48>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d009      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a2c      	ldr	r2, [pc, #176]	; (800a1d4 <HAL_DMA_IRQHandler+0xe4c>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d004      	beq.n	800a132 <HAL_DMA_IRQHandler+0xdaa>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a2a      	ldr	r2, [pc, #168]	; (800a1d8 <HAL_DMA_IRQHandler+0xe50>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d108      	bne.n	800a144 <HAL_DMA_IRQHandler+0xdbc>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f022 021c 	bic.w	r2, r2, #28
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	e007      	b.n	800a154 <HAL_DMA_IRQHandler+0xdcc>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 020e 	bic.w	r2, r2, #14
 800a152:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a158:	f003 031f 	and.w	r3, r3, #31
 800a15c:	2201      	movs	r2, #1
 800a15e:	409a      	lsls	r2, r3
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d009      	beq.n	800a196 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	4798      	blx	r3
 800a18a:	e004      	b.n	800a196 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a18c:	bf00      	nop
 800a18e:	e002      	b.n	800a196 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a190:	bf00      	nop
 800a192:	e000      	b.n	800a196 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a194:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a196:	3728      	adds	r7, #40	; 0x28
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	40020010 	.word	0x40020010
 800a1a0:	40020028 	.word	0x40020028
 800a1a4:	40020040 	.word	0x40020040
 800a1a8:	40020058 	.word	0x40020058
 800a1ac:	40020070 	.word	0x40020070
 800a1b0:	40020088 	.word	0x40020088
 800a1b4:	400200a0 	.word	0x400200a0
 800a1b8:	400200b8 	.word	0x400200b8
 800a1bc:	40020410 	.word	0x40020410
 800a1c0:	40020428 	.word	0x40020428
 800a1c4:	40020440 	.word	0x40020440
 800a1c8:	40020458 	.word	0x40020458
 800a1cc:	40020470 	.word	0x40020470
 800a1d0:	40020488 	.word	0x40020488
 800a1d4:	400204a0 	.word	0x400204a0
 800a1d8:	400204b8 	.word	0x400204b8

0800a1dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1ea:	b2db      	uxtb	r3, r3
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a204:	4618      	mov	r0, r3
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a210:	b480      	push	{r7}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a222:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a228:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a7f      	ldr	r2, [pc, #508]	; (800a42c <DMA_SetConfig+0x21c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d072      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a7d      	ldr	r2, [pc, #500]	; (800a430 <DMA_SetConfig+0x220>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d06d      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a7c      	ldr	r2, [pc, #496]	; (800a434 <DMA_SetConfig+0x224>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d068      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a7a      	ldr	r2, [pc, #488]	; (800a438 <DMA_SetConfig+0x228>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d063      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a79      	ldr	r2, [pc, #484]	; (800a43c <DMA_SetConfig+0x22c>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d05e      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a77      	ldr	r2, [pc, #476]	; (800a440 <DMA_SetConfig+0x230>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d059      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a76      	ldr	r2, [pc, #472]	; (800a444 <DMA_SetConfig+0x234>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d054      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a74      	ldr	r2, [pc, #464]	; (800a448 <DMA_SetConfig+0x238>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d04f      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a73      	ldr	r2, [pc, #460]	; (800a44c <DMA_SetConfig+0x23c>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d04a      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a71      	ldr	r2, [pc, #452]	; (800a450 <DMA_SetConfig+0x240>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d045      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a70      	ldr	r2, [pc, #448]	; (800a454 <DMA_SetConfig+0x244>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d040      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a6e      	ldr	r2, [pc, #440]	; (800a458 <DMA_SetConfig+0x248>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d03b      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a6d      	ldr	r2, [pc, #436]	; (800a45c <DMA_SetConfig+0x24c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d036      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a6b      	ldr	r2, [pc, #428]	; (800a460 <DMA_SetConfig+0x250>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d031      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a6a      	ldr	r2, [pc, #424]	; (800a464 <DMA_SetConfig+0x254>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d02c      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a68      	ldr	r2, [pc, #416]	; (800a468 <DMA_SetConfig+0x258>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d027      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a67      	ldr	r2, [pc, #412]	; (800a46c <DMA_SetConfig+0x25c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d022      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a65      	ldr	r2, [pc, #404]	; (800a470 <DMA_SetConfig+0x260>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d01d      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a64      	ldr	r2, [pc, #400]	; (800a474 <DMA_SetConfig+0x264>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d018      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a62      	ldr	r2, [pc, #392]	; (800a478 <DMA_SetConfig+0x268>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d013      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a61      	ldr	r2, [pc, #388]	; (800a47c <DMA_SetConfig+0x26c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d00e      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a5f      	ldr	r2, [pc, #380]	; (800a480 <DMA_SetConfig+0x270>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d009      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a5e      	ldr	r2, [pc, #376]	; (800a484 <DMA_SetConfig+0x274>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d004      	beq.n	800a31a <DMA_SetConfig+0x10a>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a5c      	ldr	r2, [pc, #368]	; (800a488 <DMA_SetConfig+0x278>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d101      	bne.n	800a31e <DMA_SetConfig+0x10e>
 800a31a:	2301      	movs	r3, #1
 800a31c:	e000      	b.n	800a320 <DMA_SetConfig+0x110>
 800a31e:	2300      	movs	r3, #0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a32c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a332:	2b00      	cmp	r3, #0
 800a334:	d004      	beq.n	800a340 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a33e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a39      	ldr	r2, [pc, #228]	; (800a42c <DMA_SetConfig+0x21c>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d04a      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a38      	ldr	r2, [pc, #224]	; (800a430 <DMA_SetConfig+0x220>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d045      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a36      	ldr	r2, [pc, #216]	; (800a434 <DMA_SetConfig+0x224>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d040      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a35      	ldr	r2, [pc, #212]	; (800a438 <DMA_SetConfig+0x228>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d03b      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a33      	ldr	r2, [pc, #204]	; (800a43c <DMA_SetConfig+0x22c>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d036      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a32      	ldr	r2, [pc, #200]	; (800a440 <DMA_SetConfig+0x230>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d031      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a30      	ldr	r2, [pc, #192]	; (800a444 <DMA_SetConfig+0x234>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d02c      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a2f      	ldr	r2, [pc, #188]	; (800a448 <DMA_SetConfig+0x238>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d027      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a2d      	ldr	r2, [pc, #180]	; (800a44c <DMA_SetConfig+0x23c>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d022      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a2c      	ldr	r2, [pc, #176]	; (800a450 <DMA_SetConfig+0x240>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d01d      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a2a      	ldr	r2, [pc, #168]	; (800a454 <DMA_SetConfig+0x244>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d018      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a29      	ldr	r2, [pc, #164]	; (800a458 <DMA_SetConfig+0x248>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d013      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a27      	ldr	r2, [pc, #156]	; (800a45c <DMA_SetConfig+0x24c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d00e      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a26      	ldr	r2, [pc, #152]	; (800a460 <DMA_SetConfig+0x250>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d009      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a24      	ldr	r2, [pc, #144]	; (800a464 <DMA_SetConfig+0x254>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d004      	beq.n	800a3e0 <DMA_SetConfig+0x1d0>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a23      	ldr	r2, [pc, #140]	; (800a468 <DMA_SetConfig+0x258>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d101      	bne.n	800a3e4 <DMA_SetConfig+0x1d4>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e000      	b.n	800a3e6 <DMA_SetConfig+0x1d6>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d059      	beq.n	800a49e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ee:	f003 031f 	and.w	r3, r3, #31
 800a3f2:	223f      	movs	r2, #63	; 0x3f
 800a3f4:	409a      	lsls	r2, r3
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a408:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	2b40      	cmp	r3, #64	; 0x40
 800a418:	d138      	bne.n	800a48c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a42a:	e086      	b.n	800a53a <DMA_SetConfig+0x32a>
 800a42c:	40020010 	.word	0x40020010
 800a430:	40020028 	.word	0x40020028
 800a434:	40020040 	.word	0x40020040
 800a438:	40020058 	.word	0x40020058
 800a43c:	40020070 	.word	0x40020070
 800a440:	40020088 	.word	0x40020088
 800a444:	400200a0 	.word	0x400200a0
 800a448:	400200b8 	.word	0x400200b8
 800a44c:	40020410 	.word	0x40020410
 800a450:	40020428 	.word	0x40020428
 800a454:	40020440 	.word	0x40020440
 800a458:	40020458 	.word	0x40020458
 800a45c:	40020470 	.word	0x40020470
 800a460:	40020488 	.word	0x40020488
 800a464:	400204a0 	.word	0x400204a0
 800a468:	400204b8 	.word	0x400204b8
 800a46c:	58025408 	.word	0x58025408
 800a470:	5802541c 	.word	0x5802541c
 800a474:	58025430 	.word	0x58025430
 800a478:	58025444 	.word	0x58025444
 800a47c:	58025458 	.word	0x58025458
 800a480:	5802546c 	.word	0x5802546c
 800a484:	58025480 	.word	0x58025480
 800a488:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	60da      	str	r2, [r3, #12]
}
 800a49c:	e04d      	b.n	800a53a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a29      	ldr	r2, [pc, #164]	; (800a548 <DMA_SetConfig+0x338>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d022      	beq.n	800a4ee <DMA_SetConfig+0x2de>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a27      	ldr	r2, [pc, #156]	; (800a54c <DMA_SetConfig+0x33c>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d01d      	beq.n	800a4ee <DMA_SetConfig+0x2de>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a26      	ldr	r2, [pc, #152]	; (800a550 <DMA_SetConfig+0x340>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d018      	beq.n	800a4ee <DMA_SetConfig+0x2de>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a24      	ldr	r2, [pc, #144]	; (800a554 <DMA_SetConfig+0x344>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d013      	beq.n	800a4ee <DMA_SetConfig+0x2de>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a23      	ldr	r2, [pc, #140]	; (800a558 <DMA_SetConfig+0x348>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d00e      	beq.n	800a4ee <DMA_SetConfig+0x2de>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a21      	ldr	r2, [pc, #132]	; (800a55c <DMA_SetConfig+0x34c>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d009      	beq.n	800a4ee <DMA_SetConfig+0x2de>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a20      	ldr	r2, [pc, #128]	; (800a560 <DMA_SetConfig+0x350>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d004      	beq.n	800a4ee <DMA_SetConfig+0x2de>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a1e      	ldr	r2, [pc, #120]	; (800a564 <DMA_SetConfig+0x354>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d101      	bne.n	800a4f2 <DMA_SetConfig+0x2e2>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e000      	b.n	800a4f4 <DMA_SetConfig+0x2e4>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d020      	beq.n	800a53a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4fc:	f003 031f 	and.w	r3, r3, #31
 800a500:	2201      	movs	r2, #1
 800a502:	409a      	lsls	r2, r3
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	2b40      	cmp	r3, #64	; 0x40
 800a516:	d108      	bne.n	800a52a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	60da      	str	r2, [r3, #12]
}
 800a528:	e007      	b.n	800a53a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	60da      	str	r2, [r3, #12]
}
 800a53a:	bf00      	nop
 800a53c:	371c      	adds	r7, #28
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	58025408 	.word	0x58025408
 800a54c:	5802541c 	.word	0x5802541c
 800a550:	58025430 	.word	0x58025430
 800a554:	58025444 	.word	0x58025444
 800a558:	58025458 	.word	0x58025458
 800a55c:	5802546c 	.word	0x5802546c
 800a560:	58025480 	.word	0x58025480
 800a564:	58025494 	.word	0x58025494

0800a568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a42      	ldr	r2, [pc, #264]	; (800a680 <DMA_CalcBaseAndBitshift+0x118>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d04a      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a41      	ldr	r2, [pc, #260]	; (800a684 <DMA_CalcBaseAndBitshift+0x11c>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d045      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a3f      	ldr	r2, [pc, #252]	; (800a688 <DMA_CalcBaseAndBitshift+0x120>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d040      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a3e      	ldr	r2, [pc, #248]	; (800a68c <DMA_CalcBaseAndBitshift+0x124>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d03b      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a3c      	ldr	r2, [pc, #240]	; (800a690 <DMA_CalcBaseAndBitshift+0x128>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d036      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a3b      	ldr	r2, [pc, #236]	; (800a694 <DMA_CalcBaseAndBitshift+0x12c>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d031      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a39      	ldr	r2, [pc, #228]	; (800a698 <DMA_CalcBaseAndBitshift+0x130>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d02c      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a38      	ldr	r2, [pc, #224]	; (800a69c <DMA_CalcBaseAndBitshift+0x134>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d027      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a36      	ldr	r2, [pc, #216]	; (800a6a0 <DMA_CalcBaseAndBitshift+0x138>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d022      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a35      	ldr	r2, [pc, #212]	; (800a6a4 <DMA_CalcBaseAndBitshift+0x13c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d01d      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a33      	ldr	r2, [pc, #204]	; (800a6a8 <DMA_CalcBaseAndBitshift+0x140>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d018      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a32      	ldr	r2, [pc, #200]	; (800a6ac <DMA_CalcBaseAndBitshift+0x144>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d013      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a30      	ldr	r2, [pc, #192]	; (800a6b0 <DMA_CalcBaseAndBitshift+0x148>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d00e      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a2f      	ldr	r2, [pc, #188]	; (800a6b4 <DMA_CalcBaseAndBitshift+0x14c>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d009      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a2d      	ldr	r2, [pc, #180]	; (800a6b8 <DMA_CalcBaseAndBitshift+0x150>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d004      	beq.n	800a610 <DMA_CalcBaseAndBitshift+0xa8>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a2c      	ldr	r2, [pc, #176]	; (800a6bc <DMA_CalcBaseAndBitshift+0x154>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d101      	bne.n	800a614 <DMA_CalcBaseAndBitshift+0xac>
 800a610:	2301      	movs	r3, #1
 800a612:	e000      	b.n	800a616 <DMA_CalcBaseAndBitshift+0xae>
 800a614:	2300      	movs	r3, #0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d024      	beq.n	800a664 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	3b10      	subs	r3, #16
 800a622:	4a27      	ldr	r2, [pc, #156]	; (800a6c0 <DMA_CalcBaseAndBitshift+0x158>)
 800a624:	fba2 2303 	umull	r2, r3, r2, r3
 800a628:	091b      	lsrs	r3, r3, #4
 800a62a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f003 0307 	and.w	r3, r3, #7
 800a632:	4a24      	ldr	r2, [pc, #144]	; (800a6c4 <DMA_CalcBaseAndBitshift+0x15c>)
 800a634:	5cd3      	ldrb	r3, [r2, r3]
 800a636:	461a      	mov	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b03      	cmp	r3, #3
 800a640:	d908      	bls.n	800a654 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	4b1f      	ldr	r3, [pc, #124]	; (800a6c8 <DMA_CalcBaseAndBitshift+0x160>)
 800a64a:	4013      	ands	r3, r2
 800a64c:	1d1a      	adds	r2, r3, #4
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	659a      	str	r2, [r3, #88]	; 0x58
 800a652:	e00d      	b.n	800a670 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	4b1b      	ldr	r3, [pc, #108]	; (800a6c8 <DMA_CalcBaseAndBitshift+0x160>)
 800a65c:	4013      	ands	r3, r2
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6593      	str	r3, [r2, #88]	; 0x58
 800a662:	e005      	b.n	800a670 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a674:	4618      	mov	r0, r3
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	40020010 	.word	0x40020010
 800a684:	40020028 	.word	0x40020028
 800a688:	40020040 	.word	0x40020040
 800a68c:	40020058 	.word	0x40020058
 800a690:	40020070 	.word	0x40020070
 800a694:	40020088 	.word	0x40020088
 800a698:	400200a0 	.word	0x400200a0
 800a69c:	400200b8 	.word	0x400200b8
 800a6a0:	40020410 	.word	0x40020410
 800a6a4:	40020428 	.word	0x40020428
 800a6a8:	40020440 	.word	0x40020440
 800a6ac:	40020458 	.word	0x40020458
 800a6b0:	40020470 	.word	0x40020470
 800a6b4:	40020488 	.word	0x40020488
 800a6b8:	400204a0 	.word	0x400204a0
 800a6bc:	400204b8 	.word	0x400204b8
 800a6c0:	aaaaaaab 	.word	0xaaaaaaab
 800a6c4:	0801ae24 	.word	0x0801ae24
 800a6c8:	fffffc00 	.word	0xfffffc00

0800a6cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d120      	bne.n	800a722 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d858      	bhi.n	800a79a <DMA_CheckFifoParam+0xce>
 800a6e8:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <DMA_CheckFifoParam+0x24>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a701 	.word	0x0800a701
 800a6f4:	0800a713 	.word	0x0800a713
 800a6f8:	0800a701 	.word	0x0800a701
 800a6fc:	0800a79b 	.word	0x0800a79b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d048      	beq.n	800a79e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a710:	e045      	b.n	800a79e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a71a:	d142      	bne.n	800a7a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a720:	e03f      	b.n	800a7a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a72a:	d123      	bne.n	800a774 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a730:	2b03      	cmp	r3, #3
 800a732:	d838      	bhi.n	800a7a6 <DMA_CheckFifoParam+0xda>
 800a734:	a201      	add	r2, pc, #4	; (adr r2, 800a73c <DMA_CheckFifoParam+0x70>)
 800a736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73a:	bf00      	nop
 800a73c:	0800a74d 	.word	0x0800a74d
 800a740:	0800a753 	.word	0x0800a753
 800a744:	0800a74d 	.word	0x0800a74d
 800a748:	0800a765 	.word	0x0800a765
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	73fb      	strb	r3, [r7, #15]
        break;
 800a750:	e030      	b.n	800a7b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d025      	beq.n	800a7aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a762:	e022      	b.n	800a7aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a76c:	d11f      	bne.n	800a7ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a772:	e01c      	b.n	800a7ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d902      	bls.n	800a782 <DMA_CheckFifoParam+0xb6>
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	d003      	beq.n	800a788 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a780:	e018      	b.n	800a7b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	73fb      	strb	r3, [r7, #15]
        break;
 800a786:	e015      	b.n	800a7b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00e      	beq.n	800a7b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	73fb      	strb	r3, [r7, #15]
    break;
 800a798:	e00b      	b.n	800a7b2 <DMA_CheckFifoParam+0xe6>
        break;
 800a79a:	bf00      	nop
 800a79c:	e00a      	b.n	800a7b4 <DMA_CheckFifoParam+0xe8>
        break;
 800a79e:	bf00      	nop
 800a7a0:	e008      	b.n	800a7b4 <DMA_CheckFifoParam+0xe8>
        break;
 800a7a2:	bf00      	nop
 800a7a4:	e006      	b.n	800a7b4 <DMA_CheckFifoParam+0xe8>
        break;
 800a7a6:	bf00      	nop
 800a7a8:	e004      	b.n	800a7b4 <DMA_CheckFifoParam+0xe8>
        break;
 800a7aa:	bf00      	nop
 800a7ac:	e002      	b.n	800a7b4 <DMA_CheckFifoParam+0xe8>
        break;
 800a7ae:	bf00      	nop
 800a7b0:	e000      	b.n	800a7b4 <DMA_CheckFifoParam+0xe8>
    break;
 800a7b2:	bf00      	nop
    }
  }

  return status;
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop

0800a7c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a38      	ldr	r2, [pc, #224]	; (800a8b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d022      	beq.n	800a822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a36      	ldr	r2, [pc, #216]	; (800a8bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d01d      	beq.n	800a822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a35      	ldr	r2, [pc, #212]	; (800a8c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d018      	beq.n	800a822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a33      	ldr	r2, [pc, #204]	; (800a8c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d013      	beq.n	800a822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a32      	ldr	r2, [pc, #200]	; (800a8c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d00e      	beq.n	800a822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a30      	ldr	r2, [pc, #192]	; (800a8cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d009      	beq.n	800a822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a2f      	ldr	r2, [pc, #188]	; (800a8d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d004      	beq.n	800a822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a2d      	ldr	r2, [pc, #180]	; (800a8d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d101      	bne.n	800a826 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a826:	2300      	movs	r3, #0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d01a      	beq.n	800a862 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	b2db      	uxtb	r3, r3
 800a832:	3b08      	subs	r3, #8
 800a834:	4a28      	ldr	r2, [pc, #160]	; (800a8d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a836:	fba2 2303 	umull	r2, r3, r2, r3
 800a83a:	091b      	lsrs	r3, r3, #4
 800a83c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	4b26      	ldr	r3, [pc, #152]	; (800a8dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a842:	4413      	add	r3, r2
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	461a      	mov	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a24      	ldr	r2, [pc, #144]	; (800a8e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a850:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f003 031f 	and.w	r3, r3, #31
 800a858:	2201      	movs	r2, #1
 800a85a:	409a      	lsls	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a860:	e024      	b.n	800a8ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	3b10      	subs	r3, #16
 800a86a:	4a1e      	ldr	r2, [pc, #120]	; (800a8e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a86c:	fba2 2303 	umull	r2, r3, r2, r3
 800a870:	091b      	lsrs	r3, r3, #4
 800a872:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	4a1c      	ldr	r2, [pc, #112]	; (800a8e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d806      	bhi.n	800a88a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	4a1b      	ldr	r2, [pc, #108]	; (800a8ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d902      	bls.n	800a88a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3308      	adds	r3, #8
 800a888:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	4b18      	ldr	r3, [pc, #96]	; (800a8f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a88e:	4413      	add	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	461a      	mov	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a16      	ldr	r2, [pc, #88]	; (800a8f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a89c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f003 031f 	and.w	r3, r3, #31
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	409a      	lsls	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a8ac:	bf00      	nop
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	58025408 	.word	0x58025408
 800a8bc:	5802541c 	.word	0x5802541c
 800a8c0:	58025430 	.word	0x58025430
 800a8c4:	58025444 	.word	0x58025444
 800a8c8:	58025458 	.word	0x58025458
 800a8cc:	5802546c 	.word	0x5802546c
 800a8d0:	58025480 	.word	0x58025480
 800a8d4:	58025494 	.word	0x58025494
 800a8d8:	cccccccd 	.word	0xcccccccd
 800a8dc:	16009600 	.word	0x16009600
 800a8e0:	58025880 	.word	0x58025880
 800a8e4:	aaaaaaab 	.word	0xaaaaaaab
 800a8e8:	400204b8 	.word	0x400204b8
 800a8ec:	4002040f 	.word	0x4002040f
 800a8f0:	10008200 	.word	0x10008200
 800a8f4:	40020880 	.word	0x40020880

0800a8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d04a      	beq.n	800a9a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b08      	cmp	r3, #8
 800a912:	d847      	bhi.n	800a9a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a25      	ldr	r2, [pc, #148]	; (800a9b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d022      	beq.n	800a964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a24      	ldr	r2, [pc, #144]	; (800a9b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d01d      	beq.n	800a964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a22      	ldr	r2, [pc, #136]	; (800a9b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d018      	beq.n	800a964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a21      	ldr	r2, [pc, #132]	; (800a9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d013      	beq.n	800a964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a1f      	ldr	r2, [pc, #124]	; (800a9c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d00e      	beq.n	800a964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a1e      	ldr	r2, [pc, #120]	; (800a9c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d009      	beq.n	800a964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a1c      	ldr	r2, [pc, #112]	; (800a9c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d004      	beq.n	800a964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a1b      	ldr	r2, [pc, #108]	; (800a9cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d101      	bne.n	800a968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a964:	2301      	movs	r3, #1
 800a966:	e000      	b.n	800a96a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a968:	2300      	movs	r3, #0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00a      	beq.n	800a984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	4b17      	ldr	r3, [pc, #92]	; (800a9d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	461a      	mov	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a15      	ldr	r2, [pc, #84]	; (800a9d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a980:	671a      	str	r2, [r3, #112]	; 0x70
 800a982:	e009      	b.n	800a998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4b14      	ldr	r3, [pc, #80]	; (800a9d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a988:	4413      	add	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	461a      	mov	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a11      	ldr	r2, [pc, #68]	; (800a9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a996:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	2201      	movs	r2, #1
 800a99e:	409a      	lsls	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a9a4:	bf00      	nop
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	58025408 	.word	0x58025408
 800a9b4:	5802541c 	.word	0x5802541c
 800a9b8:	58025430 	.word	0x58025430
 800a9bc:	58025444 	.word	0x58025444
 800a9c0:	58025458 	.word	0x58025458
 800a9c4:	5802546c 	.word	0x5802546c
 800a9c8:	58025480 	.word	0x58025480
 800a9cc:	58025494 	.word	0x58025494
 800a9d0:	1600963f 	.word	0x1600963f
 800a9d4:	58025940 	.word	0x58025940
 800a9d8:	1000823f 	.word	0x1000823f
 800a9dc:	40020940 	.word	0x40020940

0800a9e0 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	; 0x28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a9f4:	2308      	movs	r3, #8
 800a9f6:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a9f8:	4b40      	ldr	r3, [pc, #256]	; (800aafc <HAL_FLASH_Program+0x11c>)
 800a9fa:	7d1b      	ldrb	r3, [r3, #20]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d101      	bne.n	800aa04 <HAL_FLASH_Program+0x24>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e076      	b.n	800aaf2 <HAL_FLASH_Program+0x112>
 800aa04:	4b3d      	ldr	r3, [pc, #244]	; (800aafc <HAL_FLASH_Program+0x11c>)
 800aa06:	2201      	movs	r2, #1
 800aa08:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa10:	d306      	bcc.n	800aa20 <HAL_FLASH_Program+0x40>
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aa18:	d202      	bcs.n	800aa20 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800aa1e:	e00c      	b.n	800aa3a <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aa26:	d306      	bcc.n	800aa36 <HAL_FLASH_Program+0x56>
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800aa2e:	d202      	bcs.n	800aa36 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800aa30:	2302      	movs	r3, #2
 800aa32:	61bb      	str	r3, [r7, #24]
 800aa34:	e001      	b.n	800aa3a <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e05b      	b.n	800aaf2 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aa3a:	4b30      	ldr	r3, [pc, #192]	; (800aafc <HAL_FLASH_Program+0x11c>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800aa40:	69b9      	ldr	r1, [r7, #24]
 800aa42:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa46:	f000 f897 	bl	800ab78 <FLASH_WaitForLastOperation>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800aa50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d147      	bne.n	800aae8 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d106      	bne.n	800aa6c <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800aa5e:	4b28      	ldr	r3, [pc, #160]	; (800ab00 <HAL_FLASH_Program+0x120>)
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	4a27      	ldr	r2, [pc, #156]	; (800ab00 <HAL_FLASH_Program+0x120>)
 800aa64:	f043 0302 	orr.w	r3, r3, #2
 800aa68:	60d3      	str	r3, [r2, #12]
 800aa6a:	e007      	b.n	800aa7c <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800aa6c:	4b24      	ldr	r3, [pc, #144]	; (800ab00 <HAL_FLASH_Program+0x120>)
 800aa6e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa72:	4a23      	ldr	r2, [pc, #140]	; (800ab00 <HAL_FLASH_Program+0x120>)
 800aa74:	f043 0302 	orr.w	r3, r3, #2
 800aa78:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800aa7c:	f3bf 8f6f 	isb	sy
}
 800aa80:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aa82:	f3bf 8f4f 	dsb	sy
}
 800aa86:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	3304      	adds	r3, #4
 800aa94:	623b      	str	r3, [r7, #32]
        src_addr++;
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	3304      	adds	r3, #4
 800aa9a:	61fb      	str	r3, [r7, #28]
        row_index--;
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800aaa2:	7dfb      	ldrb	r3, [r7, #23]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1ef      	bne.n	800aa88 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800aaa8:	f3bf 8f6f 	isb	sy
}
 800aaac:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aaae:	f3bf 8f4f 	dsb	sy
}
 800aab2:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800aab4:	69b9      	ldr	r1, [r7, #24]
 800aab6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aaba:	f000 f85d 	bl	800ab78 <FLASH_WaitForLastOperation>
 800aabe:	4603      	mov	r3, r0
 800aac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d106      	bne.n	800aad8 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800aaca:	4b0d      	ldr	r3, [pc, #52]	; (800ab00 <HAL_FLASH_Program+0x120>)
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	4a0c      	ldr	r2, [pc, #48]	; (800ab00 <HAL_FLASH_Program+0x120>)
 800aad0:	f023 0302 	bic.w	r3, r3, #2
 800aad4:	60d3      	str	r3, [r2, #12]
 800aad6:	e007      	b.n	800aae8 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800aad8:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <HAL_FLASH_Program+0x120>)
 800aada:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aade:	4a08      	ldr	r2, [pc, #32]	; (800ab00 <HAL_FLASH_Program+0x120>)
 800aae0:	f023 0302 	bic.w	r3, r3, #2
 800aae4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aae8:	4b04      	ldr	r3, [pc, #16]	; (800aafc <HAL_FLASH_Program+0x11c>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	751a      	strb	r2, [r3, #20]

  return status;
 800aaee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3728      	adds	r7, #40	; 0x28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	24002000 	.word	0x24002000
 800ab00:	52002000 	.word	0x52002000

0800ab04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ab04:	b480      	push	{r7}
 800ab06:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ab08:	4b18      	ldr	r3, [pc, #96]	; (800ab6c <HAL_FLASH_Unlock+0x68>)
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00d      	beq.n	800ab30 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800ab14:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <HAL_FLASH_Unlock+0x68>)
 800ab16:	4a16      	ldr	r2, [pc, #88]	; (800ab70 <HAL_FLASH_Unlock+0x6c>)
 800ab18:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800ab1a:	4b14      	ldr	r3, [pc, #80]	; (800ab6c <HAL_FLASH_Unlock+0x68>)
 800ab1c:	4a15      	ldr	r2, [pc, #84]	; (800ab74 <HAL_FLASH_Unlock+0x70>)
 800ab1e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ab20:	4b12      	ldr	r3, [pc, #72]	; (800ab6c <HAL_FLASH_Unlock+0x68>)
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e018      	b.n	800ab62 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800ab30:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <HAL_FLASH_Unlock+0x68>)
 800ab32:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab36:	f003 0301 	and.w	r3, r3, #1
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d010      	beq.n	800ab60 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800ab3e:	4b0b      	ldr	r3, [pc, #44]	; (800ab6c <HAL_FLASH_Unlock+0x68>)
 800ab40:	4a0b      	ldr	r2, [pc, #44]	; (800ab70 <HAL_FLASH_Unlock+0x6c>)
 800ab42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800ab46:	4b09      	ldr	r3, [pc, #36]	; (800ab6c <HAL_FLASH_Unlock+0x68>)
 800ab48:	4a0a      	ldr	r2, [pc, #40]	; (800ab74 <HAL_FLASH_Unlock+0x70>)
 800ab4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800ab4e:	4b07      	ldr	r3, [pc, #28]	; (800ab6c <HAL_FLASH_Unlock+0x68>)
 800ab50:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e000      	b.n	800ab62 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	52002000 	.word	0x52002000
 800ab70:	45670123 	.word	0x45670123
 800ab74:	cdef89ab 	.word	0xcdef89ab

0800ab78 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800ab82:	2304      	movs	r3, #4
 800ab84:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800ab8a:	f7fa ffab 	bl	8005ae4 <HAL_GetTick>
 800ab8e:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d113      	bne.n	800abbe <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800ab96:	4b41      	ldr	r3, [pc, #260]	; (800ac9c <FLASH_WaitForLastOperation+0x124>)
 800ab98:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800ab9a:	e010      	b.n	800abbe <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aba2:	d00c      	beq.n	800abbe <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aba4:	f7fa ff9e 	bl	8005ae4 <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d302      	bcc.n	800abba <FLASH_WaitForLastOperation+0x42>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d101      	bne.n	800abbe <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e06a      	b.n	800ac94 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	4b37      	ldr	r3, [pc, #220]	; (800aca0 <FLASH_WaitForLastOperation+0x128>)
 800abc2:	4013      	ands	r3, r2
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d10a      	bne.n	800abe0 <FLASH_WaitForLastOperation+0x68>
 800abca:	4b36      	ldr	r3, [pc, #216]	; (800aca4 <FLASH_WaitForLastOperation+0x12c>)
 800abcc:	691a      	ldr	r2, [r3, #16]
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	4013      	ands	r3, r2
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	bf0c      	ite	eq
 800abd8:	2301      	moveq	r3, #1
 800abda:	2300      	movne	r3, #0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	e00c      	b.n	800abfa <FLASH_WaitForLastOperation+0x82>
 800abe0:	4b30      	ldr	r3, [pc, #192]	; (800aca4 <FLASH_WaitForLastOperation+0x12c>)
 800abe2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800abe6:	43da      	mvns	r2, r3
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	4013      	ands	r3, r2
 800abec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	bf0c      	ite	eq
 800abf4:	2301      	moveq	r3, #1
 800abf6:	2300      	movne	r3, #0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1ce      	bne.n	800ab9c <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d105      	bne.n	800ac10 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800ac04:	4b27      	ldr	r3, [pc, #156]	; (800aca4 <FLASH_WaitForLastOperation+0x12c>)
 800ac06:	691a      	ldr	r2, [r3, #16]
 800ac08:	4b27      	ldr	r3, [pc, #156]	; (800aca8 <FLASH_WaitForLastOperation+0x130>)
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	613b      	str	r3, [r7, #16]
 800ac0e:	e007      	b.n	800ac20 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800ac10:	4b24      	ldr	r3, [pc, #144]	; (800aca4 <FLASH_WaitForLastOperation+0x12c>)
 800ac12:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800ac16:	4b24      	ldr	r3, [pc, #144]	; (800aca8 <FLASH_WaitForLastOperation+0x130>)
 800ac18:	4013      	ands	r3, r2
 800ac1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac1e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d017      	beq.n	800ac5a <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800ac2a:	4b20      	ldr	r3, [pc, #128]	; (800acac <FLASH_WaitForLastOperation+0x134>)
 800ac2c:	699a      	ldr	r2, [r3, #24]
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	4a1e      	ldr	r2, [pc, #120]	; (800acac <FLASH_WaitForLastOperation+0x134>)
 800ac34:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	4b19      	ldr	r3, [pc, #100]	; (800aca0 <FLASH_WaitForLastOperation+0x128>)
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d103      	bne.n	800ac4a <FLASH_WaitForLastOperation+0xd2>
 800ac42:	4a18      	ldr	r2, [pc, #96]	; (800aca4 <FLASH_WaitForLastOperation+0x12c>)
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	6153      	str	r3, [r2, #20]
 800ac48:	e005      	b.n	800ac56 <FLASH_WaitForLastOperation+0xde>
 800ac4a:	4a16      	ldr	r2, [pc, #88]	; (800aca4 <FLASH_WaitForLastOperation+0x12c>)
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac52:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e01c      	b.n	800ac94 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d10b      	bne.n	800ac78 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800ac60:	4b10      	ldr	r3, [pc, #64]	; (800aca4 <FLASH_WaitForLastOperation+0x12c>)
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac6c:	d111      	bne.n	800ac92 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800ac6e:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <FLASH_WaitForLastOperation+0x12c>)
 800ac70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ac74:	615a      	str	r2, [r3, #20]
 800ac76:	e00c      	b.n	800ac92 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800ac78:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <FLASH_WaitForLastOperation+0x12c>)
 800ac7a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800ac7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac86:	d104      	bne.n	800ac92 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800ac88:	4b06      	ldr	r3, [pc, #24]	; (800aca4 <FLASH_WaitForLastOperation+0x12c>)
 800ac8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ac8e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	80000004 	.word	0x80000004
 800aca0:	1fef000f 	.word	0x1fef000f
 800aca4:	52002000 	.word	0x52002000
 800aca8:	17ee0000 	.word	0x17ee0000
 800acac:	24002000 	.word	0x24002000

0800acb0 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800acbe:	4b5e      	ldr	r3, [pc, #376]	; (800ae38 <HAL_FLASHEx_Erase+0x188>)
 800acc0:	7d1b      	ldrb	r3, [r3, #20]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d101      	bne.n	800acca <HAL_FLASHEx_Erase+0x1a>
 800acc6:	2302      	movs	r3, #2
 800acc8:	e0b2      	b.n	800ae30 <HAL_FLASHEx_Erase+0x180>
 800acca:	4b5b      	ldr	r3, [pc, #364]	; (800ae38 <HAL_FLASHEx_Erase+0x188>)
 800accc:	2201      	movs	r2, #1
 800acce:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800acd0:	4b59      	ldr	r3, [pc, #356]	; (800ae38 <HAL_FLASHEx_Erase+0x188>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d009      	beq.n	800acf6 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ace2:	2101      	movs	r1, #1
 800ace4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ace8:	f7ff ff46 	bl	800ab78 <FLASH_WaitForLastOperation>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	f003 0302 	and.w	r3, r3, #2
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d009      	beq.n	800ad16 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800ad02:	2102      	movs	r1, #2
 800ad04:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad08:	f7ff ff36 	bl	800ab78 <FLASH_WaitForLastOperation>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800ad16:	7bfb      	ldrb	r3, [r7, #15]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f040 8085 	bne.w	800ae28 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d136      	bne.n	800ad94 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	691a      	ldr	r2, [r3, #16]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	4610      	mov	r0, r2
 800ad32:	f000 f887 	bl	800ae44 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00f      	beq.n	800ad62 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ad42:	2101      	movs	r1, #1
 800ad44:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad48:	f7ff ff16 	bl	800ab78 <FLASH_WaitForLastOperation>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800ad56:	4b39      	ldr	r3, [pc, #228]	; (800ae3c <HAL_FLASHEx_Erase+0x18c>)
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	4a38      	ldr	r2, [pc, #224]	; (800ae3c <HAL_FLASHEx_Erase+0x18c>)
 800ad5c:	f023 0308 	bic.w	r3, r3, #8
 800ad60:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d05c      	beq.n	800ae28 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800ad6e:	2102      	movs	r1, #2
 800ad70:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad74:	f7ff ff00 	bl	800ab78 <FLASH_WaitForLastOperation>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800ad82:	4b2e      	ldr	r3, [pc, #184]	; (800ae3c <HAL_FLASHEx_Erase+0x18c>)
 800ad84:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ad88:	4a2c      	ldr	r2, [pc, #176]	; (800ae3c <HAL_FLASHEx_Erase+0x18c>)
 800ad8a:	f023 0308 	bic.w	r3, r3, #8
 800ad8e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800ad92:	e049      	b.n	800ae28 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad9a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	60bb      	str	r3, [r7, #8]
 800ada2:	e039      	b.n	800ae18 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6859      	ldr	r1, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	461a      	mov	r2, r3
 800adae:	68b8      	ldr	r0, [r7, #8]
 800adb0:	f000 f8b2 	bl	800af18 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	f003 0301 	and.w	r3, r3, #1
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00c      	beq.n	800adda <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800adc0:	2101      	movs	r1, #1
 800adc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800adc6:	f7ff fed7 	bl	800ab78 <FLASH_WaitForLastOperation>
 800adca:	4603      	mov	r3, r0
 800adcc:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800adce:	4b1b      	ldr	r3, [pc, #108]	; (800ae3c <HAL_FLASHEx_Erase+0x18c>)
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	491a      	ldr	r1, [pc, #104]	; (800ae3c <HAL_FLASHEx_Erase+0x18c>)
 800add4:	4b1a      	ldr	r3, [pc, #104]	; (800ae40 <HAL_FLASHEx_Erase+0x190>)
 800add6:	4013      	ands	r3, r2
 800add8:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00e      	beq.n	800ae04 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800ade6:	2102      	movs	r1, #2
 800ade8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800adec:	f7ff fec4 	bl	800ab78 <FLASH_WaitForLastOperation>
 800adf0:	4603      	mov	r3, r0
 800adf2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800adf4:	4b11      	ldr	r3, [pc, #68]	; (800ae3c <HAL_FLASHEx_Erase+0x18c>)
 800adf6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800adfa:	4910      	ldr	r1, [pc, #64]	; (800ae3c <HAL_FLASHEx_Erase+0x18c>)
 800adfc:	4b10      	ldr	r3, [pc, #64]	; (800ae40 <HAL_FLASHEx_Erase+0x190>)
 800adfe:	4013      	ands	r3, r2
 800ae00:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d003      	beq.n	800ae12 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	601a      	str	r2, [r3, #0]
          break;
 800ae10:	e00a      	b.n	800ae28 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	3301      	adds	r3, #1
 800ae16:	60bb      	str	r3, [r7, #8]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68da      	ldr	r2, [r3, #12]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	4413      	add	r3, r2
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d3bd      	bcc.n	800ada4 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ae28:	4b03      	ldr	r3, [pc, #12]	; (800ae38 <HAL_FLASHEx_Erase+0x188>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	751a      	strb	r2, [r3, #20]

  return status;
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	24002000 	.word	0x24002000
 800ae3c:	52002000 	.word	0x52002000
 800ae40:	fffff8fb 	.word	0xfffff8fb

0800ae44 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	f003 0303 	and.w	r3, r3, #3
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d122      	bne.n	800ae9e <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ae58:	4b2e      	ldr	r3, [pc, #184]	; (800af14 <FLASH_MassErase+0xd0>)
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	4a2d      	ldr	r2, [pc, #180]	; (800af14 <FLASH_MassErase+0xd0>)
 800ae5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ae62:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ae64:	4b2b      	ldr	r3, [pc, #172]	; (800af14 <FLASH_MassErase+0xd0>)
 800ae66:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae6a:	4a2a      	ldr	r2, [pc, #168]	; (800af14 <FLASH_MassErase+0xd0>)
 800ae6c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ae70:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800ae74:	4b27      	ldr	r3, [pc, #156]	; (800af14 <FLASH_MassErase+0xd0>)
 800ae76:	68da      	ldr	r2, [r3, #12]
 800ae78:	4926      	ldr	r1, [pc, #152]	; (800af14 <FLASH_MassErase+0xd0>)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800ae80:	4b24      	ldr	r3, [pc, #144]	; (800af14 <FLASH_MassErase+0xd0>)
 800ae82:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ae86:	4923      	ldr	r1, [pc, #140]	; (800af14 <FLASH_MassErase+0xd0>)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800ae90:	4b20      	ldr	r3, [pc, #128]	; (800af14 <FLASH_MassErase+0xd0>)
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	4a1f      	ldr	r2, [pc, #124]	; (800af14 <FLASH_MassErase+0xd0>)
 800ae96:	f043 0310 	orr.w	r3, r3, #16
 800ae9a:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800ae9c:	e033      	b.n	800af06 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d011      	beq.n	800aecc <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800aea8:	4b1a      	ldr	r3, [pc, #104]	; (800af14 <FLASH_MassErase+0xd0>)
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	4a19      	ldr	r2, [pc, #100]	; (800af14 <FLASH_MassErase+0xd0>)
 800aeae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800aeb2:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800aeb4:	4b17      	ldr	r3, [pc, #92]	; (800af14 <FLASH_MassErase+0xd0>)
 800aeb6:	68da      	ldr	r2, [r3, #12]
 800aeb8:	4916      	ldr	r1, [pc, #88]	; (800af14 <FLASH_MassErase+0xd0>)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800aec0:	4b14      	ldr	r3, [pc, #80]	; (800af14 <FLASH_MassErase+0xd0>)
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	4a13      	ldr	r2, [pc, #76]	; (800af14 <FLASH_MassErase+0xd0>)
 800aec6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800aeca:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d017      	beq.n	800af06 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800aed6:	4b0f      	ldr	r3, [pc, #60]	; (800af14 <FLASH_MassErase+0xd0>)
 800aed8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aedc:	4a0d      	ldr	r2, [pc, #52]	; (800af14 <FLASH_MassErase+0xd0>)
 800aede:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800aee2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800aee6:	4b0b      	ldr	r3, [pc, #44]	; (800af14 <FLASH_MassErase+0xd0>)
 800aee8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800aeec:	4909      	ldr	r1, [pc, #36]	; (800af14 <FLASH_MassErase+0xd0>)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800aef6:	4b07      	ldr	r3, [pc, #28]	; (800af14 <FLASH_MassErase+0xd0>)
 800aef8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aefc:	4a05      	ldr	r2, [pc, #20]	; (800af14 <FLASH_MassErase+0xd0>)
 800aefe:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800af02:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800af06:	bf00      	nop
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	52002000 	.word	0x52002000

0800af18 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d010      	beq.n	800af50 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800af2e:	4b18      	ldr	r3, [pc, #96]	; (800af90 <FLASH_Erase_Sector+0x78>)
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	4a17      	ldr	r2, [pc, #92]	; (800af90 <FLASH_Erase_Sector+0x78>)
 800af34:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800af38:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800af3a:	4b15      	ldr	r3, [pc, #84]	; (800af90 <FLASH_Erase_Sector+0x78>)
 800af3c:	68da      	ldr	r2, [r3, #12]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	0219      	lsls	r1, r3, #8
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	430b      	orrs	r3, r1
 800af46:	4313      	orrs	r3, r2
 800af48:	4a11      	ldr	r2, [pc, #68]	; (800af90 <FLASH_Erase_Sector+0x78>)
 800af4a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800af4e:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	2b00      	cmp	r3, #0
 800af58:	d014      	beq.n	800af84 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800af5a:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <FLASH_Erase_Sector+0x78>)
 800af5c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af60:	4a0b      	ldr	r2, [pc, #44]	; (800af90 <FLASH_Erase_Sector+0x78>)
 800af62:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800af66:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800af6a:	4b09      	ldr	r3, [pc, #36]	; (800af90 <FLASH_Erase_Sector+0x78>)
 800af6c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	0219      	lsls	r1, r3, #8
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	430b      	orrs	r3, r1
 800af78:	4313      	orrs	r3, r2
 800af7a:	4a05      	ldr	r2, [pc, #20]	; (800af90 <FLASH_Erase_Sector+0x78>)
 800af7c:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800af80:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800af84:	bf00      	nop
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	52002000 	.word	0x52002000

0800af94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af94:	b480      	push	{r7}
 800af96:	b089      	sub	sp, #36	; 0x24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800af9e:	2300      	movs	r3, #0
 800afa0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800afa2:	4b89      	ldr	r3, [pc, #548]	; (800b1c8 <HAL_GPIO_Init+0x234>)
 800afa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800afa6:	e194      	b.n	800b2d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	2101      	movs	r1, #1
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	fa01 f303 	lsl.w	r3, r1, r3
 800afb4:	4013      	ands	r3, r2
 800afb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8186 	beq.w	800b2cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	f003 0303 	and.w	r3, r3, #3
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d005      	beq.n	800afd8 <HAL_GPIO_Init+0x44>
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	f003 0303 	and.w	r3, r3, #3
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d130      	bne.n	800b03a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	2203      	movs	r2, #3
 800afe4:	fa02 f303 	lsl.w	r3, r2, r3
 800afe8:	43db      	mvns	r3, r3
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	4013      	ands	r3, r2
 800afee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	68da      	ldr	r2, [r3, #12]
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	fa02 f303 	lsl.w	r3, r2, r3
 800affc:	69ba      	ldr	r2, [r7, #24]
 800affe:	4313      	orrs	r3, r2
 800b000:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b00e:	2201      	movs	r2, #1
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	fa02 f303 	lsl.w	r3, r2, r3
 800b016:	43db      	mvns	r3, r3
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	4013      	ands	r3, r2
 800b01c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	091b      	lsrs	r3, r3, #4
 800b024:	f003 0201 	and.w	r2, r3, #1
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	fa02 f303 	lsl.w	r3, r2, r3
 800b02e:	69ba      	ldr	r2, [r7, #24]
 800b030:	4313      	orrs	r3, r2
 800b032:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	69ba      	ldr	r2, [r7, #24]
 800b038:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f003 0303 	and.w	r3, r3, #3
 800b042:	2b03      	cmp	r3, #3
 800b044:	d017      	beq.n	800b076 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	005b      	lsls	r3, r3, #1
 800b050:	2203      	movs	r2, #3
 800b052:	fa02 f303 	lsl.w	r3, r2, r3
 800b056:	43db      	mvns	r3, r3
 800b058:	69ba      	ldr	r2, [r7, #24]
 800b05a:	4013      	ands	r3, r2
 800b05c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	689a      	ldr	r2, [r3, #8]
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	fa02 f303 	lsl.w	r3, r2, r3
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d123      	bne.n	800b0ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	08da      	lsrs	r2, r3, #3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3208      	adds	r2, #8
 800b08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	f003 0307 	and.w	r3, r3, #7
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	220f      	movs	r2, #15
 800b09a:	fa02 f303 	lsl.w	r3, r2, r3
 800b09e:	43db      	mvns	r3, r3
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	691a      	ldr	r2, [r3, #16]
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	f003 0307 	and.w	r3, r3, #7
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b6:	69ba      	ldr	r2, [r7, #24]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	08da      	lsrs	r2, r3, #3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	3208      	adds	r2, #8
 800b0c4:	69b9      	ldr	r1, [r7, #24]
 800b0c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	2203      	movs	r2, #3
 800b0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0da:	43db      	mvns	r3, r3
 800b0dc:	69ba      	ldr	r2, [r7, #24]
 800b0de:	4013      	ands	r3, r2
 800b0e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f003 0203 	and.w	r2, r3, #3
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 80e0 	beq.w	800b2cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b10c:	4b2f      	ldr	r3, [pc, #188]	; (800b1cc <HAL_GPIO_Init+0x238>)
 800b10e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b112:	4a2e      	ldr	r2, [pc, #184]	; (800b1cc <HAL_GPIO_Init+0x238>)
 800b114:	f043 0302 	orr.w	r3, r3, #2
 800b118:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b11c:	4b2b      	ldr	r3, [pc, #172]	; (800b1cc <HAL_GPIO_Init+0x238>)
 800b11e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	60fb      	str	r3, [r7, #12]
 800b128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b12a:	4a29      	ldr	r2, [pc, #164]	; (800b1d0 <HAL_GPIO_Init+0x23c>)
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	089b      	lsrs	r3, r3, #2
 800b130:	3302      	adds	r3, #2
 800b132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	f003 0303 	and.w	r3, r3, #3
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	220f      	movs	r2, #15
 800b142:	fa02 f303 	lsl.w	r3, r2, r3
 800b146:	43db      	mvns	r3, r3
 800b148:	69ba      	ldr	r2, [r7, #24]
 800b14a:	4013      	ands	r3, r2
 800b14c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a20      	ldr	r2, [pc, #128]	; (800b1d4 <HAL_GPIO_Init+0x240>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d052      	beq.n	800b1fc <HAL_GPIO_Init+0x268>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a1f      	ldr	r2, [pc, #124]	; (800b1d8 <HAL_GPIO_Init+0x244>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d031      	beq.n	800b1c2 <HAL_GPIO_Init+0x22e>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a1e      	ldr	r2, [pc, #120]	; (800b1dc <HAL_GPIO_Init+0x248>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d02b      	beq.n	800b1be <HAL_GPIO_Init+0x22a>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a1d      	ldr	r2, [pc, #116]	; (800b1e0 <HAL_GPIO_Init+0x24c>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d025      	beq.n	800b1ba <HAL_GPIO_Init+0x226>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a1c      	ldr	r2, [pc, #112]	; (800b1e4 <HAL_GPIO_Init+0x250>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d01f      	beq.n	800b1b6 <HAL_GPIO_Init+0x222>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a1b      	ldr	r2, [pc, #108]	; (800b1e8 <HAL_GPIO_Init+0x254>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d019      	beq.n	800b1b2 <HAL_GPIO_Init+0x21e>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a1a      	ldr	r2, [pc, #104]	; (800b1ec <HAL_GPIO_Init+0x258>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d013      	beq.n	800b1ae <HAL_GPIO_Init+0x21a>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a19      	ldr	r2, [pc, #100]	; (800b1f0 <HAL_GPIO_Init+0x25c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d00d      	beq.n	800b1aa <HAL_GPIO_Init+0x216>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a18      	ldr	r2, [pc, #96]	; (800b1f4 <HAL_GPIO_Init+0x260>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d007      	beq.n	800b1a6 <HAL_GPIO_Init+0x212>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a17      	ldr	r2, [pc, #92]	; (800b1f8 <HAL_GPIO_Init+0x264>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d101      	bne.n	800b1a2 <HAL_GPIO_Init+0x20e>
 800b19e:	2309      	movs	r3, #9
 800b1a0:	e02d      	b.n	800b1fe <HAL_GPIO_Init+0x26a>
 800b1a2:	230a      	movs	r3, #10
 800b1a4:	e02b      	b.n	800b1fe <HAL_GPIO_Init+0x26a>
 800b1a6:	2308      	movs	r3, #8
 800b1a8:	e029      	b.n	800b1fe <HAL_GPIO_Init+0x26a>
 800b1aa:	2307      	movs	r3, #7
 800b1ac:	e027      	b.n	800b1fe <HAL_GPIO_Init+0x26a>
 800b1ae:	2306      	movs	r3, #6
 800b1b0:	e025      	b.n	800b1fe <HAL_GPIO_Init+0x26a>
 800b1b2:	2305      	movs	r3, #5
 800b1b4:	e023      	b.n	800b1fe <HAL_GPIO_Init+0x26a>
 800b1b6:	2304      	movs	r3, #4
 800b1b8:	e021      	b.n	800b1fe <HAL_GPIO_Init+0x26a>
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	e01f      	b.n	800b1fe <HAL_GPIO_Init+0x26a>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e01d      	b.n	800b1fe <HAL_GPIO_Init+0x26a>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e01b      	b.n	800b1fe <HAL_GPIO_Init+0x26a>
 800b1c6:	bf00      	nop
 800b1c8:	58000080 	.word	0x58000080
 800b1cc:	58024400 	.word	0x58024400
 800b1d0:	58000400 	.word	0x58000400
 800b1d4:	58020000 	.word	0x58020000
 800b1d8:	58020400 	.word	0x58020400
 800b1dc:	58020800 	.word	0x58020800
 800b1e0:	58020c00 	.word	0x58020c00
 800b1e4:	58021000 	.word	0x58021000
 800b1e8:	58021400 	.word	0x58021400
 800b1ec:	58021800 	.word	0x58021800
 800b1f0:	58021c00 	.word	0x58021c00
 800b1f4:	58022000 	.word	0x58022000
 800b1f8:	58022400 	.word	0x58022400
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	69fa      	ldr	r2, [r7, #28]
 800b200:	f002 0203 	and.w	r2, r2, #3
 800b204:	0092      	lsls	r2, r2, #2
 800b206:	4093      	lsls	r3, r2
 800b208:	69ba      	ldr	r2, [r7, #24]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b20e:	4938      	ldr	r1, [pc, #224]	; (800b2f0 <HAL_GPIO_Init+0x35c>)
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	089b      	lsrs	r3, r3, #2
 800b214:	3302      	adds	r3, #2
 800b216:	69ba      	ldr	r2, [r7, #24]
 800b218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b21c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	43db      	mvns	r3, r3
 800b228:	69ba      	ldr	r2, [r7, #24]
 800b22a:	4013      	ands	r3, r2
 800b22c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b23a:	69ba      	ldr	r2, [r7, #24]
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	4313      	orrs	r3, r2
 800b240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b24a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	43db      	mvns	r3, r3
 800b256:	69ba      	ldr	r2, [r7, #24]
 800b258:	4013      	ands	r3, r2
 800b25a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d003      	beq.n	800b270 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	43db      	mvns	r3, r3
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	4013      	ands	r3, r2
 800b286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b290:	2b00      	cmp	r3, #0
 800b292:	d003      	beq.n	800b29c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	4313      	orrs	r3, r2
 800b29a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	69ba      	ldr	r2, [r7, #24]
 800b2a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	43db      	mvns	r3, r3
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d003      	beq.n	800b2c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b2be:	69ba      	ldr	r2, [r7, #24]
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	69ba      	ldr	r2, [r7, #24]
 800b2ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f47f ae63 	bne.w	800afa8 <HAL_GPIO_Init+0x14>
  }
}
 800b2e2:	bf00      	nop
 800b2e4:	bf00      	nop
 800b2e6:	3724      	adds	r7, #36	; 0x24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	58000400 	.word	0x58000400

0800b2f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	691a      	ldr	r2, [r3, #16]
 800b304:	887b      	ldrh	r3, [r7, #2]
 800b306:	4013      	ands	r3, r2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b30c:	2301      	movs	r3, #1
 800b30e:	73fb      	strb	r3, [r7, #15]
 800b310:	e001      	b.n	800b316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b312:	2300      	movs	r3, #0
 800b314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b316:	7bfb      	ldrb	r3, [r7, #15]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	807b      	strh	r3, [r7, #2]
 800b330:	4613      	mov	r3, r2
 800b332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b334:	787b      	ldrb	r3, [r7, #1]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b33a:	887a      	ldrh	r2, [r7, #2]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b340:	e003      	b.n	800b34a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b342:	887b      	ldrh	r3, [r7, #2]
 800b344:	041a      	lsls	r2, r3, #16
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	619a      	str	r2, [r3, #24]
}
 800b34a:	bf00      	nop
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
	...

0800b358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e08b      	b.n	800b482 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b00      	cmp	r3, #0
 800b374:	d106      	bne.n	800b384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7f7 fb26 	bl	80029d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2224      	movs	r2, #36	; 0x24
 800b388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0201 	bic.w	r2, r2, #1
 800b39a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685a      	ldr	r2, [r3, #4]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b3a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	689a      	ldr	r2, [r3, #8]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d107      	bne.n	800b3d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	689a      	ldr	r2, [r3, #8]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3ce:	609a      	str	r2, [r3, #8]
 800b3d0:	e006      	b.n	800b3e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	689a      	ldr	r2, [r3, #8]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b3de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d108      	bne.n	800b3fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3f6:	605a      	str	r2, [r3, #4]
 800b3f8:	e007      	b.n	800b40a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6859      	ldr	r1, [r3, #4]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	4b1d      	ldr	r3, [pc, #116]	; (800b48c <HAL_I2C_Init+0x134>)
 800b416:	430b      	orrs	r3, r1
 800b418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68da      	ldr	r2, [r3, #12]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	691a      	ldr	r2, [r3, #16]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	430a      	orrs	r2, r1
 800b442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	69d9      	ldr	r1, [r3, #28]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a1a      	ldr	r2, [r3, #32]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	430a      	orrs	r2, r1
 800b452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f042 0201 	orr.w	r2, r2, #1
 800b462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2220      	movs	r2, #32
 800b46e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	02008000 	.word	0x02008000

0800b490 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b08a      	sub	sp, #40	; 0x28
 800b494:	af02      	add	r7, sp, #8
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	461a      	mov	r2, r3
 800b49c:	460b      	mov	r3, r1
 800b49e:	817b      	strh	r3, [r7, #10]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b20      	cmp	r3, #32
 800b4b2:	f040 80ef 	bne.w	800b694 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4c4:	d101      	bne.n	800b4ca <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	e0e5      	b.n	800b696 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d101      	bne.n	800b4d8 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	e0de      	b.n	800b696 <HAL_I2C_Master_Transmit_DMA+0x206>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2221      	movs	r2, #33	; 0x21
 800b4e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2210      	movs	r2, #16
 800b4ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	893a      	ldrh	r2, [r7, #8]
 800b500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	4a66      	ldr	r2, [pc, #408]	; (800b6a0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b506:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	4a66      	ldr	r2, [pc, #408]	; (800b6a4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b50c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b512:	b29b      	uxth	r3, r3
 800b514:	2bff      	cmp	r3, #255	; 0xff
 800b516:	d906      	bls.n	800b526 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	22ff      	movs	r2, #255	; 0xff
 800b51c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b51e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b522:	61fb      	str	r3, [r7, #28]
 800b524:	e007      	b.n	800b536 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b530:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b534:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d01a      	beq.n	800b574 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b542:	781a      	ldrb	r2, [r3, #0]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b558:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b55e:	b29b      	uxth	r3, r3
 800b560:	3b01      	subs	r3, #1
 800b562:	b29a      	uxth	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b56c:	3b01      	subs	r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d074      	beq.n	800b666 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b580:	2b00      	cmp	r3, #0
 800b582:	d022      	beq.n	800b5ca <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b588:	4a47      	ldr	r2, [pc, #284]	; (800b6a8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b58a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	4a46      	ldr	r2, [pc, #280]	; (800b6ac <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b592:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b598:	2200      	movs	r2, #0
 800b59a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ac:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b5b4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b5ba:	f7fc ff17 	bl	80083ec <HAL_DMA_Start_IT>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d13a      	bne.n	800b63e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b5c8:	e013      	b.n	800b5f2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e051      	b.n	800b696 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	8979      	ldrh	r1, [r7, #10]
 800b5fe:	4b2c      	ldr	r3, [pc, #176]	; (800b6b0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f002 f83b 	bl	800d680 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b60e:	b29a      	uxth	r2, r3
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	b29a      	uxth	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b624:	2110      	movs	r1, #16
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f002 f85c 	bl	800d6e4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	e028      	b.n	800b690 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2220      	movs	r2, #32
 800b642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b652:	f043 0210 	orr.w	r2, r3, #16
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	e017      	b.n	800b696 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	4a12      	ldr	r2, [pc, #72]	; (800b6b4 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b66a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	8979      	ldrh	r1, [r7, #10]
 800b672:	4b0f      	ldr	r3, [pc, #60]	; (800b6b0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f002 f800 	bl	800d680 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b688:	2101      	movs	r1, #1
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f002 f82a 	bl	800d6e4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	e000      	b.n	800b696 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b694:	2302      	movs	r3, #2
  }
}
 800b696:	4618      	mov	r0, r3
 800b698:	3720      	adds	r7, #32
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	ffff0000 	.word	0xffff0000
 800b6a4:	0800beeb 	.word	0x0800beeb
 800b6a8:	0800d2a3 	.word	0x0800d2a3
 800b6ac:	0800d3d1 	.word	0x0800d3d1
 800b6b0:	80002000 	.word	0x80002000
 800b6b4:	0800ba7b 	.word	0x0800ba7b

0800b6b8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b088      	sub	sp, #32
 800b6bc:	af02      	add	r7, sp, #8
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	607a      	str	r2, [r7, #4]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	817b      	strh	r3, [r7, #10]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	2b20      	cmp	r3, #32
 800b6d6:	f040 80cd 	bne.w	800b874 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6e8:	d101      	bne.n	800b6ee <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	e0c3      	b.n	800b876 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <HAL_I2C_Master_Receive_DMA+0x44>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e0bc      	b.n	800b876 <HAL_I2C_Master_Receive_DMA+0x1be>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2222      	movs	r2, #34	; 0x22
 800b708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2210      	movs	r2, #16
 800b710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	893a      	ldrh	r2, [r7, #8]
 800b724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	4a55      	ldr	r2, [pc, #340]	; (800b880 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800b72a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	4a55      	ldr	r2, [pc, #340]	; (800b884 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800b730:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b736:	b29b      	uxth	r3, r3
 800b738:	2bff      	cmp	r3, #255	; 0xff
 800b73a:	d906      	bls.n	800b74a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	22ff      	movs	r2, #255	; 0xff
 800b740:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b746:	617b      	str	r3, [r7, #20]
 800b748:	e007      	b.n	800b75a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b758:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d070      	beq.n	800b844 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d020      	beq.n	800b7ac <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b76e:	4a46      	ldr	r2, [pc, #280]	; (800b888 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800b770:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b776:	4a45      	ldr	r2, [pc, #276]	; (800b88c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800b778:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b77e:	2200      	movs	r2, #0
 800b780:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b786:	2200      	movs	r2, #0
 800b788:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	3324      	adds	r3, #36	; 0x24
 800b794:	4619      	mov	r1, r3
 800b796:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b79c:	f7fc fe26 	bl	80083ec <HAL_DMA_Start_IT>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b7a4:	7cfb      	ldrb	r3, [r7, #19]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d138      	bne.n	800b81c <HAL_I2C_Master_Receive_DMA+0x164>
 800b7aa:	e013      	b.n	800b7d4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e050      	b.n	800b876 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	8979      	ldrh	r1, [r7, #10]
 800b7dc:	4b2c      	ldr	r3, [pc, #176]	; (800b890 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f001 ff4c 	bl	800d680 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b802:	2110      	movs	r1, #16
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f001 ff6d 	bl	800d6e4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	e029      	b.n	800b870 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2220      	movs	r2, #32
 800b820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b830:	f043 0210 	orr.w	r2, r3, #16
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	e018      	b.n	800b876 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	4a13      	ldr	r2, [pc, #76]	; (800b894 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800b848:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	8979      	ldrh	r1, [r7, #10]
 800b852:	4b0f      	ldr	r3, [pc, #60]	; (800b890 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f001 ff10 	bl	800d680 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b868:	2102      	movs	r1, #2
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f001 ff3a 	bl	800d6e4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	e000      	b.n	800b876 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800b874:	2302      	movs	r3, #2
  }
}
 800b876:	4618      	mov	r0, r3
 800b878:	3718      	adds	r7, #24
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	ffff0000 	.word	0xffff0000
 800b884:	0800beeb 	.word	0x0800beeb
 800b888:	0800d339 	.word	0x0800d339
 800b88c:	0800d3d1 	.word	0x0800d3d1
 800b890:	80002400 	.word	0x80002400
 800b894:	0800ba7b 	.word	0x0800ba7b

0800b898 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d005      	beq.n	800b8c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	68f9      	ldr	r1, [r7, #12]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	4798      	blx	r3
  }
}
 800b8c4:	bf00      	nop
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	699b      	ldr	r3, [r3, #24]
 800b8da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	0a1b      	lsrs	r3, r3, #8
 800b8e8:	f003 0301 	and.w	r3, r3, #1
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d010      	beq.n	800b912 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	09db      	lsrs	r3, r3, #7
 800b8f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00a      	beq.n	800b912 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b900:	f043 0201 	orr.w	r2, r3, #1
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b910:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	0a9b      	lsrs	r3, r3, #10
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d010      	beq.n	800b940 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	09db      	lsrs	r3, r3, #7
 800b922:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00a      	beq.n	800b940 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b92e:	f043 0208 	orr.w	r2, r3, #8
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b93e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	0a5b      	lsrs	r3, r3, #9
 800b944:	f003 0301 	and.w	r3, r3, #1
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d010      	beq.n	800b96e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	09db      	lsrs	r3, r3, #7
 800b950:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00a      	beq.n	800b96e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b95c:	f043 0202 	orr.w	r2, r3, #2
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b96c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b972:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f003 030b 	and.w	r3, r3, #11
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d003      	beq.n	800b986 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b97e:	68f9      	ldr	r1, [r7, #12]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f001 fb53 	bl	800d02c <I2C_ITError>
  }
}
 800b986:	bf00      	nop
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b98e:	b480      	push	{r7}
 800b990:	b083      	sub	sp, #12
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b996:	bf00      	nop
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b083      	sub	sp, #12
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b9aa:	bf00      	nop
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b083      	sub	sp, #12
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b9be:	bf00      	nop
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	70fb      	strb	r3, [r7, #3]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b9ee:	bf00      	nop
 800b9f0:	370c      	adds	r7, #12
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b083      	sub	sp, #12
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ba02:	bf00      	nop
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b083      	sub	sp, #12
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ba16:	bf00      	nop
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b083      	sub	sp, #12
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ba2a:	bf00      	nop
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ba52:	bf00      	nop
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b083      	sub	sp, #12
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba6c:	b2db      	uxtb	r3, r3
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b088      	sub	sp, #32
 800ba7e:	af02      	add	r7, sp, #8
 800ba80:	60f8      	str	r0, [r7, #12]
 800ba82:	60b9      	str	r1, [r7, #8]
 800ba84:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d101      	bne.n	800ba98 <I2C_Master_ISR_IT+0x1e>
 800ba94:	2302      	movs	r3, #2
 800ba96:	e120      	b.n	800bcda <I2C_Master_ISR_IT+0x260>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	091b      	lsrs	r3, r3, #4
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d013      	beq.n	800bad4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	091b      	lsrs	r3, r3, #4
 800bab0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00d      	beq.n	800bad4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2210      	movs	r2, #16
 800babe:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac4:	f043 0204 	orr.w	r2, r3, #4
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f001 fbc4 	bl	800d25a <I2C_Flush_TXDR>
 800bad2:	e0ed      	b.n	800bcb0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	089b      	lsrs	r3, r3, #2
 800bad8:	f003 0301 	and.w	r3, r3, #1
 800badc:	2b00      	cmp	r3, #0
 800bade:	d023      	beq.n	800bb28 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	089b      	lsrs	r3, r3, #2
 800bae4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d01d      	beq.n	800bb28 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	f023 0304 	bic.w	r3, r3, #4
 800baf2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	b2d2      	uxtb	r2, r2
 800bb00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb10:	3b01      	subs	r3, #1
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb26:	e0c3      	b.n	800bcb0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	099b      	lsrs	r3, r3, #6
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d12a      	bne.n	800bb8a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	085b      	lsrs	r3, r3, #1
 800bb38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d024      	beq.n	800bb8a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	085b      	lsrs	r3, r3, #1
 800bb44:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01e      	beq.n	800bb8a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 80ac 	beq.w	800bcb0 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	781a      	ldrb	r2, [r3, #0]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb72:	3b01      	subs	r3, #1
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	3b01      	subs	r3, #1
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800bb88:	e092      	b.n	800bcb0 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	09db      	lsrs	r3, r3, #7
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d05d      	beq.n	800bc52 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	099b      	lsrs	r3, r3, #6
 800bb9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d057      	beq.n	800bc52 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d040      	beq.n	800bc2e <I2C_Master_ISR_IT+0x1b4>
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d13c      	bne.n	800bc2e <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbc0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	2bff      	cmp	r3, #255	; 0xff
 800bbca:	d90e      	bls.n	800bbea <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	22ff      	movs	r2, #255	; 0xff
 800bbd0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd6:	b2da      	uxtb	r2, r3
 800bbd8:	8a79      	ldrh	r1, [r7, #18]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f001 fd4c 	bl	800d680 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbe8:	e032      	b.n	800bc50 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bbfc:	d00b      	beq.n	800bc16 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc08:	8a79      	ldrh	r1, [r7, #18]
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	9000      	str	r0, [sp, #0]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f001 fd36 	bl	800d680 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc14:	e01c      	b.n	800bc50 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	8a79      	ldrh	r1, [r7, #18]
 800bc1e:	2300      	movs	r3, #0
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f001 fd2a 	bl	800d680 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc2c:	e010      	b.n	800bc50 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc3c:	d003      	beq.n	800bc46 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f000 fdde 	bl	800c800 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc44:	e034      	b.n	800bcb0 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bc46:	2140      	movs	r1, #64	; 0x40
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f001 f9ef 	bl	800d02c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc4e:	e02f      	b.n	800bcb0 <I2C_Master_ISR_IT+0x236>
 800bc50:	e02e      	b.n	800bcb0 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	099b      	lsrs	r3, r3, #6
 800bc56:	f003 0301 	and.w	r3, r3, #1
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d028      	beq.n	800bcb0 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	099b      	lsrs	r3, r3, #6
 800bc62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d022      	beq.n	800bcb0 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d119      	bne.n	800bca8 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc82:	d015      	beq.n	800bcb0 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc8c:	d108      	bne.n	800bca0 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc9c:	605a      	str	r2, [r3, #4]
 800bc9e:	e007      	b.n	800bcb0 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f000 fdad 	bl	800c800 <I2C_ITMasterSeqCplt>
 800bca6:	e003      	b.n	800bcb0 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bca8:	2140      	movs	r1, #64	; 0x40
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f001 f9be 	bl	800d02c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	095b      	lsrs	r3, r3, #5
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d009      	beq.n	800bcd0 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	095b      	lsrs	r3, r3, #5
 800bcc0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d003      	beq.n	800bcd0 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bcc8:	6979      	ldr	r1, [r7, #20]
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 fe34 	bl	800c938 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b086      	sub	sp, #24
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	60f8      	str	r0, [r7, #12]
 800bcea:	60b9      	str	r1, [r7, #8]
 800bcec:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d101      	bne.n	800bd06 <I2C_Slave_ISR_IT+0x24>
 800bd02:	2302      	movs	r3, #2
 800bd04:	e0ed      	b.n	800bee2 <I2C_Slave_ISR_IT+0x200>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	095b      	lsrs	r3, r3, #5
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00a      	beq.n	800bd30 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	095b      	lsrs	r3, r3, #5
 800bd1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d004      	beq.n	800bd30 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bd26:	6939      	ldr	r1, [r7, #16]
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 fecf 	bl	800cacc <I2C_ITSlaveCplt>
 800bd2e:	e0d3      	b.n	800bed8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	091b      	lsrs	r3, r3, #4
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d04d      	beq.n	800bdd8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	091b      	lsrs	r3, r3, #4
 800bd40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d047      	beq.n	800bdd8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d128      	bne.n	800bda4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b28      	cmp	r3, #40	; 0x28
 800bd5c:	d108      	bne.n	800bd70 <I2C_Slave_ISR_IT+0x8e>
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd64:	d104      	bne.n	800bd70 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bd66:	6939      	ldr	r1, [r7, #16]
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f001 f909 	bl	800cf80 <I2C_ITListenCplt>
 800bd6e:	e032      	b.n	800bdd6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	2b29      	cmp	r3, #41	; 0x29
 800bd7a:	d10e      	bne.n	800bd9a <I2C_Slave_ISR_IT+0xb8>
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd82:	d00a      	beq.n	800bd9a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2210      	movs	r2, #16
 800bd8a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f001 fa64 	bl	800d25a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f000 fd71 	bl	800c87a <I2C_ITSlaveSeqCplt>
 800bd98:	e01d      	b.n	800bdd6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2210      	movs	r2, #16
 800bda0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bda2:	e096      	b.n	800bed2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2210      	movs	r2, #16
 800bdaa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb0:	f043 0204 	orr.w	r2, r3, #4
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d004      	beq.n	800bdc8 <I2C_Slave_ISR_IT+0xe6>
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bdc4:	f040 8085 	bne.w	800bed2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdcc:	4619      	mov	r1, r3
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f001 f92c 	bl	800d02c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bdd4:	e07d      	b.n	800bed2 <I2C_Slave_ISR_IT+0x1f0>
 800bdd6:	e07c      	b.n	800bed2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	089b      	lsrs	r3, r3, #2
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d030      	beq.n	800be46 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	089b      	lsrs	r3, r3, #2
 800bde8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d02a      	beq.n	800be46 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d018      	beq.n	800be2c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	b2d2      	uxtb	r2, r2
 800be06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be16:	3b01      	subs	r3, #1
 800be18:	b29a      	uxth	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be22:	b29b      	uxth	r3, r3
 800be24:	3b01      	subs	r3, #1
 800be26:	b29a      	uxth	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be30:	b29b      	uxth	r3, r3
 800be32:	2b00      	cmp	r3, #0
 800be34:	d14f      	bne.n	800bed6 <I2C_Slave_ISR_IT+0x1f4>
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be3c:	d04b      	beq.n	800bed6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f000 fd1b 	bl	800c87a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800be44:	e047      	b.n	800bed6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	08db      	lsrs	r3, r3, #3
 800be4a:	f003 0301 	and.w	r3, r3, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00a      	beq.n	800be68 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	08db      	lsrs	r3, r3, #3
 800be56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d004      	beq.n	800be68 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800be5e:	6939      	ldr	r1, [r7, #16]
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f000 fc49 	bl	800c6f8 <I2C_ITAddrCplt>
 800be66:	e037      	b.n	800bed8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	085b      	lsrs	r3, r3, #1
 800be6c:	f003 0301 	and.w	r3, r3, #1
 800be70:	2b00      	cmp	r3, #0
 800be72:	d031      	beq.n	800bed8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	085b      	lsrs	r3, r3, #1
 800be78:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d02b      	beq.n	800bed8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be84:	b29b      	uxth	r3, r3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d018      	beq.n	800bebc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	781a      	ldrb	r2, [r3, #0]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	3b01      	subs	r3, #1
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beb2:	3b01      	subs	r3, #1
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	851a      	strh	r2, [r3, #40]	; 0x28
 800beba:	e00d      	b.n	800bed8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bec2:	d002      	beq.n	800beca <I2C_Slave_ISR_IT+0x1e8>
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d106      	bne.n	800bed8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f000 fcd5 	bl	800c87a <I2C_ITSlaveSeqCplt>
 800bed0:	e002      	b.n	800bed8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800bed2:	bf00      	nop
 800bed4:	e000      	b.n	800bed8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800bed6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3718      	adds	r7, #24
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b088      	sub	sp, #32
 800beee:	af02      	add	r7, sp, #8
 800bef0:	60f8      	str	r0, [r7, #12]
 800bef2:	60b9      	str	r1, [r7, #8]
 800bef4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800befc:	2b01      	cmp	r3, #1
 800befe:	d101      	bne.n	800bf04 <I2C_Master_ISR_DMA+0x1a>
 800bf00:	2302      	movs	r3, #2
 800bf02:	e0e1      	b.n	800c0c8 <I2C_Master_ISR_DMA+0x1de>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	091b      	lsrs	r3, r3, #4
 800bf10:	f003 0301 	and.w	r3, r3, #1
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d017      	beq.n	800bf48 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	091b      	lsrs	r3, r3, #4
 800bf1c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d011      	beq.n	800bf48 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2210      	movs	r2, #16
 800bf2a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf30:	f043 0204 	orr.w	r2, r3, #4
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bf38:	2120      	movs	r1, #32
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f001 fbd2 	bl	800d6e4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f001 f98a 	bl	800d25a <I2C_Flush_TXDR>
 800bf46:	e0ba      	b.n	800c0be <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	09db      	lsrs	r3, r3, #7
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d072      	beq.n	800c03a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	099b      	lsrs	r3, r3, #6
 800bf58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d06c      	beq.n	800c03a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf6e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d04e      	beq.n	800c018 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf86:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	2bff      	cmp	r3, #255	; 0xff
 800bf90:	d906      	bls.n	800bfa0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	22ff      	movs	r2, #255	; 0xff
 800bf96:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800bf98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	e010      	b.n	800bfc2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bfb2:	d003      	beq.n	800bfbc <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	e002      	b.n	800bfc2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800bfbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfc0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	8a79      	ldrh	r1, [r7, #18]
 800bfca:	2300      	movs	r3, #0
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f001 fb55 	bl	800d680 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b22      	cmp	r3, #34	; 0x22
 800bff2:	d108      	bne.n	800c006 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c002:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c004:	e05b      	b.n	800c0be <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c014:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c016:	e052      	b.n	800c0be <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c026:	d003      	beq.n	800c030 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 fbe9 	bl	800c800 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c02e:	e046      	b.n	800c0be <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c030:	2140      	movs	r1, #64	; 0x40
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f000 fffa 	bl	800d02c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c038:	e041      	b.n	800c0be <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	099b      	lsrs	r3, r3, #6
 800c03e:	f003 0301 	and.w	r3, r3, #1
 800c042:	2b00      	cmp	r3, #0
 800c044:	d029      	beq.n	800c09a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	099b      	lsrs	r3, r3, #6
 800c04a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d023      	beq.n	800c09a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c056:	b29b      	uxth	r3, r3
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d119      	bne.n	800c090 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c06a:	d027      	beq.n	800c0bc <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c070:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c074:	d108      	bne.n	800c088 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c084:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c086:	e019      	b.n	800c0bc <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 fbb9 	bl	800c800 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c08e:	e015      	b.n	800c0bc <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c090:	2140      	movs	r1, #64	; 0x40
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f000 ffca 	bl	800d02c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c098:	e010      	b.n	800c0bc <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	095b      	lsrs	r3, r3, #5
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00b      	beq.n	800c0be <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	095b      	lsrs	r3, r3, #5
 800c0aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d005      	beq.n	800c0be <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c0b2:	68b9      	ldr	r1, [r7, #8]
 800c0b4:	68f8      	ldr	r0, [r7, #12]
 800c0b6:	f000 fc3f 	bl	800c938 <I2C_ITMasterCplt>
 800c0ba:	e000      	b.n	800c0be <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c0bc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af02      	add	r7, sp, #8
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c0dc:	4b92      	ldr	r3, [pc, #584]	; (800c328 <I2C_Mem_ISR_DMA+0x258>)
 800c0de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d101      	bne.n	800c0ee <I2C_Mem_ISR_DMA+0x1e>
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	e118      	b.n	800c320 <I2C_Mem_ISR_DMA+0x250>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	091b      	lsrs	r3, r3, #4
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d017      	beq.n	800c132 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	091b      	lsrs	r3, r3, #4
 800c106:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d011      	beq.n	800c132 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2210      	movs	r2, #16
 800c114:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c11a:	f043 0204 	orr.w	r2, r3, #4
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c122:	2120      	movs	r1, #32
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f001 fadd 	bl	800d6e4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f001 f895 	bl	800d25a <I2C_Flush_TXDR>
 800c130:	e0f1      	b.n	800c316 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	085b      	lsrs	r3, r3, #1
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00f      	beq.n	800c15e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	085b      	lsrs	r3, r3, #1
 800c142:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c146:	2b00      	cmp	r3, #0
 800c148:	d009      	beq.n	800c15e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c152:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c15a:	651a      	str	r2, [r3, #80]	; 0x50
 800c15c:	e0db      	b.n	800c316 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	09db      	lsrs	r3, r3, #7
 800c162:	f003 0301 	and.w	r3, r3, #1
 800c166:	2b00      	cmp	r3, #0
 800c168:	d060      	beq.n	800c22c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	099b      	lsrs	r3, r3, #6
 800c16e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c172:	2b00      	cmp	r3, #0
 800c174:	d05a      	beq.n	800c22c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c176:	2101      	movs	r1, #1
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f001 fb37 	bl	800d7ec <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c17e:	2110      	movs	r1, #16
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	f001 faaf 	bl	800d6e4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d048      	beq.n	800c222 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c194:	b29b      	uxth	r3, r3
 800c196:	2bff      	cmp	r3, #255	; 0xff
 800c198:	d910      	bls.n	800c1bc <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	22ff      	movs	r2, #255	; 0xff
 800c19e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a4:	b299      	uxth	r1, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1aa:	b2da      	uxtb	r2, r3
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f001 fa63 	bl	800d680 <I2C_TransferConfig>
 800c1ba:	e011      	b.n	800c1e0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ca:	b299      	uxth	r1, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f001 fa50 	bl	800d680 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b22      	cmp	r3, #34	; 0x22
 800c1fc:	d108      	bne.n	800c210 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c20c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c20e:	e082      	b.n	800c316 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c21e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c220:	e079      	b.n	800c316 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c222:	2140      	movs	r1, #64	; 0x40
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 ff01 	bl	800d02c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c22a:	e074      	b.n	800c316 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	099b      	lsrs	r3, r3, #6
 800c230:	f003 0301 	and.w	r3, r3, #1
 800c234:	2b00      	cmp	r3, #0
 800c236:	d05e      	beq.n	800c2f6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	099b      	lsrs	r3, r3, #6
 800c23c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c240:	2b00      	cmp	r3, #0
 800c242:	d058      	beq.n	800c2f6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c244:	2101      	movs	r1, #1
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f001 fad0 	bl	800d7ec <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c24c:	2110      	movs	r1, #16
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f001 fa48 	bl	800d6e4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	2b22      	cmp	r3, #34	; 0x22
 800c25e:	d101      	bne.n	800c264 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c260:	4b32      	ldr	r3, [pc, #200]	; (800c32c <I2C_Mem_ISR_DMA+0x25c>)
 800c262:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c268:	b29b      	uxth	r3, r3
 800c26a:	2bff      	cmp	r3, #255	; 0xff
 800c26c:	d910      	bls.n	800c290 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	22ff      	movs	r2, #255	; 0xff
 800c272:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c278:	b299      	uxth	r1, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c27e:	b2da      	uxtb	r2, r3
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f001 f9f9 	bl	800d680 <I2C_TransferConfig>
 800c28e:	e011      	b.n	800c2b4 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c294:	b29a      	uxth	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c29e:	b299      	uxth	r1, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f001 f9e6 	bl	800d680 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b22      	cmp	r3, #34	; 0x22
 800c2d0:	d108      	bne.n	800c2e4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2e0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c2e2:	e018      	b.n	800c316 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2f2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c2f4:	e00f      	b.n	800c316 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	095b      	lsrs	r3, r3, #5
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d009      	beq.n	800c316 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	095b      	lsrs	r3, r3, #5
 800c306:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d003      	beq.n	800c316 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c30e:	68b9      	ldr	r1, [r7, #8]
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 fb11 	bl	800c938 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	80002000 	.word	0x80002000
 800c32c:	80002400 	.word	0x80002400

0800c330 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c340:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c342:	2300      	movs	r3, #0
 800c344:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d101      	bne.n	800c354 <I2C_Slave_ISR_DMA+0x24>
 800c350:	2302      	movs	r3, #2
 800c352:	e1cc      	b.n	800c6ee <I2C_Slave_ISR_DMA+0x3be>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	095b      	lsrs	r3, r3, #5
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00a      	beq.n	800c37e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	095b      	lsrs	r3, r3, #5
 800c36c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c370:	2b00      	cmp	r3, #0
 800c372:	d004      	beq.n	800c37e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c374:	68b9      	ldr	r1, [r7, #8]
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f000 fba8 	bl	800cacc <I2C_ITSlaveCplt>
 800c37c:	e1b2      	b.n	800c6e4 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	091b      	lsrs	r3, r3, #4
 800c382:	f003 0301 	and.w	r3, r3, #1
 800c386:	2b00      	cmp	r3, #0
 800c388:	f000 819c 	beq.w	800c6c4 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	091b      	lsrs	r3, r3, #4
 800c390:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c394:	2b00      	cmp	r3, #0
 800c396:	f000 8195 	beq.w	800c6c4 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	0b9b      	lsrs	r3, r3, #14
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d106      	bne.n	800c3b4 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	0bdb      	lsrs	r3, r3, #15
 800c3aa:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f000 8181 	beq.w	800c6b6 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d07c      	beq.n	800c4b6 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	0bdb      	lsrs	r3, r3, #15
 800c3c0:	f003 0301 	and.w	r3, r3, #1
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d076      	beq.n	800c4b6 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a75      	ldr	r2, [pc, #468]	; (800c5a4 <I2C_Slave_ISR_DMA+0x274>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d059      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a73      	ldr	r2, [pc, #460]	; (800c5a8 <I2C_Slave_ISR_DMA+0x278>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d053      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a71      	ldr	r2, [pc, #452]	; (800c5ac <I2C_Slave_ISR_DMA+0x27c>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d04d      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a6f      	ldr	r2, [pc, #444]	; (800c5b0 <I2C_Slave_ISR_DMA+0x280>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d047      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a6d      	ldr	r2, [pc, #436]	; (800c5b4 <I2C_Slave_ISR_DMA+0x284>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d041      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a6b      	ldr	r2, [pc, #428]	; (800c5b8 <I2C_Slave_ISR_DMA+0x288>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d03b      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a69      	ldr	r2, [pc, #420]	; (800c5bc <I2C_Slave_ISR_DMA+0x28c>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d035      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a67      	ldr	r2, [pc, #412]	; (800c5c0 <I2C_Slave_ISR_DMA+0x290>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d02f      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a65      	ldr	r2, [pc, #404]	; (800c5c4 <I2C_Slave_ISR_DMA+0x294>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d029      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a63      	ldr	r2, [pc, #396]	; (800c5c8 <I2C_Slave_ISR_DMA+0x298>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d023      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a61      	ldr	r2, [pc, #388]	; (800c5cc <I2C_Slave_ISR_DMA+0x29c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d01d      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a5f      	ldr	r2, [pc, #380]	; (800c5d0 <I2C_Slave_ISR_DMA+0x2a0>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d017      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a5d      	ldr	r2, [pc, #372]	; (800c5d4 <I2C_Slave_ISR_DMA+0x2a4>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d011      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a5b      	ldr	r2, [pc, #364]	; (800c5d8 <I2C_Slave_ISR_DMA+0x2a8>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d00b      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a59      	ldr	r2, [pc, #356]	; (800c5dc <I2C_Slave_ISR_DMA+0x2ac>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d005      	beq.n	800c488 <I2C_Slave_ISR_DMA+0x158>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a57      	ldr	r2, [pc, #348]	; (800c5e0 <I2C_Slave_ISR_DMA+0x2b0>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d109      	bne.n	800c49c <I2C_Slave_ISR_DMA+0x16c>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	bf0c      	ite	eq
 800c494:	2301      	moveq	r3, #1
 800c496:	2300      	movne	r3, #0
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	e008      	b.n	800c4ae <I2C_Slave_ISR_DMA+0x17e>
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	bf0c      	ite	eq
 800c4a8:	2301      	moveq	r3, #1
 800c4aa:	2300      	movne	r3, #0
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 809f 	beq.w	800c5fe <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	0b9b      	lsrs	r3, r3, #14
 800c4c4:	f003 0301 	and.w	r3, r3, #1
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 8098 	beq.w	800c5fe <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a33      	ldr	r2, [pc, #204]	; (800c5a4 <I2C_Slave_ISR_DMA+0x274>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d059      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a31      	ldr	r2, [pc, #196]	; (800c5a8 <I2C_Slave_ISR_DMA+0x278>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d053      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a2f      	ldr	r2, [pc, #188]	; (800c5ac <I2C_Slave_ISR_DMA+0x27c>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d04d      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a2d      	ldr	r2, [pc, #180]	; (800c5b0 <I2C_Slave_ISR_DMA+0x280>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d047      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a2b      	ldr	r2, [pc, #172]	; (800c5b4 <I2C_Slave_ISR_DMA+0x284>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d041      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a29      	ldr	r2, [pc, #164]	; (800c5b8 <I2C_Slave_ISR_DMA+0x288>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d03b      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a27      	ldr	r2, [pc, #156]	; (800c5bc <I2C_Slave_ISR_DMA+0x28c>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d035      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a25      	ldr	r2, [pc, #148]	; (800c5c0 <I2C_Slave_ISR_DMA+0x290>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d02f      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a23      	ldr	r2, [pc, #140]	; (800c5c4 <I2C_Slave_ISR_DMA+0x294>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d029      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a21      	ldr	r2, [pc, #132]	; (800c5c8 <I2C_Slave_ISR_DMA+0x298>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d023      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a1f      	ldr	r2, [pc, #124]	; (800c5cc <I2C_Slave_ISR_DMA+0x29c>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d01d      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a1d      	ldr	r2, [pc, #116]	; (800c5d0 <I2C_Slave_ISR_DMA+0x2a0>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d017      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a1b      	ldr	r2, [pc, #108]	; (800c5d4 <I2C_Slave_ISR_DMA+0x2a4>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d011      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a19      	ldr	r2, [pc, #100]	; (800c5d8 <I2C_Slave_ISR_DMA+0x2a8>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d00b      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a17      	ldr	r2, [pc, #92]	; (800c5dc <I2C_Slave_ISR_DMA+0x2ac>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d005      	beq.n	800c58e <I2C_Slave_ISR_DMA+0x25e>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a15      	ldr	r2, [pc, #84]	; (800c5e0 <I2C_Slave_ISR_DMA+0x2b0>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d12a      	bne.n	800c5e4 <I2C_Slave_ISR_DMA+0x2b4>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	bf0c      	ite	eq
 800c59a:	2301      	moveq	r3, #1
 800c59c:	2300      	movne	r3, #0
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	e029      	b.n	800c5f6 <I2C_Slave_ISR_DMA+0x2c6>
 800c5a2:	bf00      	nop
 800c5a4:	40020010 	.word	0x40020010
 800c5a8:	40020028 	.word	0x40020028
 800c5ac:	40020040 	.word	0x40020040
 800c5b0:	40020058 	.word	0x40020058
 800c5b4:	40020070 	.word	0x40020070
 800c5b8:	40020088 	.word	0x40020088
 800c5bc:	400200a0 	.word	0x400200a0
 800c5c0:	400200b8 	.word	0x400200b8
 800c5c4:	40020410 	.word	0x40020410
 800c5c8:	40020428 	.word	0x40020428
 800c5cc:	40020440 	.word	0x40020440
 800c5d0:	40020458 	.word	0x40020458
 800c5d4:	40020470 	.word	0x40020470
 800c5d8:	40020488 	.word	0x40020488
 800c5dc:	400204a0 	.word	0x400204a0
 800c5e0:	400204b8 	.word	0x400204b8
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	bf0c      	ite	eq
 800c5f0:	2301      	moveq	r3, #1
 800c5f2:	2300      	movne	r3, #0
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d128      	bne.n	800c656 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b28      	cmp	r3, #40	; 0x28
 800c60e:	d108      	bne.n	800c622 <I2C_Slave_ISR_DMA+0x2f2>
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c616:	d104      	bne.n	800c622 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c618:	68b9      	ldr	r1, [r7, #8]
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f000 fcb0 	bl	800cf80 <I2C_ITListenCplt>
 800c620:	e048      	b.n	800c6b4 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b29      	cmp	r3, #41	; 0x29
 800c62c:	d10e      	bne.n	800c64c <I2C_Slave_ISR_DMA+0x31c>
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c634:	d00a      	beq.n	800c64c <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2210      	movs	r2, #16
 800c63c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f000 fe0b 	bl	800d25a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f000 f918 	bl	800c87a <I2C_ITSlaveSeqCplt>
 800c64a:	e033      	b.n	800c6b4 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2210      	movs	r2, #16
 800c652:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c654:	e034      	b.n	800c6c0 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2210      	movs	r2, #16
 800c65c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c662:	f043 0204 	orr.w	r2, r3, #4
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c670:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d003      	beq.n	800c680 <I2C_Slave_ISR_DMA+0x350>
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c67e:	d11f      	bne.n	800c6c0 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c680:	7dfb      	ldrb	r3, [r7, #23]
 800c682:	2b21      	cmp	r3, #33	; 0x21
 800c684:	d002      	beq.n	800c68c <I2C_Slave_ISR_DMA+0x35c>
 800c686:	7dfb      	ldrb	r3, [r7, #23]
 800c688:	2b29      	cmp	r3, #41	; 0x29
 800c68a:	d103      	bne.n	800c694 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2221      	movs	r2, #33	; 0x21
 800c690:	631a      	str	r2, [r3, #48]	; 0x30
 800c692:	e008      	b.n	800c6a6 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c694:	7dfb      	ldrb	r3, [r7, #23]
 800c696:	2b22      	cmp	r3, #34	; 0x22
 800c698:	d002      	beq.n	800c6a0 <I2C_Slave_ISR_DMA+0x370>
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	2b2a      	cmp	r3, #42	; 0x2a
 800c69e:	d102      	bne.n	800c6a6 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2222      	movs	r2, #34	; 0x22
 800c6a4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f000 fcbd 	bl	800d02c <I2C_ITError>
      if (treatdmanack == 1U)
 800c6b2:	e005      	b.n	800c6c0 <I2C_Slave_ISR_DMA+0x390>
 800c6b4:	e004      	b.n	800c6c0 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2210      	movs	r2, #16
 800c6bc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c6be:	e011      	b.n	800c6e4 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c6c0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c6c2:	e00f      	b.n	800c6e4 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	08db      	lsrs	r3, r3, #3
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d009      	beq.n	800c6e4 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	08db      	lsrs	r3, r3, #3
 800c6d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c6dc:	68b9      	ldr	r1, [r7, #8]
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	f000 f80a 	bl	800c6f8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3720      	adds	r7, #32
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop

0800c6f8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c70e:	2b28      	cmp	r3, #40	; 0x28
 800c710:	d16a      	bne.n	800c7e8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	0c1b      	lsrs	r3, r3, #16
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	0c1b      	lsrs	r3, r3, #16
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c730:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	b29b      	uxth	r3, r3
 800c73a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c73e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	b29b      	uxth	r3, r3
 800c748:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c74c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	2b02      	cmp	r3, #2
 800c754:	d138      	bne.n	800c7c8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c756:	897b      	ldrh	r3, [r7, #10]
 800c758:	09db      	lsrs	r3, r3, #7
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	89bb      	ldrh	r3, [r7, #12]
 800c75e:	4053      	eors	r3, r2
 800c760:	b29b      	uxth	r3, r3
 800c762:	f003 0306 	and.w	r3, r3, #6
 800c766:	2b00      	cmp	r3, #0
 800c768:	d11c      	bne.n	800c7a4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c76a:	897b      	ldrh	r3, [r7, #10]
 800c76c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d13b      	bne.n	800c7f8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2208      	movs	r2, #8
 800c78c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c796:	89ba      	ldrh	r2, [r7, #12]
 800c798:	7bfb      	ldrb	r3, [r7, #15]
 800c79a:	4619      	mov	r1, r3
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff f91e 	bl	800b9de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c7a2:	e029      	b.n	800c7f8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c7a4:	893b      	ldrh	r3, [r7, #8]
 800c7a6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c7a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f001 f81d 	bl	800d7ec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c7ba:	89ba      	ldrh	r2, [r7, #12]
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7ff f90c 	bl	800b9de <HAL_I2C_AddrCallback>
}
 800c7c6:	e017      	b.n	800c7f8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c7c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f001 f80d 	bl	800d7ec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c7da:	89ba      	ldrh	r2, [r7, #12]
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7ff f8fc 	bl	800b9de <HAL_I2C_AddrCallback>
}
 800c7e6:	e007      	b.n	800c7f8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2208      	movs	r2, #8
 800c7ee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c7f8:	bf00      	nop
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c816:	b2db      	uxtb	r3, r3
 800c818:	2b21      	cmp	r3, #33	; 0x21
 800c81a:	d115      	bne.n	800c848 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2220      	movs	r2, #32
 800c820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2211      	movs	r2, #17
 800c828:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c830:	2101      	movs	r1, #1
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 ffda 	bl	800d7ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7ff f8a4 	bl	800b98e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c846:	e014      	b.n	800c872 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2220      	movs	r2, #32
 800c84c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2212      	movs	r2, #18
 800c854:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c85c:	2102      	movs	r1, #2
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 ffc4 	bl	800d7ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff f898 	bl	800b9a2 <HAL_I2C_MasterRxCpltCallback>
}
 800c872:	bf00      	nop
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	0b9b      	lsrs	r3, r3, #14
 800c896:	f003 0301 	and.w	r3, r3, #1
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d008      	beq.n	800c8b0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8ac:	601a      	str	r2, [r3, #0]
 800c8ae:	e00d      	b.n	800c8cc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	0bdb      	lsrs	r3, r3, #15
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d007      	beq.n	800c8cc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c8ca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b29      	cmp	r3, #41	; 0x29
 800c8d6:	d112      	bne.n	800c8fe <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2228      	movs	r2, #40	; 0x28
 800c8dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2221      	movs	r2, #33	; 0x21
 800c8e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c8e6:	2101      	movs	r1, #1
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 ff7f 	bl	800d7ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7ff f85d 	bl	800b9b6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c8fc:	e017      	b.n	800c92e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b2a      	cmp	r3, #42	; 0x2a
 800c908:	d111      	bne.n	800c92e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2228      	movs	r2, #40	; 0x28
 800c90e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2222      	movs	r2, #34	; 0x22
 800c916:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c918:	2102      	movs	r1, #2
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 ff66 	bl	800d7ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7ff f84e 	bl	800b9ca <HAL_I2C_SlaveRxCpltCallback>
}
 800c92e:	bf00      	nop
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
	...

0800c938 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b086      	sub	sp, #24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2220      	movs	r2, #32
 800c94c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c954:	b2db      	uxtb	r3, r3
 800c956:	2b21      	cmp	r3, #33	; 0x21
 800c958:	d107      	bne.n	800c96a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c95a:	2101      	movs	r1, #1
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 ff45 	bl	800d7ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2211      	movs	r2, #17
 800c966:	631a      	str	r2, [r3, #48]	; 0x30
 800c968:	e00c      	b.n	800c984 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c970:	b2db      	uxtb	r3, r3
 800c972:	2b22      	cmp	r3, #34	; 0x22
 800c974:	d106      	bne.n	800c984 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c976:	2102      	movs	r1, #2
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 ff37 	bl	800d7ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2212      	movs	r2, #18
 800c982:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	6859      	ldr	r1, [r3, #4]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	4b4d      	ldr	r3, [pc, #308]	; (800cac4 <I2C_ITMasterCplt+0x18c>)
 800c990:	400b      	ands	r3, r1
 800c992:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a4a      	ldr	r2, [pc, #296]	; (800cac8 <I2C_ITMasterCplt+0x190>)
 800c99e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	091b      	lsrs	r3, r3, #4
 800c9a4:	f003 0301 	and.w	r3, r3, #1
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d009      	beq.n	800c9c0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2210      	movs	r2, #16
 800c9b2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9b8:	f043 0204 	orr.w	r2, r3, #4
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b60      	cmp	r3, #96	; 0x60
 800c9ca:	d10b      	bne.n	800c9e4 <I2C_ITMasterCplt+0xac>
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	089b      	lsrs	r3, r3, #2
 800c9d0:	f003 0301 	and.w	r3, r3, #1
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d005      	beq.n	800c9e4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 fc38 	bl	800d25a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ee:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b60      	cmp	r3, #96	; 0x60
 800c9fa:	d002      	beq.n	800ca02 <I2C_ITMasterCplt+0xca>
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d006      	beq.n	800ca10 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca06:	4619      	mov	r1, r3
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fb0f 	bl	800d02c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ca0e:	e054      	b.n	800caba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b21      	cmp	r3, #33	; 0x21
 800ca1a:	d124      	bne.n	800ca66 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2220      	movs	r2, #32
 800ca20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	2b40      	cmp	r3, #64	; 0x40
 800ca34:	d10b      	bne.n	800ca4e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7fe ffe1 	bl	800ba0e <HAL_I2C_MemTxCpltCallback>
}
 800ca4c:	e035      	b.n	800caba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7fe ff95 	bl	800b98e <HAL_I2C_MasterTxCpltCallback>
}
 800ca64:	e029      	b.n	800caba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	2b22      	cmp	r3, #34	; 0x22
 800ca70:	d123      	bne.n	800caba <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2220      	movs	r2, #32
 800ca76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b40      	cmp	r3, #64	; 0x40
 800ca8a:	d10b      	bne.n	800caa4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f7fe ffc0 	bl	800ba22 <HAL_I2C_MemRxCpltCallback>
}
 800caa2:	e00a      	b.n	800caba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f7fe ff74 	bl	800b9a2 <HAL_I2C_MasterRxCpltCallback>
}
 800caba:	bf00      	nop
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	fe00e800 	.word	0xfe00e800
 800cac8:	ffff0000 	.word	0xffff0000

0800cacc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caee:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2220      	movs	r2, #32
 800caf6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800caf8:	7afb      	ldrb	r3, [r7, #11]
 800cafa:	2b21      	cmp	r3, #33	; 0x21
 800cafc:	d002      	beq.n	800cb04 <I2C_ITSlaveCplt+0x38>
 800cafe:	7afb      	ldrb	r3, [r7, #11]
 800cb00:	2b29      	cmp	r3, #41	; 0x29
 800cb02:	d108      	bne.n	800cb16 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cb04:	f248 0101 	movw	r1, #32769	; 0x8001
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fe6f 	bl	800d7ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2221      	movs	r2, #33	; 0x21
 800cb12:	631a      	str	r2, [r3, #48]	; 0x30
 800cb14:	e019      	b.n	800cb4a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cb16:	7afb      	ldrb	r3, [r7, #11]
 800cb18:	2b22      	cmp	r3, #34	; 0x22
 800cb1a:	d002      	beq.n	800cb22 <I2C_ITSlaveCplt+0x56>
 800cb1c:	7afb      	ldrb	r3, [r7, #11]
 800cb1e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb20:	d108      	bne.n	800cb34 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cb22:	f248 0102 	movw	r1, #32770	; 0x8002
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 fe60 	bl	800d7ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2222      	movs	r2, #34	; 0x22
 800cb30:	631a      	str	r2, [r3, #48]	; 0x30
 800cb32:	e00a      	b.n	800cb4a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800cb34:	7afb      	ldrb	r3, [r7, #11]
 800cb36:	2b28      	cmp	r3, #40	; 0x28
 800cb38:	d107      	bne.n	800cb4a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cb3a:	f248 0103 	movw	r1, #32771	; 0x8003
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fe54 	bl	800d7ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	685a      	ldr	r2, [r3, #4]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb58:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6859      	ldr	r1, [r3, #4]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	4b80      	ldr	r3, [pc, #512]	; (800cd68 <I2C_ITSlaveCplt+0x29c>)
 800cb66:	400b      	ands	r3, r1
 800cb68:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 fb75 	bl	800d25a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	0b9b      	lsrs	r3, r3, #14
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d07a      	beq.n	800cc72 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cb8a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f000 8112 	beq.w	800cdba <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a73      	ldr	r2, [pc, #460]	; (800cd6c <I2C_ITSlaveCplt+0x2a0>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d059      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a71      	ldr	r2, [pc, #452]	; (800cd70 <I2C_ITSlaveCplt+0x2a4>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d053      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a6f      	ldr	r2, [pc, #444]	; (800cd74 <I2C_ITSlaveCplt+0x2a8>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d04d      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a6d      	ldr	r2, [pc, #436]	; (800cd78 <I2C_ITSlaveCplt+0x2ac>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d047      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a6b      	ldr	r2, [pc, #428]	; (800cd7c <I2C_ITSlaveCplt+0x2b0>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d041      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a69      	ldr	r2, [pc, #420]	; (800cd80 <I2C_ITSlaveCplt+0x2b4>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d03b      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a67      	ldr	r2, [pc, #412]	; (800cd84 <I2C_ITSlaveCplt+0x2b8>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d035      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a65      	ldr	r2, [pc, #404]	; (800cd88 <I2C_ITSlaveCplt+0x2bc>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d02f      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a63      	ldr	r2, [pc, #396]	; (800cd8c <I2C_ITSlaveCplt+0x2c0>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d029      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a61      	ldr	r2, [pc, #388]	; (800cd90 <I2C_ITSlaveCplt+0x2c4>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d023      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a5f      	ldr	r2, [pc, #380]	; (800cd94 <I2C_ITSlaveCplt+0x2c8>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d01d      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a5d      	ldr	r2, [pc, #372]	; (800cd98 <I2C_ITSlaveCplt+0x2cc>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d017      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a5b      	ldr	r2, [pc, #364]	; (800cd9c <I2C_ITSlaveCplt+0x2d0>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d011      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a59      	ldr	r2, [pc, #356]	; (800cda0 <I2C_ITSlaveCplt+0x2d4>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d00b      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a57      	ldr	r2, [pc, #348]	; (800cda4 <I2C_ITSlaveCplt+0x2d8>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d005      	beq.n	800cc56 <I2C_ITSlaveCplt+0x18a>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a55      	ldr	r2, [pc, #340]	; (800cda8 <I2C_ITSlaveCplt+0x2dc>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d105      	bne.n	800cc62 <I2C_ITSlaveCplt+0x196>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	e004      	b.n	800cc6c <I2C_ITSlaveCplt+0x1a0>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	8553      	strh	r3, [r2, #42]	; 0x2a
 800cc70:	e0a3      	b.n	800cdba <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	0bdb      	lsrs	r3, r3, #15
 800cc76:	f003 0301 	and.w	r3, r3, #1
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f000 809d 	beq.w	800cdba <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc8e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f000 8090 	beq.w	800cdba <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a32      	ldr	r2, [pc, #200]	; (800cd6c <I2C_ITSlaveCplt+0x2a0>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d059      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a30      	ldr	r2, [pc, #192]	; (800cd70 <I2C_ITSlaveCplt+0x2a4>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d053      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a2e      	ldr	r2, [pc, #184]	; (800cd74 <I2C_ITSlaveCplt+0x2a8>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d04d      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a2c      	ldr	r2, [pc, #176]	; (800cd78 <I2C_ITSlaveCplt+0x2ac>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d047      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a2a      	ldr	r2, [pc, #168]	; (800cd7c <I2C_ITSlaveCplt+0x2b0>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d041      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a28      	ldr	r2, [pc, #160]	; (800cd80 <I2C_ITSlaveCplt+0x2b4>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d03b      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a26      	ldr	r2, [pc, #152]	; (800cd84 <I2C_ITSlaveCplt+0x2b8>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d035      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a24      	ldr	r2, [pc, #144]	; (800cd88 <I2C_ITSlaveCplt+0x2bc>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d02f      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a22      	ldr	r2, [pc, #136]	; (800cd8c <I2C_ITSlaveCplt+0x2c0>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d029      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a20      	ldr	r2, [pc, #128]	; (800cd90 <I2C_ITSlaveCplt+0x2c4>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d023      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a1e      	ldr	r2, [pc, #120]	; (800cd94 <I2C_ITSlaveCplt+0x2c8>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d01d      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a1c      	ldr	r2, [pc, #112]	; (800cd98 <I2C_ITSlaveCplt+0x2cc>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d017      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a1a      	ldr	r2, [pc, #104]	; (800cd9c <I2C_ITSlaveCplt+0x2d0>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d011      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a18      	ldr	r2, [pc, #96]	; (800cda0 <I2C_ITSlaveCplt+0x2d4>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d00b      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a16      	ldr	r2, [pc, #88]	; (800cda4 <I2C_ITSlaveCplt+0x2d8>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d005      	beq.n	800cd5a <I2C_ITSlaveCplt+0x28e>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a14      	ldr	r2, [pc, #80]	; (800cda8 <I2C_ITSlaveCplt+0x2dc>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d128      	bne.n	800cdac <I2C_ITSlaveCplt+0x2e0>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	e027      	b.n	800cdb6 <I2C_ITSlaveCplt+0x2ea>
 800cd66:	bf00      	nop
 800cd68:	fe00e800 	.word	0xfe00e800
 800cd6c:	40020010 	.word	0x40020010
 800cd70:	40020028 	.word	0x40020028
 800cd74:	40020040 	.word	0x40020040
 800cd78:	40020058 	.word	0x40020058
 800cd7c:	40020070 	.word	0x40020070
 800cd80:	40020088 	.word	0x40020088
 800cd84:	400200a0 	.word	0x400200a0
 800cd88:	400200b8 	.word	0x400200b8
 800cd8c:	40020410 	.word	0x40020410
 800cd90:	40020428 	.word	0x40020428
 800cd94:	40020440 	.word	0x40020440
 800cd98:	40020458 	.word	0x40020458
 800cd9c:	40020470 	.word	0x40020470
 800cda0:	40020488 	.word	0x40020488
 800cda4:	400204a0 	.word	0x400204a0
 800cda8:	400204b8 	.word	0x400204b8
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	089b      	lsrs	r3, r3, #2
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d020      	beq.n	800ce08 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f023 0304 	bic.w	r3, r3, #4
 800cdcc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	b2d2      	uxtb	r2, r2
 800cdda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde0:	1c5a      	adds	r2, r3, #1
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00c      	beq.n	800ce08 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	3b01      	subs	r3, #1
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d005      	beq.n	800ce1e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce16:	f043 0204 	orr.w	r2, r3, #4
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	091b      	lsrs	r3, r3, #4
 800ce22:	f003 0301 	and.w	r3, r3, #1
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d04a      	beq.n	800cec0 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	091b      	lsrs	r3, r3, #4
 800ce2e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d044      	beq.n	800cec0 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d128      	bne.n	800ce92 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	2b28      	cmp	r3, #40	; 0x28
 800ce4a:	d108      	bne.n	800ce5e <I2C_ITSlaveCplt+0x392>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce52:	d104      	bne.n	800ce5e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ce54:	6979      	ldr	r1, [r7, #20]
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 f892 	bl	800cf80 <I2C_ITListenCplt>
 800ce5c:	e030      	b.n	800cec0 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b29      	cmp	r3, #41	; 0x29
 800ce68:	d10e      	bne.n	800ce88 <I2C_ITSlaveCplt+0x3bc>
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce70:	d00a      	beq.n	800ce88 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2210      	movs	r2, #16
 800ce78:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 f9ed 	bl	800d25a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f7ff fcfa 	bl	800c87a <I2C_ITSlaveSeqCplt>
 800ce86:	e01b      	b.n	800cec0 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2210      	movs	r2, #16
 800ce8e:	61da      	str	r2, [r3, #28]
 800ce90:	e016      	b.n	800cec0 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2210      	movs	r2, #16
 800ce98:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce9e:	f043 0204 	orr.w	r2, r3, #4
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <I2C_ITSlaveCplt+0x3e8>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ceb2:	d105      	bne.n	800cec0 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb8:	4619      	mov	r1, r3
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f8b6 	bl	800d02c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d010      	beq.n	800cef8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceda:	4619      	mov	r1, r3
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 f8a5 	bl	800d02c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	2b28      	cmp	r3, #40	; 0x28
 800ceec:	d141      	bne.n	800cf72 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ceee:	6979      	ldr	r1, [r7, #20]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 f845 	bl	800cf80 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cef6:	e03c      	b.n	800cf72 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cf00:	d014      	beq.n	800cf2c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7ff fcb9 	bl	800c87a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a1c      	ldr	r2, [pc, #112]	; (800cf7c <I2C_ITSlaveCplt+0x4b0>)
 800cf0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2220      	movs	r2, #32
 800cf12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f7fe fd68 	bl	800b9fa <HAL_I2C_ListenCpltCallback>
}
 800cf2a:	e022      	b.n	800cf72 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	2b22      	cmp	r3, #34	; 0x22
 800cf36:	d10e      	bne.n	800cf56 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2220      	movs	r2, #32
 800cf3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7fe fd3b 	bl	800b9ca <HAL_I2C_SlaveRxCpltCallback>
}
 800cf54:	e00d      	b.n	800cf72 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2220      	movs	r2, #32
 800cf5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7fe fd22 	bl	800b9b6 <HAL_I2C_SlaveTxCpltCallback>
}
 800cf72:	bf00      	nop
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	ffff0000 	.word	0xffff0000

0800cf80 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a26      	ldr	r2, [pc, #152]	; (800d028 <I2C_ITListenCplt+0xa8>)
 800cf8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2220      	movs	r2, #32
 800cf9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	089b      	lsrs	r3, r3, #2
 800cfb0:	f003 0301 	and.w	r3, r3, #1
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d022      	beq.n	800cffe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc2:	b2d2      	uxtb	r2, r2
 800cfc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d012      	beq.n	800cffe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	3b01      	subs	r3, #1
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cff6:	f043 0204 	orr.w	r2, r3, #4
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cffe:	f248 0103 	movw	r1, #32771	; 0x8003
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 fbf2 	bl	800d7ec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2210      	movs	r2, #16
 800d00e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7fe fcee 	bl	800b9fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d01e:	bf00      	nop
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	ffff0000 	.word	0xffff0000

0800d02c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d03c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4a6d      	ldr	r2, [pc, #436]	; (800d200 <I2C_ITError+0x1d4>)
 800d04a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	431a      	orrs	r2, r3
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
 800d060:	2b28      	cmp	r3, #40	; 0x28
 800d062:	d005      	beq.n	800d070 <I2C_ITError+0x44>
 800d064:	7bfb      	ldrb	r3, [r7, #15]
 800d066:	2b29      	cmp	r3, #41	; 0x29
 800d068:	d002      	beq.n	800d070 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d06a:	7bfb      	ldrb	r3, [r7, #15]
 800d06c:	2b2a      	cmp	r3, #42	; 0x2a
 800d06e:	d10b      	bne.n	800d088 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d070:	2103      	movs	r1, #3
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fbba 	bl	800d7ec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2228      	movs	r2, #40	; 0x28
 800d07c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a60      	ldr	r2, [pc, #384]	; (800d204 <I2C_ITError+0x1d8>)
 800d084:	635a      	str	r2, [r3, #52]	; 0x34
 800d086:	e030      	b.n	800d0ea <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d088:	f248 0103 	movw	r1, #32771	; 0x8003
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fbad 	bl	800d7ec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f8e1 	bl	800d25a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b60      	cmp	r3, #96	; 0x60
 800d0a2:	d01f      	beq.n	800d0e4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2220      	movs	r2, #32
 800d0a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	f003 0320 	and.w	r3, r3, #32
 800d0b6:	2b20      	cmp	r3, #32
 800d0b8:	d114      	bne.n	800d0e4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	f003 0310 	and.w	r3, r3, #16
 800d0c4:	2b10      	cmp	r3, #16
 800d0c6:	d109      	bne.n	800d0dc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2210      	movs	r2, #16
 800d0ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0d4:	f043 0204 	orr.w	r2, r3, #4
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2220      	movs	r2, #32
 800d0e2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d039      	beq.n	800d16c <I2C_ITError+0x140>
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2b11      	cmp	r3, #17
 800d0fc:	d002      	beq.n	800d104 <I2C_ITError+0xd8>
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	2b21      	cmp	r3, #33	; 0x21
 800d102:	d133      	bne.n	800d16c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d10e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d112:	d107      	bne.n	800d124 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d122:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d128:	4618      	mov	r0, r3
 800d12a:	f7fd f857 	bl	800a1dc <HAL_DMA_GetState>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b01      	cmp	r3, #1
 800d132:	d017      	beq.n	800d164 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d138:	4a33      	ldr	r2, [pc, #204]	; (800d208 <I2C_ITError+0x1dc>)
 800d13a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d148:	4618      	mov	r0, r3
 800d14a:	f7fb fed7 	bl	8008efc <HAL_DMA_Abort_IT>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d04d      	beq.n	800d1f0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d15e:	4610      	mov	r0, r2
 800d160:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d162:	e045      	b.n	800d1f0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f851 	bl	800d20c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d16a:	e041      	b.n	800d1f0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d170:	2b00      	cmp	r3, #0
 800d172:	d039      	beq.n	800d1e8 <I2C_ITError+0x1bc>
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b12      	cmp	r3, #18
 800d178:	d002      	beq.n	800d180 <I2C_ITError+0x154>
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	2b22      	cmp	r3, #34	; 0x22
 800d17e:	d133      	bne.n	800d1e8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d18a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d18e:	d107      	bne.n	800d1a0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d19e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fd f819 	bl	800a1dc <HAL_DMA_GetState>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d017      	beq.n	800d1e0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b4:	4a14      	ldr	r2, [pc, #80]	; (800d208 <I2C_ITError+0x1dc>)
 800d1b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fb fe99 	bl	8008efc <HAL_DMA_Abort_IT>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d011      	beq.n	800d1f4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d1da:	4610      	mov	r0, r2
 800d1dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1de:	e009      	b.n	800d1f4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f813 	bl	800d20c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1e6:	e005      	b.n	800d1f4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f80f 	bl	800d20c <I2C_TreatErrorCallback>
  }
}
 800d1ee:	e002      	b.n	800d1f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d1f0:	bf00      	nop
 800d1f2:	e000      	b.n	800d1f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1f4:	bf00      	nop
}
 800d1f6:	bf00      	nop
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	ffff0000 	.word	0xffff0000
 800d204:	0800bce3 	.word	0x0800bce3
 800d208:	0800d645 	.word	0x0800d645

0800d20c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	2b60      	cmp	r3, #96	; 0x60
 800d21e:	d10e      	bne.n	800d23e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2220      	movs	r2, #32
 800d224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f7fe fc07 	bl	800ba4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d23c:	e009      	b.n	800d252 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7fe fbf2 	bl	800ba36 <HAL_I2C_ErrorCallback>
}
 800d252:	bf00      	nop
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d25a:	b480      	push	{r7}
 800d25c:	b083      	sub	sp, #12
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	699b      	ldr	r3, [r3, #24]
 800d268:	f003 0302 	and.w	r3, r3, #2
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	d103      	bne.n	800d278 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2200      	movs	r2, #0
 800d276:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	699b      	ldr	r3, [r3, #24]
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	2b01      	cmp	r3, #1
 800d284:	d007      	beq.n	800d296 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	699a      	ldr	r2, [r3, #24]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f042 0201 	orr.w	r2, r2, #1
 800d294:	619a      	str	r2, [r3, #24]
  }
}
 800d296:	bf00      	nop
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ae:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d2be:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d104      	bne.n	800d2d4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d2ca:	2120      	movs	r1, #32
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f000 fa09 	bl	800d6e4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d2d2:	e02d      	b.n	800d330 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d2dc:	441a      	add	r2, r3
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	2bff      	cmp	r3, #255	; 0xff
 800d2ea:	d903      	bls.n	800d2f4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	22ff      	movs	r2, #255	; 0xff
 800d2f0:	851a      	strh	r2, [r3, #40]	; 0x28
 800d2f2:	e004      	b.n	800d2fe <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d306:	4619      	mov	r1, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	3328      	adds	r3, #40	; 0x28
 800d30e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d314:	f7fb f86a 	bl	80083ec <HAL_DMA_Start_IT>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d004      	beq.n	800d328 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d31e:	2110      	movs	r1, #16
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f7ff fe83 	bl	800d02c <I2C_ITError>
}
 800d326:	e003      	b.n	800d330 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d328:	2140      	movs	r1, #64	; 0x40
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f000 f9da 	bl	800d6e4 <I2C_Enable_IRQ>
}
 800d330:	bf00      	nop
 800d332:	3710      	adds	r7, #16
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d344:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d354:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d104      	bne.n	800d36a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d360:	2120      	movs	r1, #32
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f000 f9be 	bl	800d6e4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d368:	e02d      	b.n	800d3c6 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36e:	68fa      	ldr	r2, [r7, #12]
 800d370:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d372:	441a      	add	r2, r3
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	2bff      	cmp	r3, #255	; 0xff
 800d380:	d903      	bls.n	800d38a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	22ff      	movs	r2, #255	; 0xff
 800d386:	851a      	strh	r2, [r3, #40]	; 0x28
 800d388:	e004      	b.n	800d394 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d38e:	b29a      	uxth	r2, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	3324      	adds	r3, #36	; 0x24
 800d39e:	4619      	mov	r1, r3
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a4:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d3aa:	f7fb f81f 	bl	80083ec <HAL_DMA_Start_IT>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d004      	beq.n	800d3be <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d3b4:	2110      	movs	r1, #16
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f7ff fe38 	bl	800d02c <I2C_ITError>
}
 800d3bc:	e003      	b.n	800d3c6 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d3be:	2140      	movs	r1, #64	; 0x40
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 f98f 	bl	800d6e4 <I2C_Enable_IRQ>
}
 800d3c6:	bf00      	nop
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d076      	beq.n	800d4d8 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a71      	ldr	r2, [pc, #452]	; (800d5b8 <I2C_DMAError+0x1e8>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d059      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a6f      	ldr	r2, [pc, #444]	; (800d5bc <I2C_DMAError+0x1ec>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d053      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a6d      	ldr	r2, [pc, #436]	; (800d5c0 <I2C_DMAError+0x1f0>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d04d      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a6b      	ldr	r2, [pc, #428]	; (800d5c4 <I2C_DMAError+0x1f4>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d047      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a69      	ldr	r2, [pc, #420]	; (800d5c8 <I2C_DMAError+0x1f8>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d041      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a67      	ldr	r2, [pc, #412]	; (800d5cc <I2C_DMAError+0x1fc>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d03b      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a65      	ldr	r2, [pc, #404]	; (800d5d0 <I2C_DMAError+0x200>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d035      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a63      	ldr	r2, [pc, #396]	; (800d5d4 <I2C_DMAError+0x204>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d02f      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a61      	ldr	r2, [pc, #388]	; (800d5d8 <I2C_DMAError+0x208>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d029      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a5f      	ldr	r2, [pc, #380]	; (800d5dc <I2C_DMAError+0x20c>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d023      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a5d      	ldr	r2, [pc, #372]	; (800d5e0 <I2C_DMAError+0x210>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d01d      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a5b      	ldr	r2, [pc, #364]	; (800d5e4 <I2C_DMAError+0x214>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d017      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a59      	ldr	r2, [pc, #356]	; (800d5e8 <I2C_DMAError+0x218>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d011      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a57      	ldr	r2, [pc, #348]	; (800d5ec <I2C_DMAError+0x21c>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d00b      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a55      	ldr	r2, [pc, #340]	; (800d5f0 <I2C_DMAError+0x220>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d005      	beq.n	800d4aa <I2C_DMAError+0xda>
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a53      	ldr	r2, [pc, #332]	; (800d5f4 <I2C_DMAError+0x224>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d109      	bne.n	800d4be <I2C_DMAError+0xee>
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	bf0c      	ite	eq
 800d4b6:	2301      	moveq	r3, #1
 800d4b8:	2300      	movne	r3, #0
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	e008      	b.n	800d4d0 <I2C_DMAError+0x100>
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	bf0c      	ite	eq
 800d4ca:	2301      	moveq	r3, #1
 800d4cc:	2300      	movne	r3, #0
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d001      	beq.n	800d4d8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 8098 	beq.w	800d612 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a33      	ldr	r2, [pc, #204]	; (800d5b8 <I2C_DMAError+0x1e8>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d059      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a31      	ldr	r2, [pc, #196]	; (800d5bc <I2C_DMAError+0x1ec>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d053      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a2f      	ldr	r2, [pc, #188]	; (800d5c0 <I2C_DMAError+0x1f0>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d04d      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a2d      	ldr	r2, [pc, #180]	; (800d5c4 <I2C_DMAError+0x1f4>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d047      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a2b      	ldr	r2, [pc, #172]	; (800d5c8 <I2C_DMAError+0x1f8>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d041      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a29      	ldr	r2, [pc, #164]	; (800d5cc <I2C_DMAError+0x1fc>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d03b      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a27      	ldr	r2, [pc, #156]	; (800d5d0 <I2C_DMAError+0x200>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d035      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a25      	ldr	r2, [pc, #148]	; (800d5d4 <I2C_DMAError+0x204>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d02f      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a23      	ldr	r2, [pc, #140]	; (800d5d8 <I2C_DMAError+0x208>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d029      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a21      	ldr	r2, [pc, #132]	; (800d5dc <I2C_DMAError+0x20c>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d023      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a1f      	ldr	r2, [pc, #124]	; (800d5e0 <I2C_DMAError+0x210>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d01d      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a1d      	ldr	r2, [pc, #116]	; (800d5e4 <I2C_DMAError+0x214>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d017      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a1b      	ldr	r2, [pc, #108]	; (800d5e8 <I2C_DMAError+0x218>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d011      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a19      	ldr	r2, [pc, #100]	; (800d5ec <I2C_DMAError+0x21c>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d00b      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a17      	ldr	r2, [pc, #92]	; (800d5f0 <I2C_DMAError+0x220>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d005      	beq.n	800d5a2 <I2C_DMAError+0x1d2>
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a15      	ldr	r2, [pc, #84]	; (800d5f4 <I2C_DMAError+0x224>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d12a      	bne.n	800d5f8 <I2C_DMAError+0x228>
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bf0c      	ite	eq
 800d5ae:	2301      	moveq	r3, #1
 800d5b0:	2300      	movne	r3, #0
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	e029      	b.n	800d60a <I2C_DMAError+0x23a>
 800d5b6:	bf00      	nop
 800d5b8:	40020010 	.word	0x40020010
 800d5bc:	40020028 	.word	0x40020028
 800d5c0:	40020040 	.word	0x40020040
 800d5c4:	40020058 	.word	0x40020058
 800d5c8:	40020070 	.word	0x40020070
 800d5cc:	40020088 	.word	0x40020088
 800d5d0:	400200a0 	.word	0x400200a0
 800d5d4:	400200b8 	.word	0x400200b8
 800d5d8:	40020410 	.word	0x40020410
 800d5dc:	40020428 	.word	0x40020428
 800d5e0:	40020440 	.word	0x40020440
 800d5e4:	40020458 	.word	0x40020458
 800d5e8:	40020470 	.word	0x40020470
 800d5ec:	40020488 	.word	0x40020488
 800d5f0:	400204a0 	.word	0x400204a0
 800d5f4:	400204b8 	.word	0x400204b8
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	bf0c      	ite	eq
 800d604:	2301      	moveq	r3, #1
 800d606:	2300      	movne	r3, #0
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d001      	beq.n	800d612 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d60e:	2301      	movs	r3, #1
 800d610:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7fc fdf0 	bl	800a1f8 <HAL_DMA_GetError>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b02      	cmp	r3, #2
 800d61c:	d00e      	beq.n	800d63c <I2C_DMAError+0x26c>
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00b      	beq.n	800d63c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	685a      	ldr	r2, [r3, #4]
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d632:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d634:	2110      	movs	r1, #16
 800d636:	68b8      	ldr	r0, [r7, #8]
 800d638:	f7ff fcf8 	bl	800d02c <I2C_ITError>
  }
}
 800d63c:	bf00      	nop
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d650:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d656:	2b00      	cmp	r3, #0
 800d658:	d003      	beq.n	800d662 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65e:	2200      	movs	r2, #0
 800d660:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d666:	2b00      	cmp	r3, #0
 800d668:	d003      	beq.n	800d672 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d66e:	2200      	movs	r2, #0
 800d670:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f7ff fdca 	bl	800d20c <I2C_TreatErrorCallback>
}
 800d678:	bf00      	nop
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d680:	b480      	push	{r7}
 800d682:	b087      	sub	sp, #28
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	607b      	str	r3, [r7, #4]
 800d68a:	460b      	mov	r3, r1
 800d68c:	817b      	strh	r3, [r7, #10]
 800d68e:	4613      	mov	r3, r2
 800d690:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d692:	897b      	ldrh	r3, [r7, #10]
 800d694:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d698:	7a7b      	ldrb	r3, [r7, #9]
 800d69a:	041b      	lsls	r3, r3, #16
 800d69c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	0d5b      	lsrs	r3, r3, #21
 800d6ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d6be:	4b08      	ldr	r3, [pc, #32]	; (800d6e0 <I2C_TransferConfig+0x60>)
 800d6c0:	430b      	orrs	r3, r1
 800d6c2:	43db      	mvns	r3, r3
 800d6c4:	ea02 0103 	and.w	r1, r2, r3
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	697a      	ldr	r2, [r7, #20]
 800d6ce:	430a      	orrs	r2, r1
 800d6d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d6d2:	bf00      	nop
 800d6d4:	371c      	adds	r7, #28
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	03ff63ff 	.word	0x03ff63ff

0800d6e4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f8:	4a39      	ldr	r2, [pc, #228]	; (800d7e0 <I2C_Enable_IRQ+0xfc>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d032      	beq.n	800d764 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d702:	4a38      	ldr	r2, [pc, #224]	; (800d7e4 <I2C_Enable_IRQ+0x100>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d02d      	beq.n	800d764 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d70c:	4a36      	ldr	r2, [pc, #216]	; (800d7e8 <I2C_Enable_IRQ+0x104>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d028      	beq.n	800d764 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d712:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d716:	2b00      	cmp	r3, #0
 800d718:	da03      	bge.n	800d722 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d720:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d722:	887b      	ldrh	r3, [r7, #2]
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d003      	beq.n	800d734 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d732:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d734:	887b      	ldrh	r3, [r7, #2]
 800d736:	f003 0302 	and.w	r3, r3, #2
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d003      	beq.n	800d746 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d744:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d746:	887b      	ldrh	r3, [r7, #2]
 800d748:	2b10      	cmp	r3, #16
 800d74a:	d103      	bne.n	800d754 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d752:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d754:	887b      	ldrh	r3, [r7, #2]
 800d756:	2b20      	cmp	r3, #32
 800d758:	d133      	bne.n	800d7c2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f043 0320 	orr.w	r3, r3, #32
 800d760:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d762:	e02e      	b.n	800d7c2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d764:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	da03      	bge.n	800d774 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d772:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d774:	887b      	ldrh	r3, [r7, #2]
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d784:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d786:	887b      	ldrh	r3, [r7, #2]
 800d788:	f003 0302 	and.w	r3, r3, #2
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d003      	beq.n	800d798 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d796:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d798:	887b      	ldrh	r3, [r7, #2]
 800d79a:	2b10      	cmp	r3, #16
 800d79c:	d103      	bne.n	800d7a6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d7a4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d7a6:	887b      	ldrh	r3, [r7, #2]
 800d7a8:	2b20      	cmp	r3, #32
 800d7aa:	d103      	bne.n	800d7b4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d7b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d7b4:	887b      	ldrh	r3, [r7, #2]
 800d7b6:	2b40      	cmp	r3, #64	; 0x40
 800d7b8:	d103      	bne.n	800d7c2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7c0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	6819      	ldr	r1, [r3, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	430a      	orrs	r2, r1
 800d7d0:	601a      	str	r2, [r3, #0]
}
 800d7d2:	bf00      	nop
 800d7d4:	3714      	adds	r7, #20
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	0800beeb 	.word	0x0800beeb
 800d7e4:	0800c331 	.word	0x0800c331
 800d7e8:	0800c0d1 	.word	0x0800c0d1

0800d7ec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d7fc:	887b      	ldrh	r3, [r7, #2]
 800d7fe:	f003 0301 	and.w	r3, r3, #1
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00f      	beq.n	800d826 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d80c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d814:	b2db      	uxtb	r3, r3
 800d816:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d81a:	2b28      	cmp	r3, #40	; 0x28
 800d81c:	d003      	beq.n	800d826 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d824:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d826:	887b      	ldrh	r3, [r7, #2]
 800d828:	f003 0302 	and.w	r3, r3, #2
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00f      	beq.n	800d850 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d836:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d844:	2b28      	cmp	r3, #40	; 0x28
 800d846:	d003      	beq.n	800d850 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d84e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d850:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d854:	2b00      	cmp	r3, #0
 800d856:	da03      	bge.n	800d860 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d85e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d860:	887b      	ldrh	r3, [r7, #2]
 800d862:	2b10      	cmp	r3, #16
 800d864:	d103      	bne.n	800d86e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d86c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d86e:	887b      	ldrh	r3, [r7, #2]
 800d870:	2b20      	cmp	r3, #32
 800d872:	d103      	bne.n	800d87c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f043 0320 	orr.w	r3, r3, #32
 800d87a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d87c:	887b      	ldrh	r3, [r7, #2]
 800d87e:	2b40      	cmp	r3, #64	; 0x40
 800d880:	d103      	bne.n	800d88a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d888:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	6819      	ldr	r1, [r3, #0]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	43da      	mvns	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	400a      	ands	r2, r1
 800d89a:	601a      	str	r2, [r3, #0]
}
 800d89c:	bf00      	nop
 800d89e:	3714      	adds	r7, #20
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	2b20      	cmp	r3, #32
 800d8bc:	d138      	bne.n	800d930 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d101      	bne.n	800d8cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	e032      	b.n	800d932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2224      	movs	r2, #36	; 0x24
 800d8d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f022 0201 	bic.w	r2, r2, #1
 800d8ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d8fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6819      	ldr	r1, [r3, #0]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	430a      	orrs	r2, r1
 800d90a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f042 0201 	orr.w	r2, r2, #1
 800d91a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2220      	movs	r2, #32
 800d920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d92c:	2300      	movs	r3, #0
 800d92e:	e000      	b.n	800d932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d930:	2302      	movs	r3, #2
  }
}
 800d932:	4618      	mov	r0, r3
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d93e:	b480      	push	{r7}
 800d940:	b085      	sub	sp, #20
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
 800d946:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	2b20      	cmp	r3, #32
 800d952:	d139      	bne.n	800d9c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d101      	bne.n	800d962 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d95e:	2302      	movs	r3, #2
 800d960:	e033      	b.n	800d9ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2201      	movs	r2, #1
 800d966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2224      	movs	r2, #36	; 0x24
 800d96e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f022 0201 	bic.w	r2, r2, #1
 800d980:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d990:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	021b      	lsls	r3, r3, #8
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	4313      	orrs	r3, r2
 800d99a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f042 0201 	orr.w	r2, r2, #1
 800d9b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2220      	movs	r2, #32
 800d9b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	e000      	b.n	800d9ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d9c8:	2302      	movs	r3, #2
  }
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3714      	adds	r7, #20
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr
	...

0800d9d8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d9e0:	4b0d      	ldr	r3, [pc, #52]	; (800da18 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d9e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d9e6:	4a0c      	ldr	r2, [pc, #48]	; (800da18 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d9e8:	f043 0302 	orr.w	r3, r3, #2
 800d9ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d9f0:	4b09      	ldr	r3, [pc, #36]	; (800da18 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d9f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d9f6:	f003 0302 	and.w	r3, r3, #2
 800d9fa:	60fb      	str	r3, [r7, #12]
 800d9fc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800d9fe:	4b07      	ldr	r3, [pc, #28]	; (800da1c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800da00:	685a      	ldr	r2, [r3, #4]
 800da02:	4906      	ldr	r1, [pc, #24]	; (800da1c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4313      	orrs	r3, r2
 800da08:	604b      	str	r3, [r1, #4]
}
 800da0a:	bf00      	nop
 800da0c:	3714      	adds	r7, #20
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop
 800da18:	58024400 	.word	0x58024400
 800da1c:	58000400 	.word	0x58000400

0800da20 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800da30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	460b      	mov	r3, r1
 800da4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800da4c:	4b18      	ldr	r3, [pc, #96]	; (800dab0 <HAL_PWR_EnterSTOPMode+0x70>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f023 0201 	bic.w	r2, r3, #1
 800da54:	4916      	ldr	r1, [pc, #88]	; (800dab0 <HAL_PWR_EnterSTOPMode+0x70>)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	4313      	orrs	r3, r2
 800da5a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800da5c:	4b14      	ldr	r3, [pc, #80]	; (800dab0 <HAL_PWR_EnterSTOPMode+0x70>)
 800da5e:	691b      	ldr	r3, [r3, #16]
 800da60:	4a13      	ldr	r2, [pc, #76]	; (800dab0 <HAL_PWR_EnterSTOPMode+0x70>)
 800da62:	f023 0305 	bic.w	r3, r3, #5
 800da66:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800da68:	4b11      	ldr	r3, [pc, #68]	; (800dab0 <HAL_PWR_EnterSTOPMode+0x70>)
 800da6a:	691b      	ldr	r3, [r3, #16]
 800da6c:	4a10      	ldr	r2, [pc, #64]	; (800dab0 <HAL_PWR_EnterSTOPMode+0x70>)
 800da6e:	f023 0302 	bic.w	r3, r3, #2
 800da72:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800da74:	4b0f      	ldr	r3, [pc, #60]	; (800dab4 <HAL_PWR_EnterSTOPMode+0x74>)
 800da76:	691b      	ldr	r3, [r3, #16]
 800da78:	4a0e      	ldr	r2, [pc, #56]	; (800dab4 <HAL_PWR_EnterSTOPMode+0x74>)
 800da7a:	f043 0304 	orr.w	r3, r3, #4
 800da7e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800da80:	f3bf 8f4f 	dsb	sy
}
 800da84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800da86:	f3bf 8f6f 	isb	sy
}
 800da8a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800da8c:	78fb      	ldrb	r3, [r7, #3]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d101      	bne.n	800da96 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800da92:	bf30      	wfi
 800da94:	e000      	b.n	800da98 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800da96:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800da98:	4b06      	ldr	r3, [pc, #24]	; (800dab4 <HAL_PWR_EnterSTOPMode+0x74>)
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	4a05      	ldr	r2, [pc, #20]	; (800dab4 <HAL_PWR_EnterSTOPMode+0x74>)
 800da9e:	f023 0304 	bic.w	r3, r3, #4
 800daa2:	6113      	str	r3, [r2, #16]
}
 800daa4:	bf00      	nop
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr
 800dab0:	58024800 	.word	0x58024800
 800dab4:	e000ed00 	.word	0xe000ed00

0800dab8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800dac0:	4b19      	ldr	r3, [pc, #100]	; (800db28 <HAL_PWREx_ConfigSupply+0x70>)
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	f003 0304 	and.w	r3, r3, #4
 800dac8:	2b04      	cmp	r3, #4
 800daca:	d00a      	beq.n	800dae2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800dacc:	4b16      	ldr	r3, [pc, #88]	; (800db28 <HAL_PWREx_ConfigSupply+0x70>)
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	f003 0307 	and.w	r3, r3, #7
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d001      	beq.n	800dade <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800dada:	2301      	movs	r3, #1
 800dadc:	e01f      	b.n	800db1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	e01d      	b.n	800db1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800dae2:	4b11      	ldr	r3, [pc, #68]	; (800db28 <HAL_PWREx_ConfigSupply+0x70>)
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	f023 0207 	bic.w	r2, r3, #7
 800daea:	490f      	ldr	r1, [pc, #60]	; (800db28 <HAL_PWREx_ConfigSupply+0x70>)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	4313      	orrs	r3, r2
 800daf0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800daf2:	f7f7 fff7 	bl	8005ae4 <HAL_GetTick>
 800daf6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800daf8:	e009      	b.n	800db0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800dafa:	f7f7 fff3 	bl	8005ae4 <HAL_GetTick>
 800dafe:	4602      	mov	r2, r0
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	1ad3      	subs	r3, r2, r3
 800db04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db08:	d901      	bls.n	800db0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800db0a:	2301      	movs	r3, #1
 800db0c:	e007      	b.n	800db1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800db0e:	4b06      	ldr	r3, [pc, #24]	; (800db28 <HAL_PWREx_ConfigSupply+0x70>)
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db1a:	d1ee      	bne.n	800dafa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800db1c:	2300      	movs	r3, #0
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3710      	adds	r7, #16
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	58024800 	.word	0x58024800

0800db2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08c      	sub	sp, #48	; 0x30
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d102      	bne.n	800db40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800db3a:	2301      	movs	r3, #1
 800db3c:	f000 bc48 	b.w	800e3d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f003 0301 	and.w	r3, r3, #1
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f000 8088 	beq.w	800dc5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800db4e:	4b99      	ldr	r3, [pc, #612]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db56:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800db58:	4b96      	ldr	r3, [pc, #600]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800db5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db5c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800db5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db60:	2b10      	cmp	r3, #16
 800db62:	d007      	beq.n	800db74 <HAL_RCC_OscConfig+0x48>
 800db64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db66:	2b18      	cmp	r3, #24
 800db68:	d111      	bne.n	800db8e <HAL_RCC_OscConfig+0x62>
 800db6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6c:	f003 0303 	and.w	r3, r3, #3
 800db70:	2b02      	cmp	r3, #2
 800db72:	d10c      	bne.n	800db8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db74:	4b8f      	ldr	r3, [pc, #572]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d06d      	beq.n	800dc5c <HAL_RCC_OscConfig+0x130>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d169      	bne.n	800dc5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800db88:	2301      	movs	r3, #1
 800db8a:	f000 bc21 	b.w	800e3d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db96:	d106      	bne.n	800dba6 <HAL_RCC_OscConfig+0x7a>
 800db98:	4b86      	ldr	r3, [pc, #536]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4a85      	ldr	r2, [pc, #532]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800db9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dba2:	6013      	str	r3, [r2, #0]
 800dba4:	e02e      	b.n	800dc04 <HAL_RCC_OscConfig+0xd8>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10c      	bne.n	800dbc8 <HAL_RCC_OscConfig+0x9c>
 800dbae:	4b81      	ldr	r3, [pc, #516]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a80      	ldr	r2, [pc, #512]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dbb8:	6013      	str	r3, [r2, #0]
 800dbba:	4b7e      	ldr	r3, [pc, #504]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a7d      	ldr	r2, [pc, #500]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dbc4:	6013      	str	r3, [r2, #0]
 800dbc6:	e01d      	b.n	800dc04 <HAL_RCC_OscConfig+0xd8>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dbd0:	d10c      	bne.n	800dbec <HAL_RCC_OscConfig+0xc0>
 800dbd2:	4b78      	ldr	r3, [pc, #480]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4a77      	ldr	r2, [pc, #476]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dbdc:	6013      	str	r3, [r2, #0]
 800dbde:	4b75      	ldr	r3, [pc, #468]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a74      	ldr	r2, [pc, #464]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbe8:	6013      	str	r3, [r2, #0]
 800dbea:	e00b      	b.n	800dc04 <HAL_RCC_OscConfig+0xd8>
 800dbec:	4b71      	ldr	r3, [pc, #452]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a70      	ldr	r2, [pc, #448]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	4b6e      	ldr	r3, [pc, #440]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a6d      	ldr	r2, [pc, #436]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dbfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dc02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d013      	beq.n	800dc34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc0c:	f7f7 ff6a 	bl	8005ae4 <HAL_GetTick>
 800dc10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dc12:	e008      	b.n	800dc26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dc14:	f7f7 ff66 	bl	8005ae4 <HAL_GetTick>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1c:	1ad3      	subs	r3, r2, r3
 800dc1e:	2b64      	cmp	r3, #100	; 0x64
 800dc20:	d901      	bls.n	800dc26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dc22:	2303      	movs	r3, #3
 800dc24:	e3d4      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dc26:	4b63      	ldr	r3, [pc, #396]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d0f0      	beq.n	800dc14 <HAL_RCC_OscConfig+0xe8>
 800dc32:	e014      	b.n	800dc5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc34:	f7f7 ff56 	bl	8005ae4 <HAL_GetTick>
 800dc38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dc3a:	e008      	b.n	800dc4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dc3c:	f7f7 ff52 	bl	8005ae4 <HAL_GetTick>
 800dc40:	4602      	mov	r2, r0
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	1ad3      	subs	r3, r2, r3
 800dc46:	2b64      	cmp	r3, #100	; 0x64
 800dc48:	d901      	bls.n	800dc4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	e3c0      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dc4e:	4b59      	ldr	r3, [pc, #356]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1f0      	bne.n	800dc3c <HAL_RCC_OscConfig+0x110>
 800dc5a:	e000      	b.n	800dc5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f003 0302 	and.w	r3, r3, #2
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f000 80ca 	beq.w	800de00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dc6c:	4b51      	ldr	r3, [pc, #324]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dc6e:	691b      	ldr	r3, [r3, #16]
 800dc70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dc76:	4b4f      	ldr	r3, [pc, #316]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dc7c:	6a3b      	ldr	r3, [r7, #32]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d007      	beq.n	800dc92 <HAL_RCC_OscConfig+0x166>
 800dc82:	6a3b      	ldr	r3, [r7, #32]
 800dc84:	2b18      	cmp	r3, #24
 800dc86:	d156      	bne.n	800dd36 <HAL_RCC_OscConfig+0x20a>
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	f003 0303 	and.w	r3, r3, #3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d151      	bne.n	800dd36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc92:	4b48      	ldr	r3, [pc, #288]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f003 0304 	and.w	r3, r3, #4
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d005      	beq.n	800dcaa <HAL_RCC_OscConfig+0x17e>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e392      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dcaa:	4b42      	ldr	r3, [pc, #264]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f023 0219 	bic.w	r2, r3, #25
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	493f      	ldr	r1, [pc, #252]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcbc:	f7f7 ff12 	bl	8005ae4 <HAL_GetTick>
 800dcc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dcc2:	e008      	b.n	800dcd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dcc4:	f7f7 ff0e 	bl	8005ae4 <HAL_GetTick>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d901      	bls.n	800dcd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800dcd2:	2303      	movs	r3, #3
 800dcd4:	e37c      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dcd6:	4b37      	ldr	r3, [pc, #220]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f003 0304 	and.w	r3, r3, #4
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d0f0      	beq.n	800dcc4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dce2:	f7f7 ff0b 	bl	8005afc <HAL_GetREVID>
 800dce6:	4603      	mov	r3, r0
 800dce8:	f241 0203 	movw	r2, #4099	; 0x1003
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d817      	bhi.n	800dd20 <HAL_RCC_OscConfig+0x1f4>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	2b40      	cmp	r3, #64	; 0x40
 800dcf6:	d108      	bne.n	800dd0a <HAL_RCC_OscConfig+0x1de>
 800dcf8:	4b2e      	ldr	r3, [pc, #184]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dd00:	4a2c      	ldr	r2, [pc, #176]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dd02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dd08:	e07a      	b.n	800de00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd0a:	4b2a      	ldr	r3, [pc, #168]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	031b      	lsls	r3, r3, #12
 800dd18:	4926      	ldr	r1, [pc, #152]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dd1e:	e06f      	b.n	800de00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd20:	4b24      	ldr	r3, [pc, #144]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	691b      	ldr	r3, [r3, #16]
 800dd2c:	061b      	lsls	r3, r3, #24
 800dd2e:	4921      	ldr	r1, [pc, #132]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dd30:	4313      	orrs	r3, r2
 800dd32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dd34:	e064      	b.n	800de00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d047      	beq.n	800ddce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dd3e:	4b1d      	ldr	r3, [pc, #116]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f023 0219 	bic.w	r2, r3, #25
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	491a      	ldr	r1, [pc, #104]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd50:	f7f7 fec8 	bl	8005ae4 <HAL_GetTick>
 800dd54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dd56:	e008      	b.n	800dd6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd58:	f7f7 fec4 	bl	8005ae4 <HAL_GetTick>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	d901      	bls.n	800dd6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800dd66:	2303      	movs	r3, #3
 800dd68:	e332      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dd6a:	4b12      	ldr	r3, [pc, #72]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f003 0304 	and.w	r3, r3, #4
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0f0      	beq.n	800dd58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd76:	f7f7 fec1 	bl	8005afc <HAL_GetREVID>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	f241 0203 	movw	r2, #4099	; 0x1003
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d819      	bhi.n	800ddb8 <HAL_RCC_OscConfig+0x28c>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	691b      	ldr	r3, [r3, #16]
 800dd88:	2b40      	cmp	r3, #64	; 0x40
 800dd8a:	d108      	bne.n	800dd9e <HAL_RCC_OscConfig+0x272>
 800dd8c:	4b09      	ldr	r3, [pc, #36]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dd94:	4a07      	ldr	r2, [pc, #28]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dd96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd9a:	6053      	str	r3, [r2, #4]
 800dd9c:	e030      	b.n	800de00 <HAL_RCC_OscConfig+0x2d4>
 800dd9e:	4b05      	ldr	r3, [pc, #20]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	031b      	lsls	r3, r3, #12
 800ddac:	4901      	ldr	r1, [pc, #4]	; (800ddb4 <HAL_RCC_OscConfig+0x288>)
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	604b      	str	r3, [r1, #4]
 800ddb2:	e025      	b.n	800de00 <HAL_RCC_OscConfig+0x2d4>
 800ddb4:	58024400 	.word	0x58024400
 800ddb8:	4b9a      	ldr	r3, [pc, #616]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	061b      	lsls	r3, r3, #24
 800ddc6:	4997      	ldr	r1, [pc, #604]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	604b      	str	r3, [r1, #4]
 800ddcc:	e018      	b.n	800de00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ddce:	4b95      	ldr	r3, [pc, #596]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4a94      	ldr	r2, [pc, #592]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800ddd4:	f023 0301 	bic.w	r3, r3, #1
 800ddd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddda:	f7f7 fe83 	bl	8005ae4 <HAL_GetTick>
 800ddde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dde0:	e008      	b.n	800ddf4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dde2:	f7f7 fe7f 	bl	8005ae4 <HAL_GetTick>
 800dde6:	4602      	mov	r2, r0
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d901      	bls.n	800ddf4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ddf0:	2303      	movs	r3, #3
 800ddf2:	e2ed      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ddf4:	4b8b      	ldr	r3, [pc, #556]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f003 0304 	and.w	r3, r3, #4
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1f0      	bne.n	800dde2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f003 0310 	and.w	r3, r3, #16
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 80a9 	beq.w	800df60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de0e:	4b85      	ldr	r3, [pc, #532]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800de18:	4b82      	ldr	r3, [pc, #520]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800de1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	2b08      	cmp	r3, #8
 800de22:	d007      	beq.n	800de34 <HAL_RCC_OscConfig+0x308>
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	2b18      	cmp	r3, #24
 800de28:	d13a      	bne.n	800dea0 <HAL_RCC_OscConfig+0x374>
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	f003 0303 	and.w	r3, r3, #3
 800de30:	2b01      	cmp	r3, #1
 800de32:	d135      	bne.n	800dea0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de34:	4b7b      	ldr	r3, [pc, #492]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d005      	beq.n	800de4c <HAL_RCC_OscConfig+0x320>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	69db      	ldr	r3, [r3, #28]
 800de44:	2b80      	cmp	r3, #128	; 0x80
 800de46:	d001      	beq.n	800de4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800de48:	2301      	movs	r3, #1
 800de4a:	e2c1      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de4c:	f7f7 fe56 	bl	8005afc <HAL_GetREVID>
 800de50:	4603      	mov	r3, r0
 800de52:	f241 0203 	movw	r2, #4099	; 0x1003
 800de56:	4293      	cmp	r3, r2
 800de58:	d817      	bhi.n	800de8a <HAL_RCC_OscConfig+0x35e>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a1b      	ldr	r3, [r3, #32]
 800de5e:	2b20      	cmp	r3, #32
 800de60:	d108      	bne.n	800de74 <HAL_RCC_OscConfig+0x348>
 800de62:	4b70      	ldr	r3, [pc, #448]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800de6a:	4a6e      	ldr	r2, [pc, #440]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800de6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de72:	e075      	b.n	800df60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de74:	4b6b      	ldr	r3, [pc, #428]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a1b      	ldr	r3, [r3, #32]
 800de80:	069b      	lsls	r3, r3, #26
 800de82:	4968      	ldr	r1, [pc, #416]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800de84:	4313      	orrs	r3, r2
 800de86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de88:	e06a      	b.n	800df60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de8a:	4b66      	ldr	r3, [pc, #408]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a1b      	ldr	r3, [r3, #32]
 800de96:	061b      	lsls	r3, r3, #24
 800de98:	4962      	ldr	r1, [pc, #392]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800de9a:	4313      	orrs	r3, r2
 800de9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de9e:	e05f      	b.n	800df60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	69db      	ldr	r3, [r3, #28]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d042      	beq.n	800df2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800dea8:	4b5e      	ldr	r3, [pc, #376]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a5d      	ldr	r2, [pc, #372]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800deae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800deb4:	f7f7 fe16 	bl	8005ae4 <HAL_GetTick>
 800deb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800deba:	e008      	b.n	800dece <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800debc:	f7f7 fe12 	bl	8005ae4 <HAL_GetTick>
 800dec0:	4602      	mov	r2, r0
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	d901      	bls.n	800dece <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800deca:	2303      	movs	r3, #3
 800decc:	e280      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dece:	4b55      	ldr	r3, [pc, #340]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d0f0      	beq.n	800debc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800deda:	f7f7 fe0f 	bl	8005afc <HAL_GetREVID>
 800dede:	4603      	mov	r3, r0
 800dee0:	f241 0203 	movw	r2, #4099	; 0x1003
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d817      	bhi.n	800df18 <HAL_RCC_OscConfig+0x3ec>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6a1b      	ldr	r3, [r3, #32]
 800deec:	2b20      	cmp	r3, #32
 800deee:	d108      	bne.n	800df02 <HAL_RCC_OscConfig+0x3d6>
 800def0:	4b4c      	ldr	r3, [pc, #304]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800def8:	4a4a      	ldr	r2, [pc, #296]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800defa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800defe:	6053      	str	r3, [r2, #4]
 800df00:	e02e      	b.n	800df60 <HAL_RCC_OscConfig+0x434>
 800df02:	4b48      	ldr	r3, [pc, #288]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a1b      	ldr	r3, [r3, #32]
 800df0e:	069b      	lsls	r3, r3, #26
 800df10:	4944      	ldr	r1, [pc, #272]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800df12:	4313      	orrs	r3, r2
 800df14:	604b      	str	r3, [r1, #4]
 800df16:	e023      	b.n	800df60 <HAL_RCC_OscConfig+0x434>
 800df18:	4b42      	ldr	r3, [pc, #264]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6a1b      	ldr	r3, [r3, #32]
 800df24:	061b      	lsls	r3, r3, #24
 800df26:	493f      	ldr	r1, [pc, #252]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800df28:	4313      	orrs	r3, r2
 800df2a:	60cb      	str	r3, [r1, #12]
 800df2c:	e018      	b.n	800df60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800df2e:	4b3d      	ldr	r3, [pc, #244]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a3c      	ldr	r2, [pc, #240]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800df34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df3a:	f7f7 fdd3 	bl	8005ae4 <HAL_GetTick>
 800df3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800df40:	e008      	b.n	800df54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800df42:	f7f7 fdcf 	bl	8005ae4 <HAL_GetTick>
 800df46:	4602      	mov	r2, r0
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	1ad3      	subs	r3, r2, r3
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d901      	bls.n	800df54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800df50:	2303      	movs	r3, #3
 800df52:	e23d      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800df54:	4b33      	ldr	r3, [pc, #204]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1f0      	bne.n	800df42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f003 0308 	and.w	r3, r3, #8
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d036      	beq.n	800dfda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	695b      	ldr	r3, [r3, #20]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d019      	beq.n	800dfa8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800df74:	4b2b      	ldr	r3, [pc, #172]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800df76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df78:	4a2a      	ldr	r2, [pc, #168]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800df7a:	f043 0301 	orr.w	r3, r3, #1
 800df7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df80:	f7f7 fdb0 	bl	8005ae4 <HAL_GetTick>
 800df84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800df86:	e008      	b.n	800df9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df88:	f7f7 fdac 	bl	8005ae4 <HAL_GetTick>
 800df8c:	4602      	mov	r2, r0
 800df8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df90:	1ad3      	subs	r3, r2, r3
 800df92:	2b02      	cmp	r3, #2
 800df94:	d901      	bls.n	800df9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800df96:	2303      	movs	r3, #3
 800df98:	e21a      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800df9a:	4b22      	ldr	r3, [pc, #136]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800df9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df9e:	f003 0302 	and.w	r3, r3, #2
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d0f0      	beq.n	800df88 <HAL_RCC_OscConfig+0x45c>
 800dfa6:	e018      	b.n	800dfda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dfa8:	4b1e      	ldr	r3, [pc, #120]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800dfaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfac:	4a1d      	ldr	r2, [pc, #116]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800dfae:	f023 0301 	bic.w	r3, r3, #1
 800dfb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dfb4:	f7f7 fd96 	bl	8005ae4 <HAL_GetTick>
 800dfb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dfba:	e008      	b.n	800dfce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dfbc:	f7f7 fd92 	bl	8005ae4 <HAL_GetTick>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	2b02      	cmp	r3, #2
 800dfc8:	d901      	bls.n	800dfce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	e200      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dfce:	4b15      	ldr	r3, [pc, #84]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800dfd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfd2:	f003 0302 	and.w	r3, r3, #2
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1f0      	bne.n	800dfbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f003 0320 	and.w	r3, r3, #32
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d039      	beq.n	800e05a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	699b      	ldr	r3, [r3, #24]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d01c      	beq.n	800e028 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dfee:	4b0d      	ldr	r3, [pc, #52]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4a0c      	ldr	r2, [pc, #48]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800dff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dff8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dffa:	f7f7 fd73 	bl	8005ae4 <HAL_GetTick>
 800dffe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e000:	e008      	b.n	800e014 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e002:	f7f7 fd6f 	bl	8005ae4 <HAL_GetTick>
 800e006:	4602      	mov	r2, r0
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	1ad3      	subs	r3, r2, r3
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d901      	bls.n	800e014 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e010:	2303      	movs	r3, #3
 800e012:	e1dd      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e014:	4b03      	ldr	r3, [pc, #12]	; (800e024 <HAL_RCC_OscConfig+0x4f8>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d0f0      	beq.n	800e002 <HAL_RCC_OscConfig+0x4d6>
 800e020:	e01b      	b.n	800e05a <HAL_RCC_OscConfig+0x52e>
 800e022:	bf00      	nop
 800e024:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e028:	4b9b      	ldr	r3, [pc, #620]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a9a      	ldr	r2, [pc, #616]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e02e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e032:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e034:	f7f7 fd56 	bl	8005ae4 <HAL_GetTick>
 800e038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e03a:	e008      	b.n	800e04e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e03c:	f7f7 fd52 	bl	8005ae4 <HAL_GetTick>
 800e040:	4602      	mov	r2, r0
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e044:	1ad3      	subs	r3, r2, r3
 800e046:	2b02      	cmp	r3, #2
 800e048:	d901      	bls.n	800e04e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e04a:	2303      	movs	r3, #3
 800e04c:	e1c0      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e04e:	4b92      	ldr	r3, [pc, #584]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1f0      	bne.n	800e03c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f003 0304 	and.w	r3, r3, #4
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 8081 	beq.w	800e16a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e068:	4b8c      	ldr	r3, [pc, #560]	; (800e29c <HAL_RCC_OscConfig+0x770>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a8b      	ldr	r2, [pc, #556]	; (800e29c <HAL_RCC_OscConfig+0x770>)
 800e06e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e074:	f7f7 fd36 	bl	8005ae4 <HAL_GetTick>
 800e078:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e07a:	e008      	b.n	800e08e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e07c:	f7f7 fd32 	bl	8005ae4 <HAL_GetTick>
 800e080:	4602      	mov	r2, r0
 800e082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	2b64      	cmp	r3, #100	; 0x64
 800e088:	d901      	bls.n	800e08e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e08a:	2303      	movs	r3, #3
 800e08c:	e1a0      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e08e:	4b83      	ldr	r3, [pc, #524]	; (800e29c <HAL_RCC_OscConfig+0x770>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e096:	2b00      	cmp	r3, #0
 800e098:	d0f0      	beq.n	800e07c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d106      	bne.n	800e0b0 <HAL_RCC_OscConfig+0x584>
 800e0a2:	4b7d      	ldr	r3, [pc, #500]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0a6:	4a7c      	ldr	r2, [pc, #496]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0a8:	f043 0301 	orr.w	r3, r3, #1
 800e0ac:	6713      	str	r3, [r2, #112]	; 0x70
 800e0ae:	e02d      	b.n	800e10c <HAL_RCC_OscConfig+0x5e0>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10c      	bne.n	800e0d2 <HAL_RCC_OscConfig+0x5a6>
 800e0b8:	4b77      	ldr	r3, [pc, #476]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0bc:	4a76      	ldr	r2, [pc, #472]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0be:	f023 0301 	bic.w	r3, r3, #1
 800e0c2:	6713      	str	r3, [r2, #112]	; 0x70
 800e0c4:	4b74      	ldr	r3, [pc, #464]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0c8:	4a73      	ldr	r2, [pc, #460]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0ca:	f023 0304 	bic.w	r3, r3, #4
 800e0ce:	6713      	str	r3, [r2, #112]	; 0x70
 800e0d0:	e01c      	b.n	800e10c <HAL_RCC_OscConfig+0x5e0>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	2b05      	cmp	r3, #5
 800e0d8:	d10c      	bne.n	800e0f4 <HAL_RCC_OscConfig+0x5c8>
 800e0da:	4b6f      	ldr	r3, [pc, #444]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0de:	4a6e      	ldr	r2, [pc, #440]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0e0:	f043 0304 	orr.w	r3, r3, #4
 800e0e4:	6713      	str	r3, [r2, #112]	; 0x70
 800e0e6:	4b6c      	ldr	r3, [pc, #432]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ea:	4a6b      	ldr	r2, [pc, #428]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0ec:	f043 0301 	orr.w	r3, r3, #1
 800e0f0:	6713      	str	r3, [r2, #112]	; 0x70
 800e0f2:	e00b      	b.n	800e10c <HAL_RCC_OscConfig+0x5e0>
 800e0f4:	4b68      	ldr	r3, [pc, #416]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0f8:	4a67      	ldr	r2, [pc, #412]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e0fa:	f023 0301 	bic.w	r3, r3, #1
 800e0fe:	6713      	str	r3, [r2, #112]	; 0x70
 800e100:	4b65      	ldr	r3, [pc, #404]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e104:	4a64      	ldr	r2, [pc, #400]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e106:	f023 0304 	bic.w	r3, r3, #4
 800e10a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d015      	beq.n	800e140 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e114:	f7f7 fce6 	bl	8005ae4 <HAL_GetTick>
 800e118:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e11a:	e00a      	b.n	800e132 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e11c:	f7f7 fce2 	bl	8005ae4 <HAL_GetTick>
 800e120:	4602      	mov	r2, r0
 800e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e124:	1ad3      	subs	r3, r2, r3
 800e126:	f241 3288 	movw	r2, #5000	; 0x1388
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d901      	bls.n	800e132 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e12e:	2303      	movs	r3, #3
 800e130:	e14e      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e132:	4b59      	ldr	r3, [pc, #356]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e136:	f003 0302 	and.w	r3, r3, #2
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d0ee      	beq.n	800e11c <HAL_RCC_OscConfig+0x5f0>
 800e13e:	e014      	b.n	800e16a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e140:	f7f7 fcd0 	bl	8005ae4 <HAL_GetTick>
 800e144:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e146:	e00a      	b.n	800e15e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e148:	f7f7 fccc 	bl	8005ae4 <HAL_GetTick>
 800e14c:	4602      	mov	r2, r0
 800e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	f241 3288 	movw	r2, #5000	; 0x1388
 800e156:	4293      	cmp	r3, r2
 800e158:	d901      	bls.n	800e15e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e15a:	2303      	movs	r3, #3
 800e15c:	e138      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e15e:	4b4e      	ldr	r3, [pc, #312]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e162:	f003 0302 	and.w	r3, r3, #2
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1ee      	bne.n	800e148 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16e:	2b00      	cmp	r3, #0
 800e170:	f000 812d 	beq.w	800e3ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e174:	4b48      	ldr	r3, [pc, #288]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e176:	691b      	ldr	r3, [r3, #16]
 800e178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e17c:	2b18      	cmp	r3, #24
 800e17e:	f000 80bd 	beq.w	800e2fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e186:	2b02      	cmp	r3, #2
 800e188:	f040 809e 	bne.w	800e2c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e18c:	4b42      	ldr	r3, [pc, #264]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a41      	ldr	r2, [pc, #260]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e198:	f7f7 fca4 	bl	8005ae4 <HAL_GetTick>
 800e19c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e19e:	e008      	b.n	800e1b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e1a0:	f7f7 fca0 	bl	8005ae4 <HAL_GetTick>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	d901      	bls.n	800e1b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e1ae:	2303      	movs	r3, #3
 800e1b0:	e10e      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e1b2:	4b39      	ldr	r3, [pc, #228]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1f0      	bne.n	800e1a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e1be:	4b36      	ldr	r3, [pc, #216]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e1c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1c2:	4b37      	ldr	r3, [pc, #220]	; (800e2a0 <HAL_RCC_OscConfig+0x774>)
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e1ce:	0112      	lsls	r2, r2, #4
 800e1d0:	430a      	orrs	r2, r1
 800e1d2:	4931      	ldr	r1, [pc, #196]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	628b      	str	r3, [r1, #40]	; 0x28
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	025b      	lsls	r3, r3, #9
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	431a      	orrs	r2, r3
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	041b      	lsls	r3, r3, #16
 800e1f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e1fa:	431a      	orrs	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e200:	3b01      	subs	r3, #1
 800e202:	061b      	lsls	r3, r3, #24
 800e204:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e208:	4923      	ldr	r1, [pc, #140]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e20a:	4313      	orrs	r3, r2
 800e20c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e20e:	4b22      	ldr	r3, [pc, #136]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e212:	4a21      	ldr	r2, [pc, #132]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e214:	f023 0301 	bic.w	r3, r3, #1
 800e218:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e21a:	4b1f      	ldr	r3, [pc, #124]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e21c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e21e:	4b21      	ldr	r3, [pc, #132]	; (800e2a4 <HAL_RCC_OscConfig+0x778>)
 800e220:	4013      	ands	r3, r2
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e226:	00d2      	lsls	r2, r2, #3
 800e228:	491b      	ldr	r1, [pc, #108]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e22a:	4313      	orrs	r3, r2
 800e22c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e22e:	4b1a      	ldr	r3, [pc, #104]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e232:	f023 020c 	bic.w	r2, r3, #12
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e23a:	4917      	ldr	r1, [pc, #92]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e23c:	4313      	orrs	r3, r2
 800e23e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e240:	4b15      	ldr	r3, [pc, #84]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e244:	f023 0202 	bic.w	r2, r3, #2
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e24c:	4912      	ldr	r1, [pc, #72]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e24e:	4313      	orrs	r3, r2
 800e250:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e252:	4b11      	ldr	r3, [pc, #68]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e256:	4a10      	ldr	r2, [pc, #64]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e25c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e25e:	4b0e      	ldr	r3, [pc, #56]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e262:	4a0d      	ldr	r2, [pc, #52]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e26a:	4b0b      	ldr	r3, [pc, #44]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26e:	4a0a      	ldr	r2, [pc, #40]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e276:	4b08      	ldr	r3, [pc, #32]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27a:	4a07      	ldr	r2, [pc, #28]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e27c:	f043 0301 	orr.w	r3, r3, #1
 800e280:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e282:	4b05      	ldr	r3, [pc, #20]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a04      	ldr	r2, [pc, #16]	; (800e298 <HAL_RCC_OscConfig+0x76c>)
 800e288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e28c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e28e:	f7f7 fc29 	bl	8005ae4 <HAL_GetTick>
 800e292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e294:	e011      	b.n	800e2ba <HAL_RCC_OscConfig+0x78e>
 800e296:	bf00      	nop
 800e298:	58024400 	.word	0x58024400
 800e29c:	58024800 	.word	0x58024800
 800e2a0:	fffffc0c 	.word	0xfffffc0c
 800e2a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e2a8:	f7f7 fc1c 	bl	8005ae4 <HAL_GetTick>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	d901      	bls.n	800e2ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e2b6:	2303      	movs	r3, #3
 800e2b8:	e08a      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e2ba:	4b47      	ldr	r3, [pc, #284]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d0f0      	beq.n	800e2a8 <HAL_RCC_OscConfig+0x77c>
 800e2c6:	e082      	b.n	800e3ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e2c8:	4b43      	ldr	r3, [pc, #268]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a42      	ldr	r2, [pc, #264]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e2ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e2d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2d4:	f7f7 fc06 	bl	8005ae4 <HAL_GetTick>
 800e2d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e2da:	e008      	b.n	800e2ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e2dc:	f7f7 fc02 	bl	8005ae4 <HAL_GetTick>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e4:	1ad3      	subs	r3, r2, r3
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d901      	bls.n	800e2ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e2ea:	2303      	movs	r3, #3
 800e2ec:	e070      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e2ee:	4b3a      	ldr	r3, [pc, #232]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1f0      	bne.n	800e2dc <HAL_RCC_OscConfig+0x7b0>
 800e2fa:	e068      	b.n	800e3ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e2fc:	4b36      	ldr	r3, [pc, #216]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e300:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e302:	4b35      	ldr	r3, [pc, #212]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e306:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d031      	beq.n	800e374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	f003 0203 	and.w	r2, r3, #3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d12a      	bne.n	800e374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	091b      	lsrs	r3, r3, #4
 800e322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d122      	bne.n	800e374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e338:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d11a      	bne.n	800e374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	0a5b      	lsrs	r3, r3, #9
 800e342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e34a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d111      	bne.n	800e374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	0c1b      	lsrs	r3, r3, #16
 800e354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e35e:	429a      	cmp	r2, r3
 800e360:	d108      	bne.n	800e374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	0e1b      	lsrs	r3, r3, #24
 800e366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e36e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e370:	429a      	cmp	r2, r3
 800e372:	d001      	beq.n	800e378 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e374:	2301      	movs	r3, #1
 800e376:	e02b      	b.n	800e3d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e378:	4b17      	ldr	r3, [pc, #92]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e37c:	08db      	lsrs	r3, r3, #3
 800e37e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e382:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e388:	693a      	ldr	r2, [r7, #16]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d01f      	beq.n	800e3ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e38e:	4b12      	ldr	r3, [pc, #72]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e392:	4a11      	ldr	r2, [pc, #68]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e394:	f023 0301 	bic.w	r3, r3, #1
 800e398:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e39a:	f7f7 fba3 	bl	8005ae4 <HAL_GetTick>
 800e39e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e3a0:	bf00      	nop
 800e3a2:	f7f7 fb9f 	bl	8005ae4 <HAL_GetTick>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d0f9      	beq.n	800e3a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e3ae:	4b0a      	ldr	r3, [pc, #40]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e3b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3b2:	4b0a      	ldr	r3, [pc, #40]	; (800e3dc <HAL_RCC_OscConfig+0x8b0>)
 800e3b4:	4013      	ands	r3, r2
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e3ba:	00d2      	lsls	r2, r2, #3
 800e3bc:	4906      	ldr	r1, [pc, #24]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e3c2:	4b05      	ldr	r3, [pc, #20]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c6:	4a04      	ldr	r2, [pc, #16]	; (800e3d8 <HAL_RCC_OscConfig+0x8ac>)
 800e3c8:	f043 0301 	orr.w	r3, r3, #1
 800e3cc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3730      	adds	r7, #48	; 0x30
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	58024400 	.word	0x58024400
 800e3dc:	ffff0007 	.word	0xffff0007

0800e3e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d101      	bne.n	800e3f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	e19c      	b.n	800e72e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e3f4:	4b8a      	ldr	r3, [pc, #552]	; (800e620 <HAL_RCC_ClockConfig+0x240>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f003 030f 	and.w	r3, r3, #15
 800e3fc:	683a      	ldr	r2, [r7, #0]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d910      	bls.n	800e424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e402:	4b87      	ldr	r3, [pc, #540]	; (800e620 <HAL_RCC_ClockConfig+0x240>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f023 020f 	bic.w	r2, r3, #15
 800e40a:	4985      	ldr	r1, [pc, #532]	; (800e620 <HAL_RCC_ClockConfig+0x240>)
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	4313      	orrs	r3, r2
 800e410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e412:	4b83      	ldr	r3, [pc, #524]	; (800e620 <HAL_RCC_ClockConfig+0x240>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f003 030f 	and.w	r3, r3, #15
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d001      	beq.n	800e424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e420:	2301      	movs	r3, #1
 800e422:	e184      	b.n	800e72e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f003 0304 	and.w	r3, r3, #4
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d010      	beq.n	800e452 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	691a      	ldr	r2, [r3, #16]
 800e434:	4b7b      	ldr	r3, [pc, #492]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e436:	699b      	ldr	r3, [r3, #24]
 800e438:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d908      	bls.n	800e452 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e440:	4b78      	ldr	r3, [pc, #480]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e442:	699b      	ldr	r3, [r3, #24]
 800e444:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	691b      	ldr	r3, [r3, #16]
 800e44c:	4975      	ldr	r1, [pc, #468]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e44e:	4313      	orrs	r3, r2
 800e450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f003 0308 	and.w	r3, r3, #8
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d010      	beq.n	800e480 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	695a      	ldr	r2, [r3, #20]
 800e462:	4b70      	ldr	r3, [pc, #448]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e464:	69db      	ldr	r3, [r3, #28]
 800e466:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d908      	bls.n	800e480 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e46e:	4b6d      	ldr	r3, [pc, #436]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e470:	69db      	ldr	r3, [r3, #28]
 800e472:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	496a      	ldr	r1, [pc, #424]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e47c:	4313      	orrs	r3, r2
 800e47e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f003 0310 	and.w	r3, r3, #16
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d010      	beq.n	800e4ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	699a      	ldr	r2, [r3, #24]
 800e490:	4b64      	ldr	r3, [pc, #400]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e492:	69db      	ldr	r3, [r3, #28]
 800e494:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e498:	429a      	cmp	r2, r3
 800e49a:	d908      	bls.n	800e4ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e49c:	4b61      	ldr	r3, [pc, #388]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e49e:	69db      	ldr	r3, [r3, #28]
 800e4a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	495e      	ldr	r1, [pc, #376]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f003 0320 	and.w	r3, r3, #32
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d010      	beq.n	800e4dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	69da      	ldr	r2, [r3, #28]
 800e4be:	4b59      	ldr	r3, [pc, #356]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e4c0:	6a1b      	ldr	r3, [r3, #32]
 800e4c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d908      	bls.n	800e4dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e4ca:	4b56      	ldr	r3, [pc, #344]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e4cc:	6a1b      	ldr	r3, [r3, #32]
 800e4ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	69db      	ldr	r3, [r3, #28]
 800e4d6:	4953      	ldr	r1, [pc, #332]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f003 0302 	and.w	r3, r3, #2
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d010      	beq.n	800e50a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	68da      	ldr	r2, [r3, #12]
 800e4ec:	4b4d      	ldr	r3, [pc, #308]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e4ee:	699b      	ldr	r3, [r3, #24]
 800e4f0:	f003 030f 	and.w	r3, r3, #15
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d908      	bls.n	800e50a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e4f8:	4b4a      	ldr	r3, [pc, #296]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e4fa:	699b      	ldr	r3, [r3, #24]
 800e4fc:	f023 020f 	bic.w	r2, r3, #15
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	4947      	ldr	r1, [pc, #284]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e506:	4313      	orrs	r3, r2
 800e508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f003 0301 	and.w	r3, r3, #1
 800e512:	2b00      	cmp	r3, #0
 800e514:	d055      	beq.n	800e5c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e516:	4b43      	ldr	r3, [pc, #268]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e518:	699b      	ldr	r3, [r3, #24]
 800e51a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	4940      	ldr	r1, [pc, #256]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e524:	4313      	orrs	r3, r2
 800e526:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	d107      	bne.n	800e540 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e530:	4b3c      	ldr	r3, [pc, #240]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d121      	bne.n	800e580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e53c:	2301      	movs	r3, #1
 800e53e:	e0f6      	b.n	800e72e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	2b03      	cmp	r3, #3
 800e546:	d107      	bne.n	800e558 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e548:	4b36      	ldr	r3, [pc, #216]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e550:	2b00      	cmp	r3, #0
 800e552:	d115      	bne.n	800e580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e554:	2301      	movs	r3, #1
 800e556:	e0ea      	b.n	800e72e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d107      	bne.n	800e570 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e560:	4b30      	ldr	r3, [pc, #192]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d109      	bne.n	800e580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e56c:	2301      	movs	r3, #1
 800e56e:	e0de      	b.n	800e72e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e570:	4b2c      	ldr	r3, [pc, #176]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f003 0304 	and.w	r3, r3, #4
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d101      	bne.n	800e580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e57c:	2301      	movs	r3, #1
 800e57e:	e0d6      	b.n	800e72e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e580:	4b28      	ldr	r3, [pc, #160]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e582:	691b      	ldr	r3, [r3, #16]
 800e584:	f023 0207 	bic.w	r2, r3, #7
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	4925      	ldr	r1, [pc, #148]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e58e:	4313      	orrs	r3, r2
 800e590:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e592:	f7f7 faa7 	bl	8005ae4 <HAL_GetTick>
 800e596:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e598:	e00a      	b.n	800e5b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e59a:	f7f7 faa3 	bl	8005ae4 <HAL_GetTick>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	1ad3      	subs	r3, r2, r3
 800e5a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d901      	bls.n	800e5b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	e0be      	b.n	800e72e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e5b0:	4b1c      	ldr	r3, [pc, #112]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	00db      	lsls	r3, r3, #3
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d1eb      	bne.n	800e59a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f003 0302 	and.w	r3, r3, #2
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d010      	beq.n	800e5f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	68da      	ldr	r2, [r3, #12]
 800e5d2:	4b14      	ldr	r3, [pc, #80]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e5d4:	699b      	ldr	r3, [r3, #24]
 800e5d6:	f003 030f 	and.w	r3, r3, #15
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d208      	bcs.n	800e5f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e5de:	4b11      	ldr	r3, [pc, #68]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e5e0:	699b      	ldr	r3, [r3, #24]
 800e5e2:	f023 020f 	bic.w	r2, r3, #15
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	490e      	ldr	r1, [pc, #56]	; (800e624 <HAL_RCC_ClockConfig+0x244>)
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e5f0:	4b0b      	ldr	r3, [pc, #44]	; (800e620 <HAL_RCC_ClockConfig+0x240>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f003 030f 	and.w	r3, r3, #15
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d214      	bcs.n	800e628 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e5fe:	4b08      	ldr	r3, [pc, #32]	; (800e620 <HAL_RCC_ClockConfig+0x240>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f023 020f 	bic.w	r2, r3, #15
 800e606:	4906      	ldr	r1, [pc, #24]	; (800e620 <HAL_RCC_ClockConfig+0x240>)
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e60e:	4b04      	ldr	r3, [pc, #16]	; (800e620 <HAL_RCC_ClockConfig+0x240>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f003 030f 	and.w	r3, r3, #15
 800e616:	683a      	ldr	r2, [r7, #0]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d005      	beq.n	800e628 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	e086      	b.n	800e72e <HAL_RCC_ClockConfig+0x34e>
 800e620:	52002000 	.word	0x52002000
 800e624:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f003 0304 	and.w	r3, r3, #4
 800e630:	2b00      	cmp	r3, #0
 800e632:	d010      	beq.n	800e656 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	691a      	ldr	r2, [r3, #16]
 800e638:	4b3f      	ldr	r3, [pc, #252]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e63a:	699b      	ldr	r3, [r3, #24]
 800e63c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e640:	429a      	cmp	r2, r3
 800e642:	d208      	bcs.n	800e656 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e644:	4b3c      	ldr	r3, [pc, #240]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e646:	699b      	ldr	r3, [r3, #24]
 800e648:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	4939      	ldr	r1, [pc, #228]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e652:	4313      	orrs	r3, r2
 800e654:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f003 0308 	and.w	r3, r3, #8
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d010      	beq.n	800e684 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	695a      	ldr	r2, [r3, #20]
 800e666:	4b34      	ldr	r3, [pc, #208]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e668:	69db      	ldr	r3, [r3, #28]
 800e66a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e66e:	429a      	cmp	r2, r3
 800e670:	d208      	bcs.n	800e684 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e672:	4b31      	ldr	r3, [pc, #196]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e674:	69db      	ldr	r3, [r3, #28]
 800e676:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	695b      	ldr	r3, [r3, #20]
 800e67e:	492e      	ldr	r1, [pc, #184]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e680:	4313      	orrs	r3, r2
 800e682:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f003 0310 	and.w	r3, r3, #16
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d010      	beq.n	800e6b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	699a      	ldr	r2, [r3, #24]
 800e694:	4b28      	ldr	r3, [pc, #160]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e696:	69db      	ldr	r3, [r3, #28]
 800e698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d208      	bcs.n	800e6b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e6a0:	4b25      	ldr	r3, [pc, #148]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e6a2:	69db      	ldr	r3, [r3, #28]
 800e6a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	699b      	ldr	r3, [r3, #24]
 800e6ac:	4922      	ldr	r1, [pc, #136]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f003 0320 	and.w	r3, r3, #32
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d010      	beq.n	800e6e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	69da      	ldr	r2, [r3, #28]
 800e6c2:	4b1d      	ldr	r3, [pc, #116]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e6c4:	6a1b      	ldr	r3, [r3, #32]
 800e6c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d208      	bcs.n	800e6e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e6ce:	4b1a      	ldr	r3, [pc, #104]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e6d0:	6a1b      	ldr	r3, [r3, #32]
 800e6d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	69db      	ldr	r3, [r3, #28]
 800e6da:	4917      	ldr	r1, [pc, #92]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e6e0:	f000 f834 	bl	800e74c <HAL_RCC_GetSysClockFreq>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	4b14      	ldr	r3, [pc, #80]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e6e8:	699b      	ldr	r3, [r3, #24]
 800e6ea:	0a1b      	lsrs	r3, r3, #8
 800e6ec:	f003 030f 	and.w	r3, r3, #15
 800e6f0:	4912      	ldr	r1, [pc, #72]	; (800e73c <HAL_RCC_ClockConfig+0x35c>)
 800e6f2:	5ccb      	ldrb	r3, [r1, r3]
 800e6f4:	f003 031f 	and.w	r3, r3, #31
 800e6f8:	fa22 f303 	lsr.w	r3, r2, r3
 800e6fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e6fe:	4b0e      	ldr	r3, [pc, #56]	; (800e738 <HAL_RCC_ClockConfig+0x358>)
 800e700:	699b      	ldr	r3, [r3, #24]
 800e702:	f003 030f 	and.w	r3, r3, #15
 800e706:	4a0d      	ldr	r2, [pc, #52]	; (800e73c <HAL_RCC_ClockConfig+0x35c>)
 800e708:	5cd3      	ldrb	r3, [r2, r3]
 800e70a:	f003 031f 	and.w	r3, r3, #31
 800e70e:	693a      	ldr	r2, [r7, #16]
 800e710:	fa22 f303 	lsr.w	r3, r2, r3
 800e714:	4a0a      	ldr	r2, [pc, #40]	; (800e740 <HAL_RCC_ClockConfig+0x360>)
 800e716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e718:	4a0a      	ldr	r2, [pc, #40]	; (800e744 <HAL_RCC_ClockConfig+0x364>)
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e71e:	4b0a      	ldr	r3, [pc, #40]	; (800e748 <HAL_RCC_ClockConfig+0x368>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4618      	mov	r0, r3
 800e724:	f7f5 ff42 	bl	80045ac <HAL_InitTick>
 800e728:	4603      	mov	r3, r0
 800e72a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3718      	adds	r7, #24
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	58024400 	.word	0x58024400
 800e73c:	0801ae14 	.word	0x0801ae14
 800e740:	240000c4 	.word	0x240000c4
 800e744:	240000c0 	.word	0x240000c0
 800e748:	240000c8 	.word	0x240000c8

0800e74c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b089      	sub	sp, #36	; 0x24
 800e750:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e752:	4bb3      	ldr	r3, [pc, #716]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e754:	691b      	ldr	r3, [r3, #16]
 800e756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e75a:	2b18      	cmp	r3, #24
 800e75c:	f200 8155 	bhi.w	800ea0a <HAL_RCC_GetSysClockFreq+0x2be>
 800e760:	a201      	add	r2, pc, #4	; (adr r2, 800e768 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e766:	bf00      	nop
 800e768:	0800e7cd 	.word	0x0800e7cd
 800e76c:	0800ea0b 	.word	0x0800ea0b
 800e770:	0800ea0b 	.word	0x0800ea0b
 800e774:	0800ea0b 	.word	0x0800ea0b
 800e778:	0800ea0b 	.word	0x0800ea0b
 800e77c:	0800ea0b 	.word	0x0800ea0b
 800e780:	0800ea0b 	.word	0x0800ea0b
 800e784:	0800ea0b 	.word	0x0800ea0b
 800e788:	0800e7f3 	.word	0x0800e7f3
 800e78c:	0800ea0b 	.word	0x0800ea0b
 800e790:	0800ea0b 	.word	0x0800ea0b
 800e794:	0800ea0b 	.word	0x0800ea0b
 800e798:	0800ea0b 	.word	0x0800ea0b
 800e79c:	0800ea0b 	.word	0x0800ea0b
 800e7a0:	0800ea0b 	.word	0x0800ea0b
 800e7a4:	0800ea0b 	.word	0x0800ea0b
 800e7a8:	0800e7f9 	.word	0x0800e7f9
 800e7ac:	0800ea0b 	.word	0x0800ea0b
 800e7b0:	0800ea0b 	.word	0x0800ea0b
 800e7b4:	0800ea0b 	.word	0x0800ea0b
 800e7b8:	0800ea0b 	.word	0x0800ea0b
 800e7bc:	0800ea0b 	.word	0x0800ea0b
 800e7c0:	0800ea0b 	.word	0x0800ea0b
 800e7c4:	0800ea0b 	.word	0x0800ea0b
 800e7c8:	0800e7ff 	.word	0x0800e7ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7cc:	4b94      	ldr	r3, [pc, #592]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f003 0320 	and.w	r3, r3, #32
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d009      	beq.n	800e7ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e7d8:	4b91      	ldr	r3, [pc, #580]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	08db      	lsrs	r3, r3, #3
 800e7de:	f003 0303 	and.w	r3, r3, #3
 800e7e2:	4a90      	ldr	r2, [pc, #576]	; (800ea24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e7e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e7ea:	e111      	b.n	800ea10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e7ec:	4b8d      	ldr	r3, [pc, #564]	; (800ea24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e7ee:	61bb      	str	r3, [r7, #24]
      break;
 800e7f0:	e10e      	b.n	800ea10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e7f2:	4b8d      	ldr	r3, [pc, #564]	; (800ea28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e7f4:	61bb      	str	r3, [r7, #24]
      break;
 800e7f6:	e10b      	b.n	800ea10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e7f8:	4b8c      	ldr	r3, [pc, #560]	; (800ea2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e7fa:	61bb      	str	r3, [r7, #24]
      break;
 800e7fc:	e108      	b.n	800ea10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e7fe:	4b88      	ldr	r3, [pc, #544]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e802:	f003 0303 	and.w	r3, r3, #3
 800e806:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e808:	4b85      	ldr	r3, [pc, #532]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80c:	091b      	lsrs	r3, r3, #4
 800e80e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e812:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e814:	4b82      	ldr	r3, [pc, #520]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e818:	f003 0301 	and.w	r3, r3, #1
 800e81c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e81e:	4b80      	ldr	r3, [pc, #512]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e822:	08db      	lsrs	r3, r3, #3
 800e824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	fb02 f303 	mul.w	r3, r2, r3
 800e82e:	ee07 3a90 	vmov	s15, r3
 800e832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e836:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f000 80e1 	beq.w	800ea04 <HAL_RCC_GetSysClockFreq+0x2b8>
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	2b02      	cmp	r3, #2
 800e846:	f000 8083 	beq.w	800e950 <HAL_RCC_GetSysClockFreq+0x204>
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	2b02      	cmp	r3, #2
 800e84e:	f200 80a1 	bhi.w	800e994 <HAL_RCC_GetSysClockFreq+0x248>
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d003      	beq.n	800e860 <HAL_RCC_GetSysClockFreq+0x114>
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d056      	beq.n	800e90c <HAL_RCC_GetSysClockFreq+0x1c0>
 800e85e:	e099      	b.n	800e994 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e860:	4b6f      	ldr	r3, [pc, #444]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f003 0320 	and.w	r3, r3, #32
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d02d      	beq.n	800e8c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e86c:	4b6c      	ldr	r3, [pc, #432]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	08db      	lsrs	r3, r3, #3
 800e872:	f003 0303 	and.w	r3, r3, #3
 800e876:	4a6b      	ldr	r2, [pc, #428]	; (800ea24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e878:	fa22 f303 	lsr.w	r3, r2, r3
 800e87c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	ee07 3a90 	vmov	s15, r3
 800e884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	ee07 3a90 	vmov	s15, r3
 800e88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e896:	4b62      	ldr	r3, [pc, #392]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e89e:	ee07 3a90 	vmov	s15, r3
 800e8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ea30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e8c6:	e087      	b.n	800e9d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	ee07 3a90 	vmov	s15, r3
 800e8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ea34 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8da:	4b51      	ldr	r3, [pc, #324]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8e2:	ee07 3a90 	vmov	s15, r3
 800e8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ea30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e90a:	e065      	b.n	800e9d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	ee07 3a90 	vmov	s15, r3
 800e912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e916:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ea38 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e91e:	4b40      	ldr	r3, [pc, #256]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e926:	ee07 3a90 	vmov	s15, r3
 800e92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e92e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e932:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ea30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e93e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e94a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e94e:	e043      	b.n	800e9d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	ee07 3a90 	vmov	s15, r3
 800e956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e95a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ea3c <HAL_RCC_GetSysClockFreq+0x2f0>
 800e95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e962:	4b2f      	ldr	r3, [pc, #188]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e96a:	ee07 3a90 	vmov	s15, r3
 800e96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e972:	ed97 6a02 	vldr	s12, [r7, #8]
 800e976:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ea30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e98e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e992:	e021      	b.n	800e9d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	ee07 3a90 	vmov	s15, r3
 800e99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e99e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ea38 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9a6:	4b1e      	ldr	r3, [pc, #120]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9ae:	ee07 3a90 	vmov	s15, r3
 800e9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e9ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ea30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e9d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e9d8:	4b11      	ldr	r3, [pc, #68]	; (800ea20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9dc:	0a5b      	lsrs	r3, r3, #9
 800e9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	ee07 3a90 	vmov	s15, r3
 800e9ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e9f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9fc:	ee17 3a90 	vmov	r3, s15
 800ea00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ea02:	e005      	b.n	800ea10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ea04:	2300      	movs	r3, #0
 800ea06:	61bb      	str	r3, [r7, #24]
      break;
 800ea08:	e002      	b.n	800ea10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ea0a:	4b07      	ldr	r3, [pc, #28]	; (800ea28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ea0c:	61bb      	str	r3, [r7, #24]
      break;
 800ea0e:	bf00      	nop
  }

  return sysclockfreq;
 800ea10:	69bb      	ldr	r3, [r7, #24]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3724      	adds	r7, #36	; 0x24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	58024400 	.word	0x58024400
 800ea24:	03d09000 	.word	0x03d09000
 800ea28:	003d0900 	.word	0x003d0900
 800ea2c:	017d7840 	.word	0x017d7840
 800ea30:	46000000 	.word	0x46000000
 800ea34:	4c742400 	.word	0x4c742400
 800ea38:	4a742400 	.word	0x4a742400
 800ea3c:	4bbebc20 	.word	0x4bbebc20

0800ea40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ea46:	f7ff fe81 	bl	800e74c <HAL_RCC_GetSysClockFreq>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	4b10      	ldr	r3, [pc, #64]	; (800ea90 <HAL_RCC_GetHCLKFreq+0x50>)
 800ea4e:	699b      	ldr	r3, [r3, #24]
 800ea50:	0a1b      	lsrs	r3, r3, #8
 800ea52:	f003 030f 	and.w	r3, r3, #15
 800ea56:	490f      	ldr	r1, [pc, #60]	; (800ea94 <HAL_RCC_GetHCLKFreq+0x54>)
 800ea58:	5ccb      	ldrb	r3, [r1, r3]
 800ea5a:	f003 031f 	and.w	r3, r3, #31
 800ea5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ea62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ea64:	4b0a      	ldr	r3, [pc, #40]	; (800ea90 <HAL_RCC_GetHCLKFreq+0x50>)
 800ea66:	699b      	ldr	r3, [r3, #24]
 800ea68:	f003 030f 	and.w	r3, r3, #15
 800ea6c:	4a09      	ldr	r2, [pc, #36]	; (800ea94 <HAL_RCC_GetHCLKFreq+0x54>)
 800ea6e:	5cd3      	ldrb	r3, [r2, r3]
 800ea70:	f003 031f 	and.w	r3, r3, #31
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	fa22 f303 	lsr.w	r3, r2, r3
 800ea7a:	4a07      	ldr	r2, [pc, #28]	; (800ea98 <HAL_RCC_GetHCLKFreq+0x58>)
 800ea7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ea7e:	4a07      	ldr	r2, [pc, #28]	; (800ea9c <HAL_RCC_GetHCLKFreq+0x5c>)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ea84:	4b04      	ldr	r3, [pc, #16]	; (800ea98 <HAL_RCC_GetHCLKFreq+0x58>)
 800ea86:	681b      	ldr	r3, [r3, #0]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	58024400 	.word	0x58024400
 800ea94:	0801ae14 	.word	0x0801ae14
 800ea98:	240000c4 	.word	0x240000c4
 800ea9c:	240000c0 	.word	0x240000c0

0800eaa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800eaa4:	f7ff ffcc 	bl	800ea40 <HAL_RCC_GetHCLKFreq>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	4b06      	ldr	r3, [pc, #24]	; (800eac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eaac:	69db      	ldr	r3, [r3, #28]
 800eaae:	091b      	lsrs	r3, r3, #4
 800eab0:	f003 0307 	and.w	r3, r3, #7
 800eab4:	4904      	ldr	r1, [pc, #16]	; (800eac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800eab6:	5ccb      	ldrb	r3, [r1, r3]
 800eab8:	f003 031f 	and.w	r3, r3, #31
 800eabc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	58024400 	.word	0x58024400
 800eac8:	0801ae14 	.word	0x0801ae14

0800eacc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ead0:	f7ff ffb6 	bl	800ea40 <HAL_RCC_GetHCLKFreq>
 800ead4:	4602      	mov	r2, r0
 800ead6:	4b06      	ldr	r3, [pc, #24]	; (800eaf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ead8:	69db      	ldr	r3, [r3, #28]
 800eada:	0a1b      	lsrs	r3, r3, #8
 800eadc:	f003 0307 	and.w	r3, r3, #7
 800eae0:	4904      	ldr	r1, [pc, #16]	; (800eaf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800eae2:	5ccb      	ldrb	r3, [r1, r3]
 800eae4:	f003 031f 	and.w	r3, r3, #31
 800eae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	58024400 	.word	0x58024400
 800eaf4:	0801ae14 	.word	0x0801ae14

0800eaf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	223f      	movs	r2, #63	; 0x3f
 800eb06:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800eb08:	4b1a      	ldr	r3, [pc, #104]	; (800eb74 <HAL_RCC_GetClockConfig+0x7c>)
 800eb0a:	691b      	ldr	r3, [r3, #16]
 800eb0c:	f003 0207 	and.w	r2, r3, #7
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800eb14:	4b17      	ldr	r3, [pc, #92]	; (800eb74 <HAL_RCC_GetClockConfig+0x7c>)
 800eb16:	699b      	ldr	r3, [r3, #24]
 800eb18:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800eb20:	4b14      	ldr	r3, [pc, #80]	; (800eb74 <HAL_RCC_GetClockConfig+0x7c>)
 800eb22:	699b      	ldr	r3, [r3, #24]
 800eb24:	f003 020f 	and.w	r2, r3, #15
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800eb2c:	4b11      	ldr	r3, [pc, #68]	; (800eb74 <HAL_RCC_GetClockConfig+0x7c>)
 800eb2e:	699b      	ldr	r3, [r3, #24]
 800eb30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800eb38:	4b0e      	ldr	r3, [pc, #56]	; (800eb74 <HAL_RCC_GetClockConfig+0x7c>)
 800eb3a:	69db      	ldr	r3, [r3, #28]
 800eb3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800eb44:	4b0b      	ldr	r3, [pc, #44]	; (800eb74 <HAL_RCC_GetClockConfig+0x7c>)
 800eb46:	69db      	ldr	r3, [r3, #28]
 800eb48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800eb50:	4b08      	ldr	r3, [pc, #32]	; (800eb74 <HAL_RCC_GetClockConfig+0x7c>)
 800eb52:	6a1b      	ldr	r3, [r3, #32]
 800eb54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800eb5c:	4b06      	ldr	r3, [pc, #24]	; (800eb78 <HAL_RCC_GetClockConfig+0x80>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f003 020f 	and.w	r2, r3, #15
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	601a      	str	r2, [r3, #0]
}
 800eb68:	bf00      	nop
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr
 800eb74:	58024400 	.word	0x58024400
 800eb78:	52002000 	.word	0x52002000

0800eb7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800eb7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb80:	b0ca      	sub	sp, #296	; 0x128
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800eb8e:	2300      	movs	r3, #0
 800eb90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800eb94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800eba0:	2500      	movs	r5, #0
 800eba2:	ea54 0305 	orrs.w	r3, r4, r5
 800eba6:	d049      	beq.n	800ec3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800eba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ebb2:	d02f      	beq.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ebb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ebb8:	d828      	bhi.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ebba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebbe:	d01a      	beq.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ebc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebc4:	d822      	bhi.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d003      	beq.n	800ebd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ebca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebce:	d007      	beq.n	800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ebd0:	e01c      	b.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebd2:	4bb8      	ldr	r3, [pc, #736]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd6:	4ab7      	ldr	r2, [pc, #732]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ebde:	e01a      	b.n	800ec16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ebe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebe4:	3308      	adds	r3, #8
 800ebe6:	2102      	movs	r1, #2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f002 fb61 	bl	80112b0 <RCCEx_PLL2_Config>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ebf4:	e00f      	b.n	800ec16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ebf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebfa:	3328      	adds	r3, #40	; 0x28
 800ebfc:	2102      	movs	r1, #2
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f002 fc08 	bl	8011414 <RCCEx_PLL3_Config>
 800ec04:	4603      	mov	r3, r0
 800ec06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ec0a:	e004      	b.n	800ec16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec12:	e000      	b.n	800ec16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ec14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d10a      	bne.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ec1e:	4ba5      	ldr	r3, [pc, #660]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ec26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec2c:	4aa1      	ldr	r2, [pc, #644]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec2e:	430b      	orrs	r3, r1
 800ec30:	6513      	str	r3, [r2, #80]	; 0x50
 800ec32:	e003      	b.n	800ec3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ec3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec44:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ec48:	f04f 0900 	mov.w	r9, #0
 800ec4c:	ea58 0309 	orrs.w	r3, r8, r9
 800ec50:	d047      	beq.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ec52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec58:	2b04      	cmp	r3, #4
 800ec5a:	d82a      	bhi.n	800ecb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ec5c:	a201      	add	r2, pc, #4	; (adr r2, 800ec64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ec5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec62:	bf00      	nop
 800ec64:	0800ec79 	.word	0x0800ec79
 800ec68:	0800ec87 	.word	0x0800ec87
 800ec6c:	0800ec9d 	.word	0x0800ec9d
 800ec70:	0800ecbb 	.word	0x0800ecbb
 800ec74:	0800ecbb 	.word	0x0800ecbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec78:	4b8e      	ldr	r3, [pc, #568]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7c:	4a8d      	ldr	r2, [pc, #564]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec84:	e01a      	b.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec8a:	3308      	adds	r3, #8
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f002 fb0e 	bl	80112b0 <RCCEx_PLL2_Config>
 800ec94:	4603      	mov	r3, r0
 800ec96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec9a:	e00f      	b.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eca0:	3328      	adds	r3, #40	; 0x28
 800eca2:	2100      	movs	r1, #0
 800eca4:	4618      	mov	r0, r3
 800eca6:	f002 fbb5 	bl	8011414 <RCCEx_PLL3_Config>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ecb0:	e004      	b.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ecb8:	e000      	b.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ecba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d10a      	bne.n	800ecda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ecc4:	4b7b      	ldr	r3, [pc, #492]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecc8:	f023 0107 	bic.w	r1, r3, #7
 800eccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecd2:	4a78      	ldr	r2, [pc, #480]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecd4:	430b      	orrs	r3, r1
 800ecd6:	6513      	str	r3, [r2, #80]	; 0x50
 800ecd8:	e003      	b.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ece2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ece6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ecee:	f04f 0b00 	mov.w	fp, #0
 800ecf2:	ea5a 030b 	orrs.w	r3, sl, fp
 800ecf6:	d04c      	beq.n	800ed92 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ecf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed02:	d030      	beq.n	800ed66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ed04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed08:	d829      	bhi.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ed0a:	2bc0      	cmp	r3, #192	; 0xc0
 800ed0c:	d02d      	beq.n	800ed6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ed0e:	2bc0      	cmp	r3, #192	; 0xc0
 800ed10:	d825      	bhi.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ed12:	2b80      	cmp	r3, #128	; 0x80
 800ed14:	d018      	beq.n	800ed48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ed16:	2b80      	cmp	r3, #128	; 0x80
 800ed18:	d821      	bhi.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d002      	beq.n	800ed24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ed1e:	2b40      	cmp	r3, #64	; 0x40
 800ed20:	d007      	beq.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ed22:	e01c      	b.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed24:	4b63      	ldr	r3, [pc, #396]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed28:	4a62      	ldr	r2, [pc, #392]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ed30:	e01c      	b.n	800ed6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed36:	3308      	adds	r3, #8
 800ed38:	2100      	movs	r1, #0
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f002 fab8 	bl	80112b0 <RCCEx_PLL2_Config>
 800ed40:	4603      	mov	r3, r0
 800ed42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ed46:	e011      	b.n	800ed6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ed48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed4c:	3328      	adds	r3, #40	; 0x28
 800ed4e:	2100      	movs	r1, #0
 800ed50:	4618      	mov	r0, r3
 800ed52:	f002 fb5f 	bl	8011414 <RCCEx_PLL3_Config>
 800ed56:	4603      	mov	r3, r0
 800ed58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ed5c:	e006      	b.n	800ed6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ed64:	e002      	b.n	800ed6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ed66:	bf00      	nop
 800ed68:	e000      	b.n	800ed6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ed6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d10a      	bne.n	800ed8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ed74:	4b4f      	ldr	r3, [pc, #316]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed78:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ed7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed82:	4a4c      	ldr	r2, [pc, #304]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed84:	430b      	orrs	r3, r1
 800ed86:	6513      	str	r3, [r2, #80]	; 0x50
 800ed88:	e003      	b.n	800ed92 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ed92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ed9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800eda2:	2300      	movs	r3, #0
 800eda4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800eda8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800edac:	460b      	mov	r3, r1
 800edae:	4313      	orrs	r3, r2
 800edb0:	d053      	beq.n	800ee5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800edb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800edba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800edbe:	d035      	beq.n	800ee2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800edc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800edc4:	d82e      	bhi.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800edc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800edca:	d031      	beq.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800edcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800edd0:	d828      	bhi.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800edd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800edd6:	d01a      	beq.n	800ee0e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800edd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eddc:	d822      	bhi.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d003      	beq.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ede2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ede6:	d007      	beq.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ede8:	e01c      	b.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edea:	4b32      	ldr	r3, [pc, #200]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800edec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edee:	4a31      	ldr	r2, [pc, #196]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800edf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800edf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800edf6:	e01c      	b.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edfc:	3308      	adds	r3, #8
 800edfe:	2100      	movs	r1, #0
 800ee00:	4618      	mov	r0, r3
 800ee02:	f002 fa55 	bl	80112b0 <RCCEx_PLL2_Config>
 800ee06:	4603      	mov	r3, r0
 800ee08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ee0c:	e011      	b.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee12:	3328      	adds	r3, #40	; 0x28
 800ee14:	2100      	movs	r1, #0
 800ee16:	4618      	mov	r0, r3
 800ee18:	f002 fafc 	bl	8011414 <RCCEx_PLL3_Config>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee22:	e006      	b.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ee24:	2301      	movs	r3, #1
 800ee26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee2a:	e002      	b.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ee2c:	bf00      	nop
 800ee2e:	e000      	b.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ee30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d10b      	bne.n	800ee52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ee3a:	4b1e      	ldr	r3, [pc, #120]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ee3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee3e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ee42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ee4a:	4a1a      	ldr	r2, [pc, #104]	; (800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ee4c:	430b      	orrs	r3, r1
 800ee4e:	6593      	str	r3, [r2, #88]	; 0x58
 800ee50:	e003      	b.n	800ee5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ee5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee62:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ee66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ee70:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ee74:	460b      	mov	r3, r1
 800ee76:	4313      	orrs	r3, r2
 800ee78:	d056      	beq.n	800ef28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ee7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ee82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee86:	d038      	beq.n	800eefa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ee88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee8c:	d831      	bhi.n	800eef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ee8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ee92:	d034      	beq.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ee94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ee98:	d82b      	bhi.n	800eef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ee9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee9e:	d01d      	beq.n	800eedc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800eea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eea4:	d825      	bhi.n	800eef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d006      	beq.n	800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800eeaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eeae:	d00a      	beq.n	800eec6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800eeb0:	e01f      	b.n	800eef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eeb2:	bf00      	nop
 800eeb4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eeb8:	4ba2      	ldr	r3, [pc, #648]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebc:	4aa1      	ldr	r2, [pc, #644]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eec4:	e01c      	b.n	800ef00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeca:	3308      	adds	r3, #8
 800eecc:	2100      	movs	r1, #0
 800eece:	4618      	mov	r0, r3
 800eed0:	f002 f9ee 	bl	80112b0 <RCCEx_PLL2_Config>
 800eed4:	4603      	mov	r3, r0
 800eed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800eeda:	e011      	b.n	800ef00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eee0:	3328      	adds	r3, #40	; 0x28
 800eee2:	2100      	movs	r1, #0
 800eee4:	4618      	mov	r0, r3
 800eee6:	f002 fa95 	bl	8011414 <RCCEx_PLL3_Config>
 800eeea:	4603      	mov	r3, r0
 800eeec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eef0:	e006      	b.n	800ef00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800eef2:	2301      	movs	r3, #1
 800eef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eef8:	e002      	b.n	800ef00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800eefa:	bf00      	nop
 800eefc:	e000      	b.n	800ef00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800eefe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d10b      	bne.n	800ef20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ef08:	4b8e      	ldr	r3, [pc, #568]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef0c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ef10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ef18:	4a8a      	ldr	r2, [pc, #552]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef1a:	430b      	orrs	r3, r1
 800ef1c:	6593      	str	r3, [r2, #88]	; 0x58
 800ef1e:	e003      	b.n	800ef28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ef28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef30:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ef34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ef38:	2300      	movs	r3, #0
 800ef3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ef3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ef42:	460b      	mov	r3, r1
 800ef44:	4313      	orrs	r3, r2
 800ef46:	d03a      	beq.n	800efbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ef48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef4e:	2b30      	cmp	r3, #48	; 0x30
 800ef50:	d01f      	beq.n	800ef92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ef52:	2b30      	cmp	r3, #48	; 0x30
 800ef54:	d819      	bhi.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ef56:	2b20      	cmp	r3, #32
 800ef58:	d00c      	beq.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ef5a:	2b20      	cmp	r3, #32
 800ef5c:	d815      	bhi.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d019      	beq.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ef62:	2b10      	cmp	r3, #16
 800ef64:	d111      	bne.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef66:	4b77      	ldr	r3, [pc, #476]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef6a:	4a76      	ldr	r2, [pc, #472]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ef72:	e011      	b.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ef74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef78:	3308      	adds	r3, #8
 800ef7a:	2102      	movs	r1, #2
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f002 f997 	bl	80112b0 <RCCEx_PLL2_Config>
 800ef82:	4603      	mov	r3, r0
 800ef84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ef88:	e006      	b.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef90:	e002      	b.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ef92:	bf00      	nop
 800ef94:	e000      	b.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ef96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d10a      	bne.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800efa0:	4b68      	ldr	r3, [pc, #416]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efa4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800efa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efae:	4a65      	ldr	r2, [pc, #404]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efb0:	430b      	orrs	r3, r1
 800efb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800efb4:	e003      	b.n	800efbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800efbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800efca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800efce:	2300      	movs	r3, #0
 800efd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800efd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800efd8:	460b      	mov	r3, r1
 800efda:	4313      	orrs	r3, r2
 800efdc:	d051      	beq.n	800f082 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800efde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800efe8:	d035      	beq.n	800f056 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800efea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800efee:	d82e      	bhi.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800eff0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800eff4:	d031      	beq.n	800f05a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800eff6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800effa:	d828      	bhi.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800effc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f000:	d01a      	beq.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f006:	d822      	bhi.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d003      	beq.n	800f014 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f00c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f010:	d007      	beq.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f012:	e01c      	b.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f014:	4b4b      	ldr	r3, [pc, #300]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f018:	4a4a      	ldr	r2, [pc, #296]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f01a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f01e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f020:	e01c      	b.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f026:	3308      	adds	r3, #8
 800f028:	2100      	movs	r1, #0
 800f02a:	4618      	mov	r0, r3
 800f02c:	f002 f940 	bl	80112b0 <RCCEx_PLL2_Config>
 800f030:	4603      	mov	r3, r0
 800f032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f036:	e011      	b.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f03c:	3328      	adds	r3, #40	; 0x28
 800f03e:	2100      	movs	r1, #0
 800f040:	4618      	mov	r0, r3
 800f042:	f002 f9e7 	bl	8011414 <RCCEx_PLL3_Config>
 800f046:	4603      	mov	r3, r0
 800f048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f04c:	e006      	b.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f04e:	2301      	movs	r3, #1
 800f050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f054:	e002      	b.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f056:	bf00      	nop
 800f058:	e000      	b.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f05a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f05c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f060:	2b00      	cmp	r3, #0
 800f062:	d10a      	bne.n	800f07a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f064:	4b37      	ldr	r3, [pc, #220]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f068:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f072:	4a34      	ldr	r2, [pc, #208]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f074:	430b      	orrs	r3, r1
 800f076:	6513      	str	r3, [r2, #80]	; 0x50
 800f078:	e003      	b.n	800f082 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f07a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f07e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f08e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f092:	2300      	movs	r3, #0
 800f094:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f098:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f09c:	460b      	mov	r3, r1
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	d056      	beq.n	800f150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f0ac:	d033      	beq.n	800f116 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f0ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f0b2:	d82c      	bhi.n	800f10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f0b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f0b8:	d02f      	beq.n	800f11a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f0ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f0be:	d826      	bhi.n	800f10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f0c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f0c4:	d02b      	beq.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f0c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f0ca:	d820      	bhi.n	800f10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f0cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f0d0:	d012      	beq.n	800f0f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f0d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f0d6:	d81a      	bhi.n	800f10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d022      	beq.n	800f122 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0e0:	d115      	bne.n	800f10e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e6:	3308      	adds	r3, #8
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f002 f8e0 	bl	80112b0 <RCCEx_PLL2_Config>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f0f6:	e015      	b.n	800f124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0fc:	3328      	adds	r3, #40	; 0x28
 800f0fe:	2101      	movs	r1, #1
 800f100:	4618      	mov	r0, r3
 800f102:	f002 f987 	bl	8011414 <RCCEx_PLL3_Config>
 800f106:	4603      	mov	r3, r0
 800f108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f10c:	e00a      	b.n	800f124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f10e:	2301      	movs	r3, #1
 800f110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f114:	e006      	b.n	800f124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f116:	bf00      	nop
 800f118:	e004      	b.n	800f124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f11a:	bf00      	nop
 800f11c:	e002      	b.n	800f124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f11e:	bf00      	nop
 800f120:	e000      	b.n	800f124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f122:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d10d      	bne.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f12c:	4b05      	ldr	r3, [pc, #20]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f130:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f13a:	4a02      	ldr	r2, [pc, #8]	; (800f144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f13c:	430b      	orrs	r3, r1
 800f13e:	6513      	str	r3, [r2, #80]	; 0x50
 800f140:	e006      	b.n	800f150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f142:	bf00      	nop
 800f144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f14c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f158:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f15c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f160:	2300      	movs	r3, #0
 800f162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f166:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f16a:	460b      	mov	r3, r1
 800f16c:	4313      	orrs	r3, r2
 800f16e:	d055      	beq.n	800f21c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f17c:	d033      	beq.n	800f1e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f17e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f182:	d82c      	bhi.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f188:	d02f      	beq.n	800f1ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f18e:	d826      	bhi.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f194:	d02b      	beq.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f19a:	d820      	bhi.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f19c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1a0:	d012      	beq.n	800f1c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f1a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1a6:	d81a      	bhi.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d022      	beq.n	800f1f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f1ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1b0:	d115      	bne.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1b6:	3308      	adds	r3, #8
 800f1b8:	2101      	movs	r1, #1
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f002 f878 	bl	80112b0 <RCCEx_PLL2_Config>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f1c6:	e015      	b.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1cc:	3328      	adds	r3, #40	; 0x28
 800f1ce:	2101      	movs	r1, #1
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f002 f91f 	bl	8011414 <RCCEx_PLL3_Config>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f1dc:	e00a      	b.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f1e4:	e006      	b.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f1e6:	bf00      	nop
 800f1e8:	e004      	b.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f1ea:	bf00      	nop
 800f1ec:	e002      	b.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f1ee:	bf00      	nop
 800f1f0:	e000      	b.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f1f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d10b      	bne.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f1fc:	4ba3      	ldr	r3, [pc, #652]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f200:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f208:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f20c:	4a9f      	ldr	r2, [pc, #636]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f20e:	430b      	orrs	r3, r1
 800f210:	6593      	str	r3, [r2, #88]	; 0x58
 800f212:	e003      	b.n	800f21c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f218:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f224:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f22c:	2300      	movs	r3, #0
 800f22e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f236:	460b      	mov	r3, r1
 800f238:	4313      	orrs	r3, r2
 800f23a:	d037      	beq.n	800f2ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f246:	d00e      	beq.n	800f266 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f24c:	d816      	bhi.n	800f27c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d018      	beq.n	800f284 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f256:	d111      	bne.n	800f27c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f258:	4b8c      	ldr	r3, [pc, #560]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25c:	4a8b      	ldr	r2, [pc, #556]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f25e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f264:	e00f      	b.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f26a:	3308      	adds	r3, #8
 800f26c:	2101      	movs	r1, #1
 800f26e:	4618      	mov	r0, r3
 800f270:	f002 f81e 	bl	80112b0 <RCCEx_PLL2_Config>
 800f274:	4603      	mov	r3, r0
 800f276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f27a:	e004      	b.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f27c:	2301      	movs	r3, #1
 800f27e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f282:	e000      	b.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f284:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d10a      	bne.n	800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f28e:	4b7f      	ldr	r3, [pc, #508]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f292:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f29c:	4a7b      	ldr	r2, [pc, #492]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f29e:	430b      	orrs	r3, r1
 800f2a0:	6513      	str	r3, [r2, #80]	; 0x50
 800f2a2:	e003      	b.n	800f2ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f2b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f2bc:	2300      	movs	r3, #0
 800f2be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f2c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	d039      	beq.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2d2:	2b03      	cmp	r3, #3
 800f2d4:	d81c      	bhi.n	800f310 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f2d6:	a201      	add	r2, pc, #4	; (adr r2, 800f2dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2dc:	0800f319 	.word	0x0800f319
 800f2e0:	0800f2ed 	.word	0x0800f2ed
 800f2e4:	0800f2fb 	.word	0x0800f2fb
 800f2e8:	0800f319 	.word	0x0800f319
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f2ec:	4b67      	ldr	r3, [pc, #412]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f0:	4a66      	ldr	r2, [pc, #408]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f2f8:	e00f      	b.n	800f31a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2fe:	3308      	adds	r3, #8
 800f300:	2102      	movs	r1, #2
 800f302:	4618      	mov	r0, r3
 800f304:	f001 ffd4 	bl	80112b0 <RCCEx_PLL2_Config>
 800f308:	4603      	mov	r3, r0
 800f30a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f30e:	e004      	b.n	800f31a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f310:	2301      	movs	r3, #1
 800f312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f316:	e000      	b.n	800f31a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f31a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10a      	bne.n	800f338 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f322:	4b5a      	ldr	r3, [pc, #360]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f326:	f023 0103 	bic.w	r1, r3, #3
 800f32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f32e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f330:	4a56      	ldr	r2, [pc, #344]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f332:	430b      	orrs	r3, r1
 800f334:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f336:	e003      	b.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f33c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f348:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f34c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f350:	2300      	movs	r3, #0
 800f352:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f356:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f35a:	460b      	mov	r3, r1
 800f35c:	4313      	orrs	r3, r2
 800f35e:	f000 809f 	beq.w	800f4a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f362:	4b4b      	ldr	r3, [pc, #300]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4a4a      	ldr	r2, [pc, #296]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f36c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f36e:	f7f6 fbb9 	bl	8005ae4 <HAL_GetTick>
 800f372:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f376:	e00b      	b.n	800f390 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f378:	f7f6 fbb4 	bl	8005ae4 <HAL_GetTick>
 800f37c:	4602      	mov	r2, r0
 800f37e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	2b64      	cmp	r3, #100	; 0x64
 800f386:	d903      	bls.n	800f390 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f388:	2303      	movs	r3, #3
 800f38a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f38e:	e005      	b.n	800f39c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f390:	4b3f      	ldr	r3, [pc, #252]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d0ed      	beq.n	800f378 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f39c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d179      	bne.n	800f498 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f3a4:	4b39      	ldr	r3, [pc, #228]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f3b0:	4053      	eors	r3, r2
 800f3b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d015      	beq.n	800f3e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f3ba:	4b34      	ldr	r3, [pc, #208]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f3c6:	4b31      	ldr	r3, [pc, #196]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ca:	4a30      	ldr	r2, [pc, #192]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3d0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f3d2:	4b2e      	ldr	r3, [pc, #184]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3d6:	4a2d      	ldr	r2, [pc, #180]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f3dc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f3de:	4a2b      	ldr	r2, [pc, #172]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f3e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f3ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3f2:	d118      	bne.n	800f426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3f4:	f7f6 fb76 	bl	8005ae4 <HAL_GetTick>
 800f3f8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f3fc:	e00d      	b.n	800f41a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f3fe:	f7f6 fb71 	bl	8005ae4 <HAL_GetTick>
 800f402:	4602      	mov	r2, r0
 800f404:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f408:	1ad2      	subs	r2, r2, r3
 800f40a:	f241 3388 	movw	r3, #5000	; 0x1388
 800f40e:	429a      	cmp	r2, r3
 800f410:	d903      	bls.n	800f41a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f412:	2303      	movs	r3, #3
 800f414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f418:	e005      	b.n	800f426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f41a:	4b1c      	ldr	r3, [pc, #112]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f41e:	f003 0302 	and.w	r3, r3, #2
 800f422:	2b00      	cmp	r3, #0
 800f424:	d0eb      	beq.n	800f3fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d129      	bne.n	800f482 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f43a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f43e:	d10e      	bne.n	800f45e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f440:	4b12      	ldr	r3, [pc, #72]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f442:	691b      	ldr	r3, [r3, #16]
 800f444:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f44c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f450:	091a      	lsrs	r2, r3, #4
 800f452:	4b10      	ldr	r3, [pc, #64]	; (800f494 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f454:	4013      	ands	r3, r2
 800f456:	4a0d      	ldr	r2, [pc, #52]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f458:	430b      	orrs	r3, r1
 800f45a:	6113      	str	r3, [r2, #16]
 800f45c:	e005      	b.n	800f46a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f45e:	4b0b      	ldr	r3, [pc, #44]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	4a0a      	ldr	r2, [pc, #40]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f464:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f468:	6113      	str	r3, [r2, #16]
 800f46a:	4b08      	ldr	r3, [pc, #32]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f46c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f47a:	4a04      	ldr	r2, [pc, #16]	; (800f48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f47c:	430b      	orrs	r3, r1
 800f47e:	6713      	str	r3, [r2, #112]	; 0x70
 800f480:	e00e      	b.n	800f4a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f48a:	e009      	b.n	800f4a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f48c:	58024400 	.word	0x58024400
 800f490:	58024800 	.word	0x58024800
 800f494:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f49c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f002 0301 	and.w	r3, r2, #1
 800f4ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f4b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f4ba:	460b      	mov	r3, r1
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	f000 8089 	beq.w	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4c8:	2b28      	cmp	r3, #40	; 0x28
 800f4ca:	d86b      	bhi.n	800f5a4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f4cc:	a201      	add	r2, pc, #4	; (adr r2, 800f4d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d2:	bf00      	nop
 800f4d4:	0800f5ad 	.word	0x0800f5ad
 800f4d8:	0800f5a5 	.word	0x0800f5a5
 800f4dc:	0800f5a5 	.word	0x0800f5a5
 800f4e0:	0800f5a5 	.word	0x0800f5a5
 800f4e4:	0800f5a5 	.word	0x0800f5a5
 800f4e8:	0800f5a5 	.word	0x0800f5a5
 800f4ec:	0800f5a5 	.word	0x0800f5a5
 800f4f0:	0800f5a5 	.word	0x0800f5a5
 800f4f4:	0800f579 	.word	0x0800f579
 800f4f8:	0800f5a5 	.word	0x0800f5a5
 800f4fc:	0800f5a5 	.word	0x0800f5a5
 800f500:	0800f5a5 	.word	0x0800f5a5
 800f504:	0800f5a5 	.word	0x0800f5a5
 800f508:	0800f5a5 	.word	0x0800f5a5
 800f50c:	0800f5a5 	.word	0x0800f5a5
 800f510:	0800f5a5 	.word	0x0800f5a5
 800f514:	0800f58f 	.word	0x0800f58f
 800f518:	0800f5a5 	.word	0x0800f5a5
 800f51c:	0800f5a5 	.word	0x0800f5a5
 800f520:	0800f5a5 	.word	0x0800f5a5
 800f524:	0800f5a5 	.word	0x0800f5a5
 800f528:	0800f5a5 	.word	0x0800f5a5
 800f52c:	0800f5a5 	.word	0x0800f5a5
 800f530:	0800f5a5 	.word	0x0800f5a5
 800f534:	0800f5ad 	.word	0x0800f5ad
 800f538:	0800f5a5 	.word	0x0800f5a5
 800f53c:	0800f5a5 	.word	0x0800f5a5
 800f540:	0800f5a5 	.word	0x0800f5a5
 800f544:	0800f5a5 	.word	0x0800f5a5
 800f548:	0800f5a5 	.word	0x0800f5a5
 800f54c:	0800f5a5 	.word	0x0800f5a5
 800f550:	0800f5a5 	.word	0x0800f5a5
 800f554:	0800f5ad 	.word	0x0800f5ad
 800f558:	0800f5a5 	.word	0x0800f5a5
 800f55c:	0800f5a5 	.word	0x0800f5a5
 800f560:	0800f5a5 	.word	0x0800f5a5
 800f564:	0800f5a5 	.word	0x0800f5a5
 800f568:	0800f5a5 	.word	0x0800f5a5
 800f56c:	0800f5a5 	.word	0x0800f5a5
 800f570:	0800f5a5 	.word	0x0800f5a5
 800f574:	0800f5ad 	.word	0x0800f5ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f57c:	3308      	adds	r3, #8
 800f57e:	2101      	movs	r1, #1
 800f580:	4618      	mov	r0, r3
 800f582:	f001 fe95 	bl	80112b0 <RCCEx_PLL2_Config>
 800f586:	4603      	mov	r3, r0
 800f588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f58c:	e00f      	b.n	800f5ae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f592:	3328      	adds	r3, #40	; 0x28
 800f594:	2101      	movs	r1, #1
 800f596:	4618      	mov	r0, r3
 800f598:	f001 ff3c 	bl	8011414 <RCCEx_PLL3_Config>
 800f59c:	4603      	mov	r3, r0
 800f59e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f5a2:	e004      	b.n	800f5ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f5aa:	e000      	b.n	800f5ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f5ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d10a      	bne.n	800f5cc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f5b6:	4bbf      	ldr	r3, [pc, #764]	; (800f8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5c4:	4abb      	ldr	r2, [pc, #748]	; (800f8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f5c6:	430b      	orrs	r3, r1
 800f5c8:	6553      	str	r3, [r2, #84]	; 0x54
 800f5ca:	e003      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5dc:	f002 0302 	and.w	r3, r2, #2
 800f5e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f5ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	d041      	beq.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5fa:	2b05      	cmp	r3, #5
 800f5fc:	d824      	bhi.n	800f648 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f5fe:	a201      	add	r2, pc, #4	; (adr r2, 800f604 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f604:	0800f651 	.word	0x0800f651
 800f608:	0800f61d 	.word	0x0800f61d
 800f60c:	0800f633 	.word	0x0800f633
 800f610:	0800f651 	.word	0x0800f651
 800f614:	0800f651 	.word	0x0800f651
 800f618:	0800f651 	.word	0x0800f651
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f620:	3308      	adds	r3, #8
 800f622:	2101      	movs	r1, #1
 800f624:	4618      	mov	r0, r3
 800f626:	f001 fe43 	bl	80112b0 <RCCEx_PLL2_Config>
 800f62a:	4603      	mov	r3, r0
 800f62c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f630:	e00f      	b.n	800f652 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f636:	3328      	adds	r3, #40	; 0x28
 800f638:	2101      	movs	r1, #1
 800f63a:	4618      	mov	r0, r3
 800f63c:	f001 feea 	bl	8011414 <RCCEx_PLL3_Config>
 800f640:	4603      	mov	r3, r0
 800f642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f646:	e004      	b.n	800f652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f648:	2301      	movs	r3, #1
 800f64a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f64e:	e000      	b.n	800f652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f650:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f656:	2b00      	cmp	r3, #0
 800f658:	d10a      	bne.n	800f670 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f65a:	4b96      	ldr	r3, [pc, #600]	; (800f8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f65e:	f023 0107 	bic.w	r1, r3, #7
 800f662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f668:	4a92      	ldr	r2, [pc, #584]	; (800f8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f66a:	430b      	orrs	r3, r1
 800f66c:	6553      	str	r3, [r2, #84]	; 0x54
 800f66e:	e003      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f680:	f002 0304 	and.w	r3, r2, #4
 800f684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f688:	2300      	movs	r3, #0
 800f68a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f68e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f692:	460b      	mov	r3, r1
 800f694:	4313      	orrs	r3, r2
 800f696:	d044      	beq.n	800f722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f69c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6a0:	2b05      	cmp	r3, #5
 800f6a2:	d825      	bhi.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f6a4:	a201      	add	r2, pc, #4	; (adr r2, 800f6ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6aa:	bf00      	nop
 800f6ac:	0800f6f9 	.word	0x0800f6f9
 800f6b0:	0800f6c5 	.word	0x0800f6c5
 800f6b4:	0800f6db 	.word	0x0800f6db
 800f6b8:	0800f6f9 	.word	0x0800f6f9
 800f6bc:	0800f6f9 	.word	0x0800f6f9
 800f6c0:	0800f6f9 	.word	0x0800f6f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6c8:	3308      	adds	r3, #8
 800f6ca:	2101      	movs	r1, #1
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f001 fdef 	bl	80112b0 <RCCEx_PLL2_Config>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f6d8:	e00f      	b.n	800f6fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6de:	3328      	adds	r3, #40	; 0x28
 800f6e0:	2101      	movs	r1, #1
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f001 fe96 	bl	8011414 <RCCEx_PLL3_Config>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f6ee:	e004      	b.n	800f6fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f6f6:	e000      	b.n	800f6fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f6f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10b      	bne.n	800f71a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f702:	4b6c      	ldr	r3, [pc, #432]	; (800f8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f706:	f023 0107 	bic.w	r1, r3, #7
 800f70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f70e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f712:	4a68      	ldr	r2, [pc, #416]	; (800f8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f714:	430b      	orrs	r3, r1
 800f716:	6593      	str	r3, [r2, #88]	; 0x58
 800f718:	e003      	b.n	800f722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f71a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f71e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	f002 0320 	and.w	r3, r2, #32
 800f72e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f732:	2300      	movs	r3, #0
 800f734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f73c:	460b      	mov	r3, r1
 800f73e:	4313      	orrs	r3, r2
 800f740:	d055      	beq.n	800f7ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f74a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f74e:	d033      	beq.n	800f7b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f754:	d82c      	bhi.n	800f7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f75a:	d02f      	beq.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f75c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f760:	d826      	bhi.n	800f7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f762:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f766:	d02b      	beq.n	800f7c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f76c:	d820      	bhi.n	800f7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f76e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f772:	d012      	beq.n	800f79a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f778:	d81a      	bhi.n	800f7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d022      	beq.n	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f77e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f782:	d115      	bne.n	800f7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f788:	3308      	adds	r3, #8
 800f78a:	2100      	movs	r1, #0
 800f78c:	4618      	mov	r0, r3
 800f78e:	f001 fd8f 	bl	80112b0 <RCCEx_PLL2_Config>
 800f792:	4603      	mov	r3, r0
 800f794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f798:	e015      	b.n	800f7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f79e:	3328      	adds	r3, #40	; 0x28
 800f7a0:	2102      	movs	r1, #2
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f001 fe36 	bl	8011414 <RCCEx_PLL3_Config>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f7ae:	e00a      	b.n	800f7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f7b6:	e006      	b.n	800f7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f7b8:	bf00      	nop
 800f7ba:	e004      	b.n	800f7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f7bc:	bf00      	nop
 800f7be:	e002      	b.n	800f7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f7c0:	bf00      	nop
 800f7c2:	e000      	b.n	800f7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f7c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d10b      	bne.n	800f7e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f7ce:	4b39      	ldr	r3, [pc, #228]	; (800f8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7de:	4a35      	ldr	r2, [pc, #212]	; (800f8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f7e0:	430b      	orrs	r3, r1
 800f7e2:	6553      	str	r3, [r2, #84]	; 0x54
 800f7e4:	e003      	b.n	800f7ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f7fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f7fe:	2300      	movs	r3, #0
 800f800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f804:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f808:	460b      	mov	r3, r1
 800f80a:	4313      	orrs	r3, r2
 800f80c:	d058      	beq.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f816:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f81a:	d033      	beq.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f81c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f820:	d82c      	bhi.n	800f87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f826:	d02f      	beq.n	800f888 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f82c:	d826      	bhi.n	800f87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f82e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f832:	d02b      	beq.n	800f88c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f838:	d820      	bhi.n	800f87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f83a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f83e:	d012      	beq.n	800f866 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f844:	d81a      	bhi.n	800f87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f846:	2b00      	cmp	r3, #0
 800f848:	d022      	beq.n	800f890 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f84e:	d115      	bne.n	800f87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f854:	3308      	adds	r3, #8
 800f856:	2100      	movs	r1, #0
 800f858:	4618      	mov	r0, r3
 800f85a:	f001 fd29 	bl	80112b0 <RCCEx_PLL2_Config>
 800f85e:	4603      	mov	r3, r0
 800f860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f864:	e015      	b.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f86a:	3328      	adds	r3, #40	; 0x28
 800f86c:	2102      	movs	r1, #2
 800f86e:	4618      	mov	r0, r3
 800f870:	f001 fdd0 	bl	8011414 <RCCEx_PLL3_Config>
 800f874:	4603      	mov	r3, r0
 800f876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f87a:	e00a      	b.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f87c:	2301      	movs	r3, #1
 800f87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f882:	e006      	b.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f884:	bf00      	nop
 800f886:	e004      	b.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f888:	bf00      	nop
 800f88a:	e002      	b.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f88c:	bf00      	nop
 800f88e:	e000      	b.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f890:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f896:	2b00      	cmp	r3, #0
 800f898:	d10e      	bne.n	800f8b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f89a:	4b06      	ldr	r3, [pc, #24]	; (800f8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f89e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f8aa:	4a02      	ldr	r2, [pc, #8]	; (800f8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f8ac:	430b      	orrs	r3, r1
 800f8ae:	6593      	str	r3, [r2, #88]	; 0x58
 800f8b0:	e006      	b.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f8b2:	bf00      	nop
 800f8b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f8cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f8d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f8da:	460b      	mov	r3, r1
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	d055      	beq.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f8e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f8ec:	d033      	beq.n	800f956 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f8ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f8f2:	d82c      	bhi.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8f8:	d02f      	beq.n	800f95a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f8fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8fe:	d826      	bhi.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f900:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f904:	d02b      	beq.n	800f95e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f906:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f90a:	d820      	bhi.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f90c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f910:	d012      	beq.n	800f938 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f916:	d81a      	bhi.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d022      	beq.n	800f962 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f91c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f920:	d115      	bne.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f926:	3308      	adds	r3, #8
 800f928:	2100      	movs	r1, #0
 800f92a:	4618      	mov	r0, r3
 800f92c:	f001 fcc0 	bl	80112b0 <RCCEx_PLL2_Config>
 800f930:	4603      	mov	r3, r0
 800f932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f936:	e015      	b.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f93c:	3328      	adds	r3, #40	; 0x28
 800f93e:	2102      	movs	r1, #2
 800f940:	4618      	mov	r0, r3
 800f942:	f001 fd67 	bl	8011414 <RCCEx_PLL3_Config>
 800f946:	4603      	mov	r3, r0
 800f948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f94c:	e00a      	b.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f94e:	2301      	movs	r3, #1
 800f950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f954:	e006      	b.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f956:	bf00      	nop
 800f958:	e004      	b.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f95a:	bf00      	nop
 800f95c:	e002      	b.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f95e:	bf00      	nop
 800f960:	e000      	b.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f962:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d10b      	bne.n	800f984 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f96c:	4ba1      	ldr	r3, [pc, #644]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f970:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800f974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f97c:	4a9d      	ldr	r2, [pc, #628]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f97e:	430b      	orrs	r3, r1
 800f980:	6593      	str	r3, [r2, #88]	; 0x58
 800f982:	e003      	b.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f984:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f988:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f994:	f002 0308 	and.w	r3, r2, #8
 800f998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f99c:	2300      	movs	r3, #0
 800f99e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f9a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	4313      	orrs	r3, r2
 800f9aa:	d01e      	beq.n	800f9ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9b8:	d10c      	bne.n	800f9d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9be:	3328      	adds	r3, #40	; 0x28
 800f9c0:	2102      	movs	r1, #2
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f001 fd26 	bl	8011414 <RCCEx_PLL3_Config>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d002      	beq.n	800f9d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f9d4:	4b87      	ldr	r3, [pc, #540]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f9d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9e4:	4a83      	ldr	r2, [pc, #524]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f9e6:	430b      	orrs	r3, r1
 800f9e8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f2:	f002 0310 	and.w	r3, r2, #16
 800f9f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fa00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800fa04:	460b      	mov	r3, r1
 800fa06:	4313      	orrs	r3, r2
 800fa08:	d01e      	beq.n	800fa48 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fa12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa16:	d10c      	bne.n	800fa32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fa18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa1c:	3328      	adds	r3, #40	; 0x28
 800fa1e:	2102      	movs	r1, #2
 800fa20:	4618      	mov	r0, r3
 800fa22:	f001 fcf7 	bl	8011414 <RCCEx_PLL3_Config>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d002      	beq.n	800fa32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fa32:	4b70      	ldr	r3, [pc, #448]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fa3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fa42:	4a6c      	ldr	r2, [pc, #432]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa44:	430b      	orrs	r3, r1
 800fa46:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fa48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa50:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800fa54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fa58:	2300      	movs	r3, #0
 800fa5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fa5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800fa62:	460b      	mov	r3, r1
 800fa64:	4313      	orrs	r3, r2
 800fa66:	d03e      	beq.n	800fae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800fa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fa70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa74:	d022      	beq.n	800fabc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800fa76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa7a:	d81b      	bhi.n	800fab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d003      	beq.n	800fa88 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800fa80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa84:	d00b      	beq.n	800fa9e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800fa86:	e015      	b.n	800fab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fa88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa8c:	3308      	adds	r3, #8
 800fa8e:	2100      	movs	r1, #0
 800fa90:	4618      	mov	r0, r3
 800fa92:	f001 fc0d 	bl	80112b0 <RCCEx_PLL2_Config>
 800fa96:	4603      	mov	r3, r0
 800fa98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fa9c:	e00f      	b.n	800fabe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faa2:	3328      	adds	r3, #40	; 0x28
 800faa4:	2102      	movs	r1, #2
 800faa6:	4618      	mov	r0, r3
 800faa8:	f001 fcb4 	bl	8011414 <RCCEx_PLL3_Config>
 800faac:	4603      	mov	r3, r0
 800faae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fab2:	e004      	b.n	800fabe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800faba:	e000      	b.n	800fabe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800fabc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fabe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d10b      	bne.n	800fade <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fac6:	4b4b      	ldr	r3, [pc, #300]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800face:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fad6:	4a47      	ldr	r2, [pc, #284]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fad8:	430b      	orrs	r3, r1
 800fada:	6593      	str	r3, [r2, #88]	; 0x58
 800fadc:	e003      	b.n	800fae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800faf2:	67bb      	str	r3, [r7, #120]	; 0x78
 800faf4:	2300      	movs	r3, #0
 800faf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800faf8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800fafc:	460b      	mov	r3, r1
 800fafe:	4313      	orrs	r3, r2
 800fb00:	d03b      	beq.n	800fb7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800fb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb0e:	d01f      	beq.n	800fb50 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800fb10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb14:	d818      	bhi.n	800fb48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800fb16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb1a:	d003      	beq.n	800fb24 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800fb1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb20:	d007      	beq.n	800fb32 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800fb22:	e011      	b.n	800fb48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb24:	4b33      	ldr	r3, [pc, #204]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb28:	4a32      	ldr	r2, [pc, #200]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fb2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800fb30:	e00f      	b.n	800fb52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fb32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb36:	3328      	adds	r3, #40	; 0x28
 800fb38:	2101      	movs	r1, #1
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f001 fc6a 	bl	8011414 <RCCEx_PLL3_Config>
 800fb40:	4603      	mov	r3, r0
 800fb42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800fb46:	e004      	b.n	800fb52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb4e:	e000      	b.n	800fb52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800fb50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10b      	bne.n	800fb72 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fb5a:	4b26      	ldr	r3, [pc, #152]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb6a:	4a22      	ldr	r2, [pc, #136]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb6c:	430b      	orrs	r3, r1
 800fb6e:	6553      	str	r3, [r2, #84]	; 0x54
 800fb70:	e003      	b.n	800fb7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fb7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb82:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800fb86:	673b      	str	r3, [r7, #112]	; 0x70
 800fb88:	2300      	movs	r3, #0
 800fb8a:	677b      	str	r3, [r7, #116]	; 0x74
 800fb8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800fb90:	460b      	mov	r3, r1
 800fb92:	4313      	orrs	r3, r2
 800fb94:	d034      	beq.n	800fc00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800fb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d003      	beq.n	800fba8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800fba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fba4:	d007      	beq.n	800fbb6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800fba6:	e011      	b.n	800fbcc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fba8:	4b12      	ldr	r3, [pc, #72]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbac:	4a11      	ldr	r2, [pc, #68]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fbae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fbb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fbb4:	e00e      	b.n	800fbd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbba:	3308      	adds	r3, #8
 800fbbc:	2102      	movs	r1, #2
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f001 fb76 	bl	80112b0 <RCCEx_PLL2_Config>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fbca:	e003      	b.n	800fbd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800fbcc:	2301      	movs	r3, #1
 800fbce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fbd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d10d      	bne.n	800fbf8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fbdc:	4b05      	ldr	r3, [pc, #20]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fbde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbe0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbea:	4a02      	ldr	r2, [pc, #8]	; (800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fbec:	430b      	orrs	r3, r1
 800fbee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fbf0:	e006      	b.n	800fc00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800fbf2:	bf00      	nop
 800fbf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fc00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc08:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800fc0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc0e:	2300      	movs	r3, #0
 800fc10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800fc16:	460b      	mov	r3, r1
 800fc18:	4313      	orrs	r3, r2
 800fc1a:	d00c      	beq.n	800fc36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fc1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc20:	3328      	adds	r3, #40	; 0x28
 800fc22:	2102      	movs	r1, #2
 800fc24:	4618      	mov	r0, r3
 800fc26:	f001 fbf5 	bl	8011414 <RCCEx_PLL3_Config>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d002      	beq.n	800fc36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800fc30:	2301      	movs	r3, #1
 800fc32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fc36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800fc42:	663b      	str	r3, [r7, #96]	; 0x60
 800fc44:	2300      	movs	r3, #0
 800fc46:	667b      	str	r3, [r7, #100]	; 0x64
 800fc48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	d038      	beq.n	800fcc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800fc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc5e:	d018      	beq.n	800fc92 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800fc60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc64:	d811      	bhi.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fc66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc6a:	d014      	beq.n	800fc96 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800fc6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc70:	d80b      	bhi.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d011      	beq.n	800fc9a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800fc76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc7a:	d106      	bne.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fc7c:	4bc3      	ldr	r3, [pc, #780]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc80:	4ac2      	ldr	r2, [pc, #776]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fc86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fc88:	e008      	b.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc90:	e004      	b.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fc92:	bf00      	nop
 800fc94:	e002      	b.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fc96:	bf00      	nop
 800fc98:	e000      	b.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fc9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d10b      	bne.n	800fcbc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fca4:	4bb9      	ldr	r3, [pc, #740]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fca8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcb4:	4ab5      	ldr	r2, [pc, #724]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcb6:	430b      	orrs	r3, r1
 800fcb8:	6553      	str	r3, [r2, #84]	; 0x54
 800fcba:	e003      	b.n	800fcc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fcc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fccc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800fcd0:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcd6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800fcda:	460b      	mov	r3, r1
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	d009      	beq.n	800fcf4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fce0:	4baa      	ldr	r3, [pc, #680]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fce4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcee:	4aa7      	ldr	r2, [pc, #668]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcf0:	430b      	orrs	r3, r1
 800fcf2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fcf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800fd00:	653b      	str	r3, [r7, #80]	; 0x50
 800fd02:	2300      	movs	r3, #0
 800fd04:	657b      	str	r3, [r7, #84]	; 0x54
 800fd06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	d00a      	beq.n	800fd26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fd10:	4b9e      	ldr	r3, [pc, #632]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd12:	691b      	ldr	r3, [r3, #16]
 800fd14:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800fd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fd20:	4a9a      	ldr	r2, [pc, #616]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd22:	430b      	orrs	r3, r1
 800fd24:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800fd32:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd34:	2300      	movs	r3, #0
 800fd36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	d009      	beq.n	800fd56 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fd42:	4b92      	ldr	r3, [pc, #584]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd46:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800fd4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd50:	4a8e      	ldr	r2, [pc, #568]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd52:	430b      	orrs	r3, r1
 800fd54:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fd62:	643b      	str	r3, [r7, #64]	; 0x40
 800fd64:	2300      	movs	r3, #0
 800fd66:	647b      	str	r3, [r7, #68]	; 0x44
 800fd68:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	d00e      	beq.n	800fd90 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fd72:	4b86      	ldr	r3, [pc, #536]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd74:	691b      	ldr	r3, [r3, #16]
 800fd76:	4a85      	ldr	r2, [pc, #532]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fd7c:	6113      	str	r3, [r2, #16]
 800fd7e:	4b83      	ldr	r3, [pc, #524]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd80:	6919      	ldr	r1, [r3, #16]
 800fd82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fd8a:	4a80      	ldr	r2, [pc, #512]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd8c:	430b      	orrs	r3, r1
 800fd8e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd98:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fd9c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd9e:	2300      	movs	r3, #0
 800fda0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fda2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fda6:	460b      	mov	r3, r1
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	d009      	beq.n	800fdc0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fdac:	4b77      	ldr	r3, [pc, #476]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdb0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fdb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdba:	4a74      	ldr	r2, [pc, #464]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdbc:	430b      	orrs	r3, r1
 800fdbe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fdc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800fdcc:	633b      	str	r3, [r7, #48]	; 0x30
 800fdce:	2300      	movs	r3, #0
 800fdd0:	637b      	str	r3, [r7, #52]	; 0x34
 800fdd2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800fdd6:	460b      	mov	r3, r1
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	d00a      	beq.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fddc:	4b6b      	ldr	r3, [pc, #428]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fde0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fde4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fde8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdec:	4a67      	ldr	r2, [pc, #412]	; (800ff8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdee:	430b      	orrs	r3, r1
 800fdf0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	62b9      	str	r1, [r7, #40]	; 0x28
 800fdfe:	f003 0301 	and.w	r3, r3, #1
 800fe02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800fe08:	460b      	mov	r3, r1
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	d011      	beq.n	800fe32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fe0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe12:	3308      	adds	r3, #8
 800fe14:	2100      	movs	r1, #0
 800fe16:	4618      	mov	r0, r3
 800fe18:	f001 fa4a 	bl	80112b0 <RCCEx_PLL2_Config>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fe22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d003      	beq.n	800fe32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fe32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	6239      	str	r1, [r7, #32]
 800fe3e:	f003 0302 	and.w	r3, r3, #2
 800fe42:	627b      	str	r3, [r7, #36]	; 0x24
 800fe44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fe48:	460b      	mov	r3, r1
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	d011      	beq.n	800fe72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fe4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe52:	3308      	adds	r3, #8
 800fe54:	2101      	movs	r1, #1
 800fe56:	4618      	mov	r0, r3
 800fe58:	f001 fa2a 	bl	80112b0 <RCCEx_PLL2_Config>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fe62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d003      	beq.n	800fe72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fe72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	61b9      	str	r1, [r7, #24]
 800fe7e:	f003 0304 	and.w	r3, r3, #4
 800fe82:	61fb      	str	r3, [r7, #28]
 800fe84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fe88:	460b      	mov	r3, r1
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	d011      	beq.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fe8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe92:	3308      	adds	r3, #8
 800fe94:	2102      	movs	r1, #2
 800fe96:	4618      	mov	r0, r3
 800fe98:	f001 fa0a 	bl	80112b0 <RCCEx_PLL2_Config>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d003      	beq.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800feaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800feae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800feb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feba:	2100      	movs	r1, #0
 800febc:	6139      	str	r1, [r7, #16]
 800febe:	f003 0308 	and.w	r3, r3, #8
 800fec2:	617b      	str	r3, [r7, #20]
 800fec4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fec8:	460b      	mov	r3, r1
 800feca:	4313      	orrs	r3, r2
 800fecc:	d011      	beq.n	800fef2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fed2:	3328      	adds	r3, #40	; 0x28
 800fed4:	2100      	movs	r1, #0
 800fed6:	4618      	mov	r0, r3
 800fed8:	f001 fa9c 	bl	8011414 <RCCEx_PLL3_Config>
 800fedc:	4603      	mov	r3, r0
 800fede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800fee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d003      	beq.n	800fef2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800feea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800feee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefa:	2100      	movs	r1, #0
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	f003 0310 	and.w	r3, r3, #16
 800ff02:	60fb      	str	r3, [r7, #12]
 800ff04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ff08:	460b      	mov	r3, r1
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	d011      	beq.n	800ff32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ff0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff12:	3328      	adds	r3, #40	; 0x28
 800ff14:	2101      	movs	r1, #1
 800ff16:	4618      	mov	r0, r3
 800ff18:	f001 fa7c 	bl	8011414 <RCCEx_PLL3_Config>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ff22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d003      	beq.n	800ff32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ff32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	6039      	str	r1, [r7, #0]
 800ff3e:	f003 0320 	and.w	r3, r3, #32
 800ff42:	607b      	str	r3, [r7, #4]
 800ff44:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	d011      	beq.n	800ff72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ff4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff52:	3328      	adds	r3, #40	; 0x28
 800ff54:	2102      	movs	r1, #2
 800ff56:	4618      	mov	r0, r3
 800ff58:	f001 fa5c 	bl	8011414 <RCCEx_PLL3_Config>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ff62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d003      	beq.n	800ff72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ff72:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d101      	bne.n	800ff7e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	e000      	b.n	800ff80 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ff7e:	2301      	movs	r3, #1
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ff86:	46bd      	mov	sp, r7
 800ff88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff8c:	58024400 	.word	0x58024400

0800ff90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b090      	sub	sp, #64	; 0x40
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ff9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ffa2:	430b      	orrs	r3, r1
 800ffa4:	f040 8094 	bne.w	80100d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ffa8:	4b9e      	ldr	r3, [pc, #632]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffac:	f003 0307 	and.w	r3, r3, #7
 800ffb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ffb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb4:	2b04      	cmp	r3, #4
 800ffb6:	f200 8087 	bhi.w	80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ffba:	a201      	add	r2, pc, #4	; (adr r2, 800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ffbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc0:	0800ffd5 	.word	0x0800ffd5
 800ffc4:	0800fffd 	.word	0x0800fffd
 800ffc8:	08010025 	.word	0x08010025
 800ffcc:	080100c1 	.word	0x080100c1
 800ffd0:	0801004d 	.word	0x0801004d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ffd4:	4b93      	ldr	r3, [pc, #588]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ffdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ffe0:	d108      	bne.n	800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ffe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f001 f810 	bl	801100c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ffec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fff0:	f000 bd45 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fff4:	2300      	movs	r3, #0
 800fff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fff8:	f000 bd41 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fffc:	4b89      	ldr	r3, [pc, #548]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010008:	d108      	bne.n	801001c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801000a:	f107 0318 	add.w	r3, r7, #24
 801000e:	4618      	mov	r0, r3
 8010010:	f000 fd54 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010014:	69bb      	ldr	r3, [r7, #24]
 8010016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010018:	f000 bd31 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801001c:	2300      	movs	r3, #0
 801001e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010020:	f000 bd2d 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010024:	4b7f      	ldr	r3, [pc, #508]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801002c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010030:	d108      	bne.n	8010044 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010032:	f107 030c 	add.w	r3, r7, #12
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fe94 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010040:	f000 bd1d 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010044:	2300      	movs	r3, #0
 8010046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010048:	f000 bd19 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801004c:	4b75      	ldr	r3, [pc, #468]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801004e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010054:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010056:	4b73      	ldr	r3, [pc, #460]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f003 0304 	and.w	r3, r3, #4
 801005e:	2b04      	cmp	r3, #4
 8010060:	d10c      	bne.n	801007c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8010062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010064:	2b00      	cmp	r3, #0
 8010066:	d109      	bne.n	801007c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010068:	4b6e      	ldr	r3, [pc, #440]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	08db      	lsrs	r3, r3, #3
 801006e:	f003 0303 	and.w	r3, r3, #3
 8010072:	4a6d      	ldr	r2, [pc, #436]	; (8010228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010074:	fa22 f303 	lsr.w	r3, r2, r3
 8010078:	63fb      	str	r3, [r7, #60]	; 0x3c
 801007a:	e01f      	b.n	80100bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801007c:	4b69      	ldr	r3, [pc, #420]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010088:	d106      	bne.n	8010098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801008a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801008c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010090:	d102      	bne.n	8010098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010092:	4b66      	ldr	r3, [pc, #408]	; (801022c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010096:	e011      	b.n	80100bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010098:	4b62      	ldr	r3, [pc, #392]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80100a4:	d106      	bne.n	80100b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80100a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100ac:	d102      	bne.n	80100b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80100ae:	4b60      	ldr	r3, [pc, #384]	; (8010230 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80100b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100b2:	e003      	b.n	80100bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80100b4:	2300      	movs	r3, #0
 80100b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80100b8:	f000 bce1 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80100bc:	f000 bcdf 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80100c0:	4b5c      	ldr	r3, [pc, #368]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80100c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100c4:	f000 bcdb 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80100c8:	2300      	movs	r3, #0
 80100ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100cc:	f000 bcd7 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80100d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100d4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80100d8:	430b      	orrs	r3, r1
 80100da:	f040 80ad 	bne.w	8010238 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80100de:	4b51      	ldr	r3, [pc, #324]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80100e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80100e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100ee:	d056      	beq.n	801019e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80100f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100f6:	f200 8090 	bhi.w	801021a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80100fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fc:	2bc0      	cmp	r3, #192	; 0xc0
 80100fe:	f000 8088 	beq.w	8010212 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8010102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010104:	2bc0      	cmp	r3, #192	; 0xc0
 8010106:	f200 8088 	bhi.w	801021a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801010a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010c:	2b80      	cmp	r3, #128	; 0x80
 801010e:	d032      	beq.n	8010176 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	2b80      	cmp	r3, #128	; 0x80
 8010114:	f200 8081 	bhi.w	801021a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011a:	2b00      	cmp	r3, #0
 801011c:	d003      	beq.n	8010126 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801011e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010120:	2b40      	cmp	r3, #64	; 0x40
 8010122:	d014      	beq.n	801014e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010124:	e079      	b.n	801021a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010126:	4b3f      	ldr	r3, [pc, #252]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801012e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010132:	d108      	bne.n	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010138:	4618      	mov	r0, r3
 801013a:	f000 ff67 	bl	801100c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801013e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010142:	f000 bc9c 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010146:	2300      	movs	r3, #0
 8010148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801014a:	f000 bc98 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801014e:	4b35      	ldr	r3, [pc, #212]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801015a:	d108      	bne.n	801016e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801015c:	f107 0318 	add.w	r3, r7, #24
 8010160:	4618      	mov	r0, r3
 8010162:	f000 fcab 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010166:	69bb      	ldr	r3, [r7, #24]
 8010168:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801016a:	f000 bc88 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801016e:	2300      	movs	r3, #0
 8010170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010172:	f000 bc84 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010176:	4b2b      	ldr	r3, [pc, #172]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801017e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010182:	d108      	bne.n	8010196 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010184:	f107 030c 	add.w	r3, r7, #12
 8010188:	4618      	mov	r0, r3
 801018a:	f000 fdeb 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010192:	f000 bc74 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010196:	2300      	movs	r3, #0
 8010198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801019a:	f000 bc70 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801019e:	4b21      	ldr	r3, [pc, #132]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80101a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80101a8:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f003 0304 	and.w	r3, r3, #4
 80101b0:	2b04      	cmp	r3, #4
 80101b2:	d10c      	bne.n	80101ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80101b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d109      	bne.n	80101ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80101ba:	4b1a      	ldr	r3, [pc, #104]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	08db      	lsrs	r3, r3, #3
 80101c0:	f003 0303 	and.w	r3, r3, #3
 80101c4:	4a18      	ldr	r2, [pc, #96]	; (8010228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80101c6:	fa22 f303 	lsr.w	r3, r2, r3
 80101ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101cc:	e01f      	b.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80101ce:	4b15      	ldr	r3, [pc, #84]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101da:	d106      	bne.n	80101ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80101dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80101e2:	d102      	bne.n	80101ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80101e4:	4b11      	ldr	r3, [pc, #68]	; (801022c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80101e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101e8:	e011      	b.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80101ea:	4b0e      	ldr	r3, [pc, #56]	; (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80101f6:	d106      	bne.n	8010206 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80101f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101fe:	d102      	bne.n	8010206 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010200:	4b0b      	ldr	r3, [pc, #44]	; (8010230 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010204:	e003      	b.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010206:	2300      	movs	r3, #0
 8010208:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801020a:	f000 bc38 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801020e:	f000 bc36 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010212:	4b08      	ldr	r3, [pc, #32]	; (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010216:	f000 bc32 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801021a:	2300      	movs	r3, #0
 801021c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801021e:	f000 bc2e 	b.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010222:	bf00      	nop
 8010224:	58024400 	.word	0x58024400
 8010228:	03d09000 	.word	0x03d09000
 801022c:	003d0900 	.word	0x003d0900
 8010230:	017d7840 	.word	0x017d7840
 8010234:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010238:	e9d7 2300 	ldrd	r2, r3, [r7]
 801023c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8010240:	430b      	orrs	r3, r1
 8010242:	f040 809c 	bne.w	801037e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010246:	4b9e      	ldr	r3, [pc, #632]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801024a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801024e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010252:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010256:	d054      	beq.n	8010302 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801025e:	f200 808b 	bhi.w	8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010264:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010268:	f000 8083 	beq.w	8010372 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 801026c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010272:	f200 8081 	bhi.w	8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801027c:	d02f      	beq.n	80102de <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801027e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010284:	d878      	bhi.n	8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010288:	2b00      	cmp	r3, #0
 801028a:	d004      	beq.n	8010296 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 801028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010292:	d012      	beq.n	80102ba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010294:	e070      	b.n	8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010296:	4b8a      	ldr	r3, [pc, #552]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801029e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80102a2:	d107      	bne.n	80102b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102a8:	4618      	mov	r0, r3
 80102aa:	f000 feaf 	bl	801100c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80102ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102b2:	e3e4      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102b4:	2300      	movs	r3, #0
 80102b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102b8:	e3e1      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80102ba:	4b81      	ldr	r3, [pc, #516]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80102c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80102c6:	d107      	bne.n	80102d8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102c8:	f107 0318 	add.w	r3, r7, #24
 80102cc:	4618      	mov	r0, r3
 80102ce:	f000 fbf5 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102d6:	e3d2      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102d8:	2300      	movs	r3, #0
 80102da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102dc:	e3cf      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80102de:	4b78      	ldr	r3, [pc, #480]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80102e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102ea:	d107      	bne.n	80102fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102ec:	f107 030c 	add.w	r3, r7, #12
 80102f0:	4618      	mov	r0, r3
 80102f2:	f000 fd37 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102fa:	e3c0      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102fc:	2300      	movs	r3, #0
 80102fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010300:	e3bd      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010302:	4b6f      	ldr	r3, [pc, #444]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801030a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801030c:	4b6c      	ldr	r3, [pc, #432]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	f003 0304 	and.w	r3, r3, #4
 8010314:	2b04      	cmp	r3, #4
 8010316:	d10c      	bne.n	8010332 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801031a:	2b00      	cmp	r3, #0
 801031c:	d109      	bne.n	8010332 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801031e:	4b68      	ldr	r3, [pc, #416]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	08db      	lsrs	r3, r3, #3
 8010324:	f003 0303 	and.w	r3, r3, #3
 8010328:	4a66      	ldr	r2, [pc, #408]	; (80104c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801032a:	fa22 f303 	lsr.w	r3, r2, r3
 801032e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010330:	e01e      	b.n	8010370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010332:	4b63      	ldr	r3, [pc, #396]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801033a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801033e:	d106      	bne.n	801034e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010346:	d102      	bne.n	801034e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010348:	4b5f      	ldr	r3, [pc, #380]	; (80104c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801034a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801034c:	e010      	b.n	8010370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801034e:	4b5c      	ldr	r3, [pc, #368]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801035a:	d106      	bne.n	801036a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 801035c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801035e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010362:	d102      	bne.n	801036a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010364:	4b59      	ldr	r3, [pc, #356]	; (80104cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010368:	e002      	b.n	8010370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801036a:	2300      	movs	r3, #0
 801036c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801036e:	e386      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010370:	e385      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010372:	4b57      	ldr	r3, [pc, #348]	; (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010376:	e382      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010378:	2300      	movs	r3, #0
 801037a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801037c:	e37f      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801037e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010382:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8010386:	430b      	orrs	r3, r1
 8010388:	f040 80a7 	bne.w	80104da <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801038c:	4b4c      	ldr	r3, [pc, #304]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801038e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010390:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8010394:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801039c:	d055      	beq.n	801044a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801039e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80103a4:	f200 8096 	bhi.w	80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80103a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80103ae:	f000 8084 	beq.w	80104ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80103b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80103b8:	f200 808c 	bhi.w	80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80103bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80103c2:	d030      	beq.n	8010426 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80103c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80103ca:	f200 8083 	bhi.w	80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80103ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d004      	beq.n	80103de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80103d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80103da:	d012      	beq.n	8010402 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80103dc:	e07a      	b.n	80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80103de:	4b38      	ldr	r3, [pc, #224]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80103ea:	d107      	bne.n	80103fc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80103ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103f0:	4618      	mov	r0, r3
 80103f2:	f000 fe0b 	bl	801100c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80103f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103fa:	e340      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103fc:	2300      	movs	r3, #0
 80103fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010400:	e33d      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010402:	4b2f      	ldr	r3, [pc, #188]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801040a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801040e:	d107      	bne.n	8010420 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010410:	f107 0318 	add.w	r3, r7, #24
 8010414:	4618      	mov	r0, r3
 8010416:	f000 fb51 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801041e:	e32e      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010420:	2300      	movs	r3, #0
 8010422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010424:	e32b      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010426:	4b26      	ldr	r3, [pc, #152]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801042e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010432:	d107      	bne.n	8010444 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010434:	f107 030c 	add.w	r3, r7, #12
 8010438:	4618      	mov	r0, r3
 801043a:	f000 fc93 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010442:	e31c      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010444:	2300      	movs	r3, #0
 8010446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010448:	e319      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801044a:	4b1d      	ldr	r3, [pc, #116]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801044e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010452:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010454:	4b1a      	ldr	r3, [pc, #104]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f003 0304 	and.w	r3, r3, #4
 801045c:	2b04      	cmp	r3, #4
 801045e:	d10c      	bne.n	801047a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010462:	2b00      	cmp	r3, #0
 8010464:	d109      	bne.n	801047a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010466:	4b16      	ldr	r3, [pc, #88]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	08db      	lsrs	r3, r3, #3
 801046c:	f003 0303 	and.w	r3, r3, #3
 8010470:	4a14      	ldr	r2, [pc, #80]	; (80104c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010472:	fa22 f303 	lsr.w	r3, r2, r3
 8010476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010478:	e01e      	b.n	80104b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801047a:	4b11      	ldr	r3, [pc, #68]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010486:	d106      	bne.n	8010496 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801048a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801048e:	d102      	bne.n	8010496 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010490:	4b0d      	ldr	r3, [pc, #52]	; (80104c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010494:	e010      	b.n	80104b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010496:	4b0a      	ldr	r3, [pc, #40]	; (80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801049e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80104a2:	d106      	bne.n	80104b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80104a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104aa:	d102      	bne.n	80104b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80104ac:	4b07      	ldr	r3, [pc, #28]	; (80104cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80104ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104b0:	e002      	b.n	80104b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80104b2:	2300      	movs	r3, #0
 80104b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80104b6:	e2e2      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80104b8:	e2e1      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80104ba:	4b05      	ldr	r3, [pc, #20]	; (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80104bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104be:	e2de      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80104c0:	58024400 	.word	0x58024400
 80104c4:	03d09000 	.word	0x03d09000
 80104c8:	003d0900 	.word	0x003d0900
 80104cc:	017d7840 	.word	0x017d7840
 80104d0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80104d4:	2300      	movs	r3, #0
 80104d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104d8:	e2d1      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80104da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104de:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80104e2:	430b      	orrs	r3, r1
 80104e4:	f040 809c 	bne.w	8010620 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80104e8:	4b93      	ldr	r3, [pc, #588]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80104f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80104f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80104f8:	d054      	beq.n	80105a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80104fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010500:	f200 808b 	bhi.w	801061a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010506:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801050a:	f000 8083 	beq.w	8010614 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801050e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010514:	f200 8081 	bhi.w	801061a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801051e:	d02f      	beq.n	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8010520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010526:	d878      	bhi.n	801061a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052a:	2b00      	cmp	r3, #0
 801052c:	d004      	beq.n	8010538 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801052e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010534:	d012      	beq.n	801055c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010536:	e070      	b.n	801061a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010538:	4b7f      	ldr	r3, [pc, #508]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010544:	d107      	bne.n	8010556 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801054a:	4618      	mov	r0, r3
 801054c:	f000 fd5e 	bl	801100c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010554:	e293      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010556:	2300      	movs	r3, #0
 8010558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801055a:	e290      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801055c:	4b76      	ldr	r3, [pc, #472]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010568:	d107      	bne.n	801057a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801056a:	f107 0318 	add.w	r3, r7, #24
 801056e:	4618      	mov	r0, r3
 8010570:	f000 faa4 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010578:	e281      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801057a:	2300      	movs	r3, #0
 801057c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801057e:	e27e      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010580:	4b6d      	ldr	r3, [pc, #436]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801058c:	d107      	bne.n	801059e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801058e:	f107 030c 	add.w	r3, r7, #12
 8010592:	4618      	mov	r0, r3
 8010594:	f000 fbe6 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801059c:	e26f      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801059e:	2300      	movs	r3, #0
 80105a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105a2:	e26c      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80105a4:	4b64      	ldr	r3, [pc, #400]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80105ac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80105ae:	4b62      	ldr	r3, [pc, #392]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f003 0304 	and.w	r3, r3, #4
 80105b6:	2b04      	cmp	r3, #4
 80105b8:	d10c      	bne.n	80105d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80105ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d109      	bne.n	80105d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80105c0:	4b5d      	ldr	r3, [pc, #372]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	08db      	lsrs	r3, r3, #3
 80105c6:	f003 0303 	and.w	r3, r3, #3
 80105ca:	4a5c      	ldr	r2, [pc, #368]	; (801073c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80105cc:	fa22 f303 	lsr.w	r3, r2, r3
 80105d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105d2:	e01e      	b.n	8010612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80105d4:	4b58      	ldr	r3, [pc, #352]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105e0:	d106      	bne.n	80105f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80105e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80105e8:	d102      	bne.n	80105f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80105ea:	4b55      	ldr	r3, [pc, #340]	; (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80105ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105ee:	e010      	b.n	8010612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80105f0:	4b51      	ldr	r3, [pc, #324]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80105f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80105fc:	d106      	bne.n	801060c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80105fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010604:	d102      	bne.n	801060c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010606:	4b4f      	ldr	r3, [pc, #316]	; (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010608:	63fb      	str	r3, [r7, #60]	; 0x3c
 801060a:	e002      	b.n	8010612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801060c:	2300      	movs	r3, #0
 801060e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010610:	e235      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010612:	e234      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010614:	4b4c      	ldr	r3, [pc, #304]	; (8010748 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010618:	e231      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801061a:	2300      	movs	r3, #0
 801061c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801061e:	e22e      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010624:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010628:	430b      	orrs	r3, r1
 801062a:	f040 808f 	bne.w	801074c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801062e:	4b42      	ldr	r3, [pc, #264]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010632:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010636:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801063a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801063e:	d06b      	beq.n	8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8010640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010646:	d874      	bhi.n	8010732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801064a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801064e:	d056      	beq.n	80106fe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010656:	d86c      	bhi.n	8010732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801065e:	d03b      	beq.n	80106d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010662:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010666:	d864      	bhi.n	8010732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801066e:	d021      	beq.n	80106b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010676:	d85c      	bhi.n	8010732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067a:	2b00      	cmp	r3, #0
 801067c:	d004      	beq.n	8010688 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010684:	d004      	beq.n	8010690 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010686:	e054      	b.n	8010732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010688:	f7fe fa0a 	bl	800eaa0 <HAL_RCC_GetPCLK1Freq>
 801068c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801068e:	e1f6      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010690:	4b29      	ldr	r3, [pc, #164]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801069c:	d107      	bne.n	80106ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801069e:	f107 0318 	add.w	r3, r7, #24
 80106a2:	4618      	mov	r0, r3
 80106a4:	f000 fa0a 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106ac:	e1e7      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106b2:	e1e4      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80106b4:	4b20      	ldr	r3, [pc, #128]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80106bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106c0:	d107      	bne.n	80106d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106c2:	f107 030c 	add.w	r3, r7, #12
 80106c6:	4618      	mov	r0, r3
 80106c8:	f000 fb4c 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106d0:	e1d5      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106d2:	2300      	movs	r3, #0
 80106d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106d6:	e1d2      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80106d8:	4b17      	ldr	r3, [pc, #92]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f003 0304 	and.w	r3, r3, #4
 80106e0:	2b04      	cmp	r3, #4
 80106e2:	d109      	bne.n	80106f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80106e4:	4b14      	ldr	r3, [pc, #80]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	08db      	lsrs	r3, r3, #3
 80106ea:	f003 0303 	and.w	r3, r3, #3
 80106ee:	4a13      	ldr	r2, [pc, #76]	; (801073c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80106f0:	fa22 f303 	lsr.w	r3, r2, r3
 80106f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106f6:	e1c2      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106f8:	2300      	movs	r3, #0
 80106fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106fc:	e1bf      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80106fe:	4b0e      	ldr	r3, [pc, #56]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801070a:	d102      	bne.n	8010712 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 801070c:	4b0c      	ldr	r3, [pc, #48]	; (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801070e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010710:	e1b5      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010712:	2300      	movs	r3, #0
 8010714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010716:	e1b2      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010718:	4b07      	ldr	r3, [pc, #28]	; (8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010724:	d102      	bne.n	801072c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010726:	4b07      	ldr	r3, [pc, #28]	; (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801072a:	e1a8      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801072c:	2300      	movs	r3, #0
 801072e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010730:	e1a5      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010732:	2300      	movs	r3, #0
 8010734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010736:	e1a2      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010738:	58024400 	.word	0x58024400
 801073c:	03d09000 	.word	0x03d09000
 8010740:	003d0900 	.word	0x003d0900
 8010744:	017d7840 	.word	0x017d7840
 8010748:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801074c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010750:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010754:	430b      	orrs	r3, r1
 8010756:	d173      	bne.n	8010840 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010758:	4b9c      	ldr	r3, [pc, #624]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801075a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801075c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010760:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010768:	d02f      	beq.n	80107ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801076a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010770:	d863      	bhi.n	801083a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010774:	2b00      	cmp	r3, #0
 8010776:	d004      	beq.n	8010782 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801077a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801077e:	d012      	beq.n	80107a6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010780:	e05b      	b.n	801083a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010782:	4b92      	ldr	r3, [pc, #584]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801078a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801078e:	d107      	bne.n	80107a0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010790:	f107 0318 	add.w	r3, r7, #24
 8010794:	4618      	mov	r0, r3
 8010796:	f000 f991 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801079a:	69bb      	ldr	r3, [r7, #24]
 801079c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801079e:	e16e      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107a0:	2300      	movs	r3, #0
 80107a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107a4:	e16b      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80107a6:	4b89      	ldr	r3, [pc, #548]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107b2:	d107      	bne.n	80107c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80107b4:	f107 030c 	add.w	r3, r7, #12
 80107b8:	4618      	mov	r0, r3
 80107ba:	f000 fad3 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107c2:	e15c      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107c4:	2300      	movs	r3, #0
 80107c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107c8:	e159      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80107ca:	4b80      	ldr	r3, [pc, #512]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80107d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80107d4:	4b7d      	ldr	r3, [pc, #500]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	f003 0304 	and.w	r3, r3, #4
 80107dc:	2b04      	cmp	r3, #4
 80107de:	d10c      	bne.n	80107fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80107e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d109      	bne.n	80107fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80107e6:	4b79      	ldr	r3, [pc, #484]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	08db      	lsrs	r3, r3, #3
 80107ec:	f003 0303 	and.w	r3, r3, #3
 80107f0:	4a77      	ldr	r2, [pc, #476]	; (80109d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80107f2:	fa22 f303 	lsr.w	r3, r2, r3
 80107f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107f8:	e01e      	b.n	8010838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80107fa:	4b74      	ldr	r3, [pc, #464]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010806:	d106      	bne.n	8010816 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801080a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801080e:	d102      	bne.n	8010816 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010810:	4b70      	ldr	r3, [pc, #448]	; (80109d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010814:	e010      	b.n	8010838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010816:	4b6d      	ldr	r3, [pc, #436]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801081e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010822:	d106      	bne.n	8010832 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801082a:	d102      	bne.n	8010832 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801082c:	4b6a      	ldr	r3, [pc, #424]	; (80109d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801082e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010830:	e002      	b.n	8010838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010832:	2300      	movs	r3, #0
 8010834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010836:	e122      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010838:	e121      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801083a:	2300      	movs	r3, #0
 801083c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801083e:	e11e      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010844:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010848:	430b      	orrs	r3, r1
 801084a:	d133      	bne.n	80108b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801084c:	4b5f      	ldr	r3, [pc, #380]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010854:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010858:	2b00      	cmp	r3, #0
 801085a:	d004      	beq.n	8010866 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010862:	d012      	beq.n	801088a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010864:	e023      	b.n	80108ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010866:	4b59      	ldr	r3, [pc, #356]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801086e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010872:	d107      	bne.n	8010884 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010878:	4618      	mov	r0, r3
 801087a:	f000 fbc7 	bl	801100c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010882:	e0fc      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010884:	2300      	movs	r3, #0
 8010886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010888:	e0f9      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801088a:	4b50      	ldr	r3, [pc, #320]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010896:	d107      	bne.n	80108a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010898:	f107 0318 	add.w	r3, r7, #24
 801089c:	4618      	mov	r0, r3
 801089e:	f000 f90d 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80108a2:	6a3b      	ldr	r3, [r7, #32]
 80108a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108a6:	e0ea      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108a8:	2300      	movs	r3, #0
 80108aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108ac:	e0e7      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80108ae:	2300      	movs	r3, #0
 80108b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108b2:	e0e4      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80108b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108b8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80108bc:	430b      	orrs	r3, r1
 80108be:	f040 808d 	bne.w	80109dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80108c2:	4b42      	ldr	r3, [pc, #264]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80108ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80108cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80108d2:	d06b      	beq.n	80109ac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80108d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80108da:	d874      	bhi.n	80109c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80108dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108e2:	d056      	beq.n	8010992 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80108e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108ea:	d86c      	bhi.n	80109c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80108ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80108f2:	d03b      	beq.n	801096c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80108f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80108fa:	d864      	bhi.n	80109c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80108fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010902:	d021      	beq.n	8010948 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801090a:	d85c      	bhi.n	80109c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801090c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090e:	2b00      	cmp	r3, #0
 8010910:	d004      	beq.n	801091c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010918:	d004      	beq.n	8010924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801091a:	e054      	b.n	80109c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801091c:	f000 f8b8 	bl	8010a90 <HAL_RCCEx_GetD3PCLK1Freq>
 8010920:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010922:	e0ac      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010924:	4b29      	ldr	r3, [pc, #164]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801092c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010930:	d107      	bne.n	8010942 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010932:	f107 0318 	add.w	r3, r7, #24
 8010936:	4618      	mov	r0, r3
 8010938:	f000 f8c0 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010940:	e09d      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010942:	2300      	movs	r3, #0
 8010944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010946:	e09a      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010948:	4b20      	ldr	r3, [pc, #128]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010954:	d107      	bne.n	8010966 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010956:	f107 030c 	add.w	r3, r7, #12
 801095a:	4618      	mov	r0, r3
 801095c:	f000 fa02 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010964:	e08b      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010966:	2300      	movs	r3, #0
 8010968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801096a:	e088      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801096c:	4b17      	ldr	r3, [pc, #92]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f003 0304 	and.w	r3, r3, #4
 8010974:	2b04      	cmp	r3, #4
 8010976:	d109      	bne.n	801098c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010978:	4b14      	ldr	r3, [pc, #80]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	08db      	lsrs	r3, r3, #3
 801097e:	f003 0303 	and.w	r3, r3, #3
 8010982:	4a13      	ldr	r2, [pc, #76]	; (80109d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010984:	fa22 f303 	lsr.w	r3, r2, r3
 8010988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801098a:	e078      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801098c:	2300      	movs	r3, #0
 801098e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010990:	e075      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010992:	4b0e      	ldr	r3, [pc, #56]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801099a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801099e:	d102      	bne.n	80109a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80109a0:	4b0c      	ldr	r3, [pc, #48]	; (80109d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80109a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109a4:	e06b      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109a6:	2300      	movs	r3, #0
 80109a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109aa:	e068      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80109ac:	4b07      	ldr	r3, [pc, #28]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109b8:	d102      	bne.n	80109c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80109ba:	4b07      	ldr	r3, [pc, #28]	; (80109d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80109bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109be:	e05e      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109c0:	2300      	movs	r3, #0
 80109c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109c4:	e05b      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80109c6:	2300      	movs	r3, #0
 80109c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109ca:	e058      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80109cc:	58024400 	.word	0x58024400
 80109d0:	03d09000 	.word	0x03d09000
 80109d4:	003d0900 	.word	0x003d0900
 80109d8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80109dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109e0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80109e4:	430b      	orrs	r3, r1
 80109e6:	d148      	bne.n	8010a7a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80109e8:	4b27      	ldr	r3, [pc, #156]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80109ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80109f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80109f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109f8:	d02a      	beq.n	8010a50 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80109fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a00:	d838      	bhi.n	8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d004      	beq.n	8010a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a0e:	d00d      	beq.n	8010a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010a10:	e030      	b.n	8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010a12:	4b1d      	ldr	r3, [pc, #116]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a1e:	d102      	bne.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010a20:	4b1a      	ldr	r3, [pc, #104]	; (8010a8c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a24:	e02b      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a2a:	e028      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010a2c:	4b16      	ldr	r3, [pc, #88]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010a38:	d107      	bne.n	8010a4a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f000 fae4 	bl	801100c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a48:	e019      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a4e:	e016      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a50:	4b0d      	ldr	r3, [pc, #52]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a5c:	d107      	bne.n	8010a6e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a5e:	f107 0318 	add.w	r3, r7, #24
 8010a62:	4618      	mov	r0, r3
 8010a64:	f000 f82a 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010a68:	69fb      	ldr	r3, [r7, #28]
 8010a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a6c:	e007      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a72:	e004      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010a74:	2300      	movs	r3, #0
 8010a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a78:	e001      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3740      	adds	r7, #64	; 0x40
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	58024400 	.word	0x58024400
 8010a8c:	017d7840 	.word	0x017d7840

08010a90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010a94:	f7fd ffd4 	bl	800ea40 <HAL_RCC_GetHCLKFreq>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	4b06      	ldr	r3, [pc, #24]	; (8010ab4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010a9c:	6a1b      	ldr	r3, [r3, #32]
 8010a9e:	091b      	lsrs	r3, r3, #4
 8010aa0:	f003 0307 	and.w	r3, r3, #7
 8010aa4:	4904      	ldr	r1, [pc, #16]	; (8010ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010aa6:	5ccb      	ldrb	r3, [r1, r3]
 8010aa8:	f003 031f 	and.w	r3, r3, #31
 8010aac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	58024400 	.word	0x58024400
 8010ab8:	0801ae14 	.word	0x0801ae14

08010abc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010abc:	b480      	push	{r7}
 8010abe:	b089      	sub	sp, #36	; 0x24
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010ac4:	4ba1      	ldr	r3, [pc, #644]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ac8:	f003 0303 	and.w	r3, r3, #3
 8010acc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010ace:	4b9f      	ldr	r3, [pc, #636]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ad2:	0b1b      	lsrs	r3, r3, #12
 8010ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ad8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010ada:	4b9c      	ldr	r3, [pc, #624]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ade:	091b      	lsrs	r3, r3, #4
 8010ae0:	f003 0301 	and.w	r3, r3, #1
 8010ae4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010ae6:	4b99      	ldr	r3, [pc, #612]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aea:	08db      	lsrs	r3, r3, #3
 8010aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010af0:	693a      	ldr	r2, [r7, #16]
 8010af2:	fb02 f303 	mul.w	r3, r2, r3
 8010af6:	ee07 3a90 	vmov	s15, r3
 8010afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010afe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f000 8111 	beq.w	8010d2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010b0a:	69bb      	ldr	r3, [r7, #24]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	f000 8083 	beq.w	8010c18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010b12:	69bb      	ldr	r3, [r7, #24]
 8010b14:	2b02      	cmp	r3, #2
 8010b16:	f200 80a1 	bhi.w	8010c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010b1a:	69bb      	ldr	r3, [r7, #24]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d003      	beq.n	8010b28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010b20:	69bb      	ldr	r3, [r7, #24]
 8010b22:	2b01      	cmp	r3, #1
 8010b24:	d056      	beq.n	8010bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010b26:	e099      	b.n	8010c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b28:	4b88      	ldr	r3, [pc, #544]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f003 0320 	and.w	r3, r3, #32
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d02d      	beq.n	8010b90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b34:	4b85      	ldr	r3, [pc, #532]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	08db      	lsrs	r3, r3, #3
 8010b3a:	f003 0303 	and.w	r3, r3, #3
 8010b3e:	4a84      	ldr	r2, [pc, #528]	; (8010d50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010b40:	fa22 f303 	lsr.w	r3, r2, r3
 8010b44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	ee07 3a90 	vmov	s15, r3
 8010b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	ee07 3a90 	vmov	s15, r3
 8010b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b5e:	4b7b      	ldr	r3, [pc, #492]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b66:	ee07 3a90 	vmov	s15, r3
 8010b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010b8e:	e087      	b.n	8010ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	ee07 3a90 	vmov	s15, r3
 8010b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010d58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ba2:	4b6a      	ldr	r3, [pc, #424]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010baa:	ee07 3a90 	vmov	s15, r3
 8010bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bd2:	e065      	b.n	8010ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	ee07 3a90 	vmov	s15, r3
 8010bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010be6:	4b59      	ldr	r3, [pc, #356]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bee:	ee07 3a90 	vmov	s15, r3
 8010bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c16:	e043      	b.n	8010ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	ee07 3a90 	vmov	s15, r3
 8010c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c2a:	4b48      	ldr	r3, [pc, #288]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c32:	ee07 3a90 	vmov	s15, r3
 8010c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c5a:	e021      	b.n	8010ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	ee07 3a90 	vmov	s15, r3
 8010c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c6e:	4b37      	ldr	r3, [pc, #220]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c76:	ee07 3a90 	vmov	s15, r3
 8010c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010ca0:	4b2a      	ldr	r3, [pc, #168]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ca4:	0a5b      	lsrs	r3, r3, #9
 8010ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010caa:	ee07 3a90 	vmov	s15, r3
 8010cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8010cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010cc6:	ee17 2a90 	vmov	r2, s15
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010cce:	4b1f      	ldr	r3, [pc, #124]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cd2:	0c1b      	lsrs	r3, r3, #16
 8010cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cd8:	ee07 3a90 	vmov	s15, r3
 8010cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8010cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010cf4:	ee17 2a90 	vmov	r2, s15
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010cfc:	4b13      	ldr	r3, [pc, #76]	; (8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d00:	0e1b      	lsrs	r3, r3, #24
 8010d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d06:	ee07 3a90 	vmov	s15, r3
 8010d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d22:	ee17 2a90 	vmov	r2, s15
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010d2a:	e008      	b.n	8010d3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2200      	movs	r2, #0
 8010d36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	609a      	str	r2, [r3, #8]
}
 8010d3e:	bf00      	nop
 8010d40:	3724      	adds	r7, #36	; 0x24
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr
 8010d4a:	bf00      	nop
 8010d4c:	58024400 	.word	0x58024400
 8010d50:	03d09000 	.word	0x03d09000
 8010d54:	46000000 	.word	0x46000000
 8010d58:	4c742400 	.word	0x4c742400
 8010d5c:	4a742400 	.word	0x4a742400
 8010d60:	4bbebc20 	.word	0x4bbebc20

08010d64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b089      	sub	sp, #36	; 0x24
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010d6c:	4ba1      	ldr	r3, [pc, #644]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d70:	f003 0303 	and.w	r3, r3, #3
 8010d74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010d76:	4b9f      	ldr	r3, [pc, #636]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d7a:	0d1b      	lsrs	r3, r3, #20
 8010d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010d82:	4b9c      	ldr	r3, [pc, #624]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d86:	0a1b      	lsrs	r3, r3, #8
 8010d88:	f003 0301 	and.w	r3, r3, #1
 8010d8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010d8e:	4b99      	ldr	r3, [pc, #612]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d92:	08db      	lsrs	r3, r3, #3
 8010d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d98:	693a      	ldr	r2, [r7, #16]
 8010d9a:	fb02 f303 	mul.w	r3, r2, r3
 8010d9e:	ee07 3a90 	vmov	s15, r3
 8010da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010da6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f000 8111 	beq.w	8010fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	2b02      	cmp	r3, #2
 8010db6:	f000 8083 	beq.w	8010ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	f200 80a1 	bhi.w	8010f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d003      	beq.n	8010dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	2b01      	cmp	r3, #1
 8010dcc:	d056      	beq.n	8010e7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010dce:	e099      	b.n	8010f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010dd0:	4b88      	ldr	r3, [pc, #544]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f003 0320 	and.w	r3, r3, #32
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d02d      	beq.n	8010e38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ddc:	4b85      	ldr	r3, [pc, #532]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	08db      	lsrs	r3, r3, #3
 8010de2:	f003 0303 	and.w	r3, r3, #3
 8010de6:	4a84      	ldr	r2, [pc, #528]	; (8010ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010de8:	fa22 f303 	lsr.w	r3, r2, r3
 8010dec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	ee07 3a90 	vmov	s15, r3
 8010df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	ee07 3a90 	vmov	s15, r3
 8010dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e06:	4b7b      	ldr	r3, [pc, #492]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e0e:	ee07 3a90 	vmov	s15, r3
 8010e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010e36:	e087      	b.n	8010f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	ee07 3a90 	vmov	s15, r3
 8010e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8011000 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e4a:	4b6a      	ldr	r3, [pc, #424]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e52:	ee07 3a90 	vmov	s15, r3
 8010e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e7a:	e065      	b.n	8010f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	ee07 3a90 	vmov	s15, r3
 8010e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e8e:	4b59      	ldr	r3, [pc, #356]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e96:	ee07 3a90 	vmov	s15, r3
 8010e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ea2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ebe:	e043      	b.n	8010f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	ee07 3a90 	vmov	s15, r3
 8010ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ed2:	4b48      	ldr	r3, [pc, #288]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eda:	ee07 3a90 	vmov	s15, r3
 8010ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ee6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f02:	e021      	b.n	8010f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	ee07 3a90 	vmov	s15, r3
 8010f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f16:	4b37      	ldr	r3, [pc, #220]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f1e:	ee07 3a90 	vmov	s15, r3
 8010f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010f48:	4b2a      	ldr	r3, [pc, #168]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f4c:	0a5b      	lsrs	r3, r3, #9
 8010f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f52:	ee07 3a90 	vmov	s15, r3
 8010f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f6e:	ee17 2a90 	vmov	r2, s15
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010f76:	4b1f      	ldr	r3, [pc, #124]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f7a:	0c1b      	lsrs	r3, r3, #16
 8010f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f80:	ee07 3a90 	vmov	s15, r3
 8010f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f9c:	ee17 2a90 	vmov	r2, s15
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010fa4:	4b13      	ldr	r3, [pc, #76]	; (8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fa8:	0e1b      	lsrs	r3, r3, #24
 8010faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fae:	ee07 3a90 	vmov	s15, r3
 8010fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8010fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fca:	ee17 2a90 	vmov	r2, s15
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010fd2:	e008      	b.n	8010fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	609a      	str	r2, [r3, #8]
}
 8010fe6:	bf00      	nop
 8010fe8:	3724      	adds	r7, #36	; 0x24
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr
 8010ff2:	bf00      	nop
 8010ff4:	58024400 	.word	0x58024400
 8010ff8:	03d09000 	.word	0x03d09000
 8010ffc:	46000000 	.word	0x46000000
 8011000:	4c742400 	.word	0x4c742400
 8011004:	4a742400 	.word	0x4a742400
 8011008:	4bbebc20 	.word	0x4bbebc20

0801100c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801100c:	b480      	push	{r7}
 801100e:	b089      	sub	sp, #36	; 0x24
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011014:	4ba0      	ldr	r3, [pc, #640]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011018:	f003 0303 	and.w	r3, r3, #3
 801101c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801101e:	4b9e      	ldr	r3, [pc, #632]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011022:	091b      	lsrs	r3, r3, #4
 8011024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011028:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801102a:	4b9b      	ldr	r3, [pc, #620]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801102e:	f003 0301 	and.w	r3, r3, #1
 8011032:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011034:	4b98      	ldr	r3, [pc, #608]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011038:	08db      	lsrs	r3, r3, #3
 801103a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801103e:	693a      	ldr	r2, [r7, #16]
 8011040:	fb02 f303 	mul.w	r3, r2, r3
 8011044:	ee07 3a90 	vmov	s15, r3
 8011048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801104c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	2b00      	cmp	r3, #0
 8011054:	f000 8111 	beq.w	801127a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8011058:	69bb      	ldr	r3, [r7, #24]
 801105a:	2b02      	cmp	r3, #2
 801105c:	f000 8083 	beq.w	8011166 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8011060:	69bb      	ldr	r3, [r7, #24]
 8011062:	2b02      	cmp	r3, #2
 8011064:	f200 80a1 	bhi.w	80111aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8011068:	69bb      	ldr	r3, [r7, #24]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d003      	beq.n	8011076 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801106e:	69bb      	ldr	r3, [r7, #24]
 8011070:	2b01      	cmp	r3, #1
 8011072:	d056      	beq.n	8011122 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011074:	e099      	b.n	80111aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011076:	4b88      	ldr	r3, [pc, #544]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f003 0320 	and.w	r3, r3, #32
 801107e:	2b00      	cmp	r3, #0
 8011080:	d02d      	beq.n	80110de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011082:	4b85      	ldr	r3, [pc, #532]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	08db      	lsrs	r3, r3, #3
 8011088:	f003 0303 	and.w	r3, r3, #3
 801108c:	4a83      	ldr	r2, [pc, #524]	; (801129c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801108e:	fa22 f303 	lsr.w	r3, r2, r3
 8011092:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	ee07 3a90 	vmov	s15, r3
 801109a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	ee07 3a90 	vmov	s15, r3
 80110a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110ac:	4b7a      	ldr	r3, [pc, #488]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110b4:	ee07 3a90 	vmov	s15, r3
 80110b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80110c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80112a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80110c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80110dc:	e087      	b.n	80111ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	ee07 3a90 	vmov	s15, r3
 80110e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80112a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80110ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110f0:	4b69      	ldr	r3, [pc, #420]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110f8:	ee07 3a90 	vmov	s15, r3
 80110fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011100:	ed97 6a03 	vldr	s12, [r7, #12]
 8011104:	eddf 5a66 	vldr	s11, [pc, #408]	; 80112a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801110c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011118:	ee67 7a27 	vmul.f32	s15, s14, s15
 801111c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011120:	e065      	b.n	80111ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	ee07 3a90 	vmov	s15, r3
 8011128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801112c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80112a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8011130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011134:	4b58      	ldr	r3, [pc, #352]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801113c:	ee07 3a90 	vmov	s15, r3
 8011140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011144:	ed97 6a03 	vldr	s12, [r7, #12]
 8011148:	eddf 5a55 	vldr	s11, [pc, #340]	; 80112a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801114c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011164:	e043      	b.n	80111ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	ee07 3a90 	vmov	s15, r3
 801116c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011170:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80112ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011178:	4b47      	ldr	r3, [pc, #284]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801117c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011180:	ee07 3a90 	vmov	s15, r3
 8011184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011188:	ed97 6a03 	vldr	s12, [r7, #12]
 801118c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80112a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801119c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111a8:	e021      	b.n	80111ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	ee07 3a90 	vmov	s15, r3
 80111b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80112a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80111b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111bc:	4b36      	ldr	r3, [pc, #216]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111c4:	ee07 3a90 	vmov	s15, r3
 80111c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80111d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80112a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80111d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80111ee:	4b2a      	ldr	r3, [pc, #168]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111f2:	0a5b      	lsrs	r3, r3, #9
 80111f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111f8:	ee07 3a90 	vmov	s15, r3
 80111fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011208:	edd7 6a07 	vldr	s13, [r7, #28]
 801120c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011214:	ee17 2a90 	vmov	r2, s15
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801121c:	4b1e      	ldr	r3, [pc, #120]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011220:	0c1b      	lsrs	r3, r3, #16
 8011222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011226:	ee07 3a90 	vmov	s15, r3
 801122a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801122e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011236:	edd7 6a07 	vldr	s13, [r7, #28]
 801123a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801123e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011242:	ee17 2a90 	vmov	r2, s15
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801124a:	4b13      	ldr	r3, [pc, #76]	; (8011298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801124e:	0e1b      	lsrs	r3, r3, #24
 8011250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011254:	ee07 3a90 	vmov	s15, r3
 8011258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801125c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011264:	edd7 6a07 	vldr	s13, [r7, #28]
 8011268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011270:	ee17 2a90 	vmov	r2, s15
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011278:	e008      	b.n	801128c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2200      	movs	r2, #0
 801127e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2200      	movs	r2, #0
 8011284:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2200      	movs	r2, #0
 801128a:	609a      	str	r2, [r3, #8]
}
 801128c:	bf00      	nop
 801128e:	3724      	adds	r7, #36	; 0x24
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr
 8011298:	58024400 	.word	0x58024400
 801129c:	03d09000 	.word	0x03d09000
 80112a0:	46000000 	.word	0x46000000
 80112a4:	4c742400 	.word	0x4c742400
 80112a8:	4a742400 	.word	0x4a742400
 80112ac:	4bbebc20 	.word	0x4bbebc20

080112b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80112ba:	2300      	movs	r3, #0
 80112bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80112be:	4b53      	ldr	r3, [pc, #332]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80112c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c2:	f003 0303 	and.w	r3, r3, #3
 80112c6:	2b03      	cmp	r3, #3
 80112c8:	d101      	bne.n	80112ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80112ca:	2301      	movs	r3, #1
 80112cc:	e099      	b.n	8011402 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80112ce:	4b4f      	ldr	r3, [pc, #316]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	4a4e      	ldr	r2, [pc, #312]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80112d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80112d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80112da:	f7f4 fc03 	bl	8005ae4 <HAL_GetTick>
 80112de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80112e0:	e008      	b.n	80112f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80112e2:	f7f4 fbff 	bl	8005ae4 <HAL_GetTick>
 80112e6:	4602      	mov	r2, r0
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	1ad3      	subs	r3, r2, r3
 80112ec:	2b02      	cmp	r3, #2
 80112ee:	d901      	bls.n	80112f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80112f0:	2303      	movs	r3, #3
 80112f2:	e086      	b.n	8011402 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80112f4:	4b45      	ldr	r3, [pc, #276]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d1f0      	bne.n	80112e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011300:	4b42      	ldr	r3, [pc, #264]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 8011302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011304:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	031b      	lsls	r3, r3, #12
 801130e:	493f      	ldr	r1, [pc, #252]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 8011310:	4313      	orrs	r3, r2
 8011312:	628b      	str	r3, [r1, #40]	; 0x28
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	3b01      	subs	r3, #1
 801131a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	689b      	ldr	r3, [r3, #8]
 8011322:	3b01      	subs	r3, #1
 8011324:	025b      	lsls	r3, r3, #9
 8011326:	b29b      	uxth	r3, r3
 8011328:	431a      	orrs	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	68db      	ldr	r3, [r3, #12]
 801132e:	3b01      	subs	r3, #1
 8011330:	041b      	lsls	r3, r3, #16
 8011332:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011336:	431a      	orrs	r2, r3
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	691b      	ldr	r3, [r3, #16]
 801133c:	3b01      	subs	r3, #1
 801133e:	061b      	lsls	r3, r3, #24
 8011340:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011344:	4931      	ldr	r1, [pc, #196]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 8011346:	4313      	orrs	r3, r2
 8011348:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801134a:	4b30      	ldr	r3, [pc, #192]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 801134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801134e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	695b      	ldr	r3, [r3, #20]
 8011356:	492d      	ldr	r1, [pc, #180]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 8011358:	4313      	orrs	r3, r2
 801135a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801135c:	4b2b      	ldr	r3, [pc, #172]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 801135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011360:	f023 0220 	bic.w	r2, r3, #32
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	699b      	ldr	r3, [r3, #24]
 8011368:	4928      	ldr	r1, [pc, #160]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 801136a:	4313      	orrs	r3, r2
 801136c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801136e:	4b27      	ldr	r3, [pc, #156]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 8011370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011372:	4a26      	ldr	r2, [pc, #152]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 8011374:	f023 0310 	bic.w	r3, r3, #16
 8011378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801137a:	4b24      	ldr	r3, [pc, #144]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 801137c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801137e:	4b24      	ldr	r3, [pc, #144]	; (8011410 <RCCEx_PLL2_Config+0x160>)
 8011380:	4013      	ands	r3, r2
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	69d2      	ldr	r2, [r2, #28]
 8011386:	00d2      	lsls	r2, r2, #3
 8011388:	4920      	ldr	r1, [pc, #128]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 801138a:	4313      	orrs	r3, r2
 801138c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801138e:	4b1f      	ldr	r3, [pc, #124]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 8011390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011392:	4a1e      	ldr	r2, [pc, #120]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 8011394:	f043 0310 	orr.w	r3, r3, #16
 8011398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d106      	bne.n	80113ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80113a0:	4b1a      	ldr	r3, [pc, #104]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80113a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a4:	4a19      	ldr	r2, [pc, #100]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80113a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80113aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80113ac:	e00f      	b.n	80113ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d106      	bne.n	80113c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80113b4:	4b15      	ldr	r3, [pc, #84]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80113b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b8:	4a14      	ldr	r2, [pc, #80]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80113ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80113be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80113c0:	e005      	b.n	80113ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80113c2:	4b12      	ldr	r3, [pc, #72]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80113c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c6:	4a11      	ldr	r2, [pc, #68]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80113c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80113cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80113ce:	4b0f      	ldr	r3, [pc, #60]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	4a0e      	ldr	r2, [pc, #56]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80113d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80113d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113da:	f7f4 fb83 	bl	8005ae4 <HAL_GetTick>
 80113de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80113e0:	e008      	b.n	80113f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80113e2:	f7f4 fb7f 	bl	8005ae4 <HAL_GetTick>
 80113e6:	4602      	mov	r2, r0
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	1ad3      	subs	r3, r2, r3
 80113ec:	2b02      	cmp	r3, #2
 80113ee:	d901      	bls.n	80113f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80113f0:	2303      	movs	r3, #3
 80113f2:	e006      	b.n	8011402 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80113f4:	4b05      	ldr	r3, [pc, #20]	; (801140c <RCCEx_PLL2_Config+0x15c>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d0f0      	beq.n	80113e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011400:	7bfb      	ldrb	r3, [r7, #15]
}
 8011402:	4618      	mov	r0, r3
 8011404:	3710      	adds	r7, #16
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}
 801140a:	bf00      	nop
 801140c:	58024400 	.word	0x58024400
 8011410:	ffff0007 	.word	0xffff0007

08011414 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801141e:	2300      	movs	r3, #0
 8011420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011422:	4b53      	ldr	r3, [pc, #332]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 8011424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011426:	f003 0303 	and.w	r3, r3, #3
 801142a:	2b03      	cmp	r3, #3
 801142c:	d101      	bne.n	8011432 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801142e:	2301      	movs	r3, #1
 8011430:	e099      	b.n	8011566 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011432:	4b4f      	ldr	r3, [pc, #316]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	4a4e      	ldr	r2, [pc, #312]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 8011438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801143c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801143e:	f7f4 fb51 	bl	8005ae4 <HAL_GetTick>
 8011442:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011444:	e008      	b.n	8011458 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011446:	f7f4 fb4d 	bl	8005ae4 <HAL_GetTick>
 801144a:	4602      	mov	r2, r0
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	1ad3      	subs	r3, r2, r3
 8011450:	2b02      	cmp	r3, #2
 8011452:	d901      	bls.n	8011458 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011454:	2303      	movs	r3, #3
 8011456:	e086      	b.n	8011566 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011458:	4b45      	ldr	r3, [pc, #276]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011460:	2b00      	cmp	r3, #0
 8011462:	d1f0      	bne.n	8011446 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011464:	4b42      	ldr	r3, [pc, #264]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 8011466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011468:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	051b      	lsls	r3, r3, #20
 8011472:	493f      	ldr	r1, [pc, #252]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 8011474:	4313      	orrs	r3, r2
 8011476:	628b      	str	r3, [r1, #40]	; 0x28
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	3b01      	subs	r3, #1
 801147e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	3b01      	subs	r3, #1
 8011488:	025b      	lsls	r3, r3, #9
 801148a:	b29b      	uxth	r3, r3
 801148c:	431a      	orrs	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	3b01      	subs	r3, #1
 8011494:	041b      	lsls	r3, r3, #16
 8011496:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801149a:	431a      	orrs	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	691b      	ldr	r3, [r3, #16]
 80114a0:	3b01      	subs	r3, #1
 80114a2:	061b      	lsls	r3, r3, #24
 80114a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80114a8:	4931      	ldr	r1, [pc, #196]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114aa:	4313      	orrs	r3, r2
 80114ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80114ae:	4b30      	ldr	r3, [pc, #192]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	695b      	ldr	r3, [r3, #20]
 80114ba:	492d      	ldr	r1, [pc, #180]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114bc:	4313      	orrs	r3, r2
 80114be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80114c0:	4b2b      	ldr	r3, [pc, #172]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	699b      	ldr	r3, [r3, #24]
 80114cc:	4928      	ldr	r1, [pc, #160]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114ce:	4313      	orrs	r3, r2
 80114d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80114d2:	4b27      	ldr	r3, [pc, #156]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d6:	4a26      	ldr	r2, [pc, #152]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80114dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80114de:	4b24      	ldr	r3, [pc, #144]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114e2:	4b24      	ldr	r3, [pc, #144]	; (8011574 <RCCEx_PLL3_Config+0x160>)
 80114e4:	4013      	ands	r3, r2
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	69d2      	ldr	r2, [r2, #28]
 80114ea:	00d2      	lsls	r2, r2, #3
 80114ec:	4920      	ldr	r1, [pc, #128]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114ee:	4313      	orrs	r3, r2
 80114f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80114f2:	4b1f      	ldr	r3, [pc, #124]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f6:	4a1e      	ldr	r2, [pc, #120]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 80114f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d106      	bne.n	8011512 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011504:	4b1a      	ldr	r3, [pc, #104]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 8011506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011508:	4a19      	ldr	r2, [pc, #100]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 801150a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801150e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011510:	e00f      	b.n	8011532 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	2b01      	cmp	r3, #1
 8011516:	d106      	bne.n	8011526 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011518:	4b15      	ldr	r3, [pc, #84]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 801151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801151c:	4a14      	ldr	r2, [pc, #80]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 801151e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011522:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011524:	e005      	b.n	8011532 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011526:	4b12      	ldr	r3, [pc, #72]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 8011528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801152a:	4a11      	ldr	r2, [pc, #68]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 801152c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011530:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011532:	4b0f      	ldr	r3, [pc, #60]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	4a0e      	ldr	r2, [pc, #56]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 8011538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801153c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801153e:	f7f4 fad1 	bl	8005ae4 <HAL_GetTick>
 8011542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011544:	e008      	b.n	8011558 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011546:	f7f4 facd 	bl	8005ae4 <HAL_GetTick>
 801154a:	4602      	mov	r2, r0
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	1ad3      	subs	r3, r2, r3
 8011550:	2b02      	cmp	r3, #2
 8011552:	d901      	bls.n	8011558 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011554:	2303      	movs	r3, #3
 8011556:	e006      	b.n	8011566 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011558:	4b05      	ldr	r3, [pc, #20]	; (8011570 <RCCEx_PLL3_Config+0x15c>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011560:	2b00      	cmp	r3, #0
 8011562:	d0f0      	beq.n	8011546 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011564:	7bfb      	ldrb	r3, [r7, #15]
}
 8011566:	4618      	mov	r0, r3
 8011568:	3710      	adds	r7, #16
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
 801156e:	bf00      	nop
 8011570:	58024400 	.word	0x58024400
 8011574:	ffff0007 	.word	0xffff0007

08011578 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b084      	sub	sp, #16
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011580:	2301      	movs	r3, #1
 8011582:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d071      	beq.n	801166e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011590:	b2db      	uxtb	r3, r3
 8011592:	2b00      	cmp	r3, #0
 8011594:	d106      	bne.n	80115a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2200      	movs	r2, #0
 801159a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f7f2 fc36 	bl	8003e10 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2202      	movs	r2, #2
 80115a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	f003 0310 	and.w	r3, r3, #16
 80115b6:	2b10      	cmp	r3, #16
 80115b8:	d050      	beq.n	801165c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	22ca      	movs	r2, #202	; 0xca
 80115c0:	625a      	str	r2, [r3, #36]	; 0x24
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	2253      	movs	r2, #83	; 0x53
 80115c8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 fa4a 	bl	8011a64 <RTC_EnterInitMode>
 80115d0:	4603      	mov	r3, r0
 80115d2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80115d4:	7bfb      	ldrb	r3, [r7, #15]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d124      	bne.n	8011624 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	6899      	ldr	r1, [r3, #8]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	4b24      	ldr	r3, [pc, #144]	; (8011678 <HAL_RTC_Init+0x100>)
 80115e6:	400b      	ands	r3, r1
 80115e8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	6899      	ldr	r1, [r3, #8]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685a      	ldr	r2, [r3, #4]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	691b      	ldr	r3, [r3, #16]
 80115f8:	431a      	orrs	r2, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	699b      	ldr	r3, [r3, #24]
 80115fe:	431a      	orrs	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	430a      	orrs	r2, r1
 8011606:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	689b      	ldr	r3, [r3, #8]
 801160c:	0419      	lsls	r1, r3, #16
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	68da      	ldr	r2, [r3, #12]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	430a      	orrs	r2, r1
 8011618:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f000 fa56 	bl	8011acc <RTC_ExitInitMode>
 8011620:	4603      	mov	r3, r0
 8011622:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011624:	7bfb      	ldrb	r3, [r7, #15]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d113      	bne.n	8011652 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f022 0203 	bic.w	r2, r2, #3
 8011638:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	69da      	ldr	r2, [r3, #28]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	695b      	ldr	r3, [r3, #20]
 8011648:	431a      	orrs	r2, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	430a      	orrs	r2, r1
 8011650:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	22ff      	movs	r2, #255	; 0xff
 8011658:	625a      	str	r2, [r3, #36]	; 0x24
 801165a:	e001      	b.n	8011660 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 801165c:	2300      	movs	r3, #0
 801165e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011660:	7bfb      	ldrb	r3, [r7, #15]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d103      	bne.n	801166e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2201      	movs	r2, #1
 801166a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 801166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011670:	4618      	mov	r0, r3
 8011672:	3710      	adds	r7, #16
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	ff8fffbf 	.word	0xff8fffbf

0801167c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801167c:	b590      	push	{r4, r7, lr}
 801167e:	b087      	sub	sp, #28
 8011680:	af00      	add	r7, sp, #0
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	60b9      	str	r1, [r7, #8]
 8011686:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d101      	bne.n	8011696 <HAL_RTC_SetTime+0x1a>
 8011692:	2302      	movs	r3, #2
 8011694:	e089      	b.n	80117aa <HAL_RTC_SetTime+0x12e>
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2201      	movs	r2, #1
 801169a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2202      	movs	r2, #2
 80116a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	22ca      	movs	r2, #202	; 0xca
 80116ac:	625a      	str	r2, [r3, #36]	; 0x24
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2253      	movs	r2, #83	; 0x53
 80116b4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80116b6:	68f8      	ldr	r0, [r7, #12]
 80116b8:	f000 f9d4 	bl	8011a64 <RTC_EnterInitMode>
 80116bc:	4603      	mov	r3, r0
 80116be:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80116c0:	7cfb      	ldrb	r3, [r7, #19]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d161      	bne.n	801178a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d126      	bne.n	801171a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	689b      	ldr	r3, [r3, #8]
 80116d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d102      	bne.n	80116e0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	2200      	movs	r2, #0
 80116de:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	4618      	mov	r0, r3
 80116e6:	f000 fa2f 	bl	8011b48 <RTC_ByteToBcd2>
 80116ea:	4603      	mov	r3, r0
 80116ec:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80116ee:	68bb      	ldr	r3, [r7, #8]
 80116f0:	785b      	ldrb	r3, [r3, #1]
 80116f2:	4618      	mov	r0, r3
 80116f4:	f000 fa28 	bl	8011b48 <RTC_ByteToBcd2>
 80116f8:	4603      	mov	r3, r0
 80116fa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80116fc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	789b      	ldrb	r3, [r3, #2]
 8011702:	4618      	mov	r0, r3
 8011704:	f000 fa20 	bl	8011b48 <RTC_ByteToBcd2>
 8011708:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801170a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	78db      	ldrb	r3, [r3, #3]
 8011712:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011714:	4313      	orrs	r3, r2
 8011716:	617b      	str	r3, [r7, #20]
 8011718:	e018      	b.n	801174c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011724:	2b00      	cmp	r3, #0
 8011726:	d102      	bne.n	801172e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	2200      	movs	r2, #0
 801172c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	785b      	ldrb	r3, [r3, #1]
 8011738:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801173a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 801173c:	68ba      	ldr	r2, [r7, #8]
 801173e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011740:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	78db      	ldrb	r3, [r3, #3]
 8011746:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011748:	4313      	orrs	r3, r2
 801174a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	6979      	ldr	r1, [r7, #20]
 8011752:	4b18      	ldr	r3, [pc, #96]	; (80117b4 <HAL_RTC_SetTime+0x138>)
 8011754:	400b      	ands	r3, r1
 8011756:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	689a      	ldr	r2, [r3, #8]
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011766:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	6899      	ldr	r1, [r3, #8]
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	68da      	ldr	r2, [r3, #12]
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	691b      	ldr	r3, [r3, #16]
 8011776:	431a      	orrs	r2, r3
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	430a      	orrs	r2, r1
 801177e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011780:	68f8      	ldr	r0, [r7, #12]
 8011782:	f000 f9a3 	bl	8011acc <RTC_ExitInitMode>
 8011786:	4603      	mov	r3, r0
 8011788:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	22ff      	movs	r2, #255	; 0xff
 8011790:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011792:	7cfb      	ldrb	r3, [r7, #19]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d103      	bne.n	80117a0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2201      	movs	r2, #1
 801179c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2200      	movs	r2, #0
 80117a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80117a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	371c      	adds	r7, #28
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd90      	pop	{r4, r7, pc}
 80117b2:	bf00      	nop
 80117b4:	007f7f7f 	.word	0x007f7f7f

080117b8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b086      	sub	sp, #24
 80117bc:	af00      	add	r7, sp, #0
 80117be:	60f8      	str	r0, [r7, #12]
 80117c0:	60b9      	str	r1, [r7, #8]
 80117c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	691b      	ldr	r3, [r3, #16]
 80117d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	4b22      	ldr	r3, [pc, #136]	; (801186c <HAL_RTC_GetTime+0xb4>)
 80117e4:	4013      	ands	r3, r2
 80117e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	0c1b      	lsrs	r3, r3, #16
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80117f2:	b2da      	uxtb	r2, r3
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	0a1b      	lsrs	r3, r3, #8
 80117fc:	b2db      	uxtb	r3, r3
 80117fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011802:	b2da      	uxtb	r2, r3
 8011804:	68bb      	ldr	r3, [r7, #8]
 8011806:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	b2db      	uxtb	r3, r3
 801180c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011810:	b2da      	uxtb	r2, r3
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	0d9b      	lsrs	r3, r3, #22
 801181a:	b2db      	uxtb	r3, r3
 801181c:	f003 0301 	and.w	r3, r3, #1
 8011820:	b2da      	uxtb	r2, r3
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d11a      	bne.n	8011862 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	4618      	mov	r0, r3
 8011832:	f000 f9a9 	bl	8011b88 <RTC_Bcd2ToByte>
 8011836:	4603      	mov	r3, r0
 8011838:	461a      	mov	r2, r3
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	785b      	ldrb	r3, [r3, #1]
 8011842:	4618      	mov	r0, r3
 8011844:	f000 f9a0 	bl	8011b88 <RTC_Bcd2ToByte>
 8011848:	4603      	mov	r3, r0
 801184a:	461a      	mov	r2, r3
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	789b      	ldrb	r3, [r3, #2]
 8011854:	4618      	mov	r0, r3
 8011856:	f000 f997 	bl	8011b88 <RTC_Bcd2ToByte>
 801185a:	4603      	mov	r3, r0
 801185c:	461a      	mov	r2, r3
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011862:	2300      	movs	r3, #0
}
 8011864:	4618      	mov	r0, r3
 8011866:	3718      	adds	r7, #24
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	007f7f7f 	.word	0x007f7f7f

08011870 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011870:	b590      	push	{r4, r7, lr}
 8011872:	b087      	sub	sp, #28
 8011874:	af00      	add	r7, sp, #0
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011882:	2b01      	cmp	r3, #1
 8011884:	d101      	bne.n	801188a <HAL_RTC_SetDate+0x1a>
 8011886:	2302      	movs	r3, #2
 8011888:	e073      	b.n	8011972 <HAL_RTC_SetDate+0x102>
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	2201      	movs	r2, #1
 801188e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2202      	movs	r2, #2
 8011896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10e      	bne.n	80118be <HAL_RTC_SetDate+0x4e>
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	785b      	ldrb	r3, [r3, #1]
 80118a4:	f003 0310 	and.w	r3, r3, #16
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d008      	beq.n	80118be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	785b      	ldrb	r3, [r3, #1]
 80118b0:	f023 0310 	bic.w	r3, r3, #16
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	330a      	adds	r3, #10
 80118b8:	b2da      	uxtb	r2, r3
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d11c      	bne.n	80118fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	78db      	ldrb	r3, [r3, #3]
 80118c8:	4618      	mov	r0, r3
 80118ca:	f000 f93d 	bl	8011b48 <RTC_ByteToBcd2>
 80118ce:	4603      	mov	r3, r0
 80118d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	785b      	ldrb	r3, [r3, #1]
 80118d6:	4618      	mov	r0, r3
 80118d8:	f000 f936 	bl	8011b48 <RTC_ByteToBcd2>
 80118dc:	4603      	mov	r3, r0
 80118de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80118e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	789b      	ldrb	r3, [r3, #2]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f000 f92e 	bl	8011b48 <RTC_ByteToBcd2>
 80118ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80118ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80118f8:	4313      	orrs	r3, r2
 80118fa:	617b      	str	r3, [r7, #20]
 80118fc:	e00e      	b.n	801191c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	78db      	ldrb	r3, [r3, #3]
 8011902:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	785b      	ldrb	r3, [r3, #1]
 8011908:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801190a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011910:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011918:	4313      	orrs	r3, r2
 801191a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	22ca      	movs	r2, #202	; 0xca
 8011922:	625a      	str	r2, [r3, #36]	; 0x24
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2253      	movs	r2, #83	; 0x53
 801192a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801192c:	68f8      	ldr	r0, [r7, #12]
 801192e:	f000 f899 	bl	8011a64 <RTC_EnterInitMode>
 8011932:	4603      	mov	r3, r0
 8011934:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011936:	7cfb      	ldrb	r3, [r7, #19]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d10a      	bne.n	8011952 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	6979      	ldr	r1, [r7, #20]
 8011942:	4b0e      	ldr	r3, [pc, #56]	; (801197c <HAL_RTC_SetDate+0x10c>)
 8011944:	400b      	ands	r3, r1
 8011946:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011948:	68f8      	ldr	r0, [r7, #12]
 801194a:	f000 f8bf 	bl	8011acc <RTC_ExitInitMode>
 801194e:	4603      	mov	r3, r0
 8011950:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	22ff      	movs	r2, #255	; 0xff
 8011958:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801195a:	7cfb      	ldrb	r3, [r7, #19]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d103      	bne.n	8011968 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2201      	movs	r2, #1
 8011964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2200      	movs	r2, #0
 801196c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011970:	7cfb      	ldrb	r3, [r7, #19]


}
 8011972:	4618      	mov	r0, r3
 8011974:	371c      	adds	r7, #28
 8011976:	46bd      	mov	sp, r7
 8011978:	bd90      	pop	{r4, r7, pc}
 801197a:	bf00      	nop
 801197c:	00ffff3f 	.word	0x00ffff3f

08011980 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b086      	sub	sp, #24
 8011984:	af00      	add	r7, sp, #0
 8011986:	60f8      	str	r0, [r7, #12]
 8011988:	60b9      	str	r1, [r7, #8]
 801198a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	685a      	ldr	r2, [r3, #4]
 8011992:	4b21      	ldr	r3, [pc, #132]	; (8011a18 <HAL_RTC_GetDate+0x98>)
 8011994:	4013      	ands	r3, r2
 8011996:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	0c1b      	lsrs	r3, r3, #16
 801199c:	b2da      	uxtb	r2, r3
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	0a1b      	lsrs	r3, r3, #8
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	f003 031f 	and.w	r3, r3, #31
 80119ac:	b2da      	uxtb	r2, r3
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	b2db      	uxtb	r3, r3
 80119b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119ba:	b2da      	uxtb	r2, r3
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	0b5b      	lsrs	r3, r3, #13
 80119c4:	b2db      	uxtb	r3, r3
 80119c6:	f003 0307 	and.w	r3, r3, #7
 80119ca:	b2da      	uxtb	r2, r3
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d11a      	bne.n	8011a0c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	78db      	ldrb	r3, [r3, #3]
 80119da:	4618      	mov	r0, r3
 80119dc:	f000 f8d4 	bl	8011b88 <RTC_Bcd2ToByte>
 80119e0:	4603      	mov	r3, r0
 80119e2:	461a      	mov	r2, r3
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	785b      	ldrb	r3, [r3, #1]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f000 f8cb 	bl	8011b88 <RTC_Bcd2ToByte>
 80119f2:	4603      	mov	r3, r0
 80119f4:	461a      	mov	r2, r3
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	789b      	ldrb	r3, [r3, #2]
 80119fe:	4618      	mov	r0, r3
 8011a00:	f000 f8c2 	bl	8011b88 <RTC_Bcd2ToByte>
 8011a04:	4603      	mov	r3, r0
 8011a06:	461a      	mov	r2, r3
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011a0c:	2300      	movs	r3, #0
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3718      	adds	r7, #24
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	00ffff3f 	.word	0x00ffff3f

08011a1c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	4a0d      	ldr	r2, [pc, #52]	; (8011a60 <HAL_RTC_WaitForSynchro+0x44>)
 8011a2a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8011a2c:	f7f4 f85a 	bl	8005ae4 <HAL_GetTick>
 8011a30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011a32:	e009      	b.n	8011a48 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011a34:	f7f4 f856 	bl	8005ae4 <HAL_GetTick>
 8011a38:	4602      	mov	r2, r0
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	1ad3      	subs	r3, r2, r3
 8011a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011a42:	d901      	bls.n	8011a48 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8011a44:	2303      	movs	r3, #3
 8011a46:	e007      	b.n	8011a58 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	f003 0320 	and.w	r3, r3, #32
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d0ee      	beq.n	8011a34 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011a56:	2300      	movs	r3, #0
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	0003ff5f 	.word	0x0003ff5f

08011a64 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d120      	bne.n	8011ac0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a86:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011a88:	f7f4 f82c 	bl	8005ae4 <HAL_GetTick>
 8011a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011a8e:	e00d      	b.n	8011aac <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011a90:	f7f4 f828 	bl	8005ae4 <HAL_GetTick>
 8011a94:	4602      	mov	r2, r0
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011a9e:	d905      	bls.n	8011aac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011aa0:	2303      	movs	r3, #3
 8011aa2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2203      	movs	r2, #3
 8011aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d102      	bne.n	8011ac0 <RTC_EnterInitMode+0x5c>
 8011aba:	7bfb      	ldrb	r3, [r7, #15]
 8011abc:	2b03      	cmp	r3, #3
 8011abe:	d1e7      	bne.n	8011a90 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3710      	adds	r7, #16
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
	...

08011acc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011ad8:	4b1a      	ldr	r3, [pc, #104]	; (8011b44 <RTC_ExitInitMode+0x78>)
 8011ada:	68db      	ldr	r3, [r3, #12]
 8011adc:	4a19      	ldr	r2, [pc, #100]	; (8011b44 <RTC_ExitInitMode+0x78>)
 8011ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ae2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011ae4:	4b17      	ldr	r3, [pc, #92]	; (8011b44 <RTC_ExitInitMode+0x78>)
 8011ae6:	689b      	ldr	r3, [r3, #8]
 8011ae8:	f003 0320 	and.w	r3, r3, #32
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d10c      	bne.n	8011b0a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f7ff ff93 	bl	8011a1c <HAL_RTC_WaitForSynchro>
 8011af6:	4603      	mov	r3, r0
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d01e      	beq.n	8011b3a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2203      	movs	r2, #3
 8011b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011b04:	2303      	movs	r3, #3
 8011b06:	73fb      	strb	r3, [r7, #15]
 8011b08:	e017      	b.n	8011b3a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011b0a:	4b0e      	ldr	r3, [pc, #56]	; (8011b44 <RTC_ExitInitMode+0x78>)
 8011b0c:	689b      	ldr	r3, [r3, #8]
 8011b0e:	4a0d      	ldr	r2, [pc, #52]	; (8011b44 <RTC_ExitInitMode+0x78>)
 8011b10:	f023 0320 	bic.w	r3, r3, #32
 8011b14:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7ff ff80 	bl	8011a1c <HAL_RTC_WaitForSynchro>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d005      	beq.n	8011b2e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2203      	movs	r2, #3
 8011b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011b2a:	2303      	movs	r3, #3
 8011b2c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011b2e:	4b05      	ldr	r3, [pc, #20]	; (8011b44 <RTC_ExitInitMode+0x78>)
 8011b30:	689b      	ldr	r3, [r3, #8]
 8011b32:	4a04      	ldr	r2, [pc, #16]	; (8011b44 <RTC_ExitInitMode+0x78>)
 8011b34:	f043 0320 	orr.w	r3, r3, #32
 8011b38:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3710      	adds	r7, #16
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}
 8011b44:	58004000 	.word	0x58004000

08011b48 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011b48:	b480      	push	{r7}
 8011b4a:	b085      	sub	sp, #20
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	4603      	mov	r3, r0
 8011b50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011b52:	2300      	movs	r3, #0
 8011b54:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011b56:	79fb      	ldrb	r3, [r7, #7]
 8011b58:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011b5a:	e005      	b.n	8011b68 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	3301      	adds	r3, #1
 8011b60:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011b62:	7afb      	ldrb	r3, [r7, #11]
 8011b64:	3b0a      	subs	r3, #10
 8011b66:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011b68:	7afb      	ldrb	r3, [r7, #11]
 8011b6a:	2b09      	cmp	r3, #9
 8011b6c:	d8f6      	bhi.n	8011b5c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	011b      	lsls	r3, r3, #4
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	7afb      	ldrb	r3, [r7, #11]
 8011b78:	4313      	orrs	r3, r2
 8011b7a:	b2db      	uxtb	r3, r3
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3714      	adds	r7, #20
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr

08011b88 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b085      	sub	sp, #20
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	4603      	mov	r3, r0
 8011b90:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011b92:	79fb      	ldrb	r3, [r7, #7]
 8011b94:	091b      	lsrs	r3, r3, #4
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	461a      	mov	r2, r3
 8011b9a:	0092      	lsls	r2, r2, #2
 8011b9c:	4413      	add	r3, r2
 8011b9e:	005b      	lsls	r3, r3, #1
 8011ba0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011ba2:	79fb      	ldrb	r3, [r7, #7]
 8011ba4:	f003 030f 	and.w	r3, r3, #15
 8011ba8:	b2da      	uxtb	r2, r3
 8011baa:	7bfb      	ldrb	r3, [r7, #15]
 8011bac:	4413      	add	r3, r2
 8011bae:	b2db      	uxtb	r3, r3
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3714      	adds	r7, #20
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr

08011bbc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d101      	bne.n	8011bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	e10f      	b.n	8011dee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	4a87      	ldr	r2, [pc, #540]	; (8011df8 <HAL_SPI_Init+0x23c>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d00f      	beq.n	8011bfe <HAL_SPI_Init+0x42>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	4a86      	ldr	r2, [pc, #536]	; (8011dfc <HAL_SPI_Init+0x240>)
 8011be4:	4293      	cmp	r3, r2
 8011be6:	d00a      	beq.n	8011bfe <HAL_SPI_Init+0x42>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	4a84      	ldr	r2, [pc, #528]	; (8011e00 <HAL_SPI_Init+0x244>)
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	d005      	beq.n	8011bfe <HAL_SPI_Init+0x42>
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	68db      	ldr	r3, [r3, #12]
 8011bf6:	2b0f      	cmp	r3, #15
 8011bf8:	d901      	bls.n	8011bfe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	e0f7      	b.n	8011dee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 fd60 	bl	80126c4 <SPI_GetPacketSize>
 8011c04:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	4a7b      	ldr	r2, [pc, #492]	; (8011df8 <HAL_SPI_Init+0x23c>)
 8011c0c:	4293      	cmp	r3, r2
 8011c0e:	d00c      	beq.n	8011c2a <HAL_SPI_Init+0x6e>
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	4a79      	ldr	r2, [pc, #484]	; (8011dfc <HAL_SPI_Init+0x240>)
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d007      	beq.n	8011c2a <HAL_SPI_Init+0x6e>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4a78      	ldr	r2, [pc, #480]	; (8011e00 <HAL_SPI_Init+0x244>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d002      	beq.n	8011c2a <HAL_SPI_Init+0x6e>
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2b08      	cmp	r3, #8
 8011c28:	d811      	bhi.n	8011c4e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011c2e:	4a72      	ldr	r2, [pc, #456]	; (8011df8 <HAL_SPI_Init+0x23c>)
 8011c30:	4293      	cmp	r3, r2
 8011c32:	d009      	beq.n	8011c48 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	4a70      	ldr	r2, [pc, #448]	; (8011dfc <HAL_SPI_Init+0x240>)
 8011c3a:	4293      	cmp	r3, r2
 8011c3c:	d004      	beq.n	8011c48 <HAL_SPI_Init+0x8c>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	4a6f      	ldr	r2, [pc, #444]	; (8011e00 <HAL_SPI_Init+0x244>)
 8011c44:	4293      	cmp	r3, r2
 8011c46:	d104      	bne.n	8011c52 <HAL_SPI_Init+0x96>
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b10      	cmp	r3, #16
 8011c4c:	d901      	bls.n	8011c52 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011c4e:	2301      	movs	r3, #1
 8011c50:	e0cd      	b.n	8011dee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d106      	bne.n	8011c6c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2200      	movs	r2, #0
 8011c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7f2 fb56 	bl	8004318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2202      	movs	r2, #2
 8011c70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f022 0201 	bic.w	r2, r2, #1
 8011c82:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	689b      	ldr	r3, [r3, #8]
 8011c8a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011c8e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	699b      	ldr	r3, [r3, #24]
 8011c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011c98:	d119      	bne.n	8011cce <HAL_SPI_Init+0x112>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011ca2:	d103      	bne.n	8011cac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d008      	beq.n	8011cbe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d10c      	bne.n	8011cce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011cbc:	d107      	bne.n	8011cce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	681a      	ldr	r2, [r3, #0]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011ccc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d00f      	beq.n	8011cfa <HAL_SPI_Init+0x13e>
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	68db      	ldr	r3, [r3, #12]
 8011cde:	2b06      	cmp	r3, #6
 8011ce0:	d90b      	bls.n	8011cfa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	430a      	orrs	r2, r1
 8011cf6:	601a      	str	r2, [r3, #0]
 8011cf8:	e007      	b.n	8011d0a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011d08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	69da      	ldr	r2, [r3, #28]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d12:	431a      	orrs	r2, r3
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	431a      	orrs	r2, r3
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d1c:	ea42 0103 	orr.w	r1, r2, r3
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	68da      	ldr	r2, [r3, #12]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	430a      	orrs	r2, r1
 8011d2a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d34:	431a      	orrs	r2, r3
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d3a:	431a      	orrs	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	699b      	ldr	r3, [r3, #24]
 8011d40:	431a      	orrs	r2, r3
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	691b      	ldr	r3, [r3, #16]
 8011d46:	431a      	orrs	r2, r3
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	695b      	ldr	r3, [r3, #20]
 8011d4c:	431a      	orrs	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6a1b      	ldr	r3, [r3, #32]
 8011d52:	431a      	orrs	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	431a      	orrs	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d5e:	431a      	orrs	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	689b      	ldr	r3, [r3, #8]
 8011d64:	431a      	orrs	r2, r3
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d6a:	ea42 0103 	orr.w	r1, r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	430a      	orrs	r2, r1
 8011d78:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d113      	bne.n	8011daa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011d94:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	689b      	ldr	r3, [r3, #8]
 8011d9c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011da8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	f022 0201 	bic.w	r2, r2, #1
 8011db8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d00a      	beq.n	8011ddc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	430a      	orrs	r2, r1
 8011dda:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2200      	movs	r2, #0
 8011de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2201      	movs	r2, #1
 8011de8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011dec:	2300      	movs	r3, #0
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3710      	adds	r7, #16
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	40013000 	.word	0x40013000
 8011dfc:	40003800 	.word	0x40003800
 8011e00:	40003c00 	.word	0x40003c00

08011e04 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	4613      	mov	r3, r2
 8011e10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	2b01      	cmp	r3, #1
 8011e1c:	d005      	beq.n	8011e2a <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	2200      	movs	r2, #0
 8011e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011e26:	2302      	movs	r3, #2
 8011e28:	e127      	b.n	801207a <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d002      	beq.n	8011e36 <HAL_SPI_Receive_DMA+0x32>
 8011e30:	88fb      	ldrh	r3, [r7, #6]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d105      	bne.n	8011e42 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	2200      	movs	r2, #0
 8011e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011e3e:	2301      	movs	r3, #1
 8011e40:	e11b      	b.n	801207a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011e48:	2b01      	cmp	r3, #1
 8011e4a:	d101      	bne.n	8011e50 <HAL_SPI_Receive_DMA+0x4c>
 8011e4c:	2302      	movs	r3, #2
 8011e4e:	e114      	b.n	801207a <HAL_SPI_Receive_DMA+0x276>
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2201      	movs	r2, #1
 8011e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2204      	movs	r2, #4
 8011e5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	2200      	movs	r2, #0
 8011e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	68ba      	ldr	r2, [r7, #8]
 8011e6c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	88fa      	ldrh	r2, [r7, #6]
 8011e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	88fa      	ldrh	r2, [r7, #6]
 8011e7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	2200      	movs	r2, #0
 8011e82:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	2200      	movs	r2, #0
 8011e88:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	2200      	movs	r2, #0
 8011e96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	689b      	ldr	r3, [r3, #8]
 8011e9e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011ea2:	d108      	bne.n	8011eb6 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	681a      	ldr	r2, [r3, #0]
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011eb2:	601a      	str	r2, [r3, #0]
 8011eb4:	e009      	b.n	8011eca <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011ec8:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	2b0f      	cmp	r3, #15
 8011ed0:	d905      	bls.n	8011ede <HAL_SPI_Receive_DMA+0xda>
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ed6:	699b      	ldr	r3, [r3, #24]
 8011ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011edc:	d10f      	bne.n	8011efe <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011ee2:	2b07      	cmp	r3, #7
 8011ee4:	d911      	bls.n	8011f0a <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011eea:	699b      	ldr	r3, [r3, #24]
 8011eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ef0:	d00b      	beq.n	8011f0a <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ef6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011efc:	d005      	beq.n	8011f0a <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2200      	movs	r2, #0
 8011f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011f06:	2301      	movs	r3, #1
 8011f08:	e0b7      	b.n	801207a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	689a      	ldr	r2, [r3, #8]
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011f18:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	2b07      	cmp	r3, #7
 8011f20:	d820      	bhi.n	8011f64 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f26:	699b      	ldr	r3, [r3, #24]
 8011f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f2c:	d109      	bne.n	8011f42 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f34:	b29b      	uxth	r3, r3
 8011f36:	3301      	adds	r3, #1
 8011f38:	105b      	asrs	r3, r3, #1
 8011f3a:	b29a      	uxth	r2, r3
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f46:	699b      	ldr	r3, [r3, #24]
 8011f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f4c:	d11e      	bne.n	8011f8c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	3303      	adds	r3, #3
 8011f58:	109b      	asrs	r3, r3, #2
 8011f5a:	b29a      	uxth	r2, r3
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011f62:	e013      	b.n	8011f8c <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	2b0f      	cmp	r3, #15
 8011f6a:	d80f      	bhi.n	8011f8c <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f70:	699b      	ldr	r3, [r3, #24]
 8011f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f76:	d109      	bne.n	8011f8c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	3301      	adds	r3, #1
 8011f82:	105b      	asrs	r3, r3, #1
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f90:	4a3c      	ldr	r2, [pc, #240]	; (8012084 <HAL_SPI_Receive_DMA+0x280>)
 8011f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f98:	4a3b      	ldr	r2, [pc, #236]	; (8012088 <HAL_SPI_Receive_DMA+0x284>)
 8011f9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fa0:	4a3a      	ldr	r2, [pc, #232]	; (801208c <HAL_SPI_Receive_DMA+0x288>)
 8011fa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fa8:	2200      	movs	r2, #0
 8011faa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	3330      	adds	r3, #48	; 0x30
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fbc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011fc4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011fc6:	f7f6 fa11 	bl	80083ec <HAL_DMA_Start_IT>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d011      	beq.n	8011ff4 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011fd6:	f043 0210 	orr.w	r2, r3, #16
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	2200      	movs	r2, #0
 8011fec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	e042      	b.n	801207a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ff8:	69db      	ldr	r3, [r3, #28]
 8011ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ffe:	d108      	bne.n	8012012 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	6859      	ldr	r1, [r3, #4]
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	681a      	ldr	r2, [r3, #0]
 801200a:	4b21      	ldr	r3, [pc, #132]	; (8012090 <HAL_SPI_Receive_DMA+0x28c>)
 801200c:	400b      	ands	r3, r1
 801200e:	6053      	str	r3, [r2, #4]
 8012010:	e009      	b.n	8012026 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	685a      	ldr	r2, [r3, #4]
 8012018:	4b1d      	ldr	r3, [pc, #116]	; (8012090 <HAL_SPI_Receive_DMA+0x28c>)
 801201a:	4013      	ands	r3, r2
 801201c:	88f9      	ldrh	r1, [r7, #6]
 801201e:	68fa      	ldr	r2, [r7, #12]
 8012020:	6812      	ldr	r2, [r2, #0]
 8012022:	430b      	orrs	r3, r1
 8012024:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	689a      	ldr	r2, [r3, #8]
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012034:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	691a      	ldr	r2, [r3, #16]
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8012044:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	681a      	ldr	r2, [r3, #0]
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f042 0201 	orr.w	r2, r2, #1
 8012054:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801205e:	d107      	bne.n	8012070 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801206e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2200      	movs	r2, #0
 8012074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012078:	2300      	movs	r3, #0
}
 801207a:	4618      	mov	r0, r3
 801207c:	3710      	adds	r7, #16
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	bf00      	nop
 8012084:	080124ef 	.word	0x080124ef
 8012088:	080124a9 	.word	0x080124a9
 801208c:	0801250b 	.word	0x0801250b
 8012090:	ffff0000 	.word	0xffff0000

08012094 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b08a      	sub	sp, #40	; 0x28
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	691b      	ldr	r3, [r3, #16]
 80120a2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	695b      	ldr	r3, [r3, #20]
 80120aa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80120ac:	6a3a      	ldr	r2, [r7, #32]
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	4013      	ands	r3, r2
 80120b2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	689b      	ldr	r3, [r3, #8]
 80120ba:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80120bc:	2300      	movs	r3, #0
 80120be:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80120c6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	3330      	adds	r3, #48	; 0x30
 80120ce:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d010      	beq.n	80120fc <HAL_SPI_IRQHandler+0x68>
 80120da:	6a3b      	ldr	r3, [r7, #32]
 80120dc:	f003 0308 	and.w	r3, r3, #8
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d00b      	beq.n	80120fc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	699a      	ldr	r2, [r3, #24]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80120f2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f000 f9cd 	bl	8012494 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80120fa:	e192      	b.n	8012422 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80120fc:	69bb      	ldr	r3, [r7, #24]
 80120fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012102:	2b00      	cmp	r3, #0
 8012104:	d113      	bne.n	801212e <HAL_SPI_IRQHandler+0x9a>
 8012106:	69bb      	ldr	r3, [r7, #24]
 8012108:	f003 0320 	and.w	r3, r3, #32
 801210c:	2b00      	cmp	r3, #0
 801210e:	d10e      	bne.n	801212e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012110:	69bb      	ldr	r3, [r7, #24]
 8012112:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012116:	2b00      	cmp	r3, #0
 8012118:	d009      	beq.n	801212e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	4798      	blx	r3
    hspi->RxISR(hspi);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	4798      	blx	r3
    handled = 1UL;
 801212a:	2301      	movs	r3, #1
 801212c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801212e:	69bb      	ldr	r3, [r7, #24]
 8012130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10f      	bne.n	8012158 <HAL_SPI_IRQHandler+0xc4>
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	f003 0301 	and.w	r3, r3, #1
 801213e:	2b00      	cmp	r3, #0
 8012140:	d00a      	beq.n	8012158 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012142:	69bb      	ldr	r3, [r7, #24]
 8012144:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012148:	2b00      	cmp	r3, #0
 801214a:	d105      	bne.n	8012158 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	4798      	blx	r3
    handled = 1UL;
 8012154:	2301      	movs	r3, #1
 8012156:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012158:	69bb      	ldr	r3, [r7, #24]
 801215a:	f003 0320 	and.w	r3, r3, #32
 801215e:	2b00      	cmp	r3, #0
 8012160:	d10f      	bne.n	8012182 <HAL_SPI_IRQHandler+0xee>
 8012162:	69bb      	ldr	r3, [r7, #24]
 8012164:	f003 0302 	and.w	r3, r3, #2
 8012168:	2b00      	cmp	r3, #0
 801216a:	d00a      	beq.n	8012182 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801216c:	69bb      	ldr	r3, [r7, #24]
 801216e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012172:	2b00      	cmp	r3, #0
 8012174:	d105      	bne.n	8012182 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	4798      	blx	r3
    handled = 1UL;
 801217e:	2301      	movs	r3, #1
 8012180:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8012182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012184:	2b00      	cmp	r3, #0
 8012186:	f040 8147 	bne.w	8012418 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801218a:	69bb      	ldr	r3, [r7, #24]
 801218c:	f003 0308 	and.w	r3, r3, #8
 8012190:	2b00      	cmp	r3, #0
 8012192:	f000 808b 	beq.w	80122ac <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	699a      	ldr	r2, [r3, #24]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	f042 0208 	orr.w	r2, r2, #8
 80121a4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	699a      	ldr	r2, [r3, #24]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f042 0210 	orr.w	r2, r2, #16
 80121b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	699a      	ldr	r2, [r3, #24]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80121c4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	691a      	ldr	r2, [r3, #16]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f022 0208 	bic.w	r2, r2, #8
 80121d4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	689b      	ldr	r3, [r3, #8]
 80121dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d13d      	bne.n	8012260 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80121e4:	e036      	b.n	8012254 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	68db      	ldr	r3, [r3, #12]
 80121ea:	2b0f      	cmp	r3, #15
 80121ec:	d90b      	bls.n	8012206 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681a      	ldr	r2, [r3, #0]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80121f8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121fe:	1d1a      	adds	r2, r3, #4
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	665a      	str	r2, [r3, #100]	; 0x64
 8012204:	e01d      	b.n	8012242 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	68db      	ldr	r3, [r3, #12]
 801220a:	2b07      	cmp	r3, #7
 801220c:	d90b      	bls.n	8012226 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012212:	68fa      	ldr	r2, [r7, #12]
 8012214:	8812      	ldrh	r2, [r2, #0]
 8012216:	b292      	uxth	r2, r2
 8012218:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801221e:	1c9a      	adds	r2, r3, #2
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	665a      	str	r2, [r3, #100]	; 0x64
 8012224:	e00d      	b.n	8012242 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012232:	7812      	ldrb	r2, [r2, #0]
 8012234:	b2d2      	uxtb	r2, r2
 8012236:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801223c:	1c5a      	adds	r2, r3, #1
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012248:	b29b      	uxth	r3, r3
 801224a:	3b01      	subs	r3, #1
 801224c:	b29a      	uxth	r2, r3
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801225a:	b29b      	uxth	r3, r3
 801225c:	2b00      	cmp	r3, #0
 801225e:	d1c2      	bne.n	80121e6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f000 f98f 	bl	8012584 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2201      	movs	r2, #1
 801226a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012274:	2b00      	cmp	r3, #0
 8012276:	d003      	beq.n	8012280 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f000 f901 	bl	8012480 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801227e:	e0d0      	b.n	8012422 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012280:	7cfb      	ldrb	r3, [r7, #19]
 8012282:	2b05      	cmp	r3, #5
 8012284:	d103      	bne.n	801228e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f000 f8e6 	bl	8012458 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801228c:	e0c6      	b.n	801241c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801228e:	7cfb      	ldrb	r3, [r7, #19]
 8012290:	2b04      	cmp	r3, #4
 8012292:	d103      	bne.n	801229c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f000 f8d5 	bl	8012444 <HAL_SPI_RxCpltCallback>
    return;
 801229a:	e0bf      	b.n	801241c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801229c:	7cfb      	ldrb	r3, [r7, #19]
 801229e:	2b03      	cmp	r3, #3
 80122a0:	f040 80bc 	bne.w	801241c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f000 f8c3 	bl	8012430 <HAL_SPI_TxCpltCallback>
    return;
 80122aa:	e0b7      	b.n	801241c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80122ac:	69bb      	ldr	r3, [r7, #24]
 80122ae:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f000 80b5 	beq.w	8012422 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80122b8:	69bb      	ldr	r3, [r7, #24]
 80122ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d00f      	beq.n	80122e2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122c8:	f043 0204 	orr.w	r2, r3, #4
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	699a      	ldr	r2, [r3, #24]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80122e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80122e2:	69bb      	ldr	r3, [r7, #24]
 80122e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d00f      	beq.n	801230c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122f2:	f043 0201 	orr.w	r2, r3, #1
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	699a      	ldr	r2, [r3, #24]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801230a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801230c:	69bb      	ldr	r3, [r7, #24]
 801230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012312:	2b00      	cmp	r3, #0
 8012314:	d00f      	beq.n	8012336 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801231c:	f043 0208 	orr.w	r2, r3, #8
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	699a      	ldr	r2, [r3, #24]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012334:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	f003 0320 	and.w	r3, r3, #32
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00f      	beq.n	8012360 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012346:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	699a      	ldr	r2, [r3, #24]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f042 0220 	orr.w	r2, r2, #32
 801235e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012366:	2b00      	cmp	r3, #0
 8012368:	d05a      	beq.n	8012420 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	681a      	ldr	r2, [r3, #0]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	f022 0201 	bic.w	r2, r2, #1
 8012378:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	6919      	ldr	r1, [r3, #16]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	4b28      	ldr	r3, [pc, #160]	; (8012428 <HAL_SPI_IRQHandler+0x394>)
 8012386:	400b      	ands	r3, r1
 8012388:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012390:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012394:	d138      	bne.n	8012408 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	689a      	ldr	r2, [r3, #8]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80123a4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d013      	beq.n	80123d6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123b2:	4a1e      	ldr	r2, [pc, #120]	; (801242c <HAL_SPI_IRQHandler+0x398>)
 80123b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7f6 fd9e 	bl	8008efc <HAL_DMA_Abort_IT>
 80123c0:	4603      	mov	r3, r0
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d007      	beq.n	80123d6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d020      	beq.n	8012420 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123e2:	4a12      	ldr	r2, [pc, #72]	; (801242c <HAL_SPI_IRQHandler+0x398>)
 80123e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7f6 fd86 	bl	8008efc <HAL_DMA_Abort_IT>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d014      	beq.n	8012420 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012406:	e00b      	b.n	8012420 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2201      	movs	r2, #1
 801240c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f000 f835 	bl	8012480 <HAL_SPI_ErrorCallback>
    return;
 8012416:	e003      	b.n	8012420 <HAL_SPI_IRQHandler+0x38c>
    return;
 8012418:	bf00      	nop
 801241a:	e002      	b.n	8012422 <HAL_SPI_IRQHandler+0x38e>
    return;
 801241c:	bf00      	nop
 801241e:	e000      	b.n	8012422 <HAL_SPI_IRQHandler+0x38e>
    return;
 8012420:	bf00      	nop
  }
}
 8012422:	3728      	adds	r7, #40	; 0x28
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}
 8012428:	fffffc94 	.word	0xfffffc94
 801242c:	08012551 	.word	0x08012551

08012430 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012430:	b480      	push	{r7}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8012438:	bf00      	nop
 801243a:	370c      	adds	r7, #12
 801243c:	46bd      	mov	sp, r7
 801243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012442:	4770      	bx	lr

08012444 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801244c:	bf00      	nop
 801244e:	370c      	adds	r7, #12
 8012450:	46bd      	mov	sp, r7
 8012452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012456:	4770      	bx	lr

08012458 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012460:	bf00      	nop
 8012462:	370c      	adds	r7, #12
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012474:	bf00      	nop
 8012476:	370c      	adds	r7, #12
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr

08012480 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012488:	bf00      	nop
 801248a:	370c      	adds	r7, #12
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801249c:	bf00      	nop
 801249e:	370c      	adds	r7, #12
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr

080124a8 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124b4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	2b07      	cmp	r3, #7
 80124c0:	d011      	beq.n	80124e6 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80124c6:	69db      	ldr	r3, [r3, #28]
 80124c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124cc:	d103      	bne.n	80124d6 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f7ff ffb8 	bl	8012444 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80124d4:	e007      	b.n	80124e6 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	691a      	ldr	r2, [r3, #16]
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f042 0208 	orr.w	r2, r2, #8
 80124e4:	611a      	str	r2, [r3, #16]
}
 80124e6:	bf00      	nop
 80124e8:	3710      	adds	r7, #16
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b084      	sub	sp, #16
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124fa:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80124fc:	68f8      	ldr	r0, [r7, #12]
 80124fe:	f7ff ffb5 	bl	801246c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012502:	bf00      	nop
 8012504:	3710      	adds	r7, #16
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b084      	sub	sp, #16
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012516:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f7f7 fe6d 	bl	800a1f8 <HAL_DMA_GetError>
 801251e:	4603      	mov	r3, r0
 8012520:	2b02      	cmp	r3, #2
 8012522:	d011      	beq.n	8012548 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012524:	68f8      	ldr	r0, [r7, #12]
 8012526:	f000 f82d 	bl	8012584 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012530:	f043 0210 	orr.w	r2, r3, #16
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	2201      	movs	r2, #1
 801253e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8012542:	68f8      	ldr	r0, [r7, #12]
 8012544:	f7ff ff9c 	bl	8012480 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012548:	bf00      	nop
 801254a:	3710      	adds	r7, #16
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801255c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2200      	movs	r2, #0
 8012562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2200      	movs	r2, #0
 801256a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	2201      	movs	r2, #1
 8012572:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012576:	68f8      	ldr	r0, [r7, #12]
 8012578:	f7ff ff82 	bl	8012480 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801257c:	bf00      	nop
 801257e:	3710      	adds	r7, #16
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}

08012584 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012584:	b480      	push	{r7}
 8012586:	b085      	sub	sp, #20
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	695b      	ldr	r3, [r3, #20]
 8012592:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	699a      	ldr	r2, [r3, #24]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f042 0208 	orr.w	r2, r2, #8
 80125a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	699a      	ldr	r2, [r3, #24]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f042 0210 	orr.w	r2, r2, #16
 80125b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	681a      	ldr	r2, [r3, #0]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f022 0201 	bic.w	r2, r2, #1
 80125c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	6919      	ldr	r1, [r3, #16]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681a      	ldr	r2, [r3, #0]
 80125ce:	4b3c      	ldr	r3, [pc, #240]	; (80126c0 <SPI_CloseTransfer+0x13c>)
 80125d0:	400b      	ands	r3, r1
 80125d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	689a      	ldr	r2, [r3, #8]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80125e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	2b04      	cmp	r3, #4
 80125ee:	d014      	beq.n	801261a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f003 0320 	and.w	r3, r3, #32
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d00f      	beq.n	801261a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012600:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	699a      	ldr	r2, [r3, #24]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	f042 0220 	orr.w	r2, r2, #32
 8012618:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012620:	b2db      	uxtb	r3, r3
 8012622:	2b03      	cmp	r3, #3
 8012624:	d014      	beq.n	8012650 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801262c:	2b00      	cmp	r3, #0
 801262e:	d00f      	beq.n	8012650 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012636:	f043 0204 	orr.w	r2, r3, #4
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	699a      	ldr	r2, [r3, #24]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801264e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012656:	2b00      	cmp	r3, #0
 8012658:	d00f      	beq.n	801267a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012660:	f043 0201 	orr.w	r2, r3, #1
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	699a      	ldr	r2, [r3, #24]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012678:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00f      	beq.n	80126a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801268a:	f043 0208 	orr.w	r2, r3, #8
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	699a      	ldr	r2, [r3, #24]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80126a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2200      	movs	r2, #0
 80126b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80126b4:	bf00      	nop
 80126b6:	3714      	adds	r7, #20
 80126b8:	46bd      	mov	sp, r7
 80126ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126be:	4770      	bx	lr
 80126c0:	fffffc90 	.word	0xfffffc90

080126c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80126c4:	b480      	push	{r7}
 80126c6:	b085      	sub	sp, #20
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126d0:	095b      	lsrs	r3, r3, #5
 80126d2:	3301      	adds	r3, #1
 80126d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	3301      	adds	r3, #1
 80126dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	3307      	adds	r3, #7
 80126e2:	08db      	lsrs	r3, r3, #3
 80126e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	68fa      	ldr	r2, [r7, #12]
 80126ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3714      	adds	r7, #20
 80126f2:	46bd      	mov	sp, r7
 80126f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f8:	4770      	bx	lr

080126fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80126fa:	b580      	push	{r7, lr}
 80126fc:	b082      	sub	sp, #8
 80126fe:	af00      	add	r7, sp, #0
 8012700:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d101      	bne.n	801270c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012708:	2301      	movs	r3, #1
 801270a:	e049      	b.n	80127a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012712:	b2db      	uxtb	r3, r3
 8012714:	2b00      	cmp	r3, #0
 8012716:	d106      	bne.n	8012726 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2200      	movs	r2, #0
 801271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7f2 fb05 	bl	8004d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2202      	movs	r2, #2
 801272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681a      	ldr	r2, [r3, #0]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	3304      	adds	r3, #4
 8012736:	4619      	mov	r1, r3
 8012738:	4610      	mov	r0, r2
 801273a:	f000 fe7d 	bl	8013438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2201      	movs	r2, #1
 8012742:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2201      	movs	r2, #1
 801274a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2201      	movs	r2, #1
 8012752:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2201      	movs	r2, #1
 801275a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2201      	movs	r2, #1
 8012762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2201      	movs	r2, #1
 801276a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2201      	movs	r2, #1
 8012772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2201      	movs	r2, #1
 801277a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2201      	movs	r2, #1
 8012782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2201      	movs	r2, #1
 801278a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2201      	movs	r2, #1
 8012792:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2201      	movs	r2, #1
 801279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801279e:	2300      	movs	r3, #0
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80127a8:	b480      	push	{r7}
 80127aa:	b085      	sub	sp, #20
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	2b01      	cmp	r3, #1
 80127ba:	d001      	beq.n	80127c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80127bc:	2301      	movs	r3, #1
 80127be:	e054      	b.n	801286a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2202      	movs	r2, #2
 80127c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	68da      	ldr	r2, [r3, #12]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	f042 0201 	orr.w	r2, r2, #1
 80127d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	4a26      	ldr	r2, [pc, #152]	; (8012878 <HAL_TIM_Base_Start_IT+0xd0>)
 80127de:	4293      	cmp	r3, r2
 80127e0:	d022      	beq.n	8012828 <HAL_TIM_Base_Start_IT+0x80>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80127ea:	d01d      	beq.n	8012828 <HAL_TIM_Base_Start_IT+0x80>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4a22      	ldr	r2, [pc, #136]	; (801287c <HAL_TIM_Base_Start_IT+0xd4>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d018      	beq.n	8012828 <HAL_TIM_Base_Start_IT+0x80>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	4a21      	ldr	r2, [pc, #132]	; (8012880 <HAL_TIM_Base_Start_IT+0xd8>)
 80127fc:	4293      	cmp	r3, r2
 80127fe:	d013      	beq.n	8012828 <HAL_TIM_Base_Start_IT+0x80>
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	4a1f      	ldr	r2, [pc, #124]	; (8012884 <HAL_TIM_Base_Start_IT+0xdc>)
 8012806:	4293      	cmp	r3, r2
 8012808:	d00e      	beq.n	8012828 <HAL_TIM_Base_Start_IT+0x80>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	4a1e      	ldr	r2, [pc, #120]	; (8012888 <HAL_TIM_Base_Start_IT+0xe0>)
 8012810:	4293      	cmp	r3, r2
 8012812:	d009      	beq.n	8012828 <HAL_TIM_Base_Start_IT+0x80>
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	4a1c      	ldr	r2, [pc, #112]	; (801288c <HAL_TIM_Base_Start_IT+0xe4>)
 801281a:	4293      	cmp	r3, r2
 801281c:	d004      	beq.n	8012828 <HAL_TIM_Base_Start_IT+0x80>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	4a1b      	ldr	r2, [pc, #108]	; (8012890 <HAL_TIM_Base_Start_IT+0xe8>)
 8012824:	4293      	cmp	r3, r2
 8012826:	d115      	bne.n	8012854 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	689a      	ldr	r2, [r3, #8]
 801282e:	4b19      	ldr	r3, [pc, #100]	; (8012894 <HAL_TIM_Base_Start_IT+0xec>)
 8012830:	4013      	ands	r3, r2
 8012832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2b06      	cmp	r3, #6
 8012838:	d015      	beq.n	8012866 <HAL_TIM_Base_Start_IT+0xbe>
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012840:	d011      	beq.n	8012866 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	f042 0201 	orr.w	r2, r2, #1
 8012850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012852:	e008      	b.n	8012866 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	f042 0201 	orr.w	r2, r2, #1
 8012862:	601a      	str	r2, [r3, #0]
 8012864:	e000      	b.n	8012868 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012866:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012868:	2300      	movs	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	3714      	adds	r7, #20
 801286e:	46bd      	mov	sp, r7
 8012870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop
 8012878:	40010000 	.word	0x40010000
 801287c:	40000400 	.word	0x40000400
 8012880:	40000800 	.word	0x40000800
 8012884:	40000c00 	.word	0x40000c00
 8012888:	40010400 	.word	0x40010400
 801288c:	40001800 	.word	0x40001800
 8012890:	40014000 	.word	0x40014000
 8012894:	00010007 	.word	0x00010007

08012898 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80128a2:	2300      	movs	r3, #0
 80128a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d109      	bne.n	80128c0 <HAL_TIM_OC_Start_IT+0x28>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	bf14      	ite	ne
 80128b8:	2301      	movne	r3, #1
 80128ba:	2300      	moveq	r3, #0
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	e03c      	b.n	801293a <HAL_TIM_OC_Start_IT+0xa2>
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	2b04      	cmp	r3, #4
 80128c4:	d109      	bne.n	80128da <HAL_TIM_OC_Start_IT+0x42>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80128cc:	b2db      	uxtb	r3, r3
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	bf14      	ite	ne
 80128d2:	2301      	movne	r3, #1
 80128d4:	2300      	moveq	r3, #0
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	e02f      	b.n	801293a <HAL_TIM_OC_Start_IT+0xa2>
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	2b08      	cmp	r3, #8
 80128de:	d109      	bne.n	80128f4 <HAL_TIM_OC_Start_IT+0x5c>
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128e6:	b2db      	uxtb	r3, r3
 80128e8:	2b01      	cmp	r3, #1
 80128ea:	bf14      	ite	ne
 80128ec:	2301      	movne	r3, #1
 80128ee:	2300      	moveq	r3, #0
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	e022      	b.n	801293a <HAL_TIM_OC_Start_IT+0xa2>
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	2b0c      	cmp	r3, #12
 80128f8:	d109      	bne.n	801290e <HAL_TIM_OC_Start_IT+0x76>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012900:	b2db      	uxtb	r3, r3
 8012902:	2b01      	cmp	r3, #1
 8012904:	bf14      	ite	ne
 8012906:	2301      	movne	r3, #1
 8012908:	2300      	moveq	r3, #0
 801290a:	b2db      	uxtb	r3, r3
 801290c:	e015      	b.n	801293a <HAL_TIM_OC_Start_IT+0xa2>
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	2b10      	cmp	r3, #16
 8012912:	d109      	bne.n	8012928 <HAL_TIM_OC_Start_IT+0x90>
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801291a:	b2db      	uxtb	r3, r3
 801291c:	2b01      	cmp	r3, #1
 801291e:	bf14      	ite	ne
 8012920:	2301      	movne	r3, #1
 8012922:	2300      	moveq	r3, #0
 8012924:	b2db      	uxtb	r3, r3
 8012926:	e008      	b.n	801293a <HAL_TIM_OC_Start_IT+0xa2>
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801292e:	b2db      	uxtb	r3, r3
 8012930:	2b01      	cmp	r3, #1
 8012932:	bf14      	ite	ne
 8012934:	2301      	movne	r3, #1
 8012936:	2300      	moveq	r3, #0
 8012938:	b2db      	uxtb	r3, r3
 801293a:	2b00      	cmp	r3, #0
 801293c:	d001      	beq.n	8012942 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 801293e:	2301      	movs	r3, #1
 8012940:	e0ec      	b.n	8012b1c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d104      	bne.n	8012952 <HAL_TIM_OC_Start_IT+0xba>
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2202      	movs	r2, #2
 801294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012950:	e023      	b.n	801299a <HAL_TIM_OC_Start_IT+0x102>
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	2b04      	cmp	r3, #4
 8012956:	d104      	bne.n	8012962 <HAL_TIM_OC_Start_IT+0xca>
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2202      	movs	r2, #2
 801295c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012960:	e01b      	b.n	801299a <HAL_TIM_OC_Start_IT+0x102>
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	2b08      	cmp	r3, #8
 8012966:	d104      	bne.n	8012972 <HAL_TIM_OC_Start_IT+0xda>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2202      	movs	r2, #2
 801296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012970:	e013      	b.n	801299a <HAL_TIM_OC_Start_IT+0x102>
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	2b0c      	cmp	r3, #12
 8012976:	d104      	bne.n	8012982 <HAL_TIM_OC_Start_IT+0xea>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2202      	movs	r2, #2
 801297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012980:	e00b      	b.n	801299a <HAL_TIM_OC_Start_IT+0x102>
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	2b10      	cmp	r3, #16
 8012986:	d104      	bne.n	8012992 <HAL_TIM_OC_Start_IT+0xfa>
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2202      	movs	r2, #2
 801298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012990:	e003      	b.n	801299a <HAL_TIM_OC_Start_IT+0x102>
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2202      	movs	r2, #2
 8012996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	2b0c      	cmp	r3, #12
 801299e:	d841      	bhi.n	8012a24 <HAL_TIM_OC_Start_IT+0x18c>
 80129a0:	a201      	add	r2, pc, #4	; (adr r2, 80129a8 <HAL_TIM_OC_Start_IT+0x110>)
 80129a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129a6:	bf00      	nop
 80129a8:	080129dd 	.word	0x080129dd
 80129ac:	08012a25 	.word	0x08012a25
 80129b0:	08012a25 	.word	0x08012a25
 80129b4:	08012a25 	.word	0x08012a25
 80129b8:	080129ef 	.word	0x080129ef
 80129bc:	08012a25 	.word	0x08012a25
 80129c0:	08012a25 	.word	0x08012a25
 80129c4:	08012a25 	.word	0x08012a25
 80129c8:	08012a01 	.word	0x08012a01
 80129cc:	08012a25 	.word	0x08012a25
 80129d0:	08012a25 	.word	0x08012a25
 80129d4:	08012a25 	.word	0x08012a25
 80129d8:	08012a13 	.word	0x08012a13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	68da      	ldr	r2, [r3, #12]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f042 0202 	orr.w	r2, r2, #2
 80129ea:	60da      	str	r2, [r3, #12]
      break;
 80129ec:	e01d      	b.n	8012a2a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	68da      	ldr	r2, [r3, #12]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f042 0204 	orr.w	r2, r2, #4
 80129fc:	60da      	str	r2, [r3, #12]
      break;
 80129fe:	e014      	b.n	8012a2a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	68da      	ldr	r2, [r3, #12]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f042 0208 	orr.w	r2, r2, #8
 8012a0e:	60da      	str	r2, [r3, #12]
      break;
 8012a10:	e00b      	b.n	8012a2a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	68da      	ldr	r2, [r3, #12]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	f042 0210 	orr.w	r2, r2, #16
 8012a20:	60da      	str	r2, [r3, #12]
      break;
 8012a22:	e002      	b.n	8012a2a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012a24:	2301      	movs	r3, #1
 8012a26:	73fb      	strb	r3, [r7, #15]
      break;
 8012a28:	bf00      	nop
  }

  if (status == HAL_OK)
 8012a2a:	7bfb      	ldrb	r3, [r7, #15]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d174      	bne.n	8012b1a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	2201      	movs	r2, #1
 8012a36:	6839      	ldr	r1, [r7, #0]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f001 f917 	bl	8013c6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	4a38      	ldr	r2, [pc, #224]	; (8012b24 <HAL_TIM_OC_Start_IT+0x28c>)
 8012a44:	4293      	cmp	r3, r2
 8012a46:	d013      	beq.n	8012a70 <HAL_TIM_OC_Start_IT+0x1d8>
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	4a36      	ldr	r2, [pc, #216]	; (8012b28 <HAL_TIM_OC_Start_IT+0x290>)
 8012a4e:	4293      	cmp	r3, r2
 8012a50:	d00e      	beq.n	8012a70 <HAL_TIM_OC_Start_IT+0x1d8>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	4a35      	ldr	r2, [pc, #212]	; (8012b2c <HAL_TIM_OC_Start_IT+0x294>)
 8012a58:	4293      	cmp	r3, r2
 8012a5a:	d009      	beq.n	8012a70 <HAL_TIM_OC_Start_IT+0x1d8>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	4a33      	ldr	r2, [pc, #204]	; (8012b30 <HAL_TIM_OC_Start_IT+0x298>)
 8012a62:	4293      	cmp	r3, r2
 8012a64:	d004      	beq.n	8012a70 <HAL_TIM_OC_Start_IT+0x1d8>
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	4a32      	ldr	r2, [pc, #200]	; (8012b34 <HAL_TIM_OC_Start_IT+0x29c>)
 8012a6c:	4293      	cmp	r3, r2
 8012a6e:	d101      	bne.n	8012a74 <HAL_TIM_OC_Start_IT+0x1dc>
 8012a70:	2301      	movs	r3, #1
 8012a72:	e000      	b.n	8012a76 <HAL_TIM_OC_Start_IT+0x1de>
 8012a74:	2300      	movs	r3, #0
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d007      	beq.n	8012a8a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012a88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4a25      	ldr	r2, [pc, #148]	; (8012b24 <HAL_TIM_OC_Start_IT+0x28c>)
 8012a90:	4293      	cmp	r3, r2
 8012a92:	d022      	beq.n	8012ada <HAL_TIM_OC_Start_IT+0x242>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a9c:	d01d      	beq.n	8012ada <HAL_TIM_OC_Start_IT+0x242>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	4a25      	ldr	r2, [pc, #148]	; (8012b38 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012aa4:	4293      	cmp	r3, r2
 8012aa6:	d018      	beq.n	8012ada <HAL_TIM_OC_Start_IT+0x242>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4a23      	ldr	r2, [pc, #140]	; (8012b3c <HAL_TIM_OC_Start_IT+0x2a4>)
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d013      	beq.n	8012ada <HAL_TIM_OC_Start_IT+0x242>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	4a22      	ldr	r2, [pc, #136]	; (8012b40 <HAL_TIM_OC_Start_IT+0x2a8>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d00e      	beq.n	8012ada <HAL_TIM_OC_Start_IT+0x242>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4a19      	ldr	r2, [pc, #100]	; (8012b28 <HAL_TIM_OC_Start_IT+0x290>)
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	d009      	beq.n	8012ada <HAL_TIM_OC_Start_IT+0x242>
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	4a1e      	ldr	r2, [pc, #120]	; (8012b44 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d004      	beq.n	8012ada <HAL_TIM_OC_Start_IT+0x242>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	4a15      	ldr	r2, [pc, #84]	; (8012b2c <HAL_TIM_OC_Start_IT+0x294>)
 8012ad6:	4293      	cmp	r3, r2
 8012ad8:	d115      	bne.n	8012b06 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	689a      	ldr	r2, [r3, #8]
 8012ae0:	4b19      	ldr	r3, [pc, #100]	; (8012b48 <HAL_TIM_OC_Start_IT+0x2b0>)
 8012ae2:	4013      	ands	r3, r2
 8012ae4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	2b06      	cmp	r3, #6
 8012aea:	d015      	beq.n	8012b18 <HAL_TIM_OC_Start_IT+0x280>
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012af2:	d011      	beq.n	8012b18 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	681a      	ldr	r2, [r3, #0]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	f042 0201 	orr.w	r2, r2, #1
 8012b02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b04:	e008      	b.n	8012b18 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	681a      	ldr	r2, [r3, #0]
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	f042 0201 	orr.w	r2, r2, #1
 8012b14:	601a      	str	r2, [r3, #0]
 8012b16:	e000      	b.n	8012b1a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b18:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	3710      	adds	r7, #16
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}
 8012b24:	40010000 	.word	0x40010000
 8012b28:	40010400 	.word	0x40010400
 8012b2c:	40014000 	.word	0x40014000
 8012b30:	40014400 	.word	0x40014400
 8012b34:	40014800 	.word	0x40014800
 8012b38:	40000400 	.word	0x40000400
 8012b3c:	40000800 	.word	0x40000800
 8012b40:	40000c00 	.word	0x40000c00
 8012b44:	40001800 	.word	0x40001800
 8012b48:	00010007 	.word	0x00010007

08012b4c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b084      	sub	sp, #16
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
 8012b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012b56:	2300      	movs	r3, #0
 8012b58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	2b0c      	cmp	r3, #12
 8012b5e:	d841      	bhi.n	8012be4 <HAL_TIM_OC_Stop_IT+0x98>
 8012b60:	a201      	add	r2, pc, #4	; (adr r2, 8012b68 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b66:	bf00      	nop
 8012b68:	08012b9d 	.word	0x08012b9d
 8012b6c:	08012be5 	.word	0x08012be5
 8012b70:	08012be5 	.word	0x08012be5
 8012b74:	08012be5 	.word	0x08012be5
 8012b78:	08012baf 	.word	0x08012baf
 8012b7c:	08012be5 	.word	0x08012be5
 8012b80:	08012be5 	.word	0x08012be5
 8012b84:	08012be5 	.word	0x08012be5
 8012b88:	08012bc1 	.word	0x08012bc1
 8012b8c:	08012be5 	.word	0x08012be5
 8012b90:	08012be5 	.word	0x08012be5
 8012b94:	08012be5 	.word	0x08012be5
 8012b98:	08012bd3 	.word	0x08012bd3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	68da      	ldr	r2, [r3, #12]
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f022 0202 	bic.w	r2, r2, #2
 8012baa:	60da      	str	r2, [r3, #12]
      break;
 8012bac:	e01d      	b.n	8012bea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	68da      	ldr	r2, [r3, #12]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f022 0204 	bic.w	r2, r2, #4
 8012bbc:	60da      	str	r2, [r3, #12]
      break;
 8012bbe:	e014      	b.n	8012bea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	68da      	ldr	r2, [r3, #12]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	f022 0208 	bic.w	r2, r2, #8
 8012bce:	60da      	str	r2, [r3, #12]
      break;
 8012bd0:	e00b      	b.n	8012bea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	68da      	ldr	r2, [r3, #12]
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	f022 0210 	bic.w	r2, r2, #16
 8012be0:	60da      	str	r2, [r3, #12]
      break;
 8012be2:	e002      	b.n	8012bea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012be4:	2301      	movs	r3, #1
 8012be6:	73fb      	strb	r3, [r7, #15]
      break;
 8012be8:	bf00      	nop
  }

  if (status == HAL_OK)
 8012bea:	7bfb      	ldrb	r3, [r7, #15]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	f040 8081 	bne.w	8012cf4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	6839      	ldr	r1, [r7, #0]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f001 f836 	bl	8013c6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	4a3e      	ldr	r2, [pc, #248]	; (8012d00 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d013      	beq.n	8012c32 <HAL_TIM_OC_Stop_IT+0xe6>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	4a3d      	ldr	r2, [pc, #244]	; (8012d04 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d00e      	beq.n	8012c32 <HAL_TIM_OC_Stop_IT+0xe6>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	4a3b      	ldr	r2, [pc, #236]	; (8012d08 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	d009      	beq.n	8012c32 <HAL_TIM_OC_Stop_IT+0xe6>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	4a3a      	ldr	r2, [pc, #232]	; (8012d0c <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012c24:	4293      	cmp	r3, r2
 8012c26:	d004      	beq.n	8012c32 <HAL_TIM_OC_Stop_IT+0xe6>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	4a38      	ldr	r2, [pc, #224]	; (8012d10 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012c2e:	4293      	cmp	r3, r2
 8012c30:	d101      	bne.n	8012c36 <HAL_TIM_OC_Stop_IT+0xea>
 8012c32:	2301      	movs	r3, #1
 8012c34:	e000      	b.n	8012c38 <HAL_TIM_OC_Stop_IT+0xec>
 8012c36:	2300      	movs	r3, #0
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d017      	beq.n	8012c6c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	6a1a      	ldr	r2, [r3, #32]
 8012c42:	f241 1311 	movw	r3, #4369	; 0x1111
 8012c46:	4013      	ands	r3, r2
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d10f      	bne.n	8012c6c <HAL_TIM_OC_Stop_IT+0x120>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	6a1a      	ldr	r2, [r3, #32]
 8012c52:	f240 4344 	movw	r3, #1092	; 0x444
 8012c56:	4013      	ands	r3, r2
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d107      	bne.n	8012c6c <HAL_TIM_OC_Stop_IT+0x120>
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012c6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	6a1a      	ldr	r2, [r3, #32]
 8012c72:	f241 1311 	movw	r3, #4369	; 0x1111
 8012c76:	4013      	ands	r3, r2
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d10f      	bne.n	8012c9c <HAL_TIM_OC_Stop_IT+0x150>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	6a1a      	ldr	r2, [r3, #32]
 8012c82:	f240 4344 	movw	r3, #1092	; 0x444
 8012c86:	4013      	ands	r3, r2
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d107      	bne.n	8012c9c <HAL_TIM_OC_Stop_IT+0x150>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	681a      	ldr	r2, [r3, #0]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f022 0201 	bic.w	r2, r2, #1
 8012c9a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d104      	bne.n	8012cac <HAL_TIM_OC_Stop_IT+0x160>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012caa:	e023      	b.n	8012cf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	2b04      	cmp	r3, #4
 8012cb0:	d104      	bne.n	8012cbc <HAL_TIM_OC_Stop_IT+0x170>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012cba:	e01b      	b.n	8012cf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	2b08      	cmp	r3, #8
 8012cc0:	d104      	bne.n	8012ccc <HAL_TIM_OC_Stop_IT+0x180>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2201      	movs	r2, #1
 8012cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012cca:	e013      	b.n	8012cf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	2b0c      	cmp	r3, #12
 8012cd0:	d104      	bne.n	8012cdc <HAL_TIM_OC_Stop_IT+0x190>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012cda:	e00b      	b.n	8012cf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	2b10      	cmp	r3, #16
 8012ce0:	d104      	bne.n	8012cec <HAL_TIM_OC_Stop_IT+0x1a0>
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2201      	movs	r2, #1
 8012ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012cea:	e003      	b.n	8012cf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2201      	movs	r2, #1
 8012cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	40010000 	.word	0x40010000
 8012d04:	40010400 	.word	0x40010400
 8012d08:	40014000 	.word	0x40014000
 8012d0c:	40014400 	.word	0x40014400
 8012d10:	40014800 	.word	0x40014800

08012d14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d101      	bne.n	8012d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012d22:	2301      	movs	r3, #1
 8012d24:	e049      	b.n	8012dba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d106      	bne.n	8012d40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2200      	movs	r2, #0
 8012d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f000 f841 	bl	8012dc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2202      	movs	r2, #2
 8012d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	3304      	adds	r3, #4
 8012d50:	4619      	mov	r1, r3
 8012d52:	4610      	mov	r0, r2
 8012d54:	f000 fb70 	bl	8013438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2201      	movs	r2, #1
 8012d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2201      	movs	r2, #1
 8012d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2201      	movs	r2, #1
 8012d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2201      	movs	r2, #1
 8012d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2201      	movs	r2, #1
 8012d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2201      	movs	r2, #1
 8012da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2201      	movs	r2, #1
 8012dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2201      	movs	r2, #1
 8012db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012db8:	2300      	movs	r3, #0
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3708      	adds	r7, #8
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}

08012dc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012dc2:	b480      	push	{r7}
 8012dc4:	b083      	sub	sp, #12
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012dca:	bf00      	nop
 8012dcc:	370c      	adds	r7, #12
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd4:	4770      	bx	lr

08012dd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012dd6:	b580      	push	{r7, lr}
 8012dd8:	b084      	sub	sp, #16
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	691b      	ldr	r3, [r3, #16]
 8012dec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	f003 0302 	and.w	r3, r3, #2
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d020      	beq.n	8012e3a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	f003 0302 	and.w	r3, r3, #2
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d01b      	beq.n	8012e3a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f06f 0202 	mvn.w	r2, #2
 8012e0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2201      	movs	r2, #1
 8012e10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	699b      	ldr	r3, [r3, #24]
 8012e18:	f003 0303 	and.w	r3, r3, #3
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d003      	beq.n	8012e28 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f000 faeb 	bl	80133fc <HAL_TIM_IC_CaptureCallback>
 8012e26:	e005      	b.n	8012e34 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f7ef fec5 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f000 faee 	bl	8013410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2200      	movs	r2, #0
 8012e38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	f003 0304 	and.w	r3, r3, #4
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d020      	beq.n	8012e86 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	f003 0304 	and.w	r3, r3, #4
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d01b      	beq.n	8012e86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	f06f 0204 	mvn.w	r2, #4
 8012e56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2202      	movs	r2, #2
 8012e5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	699b      	ldr	r3, [r3, #24]
 8012e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d003      	beq.n	8012e74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f000 fac5 	bl	80133fc <HAL_TIM_IC_CaptureCallback>
 8012e72:	e005      	b.n	8012e80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f7ef fe9f 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f000 fac8 	bl	8013410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2200      	movs	r2, #0
 8012e84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	f003 0308 	and.w	r3, r3, #8
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d020      	beq.n	8012ed2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	f003 0308 	and.w	r3, r3, #8
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d01b      	beq.n	8012ed2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	f06f 0208 	mvn.w	r2, #8
 8012ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2204      	movs	r2, #4
 8012ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	69db      	ldr	r3, [r3, #28]
 8012eb0:	f003 0303 	and.w	r3, r3, #3
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d003      	beq.n	8012ec0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f000 fa9f 	bl	80133fc <HAL_TIM_IC_CaptureCallback>
 8012ebe:	e005      	b.n	8012ecc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f7ef fe79 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f000 faa2 	bl	8013410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	f003 0310 	and.w	r3, r3, #16
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d020      	beq.n	8012f1e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f003 0310 	and.w	r3, r3, #16
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d01b      	beq.n	8012f1e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f06f 0210 	mvn.w	r2, #16
 8012eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2208      	movs	r2, #8
 8012ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	69db      	ldr	r3, [r3, #28]
 8012efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d003      	beq.n	8012f0c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f000 fa79 	bl	80133fc <HAL_TIM_IC_CaptureCallback>
 8012f0a:	e005      	b.n	8012f18 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f7ef fe53 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f000 fa7c 	bl	8013410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	f003 0301 	and.w	r3, r3, #1
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d00c      	beq.n	8012f42 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f003 0301 	and.w	r3, r3, #1
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d007      	beq.n	8012f42 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	f06f 0201 	mvn.w	r2, #1
 8012f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f7f0 fce1 	bl	8003904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d104      	bne.n	8012f56 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d00c      	beq.n	8012f70 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d007      	beq.n	8012f70 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 ffba 	bl	8013ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d00c      	beq.n	8012f94 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d007      	beq.n	8012f94 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f000 ffb2 	bl	8013ef8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d00c      	beq.n	8012fb8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d007      	beq.n	8012fb8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 fa36 	bl	8013424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012fb8:	68bb      	ldr	r3, [r7, #8]
 8012fba:	f003 0320 	and.w	r3, r3, #32
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d00c      	beq.n	8012fdc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	f003 0320 	and.w	r3, r3, #32
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d007      	beq.n	8012fdc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	f06f 0220 	mvn.w	r2, #32
 8012fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f000 ff7a 	bl	8013ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012fdc:	bf00      	nop
 8012fde:	3710      	adds	r7, #16
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b086      	sub	sp, #24
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	60f8      	str	r0, [r7, #12]
 8012fec:	60b9      	str	r1, [r7, #8]
 8012fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d101      	bne.n	8013002 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012ffe:	2302      	movs	r3, #2
 8013000:	e0ff      	b.n	8013202 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	2201      	movs	r2, #1
 8013006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2b14      	cmp	r3, #20
 801300e:	f200 80f0 	bhi.w	80131f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8013012:	a201      	add	r2, pc, #4	; (adr r2, 8013018 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013018:	0801306d 	.word	0x0801306d
 801301c:	080131f3 	.word	0x080131f3
 8013020:	080131f3 	.word	0x080131f3
 8013024:	080131f3 	.word	0x080131f3
 8013028:	080130ad 	.word	0x080130ad
 801302c:	080131f3 	.word	0x080131f3
 8013030:	080131f3 	.word	0x080131f3
 8013034:	080131f3 	.word	0x080131f3
 8013038:	080130ef 	.word	0x080130ef
 801303c:	080131f3 	.word	0x080131f3
 8013040:	080131f3 	.word	0x080131f3
 8013044:	080131f3 	.word	0x080131f3
 8013048:	0801312f 	.word	0x0801312f
 801304c:	080131f3 	.word	0x080131f3
 8013050:	080131f3 	.word	0x080131f3
 8013054:	080131f3 	.word	0x080131f3
 8013058:	08013171 	.word	0x08013171
 801305c:	080131f3 	.word	0x080131f3
 8013060:	080131f3 	.word	0x080131f3
 8013064:	080131f3 	.word	0x080131f3
 8013068:	080131b1 	.word	0x080131b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	68b9      	ldr	r1, [r7, #8]
 8013072:	4618      	mov	r0, r3
 8013074:	f000 fa86 	bl	8013584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	699a      	ldr	r2, [r3, #24]
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	f042 0208 	orr.w	r2, r2, #8
 8013086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	699a      	ldr	r2, [r3, #24]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f022 0204 	bic.w	r2, r2, #4
 8013096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	6999      	ldr	r1, [r3, #24]
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	691a      	ldr	r2, [r3, #16]
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	430a      	orrs	r2, r1
 80130a8:	619a      	str	r2, [r3, #24]
      break;
 80130aa:	e0a5      	b.n	80131f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	68b9      	ldr	r1, [r7, #8]
 80130b2:	4618      	mov	r0, r3
 80130b4:	f000 faf6 	bl	80136a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	699a      	ldr	r2, [r3, #24]
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80130c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	699a      	ldr	r2, [r3, #24]
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80130d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	6999      	ldr	r1, [r3, #24]
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	691b      	ldr	r3, [r3, #16]
 80130e2:	021a      	lsls	r2, r3, #8
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	430a      	orrs	r2, r1
 80130ea:	619a      	str	r2, [r3, #24]
      break;
 80130ec:	e084      	b.n	80131f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	68b9      	ldr	r1, [r7, #8]
 80130f4:	4618      	mov	r0, r3
 80130f6:	f000 fb5f 	bl	80137b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	69da      	ldr	r2, [r3, #28]
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f042 0208 	orr.w	r2, r2, #8
 8013108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	69da      	ldr	r2, [r3, #28]
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	f022 0204 	bic.w	r2, r2, #4
 8013118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	69d9      	ldr	r1, [r3, #28]
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	691a      	ldr	r2, [r3, #16]
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	430a      	orrs	r2, r1
 801312a:	61da      	str	r2, [r3, #28]
      break;
 801312c:	e064      	b.n	80131f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	68b9      	ldr	r1, [r7, #8]
 8013134:	4618      	mov	r0, r3
 8013136:	f000 fbc7 	bl	80138c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	69da      	ldr	r2, [r3, #28]
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	69da      	ldr	r2, [r3, #28]
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	69d9      	ldr	r1, [r3, #28]
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	691b      	ldr	r3, [r3, #16]
 8013164:	021a      	lsls	r2, r3, #8
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	430a      	orrs	r2, r1
 801316c:	61da      	str	r2, [r3, #28]
      break;
 801316e:	e043      	b.n	80131f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	68b9      	ldr	r1, [r7, #8]
 8013176:	4618      	mov	r0, r3
 8013178:	f000 fc10 	bl	801399c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	f042 0208 	orr.w	r2, r2, #8
 801318a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f022 0204 	bic.w	r2, r2, #4
 801319a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80131a2:	68bb      	ldr	r3, [r7, #8]
 80131a4:	691a      	ldr	r2, [r3, #16]
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	430a      	orrs	r2, r1
 80131ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80131ae:	e023      	b.n	80131f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	68b9      	ldr	r1, [r7, #8]
 80131b6:	4618      	mov	r0, r3
 80131b8:	f000 fc54 	bl	8013a64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80131ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80131da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	691b      	ldr	r3, [r3, #16]
 80131e6:	021a      	lsls	r2, r3, #8
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	430a      	orrs	r2, r1
 80131ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80131f0:	e002      	b.n	80131f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80131f2:	2301      	movs	r3, #1
 80131f4:	75fb      	strb	r3, [r7, #23]
      break;
 80131f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	2200      	movs	r2, #0
 80131fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013200:	7dfb      	ldrb	r3, [r7, #23]
}
 8013202:	4618      	mov	r0, r3
 8013204:	3718      	adds	r7, #24
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
 801320a:	bf00      	nop

0801320c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b084      	sub	sp, #16
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013216:	2300      	movs	r3, #0
 8013218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013220:	2b01      	cmp	r3, #1
 8013222:	d101      	bne.n	8013228 <HAL_TIM_ConfigClockSource+0x1c>
 8013224:	2302      	movs	r3, #2
 8013226:	e0dc      	b.n	80133e2 <HAL_TIM_ConfigClockSource+0x1d6>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2201      	movs	r2, #1
 801322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2202      	movs	r2, #2
 8013234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013240:	68ba      	ldr	r2, [r7, #8]
 8013242:	4b6a      	ldr	r3, [pc, #424]	; (80133ec <HAL_TIM_ConfigClockSource+0x1e0>)
 8013244:	4013      	ands	r3, r2
 8013246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801324e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	68ba      	ldr	r2, [r7, #8]
 8013256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	4a64      	ldr	r2, [pc, #400]	; (80133f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 801325e:	4293      	cmp	r3, r2
 8013260:	f000 80a9 	beq.w	80133b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8013264:	4a62      	ldr	r2, [pc, #392]	; (80133f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013266:	4293      	cmp	r3, r2
 8013268:	f200 80ae 	bhi.w	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801326c:	4a61      	ldr	r2, [pc, #388]	; (80133f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 801326e:	4293      	cmp	r3, r2
 8013270:	f000 80a1 	beq.w	80133b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8013274:	4a5f      	ldr	r2, [pc, #380]	; (80133f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013276:	4293      	cmp	r3, r2
 8013278:	f200 80a6 	bhi.w	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801327c:	4a5e      	ldr	r2, [pc, #376]	; (80133f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 801327e:	4293      	cmp	r3, r2
 8013280:	f000 8099 	beq.w	80133b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8013284:	4a5c      	ldr	r2, [pc, #368]	; (80133f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013286:	4293      	cmp	r3, r2
 8013288:	f200 809e 	bhi.w	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801328c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013290:	f000 8091 	beq.w	80133b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8013294:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013298:	f200 8096 	bhi.w	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801329c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80132a0:	f000 8089 	beq.w	80133b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80132a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80132a8:	f200 808e 	bhi.w	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80132ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80132b0:	d03e      	beq.n	8013330 <HAL_TIM_ConfigClockSource+0x124>
 80132b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80132b6:	f200 8087 	bhi.w	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80132ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80132be:	f000 8086 	beq.w	80133ce <HAL_TIM_ConfigClockSource+0x1c2>
 80132c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80132c6:	d87f      	bhi.n	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80132c8:	2b70      	cmp	r3, #112	; 0x70
 80132ca:	d01a      	beq.n	8013302 <HAL_TIM_ConfigClockSource+0xf6>
 80132cc:	2b70      	cmp	r3, #112	; 0x70
 80132ce:	d87b      	bhi.n	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80132d0:	2b60      	cmp	r3, #96	; 0x60
 80132d2:	d050      	beq.n	8013376 <HAL_TIM_ConfigClockSource+0x16a>
 80132d4:	2b60      	cmp	r3, #96	; 0x60
 80132d6:	d877      	bhi.n	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80132d8:	2b50      	cmp	r3, #80	; 0x50
 80132da:	d03c      	beq.n	8013356 <HAL_TIM_ConfigClockSource+0x14a>
 80132dc:	2b50      	cmp	r3, #80	; 0x50
 80132de:	d873      	bhi.n	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80132e0:	2b40      	cmp	r3, #64	; 0x40
 80132e2:	d058      	beq.n	8013396 <HAL_TIM_ConfigClockSource+0x18a>
 80132e4:	2b40      	cmp	r3, #64	; 0x40
 80132e6:	d86f      	bhi.n	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80132e8:	2b30      	cmp	r3, #48	; 0x30
 80132ea:	d064      	beq.n	80133b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80132ec:	2b30      	cmp	r3, #48	; 0x30
 80132ee:	d86b      	bhi.n	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80132f0:	2b20      	cmp	r3, #32
 80132f2:	d060      	beq.n	80133b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80132f4:	2b20      	cmp	r3, #32
 80132f6:	d867      	bhi.n	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d05c      	beq.n	80133b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80132fc:	2b10      	cmp	r3, #16
 80132fe:	d05a      	beq.n	80133b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8013300:	e062      	b.n	80133c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6818      	ldr	r0, [r3, #0]
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	6899      	ldr	r1, [r3, #8]
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	685a      	ldr	r2, [r3, #4]
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	68db      	ldr	r3, [r3, #12]
 8013312:	f000 fc8b 	bl	8013c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	689b      	ldr	r3, [r3, #8]
 801331c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	68ba      	ldr	r2, [r7, #8]
 801332c:	609a      	str	r2, [r3, #8]
      break;
 801332e:	e04f      	b.n	80133d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6818      	ldr	r0, [r3, #0]
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	6899      	ldr	r1, [r3, #8]
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	685a      	ldr	r2, [r3, #4]
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	68db      	ldr	r3, [r3, #12]
 8013340:	f000 fc74 	bl	8013c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	689a      	ldr	r2, [r3, #8]
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013352:	609a      	str	r2, [r3, #8]
      break;
 8013354:	e03c      	b.n	80133d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6818      	ldr	r0, [r3, #0]
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	6859      	ldr	r1, [r3, #4]
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	68db      	ldr	r3, [r3, #12]
 8013362:	461a      	mov	r2, r3
 8013364:	f000 fbe4 	bl	8013b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	2150      	movs	r1, #80	; 0x50
 801336e:	4618      	mov	r0, r3
 8013370:	f000 fc3e 	bl	8013bf0 <TIM_ITRx_SetConfig>
      break;
 8013374:	e02c      	b.n	80133d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6818      	ldr	r0, [r3, #0]
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	6859      	ldr	r1, [r3, #4]
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	461a      	mov	r2, r3
 8013384:	f000 fc03 	bl	8013b8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	2160      	movs	r1, #96	; 0x60
 801338e:	4618      	mov	r0, r3
 8013390:	f000 fc2e 	bl	8013bf0 <TIM_ITRx_SetConfig>
      break;
 8013394:	e01c      	b.n	80133d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6818      	ldr	r0, [r3, #0]
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	6859      	ldr	r1, [r3, #4]
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	68db      	ldr	r3, [r3, #12]
 80133a2:	461a      	mov	r2, r3
 80133a4:	f000 fbc4 	bl	8013b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	2140      	movs	r1, #64	; 0x40
 80133ae:	4618      	mov	r0, r3
 80133b0:	f000 fc1e 	bl	8013bf0 <TIM_ITRx_SetConfig>
      break;
 80133b4:	e00c      	b.n	80133d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681a      	ldr	r2, [r3, #0]
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	4619      	mov	r1, r3
 80133c0:	4610      	mov	r0, r2
 80133c2:	f000 fc15 	bl	8013bf0 <TIM_ITRx_SetConfig>
      break;
 80133c6:	e003      	b.n	80133d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80133c8:	2301      	movs	r3, #1
 80133ca:	73fb      	strb	r3, [r7, #15]
      break;
 80133cc:	e000      	b.n	80133d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80133ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2201      	movs	r2, #1
 80133d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2200      	movs	r2, #0
 80133dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80133e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	3710      	adds	r7, #16
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}
 80133ea:	bf00      	nop
 80133ec:	ffceff88 	.word	0xffceff88
 80133f0:	00100040 	.word	0x00100040
 80133f4:	00100030 	.word	0x00100030
 80133f8:	00100020 	.word	0x00100020

080133fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80133fc:	b480      	push	{r7}
 80133fe:	b083      	sub	sp, #12
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013404:	bf00      	nop
 8013406:	370c      	adds	r7, #12
 8013408:	46bd      	mov	sp, r7
 801340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340e:	4770      	bx	lr

08013410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013410:	b480      	push	{r7}
 8013412:	b083      	sub	sp, #12
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013418:	bf00      	nop
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801342c:	bf00      	nop
 801342e:	370c      	adds	r7, #12
 8013430:	46bd      	mov	sp, r7
 8013432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013436:	4770      	bx	lr

08013438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013438:	b480      	push	{r7}
 801343a:	b085      	sub	sp, #20
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
 8013440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	4a46      	ldr	r2, [pc, #280]	; (8013564 <TIM_Base_SetConfig+0x12c>)
 801344c:	4293      	cmp	r3, r2
 801344e:	d013      	beq.n	8013478 <TIM_Base_SetConfig+0x40>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013456:	d00f      	beq.n	8013478 <TIM_Base_SetConfig+0x40>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	4a43      	ldr	r2, [pc, #268]	; (8013568 <TIM_Base_SetConfig+0x130>)
 801345c:	4293      	cmp	r3, r2
 801345e:	d00b      	beq.n	8013478 <TIM_Base_SetConfig+0x40>
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	4a42      	ldr	r2, [pc, #264]	; (801356c <TIM_Base_SetConfig+0x134>)
 8013464:	4293      	cmp	r3, r2
 8013466:	d007      	beq.n	8013478 <TIM_Base_SetConfig+0x40>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	4a41      	ldr	r2, [pc, #260]	; (8013570 <TIM_Base_SetConfig+0x138>)
 801346c:	4293      	cmp	r3, r2
 801346e:	d003      	beq.n	8013478 <TIM_Base_SetConfig+0x40>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	4a40      	ldr	r2, [pc, #256]	; (8013574 <TIM_Base_SetConfig+0x13c>)
 8013474:	4293      	cmp	r3, r2
 8013476:	d108      	bne.n	801348a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801347e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	68fa      	ldr	r2, [r7, #12]
 8013486:	4313      	orrs	r3, r2
 8013488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4a35      	ldr	r2, [pc, #212]	; (8013564 <TIM_Base_SetConfig+0x12c>)
 801348e:	4293      	cmp	r3, r2
 8013490:	d01f      	beq.n	80134d2 <TIM_Base_SetConfig+0x9a>
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013498:	d01b      	beq.n	80134d2 <TIM_Base_SetConfig+0x9a>
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	4a32      	ldr	r2, [pc, #200]	; (8013568 <TIM_Base_SetConfig+0x130>)
 801349e:	4293      	cmp	r3, r2
 80134a0:	d017      	beq.n	80134d2 <TIM_Base_SetConfig+0x9a>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	4a31      	ldr	r2, [pc, #196]	; (801356c <TIM_Base_SetConfig+0x134>)
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d013      	beq.n	80134d2 <TIM_Base_SetConfig+0x9a>
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	4a30      	ldr	r2, [pc, #192]	; (8013570 <TIM_Base_SetConfig+0x138>)
 80134ae:	4293      	cmp	r3, r2
 80134b0:	d00f      	beq.n	80134d2 <TIM_Base_SetConfig+0x9a>
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	4a2f      	ldr	r2, [pc, #188]	; (8013574 <TIM_Base_SetConfig+0x13c>)
 80134b6:	4293      	cmp	r3, r2
 80134b8:	d00b      	beq.n	80134d2 <TIM_Base_SetConfig+0x9a>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	4a2e      	ldr	r2, [pc, #184]	; (8013578 <TIM_Base_SetConfig+0x140>)
 80134be:	4293      	cmp	r3, r2
 80134c0:	d007      	beq.n	80134d2 <TIM_Base_SetConfig+0x9a>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	4a2d      	ldr	r2, [pc, #180]	; (801357c <TIM_Base_SetConfig+0x144>)
 80134c6:	4293      	cmp	r3, r2
 80134c8:	d003      	beq.n	80134d2 <TIM_Base_SetConfig+0x9a>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	4a2c      	ldr	r2, [pc, #176]	; (8013580 <TIM_Base_SetConfig+0x148>)
 80134ce:	4293      	cmp	r3, r2
 80134d0:	d108      	bne.n	80134e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80134d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	68db      	ldr	r3, [r3, #12]
 80134de:	68fa      	ldr	r2, [r7, #12]
 80134e0:	4313      	orrs	r3, r2
 80134e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	695b      	ldr	r3, [r3, #20]
 80134ee:	4313      	orrs	r3, r2
 80134f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	68fa      	ldr	r2, [r7, #12]
 80134f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	689a      	ldr	r2, [r3, #8]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	4a16      	ldr	r2, [pc, #88]	; (8013564 <TIM_Base_SetConfig+0x12c>)
 801350c:	4293      	cmp	r3, r2
 801350e:	d00f      	beq.n	8013530 <TIM_Base_SetConfig+0xf8>
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	4a18      	ldr	r2, [pc, #96]	; (8013574 <TIM_Base_SetConfig+0x13c>)
 8013514:	4293      	cmp	r3, r2
 8013516:	d00b      	beq.n	8013530 <TIM_Base_SetConfig+0xf8>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	4a17      	ldr	r2, [pc, #92]	; (8013578 <TIM_Base_SetConfig+0x140>)
 801351c:	4293      	cmp	r3, r2
 801351e:	d007      	beq.n	8013530 <TIM_Base_SetConfig+0xf8>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	4a16      	ldr	r2, [pc, #88]	; (801357c <TIM_Base_SetConfig+0x144>)
 8013524:	4293      	cmp	r3, r2
 8013526:	d003      	beq.n	8013530 <TIM_Base_SetConfig+0xf8>
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	4a15      	ldr	r2, [pc, #84]	; (8013580 <TIM_Base_SetConfig+0x148>)
 801352c:	4293      	cmp	r3, r2
 801352e:	d103      	bne.n	8013538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	691a      	ldr	r2, [r3, #16]
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2201      	movs	r2, #1
 801353c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	691b      	ldr	r3, [r3, #16]
 8013542:	f003 0301 	and.w	r3, r3, #1
 8013546:	2b01      	cmp	r3, #1
 8013548:	d105      	bne.n	8013556 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	691b      	ldr	r3, [r3, #16]
 801354e:	f023 0201 	bic.w	r2, r3, #1
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	611a      	str	r2, [r3, #16]
  }
}
 8013556:	bf00      	nop
 8013558:	3714      	adds	r7, #20
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr
 8013562:	bf00      	nop
 8013564:	40010000 	.word	0x40010000
 8013568:	40000400 	.word	0x40000400
 801356c:	40000800 	.word	0x40000800
 8013570:	40000c00 	.word	0x40000c00
 8013574:	40010400 	.word	0x40010400
 8013578:	40014000 	.word	0x40014000
 801357c:	40014400 	.word	0x40014400
 8013580:	40014800 	.word	0x40014800

08013584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013584:	b480      	push	{r7}
 8013586:	b087      	sub	sp, #28
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6a1b      	ldr	r3, [r3, #32]
 8013592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6a1b      	ldr	r3, [r3, #32]
 8013598:	f023 0201 	bic.w	r2, r3, #1
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	699b      	ldr	r3, [r3, #24]
 80135aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80135ac:	68fa      	ldr	r2, [r7, #12]
 80135ae:	4b37      	ldr	r3, [pc, #220]	; (801368c <TIM_OC1_SetConfig+0x108>)
 80135b0:	4013      	ands	r3, r2
 80135b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f023 0303 	bic.w	r3, r3, #3
 80135ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	68fa      	ldr	r2, [r7, #12]
 80135c2:	4313      	orrs	r3, r2
 80135c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	f023 0302 	bic.w	r3, r3, #2
 80135cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	689b      	ldr	r3, [r3, #8]
 80135d2:	697a      	ldr	r2, [r7, #20]
 80135d4:	4313      	orrs	r3, r2
 80135d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	4a2d      	ldr	r2, [pc, #180]	; (8013690 <TIM_OC1_SetConfig+0x10c>)
 80135dc:	4293      	cmp	r3, r2
 80135de:	d00f      	beq.n	8013600 <TIM_OC1_SetConfig+0x7c>
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	4a2c      	ldr	r2, [pc, #176]	; (8013694 <TIM_OC1_SetConfig+0x110>)
 80135e4:	4293      	cmp	r3, r2
 80135e6:	d00b      	beq.n	8013600 <TIM_OC1_SetConfig+0x7c>
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	4a2b      	ldr	r2, [pc, #172]	; (8013698 <TIM_OC1_SetConfig+0x114>)
 80135ec:	4293      	cmp	r3, r2
 80135ee:	d007      	beq.n	8013600 <TIM_OC1_SetConfig+0x7c>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	4a2a      	ldr	r2, [pc, #168]	; (801369c <TIM_OC1_SetConfig+0x118>)
 80135f4:	4293      	cmp	r3, r2
 80135f6:	d003      	beq.n	8013600 <TIM_OC1_SetConfig+0x7c>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	4a29      	ldr	r2, [pc, #164]	; (80136a0 <TIM_OC1_SetConfig+0x11c>)
 80135fc:	4293      	cmp	r3, r2
 80135fe:	d10c      	bne.n	801361a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	f023 0308 	bic.w	r3, r3, #8
 8013606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	68db      	ldr	r3, [r3, #12]
 801360c:	697a      	ldr	r2, [r7, #20]
 801360e:	4313      	orrs	r3, r2
 8013610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	f023 0304 	bic.w	r3, r3, #4
 8013618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4a1c      	ldr	r2, [pc, #112]	; (8013690 <TIM_OC1_SetConfig+0x10c>)
 801361e:	4293      	cmp	r3, r2
 8013620:	d00f      	beq.n	8013642 <TIM_OC1_SetConfig+0xbe>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4a1b      	ldr	r2, [pc, #108]	; (8013694 <TIM_OC1_SetConfig+0x110>)
 8013626:	4293      	cmp	r3, r2
 8013628:	d00b      	beq.n	8013642 <TIM_OC1_SetConfig+0xbe>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	4a1a      	ldr	r2, [pc, #104]	; (8013698 <TIM_OC1_SetConfig+0x114>)
 801362e:	4293      	cmp	r3, r2
 8013630:	d007      	beq.n	8013642 <TIM_OC1_SetConfig+0xbe>
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	4a19      	ldr	r2, [pc, #100]	; (801369c <TIM_OC1_SetConfig+0x118>)
 8013636:	4293      	cmp	r3, r2
 8013638:	d003      	beq.n	8013642 <TIM_OC1_SetConfig+0xbe>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4a18      	ldr	r2, [pc, #96]	; (80136a0 <TIM_OC1_SetConfig+0x11c>)
 801363e:	4293      	cmp	r3, r2
 8013640:	d111      	bne.n	8013666 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	695b      	ldr	r3, [r3, #20]
 8013656:	693a      	ldr	r2, [r7, #16]
 8013658:	4313      	orrs	r3, r2
 801365a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	699b      	ldr	r3, [r3, #24]
 8013660:	693a      	ldr	r2, [r7, #16]
 8013662:	4313      	orrs	r3, r2
 8013664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	693a      	ldr	r2, [r7, #16]
 801366a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	68fa      	ldr	r2, [r7, #12]
 8013670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013672:	683b      	ldr	r3, [r7, #0]
 8013674:	685a      	ldr	r2, [r3, #4]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	697a      	ldr	r2, [r7, #20]
 801367e:	621a      	str	r2, [r3, #32]
}
 8013680:	bf00      	nop
 8013682:	371c      	adds	r7, #28
 8013684:	46bd      	mov	sp, r7
 8013686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368a:	4770      	bx	lr
 801368c:	fffeff8f 	.word	0xfffeff8f
 8013690:	40010000 	.word	0x40010000
 8013694:	40010400 	.word	0x40010400
 8013698:	40014000 	.word	0x40014000
 801369c:	40014400 	.word	0x40014400
 80136a0:	40014800 	.word	0x40014800

080136a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80136a4:	b480      	push	{r7}
 80136a6:	b087      	sub	sp, #28
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6a1b      	ldr	r3, [r3, #32]
 80136b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6a1b      	ldr	r3, [r3, #32]
 80136b8:	f023 0210 	bic.w	r2, r3, #16
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	699b      	ldr	r3, [r3, #24]
 80136ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80136cc:	68fa      	ldr	r2, [r7, #12]
 80136ce:	4b34      	ldr	r3, [pc, #208]	; (80137a0 <TIM_OC2_SetConfig+0xfc>)
 80136d0:	4013      	ands	r3, r2
 80136d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80136da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	021b      	lsls	r3, r3, #8
 80136e2:	68fa      	ldr	r2, [r7, #12]
 80136e4:	4313      	orrs	r3, r2
 80136e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	f023 0320 	bic.w	r3, r3, #32
 80136ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	689b      	ldr	r3, [r3, #8]
 80136f4:	011b      	lsls	r3, r3, #4
 80136f6:	697a      	ldr	r2, [r7, #20]
 80136f8:	4313      	orrs	r3, r2
 80136fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	4a29      	ldr	r2, [pc, #164]	; (80137a4 <TIM_OC2_SetConfig+0x100>)
 8013700:	4293      	cmp	r3, r2
 8013702:	d003      	beq.n	801370c <TIM_OC2_SetConfig+0x68>
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	4a28      	ldr	r2, [pc, #160]	; (80137a8 <TIM_OC2_SetConfig+0x104>)
 8013708:	4293      	cmp	r3, r2
 801370a:	d10d      	bne.n	8013728 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	68db      	ldr	r3, [r3, #12]
 8013718:	011b      	lsls	r3, r3, #4
 801371a:	697a      	ldr	r2, [r7, #20]
 801371c:	4313      	orrs	r3, r2
 801371e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013726:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	4a1e      	ldr	r2, [pc, #120]	; (80137a4 <TIM_OC2_SetConfig+0x100>)
 801372c:	4293      	cmp	r3, r2
 801372e:	d00f      	beq.n	8013750 <TIM_OC2_SetConfig+0xac>
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	4a1d      	ldr	r2, [pc, #116]	; (80137a8 <TIM_OC2_SetConfig+0x104>)
 8013734:	4293      	cmp	r3, r2
 8013736:	d00b      	beq.n	8013750 <TIM_OC2_SetConfig+0xac>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	4a1c      	ldr	r2, [pc, #112]	; (80137ac <TIM_OC2_SetConfig+0x108>)
 801373c:	4293      	cmp	r3, r2
 801373e:	d007      	beq.n	8013750 <TIM_OC2_SetConfig+0xac>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	4a1b      	ldr	r2, [pc, #108]	; (80137b0 <TIM_OC2_SetConfig+0x10c>)
 8013744:	4293      	cmp	r3, r2
 8013746:	d003      	beq.n	8013750 <TIM_OC2_SetConfig+0xac>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	4a1a      	ldr	r2, [pc, #104]	; (80137b4 <TIM_OC2_SetConfig+0x110>)
 801374c:	4293      	cmp	r3, r2
 801374e:	d113      	bne.n	8013778 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801375e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	695b      	ldr	r3, [r3, #20]
 8013764:	009b      	lsls	r3, r3, #2
 8013766:	693a      	ldr	r2, [r7, #16]
 8013768:	4313      	orrs	r3, r2
 801376a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	699b      	ldr	r3, [r3, #24]
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	693a      	ldr	r2, [r7, #16]
 8013774:	4313      	orrs	r3, r2
 8013776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	693a      	ldr	r2, [r7, #16]
 801377c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	68fa      	ldr	r2, [r7, #12]
 8013782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	685a      	ldr	r2, [r3, #4]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	697a      	ldr	r2, [r7, #20]
 8013790:	621a      	str	r2, [r3, #32]
}
 8013792:	bf00      	nop
 8013794:	371c      	adds	r7, #28
 8013796:	46bd      	mov	sp, r7
 8013798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop
 80137a0:	feff8fff 	.word	0xfeff8fff
 80137a4:	40010000 	.word	0x40010000
 80137a8:	40010400 	.word	0x40010400
 80137ac:	40014000 	.word	0x40014000
 80137b0:	40014400 	.word	0x40014400
 80137b4:	40014800 	.word	0x40014800

080137b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b087      	sub	sp, #28
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6a1b      	ldr	r3, [r3, #32]
 80137c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6a1b      	ldr	r3, [r3, #32]
 80137cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	69db      	ldr	r3, [r3, #28]
 80137de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80137e0:	68fa      	ldr	r2, [r7, #12]
 80137e2:	4b33      	ldr	r3, [pc, #204]	; (80138b0 <TIM_OC3_SetConfig+0xf8>)
 80137e4:	4013      	ands	r3, r2
 80137e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f023 0303 	bic.w	r3, r3, #3
 80137ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	68fa      	ldr	r2, [r7, #12]
 80137f6:	4313      	orrs	r3, r2
 80137f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80137fa:	697b      	ldr	r3, [r7, #20]
 80137fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	689b      	ldr	r3, [r3, #8]
 8013806:	021b      	lsls	r3, r3, #8
 8013808:	697a      	ldr	r2, [r7, #20]
 801380a:	4313      	orrs	r3, r2
 801380c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	4a28      	ldr	r2, [pc, #160]	; (80138b4 <TIM_OC3_SetConfig+0xfc>)
 8013812:	4293      	cmp	r3, r2
 8013814:	d003      	beq.n	801381e <TIM_OC3_SetConfig+0x66>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	4a27      	ldr	r2, [pc, #156]	; (80138b8 <TIM_OC3_SetConfig+0x100>)
 801381a:	4293      	cmp	r3, r2
 801381c:	d10d      	bne.n	801383a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	68db      	ldr	r3, [r3, #12]
 801382a:	021b      	lsls	r3, r3, #8
 801382c:	697a      	ldr	r2, [r7, #20]
 801382e:	4313      	orrs	r3, r2
 8013830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4a1d      	ldr	r2, [pc, #116]	; (80138b4 <TIM_OC3_SetConfig+0xfc>)
 801383e:	4293      	cmp	r3, r2
 8013840:	d00f      	beq.n	8013862 <TIM_OC3_SetConfig+0xaa>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	4a1c      	ldr	r2, [pc, #112]	; (80138b8 <TIM_OC3_SetConfig+0x100>)
 8013846:	4293      	cmp	r3, r2
 8013848:	d00b      	beq.n	8013862 <TIM_OC3_SetConfig+0xaa>
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	4a1b      	ldr	r2, [pc, #108]	; (80138bc <TIM_OC3_SetConfig+0x104>)
 801384e:	4293      	cmp	r3, r2
 8013850:	d007      	beq.n	8013862 <TIM_OC3_SetConfig+0xaa>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4a1a      	ldr	r2, [pc, #104]	; (80138c0 <TIM_OC3_SetConfig+0x108>)
 8013856:	4293      	cmp	r3, r2
 8013858:	d003      	beq.n	8013862 <TIM_OC3_SetConfig+0xaa>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4a19      	ldr	r2, [pc, #100]	; (80138c4 <TIM_OC3_SetConfig+0x10c>)
 801385e:	4293      	cmp	r3, r2
 8013860:	d113      	bne.n	801388a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	695b      	ldr	r3, [r3, #20]
 8013876:	011b      	lsls	r3, r3, #4
 8013878:	693a      	ldr	r2, [r7, #16]
 801387a:	4313      	orrs	r3, r2
 801387c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	699b      	ldr	r3, [r3, #24]
 8013882:	011b      	lsls	r3, r3, #4
 8013884:	693a      	ldr	r2, [r7, #16]
 8013886:	4313      	orrs	r3, r2
 8013888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	693a      	ldr	r2, [r7, #16]
 801388e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	68fa      	ldr	r2, [r7, #12]
 8013894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	685a      	ldr	r2, [r3, #4]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	697a      	ldr	r2, [r7, #20]
 80138a2:	621a      	str	r2, [r3, #32]
}
 80138a4:	bf00      	nop
 80138a6:	371c      	adds	r7, #28
 80138a8:	46bd      	mov	sp, r7
 80138aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ae:	4770      	bx	lr
 80138b0:	fffeff8f 	.word	0xfffeff8f
 80138b4:	40010000 	.word	0x40010000
 80138b8:	40010400 	.word	0x40010400
 80138bc:	40014000 	.word	0x40014000
 80138c0:	40014400 	.word	0x40014400
 80138c4:	40014800 	.word	0x40014800

080138c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80138c8:	b480      	push	{r7}
 80138ca:	b087      	sub	sp, #28
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6a1b      	ldr	r3, [r3, #32]
 80138d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	6a1b      	ldr	r3, [r3, #32]
 80138dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	69db      	ldr	r3, [r3, #28]
 80138ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80138f0:	68fa      	ldr	r2, [r7, #12]
 80138f2:	4b24      	ldr	r3, [pc, #144]	; (8013984 <TIM_OC4_SetConfig+0xbc>)
 80138f4:	4013      	ands	r3, r2
 80138f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80138fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	021b      	lsls	r3, r3, #8
 8013906:	68fa      	ldr	r2, [r7, #12]
 8013908:	4313      	orrs	r3, r2
 801390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801390c:	693b      	ldr	r3, [r7, #16]
 801390e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	689b      	ldr	r3, [r3, #8]
 8013918:	031b      	lsls	r3, r3, #12
 801391a:	693a      	ldr	r2, [r7, #16]
 801391c:	4313      	orrs	r3, r2
 801391e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	4a19      	ldr	r2, [pc, #100]	; (8013988 <TIM_OC4_SetConfig+0xc0>)
 8013924:	4293      	cmp	r3, r2
 8013926:	d00f      	beq.n	8013948 <TIM_OC4_SetConfig+0x80>
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	4a18      	ldr	r2, [pc, #96]	; (801398c <TIM_OC4_SetConfig+0xc4>)
 801392c:	4293      	cmp	r3, r2
 801392e:	d00b      	beq.n	8013948 <TIM_OC4_SetConfig+0x80>
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	4a17      	ldr	r2, [pc, #92]	; (8013990 <TIM_OC4_SetConfig+0xc8>)
 8013934:	4293      	cmp	r3, r2
 8013936:	d007      	beq.n	8013948 <TIM_OC4_SetConfig+0x80>
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	4a16      	ldr	r2, [pc, #88]	; (8013994 <TIM_OC4_SetConfig+0xcc>)
 801393c:	4293      	cmp	r3, r2
 801393e:	d003      	beq.n	8013948 <TIM_OC4_SetConfig+0x80>
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	4a15      	ldr	r2, [pc, #84]	; (8013998 <TIM_OC4_SetConfig+0xd0>)
 8013944:	4293      	cmp	r3, r2
 8013946:	d109      	bne.n	801395c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801394e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	695b      	ldr	r3, [r3, #20]
 8013954:	019b      	lsls	r3, r3, #6
 8013956:	697a      	ldr	r2, [r7, #20]
 8013958:	4313      	orrs	r3, r2
 801395a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	697a      	ldr	r2, [r7, #20]
 8013960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	68fa      	ldr	r2, [r7, #12]
 8013966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	685a      	ldr	r2, [r3, #4]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	693a      	ldr	r2, [r7, #16]
 8013974:	621a      	str	r2, [r3, #32]
}
 8013976:	bf00      	nop
 8013978:	371c      	adds	r7, #28
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr
 8013982:	bf00      	nop
 8013984:	feff8fff 	.word	0xfeff8fff
 8013988:	40010000 	.word	0x40010000
 801398c:	40010400 	.word	0x40010400
 8013990:	40014000 	.word	0x40014000
 8013994:	40014400 	.word	0x40014400
 8013998:	40014800 	.word	0x40014800

0801399c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801399c:	b480      	push	{r7}
 801399e:	b087      	sub	sp, #28
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6a1b      	ldr	r3, [r3, #32]
 80139aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6a1b      	ldr	r3, [r3, #32]
 80139b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	685b      	ldr	r3, [r3, #4]
 80139bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80139c4:	68fa      	ldr	r2, [r7, #12]
 80139c6:	4b21      	ldr	r3, [pc, #132]	; (8013a4c <TIM_OC5_SetConfig+0xb0>)
 80139c8:	4013      	ands	r3, r2
 80139ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	68fa      	ldr	r2, [r7, #12]
 80139d2:	4313      	orrs	r3, r2
 80139d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80139dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	689b      	ldr	r3, [r3, #8]
 80139e2:	041b      	lsls	r3, r3, #16
 80139e4:	693a      	ldr	r2, [r7, #16]
 80139e6:	4313      	orrs	r3, r2
 80139e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4a18      	ldr	r2, [pc, #96]	; (8013a50 <TIM_OC5_SetConfig+0xb4>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d00f      	beq.n	8013a12 <TIM_OC5_SetConfig+0x76>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4a17      	ldr	r2, [pc, #92]	; (8013a54 <TIM_OC5_SetConfig+0xb8>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d00b      	beq.n	8013a12 <TIM_OC5_SetConfig+0x76>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4a16      	ldr	r2, [pc, #88]	; (8013a58 <TIM_OC5_SetConfig+0xbc>)
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d007      	beq.n	8013a12 <TIM_OC5_SetConfig+0x76>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4a15      	ldr	r2, [pc, #84]	; (8013a5c <TIM_OC5_SetConfig+0xc0>)
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d003      	beq.n	8013a12 <TIM_OC5_SetConfig+0x76>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4a14      	ldr	r2, [pc, #80]	; (8013a60 <TIM_OC5_SetConfig+0xc4>)
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d109      	bne.n	8013a26 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	695b      	ldr	r3, [r3, #20]
 8013a1e:	021b      	lsls	r3, r3, #8
 8013a20:	697a      	ldr	r2, [r7, #20]
 8013a22:	4313      	orrs	r3, r2
 8013a24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	697a      	ldr	r2, [r7, #20]
 8013a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	68fa      	ldr	r2, [r7, #12]
 8013a30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	685a      	ldr	r2, [r3, #4]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	693a      	ldr	r2, [r7, #16]
 8013a3e:	621a      	str	r2, [r3, #32]
}
 8013a40:	bf00      	nop
 8013a42:	371c      	adds	r7, #28
 8013a44:	46bd      	mov	sp, r7
 8013a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4a:	4770      	bx	lr
 8013a4c:	fffeff8f 	.word	0xfffeff8f
 8013a50:	40010000 	.word	0x40010000
 8013a54:	40010400 	.word	0x40010400
 8013a58:	40014000 	.word	0x40014000
 8013a5c:	40014400 	.word	0x40014400
 8013a60:	40014800 	.word	0x40014800

08013a64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013a64:	b480      	push	{r7}
 8013a66:	b087      	sub	sp, #28
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	6a1b      	ldr	r3, [r3, #32]
 8013a72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6a1b      	ldr	r3, [r3, #32]
 8013a78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013a8c:	68fa      	ldr	r2, [r7, #12]
 8013a8e:	4b22      	ldr	r3, [pc, #136]	; (8013b18 <TIM_OC6_SetConfig+0xb4>)
 8013a90:	4013      	ands	r3, r2
 8013a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	021b      	lsls	r3, r3, #8
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	4313      	orrs	r3, r2
 8013a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	689b      	ldr	r3, [r3, #8]
 8013aac:	051b      	lsls	r3, r3, #20
 8013aae:	693a      	ldr	r2, [r7, #16]
 8013ab0:	4313      	orrs	r3, r2
 8013ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	4a19      	ldr	r2, [pc, #100]	; (8013b1c <TIM_OC6_SetConfig+0xb8>)
 8013ab8:	4293      	cmp	r3, r2
 8013aba:	d00f      	beq.n	8013adc <TIM_OC6_SetConfig+0x78>
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	4a18      	ldr	r2, [pc, #96]	; (8013b20 <TIM_OC6_SetConfig+0xbc>)
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	d00b      	beq.n	8013adc <TIM_OC6_SetConfig+0x78>
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	4a17      	ldr	r2, [pc, #92]	; (8013b24 <TIM_OC6_SetConfig+0xc0>)
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	d007      	beq.n	8013adc <TIM_OC6_SetConfig+0x78>
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	4a16      	ldr	r2, [pc, #88]	; (8013b28 <TIM_OC6_SetConfig+0xc4>)
 8013ad0:	4293      	cmp	r3, r2
 8013ad2:	d003      	beq.n	8013adc <TIM_OC6_SetConfig+0x78>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	4a15      	ldr	r2, [pc, #84]	; (8013b2c <TIM_OC6_SetConfig+0xc8>)
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d109      	bne.n	8013af0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	695b      	ldr	r3, [r3, #20]
 8013ae8:	029b      	lsls	r3, r3, #10
 8013aea:	697a      	ldr	r2, [r7, #20]
 8013aec:	4313      	orrs	r3, r2
 8013aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	697a      	ldr	r2, [r7, #20]
 8013af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	685a      	ldr	r2, [r3, #4]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	693a      	ldr	r2, [r7, #16]
 8013b08:	621a      	str	r2, [r3, #32]
}
 8013b0a:	bf00      	nop
 8013b0c:	371c      	adds	r7, #28
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b14:	4770      	bx	lr
 8013b16:	bf00      	nop
 8013b18:	feff8fff 	.word	0xfeff8fff
 8013b1c:	40010000 	.word	0x40010000
 8013b20:	40010400 	.word	0x40010400
 8013b24:	40014000 	.word	0x40014000
 8013b28:	40014400 	.word	0x40014400
 8013b2c:	40014800 	.word	0x40014800

08013b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013b30:	b480      	push	{r7}
 8013b32:	b087      	sub	sp, #28
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	60f8      	str	r0, [r7, #12]
 8013b38:	60b9      	str	r1, [r7, #8]
 8013b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	6a1b      	ldr	r3, [r3, #32]
 8013b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	6a1b      	ldr	r3, [r3, #32]
 8013b46:	f023 0201 	bic.w	r2, r3, #1
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	699b      	ldr	r3, [r3, #24]
 8013b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013b54:	693b      	ldr	r3, [r7, #16]
 8013b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	011b      	lsls	r3, r3, #4
 8013b60:	693a      	ldr	r2, [r7, #16]
 8013b62:	4313      	orrs	r3, r2
 8013b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	f023 030a 	bic.w	r3, r3, #10
 8013b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013b6e:	697a      	ldr	r2, [r7, #20]
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	4313      	orrs	r3, r2
 8013b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	693a      	ldr	r2, [r7, #16]
 8013b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	697a      	ldr	r2, [r7, #20]
 8013b80:	621a      	str	r2, [r3, #32]
}
 8013b82:	bf00      	nop
 8013b84:	371c      	adds	r7, #28
 8013b86:	46bd      	mov	sp, r7
 8013b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8c:	4770      	bx	lr

08013b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013b8e:	b480      	push	{r7}
 8013b90:	b087      	sub	sp, #28
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	60f8      	str	r0, [r7, #12]
 8013b96:	60b9      	str	r1, [r7, #8]
 8013b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	6a1b      	ldr	r3, [r3, #32]
 8013b9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	6a1b      	ldr	r3, [r3, #32]
 8013ba4:	f023 0210 	bic.w	r2, r3, #16
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	699b      	ldr	r3, [r3, #24]
 8013bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	031b      	lsls	r3, r3, #12
 8013bbe:	693a      	ldr	r2, [r7, #16]
 8013bc0:	4313      	orrs	r3, r2
 8013bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013bca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	011b      	lsls	r3, r3, #4
 8013bd0:	697a      	ldr	r2, [r7, #20]
 8013bd2:	4313      	orrs	r3, r2
 8013bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	693a      	ldr	r2, [r7, #16]
 8013bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	697a      	ldr	r2, [r7, #20]
 8013be0:	621a      	str	r2, [r3, #32]
}
 8013be2:	bf00      	nop
 8013be4:	371c      	adds	r7, #28
 8013be6:	46bd      	mov	sp, r7
 8013be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bec:	4770      	bx	lr
	...

08013bf0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b085      	sub	sp, #20
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
 8013bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	689b      	ldr	r3, [r3, #8]
 8013bfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013c00:	68fa      	ldr	r2, [r7, #12]
 8013c02:	4b09      	ldr	r3, [pc, #36]	; (8013c28 <TIM_ITRx_SetConfig+0x38>)
 8013c04:	4013      	ands	r3, r2
 8013c06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013c08:	683a      	ldr	r2, [r7, #0]
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	f043 0307 	orr.w	r3, r3, #7
 8013c12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	68fa      	ldr	r2, [r7, #12]
 8013c18:	609a      	str	r2, [r3, #8]
}
 8013c1a:	bf00      	nop
 8013c1c:	3714      	adds	r7, #20
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c24:	4770      	bx	lr
 8013c26:	bf00      	nop
 8013c28:	ffcfff8f 	.word	0xffcfff8f

08013c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b087      	sub	sp, #28
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	60f8      	str	r0, [r7, #12]
 8013c34:	60b9      	str	r1, [r7, #8]
 8013c36:	607a      	str	r2, [r7, #4]
 8013c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	689b      	ldr	r3, [r3, #8]
 8013c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	021a      	lsls	r2, r3, #8
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	431a      	orrs	r2, r3
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	4313      	orrs	r3, r2
 8013c54:	697a      	ldr	r2, [r7, #20]
 8013c56:	4313      	orrs	r3, r2
 8013c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	697a      	ldr	r2, [r7, #20]
 8013c5e:	609a      	str	r2, [r3, #8]
}
 8013c60:	bf00      	nop
 8013c62:	371c      	adds	r7, #28
 8013c64:	46bd      	mov	sp, r7
 8013c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6a:	4770      	bx	lr

08013c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013c6c:	b480      	push	{r7}
 8013c6e:	b087      	sub	sp, #28
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	60b9      	str	r1, [r7, #8]
 8013c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	f003 031f 	and.w	r3, r3, #31
 8013c7e:	2201      	movs	r2, #1
 8013c80:	fa02 f303 	lsl.w	r3, r2, r3
 8013c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	6a1a      	ldr	r2, [r3, #32]
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	43db      	mvns	r3, r3
 8013c8e:	401a      	ands	r2, r3
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	6a1a      	ldr	r2, [r3, #32]
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	f003 031f 	and.w	r3, r3, #31
 8013c9e:	6879      	ldr	r1, [r7, #4]
 8013ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8013ca4:	431a      	orrs	r2, r3
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	621a      	str	r2, [r3, #32]
}
 8013caa:	bf00      	nop
 8013cac:	371c      	adds	r7, #28
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb4:	4770      	bx	lr
	...

08013cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b085      	sub	sp, #20
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d101      	bne.n	8013cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013ccc:	2302      	movs	r3, #2
 8013cce:	e06d      	b.n	8013dac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2202      	movs	r2, #2
 8013cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	685b      	ldr	r3, [r3, #4]
 8013ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	689b      	ldr	r3, [r3, #8]
 8013cee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	4a30      	ldr	r2, [pc, #192]	; (8013db8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d004      	beq.n	8013d04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	4a2f      	ldr	r2, [pc, #188]	; (8013dbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013d00:	4293      	cmp	r3, r2
 8013d02:	d108      	bne.n	8013d16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013d0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	68fa      	ldr	r2, [r7, #12]
 8013d12:	4313      	orrs	r3, r2
 8013d14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	68fa      	ldr	r2, [r7, #12]
 8013d24:	4313      	orrs	r3, r2
 8013d26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	68fa      	ldr	r2, [r7, #12]
 8013d2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	4a20      	ldr	r2, [pc, #128]	; (8013db8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013d36:	4293      	cmp	r3, r2
 8013d38:	d022      	beq.n	8013d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d42:	d01d      	beq.n	8013d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	4a1d      	ldr	r2, [pc, #116]	; (8013dc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d018      	beq.n	8013d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	4a1c      	ldr	r2, [pc, #112]	; (8013dc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013d54:	4293      	cmp	r3, r2
 8013d56:	d013      	beq.n	8013d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	4a1a      	ldr	r2, [pc, #104]	; (8013dc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013d5e:	4293      	cmp	r3, r2
 8013d60:	d00e      	beq.n	8013d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	4a15      	ldr	r2, [pc, #84]	; (8013dbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	d009      	beq.n	8013d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	4a16      	ldr	r2, [pc, #88]	; (8013dcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013d72:	4293      	cmp	r3, r2
 8013d74:	d004      	beq.n	8013d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	4a15      	ldr	r2, [pc, #84]	; (8013dd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013d7c:	4293      	cmp	r3, r2
 8013d7e:	d10c      	bne.n	8013d9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013d80:	68bb      	ldr	r3, [r7, #8]
 8013d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013d86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	689b      	ldr	r3, [r3, #8]
 8013d8c:	68ba      	ldr	r2, [r7, #8]
 8013d8e:	4313      	orrs	r3, r2
 8013d90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	68ba      	ldr	r2, [r7, #8]
 8013d98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	2200      	movs	r2, #0
 8013da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013daa:	2300      	movs	r3, #0
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	3714      	adds	r7, #20
 8013db0:	46bd      	mov	sp, r7
 8013db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db6:	4770      	bx	lr
 8013db8:	40010000 	.word	0x40010000
 8013dbc:	40010400 	.word	0x40010400
 8013dc0:	40000400 	.word	0x40000400
 8013dc4:	40000800 	.word	0x40000800
 8013dc8:	40000c00 	.word	0x40000c00
 8013dcc:	40001800 	.word	0x40001800
 8013dd0:	40014000 	.word	0x40014000

08013dd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b085      	sub	sp, #20
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
 8013ddc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013dde:	2300      	movs	r3, #0
 8013de0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	d101      	bne.n	8013df0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013dec:	2302      	movs	r3, #2
 8013dee:	e065      	b.n	8013ebc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2201      	movs	r2, #1
 8013df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	4313      	orrs	r3, r2
 8013e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	4313      	orrs	r3, r2
 8013e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	685b      	ldr	r3, [r3, #4]
 8013e1e:	4313      	orrs	r3, r2
 8013e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	4313      	orrs	r3, r2
 8013e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	691b      	ldr	r3, [r3, #16]
 8013e3a:	4313      	orrs	r3, r2
 8013e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	695b      	ldr	r3, [r3, #20]
 8013e48:	4313      	orrs	r3, r2
 8013e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e56:	4313      	orrs	r3, r2
 8013e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	699b      	ldr	r3, [r3, #24]
 8013e64:	041b      	lsls	r3, r3, #16
 8013e66:	4313      	orrs	r3, r2
 8013e68:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	4a16      	ldr	r2, [pc, #88]	; (8013ec8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013e70:	4293      	cmp	r3, r2
 8013e72:	d004      	beq.n	8013e7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	4a14      	ldr	r2, [pc, #80]	; (8013ecc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013e7a:	4293      	cmp	r3, r2
 8013e7c:	d115      	bne.n	8013eaa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e88:	051b      	lsls	r3, r3, #20
 8013e8a:	4313      	orrs	r3, r2
 8013e8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	69db      	ldr	r3, [r3, #28]
 8013e98:	4313      	orrs	r3, r2
 8013e9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	6a1b      	ldr	r3, [r3, #32]
 8013ea6:	4313      	orrs	r3, r2
 8013ea8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	68fa      	ldr	r2, [r7, #12]
 8013eb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013eba:	2300      	movs	r3, #0
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3714      	adds	r7, #20
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec6:	4770      	bx	lr
 8013ec8:	40010000 	.word	0x40010000
 8013ecc:	40010400 	.word	0x40010400

08013ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	b083      	sub	sp, #12
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013ed8:	bf00      	nop
 8013eda:	370c      	adds	r7, #12
 8013edc:	46bd      	mov	sp, r7
 8013ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee2:	4770      	bx	lr

08013ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b083      	sub	sp, #12
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013eec:	bf00      	nop
 8013eee:	370c      	adds	r7, #12
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr

08013ef8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b083      	sub	sp, #12
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013f00:	bf00      	nop
 8013f02:	370c      	adds	r7, #12
 8013f04:	46bd      	mov	sp, r7
 8013f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0a:	4770      	bx	lr

08013f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d101      	bne.n	8013f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	e042      	b.n	8013fa4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d106      	bne.n	8013f36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f7f1 f989 	bl	8005248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2224      	movs	r2, #36	; 0x24
 8013f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f022 0201 	bic.w	r2, r2, #1
 8013f4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d002      	beq.n	8013f5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f001 fbc2 	bl	80156e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f000 fe57 	bl	8014c10 <UART_SetConfig>
 8013f62:	4603      	mov	r3, r0
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d101      	bne.n	8013f6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013f68:	2301      	movs	r3, #1
 8013f6a:	e01b      	b.n	8013fa4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	685a      	ldr	r2, [r3, #4]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013f7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	689a      	ldr	r2, [r3, #8]
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013f8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	f042 0201 	orr.w	r2, r2, #1
 8013f9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f001 fc41 	bl	8015824 <UART_CheckIdleState>
 8013fa2:	4603      	mov	r3, r0
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	3708      	adds	r7, #8
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}

08013fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b08a      	sub	sp, #40	; 0x28
 8013fb0:	af02      	add	r7, sp, #8
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	60b9      	str	r1, [r7, #8]
 8013fb6:	603b      	str	r3, [r7, #0]
 8013fb8:	4613      	mov	r3, r2
 8013fba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013fc2:	2b20      	cmp	r3, #32
 8013fc4:	d17b      	bne.n	80140be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d002      	beq.n	8013fd2 <HAL_UART_Transmit+0x26>
 8013fcc:	88fb      	ldrh	r3, [r7, #6]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d101      	bne.n	8013fd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	e074      	b.n	80140c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	2200      	movs	r2, #0
 8013fda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	2221      	movs	r2, #33	; 0x21
 8013fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013fe6:	f7f1 fd7d 	bl	8005ae4 <HAL_GetTick>
 8013fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	88fa      	ldrh	r2, [r7, #6]
 8013ff0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	88fa      	ldrh	r2, [r7, #6]
 8013ff8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	689b      	ldr	r3, [r3, #8]
 8014000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014004:	d108      	bne.n	8014018 <HAL_UART_Transmit+0x6c>
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	691b      	ldr	r3, [r3, #16]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d104      	bne.n	8014018 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801400e:	2300      	movs	r3, #0
 8014010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	61bb      	str	r3, [r7, #24]
 8014016:	e003      	b.n	8014020 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801401c:	2300      	movs	r3, #0
 801401e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014020:	e030      	b.n	8014084 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	9300      	str	r3, [sp, #0]
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	2200      	movs	r2, #0
 801402a:	2180      	movs	r1, #128	; 0x80
 801402c:	68f8      	ldr	r0, [r7, #12]
 801402e:	f001 fca3 	bl	8015978 <UART_WaitOnFlagUntilTimeout>
 8014032:	4603      	mov	r3, r0
 8014034:	2b00      	cmp	r3, #0
 8014036:	d005      	beq.n	8014044 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	2220      	movs	r2, #32
 801403c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8014040:	2303      	movs	r3, #3
 8014042:	e03d      	b.n	80140c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8014044:	69fb      	ldr	r3, [r7, #28]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d10b      	bne.n	8014062 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801404a:	69bb      	ldr	r3, [r7, #24]
 801404c:	881b      	ldrh	r3, [r3, #0]
 801404e:	461a      	mov	r2, r3
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014058:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801405a:	69bb      	ldr	r3, [r7, #24]
 801405c:	3302      	adds	r3, #2
 801405e:	61bb      	str	r3, [r7, #24]
 8014060:	e007      	b.n	8014072 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014062:	69fb      	ldr	r3, [r7, #28]
 8014064:	781a      	ldrb	r2, [r3, #0]
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801406c:	69fb      	ldr	r3, [r7, #28]
 801406e:	3301      	adds	r3, #1
 8014070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014078:	b29b      	uxth	r3, r3
 801407a:	3b01      	subs	r3, #1
 801407c:	b29a      	uxth	r2, r3
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801408a:	b29b      	uxth	r3, r3
 801408c:	2b00      	cmp	r3, #0
 801408e:	d1c8      	bne.n	8014022 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	9300      	str	r3, [sp, #0]
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	2200      	movs	r2, #0
 8014098:	2140      	movs	r1, #64	; 0x40
 801409a:	68f8      	ldr	r0, [r7, #12]
 801409c:	f001 fc6c 	bl	8015978 <UART_WaitOnFlagUntilTimeout>
 80140a0:	4603      	mov	r3, r0
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d005      	beq.n	80140b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	2220      	movs	r2, #32
 80140aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80140ae:	2303      	movs	r3, #3
 80140b0:	e006      	b.n	80140c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	2220      	movs	r2, #32
 80140b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80140ba:	2300      	movs	r3, #0
 80140bc:	e000      	b.n	80140c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80140be:	2302      	movs	r3, #2
  }
}
 80140c0:	4618      	mov	r0, r3
 80140c2:	3720      	adds	r7, #32
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}

080140c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b08a      	sub	sp, #40	; 0x28
 80140cc:	af02      	add	r7, sp, #8
 80140ce:	60f8      	str	r0, [r7, #12]
 80140d0:	60b9      	str	r1, [r7, #8]
 80140d2:	603b      	str	r3, [r7, #0]
 80140d4:	4613      	mov	r3, r2
 80140d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80140de:	2b20      	cmp	r3, #32
 80140e0:	f040 80b5 	bne.w	801424e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d002      	beq.n	80140f0 <HAL_UART_Receive+0x28>
 80140ea:	88fb      	ldrh	r3, [r7, #6]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d101      	bne.n	80140f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80140f0:	2301      	movs	r3, #1
 80140f2:	e0ad      	b.n	8014250 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	2200      	movs	r2, #0
 80140f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	2222      	movs	r2, #34	; 0x22
 8014100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	2200      	movs	r2, #0
 8014108:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801410a:	f7f1 fceb 	bl	8005ae4 <HAL_GetTick>
 801410e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	88fa      	ldrh	r2, [r7, #6]
 8014114:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	88fa      	ldrh	r2, [r7, #6]
 801411c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	689b      	ldr	r3, [r3, #8]
 8014124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014128:	d10e      	bne.n	8014148 <HAL_UART_Receive+0x80>
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	691b      	ldr	r3, [r3, #16]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d105      	bne.n	801413e <HAL_UART_Receive+0x76>
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801413c:	e02d      	b.n	801419a <HAL_UART_Receive+0xd2>
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	22ff      	movs	r2, #255	; 0xff
 8014142:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014146:	e028      	b.n	801419a <HAL_UART_Receive+0xd2>
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	689b      	ldr	r3, [r3, #8]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d10d      	bne.n	801416c <HAL_UART_Receive+0xa4>
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	691b      	ldr	r3, [r3, #16]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d104      	bne.n	8014162 <HAL_UART_Receive+0x9a>
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	22ff      	movs	r2, #255	; 0xff
 801415c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014160:	e01b      	b.n	801419a <HAL_UART_Receive+0xd2>
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	227f      	movs	r2, #127	; 0x7f
 8014166:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801416a:	e016      	b.n	801419a <HAL_UART_Receive+0xd2>
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	689b      	ldr	r3, [r3, #8]
 8014170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014174:	d10d      	bne.n	8014192 <HAL_UART_Receive+0xca>
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	691b      	ldr	r3, [r3, #16]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d104      	bne.n	8014188 <HAL_UART_Receive+0xc0>
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	227f      	movs	r2, #127	; 0x7f
 8014182:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014186:	e008      	b.n	801419a <HAL_UART_Receive+0xd2>
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	223f      	movs	r2, #63	; 0x3f
 801418c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014190:	e003      	b.n	801419a <HAL_UART_Receive+0xd2>
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	2200      	movs	r2, #0
 8014196:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80141aa:	d108      	bne.n	80141be <HAL_UART_Receive+0xf6>
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	691b      	ldr	r3, [r3, #16]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d104      	bne.n	80141be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80141b4:	2300      	movs	r3, #0
 80141b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	61bb      	str	r3, [r7, #24]
 80141bc:	e003      	b.n	80141c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80141c2:	2300      	movs	r3, #0
 80141c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80141c6:	e036      	b.n	8014236 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	9300      	str	r3, [sp, #0]
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	2200      	movs	r2, #0
 80141d0:	2120      	movs	r1, #32
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f001 fbd0 	bl	8015978 <UART_WaitOnFlagUntilTimeout>
 80141d8:	4603      	mov	r3, r0
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d005      	beq.n	80141ea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	2220      	movs	r2, #32
 80141e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80141e6:	2303      	movs	r3, #3
 80141e8:	e032      	b.n	8014250 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80141ea:	69fb      	ldr	r3, [r7, #28]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d10c      	bne.n	801420a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141f6:	b29a      	uxth	r2, r3
 80141f8:	8a7b      	ldrh	r3, [r7, #18]
 80141fa:	4013      	ands	r3, r2
 80141fc:	b29a      	uxth	r2, r3
 80141fe:	69bb      	ldr	r3, [r7, #24]
 8014200:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014202:	69bb      	ldr	r3, [r7, #24]
 8014204:	3302      	adds	r3, #2
 8014206:	61bb      	str	r3, [r7, #24]
 8014208:	e00c      	b.n	8014224 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014210:	b2da      	uxtb	r2, r3
 8014212:	8a7b      	ldrh	r3, [r7, #18]
 8014214:	b2db      	uxtb	r3, r3
 8014216:	4013      	ands	r3, r2
 8014218:	b2da      	uxtb	r2, r3
 801421a:	69fb      	ldr	r3, [r7, #28]
 801421c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	3301      	adds	r3, #1
 8014222:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801422a:	b29b      	uxth	r3, r3
 801422c:	3b01      	subs	r3, #1
 801422e:	b29a      	uxth	r2, r3
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801423c:	b29b      	uxth	r3, r3
 801423e:	2b00      	cmp	r3, #0
 8014240:	d1c2      	bne.n	80141c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	2220      	movs	r2, #32
 8014246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801424a:	2300      	movs	r3, #0
 801424c:	e000      	b.n	8014250 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801424e:	2302      	movs	r3, #2
  }
}
 8014250:	4618      	mov	r0, r3
 8014252:	3720      	adds	r7, #32
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b08a      	sub	sp, #40	; 0x28
 801425c:	af00      	add	r7, sp, #0
 801425e:	60f8      	str	r0, [r7, #12]
 8014260:	60b9      	str	r1, [r7, #8]
 8014262:	4613      	mov	r3, r2
 8014264:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801426c:	2b20      	cmp	r3, #32
 801426e:	d137      	bne.n	80142e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d002      	beq.n	801427c <HAL_UART_Receive_IT+0x24>
 8014276:	88fb      	ldrh	r3, [r7, #6]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d101      	bne.n	8014280 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801427c:	2301      	movs	r3, #1
 801427e:	e030      	b.n	80142e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	2200      	movs	r2, #0
 8014284:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	4a18      	ldr	r2, [pc, #96]	; (80142ec <HAL_UART_Receive_IT+0x94>)
 801428c:	4293      	cmp	r3, r2
 801428e:	d01f      	beq.n	80142d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	685b      	ldr	r3, [r3, #4]
 8014296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801429a:	2b00      	cmp	r3, #0
 801429c:	d018      	beq.n	80142d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142a4:	697b      	ldr	r3, [r7, #20]
 80142a6:	e853 3f00 	ldrex	r3, [r3]
 80142aa:	613b      	str	r3, [r7, #16]
   return(result);
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80142b2:	627b      	str	r3, [r7, #36]	; 0x24
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	461a      	mov	r2, r3
 80142ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142bc:	623b      	str	r3, [r7, #32]
 80142be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142c0:	69f9      	ldr	r1, [r7, #28]
 80142c2:	6a3a      	ldr	r2, [r7, #32]
 80142c4:	e841 2300 	strex	r3, r2, [r1]
 80142c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80142ca:	69bb      	ldr	r3, [r7, #24]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d1e6      	bne.n	801429e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80142d0:	88fb      	ldrh	r3, [r7, #6]
 80142d2:	461a      	mov	r2, r3
 80142d4:	68b9      	ldr	r1, [r7, #8]
 80142d6:	68f8      	ldr	r0, [r7, #12]
 80142d8:	f001 fbbc 	bl	8015a54 <UART_Start_Receive_IT>
 80142dc:	4603      	mov	r3, r0
 80142de:	e000      	b.n	80142e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80142e0:	2302      	movs	r3, #2
  }
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3728      	adds	r7, #40	; 0x28
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	58000c00 	.word	0x58000c00

080142f0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b09a      	sub	sp, #104	; 0x68
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014300:	e853 3f00 	ldrex	r3, [r3]
 8014304:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801430c:	667b      	str	r3, [r7, #100]	; 0x64
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	461a      	mov	r2, r3
 8014314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014316:	657b      	str	r3, [r7, #84]	; 0x54
 8014318:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801431a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801431c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801431e:	e841 2300 	strex	r3, r2, [r1]
 8014322:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014326:	2b00      	cmp	r3, #0
 8014328:	d1e6      	bne.n	80142f8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	3308      	adds	r3, #8
 8014330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014334:	e853 3f00 	ldrex	r3, [r3]
 8014338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801433a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801433c:	4b46      	ldr	r3, [pc, #280]	; (8014458 <HAL_UART_AbortReceive+0x168>)
 801433e:	4013      	ands	r3, r2
 8014340:	663b      	str	r3, [r7, #96]	; 0x60
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	3308      	adds	r3, #8
 8014348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801434a:	643a      	str	r2, [r7, #64]	; 0x40
 801434c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801434e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014352:	e841 2300 	strex	r3, r2, [r1]
 8014356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801435a:	2b00      	cmp	r3, #0
 801435c:	d1e5      	bne.n	801432a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014362:	2b01      	cmp	r3, #1
 8014364:	d118      	bne.n	8014398 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801436c:	6a3b      	ldr	r3, [r7, #32]
 801436e:	e853 3f00 	ldrex	r3, [r3]
 8014372:	61fb      	str	r3, [r7, #28]
   return(result);
 8014374:	69fb      	ldr	r3, [r7, #28]
 8014376:	f023 0310 	bic.w	r3, r3, #16
 801437a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	461a      	mov	r2, r3
 8014382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014386:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801438a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801438c:	e841 2300 	strex	r3, r2, [r1]
 8014390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014394:	2b00      	cmp	r3, #0
 8014396:	d1e6      	bne.n	8014366 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	689b      	ldr	r3, [r3, #8]
 801439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143a2:	2b40      	cmp	r3, #64	; 0x40
 80143a4:	d13b      	bne.n	801441e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	3308      	adds	r3, #8
 80143ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	e853 3f00 	ldrex	r3, [r3]
 80143b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80143bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	3308      	adds	r3, #8
 80143c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80143c6:	61ba      	str	r2, [r7, #24]
 80143c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143ca:	6979      	ldr	r1, [r7, #20]
 80143cc:	69ba      	ldr	r2, [r7, #24]
 80143ce:	e841 2300 	strex	r3, r2, [r1]
 80143d2:	613b      	str	r3, [r7, #16]
   return(result);
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d1e5      	bne.n	80143a6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d01c      	beq.n	801441e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80143ea:	2200      	movs	r2, #0
 80143ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7f4 fa63 	bl	80088c0 <HAL_DMA_Abort>
 80143fa:	4603      	mov	r3, r0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d00e      	beq.n	801441e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014406:	4618      	mov	r0, r3
 8014408:	f7f5 fef6 	bl	800a1f8 <HAL_DMA_GetError>
 801440c:	4603      	mov	r3, r0
 801440e:	2b20      	cmp	r3, #32
 8014410:	d105      	bne.n	801441e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	2210      	movs	r2, #16
 8014416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801441a:	2303      	movs	r3, #3
 801441c:	e017      	b.n	801444e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2200      	movs	r2, #0
 8014422:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	220f      	movs	r2, #15
 801442c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	699a      	ldr	r2, [r3, #24]
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	f042 0208 	orr.w	r2, r2, #8
 801443c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	2220      	movs	r2, #32
 8014442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2200      	movs	r2, #0
 801444a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 801444c:	2300      	movs	r3, #0
}
 801444e:	4618      	mov	r0, r3
 8014450:	3768      	adds	r7, #104	; 0x68
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	effffffe 	.word	0xeffffffe

0801445c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b0ba      	sub	sp, #232	; 0xe8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	69db      	ldr	r3, [r3, #28]
 801446a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	689b      	ldr	r3, [r3, #8]
 801447e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014482:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8014486:	f640 030f 	movw	r3, #2063	; 0x80f
 801448a:	4013      	ands	r3, r2
 801448c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014494:	2b00      	cmp	r3, #0
 8014496:	d11b      	bne.n	80144d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801449c:	f003 0320 	and.w	r3, r3, #32
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d015      	beq.n	80144d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80144a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144a8:	f003 0320 	and.w	r3, r3, #32
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d105      	bne.n	80144bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80144b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80144b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d009      	beq.n	80144d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	f000 8377 	beq.w	8014bb4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	4798      	blx	r3
      }
      return;
 80144ce:	e371      	b.n	8014bb4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80144d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	f000 8123 	beq.w	8014720 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80144da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80144de:	4b8d      	ldr	r3, [pc, #564]	; (8014714 <HAL_UART_IRQHandler+0x2b8>)
 80144e0:	4013      	ands	r3, r2
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d106      	bne.n	80144f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80144e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80144ea:	4b8b      	ldr	r3, [pc, #556]	; (8014718 <HAL_UART_IRQHandler+0x2bc>)
 80144ec:	4013      	ands	r3, r2
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	f000 8116 	beq.w	8014720 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80144f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144f8:	f003 0301 	and.w	r3, r3, #1
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d011      	beq.n	8014524 <HAL_UART_IRQHandler+0xc8>
 8014500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014508:	2b00      	cmp	r3, #0
 801450a:	d00b      	beq.n	8014524 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	2201      	movs	r2, #1
 8014512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801451a:	f043 0201 	orr.w	r2, r3, #1
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014528:	f003 0302 	and.w	r3, r3, #2
 801452c:	2b00      	cmp	r3, #0
 801452e:	d011      	beq.n	8014554 <HAL_UART_IRQHandler+0xf8>
 8014530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014534:	f003 0301 	and.w	r3, r3, #1
 8014538:	2b00      	cmp	r3, #0
 801453a:	d00b      	beq.n	8014554 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	2202      	movs	r2, #2
 8014542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801454a:	f043 0204 	orr.w	r2, r3, #4
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014558:	f003 0304 	and.w	r3, r3, #4
 801455c:	2b00      	cmp	r3, #0
 801455e:	d011      	beq.n	8014584 <HAL_UART_IRQHandler+0x128>
 8014560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014564:	f003 0301 	and.w	r3, r3, #1
 8014568:	2b00      	cmp	r3, #0
 801456a:	d00b      	beq.n	8014584 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	2204      	movs	r2, #4
 8014572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801457a:	f043 0202 	orr.w	r2, r3, #2
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014588:	f003 0308 	and.w	r3, r3, #8
 801458c:	2b00      	cmp	r3, #0
 801458e:	d017      	beq.n	80145c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014594:	f003 0320 	and.w	r3, r3, #32
 8014598:	2b00      	cmp	r3, #0
 801459a:	d105      	bne.n	80145a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801459c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80145a0:	4b5c      	ldr	r3, [pc, #368]	; (8014714 <HAL_UART_IRQHandler+0x2b8>)
 80145a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d00b      	beq.n	80145c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	2208      	movs	r2, #8
 80145ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145b6:	f043 0208 	orr.w	r2, r3, #8
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80145c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80145c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d012      	beq.n	80145f2 <HAL_UART_IRQHandler+0x196>
 80145cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80145d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d00c      	beq.n	80145f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80145e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145e8:	f043 0220 	orr.w	r2, r3, #32
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	f000 82dd 	beq.w	8014bb8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80145fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014602:	f003 0320 	and.w	r3, r3, #32
 8014606:	2b00      	cmp	r3, #0
 8014608:	d013      	beq.n	8014632 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801460a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801460e:	f003 0320 	and.w	r3, r3, #32
 8014612:	2b00      	cmp	r3, #0
 8014614:	d105      	bne.n	8014622 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801461e:	2b00      	cmp	r3, #0
 8014620:	d007      	beq.n	8014632 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014626:	2b00      	cmp	r3, #0
 8014628:	d003      	beq.n	8014632 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014638:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	689b      	ldr	r3, [r3, #8]
 8014642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014646:	2b40      	cmp	r3, #64	; 0x40
 8014648:	d005      	beq.n	8014656 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801464a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801464e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014652:	2b00      	cmp	r3, #0
 8014654:	d054      	beq.n	8014700 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f001 fb1e 	bl	8015c98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	689b      	ldr	r3, [r3, #8]
 8014662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014666:	2b40      	cmp	r3, #64	; 0x40
 8014668:	d146      	bne.n	80146f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	3308      	adds	r3, #8
 8014670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014674:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014678:	e853 3f00 	ldrex	r3, [r3]
 801467c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	3308      	adds	r3, #8
 8014692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014696:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801469a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801469e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80146a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80146a6:	e841 2300 	strex	r3, r2, [r1]
 80146aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80146ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d1d9      	bne.n	801466a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d017      	beq.n	80146f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146c6:	4a15      	ldr	r2, [pc, #84]	; (801471c <HAL_UART_IRQHandler+0x2c0>)
 80146c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7f4 fc13 	bl	8008efc <HAL_DMA_Abort_IT>
 80146d6:	4603      	mov	r3, r0
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d019      	beq.n	8014710 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146e4:	687a      	ldr	r2, [r7, #4]
 80146e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80146ea:	4610      	mov	r0, r2
 80146ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80146ee:	e00f      	b.n	8014710 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f000 fa77 	bl	8014be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80146f6:	e00b      	b.n	8014710 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f000 fa73 	bl	8014be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80146fe:	e007      	b.n	8014710 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f000 fa6f 	bl	8014be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	2200      	movs	r2, #0
 801470a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801470e:	e253      	b.n	8014bb8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014710:	bf00      	nop
    return;
 8014712:	e251      	b.n	8014bb8 <HAL_UART_IRQHandler+0x75c>
 8014714:	10000001 	.word	0x10000001
 8014718:	04000120 	.word	0x04000120
 801471c:	08015d65 	.word	0x08015d65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014724:	2b01      	cmp	r3, #1
 8014726:	f040 81e7 	bne.w	8014af8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801472e:	f003 0310 	and.w	r3, r3, #16
 8014732:	2b00      	cmp	r3, #0
 8014734:	f000 81e0 	beq.w	8014af8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801473c:	f003 0310 	and.w	r3, r3, #16
 8014740:	2b00      	cmp	r3, #0
 8014742:	f000 81d9 	beq.w	8014af8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	2210      	movs	r2, #16
 801474c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	689b      	ldr	r3, [r3, #8]
 8014754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014758:	2b40      	cmp	r3, #64	; 0x40
 801475a:	f040 8151 	bne.w	8014a00 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	4a96      	ldr	r2, [pc, #600]	; (80149c0 <HAL_UART_IRQHandler+0x564>)
 8014768:	4293      	cmp	r3, r2
 801476a:	d068      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	4a93      	ldr	r2, [pc, #588]	; (80149c4 <HAL_UART_IRQHandler+0x568>)
 8014776:	4293      	cmp	r3, r2
 8014778:	d061      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	4a91      	ldr	r2, [pc, #580]	; (80149c8 <HAL_UART_IRQHandler+0x56c>)
 8014784:	4293      	cmp	r3, r2
 8014786:	d05a      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	4a8e      	ldr	r2, [pc, #568]	; (80149cc <HAL_UART_IRQHandler+0x570>)
 8014792:	4293      	cmp	r3, r2
 8014794:	d053      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	4a8c      	ldr	r2, [pc, #560]	; (80149d0 <HAL_UART_IRQHandler+0x574>)
 80147a0:	4293      	cmp	r3, r2
 80147a2:	d04c      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	4a89      	ldr	r2, [pc, #548]	; (80149d4 <HAL_UART_IRQHandler+0x578>)
 80147ae:	4293      	cmp	r3, r2
 80147b0:	d045      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	4a87      	ldr	r2, [pc, #540]	; (80149d8 <HAL_UART_IRQHandler+0x57c>)
 80147bc:	4293      	cmp	r3, r2
 80147be:	d03e      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	4a84      	ldr	r2, [pc, #528]	; (80149dc <HAL_UART_IRQHandler+0x580>)
 80147ca:	4293      	cmp	r3, r2
 80147cc:	d037      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	4a82      	ldr	r2, [pc, #520]	; (80149e0 <HAL_UART_IRQHandler+0x584>)
 80147d8:	4293      	cmp	r3, r2
 80147da:	d030      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	4a7f      	ldr	r2, [pc, #508]	; (80149e4 <HAL_UART_IRQHandler+0x588>)
 80147e6:	4293      	cmp	r3, r2
 80147e8:	d029      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	4a7d      	ldr	r2, [pc, #500]	; (80149e8 <HAL_UART_IRQHandler+0x58c>)
 80147f4:	4293      	cmp	r3, r2
 80147f6:	d022      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	4a7a      	ldr	r2, [pc, #488]	; (80149ec <HAL_UART_IRQHandler+0x590>)
 8014802:	4293      	cmp	r3, r2
 8014804:	d01b      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	4a78      	ldr	r2, [pc, #480]	; (80149f0 <HAL_UART_IRQHandler+0x594>)
 8014810:	4293      	cmp	r3, r2
 8014812:	d014      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	4a75      	ldr	r2, [pc, #468]	; (80149f4 <HAL_UART_IRQHandler+0x598>)
 801481e:	4293      	cmp	r3, r2
 8014820:	d00d      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	4a73      	ldr	r2, [pc, #460]	; (80149f8 <HAL_UART_IRQHandler+0x59c>)
 801482c:	4293      	cmp	r3, r2
 801482e:	d006      	beq.n	801483e <HAL_UART_IRQHandler+0x3e2>
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	4a70      	ldr	r2, [pc, #448]	; (80149fc <HAL_UART_IRQHandler+0x5a0>)
 801483a:	4293      	cmp	r3, r2
 801483c:	d106      	bne.n	801484c <HAL_UART_IRQHandler+0x3f0>
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	685b      	ldr	r3, [r3, #4]
 8014848:	b29b      	uxth	r3, r3
 801484a:	e005      	b.n	8014858 <HAL_UART_IRQHandler+0x3fc>
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	b29b      	uxth	r3, r3
 8014858:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801485c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014860:	2b00      	cmp	r3, #0
 8014862:	f000 81ab 	beq.w	8014bbc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801486c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014870:	429a      	cmp	r2, r3
 8014872:	f080 81a3 	bcs.w	8014bbc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801487c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014886:	69db      	ldr	r3, [r3, #28]
 8014888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801488c:	f000 8087 	beq.w	801499e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014898:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801489c:	e853 3f00 	ldrex	r3, [r3]
 80148a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80148a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80148a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80148ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	461a      	mov	r2, r3
 80148b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80148ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80148be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80148c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80148ca:	e841 2300 	strex	r3, r2, [r1]
 80148ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80148d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d1da      	bne.n	8014890 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	3308      	adds	r3, #8
 80148e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80148e4:	e853 3f00 	ldrex	r3, [r3]
 80148e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80148ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80148ec:	f023 0301 	bic.w	r3, r3, #1
 80148f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	3308      	adds	r3, #8
 80148fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80148fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014902:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014904:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801490a:	e841 2300 	strex	r3, r2, [r1]
 801490e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014912:	2b00      	cmp	r3, #0
 8014914:	d1e1      	bne.n	80148da <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	3308      	adds	r3, #8
 801491c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801491e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014920:	e853 3f00 	ldrex	r3, [r3]
 8014924:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801492c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	3308      	adds	r3, #8
 8014936:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801493a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801493c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801493e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014940:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014942:	e841 2300 	strex	r3, r2, [r1]
 8014946:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801494a:	2b00      	cmp	r3, #0
 801494c:	d1e3      	bne.n	8014916 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	2220      	movs	r2, #32
 8014952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	2200      	movs	r2, #0
 801495a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014964:	e853 3f00 	ldrex	r3, [r3]
 8014968:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801496a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801496c:	f023 0310 	bic.w	r3, r3, #16
 8014970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	461a      	mov	r2, r3
 801497a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801497e:	65bb      	str	r3, [r7, #88]	; 0x58
 8014980:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014982:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014986:	e841 2300 	strex	r3, r2, [r1]
 801498a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801498c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801498e:	2b00      	cmp	r3, #0
 8014990:	d1e4      	bne.n	801495c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014998:	4618      	mov	r0, r3
 801499a:	f7f3 ff91 	bl	80088c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2202      	movs	r2, #2
 80149a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	1ad3      	subs	r3, r2, r3
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	4619      	mov	r1, r3
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f000 f91d 	bl	8014bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80149be:	e0fd      	b.n	8014bbc <HAL_UART_IRQHandler+0x760>
 80149c0:	40020010 	.word	0x40020010
 80149c4:	40020028 	.word	0x40020028
 80149c8:	40020040 	.word	0x40020040
 80149cc:	40020058 	.word	0x40020058
 80149d0:	40020070 	.word	0x40020070
 80149d4:	40020088 	.word	0x40020088
 80149d8:	400200a0 	.word	0x400200a0
 80149dc:	400200b8 	.word	0x400200b8
 80149e0:	40020410 	.word	0x40020410
 80149e4:	40020428 	.word	0x40020428
 80149e8:	40020440 	.word	0x40020440
 80149ec:	40020458 	.word	0x40020458
 80149f0:	40020470 	.word	0x40020470
 80149f4:	40020488 	.word	0x40020488
 80149f8:	400204a0 	.word	0x400204a0
 80149fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014a0c:	b29b      	uxth	r3, r3
 8014a0e:	1ad3      	subs	r3, r2, r3
 8014a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	f000 80cf 	beq.w	8014bc0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8014a22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	f000 80ca 	beq.w	8014bc0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a34:	e853 3f00 	ldrex	r3, [r3]
 8014a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	461a      	mov	r2, r3
 8014a4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8014a50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014a56:	e841 2300 	strex	r3, r2, [r1]
 8014a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d1e4      	bne.n	8014a2c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	3308      	adds	r3, #8
 8014a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a6c:	e853 3f00 	ldrex	r3, [r3]
 8014a70:	623b      	str	r3, [r7, #32]
   return(result);
 8014a72:	6a3a      	ldr	r2, [r7, #32]
 8014a74:	4b55      	ldr	r3, [pc, #340]	; (8014bcc <HAL_UART_IRQHandler+0x770>)
 8014a76:	4013      	ands	r3, r2
 8014a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	3308      	adds	r3, #8
 8014a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014a86:	633a      	str	r2, [r7, #48]	; 0x30
 8014a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a8e:	e841 2300 	strex	r3, r2, [r1]
 8014a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d1e3      	bne.n	8014a62 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2220      	movs	r2, #32
 8014a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ab4:	693b      	ldr	r3, [r7, #16]
 8014ab6:	e853 3f00 	ldrex	r3, [r3]
 8014aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	f023 0310 	bic.w	r3, r3, #16
 8014ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	461a      	mov	r2, r3
 8014acc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014ad0:	61fb      	str	r3, [r7, #28]
 8014ad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ad4:	69b9      	ldr	r1, [r7, #24]
 8014ad6:	69fa      	ldr	r2, [r7, #28]
 8014ad8:	e841 2300 	strex	r3, r2, [r1]
 8014adc:	617b      	str	r3, [r7, #20]
   return(result);
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d1e4      	bne.n	8014aae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2202      	movs	r2, #2
 8014ae8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014aea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014aee:	4619      	mov	r1, r3
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f000 f881 	bl	8014bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014af6:	e063      	b.n	8014bc0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d00e      	beq.n	8014b22 <HAL_UART_IRQHandler+0x6c6>
 8014b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d008      	beq.n	8014b22 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f001 fe80 	bl	8016820 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014b20:	e051      	b.n	8014bc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d014      	beq.n	8014b58 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d105      	bne.n	8014b46 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d008      	beq.n	8014b58 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d03a      	beq.n	8014bc4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	4798      	blx	r3
    }
    return;
 8014b56:	e035      	b.n	8014bc4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d009      	beq.n	8014b78 <HAL_UART_IRQHandler+0x71c>
 8014b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d003      	beq.n	8014b78 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014b70:	6878      	ldr	r0, [r7, #4]
 8014b72:	f001 f90d 	bl	8015d90 <UART_EndTransmit_IT>
    return;
 8014b76:	e026      	b.n	8014bc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d009      	beq.n	8014b98 <HAL_UART_IRQHandler+0x73c>
 8014b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014b88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d003      	beq.n	8014b98 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f001 fe59 	bl	8016848 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014b96:	e016      	b.n	8014bc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d010      	beq.n	8014bc6 <HAL_UART_IRQHandler+0x76a>
 8014ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	da0c      	bge.n	8014bc6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f001 fe41 	bl	8016834 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014bb2:	e008      	b.n	8014bc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8014bb4:	bf00      	nop
 8014bb6:	e006      	b.n	8014bc6 <HAL_UART_IRQHandler+0x76a>
    return;
 8014bb8:	bf00      	nop
 8014bba:	e004      	b.n	8014bc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8014bbc:	bf00      	nop
 8014bbe:	e002      	b.n	8014bc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8014bc0:	bf00      	nop
 8014bc2:	e000      	b.n	8014bc6 <HAL_UART_IRQHandler+0x76a>
    return;
 8014bc4:	bf00      	nop
  }
}
 8014bc6:	37e8      	adds	r7, #232	; 0xe8
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	effffffe 	.word	0xeffffffe

08014bd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014bd0:	b480      	push	{r7}
 8014bd2:	b083      	sub	sp, #12
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014bd8:	bf00      	nop
 8014bda:	370c      	adds	r7, #12
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be2:	4770      	bx	lr

08014be4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014be4:	b480      	push	{r7}
 8014be6:	b083      	sub	sp, #12
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014bec:	bf00      	nop
 8014bee:	370c      	adds	r7, #12
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr

08014bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014bf8:	b480      	push	{r7}
 8014bfa:	b083      	sub	sp, #12
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	460b      	mov	r3, r1
 8014c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014c04:	bf00      	nop
 8014c06:	370c      	adds	r7, #12
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr

08014c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014c14:	b092      	sub	sp, #72	; 0x48
 8014c16:	af00      	add	r7, sp, #0
 8014c18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	689a      	ldr	r2, [r3, #8]
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	691b      	ldr	r3, [r3, #16]
 8014c28:	431a      	orrs	r2, r3
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	695b      	ldr	r3, [r3, #20]
 8014c2e:	431a      	orrs	r2, r3
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	69db      	ldr	r3, [r3, #28]
 8014c34:	4313      	orrs	r3, r2
 8014c36:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	681a      	ldr	r2, [r3, #0]
 8014c3e:	4bbe      	ldr	r3, [pc, #760]	; (8014f38 <UART_SetConfig+0x328>)
 8014c40:	4013      	ands	r3, r2
 8014c42:	697a      	ldr	r2, [r7, #20]
 8014c44:	6812      	ldr	r2, [r2, #0]
 8014c46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014c48:	430b      	orrs	r3, r1
 8014c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014c4c:	697b      	ldr	r3, [r7, #20]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	685b      	ldr	r3, [r3, #4]
 8014c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	68da      	ldr	r2, [r3, #12]
 8014c5a:	697b      	ldr	r3, [r7, #20]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	430a      	orrs	r2, r1
 8014c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014c62:	697b      	ldr	r3, [r7, #20]
 8014c64:	699b      	ldr	r3, [r3, #24]
 8014c66:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014c68:	697b      	ldr	r3, [r7, #20]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	4ab3      	ldr	r2, [pc, #716]	; (8014f3c <UART_SetConfig+0x32c>)
 8014c6e:	4293      	cmp	r3, r2
 8014c70:	d004      	beq.n	8014c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	6a1b      	ldr	r3, [r3, #32]
 8014c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014c78:	4313      	orrs	r3, r2
 8014c7a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	689a      	ldr	r2, [r3, #8]
 8014c82:	4baf      	ldr	r3, [pc, #700]	; (8014f40 <UART_SetConfig+0x330>)
 8014c84:	4013      	ands	r3, r2
 8014c86:	697a      	ldr	r2, [r7, #20]
 8014c88:	6812      	ldr	r2, [r2, #0]
 8014c8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014c8c:	430b      	orrs	r3, r1
 8014c8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c96:	f023 010f 	bic.w	r1, r3, #15
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	430a      	orrs	r2, r1
 8014ca4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	4aa6      	ldr	r2, [pc, #664]	; (8014f44 <UART_SetConfig+0x334>)
 8014cac:	4293      	cmp	r3, r2
 8014cae:	d177      	bne.n	8014da0 <UART_SetConfig+0x190>
 8014cb0:	4ba5      	ldr	r3, [pc, #660]	; (8014f48 <UART_SetConfig+0x338>)
 8014cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014cb8:	2b28      	cmp	r3, #40	; 0x28
 8014cba:	d86d      	bhi.n	8014d98 <UART_SetConfig+0x188>
 8014cbc:	a201      	add	r2, pc, #4	; (adr r2, 8014cc4 <UART_SetConfig+0xb4>)
 8014cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cc2:	bf00      	nop
 8014cc4:	08014d69 	.word	0x08014d69
 8014cc8:	08014d99 	.word	0x08014d99
 8014ccc:	08014d99 	.word	0x08014d99
 8014cd0:	08014d99 	.word	0x08014d99
 8014cd4:	08014d99 	.word	0x08014d99
 8014cd8:	08014d99 	.word	0x08014d99
 8014cdc:	08014d99 	.word	0x08014d99
 8014ce0:	08014d99 	.word	0x08014d99
 8014ce4:	08014d71 	.word	0x08014d71
 8014ce8:	08014d99 	.word	0x08014d99
 8014cec:	08014d99 	.word	0x08014d99
 8014cf0:	08014d99 	.word	0x08014d99
 8014cf4:	08014d99 	.word	0x08014d99
 8014cf8:	08014d99 	.word	0x08014d99
 8014cfc:	08014d99 	.word	0x08014d99
 8014d00:	08014d99 	.word	0x08014d99
 8014d04:	08014d79 	.word	0x08014d79
 8014d08:	08014d99 	.word	0x08014d99
 8014d0c:	08014d99 	.word	0x08014d99
 8014d10:	08014d99 	.word	0x08014d99
 8014d14:	08014d99 	.word	0x08014d99
 8014d18:	08014d99 	.word	0x08014d99
 8014d1c:	08014d99 	.word	0x08014d99
 8014d20:	08014d99 	.word	0x08014d99
 8014d24:	08014d81 	.word	0x08014d81
 8014d28:	08014d99 	.word	0x08014d99
 8014d2c:	08014d99 	.word	0x08014d99
 8014d30:	08014d99 	.word	0x08014d99
 8014d34:	08014d99 	.word	0x08014d99
 8014d38:	08014d99 	.word	0x08014d99
 8014d3c:	08014d99 	.word	0x08014d99
 8014d40:	08014d99 	.word	0x08014d99
 8014d44:	08014d89 	.word	0x08014d89
 8014d48:	08014d99 	.word	0x08014d99
 8014d4c:	08014d99 	.word	0x08014d99
 8014d50:	08014d99 	.word	0x08014d99
 8014d54:	08014d99 	.word	0x08014d99
 8014d58:	08014d99 	.word	0x08014d99
 8014d5c:	08014d99 	.word	0x08014d99
 8014d60:	08014d99 	.word	0x08014d99
 8014d64:	08014d91 	.word	0x08014d91
 8014d68:	2301      	movs	r3, #1
 8014d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d6e:	e222      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014d70:	2304      	movs	r3, #4
 8014d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d76:	e21e      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014d78:	2308      	movs	r3, #8
 8014d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d7e:	e21a      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014d80:	2310      	movs	r3, #16
 8014d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d86:	e216      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014d88:	2320      	movs	r3, #32
 8014d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d8e:	e212      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014d90:	2340      	movs	r3, #64	; 0x40
 8014d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d96:	e20e      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014d98:	2380      	movs	r3, #128	; 0x80
 8014d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d9e:	e20a      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	4a69      	ldr	r2, [pc, #420]	; (8014f4c <UART_SetConfig+0x33c>)
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d130      	bne.n	8014e0c <UART_SetConfig+0x1fc>
 8014daa:	4b67      	ldr	r3, [pc, #412]	; (8014f48 <UART_SetConfig+0x338>)
 8014dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dae:	f003 0307 	and.w	r3, r3, #7
 8014db2:	2b05      	cmp	r3, #5
 8014db4:	d826      	bhi.n	8014e04 <UART_SetConfig+0x1f4>
 8014db6:	a201      	add	r2, pc, #4	; (adr r2, 8014dbc <UART_SetConfig+0x1ac>)
 8014db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dbc:	08014dd5 	.word	0x08014dd5
 8014dc0:	08014ddd 	.word	0x08014ddd
 8014dc4:	08014de5 	.word	0x08014de5
 8014dc8:	08014ded 	.word	0x08014ded
 8014dcc:	08014df5 	.word	0x08014df5
 8014dd0:	08014dfd 	.word	0x08014dfd
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dda:	e1ec      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014ddc:	2304      	movs	r3, #4
 8014dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014de2:	e1e8      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014de4:	2308      	movs	r3, #8
 8014de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dea:	e1e4      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014dec:	2310      	movs	r3, #16
 8014dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014df2:	e1e0      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014df4:	2320      	movs	r3, #32
 8014df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dfa:	e1dc      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014dfc:	2340      	movs	r3, #64	; 0x40
 8014dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e02:	e1d8      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014e04:	2380      	movs	r3, #128	; 0x80
 8014e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e0a:	e1d4      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	4a4f      	ldr	r2, [pc, #316]	; (8014f50 <UART_SetConfig+0x340>)
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d130      	bne.n	8014e78 <UART_SetConfig+0x268>
 8014e16:	4b4c      	ldr	r3, [pc, #304]	; (8014f48 <UART_SetConfig+0x338>)
 8014e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e1a:	f003 0307 	and.w	r3, r3, #7
 8014e1e:	2b05      	cmp	r3, #5
 8014e20:	d826      	bhi.n	8014e70 <UART_SetConfig+0x260>
 8014e22:	a201      	add	r2, pc, #4	; (adr r2, 8014e28 <UART_SetConfig+0x218>)
 8014e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e28:	08014e41 	.word	0x08014e41
 8014e2c:	08014e49 	.word	0x08014e49
 8014e30:	08014e51 	.word	0x08014e51
 8014e34:	08014e59 	.word	0x08014e59
 8014e38:	08014e61 	.word	0x08014e61
 8014e3c:	08014e69 	.word	0x08014e69
 8014e40:	2300      	movs	r3, #0
 8014e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e46:	e1b6      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014e48:	2304      	movs	r3, #4
 8014e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e4e:	e1b2      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014e50:	2308      	movs	r3, #8
 8014e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e56:	e1ae      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014e58:	2310      	movs	r3, #16
 8014e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e5e:	e1aa      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014e60:	2320      	movs	r3, #32
 8014e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e66:	e1a6      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014e68:	2340      	movs	r3, #64	; 0x40
 8014e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e6e:	e1a2      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014e70:	2380      	movs	r3, #128	; 0x80
 8014e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e76:	e19e      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	4a35      	ldr	r2, [pc, #212]	; (8014f54 <UART_SetConfig+0x344>)
 8014e7e:	4293      	cmp	r3, r2
 8014e80:	d130      	bne.n	8014ee4 <UART_SetConfig+0x2d4>
 8014e82:	4b31      	ldr	r3, [pc, #196]	; (8014f48 <UART_SetConfig+0x338>)
 8014e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e86:	f003 0307 	and.w	r3, r3, #7
 8014e8a:	2b05      	cmp	r3, #5
 8014e8c:	d826      	bhi.n	8014edc <UART_SetConfig+0x2cc>
 8014e8e:	a201      	add	r2, pc, #4	; (adr r2, 8014e94 <UART_SetConfig+0x284>)
 8014e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e94:	08014ead 	.word	0x08014ead
 8014e98:	08014eb5 	.word	0x08014eb5
 8014e9c:	08014ebd 	.word	0x08014ebd
 8014ea0:	08014ec5 	.word	0x08014ec5
 8014ea4:	08014ecd 	.word	0x08014ecd
 8014ea8:	08014ed5 	.word	0x08014ed5
 8014eac:	2300      	movs	r3, #0
 8014eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eb2:	e180      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014eb4:	2304      	movs	r3, #4
 8014eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eba:	e17c      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014ebc:	2308      	movs	r3, #8
 8014ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ec2:	e178      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014ec4:	2310      	movs	r3, #16
 8014ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eca:	e174      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014ecc:	2320      	movs	r3, #32
 8014ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ed2:	e170      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014ed4:	2340      	movs	r3, #64	; 0x40
 8014ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eda:	e16c      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014edc:	2380      	movs	r3, #128	; 0x80
 8014ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ee2:	e168      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014ee4:	697b      	ldr	r3, [r7, #20]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	4a1b      	ldr	r2, [pc, #108]	; (8014f58 <UART_SetConfig+0x348>)
 8014eea:	4293      	cmp	r3, r2
 8014eec:	d142      	bne.n	8014f74 <UART_SetConfig+0x364>
 8014eee:	4b16      	ldr	r3, [pc, #88]	; (8014f48 <UART_SetConfig+0x338>)
 8014ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ef2:	f003 0307 	and.w	r3, r3, #7
 8014ef6:	2b05      	cmp	r3, #5
 8014ef8:	d838      	bhi.n	8014f6c <UART_SetConfig+0x35c>
 8014efa:	a201      	add	r2, pc, #4	; (adr r2, 8014f00 <UART_SetConfig+0x2f0>)
 8014efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f00:	08014f19 	.word	0x08014f19
 8014f04:	08014f21 	.word	0x08014f21
 8014f08:	08014f29 	.word	0x08014f29
 8014f0c:	08014f31 	.word	0x08014f31
 8014f10:	08014f5d 	.word	0x08014f5d
 8014f14:	08014f65 	.word	0x08014f65
 8014f18:	2300      	movs	r3, #0
 8014f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f1e:	e14a      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014f20:	2304      	movs	r3, #4
 8014f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f26:	e146      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014f28:	2308      	movs	r3, #8
 8014f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f2e:	e142      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014f30:	2310      	movs	r3, #16
 8014f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f36:	e13e      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014f38:	cfff69f3 	.word	0xcfff69f3
 8014f3c:	58000c00 	.word	0x58000c00
 8014f40:	11fff4ff 	.word	0x11fff4ff
 8014f44:	40011000 	.word	0x40011000
 8014f48:	58024400 	.word	0x58024400
 8014f4c:	40004400 	.word	0x40004400
 8014f50:	40004800 	.word	0x40004800
 8014f54:	40004c00 	.word	0x40004c00
 8014f58:	40005000 	.word	0x40005000
 8014f5c:	2320      	movs	r3, #32
 8014f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f62:	e128      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014f64:	2340      	movs	r3, #64	; 0x40
 8014f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f6a:	e124      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014f6c:	2380      	movs	r3, #128	; 0x80
 8014f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f72:	e120      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	4acb      	ldr	r2, [pc, #812]	; (80152a8 <UART_SetConfig+0x698>)
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d176      	bne.n	801506c <UART_SetConfig+0x45c>
 8014f7e:	4bcb      	ldr	r3, [pc, #812]	; (80152ac <UART_SetConfig+0x69c>)
 8014f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014f86:	2b28      	cmp	r3, #40	; 0x28
 8014f88:	d86c      	bhi.n	8015064 <UART_SetConfig+0x454>
 8014f8a:	a201      	add	r2, pc, #4	; (adr r2, 8014f90 <UART_SetConfig+0x380>)
 8014f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f90:	08015035 	.word	0x08015035
 8014f94:	08015065 	.word	0x08015065
 8014f98:	08015065 	.word	0x08015065
 8014f9c:	08015065 	.word	0x08015065
 8014fa0:	08015065 	.word	0x08015065
 8014fa4:	08015065 	.word	0x08015065
 8014fa8:	08015065 	.word	0x08015065
 8014fac:	08015065 	.word	0x08015065
 8014fb0:	0801503d 	.word	0x0801503d
 8014fb4:	08015065 	.word	0x08015065
 8014fb8:	08015065 	.word	0x08015065
 8014fbc:	08015065 	.word	0x08015065
 8014fc0:	08015065 	.word	0x08015065
 8014fc4:	08015065 	.word	0x08015065
 8014fc8:	08015065 	.word	0x08015065
 8014fcc:	08015065 	.word	0x08015065
 8014fd0:	08015045 	.word	0x08015045
 8014fd4:	08015065 	.word	0x08015065
 8014fd8:	08015065 	.word	0x08015065
 8014fdc:	08015065 	.word	0x08015065
 8014fe0:	08015065 	.word	0x08015065
 8014fe4:	08015065 	.word	0x08015065
 8014fe8:	08015065 	.word	0x08015065
 8014fec:	08015065 	.word	0x08015065
 8014ff0:	0801504d 	.word	0x0801504d
 8014ff4:	08015065 	.word	0x08015065
 8014ff8:	08015065 	.word	0x08015065
 8014ffc:	08015065 	.word	0x08015065
 8015000:	08015065 	.word	0x08015065
 8015004:	08015065 	.word	0x08015065
 8015008:	08015065 	.word	0x08015065
 801500c:	08015065 	.word	0x08015065
 8015010:	08015055 	.word	0x08015055
 8015014:	08015065 	.word	0x08015065
 8015018:	08015065 	.word	0x08015065
 801501c:	08015065 	.word	0x08015065
 8015020:	08015065 	.word	0x08015065
 8015024:	08015065 	.word	0x08015065
 8015028:	08015065 	.word	0x08015065
 801502c:	08015065 	.word	0x08015065
 8015030:	0801505d 	.word	0x0801505d
 8015034:	2301      	movs	r3, #1
 8015036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801503a:	e0bc      	b.n	80151b6 <UART_SetConfig+0x5a6>
 801503c:	2304      	movs	r3, #4
 801503e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015042:	e0b8      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015044:	2308      	movs	r3, #8
 8015046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801504a:	e0b4      	b.n	80151b6 <UART_SetConfig+0x5a6>
 801504c:	2310      	movs	r3, #16
 801504e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015052:	e0b0      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015054:	2320      	movs	r3, #32
 8015056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801505a:	e0ac      	b.n	80151b6 <UART_SetConfig+0x5a6>
 801505c:	2340      	movs	r3, #64	; 0x40
 801505e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015062:	e0a8      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015064:	2380      	movs	r3, #128	; 0x80
 8015066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801506a:	e0a4      	b.n	80151b6 <UART_SetConfig+0x5a6>
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	4a8f      	ldr	r2, [pc, #572]	; (80152b0 <UART_SetConfig+0x6a0>)
 8015072:	4293      	cmp	r3, r2
 8015074:	d130      	bne.n	80150d8 <UART_SetConfig+0x4c8>
 8015076:	4b8d      	ldr	r3, [pc, #564]	; (80152ac <UART_SetConfig+0x69c>)
 8015078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801507a:	f003 0307 	and.w	r3, r3, #7
 801507e:	2b05      	cmp	r3, #5
 8015080:	d826      	bhi.n	80150d0 <UART_SetConfig+0x4c0>
 8015082:	a201      	add	r2, pc, #4	; (adr r2, 8015088 <UART_SetConfig+0x478>)
 8015084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015088:	080150a1 	.word	0x080150a1
 801508c:	080150a9 	.word	0x080150a9
 8015090:	080150b1 	.word	0x080150b1
 8015094:	080150b9 	.word	0x080150b9
 8015098:	080150c1 	.word	0x080150c1
 801509c:	080150c9 	.word	0x080150c9
 80150a0:	2300      	movs	r3, #0
 80150a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150a6:	e086      	b.n	80151b6 <UART_SetConfig+0x5a6>
 80150a8:	2304      	movs	r3, #4
 80150aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ae:	e082      	b.n	80151b6 <UART_SetConfig+0x5a6>
 80150b0:	2308      	movs	r3, #8
 80150b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150b6:	e07e      	b.n	80151b6 <UART_SetConfig+0x5a6>
 80150b8:	2310      	movs	r3, #16
 80150ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150be:	e07a      	b.n	80151b6 <UART_SetConfig+0x5a6>
 80150c0:	2320      	movs	r3, #32
 80150c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150c6:	e076      	b.n	80151b6 <UART_SetConfig+0x5a6>
 80150c8:	2340      	movs	r3, #64	; 0x40
 80150ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ce:	e072      	b.n	80151b6 <UART_SetConfig+0x5a6>
 80150d0:	2380      	movs	r3, #128	; 0x80
 80150d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150d6:	e06e      	b.n	80151b6 <UART_SetConfig+0x5a6>
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	4a75      	ldr	r2, [pc, #468]	; (80152b4 <UART_SetConfig+0x6a4>)
 80150de:	4293      	cmp	r3, r2
 80150e0:	d130      	bne.n	8015144 <UART_SetConfig+0x534>
 80150e2:	4b72      	ldr	r3, [pc, #456]	; (80152ac <UART_SetConfig+0x69c>)
 80150e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150e6:	f003 0307 	and.w	r3, r3, #7
 80150ea:	2b05      	cmp	r3, #5
 80150ec:	d826      	bhi.n	801513c <UART_SetConfig+0x52c>
 80150ee:	a201      	add	r2, pc, #4	; (adr r2, 80150f4 <UART_SetConfig+0x4e4>)
 80150f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150f4:	0801510d 	.word	0x0801510d
 80150f8:	08015115 	.word	0x08015115
 80150fc:	0801511d 	.word	0x0801511d
 8015100:	08015125 	.word	0x08015125
 8015104:	0801512d 	.word	0x0801512d
 8015108:	08015135 	.word	0x08015135
 801510c:	2300      	movs	r3, #0
 801510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015112:	e050      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015114:	2304      	movs	r3, #4
 8015116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801511a:	e04c      	b.n	80151b6 <UART_SetConfig+0x5a6>
 801511c:	2308      	movs	r3, #8
 801511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015122:	e048      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015124:	2310      	movs	r3, #16
 8015126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801512a:	e044      	b.n	80151b6 <UART_SetConfig+0x5a6>
 801512c:	2320      	movs	r3, #32
 801512e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015132:	e040      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015134:	2340      	movs	r3, #64	; 0x40
 8015136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801513a:	e03c      	b.n	80151b6 <UART_SetConfig+0x5a6>
 801513c:	2380      	movs	r3, #128	; 0x80
 801513e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015142:	e038      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	4a5b      	ldr	r2, [pc, #364]	; (80152b8 <UART_SetConfig+0x6a8>)
 801514a:	4293      	cmp	r3, r2
 801514c:	d130      	bne.n	80151b0 <UART_SetConfig+0x5a0>
 801514e:	4b57      	ldr	r3, [pc, #348]	; (80152ac <UART_SetConfig+0x69c>)
 8015150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015152:	f003 0307 	and.w	r3, r3, #7
 8015156:	2b05      	cmp	r3, #5
 8015158:	d826      	bhi.n	80151a8 <UART_SetConfig+0x598>
 801515a:	a201      	add	r2, pc, #4	; (adr r2, 8015160 <UART_SetConfig+0x550>)
 801515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015160:	08015179 	.word	0x08015179
 8015164:	08015181 	.word	0x08015181
 8015168:	08015189 	.word	0x08015189
 801516c:	08015191 	.word	0x08015191
 8015170:	08015199 	.word	0x08015199
 8015174:	080151a1 	.word	0x080151a1
 8015178:	2302      	movs	r3, #2
 801517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801517e:	e01a      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015180:	2304      	movs	r3, #4
 8015182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015186:	e016      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015188:	2308      	movs	r3, #8
 801518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801518e:	e012      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015190:	2310      	movs	r3, #16
 8015192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015196:	e00e      	b.n	80151b6 <UART_SetConfig+0x5a6>
 8015198:	2320      	movs	r3, #32
 801519a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801519e:	e00a      	b.n	80151b6 <UART_SetConfig+0x5a6>
 80151a0:	2340      	movs	r3, #64	; 0x40
 80151a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151a6:	e006      	b.n	80151b6 <UART_SetConfig+0x5a6>
 80151a8:	2380      	movs	r3, #128	; 0x80
 80151aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151ae:	e002      	b.n	80151b6 <UART_SetConfig+0x5a6>
 80151b0:	2380      	movs	r3, #128	; 0x80
 80151b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80151b6:	697b      	ldr	r3, [r7, #20]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	4a3f      	ldr	r2, [pc, #252]	; (80152b8 <UART_SetConfig+0x6a8>)
 80151bc:	4293      	cmp	r3, r2
 80151be:	f040 80f8 	bne.w	80153b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80151c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80151c6:	2b20      	cmp	r3, #32
 80151c8:	dc46      	bgt.n	8015258 <UART_SetConfig+0x648>
 80151ca:	2b02      	cmp	r3, #2
 80151cc:	f2c0 8082 	blt.w	80152d4 <UART_SetConfig+0x6c4>
 80151d0:	3b02      	subs	r3, #2
 80151d2:	2b1e      	cmp	r3, #30
 80151d4:	d87e      	bhi.n	80152d4 <UART_SetConfig+0x6c4>
 80151d6:	a201      	add	r2, pc, #4	; (adr r2, 80151dc <UART_SetConfig+0x5cc>)
 80151d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151dc:	0801525f 	.word	0x0801525f
 80151e0:	080152d5 	.word	0x080152d5
 80151e4:	08015267 	.word	0x08015267
 80151e8:	080152d5 	.word	0x080152d5
 80151ec:	080152d5 	.word	0x080152d5
 80151f0:	080152d5 	.word	0x080152d5
 80151f4:	08015277 	.word	0x08015277
 80151f8:	080152d5 	.word	0x080152d5
 80151fc:	080152d5 	.word	0x080152d5
 8015200:	080152d5 	.word	0x080152d5
 8015204:	080152d5 	.word	0x080152d5
 8015208:	080152d5 	.word	0x080152d5
 801520c:	080152d5 	.word	0x080152d5
 8015210:	080152d5 	.word	0x080152d5
 8015214:	08015287 	.word	0x08015287
 8015218:	080152d5 	.word	0x080152d5
 801521c:	080152d5 	.word	0x080152d5
 8015220:	080152d5 	.word	0x080152d5
 8015224:	080152d5 	.word	0x080152d5
 8015228:	080152d5 	.word	0x080152d5
 801522c:	080152d5 	.word	0x080152d5
 8015230:	080152d5 	.word	0x080152d5
 8015234:	080152d5 	.word	0x080152d5
 8015238:	080152d5 	.word	0x080152d5
 801523c:	080152d5 	.word	0x080152d5
 8015240:	080152d5 	.word	0x080152d5
 8015244:	080152d5 	.word	0x080152d5
 8015248:	080152d5 	.word	0x080152d5
 801524c:	080152d5 	.word	0x080152d5
 8015250:	080152d5 	.word	0x080152d5
 8015254:	080152c7 	.word	0x080152c7
 8015258:	2b40      	cmp	r3, #64	; 0x40
 801525a:	d037      	beq.n	80152cc <UART_SetConfig+0x6bc>
 801525c:	e03a      	b.n	80152d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801525e:	f7fb fc17 	bl	8010a90 <HAL_RCCEx_GetD3PCLK1Freq>
 8015262:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015264:	e03c      	b.n	80152e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801526a:	4618      	mov	r0, r3
 801526c:	f7fb fc26 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015274:	e034      	b.n	80152e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015276:	f107 0318 	add.w	r3, r7, #24
 801527a:	4618      	mov	r0, r3
 801527c:	f7fb fd72 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015280:	69fb      	ldr	r3, [r7, #28]
 8015282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015284:	e02c      	b.n	80152e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015286:	4b09      	ldr	r3, [pc, #36]	; (80152ac <UART_SetConfig+0x69c>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	f003 0320 	and.w	r3, r3, #32
 801528e:	2b00      	cmp	r3, #0
 8015290:	d016      	beq.n	80152c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015292:	4b06      	ldr	r3, [pc, #24]	; (80152ac <UART_SetConfig+0x69c>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	08db      	lsrs	r3, r3, #3
 8015298:	f003 0303 	and.w	r3, r3, #3
 801529c:	4a07      	ldr	r2, [pc, #28]	; (80152bc <UART_SetConfig+0x6ac>)
 801529e:	fa22 f303 	lsr.w	r3, r2, r3
 80152a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80152a4:	e01c      	b.n	80152e0 <UART_SetConfig+0x6d0>
 80152a6:	bf00      	nop
 80152a8:	40011400 	.word	0x40011400
 80152ac:	58024400 	.word	0x58024400
 80152b0:	40007800 	.word	0x40007800
 80152b4:	40007c00 	.word	0x40007c00
 80152b8:	58000c00 	.word	0x58000c00
 80152bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80152c0:	4b9d      	ldr	r3, [pc, #628]	; (8015538 <UART_SetConfig+0x928>)
 80152c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80152c4:	e00c      	b.n	80152e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80152c6:	4b9d      	ldr	r3, [pc, #628]	; (801553c <UART_SetConfig+0x92c>)
 80152c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80152ca:	e009      	b.n	80152e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80152cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80152d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80152d2:	e005      	b.n	80152e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80152d4:	2300      	movs	r3, #0
 80152d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80152d8:	2301      	movs	r3, #1
 80152da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80152de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80152e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	f000 81de 	beq.w	80156a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ec:	4a94      	ldr	r2, [pc, #592]	; (8015540 <UART_SetConfig+0x930>)
 80152ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80152f2:	461a      	mov	r2, r3
 80152f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80152fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	685a      	ldr	r2, [r3, #4]
 8015300:	4613      	mov	r3, r2
 8015302:	005b      	lsls	r3, r3, #1
 8015304:	4413      	add	r3, r2
 8015306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015308:	429a      	cmp	r2, r3
 801530a:	d305      	bcc.n	8015318 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801530c:	697b      	ldr	r3, [r7, #20]
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015314:	429a      	cmp	r2, r3
 8015316:	d903      	bls.n	8015320 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8015318:	2301      	movs	r3, #1
 801531a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801531e:	e1c1      	b.n	80156a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015322:	2200      	movs	r2, #0
 8015324:	60bb      	str	r3, [r7, #8]
 8015326:	60fa      	str	r2, [r7, #12]
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801532c:	4a84      	ldr	r2, [pc, #528]	; (8015540 <UART_SetConfig+0x930>)
 801532e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015332:	b29b      	uxth	r3, r3
 8015334:	2200      	movs	r2, #0
 8015336:	603b      	str	r3, [r7, #0]
 8015338:	607a      	str	r2, [r7, #4]
 801533a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801533e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015342:	f7ea ffcd 	bl	80002e0 <__aeabi_uldivmod>
 8015346:	4602      	mov	r2, r0
 8015348:	460b      	mov	r3, r1
 801534a:	4610      	mov	r0, r2
 801534c:	4619      	mov	r1, r3
 801534e:	f04f 0200 	mov.w	r2, #0
 8015352:	f04f 0300 	mov.w	r3, #0
 8015356:	020b      	lsls	r3, r1, #8
 8015358:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801535c:	0202      	lsls	r2, r0, #8
 801535e:	6979      	ldr	r1, [r7, #20]
 8015360:	6849      	ldr	r1, [r1, #4]
 8015362:	0849      	lsrs	r1, r1, #1
 8015364:	2000      	movs	r0, #0
 8015366:	460c      	mov	r4, r1
 8015368:	4605      	mov	r5, r0
 801536a:	eb12 0804 	adds.w	r8, r2, r4
 801536e:	eb43 0905 	adc.w	r9, r3, r5
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	685b      	ldr	r3, [r3, #4]
 8015376:	2200      	movs	r2, #0
 8015378:	469a      	mov	sl, r3
 801537a:	4693      	mov	fp, r2
 801537c:	4652      	mov	r2, sl
 801537e:	465b      	mov	r3, fp
 8015380:	4640      	mov	r0, r8
 8015382:	4649      	mov	r1, r9
 8015384:	f7ea ffac 	bl	80002e0 <__aeabi_uldivmod>
 8015388:	4602      	mov	r2, r0
 801538a:	460b      	mov	r3, r1
 801538c:	4613      	mov	r3, r2
 801538e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015396:	d308      	bcc.n	80153aa <UART_SetConfig+0x79a>
 8015398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801539a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801539e:	d204      	bcs.n	80153aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80153a0:	697b      	ldr	r3, [r7, #20]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80153a6:	60da      	str	r2, [r3, #12]
 80153a8:	e17c      	b.n	80156a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80153aa:	2301      	movs	r3, #1
 80153ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80153b0:	e178      	b.n	80156a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	69db      	ldr	r3, [r3, #28]
 80153b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80153ba:	f040 80c5 	bne.w	8015548 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80153be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80153c2:	2b20      	cmp	r3, #32
 80153c4:	dc48      	bgt.n	8015458 <UART_SetConfig+0x848>
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	db7b      	blt.n	80154c2 <UART_SetConfig+0x8b2>
 80153ca:	2b20      	cmp	r3, #32
 80153cc:	d879      	bhi.n	80154c2 <UART_SetConfig+0x8b2>
 80153ce:	a201      	add	r2, pc, #4	; (adr r2, 80153d4 <UART_SetConfig+0x7c4>)
 80153d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153d4:	0801545f 	.word	0x0801545f
 80153d8:	08015467 	.word	0x08015467
 80153dc:	080154c3 	.word	0x080154c3
 80153e0:	080154c3 	.word	0x080154c3
 80153e4:	0801546f 	.word	0x0801546f
 80153e8:	080154c3 	.word	0x080154c3
 80153ec:	080154c3 	.word	0x080154c3
 80153f0:	080154c3 	.word	0x080154c3
 80153f4:	0801547f 	.word	0x0801547f
 80153f8:	080154c3 	.word	0x080154c3
 80153fc:	080154c3 	.word	0x080154c3
 8015400:	080154c3 	.word	0x080154c3
 8015404:	080154c3 	.word	0x080154c3
 8015408:	080154c3 	.word	0x080154c3
 801540c:	080154c3 	.word	0x080154c3
 8015410:	080154c3 	.word	0x080154c3
 8015414:	0801548f 	.word	0x0801548f
 8015418:	080154c3 	.word	0x080154c3
 801541c:	080154c3 	.word	0x080154c3
 8015420:	080154c3 	.word	0x080154c3
 8015424:	080154c3 	.word	0x080154c3
 8015428:	080154c3 	.word	0x080154c3
 801542c:	080154c3 	.word	0x080154c3
 8015430:	080154c3 	.word	0x080154c3
 8015434:	080154c3 	.word	0x080154c3
 8015438:	080154c3 	.word	0x080154c3
 801543c:	080154c3 	.word	0x080154c3
 8015440:	080154c3 	.word	0x080154c3
 8015444:	080154c3 	.word	0x080154c3
 8015448:	080154c3 	.word	0x080154c3
 801544c:	080154c3 	.word	0x080154c3
 8015450:	080154c3 	.word	0x080154c3
 8015454:	080154b5 	.word	0x080154b5
 8015458:	2b40      	cmp	r3, #64	; 0x40
 801545a:	d02e      	beq.n	80154ba <UART_SetConfig+0x8aa>
 801545c:	e031      	b.n	80154c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801545e:	f7f9 fb1f 	bl	800eaa0 <HAL_RCC_GetPCLK1Freq>
 8015462:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015464:	e033      	b.n	80154ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015466:	f7f9 fb31 	bl	800eacc <HAL_RCC_GetPCLK2Freq>
 801546a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801546c:	e02f      	b.n	80154ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801546e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015472:	4618      	mov	r0, r3
 8015474:	f7fb fb22 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801547a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801547c:	e027      	b.n	80154ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801547e:	f107 0318 	add.w	r3, r7, #24
 8015482:	4618      	mov	r0, r3
 8015484:	f7fb fc6e 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015488:	69fb      	ldr	r3, [r7, #28]
 801548a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801548c:	e01f      	b.n	80154ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801548e:	4b2d      	ldr	r3, [pc, #180]	; (8015544 <UART_SetConfig+0x934>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	f003 0320 	and.w	r3, r3, #32
 8015496:	2b00      	cmp	r3, #0
 8015498:	d009      	beq.n	80154ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801549a:	4b2a      	ldr	r3, [pc, #168]	; (8015544 <UART_SetConfig+0x934>)
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	08db      	lsrs	r3, r3, #3
 80154a0:	f003 0303 	and.w	r3, r3, #3
 80154a4:	4a24      	ldr	r2, [pc, #144]	; (8015538 <UART_SetConfig+0x928>)
 80154a6:	fa22 f303 	lsr.w	r3, r2, r3
 80154aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80154ac:	e00f      	b.n	80154ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80154ae:	4b22      	ldr	r3, [pc, #136]	; (8015538 <UART_SetConfig+0x928>)
 80154b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80154b2:	e00c      	b.n	80154ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80154b4:	4b21      	ldr	r3, [pc, #132]	; (801553c <UART_SetConfig+0x92c>)
 80154b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80154b8:	e009      	b.n	80154ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80154ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80154be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80154c0:	e005      	b.n	80154ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80154c2:	2300      	movs	r3, #0
 80154c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80154c6:	2301      	movs	r3, #1
 80154c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80154cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80154ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	f000 80e7 	beq.w	80156a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154da:	4a19      	ldr	r2, [pc, #100]	; (8015540 <UART_SetConfig+0x930>)
 80154dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80154e0:	461a      	mov	r2, r3
 80154e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80154e8:	005a      	lsls	r2, r3, #1
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	085b      	lsrs	r3, r3, #1
 80154f0:	441a      	add	r2, r3
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80154fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80154fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154fe:	2b0f      	cmp	r3, #15
 8015500:	d916      	bls.n	8015530 <UART_SetConfig+0x920>
 8015502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015508:	d212      	bcs.n	8015530 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801550c:	b29b      	uxth	r3, r3
 801550e:	f023 030f 	bic.w	r3, r3, #15
 8015512:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015516:	085b      	lsrs	r3, r3, #1
 8015518:	b29b      	uxth	r3, r3
 801551a:	f003 0307 	and.w	r3, r3, #7
 801551e:	b29a      	uxth	r2, r3
 8015520:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015522:	4313      	orrs	r3, r2
 8015524:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801552c:	60da      	str	r2, [r3, #12]
 801552e:	e0b9      	b.n	80156a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015530:	2301      	movs	r3, #1
 8015532:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015536:	e0b5      	b.n	80156a4 <UART_SetConfig+0xa94>
 8015538:	03d09000 	.word	0x03d09000
 801553c:	003d0900 	.word	0x003d0900
 8015540:	0801ae2c 	.word	0x0801ae2c
 8015544:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015548:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801554c:	2b20      	cmp	r3, #32
 801554e:	dc49      	bgt.n	80155e4 <UART_SetConfig+0x9d4>
 8015550:	2b00      	cmp	r3, #0
 8015552:	db7c      	blt.n	801564e <UART_SetConfig+0xa3e>
 8015554:	2b20      	cmp	r3, #32
 8015556:	d87a      	bhi.n	801564e <UART_SetConfig+0xa3e>
 8015558:	a201      	add	r2, pc, #4	; (adr r2, 8015560 <UART_SetConfig+0x950>)
 801555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801555e:	bf00      	nop
 8015560:	080155eb 	.word	0x080155eb
 8015564:	080155f3 	.word	0x080155f3
 8015568:	0801564f 	.word	0x0801564f
 801556c:	0801564f 	.word	0x0801564f
 8015570:	080155fb 	.word	0x080155fb
 8015574:	0801564f 	.word	0x0801564f
 8015578:	0801564f 	.word	0x0801564f
 801557c:	0801564f 	.word	0x0801564f
 8015580:	0801560b 	.word	0x0801560b
 8015584:	0801564f 	.word	0x0801564f
 8015588:	0801564f 	.word	0x0801564f
 801558c:	0801564f 	.word	0x0801564f
 8015590:	0801564f 	.word	0x0801564f
 8015594:	0801564f 	.word	0x0801564f
 8015598:	0801564f 	.word	0x0801564f
 801559c:	0801564f 	.word	0x0801564f
 80155a0:	0801561b 	.word	0x0801561b
 80155a4:	0801564f 	.word	0x0801564f
 80155a8:	0801564f 	.word	0x0801564f
 80155ac:	0801564f 	.word	0x0801564f
 80155b0:	0801564f 	.word	0x0801564f
 80155b4:	0801564f 	.word	0x0801564f
 80155b8:	0801564f 	.word	0x0801564f
 80155bc:	0801564f 	.word	0x0801564f
 80155c0:	0801564f 	.word	0x0801564f
 80155c4:	0801564f 	.word	0x0801564f
 80155c8:	0801564f 	.word	0x0801564f
 80155cc:	0801564f 	.word	0x0801564f
 80155d0:	0801564f 	.word	0x0801564f
 80155d4:	0801564f 	.word	0x0801564f
 80155d8:	0801564f 	.word	0x0801564f
 80155dc:	0801564f 	.word	0x0801564f
 80155e0:	08015641 	.word	0x08015641
 80155e4:	2b40      	cmp	r3, #64	; 0x40
 80155e6:	d02e      	beq.n	8015646 <UART_SetConfig+0xa36>
 80155e8:	e031      	b.n	801564e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80155ea:	f7f9 fa59 	bl	800eaa0 <HAL_RCC_GetPCLK1Freq>
 80155ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80155f0:	e033      	b.n	801565a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80155f2:	f7f9 fa6b 	bl	800eacc <HAL_RCC_GetPCLK2Freq>
 80155f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80155f8:	e02f      	b.n	801565a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80155fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80155fe:	4618      	mov	r0, r3
 8015600:	f7fb fa5c 	bl	8010abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015608:	e027      	b.n	801565a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801560a:	f107 0318 	add.w	r3, r7, #24
 801560e:	4618      	mov	r0, r3
 8015610:	f7fb fba8 	bl	8010d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015614:	69fb      	ldr	r3, [r7, #28]
 8015616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015618:	e01f      	b.n	801565a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801561a:	4b2d      	ldr	r3, [pc, #180]	; (80156d0 <UART_SetConfig+0xac0>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	f003 0320 	and.w	r3, r3, #32
 8015622:	2b00      	cmp	r3, #0
 8015624:	d009      	beq.n	801563a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015626:	4b2a      	ldr	r3, [pc, #168]	; (80156d0 <UART_SetConfig+0xac0>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	08db      	lsrs	r3, r3, #3
 801562c:	f003 0303 	and.w	r3, r3, #3
 8015630:	4a28      	ldr	r2, [pc, #160]	; (80156d4 <UART_SetConfig+0xac4>)
 8015632:	fa22 f303 	lsr.w	r3, r2, r3
 8015636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015638:	e00f      	b.n	801565a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801563a:	4b26      	ldr	r3, [pc, #152]	; (80156d4 <UART_SetConfig+0xac4>)
 801563c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801563e:	e00c      	b.n	801565a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015640:	4b25      	ldr	r3, [pc, #148]	; (80156d8 <UART_SetConfig+0xac8>)
 8015642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015644:	e009      	b.n	801565a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801564a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801564c:	e005      	b.n	801565a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801564e:	2300      	movs	r3, #0
 8015650:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015652:	2301      	movs	r3, #1
 8015654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015658:	bf00      	nop
    }

    if (pclk != 0U)
 801565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801565c:	2b00      	cmp	r3, #0
 801565e:	d021      	beq.n	80156a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015664:	4a1d      	ldr	r2, [pc, #116]	; (80156dc <UART_SetConfig+0xacc>)
 8015666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801566a:	461a      	mov	r2, r3
 801566c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801566e:	fbb3 f2f2 	udiv	r2, r3, r2
 8015672:	697b      	ldr	r3, [r7, #20]
 8015674:	685b      	ldr	r3, [r3, #4]
 8015676:	085b      	lsrs	r3, r3, #1
 8015678:	441a      	add	r2, r3
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015682:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015686:	2b0f      	cmp	r3, #15
 8015688:	d909      	bls.n	801569e <UART_SetConfig+0xa8e>
 801568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801568c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015690:	d205      	bcs.n	801569e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015694:	b29a      	uxth	r2, r3
 8015696:	697b      	ldr	r3, [r7, #20]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	60da      	str	r2, [r3, #12]
 801569c:	e002      	b.n	80156a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801569e:	2301      	movs	r3, #1
 80156a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	2201      	movs	r2, #1
 80156a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80156ac:	697b      	ldr	r3, [r7, #20]
 80156ae:	2201      	movs	r2, #1
 80156b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80156b4:	697b      	ldr	r3, [r7, #20]
 80156b6:	2200      	movs	r2, #0
 80156b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	2200      	movs	r2, #0
 80156be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80156c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3748      	adds	r7, #72	; 0x48
 80156c8:	46bd      	mov	sp, r7
 80156ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80156ce:	bf00      	nop
 80156d0:	58024400 	.word	0x58024400
 80156d4:	03d09000 	.word	0x03d09000
 80156d8:	003d0900 	.word	0x003d0900
 80156dc:	0801ae2c 	.word	0x0801ae2c

080156e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80156e0:	b480      	push	{r7}
 80156e2:	b083      	sub	sp, #12
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156ec:	f003 0308 	and.w	r3, r3, #8
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d00a      	beq.n	801570a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	430a      	orrs	r2, r1
 8015708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801570e:	f003 0301 	and.w	r3, r3, #1
 8015712:	2b00      	cmp	r3, #0
 8015714:	d00a      	beq.n	801572c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	685b      	ldr	r3, [r3, #4]
 801571c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	430a      	orrs	r2, r1
 801572a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015730:	f003 0302 	and.w	r3, r3, #2
 8015734:	2b00      	cmp	r3, #0
 8015736:	d00a      	beq.n	801574e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	685b      	ldr	r3, [r3, #4]
 801573e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	430a      	orrs	r2, r1
 801574c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015752:	f003 0304 	and.w	r3, r3, #4
 8015756:	2b00      	cmp	r3, #0
 8015758:	d00a      	beq.n	8015770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	430a      	orrs	r2, r1
 801576e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015774:	f003 0310 	and.w	r3, r3, #16
 8015778:	2b00      	cmp	r3, #0
 801577a:	d00a      	beq.n	8015792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	689b      	ldr	r3, [r3, #8]
 8015782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	430a      	orrs	r2, r1
 8015790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015796:	f003 0320 	and.w	r3, r3, #32
 801579a:	2b00      	cmp	r3, #0
 801579c:	d00a      	beq.n	80157b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	689b      	ldr	r3, [r3, #8]
 80157a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	430a      	orrs	r2, r1
 80157b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d01a      	beq.n	80157f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	685b      	ldr	r3, [r3, #4]
 80157c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	430a      	orrs	r2, r1
 80157d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80157de:	d10a      	bne.n	80157f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	685b      	ldr	r3, [r3, #4]
 80157e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	430a      	orrs	r2, r1
 80157f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d00a      	beq.n	8015818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	430a      	orrs	r2, r1
 8015816:	605a      	str	r2, [r3, #4]
  }
}
 8015818:	bf00      	nop
 801581a:	370c      	adds	r7, #12
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr

08015824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b098      	sub	sp, #96	; 0x60
 8015828:	af02      	add	r7, sp, #8
 801582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2200      	movs	r2, #0
 8015830:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015834:	f7f0 f956 	bl	8005ae4 <HAL_GetTick>
 8015838:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	f003 0308 	and.w	r3, r3, #8
 8015844:	2b08      	cmp	r3, #8
 8015846:	d12f      	bne.n	80158a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801584c:	9300      	str	r3, [sp, #0]
 801584e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015850:	2200      	movs	r2, #0
 8015852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f000 f88e 	bl	8015978 <UART_WaitOnFlagUntilTimeout>
 801585c:	4603      	mov	r3, r0
 801585e:	2b00      	cmp	r3, #0
 8015860:	d022      	beq.n	80158a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801586a:	e853 3f00 	ldrex	r3, [r3]
 801586e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015876:	653b      	str	r3, [r7, #80]	; 0x50
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	461a      	mov	r2, r3
 801587e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015880:	647b      	str	r3, [r7, #68]	; 0x44
 8015882:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015884:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015888:	e841 2300 	strex	r3, r2, [r1]
 801588c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801588e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015890:	2b00      	cmp	r3, #0
 8015892:	d1e6      	bne.n	8015862 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2220      	movs	r2, #32
 8015898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2200      	movs	r2, #0
 80158a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80158a4:	2303      	movs	r3, #3
 80158a6:	e063      	b.n	8015970 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	f003 0304 	and.w	r3, r3, #4
 80158b2:	2b04      	cmp	r3, #4
 80158b4:	d149      	bne.n	801594a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80158b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80158ba:	9300      	str	r3, [sp, #0]
 80158bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158be:	2200      	movs	r2, #0
 80158c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f000 f857 	bl	8015978 <UART_WaitOnFlagUntilTimeout>
 80158ca:	4603      	mov	r3, r0
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d03c      	beq.n	801594a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d8:	e853 3f00 	ldrex	r3, [r3]
 80158dc:	623b      	str	r3, [r7, #32]
   return(result);
 80158de:	6a3b      	ldr	r3, [r7, #32]
 80158e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80158e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	461a      	mov	r2, r3
 80158ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80158ee:	633b      	str	r3, [r7, #48]	; 0x30
 80158f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80158f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80158f6:	e841 2300 	strex	r3, r2, [r1]
 80158fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80158fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d1e6      	bne.n	80158d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	3308      	adds	r3, #8
 8015908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801590a:	693b      	ldr	r3, [r7, #16]
 801590c:	e853 3f00 	ldrex	r3, [r3]
 8015910:	60fb      	str	r3, [r7, #12]
   return(result);
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	f023 0301 	bic.w	r3, r3, #1
 8015918:	64bb      	str	r3, [r7, #72]	; 0x48
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	3308      	adds	r3, #8
 8015920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015922:	61fa      	str	r2, [r7, #28]
 8015924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015926:	69b9      	ldr	r1, [r7, #24]
 8015928:	69fa      	ldr	r2, [r7, #28]
 801592a:	e841 2300 	strex	r3, r2, [r1]
 801592e:	617b      	str	r3, [r7, #20]
   return(result);
 8015930:	697b      	ldr	r3, [r7, #20]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d1e5      	bne.n	8015902 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	2220      	movs	r2, #32
 801593a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	2200      	movs	r2, #0
 8015942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015946:	2303      	movs	r3, #3
 8015948:	e012      	b.n	8015970 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	2220      	movs	r2, #32
 801594e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	2220      	movs	r2, #32
 8015956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	2200      	movs	r2, #0
 801595e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2200      	movs	r2, #0
 8015964:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	2200      	movs	r2, #0
 801596a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801596e:	2300      	movs	r3, #0
}
 8015970:	4618      	mov	r0, r3
 8015972:	3758      	adds	r7, #88	; 0x58
 8015974:	46bd      	mov	sp, r7
 8015976:	bd80      	pop	{r7, pc}

08015978 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b084      	sub	sp, #16
 801597c:	af00      	add	r7, sp, #0
 801597e:	60f8      	str	r0, [r7, #12]
 8015980:	60b9      	str	r1, [r7, #8]
 8015982:	603b      	str	r3, [r7, #0]
 8015984:	4613      	mov	r3, r2
 8015986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015988:	e04f      	b.n	8015a2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801598a:	69bb      	ldr	r3, [r7, #24]
 801598c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015990:	d04b      	beq.n	8015a2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015992:	f7f0 f8a7 	bl	8005ae4 <HAL_GetTick>
 8015996:	4602      	mov	r2, r0
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	1ad3      	subs	r3, r2, r3
 801599c:	69ba      	ldr	r2, [r7, #24]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d302      	bcc.n	80159a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80159a2:	69bb      	ldr	r3, [r7, #24]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d101      	bne.n	80159ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80159a8:	2303      	movs	r3, #3
 80159aa:	e04e      	b.n	8015a4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	f003 0304 	and.w	r3, r3, #4
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d037      	beq.n	8015a2a <UART_WaitOnFlagUntilTimeout+0xb2>
 80159ba:	68bb      	ldr	r3, [r7, #8]
 80159bc:	2b80      	cmp	r3, #128	; 0x80
 80159be:	d034      	beq.n	8015a2a <UART_WaitOnFlagUntilTimeout+0xb2>
 80159c0:	68bb      	ldr	r3, [r7, #8]
 80159c2:	2b40      	cmp	r3, #64	; 0x40
 80159c4:	d031      	beq.n	8015a2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	69db      	ldr	r3, [r3, #28]
 80159cc:	f003 0308 	and.w	r3, r3, #8
 80159d0:	2b08      	cmp	r3, #8
 80159d2:	d110      	bne.n	80159f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	2208      	movs	r2, #8
 80159da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80159dc:	68f8      	ldr	r0, [r7, #12]
 80159de:	f000 f95b 	bl	8015c98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2208      	movs	r2, #8
 80159e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	2200      	movs	r2, #0
 80159ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80159f2:	2301      	movs	r3, #1
 80159f4:	e029      	b.n	8015a4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	69db      	ldr	r3, [r3, #28]
 80159fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015a04:	d111      	bne.n	8015a2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015a10:	68f8      	ldr	r0, [r7, #12]
 8015a12:	f000 f941 	bl	8015c98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	2220      	movs	r2, #32
 8015a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	2200      	movs	r2, #0
 8015a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015a26:	2303      	movs	r3, #3
 8015a28:	e00f      	b.n	8015a4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	69da      	ldr	r2, [r3, #28]
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	4013      	ands	r3, r2
 8015a34:	68ba      	ldr	r2, [r7, #8]
 8015a36:	429a      	cmp	r2, r3
 8015a38:	bf0c      	ite	eq
 8015a3a:	2301      	moveq	r3, #1
 8015a3c:	2300      	movne	r3, #0
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	461a      	mov	r2, r3
 8015a42:	79fb      	ldrb	r3, [r7, #7]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d0a0      	beq.n	801598a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015a48:	2300      	movs	r3, #0
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3710      	adds	r7, #16
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
	...

08015a54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015a54:	b480      	push	{r7}
 8015a56:	b0a3      	sub	sp, #140	; 0x8c
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	60f8      	str	r0, [r7, #12]
 8015a5c:	60b9      	str	r1, [r7, #8]
 8015a5e:	4613      	mov	r3, r2
 8015a60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	88fa      	ldrh	r2, [r7, #6]
 8015a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	88fa      	ldrh	r2, [r7, #6]
 8015a74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	689b      	ldr	r3, [r3, #8]
 8015a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a86:	d10e      	bne.n	8015aa6 <UART_Start_Receive_IT+0x52>
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	691b      	ldr	r3, [r3, #16]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d105      	bne.n	8015a9c <UART_Start_Receive_IT+0x48>
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015a96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a9a:	e02d      	b.n	8015af8 <UART_Start_Receive_IT+0xa4>
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	22ff      	movs	r2, #255	; 0xff
 8015aa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015aa4:	e028      	b.n	8015af8 <UART_Start_Receive_IT+0xa4>
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	689b      	ldr	r3, [r3, #8]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d10d      	bne.n	8015aca <UART_Start_Receive_IT+0x76>
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	691b      	ldr	r3, [r3, #16]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d104      	bne.n	8015ac0 <UART_Start_Receive_IT+0x6c>
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	22ff      	movs	r2, #255	; 0xff
 8015aba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015abe:	e01b      	b.n	8015af8 <UART_Start_Receive_IT+0xa4>
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	227f      	movs	r2, #127	; 0x7f
 8015ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015ac8:	e016      	b.n	8015af8 <UART_Start_Receive_IT+0xa4>
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	689b      	ldr	r3, [r3, #8]
 8015ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015ad2:	d10d      	bne.n	8015af0 <UART_Start_Receive_IT+0x9c>
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	691b      	ldr	r3, [r3, #16]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d104      	bne.n	8015ae6 <UART_Start_Receive_IT+0x92>
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	227f      	movs	r2, #127	; 0x7f
 8015ae0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015ae4:	e008      	b.n	8015af8 <UART_Start_Receive_IT+0xa4>
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	223f      	movs	r2, #63	; 0x3f
 8015aea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015aee:	e003      	b.n	8015af8 <UART_Start_Receive_IT+0xa4>
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	2200      	movs	r2, #0
 8015af4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	2200      	movs	r2, #0
 8015afc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	2222      	movs	r2, #34	; 0x22
 8015b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	3308      	adds	r3, #8
 8015b0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015b12:	e853 3f00 	ldrex	r3, [r3]
 8015b16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b1a:	f043 0301 	orr.w	r3, r3, #1
 8015b1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	3308      	adds	r3, #8
 8015b28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015b2c:	673a      	str	r2, [r7, #112]	; 0x70
 8015b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015b32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015b34:	e841 2300 	strex	r3, r2, [r1]
 8015b38:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d1e3      	bne.n	8015b08 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015b48:	d14f      	bne.n	8015bea <UART_Start_Receive_IT+0x196>
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015b50:	88fa      	ldrh	r2, [r7, #6]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d349      	bcc.n	8015bea <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	689b      	ldr	r3, [r3, #8]
 8015b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b5e:	d107      	bne.n	8015b70 <UART_Start_Receive_IT+0x11c>
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	691b      	ldr	r3, [r3, #16]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d103      	bne.n	8015b70 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	4a47      	ldr	r2, [pc, #284]	; (8015c88 <UART_Start_Receive_IT+0x234>)
 8015b6c:	675a      	str	r2, [r3, #116]	; 0x74
 8015b6e:	e002      	b.n	8015b76 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	4a46      	ldr	r2, [pc, #280]	; (8015c8c <UART_Start_Receive_IT+0x238>)
 8015b74:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	691b      	ldr	r3, [r3, #16]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d01a      	beq.n	8015bb4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b86:	e853 3f00 	ldrex	r3, [r3]
 8015b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	461a      	mov	r2, r3
 8015b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015ba2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ba4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015ba6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015ba8:	e841 2300 	strex	r3, r2, [r1]
 8015bac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d1e4      	bne.n	8015b7e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	3308      	adds	r3, #8
 8015bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bbe:	e853 3f00 	ldrex	r3, [r3]
 8015bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	3308      	adds	r3, #8
 8015bd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015bd4:	64ba      	str	r2, [r7, #72]	; 0x48
 8015bd6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015bdc:	e841 2300 	strex	r3, r2, [r1]
 8015be0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d1e5      	bne.n	8015bb4 <UART_Start_Receive_IT+0x160>
 8015be8:	e046      	b.n	8015c78 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	689b      	ldr	r3, [r3, #8]
 8015bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015bf2:	d107      	bne.n	8015c04 <UART_Start_Receive_IT+0x1b0>
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	691b      	ldr	r3, [r3, #16]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d103      	bne.n	8015c04 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	4a24      	ldr	r2, [pc, #144]	; (8015c90 <UART_Start_Receive_IT+0x23c>)
 8015c00:	675a      	str	r2, [r3, #116]	; 0x74
 8015c02:	e002      	b.n	8015c0a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	4a23      	ldr	r2, [pc, #140]	; (8015c94 <UART_Start_Receive_IT+0x240>)
 8015c08:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	691b      	ldr	r3, [r3, #16]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d019      	beq.n	8015c46 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c1a:	e853 3f00 	ldrex	r3, [r3]
 8015c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c22:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8015c26:	677b      	str	r3, [r7, #116]	; 0x74
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c30:	637b      	str	r3, [r7, #52]	; 0x34
 8015c32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c38:	e841 2300 	strex	r3, r2, [r1]
 8015c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d1e6      	bne.n	8015c12 <UART_Start_Receive_IT+0x1be>
 8015c44:	e018      	b.n	8015c78 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c4c:	697b      	ldr	r3, [r7, #20]
 8015c4e:	e853 3f00 	ldrex	r3, [r3]
 8015c52:	613b      	str	r3, [r7, #16]
   return(result);
 8015c54:	693b      	ldr	r3, [r7, #16]
 8015c56:	f043 0320 	orr.w	r3, r3, #32
 8015c5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	461a      	mov	r2, r3
 8015c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c64:	623b      	str	r3, [r7, #32]
 8015c66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c68:	69f9      	ldr	r1, [r7, #28]
 8015c6a:	6a3a      	ldr	r2, [r7, #32]
 8015c6c:	e841 2300 	strex	r3, r2, [r1]
 8015c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8015c72:	69bb      	ldr	r3, [r7, #24]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d1e6      	bne.n	8015c46 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015c78:	2300      	movs	r3, #0
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	378c      	adds	r7, #140	; 0x8c
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c84:	4770      	bx	lr
 8015c86:	bf00      	nop
 8015c88:	080164b9 	.word	0x080164b9
 8015c8c:	08016159 	.word	0x08016159
 8015c90:	08015fa1 	.word	0x08015fa1
 8015c94:	08015de9 	.word	0x08015de9

08015c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015c98:	b480      	push	{r7}
 8015c9a:	b095      	sub	sp, #84	; 0x54
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ca8:	e853 3f00 	ldrex	r3, [r3]
 8015cac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	461a      	mov	r2, r3
 8015cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8015cc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015cc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015cc6:	e841 2300 	strex	r3, r2, [r1]
 8015cca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d1e6      	bne.n	8015ca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	3308      	adds	r3, #8
 8015cd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cda:	6a3b      	ldr	r3, [r7, #32]
 8015cdc:	e853 3f00 	ldrex	r3, [r3]
 8015ce0:	61fb      	str	r3, [r7, #28]
   return(result);
 8015ce2:	69fa      	ldr	r2, [r7, #28]
 8015ce4:	4b1e      	ldr	r3, [pc, #120]	; (8015d60 <UART_EndRxTransfer+0xc8>)
 8015ce6:	4013      	ands	r3, r2
 8015ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	3308      	adds	r3, #8
 8015cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cfa:	e841 2300 	strex	r3, r2, [r1]
 8015cfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d1e5      	bne.n	8015cd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d0a:	2b01      	cmp	r3, #1
 8015d0c:	d118      	bne.n	8015d40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	e853 3f00 	ldrex	r3, [r3]
 8015d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	f023 0310 	bic.w	r3, r3, #16
 8015d22:	647b      	str	r3, [r7, #68]	; 0x44
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	461a      	mov	r2, r3
 8015d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d2c:	61bb      	str	r3, [r7, #24]
 8015d2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d30:	6979      	ldr	r1, [r7, #20]
 8015d32:	69ba      	ldr	r2, [r7, #24]
 8015d34:	e841 2300 	strex	r3, r2, [r1]
 8015d38:	613b      	str	r3, [r7, #16]
   return(result);
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d1e6      	bne.n	8015d0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2220      	movs	r2, #32
 8015d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	2200      	movs	r2, #0
 8015d52:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015d54:	bf00      	nop
 8015d56:	3754      	adds	r7, #84	; 0x54
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5e:	4770      	bx	lr
 8015d60:	effffffe 	.word	0xeffffffe

08015d64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b084      	sub	sp, #16
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	2200      	movs	r2, #0
 8015d76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015d82:	68f8      	ldr	r0, [r7, #12]
 8015d84:	f7fe ff2e 	bl	8014be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015d88:	bf00      	nop
 8015d8a:	3710      	adds	r7, #16
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b088      	sub	sp, #32
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	e853 3f00 	ldrex	r3, [r3]
 8015da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8015da6:	68bb      	ldr	r3, [r7, #8]
 8015da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015dac:	61fb      	str	r3, [r7, #28]
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	461a      	mov	r2, r3
 8015db4:	69fb      	ldr	r3, [r7, #28]
 8015db6:	61bb      	str	r3, [r7, #24]
 8015db8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dba:	6979      	ldr	r1, [r7, #20]
 8015dbc:	69ba      	ldr	r2, [r7, #24]
 8015dbe:	e841 2300 	strex	r3, r2, [r1]
 8015dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d1e6      	bne.n	8015d98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	2220      	movs	r2, #32
 8015dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015dd8:	6878      	ldr	r0, [r7, #4]
 8015dda:	f7fe fef9 	bl	8014bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015dde:	bf00      	nop
 8015de0:	3720      	adds	r7, #32
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
	...

08015de8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b09c      	sub	sp, #112	; 0x70
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015df6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015e00:	2b22      	cmp	r3, #34	; 0x22
 8015e02:	f040 80be 	bne.w	8015f82 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015e10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015e14:	b2d9      	uxtb	r1, r3
 8015e16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015e1a:	b2da      	uxtb	r2, r3
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e20:	400a      	ands	r2, r1
 8015e22:	b2d2      	uxtb	r2, r2
 8015e24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e2a:	1c5a      	adds	r2, r3, #1
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015e36:	b29b      	uxth	r3, r3
 8015e38:	3b01      	subs	r3, #1
 8015e3a:	b29a      	uxth	r2, r3
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015e48:	b29b      	uxth	r3, r3
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	f040 80a1 	bne.w	8015f92 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e58:	e853 3f00 	ldrex	r3, [r3]
 8015e5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015e64:	66bb      	str	r3, [r7, #104]	; 0x68
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015e70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015e76:	e841 2300 	strex	r3, r2, [r1]
 8015e7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d1e6      	bne.n	8015e50 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	3308      	adds	r3, #8
 8015e88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e8c:	e853 3f00 	ldrex	r3, [r3]
 8015e90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e94:	f023 0301 	bic.w	r3, r3, #1
 8015e98:	667b      	str	r3, [r7, #100]	; 0x64
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	3308      	adds	r3, #8
 8015ea0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015ea2:	647a      	str	r2, [r7, #68]	; 0x44
 8015ea4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015eaa:	e841 2300 	strex	r3, r2, [r1]
 8015eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d1e5      	bne.n	8015e82 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2220      	movs	r2, #32
 8015eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	4a33      	ldr	r2, [pc, #204]	; (8015f9c <UART_RxISR_8BIT+0x1b4>)
 8015ed0:	4293      	cmp	r3, r2
 8015ed2:	d01f      	beq.n	8015f14 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	685b      	ldr	r3, [r3, #4]
 8015eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d018      	beq.n	8015f14 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eea:	e853 3f00 	ldrex	r3, [r3]
 8015eee:	623b      	str	r3, [r7, #32]
   return(result);
 8015ef0:	6a3b      	ldr	r3, [r7, #32]
 8015ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	461a      	mov	r2, r3
 8015efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f00:	633b      	str	r3, [r7, #48]	; 0x30
 8015f02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f08:	e841 2300 	strex	r3, r2, [r1]
 8015f0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d1e6      	bne.n	8015ee2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	d12e      	bne.n	8015f7a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f28:	693b      	ldr	r3, [r7, #16]
 8015f2a:	e853 3f00 	ldrex	r3, [r3]
 8015f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	f023 0310 	bic.w	r3, r3, #16
 8015f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	461a      	mov	r2, r3
 8015f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f40:	61fb      	str	r3, [r7, #28]
 8015f42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f44:	69b9      	ldr	r1, [r7, #24]
 8015f46:	69fa      	ldr	r2, [r7, #28]
 8015f48:	e841 2300 	strex	r3, r2, [r1]
 8015f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8015f4e:	697b      	ldr	r3, [r7, #20]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d1e6      	bne.n	8015f22 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	69db      	ldr	r3, [r3, #28]
 8015f5a:	f003 0310 	and.w	r3, r3, #16
 8015f5e:	2b10      	cmp	r3, #16
 8015f60:	d103      	bne.n	8015f6a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	2210      	movs	r2, #16
 8015f68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015f70:	4619      	mov	r1, r3
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f7fe fe40 	bl	8014bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015f78:	e00b      	b.n	8015f92 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f7ec fe72 	bl	8002c64 <HAL_UART_RxCpltCallback>
}
 8015f80:	e007      	b.n	8015f92 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	699a      	ldr	r2, [r3, #24]
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	f042 0208 	orr.w	r2, r2, #8
 8015f90:	619a      	str	r2, [r3, #24]
}
 8015f92:	bf00      	nop
 8015f94:	3770      	adds	r7, #112	; 0x70
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd80      	pop	{r7, pc}
 8015f9a:	bf00      	nop
 8015f9c:	58000c00 	.word	0x58000c00

08015fa0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b09c      	sub	sp, #112	; 0x70
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015fae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015fb8:	2b22      	cmp	r3, #34	; 0x22
 8015fba:	f040 80be 	bne.w	801613a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fc4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015fcc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8015fce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015fd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015fd6:	4013      	ands	r3, r2
 8015fd8:	b29a      	uxth	r2, r3
 8015fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015fdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015fe2:	1c9a      	adds	r2, r3, #2
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	3b01      	subs	r3, #1
 8015ff2:	b29a      	uxth	r2, r3
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016000:	b29b      	uxth	r3, r3
 8016002:	2b00      	cmp	r3, #0
 8016004:	f040 80a1 	bne.w	801614a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801600e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016010:	e853 3f00 	ldrex	r3, [r3]
 8016014:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801601c:	667b      	str	r3, [r7, #100]	; 0x64
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	461a      	mov	r2, r3
 8016024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016026:	657b      	str	r3, [r7, #84]	; 0x54
 8016028:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801602a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801602c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801602e:	e841 2300 	strex	r3, r2, [r1]
 8016032:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016036:	2b00      	cmp	r3, #0
 8016038:	d1e6      	bne.n	8016008 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	3308      	adds	r3, #8
 8016040:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016044:	e853 3f00 	ldrex	r3, [r3]
 8016048:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801604c:	f023 0301 	bic.w	r3, r3, #1
 8016050:	663b      	str	r3, [r7, #96]	; 0x60
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	3308      	adds	r3, #8
 8016058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801605a:	643a      	str	r2, [r7, #64]	; 0x40
 801605c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801605e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016062:	e841 2300 	strex	r3, r2, [r1]
 8016066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801606a:	2b00      	cmp	r3, #0
 801606c:	d1e5      	bne.n	801603a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	2220      	movs	r2, #32
 8016072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	2200      	movs	r2, #0
 801607a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	2200      	movs	r2, #0
 8016080:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	4a33      	ldr	r2, [pc, #204]	; (8016154 <UART_RxISR_16BIT+0x1b4>)
 8016088:	4293      	cmp	r3, r2
 801608a:	d01f      	beq.n	80160cc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	685b      	ldr	r3, [r3, #4]
 8016092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016096:	2b00      	cmp	r3, #0
 8016098:	d018      	beq.n	80160cc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160a0:	6a3b      	ldr	r3, [r7, #32]
 80160a2:	e853 3f00 	ldrex	r3, [r3]
 80160a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80160a8:	69fb      	ldr	r3, [r7, #28]
 80160aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80160ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	461a      	mov	r2, r3
 80160b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80160ba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80160be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160c0:	e841 2300 	strex	r3, r2, [r1]
 80160c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80160c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d1e6      	bne.n	801609a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160d0:	2b01      	cmp	r3, #1
 80160d2:	d12e      	bne.n	8016132 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	2200      	movs	r2, #0
 80160d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	e853 3f00 	ldrex	r3, [r3]
 80160e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80160e8:	68bb      	ldr	r3, [r7, #8]
 80160ea:	f023 0310 	bic.w	r3, r3, #16
 80160ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	461a      	mov	r2, r3
 80160f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80160f8:	61bb      	str	r3, [r7, #24]
 80160fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160fc:	6979      	ldr	r1, [r7, #20]
 80160fe:	69ba      	ldr	r2, [r7, #24]
 8016100:	e841 2300 	strex	r3, r2, [r1]
 8016104:	613b      	str	r3, [r7, #16]
   return(result);
 8016106:	693b      	ldr	r3, [r7, #16]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d1e6      	bne.n	80160da <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	69db      	ldr	r3, [r3, #28]
 8016112:	f003 0310 	and.w	r3, r3, #16
 8016116:	2b10      	cmp	r3, #16
 8016118:	d103      	bne.n	8016122 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	2210      	movs	r2, #16
 8016120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016128:	4619      	mov	r1, r3
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	f7fe fd64 	bl	8014bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016130:	e00b      	b.n	801614a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f7ec fd96 	bl	8002c64 <HAL_UART_RxCpltCallback>
}
 8016138:	e007      	b.n	801614a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	699a      	ldr	r2, [r3, #24]
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	f042 0208 	orr.w	r2, r2, #8
 8016148:	619a      	str	r2, [r3, #24]
}
 801614a:	bf00      	nop
 801614c:	3770      	adds	r7, #112	; 0x70
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}
 8016152:	bf00      	nop
 8016154:	58000c00 	.word	0x58000c00

08016158 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b0ac      	sub	sp, #176	; 0xb0
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016166:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	69db      	ldr	r3, [r3, #28]
 8016170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	689b      	ldr	r3, [r3, #8]
 8016184:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801618e:	2b22      	cmp	r3, #34	; 0x22
 8016190:	f040 8180 	bne.w	8016494 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801619a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801619e:	e123      	b.n	80163e8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161a6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80161aa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80161ae:	b2d9      	uxtb	r1, r3
 80161b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80161b4:	b2da      	uxtb	r2, r3
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161ba:	400a      	ands	r2, r1
 80161bc:	b2d2      	uxtb	r2, r2
 80161be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161c4:	1c5a      	adds	r2, r3, #1
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	3b01      	subs	r3, #1
 80161d4:	b29a      	uxth	r2, r3
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	69db      	ldr	r3, [r3, #28]
 80161e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80161e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161ea:	f003 0307 	and.w	r3, r3, #7
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d053      	beq.n	801629a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80161f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161f6:	f003 0301 	and.w	r3, r3, #1
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d011      	beq.n	8016222 <UART_RxISR_8BIT_FIFOEN+0xca>
 80161fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016206:	2b00      	cmp	r3, #0
 8016208:	d00b      	beq.n	8016222 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	2201      	movs	r2, #1
 8016210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016218:	f043 0201 	orr.w	r2, r3, #1
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016226:	f003 0302 	and.w	r3, r3, #2
 801622a:	2b00      	cmp	r3, #0
 801622c:	d011      	beq.n	8016252 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801622e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016232:	f003 0301 	and.w	r3, r3, #1
 8016236:	2b00      	cmp	r3, #0
 8016238:	d00b      	beq.n	8016252 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	2202      	movs	r2, #2
 8016240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016248:	f043 0204 	orr.w	r2, r3, #4
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016256:	f003 0304 	and.w	r3, r3, #4
 801625a:	2b00      	cmp	r3, #0
 801625c:	d011      	beq.n	8016282 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801625e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016262:	f003 0301 	and.w	r3, r3, #1
 8016266:	2b00      	cmp	r3, #0
 8016268:	d00b      	beq.n	8016282 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	2204      	movs	r2, #4
 8016270:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016278:	f043 0202 	orr.w	r2, r3, #2
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016288:	2b00      	cmp	r3, #0
 801628a:	d006      	beq.n	801629a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f7fe fca9 	bl	8014be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2200      	movs	r2, #0
 8016296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162a0:	b29b      	uxth	r3, r3
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	f040 80a0 	bne.w	80163e8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80162b0:	e853 3f00 	ldrex	r3, [r3]
 80162b4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80162b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80162b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80162bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	461a      	mov	r2, r3
 80162c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80162ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80162cc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80162d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80162d2:	e841 2300 	strex	r3, r2, [r1]
 80162d6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80162d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d1e4      	bne.n	80162a8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	3308      	adds	r3, #8
 80162e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80162e8:	e853 3f00 	ldrex	r3, [r3]
 80162ec:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80162ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80162f0:	4b6e      	ldr	r3, [pc, #440]	; (80164ac <UART_RxISR_8BIT_FIFOEN+0x354>)
 80162f2:	4013      	ands	r3, r2
 80162f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	3308      	adds	r3, #8
 80162fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016302:	66ba      	str	r2, [r7, #104]	; 0x68
 8016304:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016306:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016308:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801630a:	e841 2300 	strex	r3, r2, [r1]
 801630e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016312:	2b00      	cmp	r3, #0
 8016314:	d1e3      	bne.n	80162de <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	2220      	movs	r2, #32
 801631a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	2200      	movs	r2, #0
 8016322:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2200      	movs	r2, #0
 8016328:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	4a60      	ldr	r2, [pc, #384]	; (80164b0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8016330:	4293      	cmp	r3, r2
 8016332:	d021      	beq.n	8016378 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801633e:	2b00      	cmp	r3, #0
 8016340:	d01a      	beq.n	8016378 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801634a:	e853 3f00 	ldrex	r3, [r3]
 801634e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	461a      	mov	r2, r3
 8016360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016364:	657b      	str	r3, [r7, #84]	; 0x54
 8016366:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016368:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801636a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801636c:	e841 2300 	strex	r3, r2, [r1]
 8016370:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016374:	2b00      	cmp	r3, #0
 8016376:	d1e4      	bne.n	8016342 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801637c:	2b01      	cmp	r3, #1
 801637e:	d130      	bne.n	80163e2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2200      	movs	r2, #0
 8016384:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801638e:	e853 3f00 	ldrex	r3, [r3]
 8016392:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016396:	f023 0310 	bic.w	r3, r3, #16
 801639a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	461a      	mov	r2, r3
 80163a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80163a8:	643b      	str	r3, [r7, #64]	; 0x40
 80163aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80163ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80163b0:	e841 2300 	strex	r3, r2, [r1]
 80163b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80163b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d1e4      	bne.n	8016386 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	69db      	ldr	r3, [r3, #28]
 80163c2:	f003 0310 	and.w	r3, r3, #16
 80163c6:	2b10      	cmp	r3, #16
 80163c8:	d103      	bne.n	80163d2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	2210      	movs	r2, #16
 80163d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80163d8:	4619      	mov	r1, r3
 80163da:	6878      	ldr	r0, [r7, #4]
 80163dc:	f7fe fc0c 	bl	8014bf8 <HAL_UARTEx_RxEventCallback>
 80163e0:	e002      	b.n	80163e8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f7ec fc3e 	bl	8002c64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80163e8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d006      	beq.n	80163fe <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80163f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80163f4:	f003 0320 	and.w	r3, r3, #32
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	f47f aed1 	bne.w	80161a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016404:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016408:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801640c:	2b00      	cmp	r3, #0
 801640e:	d049      	beq.n	80164a4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016416:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801641a:	429a      	cmp	r2, r3
 801641c:	d242      	bcs.n	80164a4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	3308      	adds	r3, #8
 8016424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016426:	6a3b      	ldr	r3, [r7, #32]
 8016428:	e853 3f00 	ldrex	r3, [r3]
 801642c:	61fb      	str	r3, [r7, #28]
   return(result);
 801642e:	69fb      	ldr	r3, [r7, #28]
 8016430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	3308      	adds	r3, #8
 801643e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801644a:	e841 2300 	strex	r3, r2, [r1]
 801644e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016452:	2b00      	cmp	r3, #0
 8016454:	d1e3      	bne.n	801641e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	4a16      	ldr	r2, [pc, #88]	; (80164b4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801645a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	e853 3f00 	ldrex	r3, [r3]
 8016468:	60bb      	str	r3, [r7, #8]
   return(result);
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	f043 0320 	orr.w	r3, r3, #32
 8016470:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	461a      	mov	r2, r3
 801647a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801647e:	61bb      	str	r3, [r7, #24]
 8016480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016482:	6979      	ldr	r1, [r7, #20]
 8016484:	69ba      	ldr	r2, [r7, #24]
 8016486:	e841 2300 	strex	r3, r2, [r1]
 801648a:	613b      	str	r3, [r7, #16]
   return(result);
 801648c:	693b      	ldr	r3, [r7, #16]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d1e4      	bne.n	801645c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016492:	e007      	b.n	80164a4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	699a      	ldr	r2, [r3, #24]
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	f042 0208 	orr.w	r2, r2, #8
 80164a2:	619a      	str	r2, [r3, #24]
}
 80164a4:	bf00      	nop
 80164a6:	37b0      	adds	r7, #176	; 0xb0
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}
 80164ac:	effffffe 	.word	0xeffffffe
 80164b0:	58000c00 	.word	0x58000c00
 80164b4:	08015de9 	.word	0x08015de9

080164b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b0ae      	sub	sp, #184	; 0xb8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164c6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	69db      	ldr	r3, [r3, #28]
 80164d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	689b      	ldr	r3, [r3, #8]
 80164e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80164ee:	2b22      	cmp	r3, #34	; 0x22
 80164f0:	f040 8184 	bne.w	80167fc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80164fa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80164fe:	e127      	b.n	8016750 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016506:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801650e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8016512:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8016516:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801651a:	4013      	ands	r3, r2
 801651c:	b29a      	uxth	r2, r3
 801651e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016522:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016528:	1c9a      	adds	r2, r3, #2
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016534:	b29b      	uxth	r3, r3
 8016536:	3b01      	subs	r3, #1
 8016538:	b29a      	uxth	r2, r3
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	69db      	ldr	r3, [r3, #28]
 8016546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801654a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801654e:	f003 0307 	and.w	r3, r3, #7
 8016552:	2b00      	cmp	r3, #0
 8016554:	d053      	beq.n	80165fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016556:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801655a:	f003 0301 	and.w	r3, r3, #1
 801655e:	2b00      	cmp	r3, #0
 8016560:	d011      	beq.n	8016586 <UART_RxISR_16BIT_FIFOEN+0xce>
 8016562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801656a:	2b00      	cmp	r3, #0
 801656c:	d00b      	beq.n	8016586 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	2201      	movs	r2, #1
 8016574:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801657c:	f043 0201 	orr.w	r2, r3, #1
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801658a:	f003 0302 	and.w	r3, r3, #2
 801658e:	2b00      	cmp	r3, #0
 8016590:	d011      	beq.n	80165b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016596:	f003 0301 	and.w	r3, r3, #1
 801659a:	2b00      	cmp	r3, #0
 801659c:	d00b      	beq.n	80165b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	2202      	movs	r2, #2
 80165a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165ac:	f043 0204 	orr.w	r2, r3, #4
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80165b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80165ba:	f003 0304 	and.w	r3, r3, #4
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d011      	beq.n	80165e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80165c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80165c6:	f003 0301 	and.w	r3, r3, #1
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d00b      	beq.n	80165e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	2204      	movs	r2, #4
 80165d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165dc:	f043 0202 	orr.w	r2, r3, #2
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d006      	beq.n	80165fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80165f0:	6878      	ldr	r0, [r7, #4]
 80165f2:	f7fe faf7 	bl	8014be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	2200      	movs	r2, #0
 80165fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016604:	b29b      	uxth	r3, r3
 8016606:	2b00      	cmp	r3, #0
 8016608:	f040 80a2 	bne.w	8016750 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016614:	e853 3f00 	ldrex	r3, [r3]
 8016618:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801661a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801661c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	461a      	mov	r2, r3
 801662a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801662e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016632:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016634:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016636:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801663a:	e841 2300 	strex	r3, r2, [r1]
 801663e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016642:	2b00      	cmp	r3, #0
 8016644:	d1e2      	bne.n	801660c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	3308      	adds	r3, #8
 801664c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801664e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016650:	e853 3f00 	ldrex	r3, [r3]
 8016654:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016656:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016658:	4b6e      	ldr	r3, [pc, #440]	; (8016814 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801665a:	4013      	ands	r3, r2
 801665c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	3308      	adds	r3, #8
 8016666:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801666a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801666c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801666e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016670:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016672:	e841 2300 	strex	r3, r2, [r1]
 8016676:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801667a:	2b00      	cmp	r3, #0
 801667c:	d1e3      	bne.n	8016646 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2220      	movs	r2, #32
 8016682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	2200      	movs	r2, #0
 801668a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2200      	movs	r2, #0
 8016690:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	4a60      	ldr	r2, [pc, #384]	; (8016818 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016698:	4293      	cmp	r3, r2
 801669a:	d021      	beq.n	80166e0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	685b      	ldr	r3, [r3, #4]
 80166a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d01a      	beq.n	80166e0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166b2:	e853 3f00 	ldrex	r3, [r3]
 80166b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80166b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80166be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	461a      	mov	r2, r3
 80166c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80166cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80166ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80166d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80166d4:	e841 2300 	strex	r3, r2, [r1]
 80166d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80166da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d1e4      	bne.n	80166aa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166e4:	2b01      	cmp	r3, #1
 80166e6:	d130      	bne.n	801674a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2200      	movs	r2, #0
 80166ec:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166f6:	e853 3f00 	ldrex	r3, [r3]
 80166fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80166fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166fe:	f023 0310 	bic.w	r3, r3, #16
 8016702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	461a      	mov	r2, r3
 801670c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016710:	647b      	str	r3, [r7, #68]	; 0x44
 8016712:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016714:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016718:	e841 2300 	strex	r3, r2, [r1]
 801671c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801671e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016720:	2b00      	cmp	r3, #0
 8016722:	d1e4      	bne.n	80166ee <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	69db      	ldr	r3, [r3, #28]
 801672a:	f003 0310 	and.w	r3, r3, #16
 801672e:	2b10      	cmp	r3, #16
 8016730:	d103      	bne.n	801673a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	2210      	movs	r2, #16
 8016738:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016740:	4619      	mov	r1, r3
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	f7fe fa58 	bl	8014bf8 <HAL_UARTEx_RxEventCallback>
 8016748:	e002      	b.n	8016750 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f7ec fa8a 	bl	8002c64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016750:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016754:	2b00      	cmp	r3, #0
 8016756:	d006      	beq.n	8016766 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801675c:	f003 0320 	and.w	r3, r3, #32
 8016760:	2b00      	cmp	r3, #0
 8016762:	f47f aecd 	bne.w	8016500 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801676c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016770:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016774:	2b00      	cmp	r3, #0
 8016776:	d049      	beq.n	801680c <UART_RxISR_16BIT_FIFOEN+0x354>
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801677e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8016782:	429a      	cmp	r2, r3
 8016784:	d242      	bcs.n	801680c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	3308      	adds	r3, #8
 801678c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016790:	e853 3f00 	ldrex	r3, [r3]
 8016794:	623b      	str	r3, [r7, #32]
   return(result);
 8016796:	6a3b      	ldr	r3, [r7, #32]
 8016798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801679c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	3308      	adds	r3, #8
 80167a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80167aa:	633a      	str	r2, [r7, #48]	; 0x30
 80167ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167b2:	e841 2300 	strex	r3, r2, [r1]
 80167b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80167b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d1e3      	bne.n	8016786 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	4a16      	ldr	r2, [pc, #88]	; (801681c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80167c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167ca:	693b      	ldr	r3, [r7, #16]
 80167cc:	e853 3f00 	ldrex	r3, [r3]
 80167d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	f043 0320 	orr.w	r3, r3, #32
 80167d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	461a      	mov	r2, r3
 80167e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80167e6:	61fb      	str	r3, [r7, #28]
 80167e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167ea:	69b9      	ldr	r1, [r7, #24]
 80167ec:	69fa      	ldr	r2, [r7, #28]
 80167ee:	e841 2300 	strex	r3, r2, [r1]
 80167f2:	617b      	str	r3, [r7, #20]
   return(result);
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d1e4      	bne.n	80167c4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80167fa:	e007      	b.n	801680c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	699a      	ldr	r2, [r3, #24]
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	f042 0208 	orr.w	r2, r2, #8
 801680a:	619a      	str	r2, [r3, #24]
}
 801680c:	bf00      	nop
 801680e:	37b8      	adds	r7, #184	; 0xb8
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}
 8016814:	effffffe 	.word	0xeffffffe
 8016818:	58000c00 	.word	0x58000c00
 801681c:	08015fa1 	.word	0x08015fa1

08016820 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016820:	b480      	push	{r7}
 8016822:	b083      	sub	sp, #12
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016828:	bf00      	nop
 801682a:	370c      	adds	r7, #12
 801682c:	46bd      	mov	sp, r7
 801682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016832:	4770      	bx	lr

08016834 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016834:	b480      	push	{r7}
 8016836:	b083      	sub	sp, #12
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801683c:	bf00      	nop
 801683e:	370c      	adds	r7, #12
 8016840:	46bd      	mov	sp, r7
 8016842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016846:	4770      	bx	lr

08016848 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016848:	b480      	push	{r7}
 801684a:	b083      	sub	sp, #12
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016850:	bf00      	nop
 8016852:	370c      	adds	r7, #12
 8016854:	46bd      	mov	sp, r7
 8016856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685a:	4770      	bx	lr

0801685c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 801685c:	b480      	push	{r7}
 801685e:	b089      	sub	sp, #36	; 0x24
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801686a:	2b01      	cmp	r3, #1
 801686c:	d101      	bne.n	8016872 <HAL_UARTEx_EnableStopMode+0x16>
 801686e:	2302      	movs	r3, #2
 8016870:	e021      	b.n	80168b6 <HAL_UARTEx_EnableStopMode+0x5a>
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2201      	movs	r2, #1
 8016876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	e853 3f00 	ldrex	r3, [r3]
 8016886:	60bb      	str	r3, [r7, #8]
   return(result);
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	f043 0302 	orr.w	r3, r3, #2
 801688e:	61fb      	str	r3, [r7, #28]
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	461a      	mov	r2, r3
 8016896:	69fb      	ldr	r3, [r7, #28]
 8016898:	61bb      	str	r3, [r7, #24]
 801689a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801689c:	6979      	ldr	r1, [r7, #20]
 801689e:	69ba      	ldr	r2, [r7, #24]
 80168a0:	e841 2300 	strex	r3, r2, [r1]
 80168a4:	613b      	str	r3, [r7, #16]
   return(result);
 80168a6:	693b      	ldr	r3, [r7, #16]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d1e6      	bne.n	801687a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2200      	movs	r2, #0
 80168b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80168b4:	2300      	movs	r3, #0
}
 80168b6:	4618      	mov	r0, r3
 80168b8:	3724      	adds	r7, #36	; 0x24
 80168ba:	46bd      	mov	sp, r7
 80168bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c0:	4770      	bx	lr

080168c2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80168c2:	b580      	push	{r7, lr}
 80168c4:	b084      	sub	sp, #16
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80168d0:	2b01      	cmp	r3, #1
 80168d2:	d101      	bne.n	80168d8 <HAL_UARTEx_EnableFifoMode+0x16>
 80168d4:	2302      	movs	r3, #2
 80168d6:	e02b      	b.n	8016930 <HAL_UARTEx_EnableFifoMode+0x6e>
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2201      	movs	r2, #1
 80168dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2224      	movs	r2, #36	; 0x24
 80168e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	f022 0201 	bic.w	r2, r2, #1
 80168fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016906:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 801690e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	68fa      	ldr	r2, [r7, #12]
 8016916:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016918:	6878      	ldr	r0, [r7, #4]
 801691a:	f000 f8c3 	bl	8016aa4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2220      	movs	r2, #32
 8016922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2200      	movs	r2, #0
 801692a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801692e:	2300      	movs	r3, #0
}
 8016930:	4618      	mov	r0, r3
 8016932:	3710      	adds	r7, #16
 8016934:	46bd      	mov	sp, r7
 8016936:	bd80      	pop	{r7, pc}

08016938 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016938:	b480      	push	{r7}
 801693a:	b085      	sub	sp, #20
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016946:	2b01      	cmp	r3, #1
 8016948:	d101      	bne.n	801694e <HAL_UARTEx_DisableFifoMode+0x16>
 801694a:	2302      	movs	r3, #2
 801694c:	e027      	b.n	801699e <HAL_UARTEx_DisableFifoMode+0x66>
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	2201      	movs	r2, #1
 8016952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2224      	movs	r2, #36	; 0x24
 801695a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	681a      	ldr	r2, [r3, #0]
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	f022 0201 	bic.w	r2, r2, #1
 8016974:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801697c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2200      	movs	r2, #0
 8016982:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	68fa      	ldr	r2, [r7, #12]
 801698a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2220      	movs	r2, #32
 8016990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2200      	movs	r2, #0
 8016998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801699c:	2300      	movs	r3, #0
}
 801699e:	4618      	mov	r0, r3
 80169a0:	3714      	adds	r7, #20
 80169a2:	46bd      	mov	sp, r7
 80169a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a8:	4770      	bx	lr

080169aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80169aa:	b580      	push	{r7, lr}
 80169ac:	b084      	sub	sp, #16
 80169ae:	af00      	add	r7, sp, #0
 80169b0:	6078      	str	r0, [r7, #4]
 80169b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80169ba:	2b01      	cmp	r3, #1
 80169bc:	d101      	bne.n	80169c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80169be:	2302      	movs	r3, #2
 80169c0:	e02d      	b.n	8016a1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2201      	movs	r2, #1
 80169c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2224      	movs	r2, #36	; 0x24
 80169ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	681a      	ldr	r2, [r3, #0]
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	f022 0201 	bic.w	r2, r2, #1
 80169e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	689b      	ldr	r3, [r3, #8]
 80169f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	683a      	ldr	r2, [r7, #0]
 80169fa:	430a      	orrs	r2, r1
 80169fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80169fe:	6878      	ldr	r0, [r7, #4]
 8016a00:	f000 f850 	bl	8016aa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	68fa      	ldr	r2, [r7, #12]
 8016a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2220      	movs	r2, #32
 8016a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	2200      	movs	r2, #0
 8016a18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016a1c:	2300      	movs	r3, #0
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3710      	adds	r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}

08016a26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016a26:	b580      	push	{r7, lr}
 8016a28:	b084      	sub	sp, #16
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	6078      	str	r0, [r7, #4]
 8016a2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016a36:	2b01      	cmp	r3, #1
 8016a38:	d101      	bne.n	8016a3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016a3a:	2302      	movs	r3, #2
 8016a3c:	e02d      	b.n	8016a9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	2201      	movs	r2, #1
 8016a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	2224      	movs	r2, #36	; 0x24
 8016a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	f022 0201 	bic.w	r2, r2, #1
 8016a64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	689b      	ldr	r3, [r3, #8]
 8016a6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	683a      	ldr	r2, [r7, #0]
 8016a76:	430a      	orrs	r2, r1
 8016a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016a7a:	6878      	ldr	r0, [r7, #4]
 8016a7c:	f000 f812 	bl	8016aa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	68fa      	ldr	r2, [r7, #12]
 8016a86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2220      	movs	r2, #32
 8016a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	2200      	movs	r2, #0
 8016a94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016a98:	2300      	movs	r3, #0
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3710      	adds	r7, #16
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
	...

08016aa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016aa4:	b480      	push	{r7}
 8016aa6:	b085      	sub	sp, #20
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d108      	bne.n	8016ac6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2201      	movs	r2, #1
 8016ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2201      	movs	r2, #1
 8016ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016ac4:	e031      	b.n	8016b2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016ac6:	2310      	movs	r3, #16
 8016ac8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016aca:	2310      	movs	r3, #16
 8016acc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	689b      	ldr	r3, [r3, #8]
 8016ad4:	0e5b      	lsrs	r3, r3, #25
 8016ad6:	b2db      	uxtb	r3, r3
 8016ad8:	f003 0307 	and.w	r3, r3, #7
 8016adc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	689b      	ldr	r3, [r3, #8]
 8016ae4:	0f5b      	lsrs	r3, r3, #29
 8016ae6:	b2db      	uxtb	r3, r3
 8016ae8:	f003 0307 	and.w	r3, r3, #7
 8016aec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016aee:	7bbb      	ldrb	r3, [r7, #14]
 8016af0:	7b3a      	ldrb	r2, [r7, #12]
 8016af2:	4911      	ldr	r1, [pc, #68]	; (8016b38 <UARTEx_SetNbDataToProcess+0x94>)
 8016af4:	5c8a      	ldrb	r2, [r1, r2]
 8016af6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016afa:	7b3a      	ldrb	r2, [r7, #12]
 8016afc:	490f      	ldr	r1, [pc, #60]	; (8016b3c <UARTEx_SetNbDataToProcess+0x98>)
 8016afe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016b00:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b04:	b29a      	uxth	r2, r3
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016b0c:	7bfb      	ldrb	r3, [r7, #15]
 8016b0e:	7b7a      	ldrb	r2, [r7, #13]
 8016b10:	4909      	ldr	r1, [pc, #36]	; (8016b38 <UARTEx_SetNbDataToProcess+0x94>)
 8016b12:	5c8a      	ldrb	r2, [r1, r2]
 8016b14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016b18:	7b7a      	ldrb	r2, [r7, #13]
 8016b1a:	4908      	ldr	r1, [pc, #32]	; (8016b3c <UARTEx_SetNbDataToProcess+0x98>)
 8016b1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016b1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b22:	b29a      	uxth	r2, r3
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016b2a:	bf00      	nop
 8016b2c:	3714      	adds	r7, #20
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b34:	4770      	bx	lr
 8016b36:	bf00      	nop
 8016b38:	0801ae44 	.word	0x0801ae44
 8016b3c:	0801ae4c 	.word	0x0801ae4c

08016b40 <__NVIC_SetPriority>:
{
 8016b40:	b480      	push	{r7}
 8016b42:	b083      	sub	sp, #12
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	4603      	mov	r3, r0
 8016b48:	6039      	str	r1, [r7, #0]
 8016b4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	db0a      	blt.n	8016b6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016b54:	683b      	ldr	r3, [r7, #0]
 8016b56:	b2da      	uxtb	r2, r3
 8016b58:	490c      	ldr	r1, [pc, #48]	; (8016b8c <__NVIC_SetPriority+0x4c>)
 8016b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016b5e:	0112      	lsls	r2, r2, #4
 8016b60:	b2d2      	uxtb	r2, r2
 8016b62:	440b      	add	r3, r1
 8016b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016b68:	e00a      	b.n	8016b80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	b2da      	uxtb	r2, r3
 8016b6e:	4908      	ldr	r1, [pc, #32]	; (8016b90 <__NVIC_SetPriority+0x50>)
 8016b70:	88fb      	ldrh	r3, [r7, #6]
 8016b72:	f003 030f 	and.w	r3, r3, #15
 8016b76:	3b04      	subs	r3, #4
 8016b78:	0112      	lsls	r2, r2, #4
 8016b7a:	b2d2      	uxtb	r2, r2
 8016b7c:	440b      	add	r3, r1
 8016b7e:	761a      	strb	r2, [r3, #24]
}
 8016b80:	bf00      	nop
 8016b82:	370c      	adds	r7, #12
 8016b84:	46bd      	mov	sp, r7
 8016b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8a:	4770      	bx	lr
 8016b8c:	e000e100 	.word	0xe000e100
 8016b90:	e000ed00 	.word	0xe000ed00

08016b94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016b94:	b580      	push	{r7, lr}
 8016b96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016b98:	4b05      	ldr	r3, [pc, #20]	; (8016bb0 <SysTick_Handler+0x1c>)
 8016b9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016b9c:	f002 f958 	bl	8018e50 <xTaskGetSchedulerState>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	2b01      	cmp	r3, #1
 8016ba4:	d001      	beq.n	8016baa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016ba6:	f002 ff77 	bl	8019a98 <xPortSysTickHandler>
  }
}
 8016baa:	bf00      	nop
 8016bac:	bd80      	pop	{r7, pc}
 8016bae:	bf00      	nop
 8016bb0:	e000e010 	.word	0xe000e010

08016bb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016bb8:	2100      	movs	r1, #0
 8016bba:	f06f 0004 	mvn.w	r0, #4
 8016bbe:	f7ff ffbf 	bl	8016b40 <__NVIC_SetPriority>
#endif
}
 8016bc2:	bf00      	nop
 8016bc4:	bd80      	pop	{r7, pc}
	...

08016bc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016bc8:	b480      	push	{r7}
 8016bca:	b083      	sub	sp, #12
 8016bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016bce:	f3ef 8305 	mrs	r3, IPSR
 8016bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8016bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d003      	beq.n	8016be2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016bda:	f06f 0305 	mvn.w	r3, #5
 8016bde:	607b      	str	r3, [r7, #4]
 8016be0:	e00c      	b.n	8016bfc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016be2:	4b0a      	ldr	r3, [pc, #40]	; (8016c0c <osKernelInitialize+0x44>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d105      	bne.n	8016bf6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016bea:	4b08      	ldr	r3, [pc, #32]	; (8016c0c <osKernelInitialize+0x44>)
 8016bec:	2201      	movs	r2, #1
 8016bee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	607b      	str	r3, [r7, #4]
 8016bf4:	e002      	b.n	8016bfc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016bfc:	687b      	ldr	r3, [r7, #4]
}
 8016bfe:	4618      	mov	r0, r3
 8016c00:	370c      	adds	r7, #12
 8016c02:	46bd      	mov	sp, r7
 8016c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c08:	4770      	bx	lr
 8016c0a:	bf00      	nop
 8016c0c:	2400201c 	.word	0x2400201c

08016c10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b082      	sub	sp, #8
 8016c14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c16:	f3ef 8305 	mrs	r3, IPSR
 8016c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8016c1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d003      	beq.n	8016c2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8016c22:	f06f 0305 	mvn.w	r3, #5
 8016c26:	607b      	str	r3, [r7, #4]
 8016c28:	e010      	b.n	8016c4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016c2a:	4b0b      	ldr	r3, [pc, #44]	; (8016c58 <osKernelStart+0x48>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	2b01      	cmp	r3, #1
 8016c30:	d109      	bne.n	8016c46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016c32:	f7ff ffbf 	bl	8016bb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016c36:	4b08      	ldr	r3, [pc, #32]	; (8016c58 <osKernelStart+0x48>)
 8016c38:	2202      	movs	r2, #2
 8016c3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016c3c:	f001 fc0c 	bl	8018458 <vTaskStartScheduler>
      stat = osOK;
 8016c40:	2300      	movs	r3, #0
 8016c42:	607b      	str	r3, [r7, #4]
 8016c44:	e002      	b.n	8016c4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016c4c:	687b      	ldr	r3, [r7, #4]
}
 8016c4e:	4618      	mov	r0, r3
 8016c50:	3708      	adds	r7, #8
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}
 8016c56:	bf00      	nop
 8016c58:	2400201c 	.word	0x2400201c

08016c5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b08e      	sub	sp, #56	; 0x38
 8016c60:	af04      	add	r7, sp, #16
 8016c62:	60f8      	str	r0, [r7, #12]
 8016c64:	60b9      	str	r1, [r7, #8]
 8016c66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016c68:	2300      	movs	r3, #0
 8016c6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c6c:	f3ef 8305 	mrs	r3, IPSR
 8016c70:	617b      	str	r3, [r7, #20]
  return(result);
 8016c72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d17e      	bne.n	8016d76 <osThreadNew+0x11a>
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d07b      	beq.n	8016d76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016c7e:	2380      	movs	r3, #128	; 0x80
 8016c80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016c82:	2318      	movs	r3, #24
 8016c84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016c86:	2300      	movs	r3, #0
 8016c88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d045      	beq.n	8016d22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d002      	beq.n	8016ca4 <osThreadNew+0x48>
        name = attr->name;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	699b      	ldr	r3, [r3, #24]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d002      	beq.n	8016cb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	699b      	ldr	r3, [r3, #24]
 8016cb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016cb2:	69fb      	ldr	r3, [r7, #28]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d008      	beq.n	8016cca <osThreadNew+0x6e>
 8016cb8:	69fb      	ldr	r3, [r7, #28]
 8016cba:	2b38      	cmp	r3, #56	; 0x38
 8016cbc:	d805      	bhi.n	8016cca <osThreadNew+0x6e>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	f003 0301 	and.w	r3, r3, #1
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d001      	beq.n	8016cce <osThreadNew+0x72>
        return (NULL);
 8016cca:	2300      	movs	r3, #0
 8016ccc:	e054      	b.n	8016d78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	695b      	ldr	r3, [r3, #20]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d003      	beq.n	8016cde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	695b      	ldr	r3, [r3, #20]
 8016cda:	089b      	lsrs	r3, r3, #2
 8016cdc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	689b      	ldr	r3, [r3, #8]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d00e      	beq.n	8016d04 <osThreadNew+0xa8>
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	68db      	ldr	r3, [r3, #12]
 8016cea:	2b5b      	cmp	r3, #91	; 0x5b
 8016cec:	d90a      	bls.n	8016d04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d006      	beq.n	8016d04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	695b      	ldr	r3, [r3, #20]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d002      	beq.n	8016d04 <osThreadNew+0xa8>
        mem = 1;
 8016cfe:	2301      	movs	r3, #1
 8016d00:	61bb      	str	r3, [r7, #24]
 8016d02:	e010      	b.n	8016d26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	689b      	ldr	r3, [r3, #8]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d10c      	bne.n	8016d26 <osThreadNew+0xca>
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d108      	bne.n	8016d26 <osThreadNew+0xca>
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	691b      	ldr	r3, [r3, #16]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d104      	bne.n	8016d26 <osThreadNew+0xca>
          mem = 0;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	61bb      	str	r3, [r7, #24]
 8016d20:	e001      	b.n	8016d26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016d22:	2300      	movs	r3, #0
 8016d24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016d26:	69bb      	ldr	r3, [r7, #24]
 8016d28:	2b01      	cmp	r3, #1
 8016d2a:	d110      	bne.n	8016d4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016d30:	687a      	ldr	r2, [r7, #4]
 8016d32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016d34:	9202      	str	r2, [sp, #8]
 8016d36:	9301      	str	r3, [sp, #4]
 8016d38:	69fb      	ldr	r3, [r7, #28]
 8016d3a:	9300      	str	r3, [sp, #0]
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	6a3a      	ldr	r2, [r7, #32]
 8016d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d42:	68f8      	ldr	r0, [r7, #12]
 8016d44:	f001 f9b2 	bl	80180ac <xTaskCreateStatic>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	613b      	str	r3, [r7, #16]
 8016d4c:	e013      	b.n	8016d76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016d4e:	69bb      	ldr	r3, [r7, #24]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d110      	bne.n	8016d76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016d54:	6a3b      	ldr	r3, [r7, #32]
 8016d56:	b29a      	uxth	r2, r3
 8016d58:	f107 0310 	add.w	r3, r7, #16
 8016d5c:	9301      	str	r3, [sp, #4]
 8016d5e:	69fb      	ldr	r3, [r7, #28]
 8016d60:	9300      	str	r3, [sp, #0]
 8016d62:	68bb      	ldr	r3, [r7, #8]
 8016d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d66:	68f8      	ldr	r0, [r7, #12]
 8016d68:	f001 f9fd 	bl	8018166 <xTaskCreate>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	2b01      	cmp	r3, #1
 8016d70:	d001      	beq.n	8016d76 <osThreadNew+0x11a>
            hTask = NULL;
 8016d72:	2300      	movs	r3, #0
 8016d74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016d76:	693b      	ldr	r3, [r7, #16]
}
 8016d78:	4618      	mov	r0, r3
 8016d7a:	3728      	adds	r7, #40	; 0x28
 8016d7c:	46bd      	mov	sp, r7
 8016d7e:	bd80      	pop	{r7, pc}

08016d80 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016d80:	b480      	push	{r7}
 8016d82:	b083      	sub	sp, #12
 8016d84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d86:	f3ef 8305 	mrs	r3, IPSR
 8016d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8016d8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d003      	beq.n	8016d9a <osThreadYield+0x1a>
    stat = osErrorISR;
 8016d92:	f06f 0305 	mvn.w	r3, #5
 8016d96:	607b      	str	r3, [r7, #4]
 8016d98:	e009      	b.n	8016dae <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016d9e:	4b07      	ldr	r3, [pc, #28]	; (8016dbc <osThreadYield+0x3c>)
 8016da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016da4:	601a      	str	r2, [r3, #0]
 8016da6:	f3bf 8f4f 	dsb	sy
 8016daa:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016dae:	687b      	ldr	r3, [r7, #4]
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	370c      	adds	r7, #12
 8016db4:	46bd      	mov	sp, r7
 8016db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dba:	4770      	bx	lr
 8016dbc:	e000ed04 	.word	0xe000ed04

08016dc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016dc8:	f3ef 8305 	mrs	r3, IPSR
 8016dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8016dce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d003      	beq.n	8016ddc <osDelay+0x1c>
    stat = osErrorISR;
 8016dd4:	f06f 0305 	mvn.w	r3, #5
 8016dd8:	60fb      	str	r3, [r7, #12]
 8016dda:	e007      	b.n	8016dec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d002      	beq.n	8016dec <osDelay+0x2c>
      vTaskDelay(ticks);
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f001 fb02 	bl	80183f0 <vTaskDelay>
    }
  }

  return (stat);
 8016dec:	68fb      	ldr	r3, [r7, #12]
}
 8016dee:	4618      	mov	r0, r3
 8016df0:	3710      	adds	r7, #16
 8016df2:	46bd      	mov	sp, r7
 8016df4:	bd80      	pop	{r7, pc}

08016df6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016df6:	b580      	push	{r7, lr}
 8016df8:	b086      	sub	sp, #24
 8016dfa:	af00      	add	r7, sp, #0
 8016dfc:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016dfe:	2300      	movs	r3, #0
 8016e00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e02:	f3ef 8305 	mrs	r3, IPSR
 8016e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e08:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d12d      	bne.n	8016e6a <osEventFlagsNew+0x74>
    mem = -1;
 8016e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e12:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d015      	beq.n	8016e46 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	689b      	ldr	r3, [r3, #8]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d006      	beq.n	8016e30 <osEventFlagsNew+0x3a>
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	68db      	ldr	r3, [r3, #12]
 8016e26:	2b1f      	cmp	r3, #31
 8016e28:	d902      	bls.n	8016e30 <osEventFlagsNew+0x3a>
        mem = 1;
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	613b      	str	r3, [r7, #16]
 8016e2e:	e00c      	b.n	8016e4a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	689b      	ldr	r3, [r3, #8]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d108      	bne.n	8016e4a <osEventFlagsNew+0x54>
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	68db      	ldr	r3, [r3, #12]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d104      	bne.n	8016e4a <osEventFlagsNew+0x54>
          mem = 0;
 8016e40:	2300      	movs	r3, #0
 8016e42:	613b      	str	r3, [r7, #16]
 8016e44:	e001      	b.n	8016e4a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016e46:	2300      	movs	r3, #0
 8016e48:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	2b01      	cmp	r3, #1
 8016e4e:	d106      	bne.n	8016e5e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	689b      	ldr	r3, [r3, #8]
 8016e54:	4618      	mov	r0, r3
 8016e56:	f000 f91d 	bl	8017094 <xEventGroupCreateStatic>
 8016e5a:	6178      	str	r0, [r7, #20]
 8016e5c:	e005      	b.n	8016e6a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016e5e:	693b      	ldr	r3, [r7, #16]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d102      	bne.n	8016e6a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016e64:	f000 f94d 	bl	8017102 <xEventGroupCreate>
 8016e68:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016e6a:	697b      	ldr	r3, [r7, #20]
}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	3718      	adds	r7, #24
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}

08016e74 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b086      	sub	sp, #24
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016e82:	693b      	ldr	r3, [r7, #16]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d004      	beq.n	8016e92 <osEventFlagsSet+0x1e>
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d003      	beq.n	8016e9a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016e92:	f06f 0303 	mvn.w	r3, #3
 8016e96:	617b      	str	r3, [r7, #20]
 8016e98:	e028      	b.n	8016eec <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e9a:	f3ef 8305 	mrs	r3, IPSR
 8016e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ea0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d01d      	beq.n	8016ee2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8016eaa:	f107 0308 	add.w	r3, r7, #8
 8016eae:	461a      	mov	r2, r3
 8016eb0:	6839      	ldr	r1, [r7, #0]
 8016eb2:	6938      	ldr	r0, [r7, #16]
 8016eb4:	f000 fb46 	bl	8017544 <xEventGroupSetBitsFromISR>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d103      	bne.n	8016ec6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016ebe:	f06f 0302 	mvn.w	r3, #2
 8016ec2:	617b      	str	r3, [r7, #20]
 8016ec4:	e012      	b.n	8016eec <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016ec6:	683b      	ldr	r3, [r7, #0]
 8016ec8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d00d      	beq.n	8016eec <osEventFlagsSet+0x78>
 8016ed0:	4b09      	ldr	r3, [pc, #36]	; (8016ef8 <osEventFlagsSet+0x84>)
 8016ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ed6:	601a      	str	r2, [r3, #0]
 8016ed8:	f3bf 8f4f 	dsb	sy
 8016edc:	f3bf 8f6f 	isb	sy
 8016ee0:	e004      	b.n	8016eec <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016ee2:	6839      	ldr	r1, [r7, #0]
 8016ee4:	6938      	ldr	r0, [r7, #16]
 8016ee6:	f000 fa65 	bl	80173b4 <xEventGroupSetBits>
 8016eea:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016eec:	697b      	ldr	r3, [r7, #20]
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	3718      	adds	r7, #24
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}
 8016ef6:	bf00      	nop
 8016ef8:	e000ed04 	.word	0xe000ed04

08016efc <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b086      	sub	sp, #24
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d004      	beq.n	8016f1a <osEventFlagsClear+0x1e>
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d003      	beq.n	8016f22 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016f1a:	f06f 0303 	mvn.w	r3, #3
 8016f1e:	617b      	str	r3, [r7, #20]
 8016f20:	e019      	b.n	8016f56 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f22:	f3ef 8305 	mrs	r3, IPSR
 8016f26:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f28:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d00e      	beq.n	8016f4c <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016f2e:	6938      	ldr	r0, [r7, #16]
 8016f30:	f000 fa1c 	bl	801736c <xEventGroupGetBitsFromISR>
 8016f34:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016f36:	6839      	ldr	r1, [r7, #0]
 8016f38:	6938      	ldr	r0, [r7, #16]
 8016f3a:	f000 fa03 	bl	8017344 <xEventGroupClearBitsFromISR>
 8016f3e:	4603      	mov	r3, r0
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d108      	bne.n	8016f56 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016f44:	f06f 0302 	mvn.w	r3, #2
 8016f48:	617b      	str	r3, [r7, #20]
 8016f4a:	e004      	b.n	8016f56 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016f4c:	6839      	ldr	r1, [r7, #0]
 8016f4e:	6938      	ldr	r0, [r7, #16]
 8016f50:	f000 f9c0 	bl	80172d4 <xEventGroupClearBits>
 8016f54:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016f56:	697b      	ldr	r3, [r7, #20]
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3718      	adds	r7, #24
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}

08016f60 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b08c      	sub	sp, #48	; 0x30
 8016f64:	af02      	add	r7, sp, #8
 8016f66:	60f8      	str	r0, [r7, #12]
 8016f68:	60b9      	str	r1, [r7, #8]
 8016f6a:	607a      	str	r2, [r7, #4]
 8016f6c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016f72:	69bb      	ldr	r3, [r7, #24]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d004      	beq.n	8016f82 <osEventFlagsWait+0x22>
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d003      	beq.n	8016f8a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016f82:	f06f 0303 	mvn.w	r3, #3
 8016f86:	61fb      	str	r3, [r7, #28]
 8016f88:	e04b      	b.n	8017022 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f8a:	f3ef 8305 	mrs	r3, IPSR
 8016f8e:	617b      	str	r3, [r7, #20]
  return(result);
 8016f90:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d003      	beq.n	8016f9e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8016f96:	f06f 0305 	mvn.w	r3, #5
 8016f9a:	61fb      	str	r3, [r7, #28]
 8016f9c:	e041      	b.n	8017022 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	f003 0301 	and.w	r3, r3, #1
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d002      	beq.n	8016fae <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016fa8:	2301      	movs	r3, #1
 8016faa:	627b      	str	r3, [r7, #36]	; 0x24
 8016fac:	e001      	b.n	8016fb2 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	f003 0302 	and.w	r3, r3, #2
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d002      	beq.n	8016fc2 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	623b      	str	r3, [r7, #32]
 8016fc0:	e001      	b.n	8016fc6 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016fc2:	2301      	movs	r3, #1
 8016fc4:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	9300      	str	r3, [sp, #0]
 8016fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fcc:	6a3a      	ldr	r2, [r7, #32]
 8016fce:	68b9      	ldr	r1, [r7, #8]
 8016fd0:	69b8      	ldr	r0, [r7, #24]
 8016fd2:	f000 f8b1 	bl	8017138 <xEventGroupWaitBits>
 8016fd6:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	f003 0301 	and.w	r3, r3, #1
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d010      	beq.n	8017004 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016fe2:	68ba      	ldr	r2, [r7, #8]
 8016fe4:	69fb      	ldr	r3, [r7, #28]
 8016fe6:	4013      	ands	r3, r2
 8016fe8:	68ba      	ldr	r2, [r7, #8]
 8016fea:	429a      	cmp	r2, r3
 8016fec:	d019      	beq.n	8017022 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d003      	beq.n	8016ffc <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016ff4:	f06f 0301 	mvn.w	r3, #1
 8016ff8:	61fb      	str	r3, [r7, #28]
 8016ffa:	e012      	b.n	8017022 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016ffc:	f06f 0302 	mvn.w	r3, #2
 8017000:	61fb      	str	r3, [r7, #28]
 8017002:	e00e      	b.n	8017022 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8017004:	68ba      	ldr	r2, [r7, #8]
 8017006:	69fb      	ldr	r3, [r7, #28]
 8017008:	4013      	ands	r3, r2
 801700a:	2b00      	cmp	r3, #0
 801700c:	d109      	bne.n	8017022 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d003      	beq.n	801701c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8017014:	f06f 0301 	mvn.w	r3, #1
 8017018:	61fb      	str	r3, [r7, #28]
 801701a:	e002      	b.n	8017022 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801701c:	f06f 0302 	mvn.w	r3, #2
 8017020:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8017022:	69fb      	ldr	r3, [r7, #28]
}
 8017024:	4618      	mov	r0, r3
 8017026:	3728      	adds	r7, #40	; 0x28
 8017028:	46bd      	mov	sp, r7
 801702a:	bd80      	pop	{r7, pc}

0801702c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801702c:	b480      	push	{r7}
 801702e:	b085      	sub	sp, #20
 8017030:	af00      	add	r7, sp, #0
 8017032:	60f8      	str	r0, [r7, #12]
 8017034:	60b9      	str	r1, [r7, #8]
 8017036:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	4a07      	ldr	r2, [pc, #28]	; (8017058 <vApplicationGetIdleTaskMemory+0x2c>)
 801703c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801703e:	68bb      	ldr	r3, [r7, #8]
 8017040:	4a06      	ldr	r2, [pc, #24]	; (801705c <vApplicationGetIdleTaskMemory+0x30>)
 8017042:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2280      	movs	r2, #128	; 0x80
 8017048:	601a      	str	r2, [r3, #0]
}
 801704a:	bf00      	nop
 801704c:	3714      	adds	r7, #20
 801704e:	46bd      	mov	sp, r7
 8017050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017054:	4770      	bx	lr
 8017056:	bf00      	nop
 8017058:	24002020 	.word	0x24002020
 801705c:	2400207c 	.word	0x2400207c

08017060 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017060:	b480      	push	{r7}
 8017062:	b085      	sub	sp, #20
 8017064:	af00      	add	r7, sp, #0
 8017066:	60f8      	str	r0, [r7, #12]
 8017068:	60b9      	str	r1, [r7, #8]
 801706a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	4a07      	ldr	r2, [pc, #28]	; (801708c <vApplicationGetTimerTaskMemory+0x2c>)
 8017070:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	4a06      	ldr	r2, [pc, #24]	; (8017090 <vApplicationGetTimerTaskMemory+0x30>)
 8017076:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801707e:	601a      	str	r2, [r3, #0]
}
 8017080:	bf00      	nop
 8017082:	3714      	adds	r7, #20
 8017084:	46bd      	mov	sp, r7
 8017086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708a:	4770      	bx	lr
 801708c:	2400227c 	.word	0x2400227c
 8017090:	240022d8 	.word	0x240022d8

08017094 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8017094:	b580      	push	{r7, lr}
 8017096:	b086      	sub	sp, #24
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d10a      	bne.n	80170b8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80170a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170a6:	f383 8811 	msr	BASEPRI, r3
 80170aa:	f3bf 8f6f 	isb	sy
 80170ae:	f3bf 8f4f 	dsb	sy
 80170b2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80170b4:	bf00      	nop
 80170b6:	e7fe      	b.n	80170b6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80170b8:	2320      	movs	r3, #32
 80170ba:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	2b20      	cmp	r3, #32
 80170c0:	d00a      	beq.n	80170d8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80170c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170c6:	f383 8811 	msr	BASEPRI, r3
 80170ca:	f3bf 8f6f 	isb	sy
 80170ce:	f3bf 8f4f 	dsb	sy
 80170d2:	60fb      	str	r3, [r7, #12]
}
 80170d4:	bf00      	nop
 80170d6:	e7fe      	b.n	80170d6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80170dc:	697b      	ldr	r3, [r7, #20]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d00a      	beq.n	80170f8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80170e2:	697b      	ldr	r3, [r7, #20]
 80170e4:	2200      	movs	r2, #0
 80170e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80170e8:	697b      	ldr	r3, [r7, #20]
 80170ea:	3304      	adds	r3, #4
 80170ec:	4618      	mov	r0, r3
 80170ee:	f000 fa3d 	bl	801756c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80170f2:	697b      	ldr	r3, [r7, #20]
 80170f4:	2201      	movs	r2, #1
 80170f6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80170f8:	697b      	ldr	r3, [r7, #20]
	}
 80170fa:	4618      	mov	r0, r3
 80170fc:	3718      	adds	r7, #24
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}

08017102 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8017102:	b580      	push	{r7, lr}
 8017104:	b082      	sub	sp, #8
 8017106:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017108:	2020      	movs	r0, #32
 801710a:	f002 fd55 	bl	8019bb8 <pvPortMalloc>
 801710e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d00a      	beq.n	801712c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2200      	movs	r2, #0
 801711a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	3304      	adds	r3, #4
 8017120:	4618      	mov	r0, r3
 8017122:	f000 fa23 	bl	801756c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	2200      	movs	r2, #0
 801712a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801712c:	687b      	ldr	r3, [r7, #4]
	}
 801712e:	4618      	mov	r0, r3
 8017130:	3708      	adds	r7, #8
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}
	...

08017138 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b090      	sub	sp, #64	; 0x40
 801713c:	af00      	add	r7, sp, #0
 801713e:	60f8      	str	r0, [r7, #12]
 8017140:	60b9      	str	r1, [r7, #8]
 8017142:	607a      	str	r2, [r7, #4]
 8017144:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801714a:	2300      	movs	r3, #0
 801714c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801714e:	2300      	movs	r3, #0
 8017150:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d10a      	bne.n	801716e <xEventGroupWaitBits+0x36>
	__asm volatile
 8017158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801715c:	f383 8811 	msr	BASEPRI, r3
 8017160:	f3bf 8f6f 	isb	sy
 8017164:	f3bf 8f4f 	dsb	sy
 8017168:	623b      	str	r3, [r7, #32]
}
 801716a:	bf00      	nop
 801716c:	e7fe      	b.n	801716c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801716e:	68bb      	ldr	r3, [r7, #8]
 8017170:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017174:	2b00      	cmp	r3, #0
 8017176:	d00a      	beq.n	801718e <xEventGroupWaitBits+0x56>
	__asm volatile
 8017178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801717c:	f383 8811 	msr	BASEPRI, r3
 8017180:	f3bf 8f6f 	isb	sy
 8017184:	f3bf 8f4f 	dsb	sy
 8017188:	61fb      	str	r3, [r7, #28]
}
 801718a:	bf00      	nop
 801718c:	e7fe      	b.n	801718c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801718e:	68bb      	ldr	r3, [r7, #8]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d10a      	bne.n	80171aa <xEventGroupWaitBits+0x72>
	__asm volatile
 8017194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017198:	f383 8811 	msr	BASEPRI, r3
 801719c:	f3bf 8f6f 	isb	sy
 80171a0:	f3bf 8f4f 	dsb	sy
 80171a4:	61bb      	str	r3, [r7, #24]
}
 80171a6:	bf00      	nop
 80171a8:	e7fe      	b.n	80171a8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80171aa:	f001 fe51 	bl	8018e50 <xTaskGetSchedulerState>
 80171ae:	4603      	mov	r3, r0
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d102      	bne.n	80171ba <xEventGroupWaitBits+0x82>
 80171b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d101      	bne.n	80171be <xEventGroupWaitBits+0x86>
 80171ba:	2301      	movs	r3, #1
 80171bc:	e000      	b.n	80171c0 <xEventGroupWaitBits+0x88>
 80171be:	2300      	movs	r3, #0
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d10a      	bne.n	80171da <xEventGroupWaitBits+0xa2>
	__asm volatile
 80171c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171c8:	f383 8811 	msr	BASEPRI, r3
 80171cc:	f3bf 8f6f 	isb	sy
 80171d0:	f3bf 8f4f 	dsb	sy
 80171d4:	617b      	str	r3, [r7, #20]
}
 80171d6:	bf00      	nop
 80171d8:	e7fe      	b.n	80171d8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80171da:	f001 f9a3 	bl	8018524 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80171de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80171e4:	683a      	ldr	r2, [r7, #0]
 80171e6:	68b9      	ldr	r1, [r7, #8]
 80171e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171ea:	f000 f988 	bl	80174fe <prvTestWaitCondition>
 80171ee:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80171f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d00e      	beq.n	8017214 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80171f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80171fa:	2300      	movs	r3, #0
 80171fc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d028      	beq.n	8017256 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017206:	681a      	ldr	r2, [r3, #0]
 8017208:	68bb      	ldr	r3, [r7, #8]
 801720a:	43db      	mvns	r3, r3
 801720c:	401a      	ands	r2, r3
 801720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017210:	601a      	str	r2, [r3, #0]
 8017212:	e020      	b.n	8017256 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8017214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017216:	2b00      	cmp	r3, #0
 8017218:	d104      	bne.n	8017224 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801721e:	2301      	movs	r3, #1
 8017220:	633b      	str	r3, [r7, #48]	; 0x30
 8017222:	e018      	b.n	8017256 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d003      	beq.n	8017232 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801722c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017230:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d003      	beq.n	8017240 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801723a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801723e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8017240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017242:	1d18      	adds	r0, r3, #4
 8017244:	68ba      	ldr	r2, [r7, #8]
 8017246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017248:	4313      	orrs	r3, r2
 801724a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801724c:	4619      	mov	r1, r3
 801724e:	f001 fb77 	bl	8018940 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8017252:	2300      	movs	r3, #0
 8017254:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8017256:	f001 f973 	bl	8018540 <xTaskResumeAll>
 801725a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801725c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801725e:	2b00      	cmp	r3, #0
 8017260:	d031      	beq.n	80172c6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8017262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017264:	2b00      	cmp	r3, #0
 8017266:	d107      	bne.n	8017278 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8017268:	4b19      	ldr	r3, [pc, #100]	; (80172d0 <xEventGroupWaitBits+0x198>)
 801726a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801726e:	601a      	str	r2, [r3, #0]
 8017270:	f3bf 8f4f 	dsb	sy
 8017274:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8017278:	f001 fe76 	bl	8018f68 <uxTaskResetEventItemValue>
 801727c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801727e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017284:	2b00      	cmp	r3, #0
 8017286:	d11a      	bne.n	80172be <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017288:	f002 fb74 	bl	8019974 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801728c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8017292:	683a      	ldr	r2, [r7, #0]
 8017294:	68b9      	ldr	r1, [r7, #8]
 8017296:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017298:	f000 f931 	bl	80174fe <prvTestWaitCondition>
 801729c:	4603      	mov	r3, r0
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d009      	beq.n	80172b6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d006      	beq.n	80172b6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80172a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172aa:	681a      	ldr	r2, [r3, #0]
 80172ac:	68bb      	ldr	r3, [r7, #8]
 80172ae:	43db      	mvns	r3, r3
 80172b0:	401a      	ands	r2, r3
 80172b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172b4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80172b6:	2301      	movs	r3, #1
 80172b8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80172ba:	f002 fb8b 	bl	80199d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80172be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80172c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80172c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80172c8:	4618      	mov	r0, r3
 80172ca:	3740      	adds	r7, #64	; 0x40
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}
 80172d0:	e000ed04 	.word	0xe000ed04

080172d4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b086      	sub	sp, #24
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
 80172dc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d10a      	bne.n	80172fe <xEventGroupClearBits+0x2a>
	__asm volatile
 80172e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172ec:	f383 8811 	msr	BASEPRI, r3
 80172f0:	f3bf 8f6f 	isb	sy
 80172f4:	f3bf 8f4f 	dsb	sy
 80172f8:	60fb      	str	r3, [r7, #12]
}
 80172fa:	bf00      	nop
 80172fc:	e7fe      	b.n	80172fc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80172fe:	683b      	ldr	r3, [r7, #0]
 8017300:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017304:	2b00      	cmp	r3, #0
 8017306:	d00a      	beq.n	801731e <xEventGroupClearBits+0x4a>
	__asm volatile
 8017308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801730c:	f383 8811 	msr	BASEPRI, r3
 8017310:	f3bf 8f6f 	isb	sy
 8017314:	f3bf 8f4f 	dsb	sy
 8017318:	60bb      	str	r3, [r7, #8]
}
 801731a:	bf00      	nop
 801731c:	e7fe      	b.n	801731c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801731e:	f002 fb29 	bl	8019974 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	681a      	ldr	r2, [r3, #0]
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	43db      	mvns	r3, r3
 8017330:	401a      	ands	r2, r3
 8017332:	697b      	ldr	r3, [r7, #20]
 8017334:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8017336:	f002 fb4d 	bl	80199d4 <vPortExitCritical>

	return uxReturn;
 801733a:	693b      	ldr	r3, [r7, #16]
}
 801733c:	4618      	mov	r0, r3
 801733e:	3718      	adds	r7, #24
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}

08017344 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8017344:	b580      	push	{r7, lr}
 8017346:	b084      	sub	sp, #16
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
 801734c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801734e:	2300      	movs	r3, #0
 8017350:	683a      	ldr	r2, [r7, #0]
 8017352:	6879      	ldr	r1, [r7, #4]
 8017354:	4804      	ldr	r0, [pc, #16]	; (8017368 <xEventGroupClearBitsFromISR+0x24>)
 8017356:	f002 f9c1 	bl	80196dc <xTimerPendFunctionCallFromISR>
 801735a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 801735c:	68fb      	ldr	r3, [r7, #12]
	}
 801735e:	4618      	mov	r0, r3
 8017360:	3710      	adds	r7, #16
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}
 8017366:	bf00      	nop
 8017368:	080174e5 	.word	0x080174e5

0801736c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 801736c:	b480      	push	{r7}
 801736e:	b089      	sub	sp, #36	; 0x24
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017378:	f3ef 8211 	mrs	r2, BASEPRI
 801737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017380:	f383 8811 	msr	BASEPRI, r3
 8017384:	f3bf 8f6f 	isb	sy
 8017388:	f3bf 8f4f 	dsb	sy
 801738c:	60fa      	str	r2, [r7, #12]
 801738e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017390:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017392:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8017394:	69fb      	ldr	r3, [r7, #28]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	617b      	str	r3, [r7, #20]
 801739a:	69bb      	ldr	r3, [r7, #24]
 801739c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801739e:	693b      	ldr	r3, [r7, #16]
 80173a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80173a4:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80173a6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80173a8:	4618      	mov	r0, r3
 80173aa:	3724      	adds	r7, #36	; 0x24
 80173ac:	46bd      	mov	sp, r7
 80173ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b2:	4770      	bx	lr

080173b4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b08e      	sub	sp, #56	; 0x38
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80173be:	2300      	movs	r3, #0
 80173c0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80173c6:	2300      	movs	r3, #0
 80173c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d10a      	bne.n	80173e6 <xEventGroupSetBits+0x32>
	__asm volatile
 80173d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173d4:	f383 8811 	msr	BASEPRI, r3
 80173d8:	f3bf 8f6f 	isb	sy
 80173dc:	f3bf 8f4f 	dsb	sy
 80173e0:	613b      	str	r3, [r7, #16]
}
 80173e2:	bf00      	nop
 80173e4:	e7fe      	b.n	80173e4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80173e6:	683b      	ldr	r3, [r7, #0]
 80173e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d00a      	beq.n	8017406 <xEventGroupSetBits+0x52>
	__asm volatile
 80173f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173f4:	f383 8811 	msr	BASEPRI, r3
 80173f8:	f3bf 8f6f 	isb	sy
 80173fc:	f3bf 8f4f 	dsb	sy
 8017400:	60fb      	str	r3, [r7, #12]
}
 8017402:	bf00      	nop
 8017404:	e7fe      	b.n	8017404 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8017406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017408:	3304      	adds	r3, #4
 801740a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801740e:	3308      	adds	r3, #8
 8017410:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8017412:	f001 f887 	bl	8018524 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8017416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017418:	68db      	ldr	r3, [r3, #12]
 801741a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801741e:	681a      	ldr	r2, [r3, #0]
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	431a      	orrs	r2, r3
 8017424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017426:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017428:	e03c      	b.n	80174a4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801742c:	685b      	ldr	r3, [r3, #4]
 801742e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8017430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8017436:	2300      	movs	r3, #0
 8017438:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801743a:	69bb      	ldr	r3, [r7, #24]
 801743c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017440:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017442:	69bb      	ldr	r3, [r7, #24]
 8017444:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017448:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801744a:	697b      	ldr	r3, [r7, #20]
 801744c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017450:	2b00      	cmp	r3, #0
 8017452:	d108      	bne.n	8017466 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8017454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017456:	681a      	ldr	r2, [r3, #0]
 8017458:	69bb      	ldr	r3, [r7, #24]
 801745a:	4013      	ands	r3, r2
 801745c:	2b00      	cmp	r3, #0
 801745e:	d00b      	beq.n	8017478 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017460:	2301      	movs	r3, #1
 8017462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017464:	e008      	b.n	8017478 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8017466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017468:	681a      	ldr	r2, [r3, #0]
 801746a:	69bb      	ldr	r3, [r7, #24]
 801746c:	4013      	ands	r3, r2
 801746e:	69ba      	ldr	r2, [r7, #24]
 8017470:	429a      	cmp	r2, r3
 8017472:	d101      	bne.n	8017478 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8017474:	2301      	movs	r3, #1
 8017476:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8017478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801747a:	2b00      	cmp	r3, #0
 801747c:	d010      	beq.n	80174a0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801747e:	697b      	ldr	r3, [r7, #20]
 8017480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017484:	2b00      	cmp	r3, #0
 8017486:	d003      	beq.n	8017490 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801748a:	69bb      	ldr	r3, [r7, #24]
 801748c:	4313      	orrs	r3, r2
 801748e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017498:	4619      	mov	r1, r3
 801749a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801749c:	f001 fb1c 	bl	8018ad8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80174a0:	69fb      	ldr	r3, [r7, #28]
 80174a2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80174a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174a6:	6a3b      	ldr	r3, [r7, #32]
 80174a8:	429a      	cmp	r2, r3
 80174aa:	d1be      	bne.n	801742a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80174ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ae:	681a      	ldr	r2, [r3, #0]
 80174b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b2:	43db      	mvns	r3, r3
 80174b4:	401a      	ands	r2, r3
 80174b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80174ba:	f001 f841 	bl	8018540 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80174be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c0:	681b      	ldr	r3, [r3, #0]
}
 80174c2:	4618      	mov	r0, r3
 80174c4:	3738      	adds	r7, #56	; 0x38
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd80      	pop	{r7, pc}

080174ca <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80174ca:	b580      	push	{r7, lr}
 80174cc:	b082      	sub	sp, #8
 80174ce:	af00      	add	r7, sp, #0
 80174d0:	6078      	str	r0, [r7, #4]
 80174d2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80174d4:	6839      	ldr	r1, [r7, #0]
 80174d6:	6878      	ldr	r0, [r7, #4]
 80174d8:	f7ff ff6c 	bl	80173b4 <xEventGroupSetBits>
}
 80174dc:	bf00      	nop
 80174de:	3708      	adds	r7, #8
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bd80      	pop	{r7, pc}

080174e4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b082      	sub	sp, #8
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
 80174ec:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80174ee:	6839      	ldr	r1, [r7, #0]
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f7ff feef 	bl	80172d4 <xEventGroupClearBits>
}
 80174f6:	bf00      	nop
 80174f8:	3708      	adds	r7, #8
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}

080174fe <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80174fe:	b480      	push	{r7}
 8017500:	b087      	sub	sp, #28
 8017502:	af00      	add	r7, sp, #0
 8017504:	60f8      	str	r0, [r7, #12]
 8017506:	60b9      	str	r1, [r7, #8]
 8017508:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801750a:	2300      	movs	r3, #0
 801750c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d107      	bne.n	8017524 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017514:	68fa      	ldr	r2, [r7, #12]
 8017516:	68bb      	ldr	r3, [r7, #8]
 8017518:	4013      	ands	r3, r2
 801751a:	2b00      	cmp	r3, #0
 801751c:	d00a      	beq.n	8017534 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801751e:	2301      	movs	r3, #1
 8017520:	617b      	str	r3, [r7, #20]
 8017522:	e007      	b.n	8017534 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017524:	68fa      	ldr	r2, [r7, #12]
 8017526:	68bb      	ldr	r3, [r7, #8]
 8017528:	4013      	ands	r3, r2
 801752a:	68ba      	ldr	r2, [r7, #8]
 801752c:	429a      	cmp	r2, r3
 801752e:	d101      	bne.n	8017534 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017530:	2301      	movs	r3, #1
 8017532:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017534:	697b      	ldr	r3, [r7, #20]
}
 8017536:	4618      	mov	r0, r3
 8017538:	371c      	adds	r7, #28
 801753a:	46bd      	mov	sp, r7
 801753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017540:	4770      	bx	lr
	...

08017544 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017544:	b580      	push	{r7, lr}
 8017546:	b086      	sub	sp, #24
 8017548:	af00      	add	r7, sp, #0
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	68ba      	ldr	r2, [r7, #8]
 8017554:	68f9      	ldr	r1, [r7, #12]
 8017556:	4804      	ldr	r0, [pc, #16]	; (8017568 <xEventGroupSetBitsFromISR+0x24>)
 8017558:	f002 f8c0 	bl	80196dc <xTimerPendFunctionCallFromISR>
 801755c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801755e:	697b      	ldr	r3, [r7, #20]
	}
 8017560:	4618      	mov	r0, r3
 8017562:	3718      	adds	r7, #24
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}
 8017568:	080174cb 	.word	0x080174cb

0801756c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801756c:	b480      	push	{r7}
 801756e:	b083      	sub	sp, #12
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f103 0208 	add.w	r2, r3, #8
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017584:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	f103 0208 	add.w	r2, r3, #8
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	f103 0208 	add.w	r2, r3, #8
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	2200      	movs	r2, #0
 801759e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80175a0:	bf00      	nop
 80175a2:	370c      	adds	r7, #12
 80175a4:	46bd      	mov	sp, r7
 80175a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175aa:	4770      	bx	lr

080175ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80175ac:	b480      	push	{r7}
 80175ae:	b083      	sub	sp, #12
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2200      	movs	r2, #0
 80175b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80175ba:	bf00      	nop
 80175bc:	370c      	adds	r7, #12
 80175be:	46bd      	mov	sp, r7
 80175c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c4:	4770      	bx	lr

080175c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80175c6:	b480      	push	{r7}
 80175c8:	b085      	sub	sp, #20
 80175ca:	af00      	add	r7, sp, #0
 80175cc:	6078      	str	r0, [r7, #4]
 80175ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	685b      	ldr	r3, [r3, #4]
 80175d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80175d6:	683b      	ldr	r3, [r7, #0]
 80175d8:	68fa      	ldr	r2, [r7, #12]
 80175da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	689a      	ldr	r2, [r3, #8]
 80175e0:	683b      	ldr	r3, [r7, #0]
 80175e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	689b      	ldr	r3, [r3, #8]
 80175e8:	683a      	ldr	r2, [r7, #0]
 80175ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	683a      	ldr	r2, [r7, #0]
 80175f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80175f2:	683b      	ldr	r3, [r7, #0]
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	1c5a      	adds	r2, r3, #1
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	601a      	str	r2, [r3, #0]
}
 8017602:	bf00      	nop
 8017604:	3714      	adds	r7, #20
 8017606:	46bd      	mov	sp, r7
 8017608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760c:	4770      	bx	lr

0801760e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801760e:	b480      	push	{r7}
 8017610:	b085      	sub	sp, #20
 8017612:	af00      	add	r7, sp, #0
 8017614:	6078      	str	r0, [r7, #4]
 8017616:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017618:	683b      	ldr	r3, [r7, #0]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017624:	d103      	bne.n	801762e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	691b      	ldr	r3, [r3, #16]
 801762a:	60fb      	str	r3, [r7, #12]
 801762c:	e00c      	b.n	8017648 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	3308      	adds	r3, #8
 8017632:	60fb      	str	r3, [r7, #12]
 8017634:	e002      	b.n	801763c <vListInsert+0x2e>
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	685b      	ldr	r3, [r3, #4]
 801763a:	60fb      	str	r3, [r7, #12]
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	685b      	ldr	r3, [r3, #4]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	68ba      	ldr	r2, [r7, #8]
 8017644:	429a      	cmp	r2, r3
 8017646:	d2f6      	bcs.n	8017636 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	685a      	ldr	r2, [r3, #4]
 801764c:	683b      	ldr	r3, [r7, #0]
 801764e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017650:	683b      	ldr	r3, [r7, #0]
 8017652:	685b      	ldr	r3, [r3, #4]
 8017654:	683a      	ldr	r2, [r7, #0]
 8017656:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017658:	683b      	ldr	r3, [r7, #0]
 801765a:	68fa      	ldr	r2, [r7, #12]
 801765c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	683a      	ldr	r2, [r7, #0]
 8017662:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	687a      	ldr	r2, [r7, #4]
 8017668:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	1c5a      	adds	r2, r3, #1
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	601a      	str	r2, [r3, #0]
}
 8017674:	bf00      	nop
 8017676:	3714      	adds	r7, #20
 8017678:	46bd      	mov	sp, r7
 801767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767e:	4770      	bx	lr

08017680 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017680:	b480      	push	{r7}
 8017682:	b085      	sub	sp, #20
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	691b      	ldr	r3, [r3, #16]
 801768c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	685b      	ldr	r3, [r3, #4]
 8017692:	687a      	ldr	r2, [r7, #4]
 8017694:	6892      	ldr	r2, [r2, #8]
 8017696:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	689b      	ldr	r3, [r3, #8]
 801769c:	687a      	ldr	r2, [r7, #4]
 801769e:	6852      	ldr	r2, [r2, #4]
 80176a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	685b      	ldr	r3, [r3, #4]
 80176a6:	687a      	ldr	r2, [r7, #4]
 80176a8:	429a      	cmp	r2, r3
 80176aa:	d103      	bne.n	80176b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	689a      	ldr	r2, [r3, #8]
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	2200      	movs	r2, #0
 80176b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	1e5a      	subs	r2, r3, #1
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	681b      	ldr	r3, [r3, #0]
}
 80176c8:	4618      	mov	r0, r3
 80176ca:	3714      	adds	r7, #20
 80176cc:	46bd      	mov	sp, r7
 80176ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d2:	4770      	bx	lr

080176d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b084      	sub	sp, #16
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d10a      	bne.n	80176fe <xQueueGenericReset+0x2a>
	__asm volatile
 80176e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176ec:	f383 8811 	msr	BASEPRI, r3
 80176f0:	f3bf 8f6f 	isb	sy
 80176f4:	f3bf 8f4f 	dsb	sy
 80176f8:	60bb      	str	r3, [r7, #8]
}
 80176fa:	bf00      	nop
 80176fc:	e7fe      	b.n	80176fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80176fe:	f002 f939 	bl	8019974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	681a      	ldr	r2, [r3, #0]
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801770a:	68f9      	ldr	r1, [r7, #12]
 801770c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801770e:	fb01 f303 	mul.w	r3, r1, r3
 8017712:	441a      	add	r2, r3
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	2200      	movs	r2, #0
 801771c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	681a      	ldr	r2, [r3, #0]
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	681a      	ldr	r2, [r3, #0]
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801772e:	3b01      	subs	r3, #1
 8017730:	68f9      	ldr	r1, [r7, #12]
 8017732:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017734:	fb01 f303 	mul.w	r3, r1, r3
 8017738:	441a      	add	r2, r3
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	22ff      	movs	r2, #255	; 0xff
 8017742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	22ff      	movs	r2, #255	; 0xff
 801774a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801774e:	683b      	ldr	r3, [r7, #0]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d114      	bne.n	801777e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	691b      	ldr	r3, [r3, #16]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d01a      	beq.n	8017792 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	3310      	adds	r3, #16
 8017760:	4618      	mov	r0, r3
 8017762:	f001 f955 	bl	8018a10 <xTaskRemoveFromEventList>
 8017766:	4603      	mov	r3, r0
 8017768:	2b00      	cmp	r3, #0
 801776a:	d012      	beq.n	8017792 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801776c:	4b0c      	ldr	r3, [pc, #48]	; (80177a0 <xQueueGenericReset+0xcc>)
 801776e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017772:	601a      	str	r2, [r3, #0]
 8017774:	f3bf 8f4f 	dsb	sy
 8017778:	f3bf 8f6f 	isb	sy
 801777c:	e009      	b.n	8017792 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	3310      	adds	r3, #16
 8017782:	4618      	mov	r0, r3
 8017784:	f7ff fef2 	bl	801756c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	3324      	adds	r3, #36	; 0x24
 801778c:	4618      	mov	r0, r3
 801778e:	f7ff feed 	bl	801756c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017792:	f002 f91f 	bl	80199d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017796:	2301      	movs	r3, #1
}
 8017798:	4618      	mov	r0, r3
 801779a:	3710      	adds	r7, #16
 801779c:	46bd      	mov	sp, r7
 801779e:	bd80      	pop	{r7, pc}
 80177a0:	e000ed04 	.word	0xe000ed04

080177a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b08e      	sub	sp, #56	; 0x38
 80177a8:	af02      	add	r7, sp, #8
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	607a      	str	r2, [r7, #4]
 80177b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d10a      	bne.n	80177ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80177b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177bc:	f383 8811 	msr	BASEPRI, r3
 80177c0:	f3bf 8f6f 	isb	sy
 80177c4:	f3bf 8f4f 	dsb	sy
 80177c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80177ca:	bf00      	nop
 80177cc:	e7fe      	b.n	80177cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d10a      	bne.n	80177ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80177d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177d8:	f383 8811 	msr	BASEPRI, r3
 80177dc:	f3bf 8f6f 	isb	sy
 80177e0:	f3bf 8f4f 	dsb	sy
 80177e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80177e6:	bf00      	nop
 80177e8:	e7fe      	b.n	80177e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d002      	beq.n	80177f6 <xQueueGenericCreateStatic+0x52>
 80177f0:	68bb      	ldr	r3, [r7, #8]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d001      	beq.n	80177fa <xQueueGenericCreateStatic+0x56>
 80177f6:	2301      	movs	r3, #1
 80177f8:	e000      	b.n	80177fc <xQueueGenericCreateStatic+0x58>
 80177fa:	2300      	movs	r3, #0
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d10a      	bne.n	8017816 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017804:	f383 8811 	msr	BASEPRI, r3
 8017808:	f3bf 8f6f 	isb	sy
 801780c:	f3bf 8f4f 	dsb	sy
 8017810:	623b      	str	r3, [r7, #32]
}
 8017812:	bf00      	nop
 8017814:	e7fe      	b.n	8017814 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d102      	bne.n	8017822 <xQueueGenericCreateStatic+0x7e>
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d101      	bne.n	8017826 <xQueueGenericCreateStatic+0x82>
 8017822:	2301      	movs	r3, #1
 8017824:	e000      	b.n	8017828 <xQueueGenericCreateStatic+0x84>
 8017826:	2300      	movs	r3, #0
 8017828:	2b00      	cmp	r3, #0
 801782a:	d10a      	bne.n	8017842 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017830:	f383 8811 	msr	BASEPRI, r3
 8017834:	f3bf 8f6f 	isb	sy
 8017838:	f3bf 8f4f 	dsb	sy
 801783c:	61fb      	str	r3, [r7, #28]
}
 801783e:	bf00      	nop
 8017840:	e7fe      	b.n	8017840 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017842:	2350      	movs	r3, #80	; 0x50
 8017844:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017846:	697b      	ldr	r3, [r7, #20]
 8017848:	2b50      	cmp	r3, #80	; 0x50
 801784a:	d00a      	beq.n	8017862 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017850:	f383 8811 	msr	BASEPRI, r3
 8017854:	f3bf 8f6f 	isb	sy
 8017858:	f3bf 8f4f 	dsb	sy
 801785c:	61bb      	str	r3, [r7, #24]
}
 801785e:	bf00      	nop
 8017860:	e7fe      	b.n	8017860 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017862:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801786a:	2b00      	cmp	r3, #0
 801786c:	d00d      	beq.n	801788a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017870:	2201      	movs	r2, #1
 8017872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017876:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801787c:	9300      	str	r3, [sp, #0]
 801787e:	4613      	mov	r3, r2
 8017880:	687a      	ldr	r2, [r7, #4]
 8017882:	68b9      	ldr	r1, [r7, #8]
 8017884:	68f8      	ldr	r0, [r7, #12]
 8017886:	f000 f805 	bl	8017894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801788c:	4618      	mov	r0, r3
 801788e:	3730      	adds	r7, #48	; 0x30
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}

08017894 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b084      	sub	sp, #16
 8017898:	af00      	add	r7, sp, #0
 801789a:	60f8      	str	r0, [r7, #12]
 801789c:	60b9      	str	r1, [r7, #8]
 801789e:	607a      	str	r2, [r7, #4]
 80178a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d103      	bne.n	80178b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80178a8:	69bb      	ldr	r3, [r7, #24]
 80178aa:	69ba      	ldr	r2, [r7, #24]
 80178ac:	601a      	str	r2, [r3, #0]
 80178ae:	e002      	b.n	80178b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80178b0:	69bb      	ldr	r3, [r7, #24]
 80178b2:	687a      	ldr	r2, [r7, #4]
 80178b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80178b6:	69bb      	ldr	r3, [r7, #24]
 80178b8:	68fa      	ldr	r2, [r7, #12]
 80178ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80178bc:	69bb      	ldr	r3, [r7, #24]
 80178be:	68ba      	ldr	r2, [r7, #8]
 80178c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80178c2:	2101      	movs	r1, #1
 80178c4:	69b8      	ldr	r0, [r7, #24]
 80178c6:	f7ff ff05 	bl	80176d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80178ca:	69bb      	ldr	r3, [r7, #24]
 80178cc:	78fa      	ldrb	r2, [r7, #3]
 80178ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80178d2:	bf00      	nop
 80178d4:	3710      	adds	r7, #16
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bd80      	pop	{r7, pc}
	...

080178dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b08e      	sub	sp, #56	; 0x38
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	60f8      	str	r0, [r7, #12]
 80178e4:	60b9      	str	r1, [r7, #8]
 80178e6:	607a      	str	r2, [r7, #4]
 80178e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80178ea:	2300      	movs	r3, #0
 80178ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80178f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d10a      	bne.n	801790e <xQueueGenericSend+0x32>
	__asm volatile
 80178f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178fc:	f383 8811 	msr	BASEPRI, r3
 8017900:	f3bf 8f6f 	isb	sy
 8017904:	f3bf 8f4f 	dsb	sy
 8017908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801790a:	bf00      	nop
 801790c:	e7fe      	b.n	801790c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801790e:	68bb      	ldr	r3, [r7, #8]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d103      	bne.n	801791c <xQueueGenericSend+0x40>
 8017914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017918:	2b00      	cmp	r3, #0
 801791a:	d101      	bne.n	8017920 <xQueueGenericSend+0x44>
 801791c:	2301      	movs	r3, #1
 801791e:	e000      	b.n	8017922 <xQueueGenericSend+0x46>
 8017920:	2300      	movs	r3, #0
 8017922:	2b00      	cmp	r3, #0
 8017924:	d10a      	bne.n	801793c <xQueueGenericSend+0x60>
	__asm volatile
 8017926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801792a:	f383 8811 	msr	BASEPRI, r3
 801792e:	f3bf 8f6f 	isb	sy
 8017932:	f3bf 8f4f 	dsb	sy
 8017936:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017938:	bf00      	nop
 801793a:	e7fe      	b.n	801793a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	2b02      	cmp	r3, #2
 8017940:	d103      	bne.n	801794a <xQueueGenericSend+0x6e>
 8017942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017946:	2b01      	cmp	r3, #1
 8017948:	d101      	bne.n	801794e <xQueueGenericSend+0x72>
 801794a:	2301      	movs	r3, #1
 801794c:	e000      	b.n	8017950 <xQueueGenericSend+0x74>
 801794e:	2300      	movs	r3, #0
 8017950:	2b00      	cmp	r3, #0
 8017952:	d10a      	bne.n	801796a <xQueueGenericSend+0x8e>
	__asm volatile
 8017954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017958:	f383 8811 	msr	BASEPRI, r3
 801795c:	f3bf 8f6f 	isb	sy
 8017960:	f3bf 8f4f 	dsb	sy
 8017964:	623b      	str	r3, [r7, #32]
}
 8017966:	bf00      	nop
 8017968:	e7fe      	b.n	8017968 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801796a:	f001 fa71 	bl	8018e50 <xTaskGetSchedulerState>
 801796e:	4603      	mov	r3, r0
 8017970:	2b00      	cmp	r3, #0
 8017972:	d102      	bne.n	801797a <xQueueGenericSend+0x9e>
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d101      	bne.n	801797e <xQueueGenericSend+0xa2>
 801797a:	2301      	movs	r3, #1
 801797c:	e000      	b.n	8017980 <xQueueGenericSend+0xa4>
 801797e:	2300      	movs	r3, #0
 8017980:	2b00      	cmp	r3, #0
 8017982:	d10a      	bne.n	801799a <xQueueGenericSend+0xbe>
	__asm volatile
 8017984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017988:	f383 8811 	msr	BASEPRI, r3
 801798c:	f3bf 8f6f 	isb	sy
 8017990:	f3bf 8f4f 	dsb	sy
 8017994:	61fb      	str	r3, [r7, #28]
}
 8017996:	bf00      	nop
 8017998:	e7fe      	b.n	8017998 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801799a:	f001 ffeb 	bl	8019974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80179a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179a6:	429a      	cmp	r2, r3
 80179a8:	d302      	bcc.n	80179b0 <xQueueGenericSend+0xd4>
 80179aa:	683b      	ldr	r3, [r7, #0]
 80179ac:	2b02      	cmp	r3, #2
 80179ae:	d129      	bne.n	8017a04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80179b0:	683a      	ldr	r2, [r7, #0]
 80179b2:	68b9      	ldr	r1, [r7, #8]
 80179b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179b6:	f000 fa0b 	bl	8017dd0 <prvCopyDataToQueue>
 80179ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80179bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d010      	beq.n	80179e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80179c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179c6:	3324      	adds	r3, #36	; 0x24
 80179c8:	4618      	mov	r0, r3
 80179ca:	f001 f821 	bl	8018a10 <xTaskRemoveFromEventList>
 80179ce:	4603      	mov	r3, r0
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d013      	beq.n	80179fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80179d4:	4b3f      	ldr	r3, [pc, #252]	; (8017ad4 <xQueueGenericSend+0x1f8>)
 80179d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179da:	601a      	str	r2, [r3, #0]
 80179dc:	f3bf 8f4f 	dsb	sy
 80179e0:	f3bf 8f6f 	isb	sy
 80179e4:	e00a      	b.n	80179fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80179e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d007      	beq.n	80179fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80179ec:	4b39      	ldr	r3, [pc, #228]	; (8017ad4 <xQueueGenericSend+0x1f8>)
 80179ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179f2:	601a      	str	r2, [r3, #0]
 80179f4:	f3bf 8f4f 	dsb	sy
 80179f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80179fc:	f001 ffea 	bl	80199d4 <vPortExitCritical>
				return pdPASS;
 8017a00:	2301      	movs	r3, #1
 8017a02:	e063      	b.n	8017acc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d103      	bne.n	8017a12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017a0a:	f001 ffe3 	bl	80199d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	e05c      	b.n	8017acc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d106      	bne.n	8017a26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017a18:	f107 0314 	add.w	r3, r7, #20
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f001 f8bd 	bl	8018b9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017a22:	2301      	movs	r3, #1
 8017a24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017a26:	f001 ffd5 	bl	80199d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017a2a:	f000 fd7b 	bl	8018524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017a2e:	f001 ffa1 	bl	8019974 <vPortEnterCritical>
 8017a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017a38:	b25b      	sxtb	r3, r3
 8017a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a3e:	d103      	bne.n	8017a48 <xQueueGenericSend+0x16c>
 8017a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a42:	2200      	movs	r2, #0
 8017a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017a4e:	b25b      	sxtb	r3, r3
 8017a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a54:	d103      	bne.n	8017a5e <xQueueGenericSend+0x182>
 8017a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a58:	2200      	movs	r2, #0
 8017a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017a5e:	f001 ffb9 	bl	80199d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017a62:	1d3a      	adds	r2, r7, #4
 8017a64:	f107 0314 	add.w	r3, r7, #20
 8017a68:	4611      	mov	r1, r2
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f001 f8ac 	bl	8018bc8 <xTaskCheckForTimeOut>
 8017a70:	4603      	mov	r3, r0
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d124      	bne.n	8017ac0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a78:	f000 faa2 	bl	8017fc0 <prvIsQueueFull>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d018      	beq.n	8017ab4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a84:	3310      	adds	r3, #16
 8017a86:	687a      	ldr	r2, [r7, #4]
 8017a88:	4611      	mov	r1, r2
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	f000 ff34 	bl	80188f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a92:	f000 fa2d 	bl	8017ef0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017a96:	f000 fd53 	bl	8018540 <xTaskResumeAll>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	f47f af7c 	bne.w	801799a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017aa2:	4b0c      	ldr	r3, [pc, #48]	; (8017ad4 <xQueueGenericSend+0x1f8>)
 8017aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017aa8:	601a      	str	r2, [r3, #0]
 8017aaa:	f3bf 8f4f 	dsb	sy
 8017aae:	f3bf 8f6f 	isb	sy
 8017ab2:	e772      	b.n	801799a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ab6:	f000 fa1b 	bl	8017ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017aba:	f000 fd41 	bl	8018540 <xTaskResumeAll>
 8017abe:	e76c      	b.n	801799a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ac2:	f000 fa15 	bl	8017ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017ac6:	f000 fd3b 	bl	8018540 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017aca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017acc:	4618      	mov	r0, r3
 8017ace:	3738      	adds	r7, #56	; 0x38
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	bd80      	pop	{r7, pc}
 8017ad4:	e000ed04 	.word	0xe000ed04

08017ad8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b090      	sub	sp, #64	; 0x40
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	60f8      	str	r0, [r7, #12]
 8017ae0:	60b9      	str	r1, [r7, #8]
 8017ae2:	607a      	str	r2, [r7, #4]
 8017ae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d10a      	bne.n	8017b06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017af4:	f383 8811 	msr	BASEPRI, r3
 8017af8:	f3bf 8f6f 	isb	sy
 8017afc:	f3bf 8f4f 	dsb	sy
 8017b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017b02:	bf00      	nop
 8017b04:	e7fe      	b.n	8017b04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017b06:	68bb      	ldr	r3, [r7, #8]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d103      	bne.n	8017b14 <xQueueGenericSendFromISR+0x3c>
 8017b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d101      	bne.n	8017b18 <xQueueGenericSendFromISR+0x40>
 8017b14:	2301      	movs	r3, #1
 8017b16:	e000      	b.n	8017b1a <xQueueGenericSendFromISR+0x42>
 8017b18:	2300      	movs	r3, #0
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d10a      	bne.n	8017b34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b22:	f383 8811 	msr	BASEPRI, r3
 8017b26:	f3bf 8f6f 	isb	sy
 8017b2a:	f3bf 8f4f 	dsb	sy
 8017b2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017b30:	bf00      	nop
 8017b32:	e7fe      	b.n	8017b32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017b34:	683b      	ldr	r3, [r7, #0]
 8017b36:	2b02      	cmp	r3, #2
 8017b38:	d103      	bne.n	8017b42 <xQueueGenericSendFromISR+0x6a>
 8017b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b3e:	2b01      	cmp	r3, #1
 8017b40:	d101      	bne.n	8017b46 <xQueueGenericSendFromISR+0x6e>
 8017b42:	2301      	movs	r3, #1
 8017b44:	e000      	b.n	8017b48 <xQueueGenericSendFromISR+0x70>
 8017b46:	2300      	movs	r3, #0
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d10a      	bne.n	8017b62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b50:	f383 8811 	msr	BASEPRI, r3
 8017b54:	f3bf 8f6f 	isb	sy
 8017b58:	f3bf 8f4f 	dsb	sy
 8017b5c:	623b      	str	r3, [r7, #32]
}
 8017b5e:	bf00      	nop
 8017b60:	e7fe      	b.n	8017b60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017b62:	f001 ffe9 	bl	8019b38 <vPortValidateInterruptPriority>
	__asm volatile
 8017b66:	f3ef 8211 	mrs	r2, BASEPRI
 8017b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b6e:	f383 8811 	msr	BASEPRI, r3
 8017b72:	f3bf 8f6f 	isb	sy
 8017b76:	f3bf 8f4f 	dsb	sy
 8017b7a:	61fa      	str	r2, [r7, #28]
 8017b7c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017b7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017b80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b8a:	429a      	cmp	r2, r3
 8017b8c:	d302      	bcc.n	8017b94 <xQueueGenericSendFromISR+0xbc>
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	2b02      	cmp	r3, #2
 8017b92:	d12f      	bne.n	8017bf4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017ba4:	683a      	ldr	r2, [r7, #0]
 8017ba6:	68b9      	ldr	r1, [r7, #8]
 8017ba8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017baa:	f000 f911 	bl	8017dd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017bae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017bb6:	d112      	bne.n	8017bde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d016      	beq.n	8017bee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bc2:	3324      	adds	r3, #36	; 0x24
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	f000 ff23 	bl	8018a10 <xTaskRemoveFromEventList>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d00e      	beq.n	8017bee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d00b      	beq.n	8017bee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	2201      	movs	r2, #1
 8017bda:	601a      	str	r2, [r3, #0]
 8017bdc:	e007      	b.n	8017bee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017bde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017be2:	3301      	adds	r3, #1
 8017be4:	b2db      	uxtb	r3, r3
 8017be6:	b25a      	sxtb	r2, r3
 8017be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017bee:	2301      	movs	r3, #1
 8017bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017bf2:	e001      	b.n	8017bf8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bfa:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017bfc:	697b      	ldr	r3, [r7, #20]
 8017bfe:	f383 8811 	msr	BASEPRI, r3
}
 8017c02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	3740      	adds	r7, #64	; 0x40
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}
	...

08017c10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b08c      	sub	sp, #48	; 0x30
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	60f8      	str	r0, [r7, #12]
 8017c18:	60b9      	str	r1, [r7, #8]
 8017c1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d10a      	bne.n	8017c40 <xQueueReceive+0x30>
	__asm volatile
 8017c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c2e:	f383 8811 	msr	BASEPRI, r3
 8017c32:	f3bf 8f6f 	isb	sy
 8017c36:	f3bf 8f4f 	dsb	sy
 8017c3a:	623b      	str	r3, [r7, #32]
}
 8017c3c:	bf00      	nop
 8017c3e:	e7fe      	b.n	8017c3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017c40:	68bb      	ldr	r3, [r7, #8]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d103      	bne.n	8017c4e <xQueueReceive+0x3e>
 8017c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d101      	bne.n	8017c52 <xQueueReceive+0x42>
 8017c4e:	2301      	movs	r3, #1
 8017c50:	e000      	b.n	8017c54 <xQueueReceive+0x44>
 8017c52:	2300      	movs	r3, #0
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d10a      	bne.n	8017c6e <xQueueReceive+0x5e>
	__asm volatile
 8017c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c5c:	f383 8811 	msr	BASEPRI, r3
 8017c60:	f3bf 8f6f 	isb	sy
 8017c64:	f3bf 8f4f 	dsb	sy
 8017c68:	61fb      	str	r3, [r7, #28]
}
 8017c6a:	bf00      	nop
 8017c6c:	e7fe      	b.n	8017c6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017c6e:	f001 f8ef 	bl	8018e50 <xTaskGetSchedulerState>
 8017c72:	4603      	mov	r3, r0
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d102      	bne.n	8017c7e <xQueueReceive+0x6e>
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d101      	bne.n	8017c82 <xQueueReceive+0x72>
 8017c7e:	2301      	movs	r3, #1
 8017c80:	e000      	b.n	8017c84 <xQueueReceive+0x74>
 8017c82:	2300      	movs	r3, #0
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d10a      	bne.n	8017c9e <xQueueReceive+0x8e>
	__asm volatile
 8017c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c8c:	f383 8811 	msr	BASEPRI, r3
 8017c90:	f3bf 8f6f 	isb	sy
 8017c94:	f3bf 8f4f 	dsb	sy
 8017c98:	61bb      	str	r3, [r7, #24]
}
 8017c9a:	bf00      	nop
 8017c9c:	e7fe      	b.n	8017c9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017c9e:	f001 fe69 	bl	8019974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ca6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d01f      	beq.n	8017cee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017cae:	68b9      	ldr	r1, [r7, #8]
 8017cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cb2:	f000 f8f7 	bl	8017ea4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb8:	1e5a      	subs	r2, r3, #1
 8017cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cc0:	691b      	ldr	r3, [r3, #16]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d00f      	beq.n	8017ce6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cc8:	3310      	adds	r3, #16
 8017cca:	4618      	mov	r0, r3
 8017ccc:	f000 fea0 	bl	8018a10 <xTaskRemoveFromEventList>
 8017cd0:	4603      	mov	r3, r0
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d007      	beq.n	8017ce6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017cd6:	4b3d      	ldr	r3, [pc, #244]	; (8017dcc <xQueueReceive+0x1bc>)
 8017cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cdc:	601a      	str	r2, [r3, #0]
 8017cde:	f3bf 8f4f 	dsb	sy
 8017ce2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017ce6:	f001 fe75 	bl	80199d4 <vPortExitCritical>
				return pdPASS;
 8017cea:	2301      	movs	r3, #1
 8017cec:	e069      	b.n	8017dc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d103      	bne.n	8017cfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017cf4:	f001 fe6e 	bl	80199d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	e062      	b.n	8017dc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d106      	bne.n	8017d10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017d02:	f107 0310 	add.w	r3, r7, #16
 8017d06:	4618      	mov	r0, r3
 8017d08:	f000 ff48 	bl	8018b9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017d0c:	2301      	movs	r3, #1
 8017d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017d10:	f001 fe60 	bl	80199d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017d14:	f000 fc06 	bl	8018524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017d18:	f001 fe2c 	bl	8019974 <vPortEnterCritical>
 8017d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017d22:	b25b      	sxtb	r3, r3
 8017d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d28:	d103      	bne.n	8017d32 <xQueueReceive+0x122>
 8017d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017d38:	b25b      	sxtb	r3, r3
 8017d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d3e:	d103      	bne.n	8017d48 <xQueueReceive+0x138>
 8017d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d42:	2200      	movs	r2, #0
 8017d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017d48:	f001 fe44 	bl	80199d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017d4c:	1d3a      	adds	r2, r7, #4
 8017d4e:	f107 0310 	add.w	r3, r7, #16
 8017d52:	4611      	mov	r1, r2
 8017d54:	4618      	mov	r0, r3
 8017d56:	f000 ff37 	bl	8018bc8 <xTaskCheckForTimeOut>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d123      	bne.n	8017da8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d62:	f000 f917 	bl	8017f94 <prvIsQueueEmpty>
 8017d66:	4603      	mov	r3, r0
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d017      	beq.n	8017d9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d6e:	3324      	adds	r3, #36	; 0x24
 8017d70:	687a      	ldr	r2, [r7, #4]
 8017d72:	4611      	mov	r1, r2
 8017d74:	4618      	mov	r0, r3
 8017d76:	f000 fdbf 	bl	80188f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d7c:	f000 f8b8 	bl	8017ef0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017d80:	f000 fbde 	bl	8018540 <xTaskResumeAll>
 8017d84:	4603      	mov	r3, r0
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d189      	bne.n	8017c9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017d8a:	4b10      	ldr	r3, [pc, #64]	; (8017dcc <xQueueReceive+0x1bc>)
 8017d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d90:	601a      	str	r2, [r3, #0]
 8017d92:	f3bf 8f4f 	dsb	sy
 8017d96:	f3bf 8f6f 	isb	sy
 8017d9a:	e780      	b.n	8017c9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d9e:	f000 f8a7 	bl	8017ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017da2:	f000 fbcd 	bl	8018540 <xTaskResumeAll>
 8017da6:	e77a      	b.n	8017c9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017daa:	f000 f8a1 	bl	8017ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017dae:	f000 fbc7 	bl	8018540 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017db4:	f000 f8ee 	bl	8017f94 <prvIsQueueEmpty>
 8017db8:	4603      	mov	r3, r0
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	f43f af6f 	beq.w	8017c9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017dc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	3730      	adds	r7, #48	; 0x30
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}
 8017dca:	bf00      	nop
 8017dcc:	e000ed04 	.word	0xe000ed04

08017dd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b086      	sub	sp, #24
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	60f8      	str	r0, [r7, #12]
 8017dd8:	60b9      	str	r1, [r7, #8]
 8017dda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017ddc:	2300      	movs	r3, #0
 8017dde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017de4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d10d      	bne.n	8017e0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d14d      	bne.n	8017e92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	689b      	ldr	r3, [r3, #8]
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f001 f846 	bl	8018e8c <xTaskPriorityDisinherit>
 8017e00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	2200      	movs	r2, #0
 8017e06:	609a      	str	r2, [r3, #8]
 8017e08:	e043      	b.n	8017e92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d119      	bne.n	8017e44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	6858      	ldr	r0, [r3, #4]
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e18:	461a      	mov	r2, r3
 8017e1a:	68b9      	ldr	r1, [r7, #8]
 8017e1c:	f002 f8e0 	bl	8019fe0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	685a      	ldr	r2, [r3, #4]
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e28:	441a      	add	r2, r3
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	685a      	ldr	r2, [r3, #4]
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	689b      	ldr	r3, [r3, #8]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d32b      	bcc.n	8017e92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	681a      	ldr	r2, [r3, #0]
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	605a      	str	r2, [r3, #4]
 8017e42:	e026      	b.n	8017e92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	68d8      	ldr	r0, [r3, #12]
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e4c:	461a      	mov	r2, r3
 8017e4e:	68b9      	ldr	r1, [r7, #8]
 8017e50:	f002 f8c6 	bl	8019fe0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	68da      	ldr	r2, [r3, #12]
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e5c:	425b      	negs	r3, r3
 8017e5e:	441a      	add	r2, r3
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	68da      	ldr	r2, [r3, #12]
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	d207      	bcs.n	8017e80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	689a      	ldr	r2, [r3, #8]
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e78:	425b      	negs	r3, r3
 8017e7a:	441a      	add	r2, r3
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	2b02      	cmp	r3, #2
 8017e84:	d105      	bne.n	8017e92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017e86:	693b      	ldr	r3, [r7, #16]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d002      	beq.n	8017e92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017e8c:	693b      	ldr	r3, [r7, #16]
 8017e8e:	3b01      	subs	r3, #1
 8017e90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017e92:	693b      	ldr	r3, [r7, #16]
 8017e94:	1c5a      	adds	r2, r3, #1
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017e9a:	697b      	ldr	r3, [r7, #20]
}
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	3718      	adds	r7, #24
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	bd80      	pop	{r7, pc}

08017ea4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b082      	sub	sp, #8
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]
 8017eac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d018      	beq.n	8017ee8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	68da      	ldr	r2, [r3, #12]
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ebe:	441a      	add	r2, r3
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	68da      	ldr	r2, [r3, #12]
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	689b      	ldr	r3, [r3, #8]
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d303      	bcc.n	8017ed8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	681a      	ldr	r2, [r3, #0]
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	68d9      	ldr	r1, [r3, #12]
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ee0:	461a      	mov	r2, r3
 8017ee2:	6838      	ldr	r0, [r7, #0]
 8017ee4:	f002 f87c 	bl	8019fe0 <memcpy>
	}
}
 8017ee8:	bf00      	nop
 8017eea:	3708      	adds	r7, #8
 8017eec:	46bd      	mov	sp, r7
 8017eee:	bd80      	pop	{r7, pc}

08017ef0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b084      	sub	sp, #16
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017ef8:	f001 fd3c 	bl	8019974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017f02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017f04:	e011      	b.n	8017f2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d012      	beq.n	8017f34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	3324      	adds	r3, #36	; 0x24
 8017f12:	4618      	mov	r0, r3
 8017f14:	f000 fd7c 	bl	8018a10 <xTaskRemoveFromEventList>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d001      	beq.n	8017f22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017f1e:	f000 feb5 	bl	8018c8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017f22:	7bfb      	ldrb	r3, [r7, #15]
 8017f24:	3b01      	subs	r3, #1
 8017f26:	b2db      	uxtb	r3, r3
 8017f28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	dce9      	bgt.n	8017f06 <prvUnlockQueue+0x16>
 8017f32:	e000      	b.n	8017f36 <prvUnlockQueue+0x46>
					break;
 8017f34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	22ff      	movs	r2, #255	; 0xff
 8017f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017f3e:	f001 fd49 	bl	80199d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017f42:	f001 fd17 	bl	8019974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017f4e:	e011      	b.n	8017f74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	691b      	ldr	r3, [r3, #16]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d012      	beq.n	8017f7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	3310      	adds	r3, #16
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f000 fd57 	bl	8018a10 <xTaskRemoveFromEventList>
 8017f62:	4603      	mov	r3, r0
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d001      	beq.n	8017f6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017f68:	f000 fe90 	bl	8018c8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017f6c:	7bbb      	ldrb	r3, [r7, #14]
 8017f6e:	3b01      	subs	r3, #1
 8017f70:	b2db      	uxtb	r3, r3
 8017f72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	dce9      	bgt.n	8017f50 <prvUnlockQueue+0x60>
 8017f7c:	e000      	b.n	8017f80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017f7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	22ff      	movs	r2, #255	; 0xff
 8017f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017f88:	f001 fd24 	bl	80199d4 <vPortExitCritical>
}
 8017f8c:	bf00      	nop
 8017f8e:	3710      	adds	r7, #16
 8017f90:	46bd      	mov	sp, r7
 8017f92:	bd80      	pop	{r7, pc}

08017f94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b084      	sub	sp, #16
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017f9c:	f001 fcea 	bl	8019974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d102      	bne.n	8017fae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017fa8:	2301      	movs	r3, #1
 8017faa:	60fb      	str	r3, [r7, #12]
 8017fac:	e001      	b.n	8017fb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017fae:	2300      	movs	r3, #0
 8017fb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017fb2:	f001 fd0f 	bl	80199d4 <vPortExitCritical>

	return xReturn;
 8017fb6:	68fb      	ldr	r3, [r7, #12]
}
 8017fb8:	4618      	mov	r0, r3
 8017fba:	3710      	adds	r7, #16
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bd80      	pop	{r7, pc}

08017fc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b084      	sub	sp, #16
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017fc8:	f001 fcd4 	bl	8019974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d102      	bne.n	8017fde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017fd8:	2301      	movs	r3, #1
 8017fda:	60fb      	str	r3, [r7, #12]
 8017fdc:	e001      	b.n	8017fe2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017fde:	2300      	movs	r3, #0
 8017fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017fe2:	f001 fcf7 	bl	80199d4 <vPortExitCritical>

	return xReturn;
 8017fe6:	68fb      	ldr	r3, [r7, #12]
}
 8017fe8:	4618      	mov	r0, r3
 8017fea:	3710      	adds	r7, #16
 8017fec:	46bd      	mov	sp, r7
 8017fee:	bd80      	pop	{r7, pc}

08017ff0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017ff0:	b480      	push	{r7}
 8017ff2:	b085      	sub	sp, #20
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
 8017ff8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	60fb      	str	r3, [r7, #12]
 8017ffe:	e014      	b.n	801802a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018000:	4a0f      	ldr	r2, [pc, #60]	; (8018040 <vQueueAddToRegistry+0x50>)
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d10b      	bne.n	8018024 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801800c:	490c      	ldr	r1, [pc, #48]	; (8018040 <vQueueAddToRegistry+0x50>)
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	683a      	ldr	r2, [r7, #0]
 8018012:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018016:	4a0a      	ldr	r2, [pc, #40]	; (8018040 <vQueueAddToRegistry+0x50>)
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	00db      	lsls	r3, r3, #3
 801801c:	4413      	add	r3, r2
 801801e:	687a      	ldr	r2, [r7, #4]
 8018020:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018022:	e006      	b.n	8018032 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	3301      	adds	r3, #1
 8018028:	60fb      	str	r3, [r7, #12]
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	2b07      	cmp	r3, #7
 801802e:	d9e7      	bls.n	8018000 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018030:	bf00      	nop
 8018032:	bf00      	nop
 8018034:	3714      	adds	r7, #20
 8018036:	46bd      	mov	sp, r7
 8018038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803c:	4770      	bx	lr
 801803e:	bf00      	nop
 8018040:	240026d8 	.word	0x240026d8

08018044 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018044:	b580      	push	{r7, lr}
 8018046:	b086      	sub	sp, #24
 8018048:	af00      	add	r7, sp, #0
 801804a:	60f8      	str	r0, [r7, #12]
 801804c:	60b9      	str	r1, [r7, #8]
 801804e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018054:	f001 fc8e 	bl	8019974 <vPortEnterCritical>
 8018058:	697b      	ldr	r3, [r7, #20]
 801805a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801805e:	b25b      	sxtb	r3, r3
 8018060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018064:	d103      	bne.n	801806e <vQueueWaitForMessageRestricted+0x2a>
 8018066:	697b      	ldr	r3, [r7, #20]
 8018068:	2200      	movs	r2, #0
 801806a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801806e:	697b      	ldr	r3, [r7, #20]
 8018070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018074:	b25b      	sxtb	r3, r3
 8018076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801807a:	d103      	bne.n	8018084 <vQueueWaitForMessageRestricted+0x40>
 801807c:	697b      	ldr	r3, [r7, #20]
 801807e:	2200      	movs	r2, #0
 8018080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018084:	f001 fca6 	bl	80199d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801808c:	2b00      	cmp	r3, #0
 801808e:	d106      	bne.n	801809e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018090:	697b      	ldr	r3, [r7, #20]
 8018092:	3324      	adds	r3, #36	; 0x24
 8018094:	687a      	ldr	r2, [r7, #4]
 8018096:	68b9      	ldr	r1, [r7, #8]
 8018098:	4618      	mov	r0, r3
 801809a:	f000 fc8d 	bl	80189b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801809e:	6978      	ldr	r0, [r7, #20]
 80180a0:	f7ff ff26 	bl	8017ef0 <prvUnlockQueue>
	}
 80180a4:	bf00      	nop
 80180a6:	3718      	adds	r7, #24
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bd80      	pop	{r7, pc}

080180ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b08e      	sub	sp, #56	; 0x38
 80180b0:	af04      	add	r7, sp, #16
 80180b2:	60f8      	str	r0, [r7, #12]
 80180b4:	60b9      	str	r1, [r7, #8]
 80180b6:	607a      	str	r2, [r7, #4]
 80180b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80180ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d10a      	bne.n	80180d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80180c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180c4:	f383 8811 	msr	BASEPRI, r3
 80180c8:	f3bf 8f6f 	isb	sy
 80180cc:	f3bf 8f4f 	dsb	sy
 80180d0:	623b      	str	r3, [r7, #32]
}
 80180d2:	bf00      	nop
 80180d4:	e7fe      	b.n	80180d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80180d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d10a      	bne.n	80180f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80180dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180e0:	f383 8811 	msr	BASEPRI, r3
 80180e4:	f3bf 8f6f 	isb	sy
 80180e8:	f3bf 8f4f 	dsb	sy
 80180ec:	61fb      	str	r3, [r7, #28]
}
 80180ee:	bf00      	nop
 80180f0:	e7fe      	b.n	80180f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80180f2:	235c      	movs	r3, #92	; 0x5c
 80180f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80180f6:	693b      	ldr	r3, [r7, #16]
 80180f8:	2b5c      	cmp	r3, #92	; 0x5c
 80180fa:	d00a      	beq.n	8018112 <xTaskCreateStatic+0x66>
	__asm volatile
 80180fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018100:	f383 8811 	msr	BASEPRI, r3
 8018104:	f3bf 8f6f 	isb	sy
 8018108:	f3bf 8f4f 	dsb	sy
 801810c:	61bb      	str	r3, [r7, #24]
}
 801810e:	bf00      	nop
 8018110:	e7fe      	b.n	8018110 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018112:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018116:	2b00      	cmp	r3, #0
 8018118:	d01e      	beq.n	8018158 <xTaskCreateStatic+0xac>
 801811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801811c:	2b00      	cmp	r3, #0
 801811e:	d01b      	beq.n	8018158 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018122:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018128:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801812c:	2202      	movs	r2, #2
 801812e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018132:	2300      	movs	r3, #0
 8018134:	9303      	str	r3, [sp, #12]
 8018136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018138:	9302      	str	r3, [sp, #8]
 801813a:	f107 0314 	add.w	r3, r7, #20
 801813e:	9301      	str	r3, [sp, #4]
 8018140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018142:	9300      	str	r3, [sp, #0]
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	687a      	ldr	r2, [r7, #4]
 8018148:	68b9      	ldr	r1, [r7, #8]
 801814a:	68f8      	ldr	r0, [r7, #12]
 801814c:	f000 f850 	bl	80181f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018152:	f000 f8dd 	bl	8018310 <prvAddNewTaskToReadyList>
 8018156:	e001      	b.n	801815c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018158:	2300      	movs	r3, #0
 801815a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801815c:	697b      	ldr	r3, [r7, #20]
	}
 801815e:	4618      	mov	r0, r3
 8018160:	3728      	adds	r7, #40	; 0x28
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}

08018166 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018166:	b580      	push	{r7, lr}
 8018168:	b08c      	sub	sp, #48	; 0x30
 801816a:	af04      	add	r7, sp, #16
 801816c:	60f8      	str	r0, [r7, #12]
 801816e:	60b9      	str	r1, [r7, #8]
 8018170:	603b      	str	r3, [r7, #0]
 8018172:	4613      	mov	r3, r2
 8018174:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018176:	88fb      	ldrh	r3, [r7, #6]
 8018178:	009b      	lsls	r3, r3, #2
 801817a:	4618      	mov	r0, r3
 801817c:	f001 fd1c 	bl	8019bb8 <pvPortMalloc>
 8018180:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018182:	697b      	ldr	r3, [r7, #20]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d00e      	beq.n	80181a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018188:	205c      	movs	r0, #92	; 0x5c
 801818a:	f001 fd15 	bl	8019bb8 <pvPortMalloc>
 801818e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018190:	69fb      	ldr	r3, [r7, #28]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d003      	beq.n	801819e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018196:	69fb      	ldr	r3, [r7, #28]
 8018198:	697a      	ldr	r2, [r7, #20]
 801819a:	631a      	str	r2, [r3, #48]	; 0x30
 801819c:	e005      	b.n	80181aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801819e:	6978      	ldr	r0, [r7, #20]
 80181a0:	f001 fdd6 	bl	8019d50 <vPortFree>
 80181a4:	e001      	b.n	80181aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80181a6:	2300      	movs	r3, #0
 80181a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80181aa:	69fb      	ldr	r3, [r7, #28]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d017      	beq.n	80181e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80181b0:	69fb      	ldr	r3, [r7, #28]
 80181b2:	2200      	movs	r2, #0
 80181b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80181b8:	88fa      	ldrh	r2, [r7, #6]
 80181ba:	2300      	movs	r3, #0
 80181bc:	9303      	str	r3, [sp, #12]
 80181be:	69fb      	ldr	r3, [r7, #28]
 80181c0:	9302      	str	r3, [sp, #8]
 80181c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c4:	9301      	str	r3, [sp, #4]
 80181c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c8:	9300      	str	r3, [sp, #0]
 80181ca:	683b      	ldr	r3, [r7, #0]
 80181cc:	68b9      	ldr	r1, [r7, #8]
 80181ce:	68f8      	ldr	r0, [r7, #12]
 80181d0:	f000 f80e 	bl	80181f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80181d4:	69f8      	ldr	r0, [r7, #28]
 80181d6:	f000 f89b 	bl	8018310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80181da:	2301      	movs	r3, #1
 80181dc:	61bb      	str	r3, [r7, #24]
 80181de:	e002      	b.n	80181e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80181e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80181e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80181e6:	69bb      	ldr	r3, [r7, #24]
	}
 80181e8:	4618      	mov	r0, r3
 80181ea:	3720      	adds	r7, #32
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b088      	sub	sp, #32
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	60f8      	str	r0, [r7, #12]
 80181f8:	60b9      	str	r1, [r7, #8]
 80181fa:	607a      	str	r2, [r7, #4]
 80181fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80181fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018200:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	009b      	lsls	r3, r3, #2
 8018206:	461a      	mov	r2, r3
 8018208:	21a5      	movs	r1, #165	; 0xa5
 801820a:	f001 fef7 	bl	8019ffc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018212:	6879      	ldr	r1, [r7, #4]
 8018214:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018218:	440b      	add	r3, r1
 801821a:	009b      	lsls	r3, r3, #2
 801821c:	4413      	add	r3, r2
 801821e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018220:	69bb      	ldr	r3, [r7, #24]
 8018222:	f023 0307 	bic.w	r3, r3, #7
 8018226:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018228:	69bb      	ldr	r3, [r7, #24]
 801822a:	f003 0307 	and.w	r3, r3, #7
 801822e:	2b00      	cmp	r3, #0
 8018230:	d00a      	beq.n	8018248 <prvInitialiseNewTask+0x58>
	__asm volatile
 8018232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018236:	f383 8811 	msr	BASEPRI, r3
 801823a:	f3bf 8f6f 	isb	sy
 801823e:	f3bf 8f4f 	dsb	sy
 8018242:	617b      	str	r3, [r7, #20]
}
 8018244:	bf00      	nop
 8018246:	e7fe      	b.n	8018246 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d01f      	beq.n	801828e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801824e:	2300      	movs	r3, #0
 8018250:	61fb      	str	r3, [r7, #28]
 8018252:	e012      	b.n	801827a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018254:	68ba      	ldr	r2, [r7, #8]
 8018256:	69fb      	ldr	r3, [r7, #28]
 8018258:	4413      	add	r3, r2
 801825a:	7819      	ldrb	r1, [r3, #0]
 801825c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801825e:	69fb      	ldr	r3, [r7, #28]
 8018260:	4413      	add	r3, r2
 8018262:	3334      	adds	r3, #52	; 0x34
 8018264:	460a      	mov	r2, r1
 8018266:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018268:	68ba      	ldr	r2, [r7, #8]
 801826a:	69fb      	ldr	r3, [r7, #28]
 801826c:	4413      	add	r3, r2
 801826e:	781b      	ldrb	r3, [r3, #0]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d006      	beq.n	8018282 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018274:	69fb      	ldr	r3, [r7, #28]
 8018276:	3301      	adds	r3, #1
 8018278:	61fb      	str	r3, [r7, #28]
 801827a:	69fb      	ldr	r3, [r7, #28]
 801827c:	2b0f      	cmp	r3, #15
 801827e:	d9e9      	bls.n	8018254 <prvInitialiseNewTask+0x64>
 8018280:	e000      	b.n	8018284 <prvInitialiseNewTask+0x94>
			{
				break;
 8018282:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018286:	2200      	movs	r2, #0
 8018288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801828c:	e003      	b.n	8018296 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018290:	2200      	movs	r2, #0
 8018292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018298:	2b37      	cmp	r3, #55	; 0x37
 801829a:	d901      	bls.n	80182a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801829c:	2337      	movs	r3, #55	; 0x37
 801829e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80182a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80182a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80182a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80182aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80182ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ae:	2200      	movs	r2, #0
 80182b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80182b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182b4:	3304      	adds	r3, #4
 80182b6:	4618      	mov	r0, r3
 80182b8:	f7ff f978 	bl	80175ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80182bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182be:	3318      	adds	r3, #24
 80182c0:	4618      	mov	r0, r3
 80182c2:	f7ff f973 	bl	80175ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80182c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80182d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80182d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80182dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182de:	2200      	movs	r2, #0
 80182e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80182e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182e4:	2200      	movs	r2, #0
 80182e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80182ea:	683a      	ldr	r2, [r7, #0]
 80182ec:	68f9      	ldr	r1, [r7, #12]
 80182ee:	69b8      	ldr	r0, [r7, #24]
 80182f0:	f001 fa14 	bl	801971c <pxPortInitialiseStack>
 80182f4:	4602      	mov	r2, r0
 80182f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80182fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d002      	beq.n	8018306 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018306:	bf00      	nop
 8018308:	3720      	adds	r7, #32
 801830a:	46bd      	mov	sp, r7
 801830c:	bd80      	pop	{r7, pc}
	...

08018310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018310:	b580      	push	{r7, lr}
 8018312:	b082      	sub	sp, #8
 8018314:	af00      	add	r7, sp, #0
 8018316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018318:	f001 fb2c 	bl	8019974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801831c:	4b2d      	ldr	r3, [pc, #180]	; (80183d4 <prvAddNewTaskToReadyList+0xc4>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	3301      	adds	r3, #1
 8018322:	4a2c      	ldr	r2, [pc, #176]	; (80183d4 <prvAddNewTaskToReadyList+0xc4>)
 8018324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018326:	4b2c      	ldr	r3, [pc, #176]	; (80183d8 <prvAddNewTaskToReadyList+0xc8>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d109      	bne.n	8018342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801832e:	4a2a      	ldr	r2, [pc, #168]	; (80183d8 <prvAddNewTaskToReadyList+0xc8>)
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018334:	4b27      	ldr	r3, [pc, #156]	; (80183d4 <prvAddNewTaskToReadyList+0xc4>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	2b01      	cmp	r3, #1
 801833a:	d110      	bne.n	801835e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801833c:	f000 fcca 	bl	8018cd4 <prvInitialiseTaskLists>
 8018340:	e00d      	b.n	801835e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018342:	4b26      	ldr	r3, [pc, #152]	; (80183dc <prvAddNewTaskToReadyList+0xcc>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d109      	bne.n	801835e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801834a:	4b23      	ldr	r3, [pc, #140]	; (80183d8 <prvAddNewTaskToReadyList+0xc8>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018354:	429a      	cmp	r2, r3
 8018356:	d802      	bhi.n	801835e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018358:	4a1f      	ldr	r2, [pc, #124]	; (80183d8 <prvAddNewTaskToReadyList+0xc8>)
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801835e:	4b20      	ldr	r3, [pc, #128]	; (80183e0 <prvAddNewTaskToReadyList+0xd0>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	3301      	adds	r3, #1
 8018364:	4a1e      	ldr	r2, [pc, #120]	; (80183e0 <prvAddNewTaskToReadyList+0xd0>)
 8018366:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018368:	4b1d      	ldr	r3, [pc, #116]	; (80183e0 <prvAddNewTaskToReadyList+0xd0>)
 801836a:	681a      	ldr	r2, [r3, #0]
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018374:	4b1b      	ldr	r3, [pc, #108]	; (80183e4 <prvAddNewTaskToReadyList+0xd4>)
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	429a      	cmp	r2, r3
 801837a:	d903      	bls.n	8018384 <prvAddNewTaskToReadyList+0x74>
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018380:	4a18      	ldr	r2, [pc, #96]	; (80183e4 <prvAddNewTaskToReadyList+0xd4>)
 8018382:	6013      	str	r3, [r2, #0]
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018388:	4613      	mov	r3, r2
 801838a:	009b      	lsls	r3, r3, #2
 801838c:	4413      	add	r3, r2
 801838e:	009b      	lsls	r3, r3, #2
 8018390:	4a15      	ldr	r2, [pc, #84]	; (80183e8 <prvAddNewTaskToReadyList+0xd8>)
 8018392:	441a      	add	r2, r3
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	3304      	adds	r3, #4
 8018398:	4619      	mov	r1, r3
 801839a:	4610      	mov	r0, r2
 801839c:	f7ff f913 	bl	80175c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80183a0:	f001 fb18 	bl	80199d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80183a4:	4b0d      	ldr	r3, [pc, #52]	; (80183dc <prvAddNewTaskToReadyList+0xcc>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d00e      	beq.n	80183ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80183ac:	4b0a      	ldr	r3, [pc, #40]	; (80183d8 <prvAddNewTaskToReadyList+0xc8>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183b6:	429a      	cmp	r2, r3
 80183b8:	d207      	bcs.n	80183ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80183ba:	4b0c      	ldr	r3, [pc, #48]	; (80183ec <prvAddNewTaskToReadyList+0xdc>)
 80183bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183c0:	601a      	str	r2, [r3, #0]
 80183c2:	f3bf 8f4f 	dsb	sy
 80183c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80183ca:	bf00      	nop
 80183cc:	3708      	adds	r7, #8
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	24002bec 	.word	0x24002bec
 80183d8:	24002718 	.word	0x24002718
 80183dc:	24002bf8 	.word	0x24002bf8
 80183e0:	24002c08 	.word	0x24002c08
 80183e4:	24002bf4 	.word	0x24002bf4
 80183e8:	2400271c 	.word	0x2400271c
 80183ec:	e000ed04 	.word	0xe000ed04

080183f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b084      	sub	sp, #16
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80183f8:	2300      	movs	r3, #0
 80183fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d017      	beq.n	8018432 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018402:	4b13      	ldr	r3, [pc, #76]	; (8018450 <vTaskDelay+0x60>)
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d00a      	beq.n	8018420 <vTaskDelay+0x30>
	__asm volatile
 801840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801840e:	f383 8811 	msr	BASEPRI, r3
 8018412:	f3bf 8f6f 	isb	sy
 8018416:	f3bf 8f4f 	dsb	sy
 801841a:	60bb      	str	r3, [r7, #8]
}
 801841c:	bf00      	nop
 801841e:	e7fe      	b.n	801841e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018420:	f000 f880 	bl	8018524 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018424:	2100      	movs	r1, #0
 8018426:	6878      	ldr	r0, [r7, #4]
 8018428:	f000 fdb6 	bl	8018f98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801842c:	f000 f888 	bl	8018540 <xTaskResumeAll>
 8018430:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d107      	bne.n	8018448 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018438:	4b06      	ldr	r3, [pc, #24]	; (8018454 <vTaskDelay+0x64>)
 801843a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801843e:	601a      	str	r2, [r3, #0]
 8018440:	f3bf 8f4f 	dsb	sy
 8018444:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018448:	bf00      	nop
 801844a:	3710      	adds	r7, #16
 801844c:	46bd      	mov	sp, r7
 801844e:	bd80      	pop	{r7, pc}
 8018450:	24002c14 	.word	0x24002c14
 8018454:	e000ed04 	.word	0xe000ed04

08018458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b08a      	sub	sp, #40	; 0x28
 801845c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801845e:	2300      	movs	r3, #0
 8018460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018462:	2300      	movs	r3, #0
 8018464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018466:	463a      	mov	r2, r7
 8018468:	1d39      	adds	r1, r7, #4
 801846a:	f107 0308 	add.w	r3, r7, #8
 801846e:	4618      	mov	r0, r3
 8018470:	f7fe fddc 	bl	801702c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018474:	6839      	ldr	r1, [r7, #0]
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	68ba      	ldr	r2, [r7, #8]
 801847a:	9202      	str	r2, [sp, #8]
 801847c:	9301      	str	r3, [sp, #4]
 801847e:	2300      	movs	r3, #0
 8018480:	9300      	str	r3, [sp, #0]
 8018482:	2300      	movs	r3, #0
 8018484:	460a      	mov	r2, r1
 8018486:	4921      	ldr	r1, [pc, #132]	; (801850c <vTaskStartScheduler+0xb4>)
 8018488:	4821      	ldr	r0, [pc, #132]	; (8018510 <vTaskStartScheduler+0xb8>)
 801848a:	f7ff fe0f 	bl	80180ac <xTaskCreateStatic>
 801848e:	4603      	mov	r3, r0
 8018490:	4a20      	ldr	r2, [pc, #128]	; (8018514 <vTaskStartScheduler+0xbc>)
 8018492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018494:	4b1f      	ldr	r3, [pc, #124]	; (8018514 <vTaskStartScheduler+0xbc>)
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d002      	beq.n	80184a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801849c:	2301      	movs	r3, #1
 801849e:	617b      	str	r3, [r7, #20]
 80184a0:	e001      	b.n	80184a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80184a2:	2300      	movs	r3, #0
 80184a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	2b01      	cmp	r3, #1
 80184aa:	d102      	bne.n	80184b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80184ac:	f000 fdc8 	bl	8019040 <xTimerCreateTimerTask>
 80184b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80184b2:	697b      	ldr	r3, [r7, #20]
 80184b4:	2b01      	cmp	r3, #1
 80184b6:	d116      	bne.n	80184e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80184b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184bc:	f383 8811 	msr	BASEPRI, r3
 80184c0:	f3bf 8f6f 	isb	sy
 80184c4:	f3bf 8f4f 	dsb	sy
 80184c8:	613b      	str	r3, [r7, #16]
}
 80184ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80184cc:	4b12      	ldr	r3, [pc, #72]	; (8018518 <vTaskStartScheduler+0xc0>)
 80184ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80184d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80184d4:	4b11      	ldr	r3, [pc, #68]	; (801851c <vTaskStartScheduler+0xc4>)
 80184d6:	2201      	movs	r2, #1
 80184d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80184da:	4b11      	ldr	r3, [pc, #68]	; (8018520 <vTaskStartScheduler+0xc8>)
 80184dc:	2200      	movs	r2, #0
 80184de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80184e0:	f001 f9a6 	bl	8019830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80184e4:	e00e      	b.n	8018504 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80184e6:	697b      	ldr	r3, [r7, #20]
 80184e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80184ec:	d10a      	bne.n	8018504 <vTaskStartScheduler+0xac>
	__asm volatile
 80184ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184f2:	f383 8811 	msr	BASEPRI, r3
 80184f6:	f3bf 8f6f 	isb	sy
 80184fa:	f3bf 8f4f 	dsb	sy
 80184fe:	60fb      	str	r3, [r7, #12]
}
 8018500:	bf00      	nop
 8018502:	e7fe      	b.n	8018502 <vTaskStartScheduler+0xaa>
}
 8018504:	bf00      	nop
 8018506:	3718      	adds	r7, #24
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}
 801850c:	0801ac70 	.word	0x0801ac70
 8018510:	08018ca5 	.word	0x08018ca5
 8018514:	24002c10 	.word	0x24002c10
 8018518:	24002c0c 	.word	0x24002c0c
 801851c:	24002bf8 	.word	0x24002bf8
 8018520:	24002bf0 	.word	0x24002bf0

08018524 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018524:	b480      	push	{r7}
 8018526:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018528:	4b04      	ldr	r3, [pc, #16]	; (801853c <vTaskSuspendAll+0x18>)
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	3301      	adds	r3, #1
 801852e:	4a03      	ldr	r2, [pc, #12]	; (801853c <vTaskSuspendAll+0x18>)
 8018530:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018532:	bf00      	nop
 8018534:	46bd      	mov	sp, r7
 8018536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853a:	4770      	bx	lr
 801853c:	24002c14 	.word	0x24002c14

08018540 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b084      	sub	sp, #16
 8018544:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018546:	2300      	movs	r3, #0
 8018548:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801854a:	2300      	movs	r3, #0
 801854c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801854e:	4b42      	ldr	r3, [pc, #264]	; (8018658 <xTaskResumeAll+0x118>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d10a      	bne.n	801856c <xTaskResumeAll+0x2c>
	__asm volatile
 8018556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801855a:	f383 8811 	msr	BASEPRI, r3
 801855e:	f3bf 8f6f 	isb	sy
 8018562:	f3bf 8f4f 	dsb	sy
 8018566:	603b      	str	r3, [r7, #0]
}
 8018568:	bf00      	nop
 801856a:	e7fe      	b.n	801856a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801856c:	f001 fa02 	bl	8019974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018570:	4b39      	ldr	r3, [pc, #228]	; (8018658 <xTaskResumeAll+0x118>)
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	3b01      	subs	r3, #1
 8018576:	4a38      	ldr	r2, [pc, #224]	; (8018658 <xTaskResumeAll+0x118>)
 8018578:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801857a:	4b37      	ldr	r3, [pc, #220]	; (8018658 <xTaskResumeAll+0x118>)
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d162      	bne.n	8018648 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018582:	4b36      	ldr	r3, [pc, #216]	; (801865c <xTaskResumeAll+0x11c>)
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d05e      	beq.n	8018648 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801858a:	e02f      	b.n	80185ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801858c:	4b34      	ldr	r3, [pc, #208]	; (8018660 <xTaskResumeAll+0x120>)
 801858e:	68db      	ldr	r3, [r3, #12]
 8018590:	68db      	ldr	r3, [r3, #12]
 8018592:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	3318      	adds	r3, #24
 8018598:	4618      	mov	r0, r3
 801859a:	f7ff f871 	bl	8017680 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	3304      	adds	r3, #4
 80185a2:	4618      	mov	r0, r3
 80185a4:	f7ff f86c 	bl	8017680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185ac:	4b2d      	ldr	r3, [pc, #180]	; (8018664 <xTaskResumeAll+0x124>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	429a      	cmp	r2, r3
 80185b2:	d903      	bls.n	80185bc <xTaskResumeAll+0x7c>
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185b8:	4a2a      	ldr	r2, [pc, #168]	; (8018664 <xTaskResumeAll+0x124>)
 80185ba:	6013      	str	r3, [r2, #0]
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185c0:	4613      	mov	r3, r2
 80185c2:	009b      	lsls	r3, r3, #2
 80185c4:	4413      	add	r3, r2
 80185c6:	009b      	lsls	r3, r3, #2
 80185c8:	4a27      	ldr	r2, [pc, #156]	; (8018668 <xTaskResumeAll+0x128>)
 80185ca:	441a      	add	r2, r3
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	3304      	adds	r3, #4
 80185d0:	4619      	mov	r1, r3
 80185d2:	4610      	mov	r0, r2
 80185d4:	f7fe fff7 	bl	80175c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185dc:	4b23      	ldr	r3, [pc, #140]	; (801866c <xTaskResumeAll+0x12c>)
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d302      	bcc.n	80185ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80185e6:	4b22      	ldr	r3, [pc, #136]	; (8018670 <xTaskResumeAll+0x130>)
 80185e8:	2201      	movs	r2, #1
 80185ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80185ec:	4b1c      	ldr	r3, [pc, #112]	; (8018660 <xTaskResumeAll+0x120>)
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d1cb      	bne.n	801858c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d001      	beq.n	80185fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80185fa:	f000 fc09 	bl	8018e10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80185fe:	4b1d      	ldr	r3, [pc, #116]	; (8018674 <xTaskResumeAll+0x134>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d010      	beq.n	801862c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801860a:	f000 f847 	bl	801869c <xTaskIncrementTick>
 801860e:	4603      	mov	r3, r0
 8018610:	2b00      	cmp	r3, #0
 8018612:	d002      	beq.n	801861a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018614:	4b16      	ldr	r3, [pc, #88]	; (8018670 <xTaskResumeAll+0x130>)
 8018616:	2201      	movs	r2, #1
 8018618:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	3b01      	subs	r3, #1
 801861e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d1f1      	bne.n	801860a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018626:	4b13      	ldr	r3, [pc, #76]	; (8018674 <xTaskResumeAll+0x134>)
 8018628:	2200      	movs	r2, #0
 801862a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801862c:	4b10      	ldr	r3, [pc, #64]	; (8018670 <xTaskResumeAll+0x130>)
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d009      	beq.n	8018648 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018634:	2301      	movs	r3, #1
 8018636:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018638:	4b0f      	ldr	r3, [pc, #60]	; (8018678 <xTaskResumeAll+0x138>)
 801863a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801863e:	601a      	str	r2, [r3, #0]
 8018640:	f3bf 8f4f 	dsb	sy
 8018644:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018648:	f001 f9c4 	bl	80199d4 <vPortExitCritical>

	return xAlreadyYielded;
 801864c:	68bb      	ldr	r3, [r7, #8]
}
 801864e:	4618      	mov	r0, r3
 8018650:	3710      	adds	r7, #16
 8018652:	46bd      	mov	sp, r7
 8018654:	bd80      	pop	{r7, pc}
 8018656:	bf00      	nop
 8018658:	24002c14 	.word	0x24002c14
 801865c:	24002bec 	.word	0x24002bec
 8018660:	24002bac 	.word	0x24002bac
 8018664:	24002bf4 	.word	0x24002bf4
 8018668:	2400271c 	.word	0x2400271c
 801866c:	24002718 	.word	0x24002718
 8018670:	24002c00 	.word	0x24002c00
 8018674:	24002bfc 	.word	0x24002bfc
 8018678:	e000ed04 	.word	0xe000ed04

0801867c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801867c:	b480      	push	{r7}
 801867e:	b083      	sub	sp, #12
 8018680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018682:	4b05      	ldr	r3, [pc, #20]	; (8018698 <xTaskGetTickCount+0x1c>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018688:	687b      	ldr	r3, [r7, #4]
}
 801868a:	4618      	mov	r0, r3
 801868c:	370c      	adds	r7, #12
 801868e:	46bd      	mov	sp, r7
 8018690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018694:	4770      	bx	lr
 8018696:	bf00      	nop
 8018698:	24002bf0 	.word	0x24002bf0

0801869c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801869c:	b580      	push	{r7, lr}
 801869e:	b086      	sub	sp, #24
 80186a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80186a2:	2300      	movs	r3, #0
 80186a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80186a6:	4b53      	ldr	r3, [pc, #332]	; (80187f4 <xTaskIncrementTick+0x158>)
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	f040 8095 	bne.w	80187da <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80186b0:	4b51      	ldr	r3, [pc, #324]	; (80187f8 <xTaskIncrementTick+0x15c>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	3301      	adds	r3, #1
 80186b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80186b8:	4a4f      	ldr	r2, [pc, #316]	; (80187f8 <xTaskIncrementTick+0x15c>)
 80186ba:	693b      	ldr	r3, [r7, #16]
 80186bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80186be:	693b      	ldr	r3, [r7, #16]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d120      	bne.n	8018706 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80186c4:	4b4d      	ldr	r3, [pc, #308]	; (80187fc <xTaskIncrementTick+0x160>)
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d00a      	beq.n	80186e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80186ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186d2:	f383 8811 	msr	BASEPRI, r3
 80186d6:	f3bf 8f6f 	isb	sy
 80186da:	f3bf 8f4f 	dsb	sy
 80186de:	603b      	str	r3, [r7, #0]
}
 80186e0:	bf00      	nop
 80186e2:	e7fe      	b.n	80186e2 <xTaskIncrementTick+0x46>
 80186e4:	4b45      	ldr	r3, [pc, #276]	; (80187fc <xTaskIncrementTick+0x160>)
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	60fb      	str	r3, [r7, #12]
 80186ea:	4b45      	ldr	r3, [pc, #276]	; (8018800 <xTaskIncrementTick+0x164>)
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	4a43      	ldr	r2, [pc, #268]	; (80187fc <xTaskIncrementTick+0x160>)
 80186f0:	6013      	str	r3, [r2, #0]
 80186f2:	4a43      	ldr	r2, [pc, #268]	; (8018800 <xTaskIncrementTick+0x164>)
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	6013      	str	r3, [r2, #0]
 80186f8:	4b42      	ldr	r3, [pc, #264]	; (8018804 <xTaskIncrementTick+0x168>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	3301      	adds	r3, #1
 80186fe:	4a41      	ldr	r2, [pc, #260]	; (8018804 <xTaskIncrementTick+0x168>)
 8018700:	6013      	str	r3, [r2, #0]
 8018702:	f000 fb85 	bl	8018e10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018706:	4b40      	ldr	r3, [pc, #256]	; (8018808 <xTaskIncrementTick+0x16c>)
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	693a      	ldr	r2, [r7, #16]
 801870c:	429a      	cmp	r2, r3
 801870e:	d349      	bcc.n	80187a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018710:	4b3a      	ldr	r3, [pc, #232]	; (80187fc <xTaskIncrementTick+0x160>)
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d104      	bne.n	8018724 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801871a:	4b3b      	ldr	r3, [pc, #236]	; (8018808 <xTaskIncrementTick+0x16c>)
 801871c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018720:	601a      	str	r2, [r3, #0]
					break;
 8018722:	e03f      	b.n	80187a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018724:	4b35      	ldr	r3, [pc, #212]	; (80187fc <xTaskIncrementTick+0x160>)
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	68db      	ldr	r3, [r3, #12]
 801872a:	68db      	ldr	r3, [r3, #12]
 801872c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801872e:	68bb      	ldr	r3, [r7, #8]
 8018730:	685b      	ldr	r3, [r3, #4]
 8018732:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018734:	693a      	ldr	r2, [r7, #16]
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	429a      	cmp	r2, r3
 801873a:	d203      	bcs.n	8018744 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801873c:	4a32      	ldr	r2, [pc, #200]	; (8018808 <xTaskIncrementTick+0x16c>)
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018742:	e02f      	b.n	80187a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018744:	68bb      	ldr	r3, [r7, #8]
 8018746:	3304      	adds	r3, #4
 8018748:	4618      	mov	r0, r3
 801874a:	f7fe ff99 	bl	8017680 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801874e:	68bb      	ldr	r3, [r7, #8]
 8018750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018752:	2b00      	cmp	r3, #0
 8018754:	d004      	beq.n	8018760 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018756:	68bb      	ldr	r3, [r7, #8]
 8018758:	3318      	adds	r3, #24
 801875a:	4618      	mov	r0, r3
 801875c:	f7fe ff90 	bl	8017680 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018760:	68bb      	ldr	r3, [r7, #8]
 8018762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018764:	4b29      	ldr	r3, [pc, #164]	; (801880c <xTaskIncrementTick+0x170>)
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	429a      	cmp	r2, r3
 801876a:	d903      	bls.n	8018774 <xTaskIncrementTick+0xd8>
 801876c:	68bb      	ldr	r3, [r7, #8]
 801876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018770:	4a26      	ldr	r2, [pc, #152]	; (801880c <xTaskIncrementTick+0x170>)
 8018772:	6013      	str	r3, [r2, #0]
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018778:	4613      	mov	r3, r2
 801877a:	009b      	lsls	r3, r3, #2
 801877c:	4413      	add	r3, r2
 801877e:	009b      	lsls	r3, r3, #2
 8018780:	4a23      	ldr	r2, [pc, #140]	; (8018810 <xTaskIncrementTick+0x174>)
 8018782:	441a      	add	r2, r3
 8018784:	68bb      	ldr	r3, [r7, #8]
 8018786:	3304      	adds	r3, #4
 8018788:	4619      	mov	r1, r3
 801878a:	4610      	mov	r0, r2
 801878c:	f7fe ff1b 	bl	80175c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018790:	68bb      	ldr	r3, [r7, #8]
 8018792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018794:	4b1f      	ldr	r3, [pc, #124]	; (8018814 <xTaskIncrementTick+0x178>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801879a:	429a      	cmp	r2, r3
 801879c:	d3b8      	bcc.n	8018710 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801879e:	2301      	movs	r3, #1
 80187a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80187a2:	e7b5      	b.n	8018710 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80187a4:	4b1b      	ldr	r3, [pc, #108]	; (8018814 <xTaskIncrementTick+0x178>)
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187aa:	4919      	ldr	r1, [pc, #100]	; (8018810 <xTaskIncrementTick+0x174>)
 80187ac:	4613      	mov	r3, r2
 80187ae:	009b      	lsls	r3, r3, #2
 80187b0:	4413      	add	r3, r2
 80187b2:	009b      	lsls	r3, r3, #2
 80187b4:	440b      	add	r3, r1
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	2b01      	cmp	r3, #1
 80187ba:	d901      	bls.n	80187c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80187bc:	2301      	movs	r3, #1
 80187be:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80187c0:	4b15      	ldr	r3, [pc, #84]	; (8018818 <xTaskIncrementTick+0x17c>)
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d101      	bne.n	80187cc <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80187c8:	f7e9 fe00 	bl	80023cc <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80187cc:	4b13      	ldr	r3, [pc, #76]	; (801881c <xTaskIncrementTick+0x180>)
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d009      	beq.n	80187e8 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80187d4:	2301      	movs	r3, #1
 80187d6:	617b      	str	r3, [r7, #20]
 80187d8:	e006      	b.n	80187e8 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80187da:	4b0f      	ldr	r3, [pc, #60]	; (8018818 <xTaskIncrementTick+0x17c>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	3301      	adds	r3, #1
 80187e0:	4a0d      	ldr	r2, [pc, #52]	; (8018818 <xTaskIncrementTick+0x17c>)
 80187e2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80187e4:	f7e9 fdf2 	bl	80023cc <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80187e8:	697b      	ldr	r3, [r7, #20]
}
 80187ea:	4618      	mov	r0, r3
 80187ec:	3718      	adds	r7, #24
 80187ee:	46bd      	mov	sp, r7
 80187f0:	bd80      	pop	{r7, pc}
 80187f2:	bf00      	nop
 80187f4:	24002c14 	.word	0x24002c14
 80187f8:	24002bf0 	.word	0x24002bf0
 80187fc:	24002ba4 	.word	0x24002ba4
 8018800:	24002ba8 	.word	0x24002ba8
 8018804:	24002c04 	.word	0x24002c04
 8018808:	24002c0c 	.word	0x24002c0c
 801880c:	24002bf4 	.word	0x24002bf4
 8018810:	2400271c 	.word	0x2400271c
 8018814:	24002718 	.word	0x24002718
 8018818:	24002bfc 	.word	0x24002bfc
 801881c:	24002c00 	.word	0x24002c00

08018820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018820:	b580      	push	{r7, lr}
 8018822:	b084      	sub	sp, #16
 8018824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018826:	4b2f      	ldr	r3, [pc, #188]	; (80188e4 <vTaskSwitchContext+0xc4>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d003      	beq.n	8018836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801882e:	4b2e      	ldr	r3, [pc, #184]	; (80188e8 <vTaskSwitchContext+0xc8>)
 8018830:	2201      	movs	r2, #1
 8018832:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018834:	e052      	b.n	80188dc <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8018836:	4b2c      	ldr	r3, [pc, #176]	; (80188e8 <vTaskSwitchContext+0xc8>)
 8018838:	2200      	movs	r2, #0
 801883a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801883c:	4b2b      	ldr	r3, [pc, #172]	; (80188ec <vTaskSwitchContext+0xcc>)
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	681a      	ldr	r2, [r3, #0]
 8018842:	4b2a      	ldr	r3, [pc, #168]	; (80188ec <vTaskSwitchContext+0xcc>)
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018848:	429a      	cmp	r2, r3
 801884a:	d808      	bhi.n	801885e <vTaskSwitchContext+0x3e>
 801884c:	4b27      	ldr	r3, [pc, #156]	; (80188ec <vTaskSwitchContext+0xcc>)
 801884e:	681a      	ldr	r2, [r3, #0]
 8018850:	4b26      	ldr	r3, [pc, #152]	; (80188ec <vTaskSwitchContext+0xcc>)
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	3334      	adds	r3, #52	; 0x34
 8018856:	4619      	mov	r1, r3
 8018858:	4610      	mov	r0, r2
 801885a:	f7e9 fdc5 	bl	80023e8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801885e:	4b24      	ldr	r3, [pc, #144]	; (80188f0 <vTaskSwitchContext+0xd0>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	60fb      	str	r3, [r7, #12]
 8018864:	e010      	b.n	8018888 <vTaskSwitchContext+0x68>
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d10a      	bne.n	8018882 <vTaskSwitchContext+0x62>
	__asm volatile
 801886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018870:	f383 8811 	msr	BASEPRI, r3
 8018874:	f3bf 8f6f 	isb	sy
 8018878:	f3bf 8f4f 	dsb	sy
 801887c:	607b      	str	r3, [r7, #4]
}
 801887e:	bf00      	nop
 8018880:	e7fe      	b.n	8018880 <vTaskSwitchContext+0x60>
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	3b01      	subs	r3, #1
 8018886:	60fb      	str	r3, [r7, #12]
 8018888:	491a      	ldr	r1, [pc, #104]	; (80188f4 <vTaskSwitchContext+0xd4>)
 801888a:	68fa      	ldr	r2, [r7, #12]
 801888c:	4613      	mov	r3, r2
 801888e:	009b      	lsls	r3, r3, #2
 8018890:	4413      	add	r3, r2
 8018892:	009b      	lsls	r3, r3, #2
 8018894:	440b      	add	r3, r1
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d0e4      	beq.n	8018866 <vTaskSwitchContext+0x46>
 801889c:	68fa      	ldr	r2, [r7, #12]
 801889e:	4613      	mov	r3, r2
 80188a0:	009b      	lsls	r3, r3, #2
 80188a2:	4413      	add	r3, r2
 80188a4:	009b      	lsls	r3, r3, #2
 80188a6:	4a13      	ldr	r2, [pc, #76]	; (80188f4 <vTaskSwitchContext+0xd4>)
 80188a8:	4413      	add	r3, r2
 80188aa:	60bb      	str	r3, [r7, #8]
 80188ac:	68bb      	ldr	r3, [r7, #8]
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	685a      	ldr	r2, [r3, #4]
 80188b2:	68bb      	ldr	r3, [r7, #8]
 80188b4:	605a      	str	r2, [r3, #4]
 80188b6:	68bb      	ldr	r3, [r7, #8]
 80188b8:	685a      	ldr	r2, [r3, #4]
 80188ba:	68bb      	ldr	r3, [r7, #8]
 80188bc:	3308      	adds	r3, #8
 80188be:	429a      	cmp	r2, r3
 80188c0:	d104      	bne.n	80188cc <vTaskSwitchContext+0xac>
 80188c2:	68bb      	ldr	r3, [r7, #8]
 80188c4:	685b      	ldr	r3, [r3, #4]
 80188c6:	685a      	ldr	r2, [r3, #4]
 80188c8:	68bb      	ldr	r3, [r7, #8]
 80188ca:	605a      	str	r2, [r3, #4]
 80188cc:	68bb      	ldr	r3, [r7, #8]
 80188ce:	685b      	ldr	r3, [r3, #4]
 80188d0:	68db      	ldr	r3, [r3, #12]
 80188d2:	4a06      	ldr	r2, [pc, #24]	; (80188ec <vTaskSwitchContext+0xcc>)
 80188d4:	6013      	str	r3, [r2, #0]
 80188d6:	4a06      	ldr	r2, [pc, #24]	; (80188f0 <vTaskSwitchContext+0xd0>)
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	6013      	str	r3, [r2, #0]
}
 80188dc:	bf00      	nop
 80188de:	3710      	adds	r7, #16
 80188e0:	46bd      	mov	sp, r7
 80188e2:	bd80      	pop	{r7, pc}
 80188e4:	24002c14 	.word	0x24002c14
 80188e8:	24002c00 	.word	0x24002c00
 80188ec:	24002718 	.word	0x24002718
 80188f0:	24002bf4 	.word	0x24002bf4
 80188f4:	2400271c 	.word	0x2400271c

080188f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b084      	sub	sp, #16
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
 8018900:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d10a      	bne.n	801891e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801890c:	f383 8811 	msr	BASEPRI, r3
 8018910:	f3bf 8f6f 	isb	sy
 8018914:	f3bf 8f4f 	dsb	sy
 8018918:	60fb      	str	r3, [r7, #12]
}
 801891a:	bf00      	nop
 801891c:	e7fe      	b.n	801891c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801891e:	4b07      	ldr	r3, [pc, #28]	; (801893c <vTaskPlaceOnEventList+0x44>)
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	3318      	adds	r3, #24
 8018924:	4619      	mov	r1, r3
 8018926:	6878      	ldr	r0, [r7, #4]
 8018928:	f7fe fe71 	bl	801760e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801892c:	2101      	movs	r1, #1
 801892e:	6838      	ldr	r0, [r7, #0]
 8018930:	f000 fb32 	bl	8018f98 <prvAddCurrentTaskToDelayedList>
}
 8018934:	bf00      	nop
 8018936:	3710      	adds	r7, #16
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}
 801893c:	24002718 	.word	0x24002718

08018940 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b086      	sub	sp, #24
 8018944:	af00      	add	r7, sp, #0
 8018946:	60f8      	str	r0, [r7, #12]
 8018948:	60b9      	str	r1, [r7, #8]
 801894a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	2b00      	cmp	r3, #0
 8018950:	d10a      	bne.n	8018968 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8018952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018956:	f383 8811 	msr	BASEPRI, r3
 801895a:	f3bf 8f6f 	isb	sy
 801895e:	f3bf 8f4f 	dsb	sy
 8018962:	617b      	str	r3, [r7, #20]
}
 8018964:	bf00      	nop
 8018966:	e7fe      	b.n	8018966 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018968:	4b11      	ldr	r3, [pc, #68]	; (80189b0 <vTaskPlaceOnUnorderedEventList+0x70>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d10a      	bne.n	8018986 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8018970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018974:	f383 8811 	msr	BASEPRI, r3
 8018978:	f3bf 8f6f 	isb	sy
 801897c:	f3bf 8f4f 	dsb	sy
 8018980:	613b      	str	r3, [r7, #16]
}
 8018982:	bf00      	nop
 8018984:	e7fe      	b.n	8018984 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018986:	4b0b      	ldr	r3, [pc, #44]	; (80189b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	68ba      	ldr	r2, [r7, #8]
 801898c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018990:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018992:	4b08      	ldr	r3, [pc, #32]	; (80189b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	3318      	adds	r3, #24
 8018998:	4619      	mov	r1, r3
 801899a:	68f8      	ldr	r0, [r7, #12]
 801899c:	f7fe fe13 	bl	80175c6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80189a0:	2101      	movs	r1, #1
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	f000 faf8 	bl	8018f98 <prvAddCurrentTaskToDelayedList>
}
 80189a8:	bf00      	nop
 80189aa:	3718      	adds	r7, #24
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}
 80189b0:	24002c14 	.word	0x24002c14
 80189b4:	24002718 	.word	0x24002718

080189b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b086      	sub	sp, #24
 80189bc:	af00      	add	r7, sp, #0
 80189be:	60f8      	str	r0, [r7, #12]
 80189c0:	60b9      	str	r1, [r7, #8]
 80189c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d10a      	bne.n	80189e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80189ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ce:	f383 8811 	msr	BASEPRI, r3
 80189d2:	f3bf 8f6f 	isb	sy
 80189d6:	f3bf 8f4f 	dsb	sy
 80189da:	617b      	str	r3, [r7, #20]
}
 80189dc:	bf00      	nop
 80189de:	e7fe      	b.n	80189de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80189e0:	4b0a      	ldr	r3, [pc, #40]	; (8018a0c <vTaskPlaceOnEventListRestricted+0x54>)
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	3318      	adds	r3, #24
 80189e6:	4619      	mov	r1, r3
 80189e8:	68f8      	ldr	r0, [r7, #12]
 80189ea:	f7fe fdec 	bl	80175c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d002      	beq.n	80189fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80189f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80189f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80189fa:	6879      	ldr	r1, [r7, #4]
 80189fc:	68b8      	ldr	r0, [r7, #8]
 80189fe:	f000 facb 	bl	8018f98 <prvAddCurrentTaskToDelayedList>
	}
 8018a02:	bf00      	nop
 8018a04:	3718      	adds	r7, #24
 8018a06:	46bd      	mov	sp, r7
 8018a08:	bd80      	pop	{r7, pc}
 8018a0a:	bf00      	nop
 8018a0c:	24002718 	.word	0x24002718

08018a10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b086      	sub	sp, #24
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	68db      	ldr	r3, [r3, #12]
 8018a1c:	68db      	ldr	r3, [r3, #12]
 8018a1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018a20:	693b      	ldr	r3, [r7, #16]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d10a      	bne.n	8018a3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a2a:	f383 8811 	msr	BASEPRI, r3
 8018a2e:	f3bf 8f6f 	isb	sy
 8018a32:	f3bf 8f4f 	dsb	sy
 8018a36:	60fb      	str	r3, [r7, #12]
}
 8018a38:	bf00      	nop
 8018a3a:	e7fe      	b.n	8018a3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018a3c:	693b      	ldr	r3, [r7, #16]
 8018a3e:	3318      	adds	r3, #24
 8018a40:	4618      	mov	r0, r3
 8018a42:	f7fe fe1d 	bl	8017680 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018a46:	4b1e      	ldr	r3, [pc, #120]	; (8018ac0 <xTaskRemoveFromEventList+0xb0>)
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d11d      	bne.n	8018a8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018a4e:	693b      	ldr	r3, [r7, #16]
 8018a50:	3304      	adds	r3, #4
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7fe fe14 	bl	8017680 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018a58:	693b      	ldr	r3, [r7, #16]
 8018a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a5c:	4b19      	ldr	r3, [pc, #100]	; (8018ac4 <xTaskRemoveFromEventList+0xb4>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	429a      	cmp	r2, r3
 8018a62:	d903      	bls.n	8018a6c <xTaskRemoveFromEventList+0x5c>
 8018a64:	693b      	ldr	r3, [r7, #16]
 8018a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a68:	4a16      	ldr	r2, [pc, #88]	; (8018ac4 <xTaskRemoveFromEventList+0xb4>)
 8018a6a:	6013      	str	r3, [r2, #0]
 8018a6c:	693b      	ldr	r3, [r7, #16]
 8018a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a70:	4613      	mov	r3, r2
 8018a72:	009b      	lsls	r3, r3, #2
 8018a74:	4413      	add	r3, r2
 8018a76:	009b      	lsls	r3, r3, #2
 8018a78:	4a13      	ldr	r2, [pc, #76]	; (8018ac8 <xTaskRemoveFromEventList+0xb8>)
 8018a7a:	441a      	add	r2, r3
 8018a7c:	693b      	ldr	r3, [r7, #16]
 8018a7e:	3304      	adds	r3, #4
 8018a80:	4619      	mov	r1, r3
 8018a82:	4610      	mov	r0, r2
 8018a84:	f7fe fd9f 	bl	80175c6 <vListInsertEnd>
 8018a88:	e005      	b.n	8018a96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018a8a:	693b      	ldr	r3, [r7, #16]
 8018a8c:	3318      	adds	r3, #24
 8018a8e:	4619      	mov	r1, r3
 8018a90:	480e      	ldr	r0, [pc, #56]	; (8018acc <xTaskRemoveFromEventList+0xbc>)
 8018a92:	f7fe fd98 	bl	80175c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018a96:	693b      	ldr	r3, [r7, #16]
 8018a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a9a:	4b0d      	ldr	r3, [pc, #52]	; (8018ad0 <xTaskRemoveFromEventList+0xc0>)
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aa0:	429a      	cmp	r2, r3
 8018aa2:	d905      	bls.n	8018ab0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018aa4:	2301      	movs	r3, #1
 8018aa6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018aa8:	4b0a      	ldr	r3, [pc, #40]	; (8018ad4 <xTaskRemoveFromEventList+0xc4>)
 8018aaa:	2201      	movs	r2, #1
 8018aac:	601a      	str	r2, [r3, #0]
 8018aae:	e001      	b.n	8018ab4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018ab4:	697b      	ldr	r3, [r7, #20]
}
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	3718      	adds	r7, #24
 8018aba:	46bd      	mov	sp, r7
 8018abc:	bd80      	pop	{r7, pc}
 8018abe:	bf00      	nop
 8018ac0:	24002c14 	.word	0x24002c14
 8018ac4:	24002bf4 	.word	0x24002bf4
 8018ac8:	2400271c 	.word	0x2400271c
 8018acc:	24002bac 	.word	0x24002bac
 8018ad0:	24002718 	.word	0x24002718
 8018ad4:	24002c00 	.word	0x24002c00

08018ad8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b086      	sub	sp, #24
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
 8018ae0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018ae2:	4b29      	ldr	r3, [pc, #164]	; (8018b88 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d10a      	bne.n	8018b00 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aee:	f383 8811 	msr	BASEPRI, r3
 8018af2:	f3bf 8f6f 	isb	sy
 8018af6:	f3bf 8f4f 	dsb	sy
 8018afa:	613b      	str	r3, [r7, #16]
}
 8018afc:	bf00      	nop
 8018afe:	e7fe      	b.n	8018afe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018b00:	683b      	ldr	r3, [r7, #0]
 8018b02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	68db      	ldr	r3, [r3, #12]
 8018b0e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018b10:	697b      	ldr	r3, [r7, #20]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d10a      	bne.n	8018b2c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b1a:	f383 8811 	msr	BASEPRI, r3
 8018b1e:	f3bf 8f6f 	isb	sy
 8018b22:	f3bf 8f4f 	dsb	sy
 8018b26:	60fb      	str	r3, [r7, #12]
}
 8018b28:	bf00      	nop
 8018b2a:	e7fe      	b.n	8018b2a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018b2c:	6878      	ldr	r0, [r7, #4]
 8018b2e:	f7fe fda7 	bl	8017680 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018b32:	697b      	ldr	r3, [r7, #20]
 8018b34:	3304      	adds	r3, #4
 8018b36:	4618      	mov	r0, r3
 8018b38:	f7fe fda2 	bl	8017680 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018b3c:	697b      	ldr	r3, [r7, #20]
 8018b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b40:	4b12      	ldr	r3, [pc, #72]	; (8018b8c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	429a      	cmp	r2, r3
 8018b46:	d903      	bls.n	8018b50 <vTaskRemoveFromUnorderedEventList+0x78>
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b4c:	4a0f      	ldr	r2, [pc, #60]	; (8018b8c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018b4e:	6013      	str	r3, [r2, #0]
 8018b50:	697b      	ldr	r3, [r7, #20]
 8018b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b54:	4613      	mov	r3, r2
 8018b56:	009b      	lsls	r3, r3, #2
 8018b58:	4413      	add	r3, r2
 8018b5a:	009b      	lsls	r3, r3, #2
 8018b5c:	4a0c      	ldr	r2, [pc, #48]	; (8018b90 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018b5e:	441a      	add	r2, r3
 8018b60:	697b      	ldr	r3, [r7, #20]
 8018b62:	3304      	adds	r3, #4
 8018b64:	4619      	mov	r1, r3
 8018b66:	4610      	mov	r0, r2
 8018b68:	f7fe fd2d 	bl	80175c6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018b6c:	697b      	ldr	r3, [r7, #20]
 8018b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b70:	4b08      	ldr	r3, [pc, #32]	; (8018b94 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b76:	429a      	cmp	r2, r3
 8018b78:	d902      	bls.n	8018b80 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018b7a:	4b07      	ldr	r3, [pc, #28]	; (8018b98 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	601a      	str	r2, [r3, #0]
	}
}
 8018b80:	bf00      	nop
 8018b82:	3718      	adds	r7, #24
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bd80      	pop	{r7, pc}
 8018b88:	24002c14 	.word	0x24002c14
 8018b8c:	24002bf4 	.word	0x24002bf4
 8018b90:	2400271c 	.word	0x2400271c
 8018b94:	24002718 	.word	0x24002718
 8018b98:	24002c00 	.word	0x24002c00

08018b9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018b9c:	b480      	push	{r7}
 8018b9e:	b083      	sub	sp, #12
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018ba4:	4b06      	ldr	r3, [pc, #24]	; (8018bc0 <vTaskInternalSetTimeOutState+0x24>)
 8018ba6:	681a      	ldr	r2, [r3, #0]
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018bac:	4b05      	ldr	r3, [pc, #20]	; (8018bc4 <vTaskInternalSetTimeOutState+0x28>)
 8018bae:	681a      	ldr	r2, [r3, #0]
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	605a      	str	r2, [r3, #4]
}
 8018bb4:	bf00      	nop
 8018bb6:	370c      	adds	r7, #12
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bbe:	4770      	bx	lr
 8018bc0:	24002c04 	.word	0x24002c04
 8018bc4:	24002bf0 	.word	0x24002bf0

08018bc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b088      	sub	sp, #32
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]
 8018bd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d10a      	bne.n	8018bee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bdc:	f383 8811 	msr	BASEPRI, r3
 8018be0:	f3bf 8f6f 	isb	sy
 8018be4:	f3bf 8f4f 	dsb	sy
 8018be8:	613b      	str	r3, [r7, #16]
}
 8018bea:	bf00      	nop
 8018bec:	e7fe      	b.n	8018bec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018bee:	683b      	ldr	r3, [r7, #0]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d10a      	bne.n	8018c0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bf8:	f383 8811 	msr	BASEPRI, r3
 8018bfc:	f3bf 8f6f 	isb	sy
 8018c00:	f3bf 8f4f 	dsb	sy
 8018c04:	60fb      	str	r3, [r7, #12]
}
 8018c06:	bf00      	nop
 8018c08:	e7fe      	b.n	8018c08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018c0a:	f000 feb3 	bl	8019974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018c0e:	4b1d      	ldr	r3, [pc, #116]	; (8018c84 <xTaskCheckForTimeOut+0xbc>)
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	685b      	ldr	r3, [r3, #4]
 8018c18:	69ba      	ldr	r2, [r7, #24]
 8018c1a:	1ad3      	subs	r3, r2, r3
 8018c1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018c1e:	683b      	ldr	r3, [r7, #0]
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c26:	d102      	bne.n	8018c2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	61fb      	str	r3, [r7, #28]
 8018c2c:	e023      	b.n	8018c76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681a      	ldr	r2, [r3, #0]
 8018c32:	4b15      	ldr	r3, [pc, #84]	; (8018c88 <xTaskCheckForTimeOut+0xc0>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	429a      	cmp	r2, r3
 8018c38:	d007      	beq.n	8018c4a <xTaskCheckForTimeOut+0x82>
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	685b      	ldr	r3, [r3, #4]
 8018c3e:	69ba      	ldr	r2, [r7, #24]
 8018c40:	429a      	cmp	r2, r3
 8018c42:	d302      	bcc.n	8018c4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018c44:	2301      	movs	r3, #1
 8018c46:	61fb      	str	r3, [r7, #28]
 8018c48:	e015      	b.n	8018c76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018c4a:	683b      	ldr	r3, [r7, #0]
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	697a      	ldr	r2, [r7, #20]
 8018c50:	429a      	cmp	r2, r3
 8018c52:	d20b      	bcs.n	8018c6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	681a      	ldr	r2, [r3, #0]
 8018c58:	697b      	ldr	r3, [r7, #20]
 8018c5a:	1ad2      	subs	r2, r2, r3
 8018c5c:	683b      	ldr	r3, [r7, #0]
 8018c5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018c60:	6878      	ldr	r0, [r7, #4]
 8018c62:	f7ff ff9b 	bl	8018b9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018c66:	2300      	movs	r3, #0
 8018c68:	61fb      	str	r3, [r7, #28]
 8018c6a:	e004      	b.n	8018c76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018c6c:	683b      	ldr	r3, [r7, #0]
 8018c6e:	2200      	movs	r2, #0
 8018c70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018c72:	2301      	movs	r3, #1
 8018c74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018c76:	f000 fead 	bl	80199d4 <vPortExitCritical>

	return xReturn;
 8018c7a:	69fb      	ldr	r3, [r7, #28]
}
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	3720      	adds	r7, #32
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}
 8018c84:	24002bf0 	.word	0x24002bf0
 8018c88:	24002c04 	.word	0x24002c04

08018c8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018c8c:	b480      	push	{r7}
 8018c8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018c90:	4b03      	ldr	r3, [pc, #12]	; (8018ca0 <vTaskMissedYield+0x14>)
 8018c92:	2201      	movs	r2, #1
 8018c94:	601a      	str	r2, [r3, #0]
}
 8018c96:	bf00      	nop
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9e:	4770      	bx	lr
 8018ca0:	24002c00 	.word	0x24002c00

08018ca4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b082      	sub	sp, #8
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018cac:	f000 f852 	bl	8018d54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018cb0:	4b06      	ldr	r3, [pc, #24]	; (8018ccc <prvIdleTask+0x28>)
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	2b01      	cmp	r3, #1
 8018cb6:	d9f9      	bls.n	8018cac <prvIdleTask+0x8>
			{
				taskYIELD();
 8018cb8:	4b05      	ldr	r3, [pc, #20]	; (8018cd0 <prvIdleTask+0x2c>)
 8018cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018cbe:	601a      	str	r2, [r3, #0]
 8018cc0:	f3bf 8f4f 	dsb	sy
 8018cc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018cc8:	e7f0      	b.n	8018cac <prvIdleTask+0x8>
 8018cca:	bf00      	nop
 8018ccc:	2400271c 	.word	0x2400271c
 8018cd0:	e000ed04 	.word	0xe000ed04

08018cd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b082      	sub	sp, #8
 8018cd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018cda:	2300      	movs	r3, #0
 8018cdc:	607b      	str	r3, [r7, #4]
 8018cde:	e00c      	b.n	8018cfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018ce0:	687a      	ldr	r2, [r7, #4]
 8018ce2:	4613      	mov	r3, r2
 8018ce4:	009b      	lsls	r3, r3, #2
 8018ce6:	4413      	add	r3, r2
 8018ce8:	009b      	lsls	r3, r3, #2
 8018cea:	4a12      	ldr	r2, [pc, #72]	; (8018d34 <prvInitialiseTaskLists+0x60>)
 8018cec:	4413      	add	r3, r2
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f7fe fc3c 	bl	801756c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	3301      	adds	r3, #1
 8018cf8:	607b      	str	r3, [r7, #4]
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	2b37      	cmp	r3, #55	; 0x37
 8018cfe:	d9ef      	bls.n	8018ce0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018d00:	480d      	ldr	r0, [pc, #52]	; (8018d38 <prvInitialiseTaskLists+0x64>)
 8018d02:	f7fe fc33 	bl	801756c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018d06:	480d      	ldr	r0, [pc, #52]	; (8018d3c <prvInitialiseTaskLists+0x68>)
 8018d08:	f7fe fc30 	bl	801756c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018d0c:	480c      	ldr	r0, [pc, #48]	; (8018d40 <prvInitialiseTaskLists+0x6c>)
 8018d0e:	f7fe fc2d 	bl	801756c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018d12:	480c      	ldr	r0, [pc, #48]	; (8018d44 <prvInitialiseTaskLists+0x70>)
 8018d14:	f7fe fc2a 	bl	801756c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018d18:	480b      	ldr	r0, [pc, #44]	; (8018d48 <prvInitialiseTaskLists+0x74>)
 8018d1a:	f7fe fc27 	bl	801756c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018d1e:	4b0b      	ldr	r3, [pc, #44]	; (8018d4c <prvInitialiseTaskLists+0x78>)
 8018d20:	4a05      	ldr	r2, [pc, #20]	; (8018d38 <prvInitialiseTaskLists+0x64>)
 8018d22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018d24:	4b0a      	ldr	r3, [pc, #40]	; (8018d50 <prvInitialiseTaskLists+0x7c>)
 8018d26:	4a05      	ldr	r2, [pc, #20]	; (8018d3c <prvInitialiseTaskLists+0x68>)
 8018d28:	601a      	str	r2, [r3, #0]
}
 8018d2a:	bf00      	nop
 8018d2c:	3708      	adds	r7, #8
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	bd80      	pop	{r7, pc}
 8018d32:	bf00      	nop
 8018d34:	2400271c 	.word	0x2400271c
 8018d38:	24002b7c 	.word	0x24002b7c
 8018d3c:	24002b90 	.word	0x24002b90
 8018d40:	24002bac 	.word	0x24002bac
 8018d44:	24002bc0 	.word	0x24002bc0
 8018d48:	24002bd8 	.word	0x24002bd8
 8018d4c:	24002ba4 	.word	0x24002ba4
 8018d50:	24002ba8 	.word	0x24002ba8

08018d54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b082      	sub	sp, #8
 8018d58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018d5a:	e019      	b.n	8018d90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018d5c:	f000 fe0a 	bl	8019974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d60:	4b10      	ldr	r3, [pc, #64]	; (8018da4 <prvCheckTasksWaitingTermination+0x50>)
 8018d62:	68db      	ldr	r3, [r3, #12]
 8018d64:	68db      	ldr	r3, [r3, #12]
 8018d66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	3304      	adds	r3, #4
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	f7fe fc87 	bl	8017680 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018d72:	4b0d      	ldr	r3, [pc, #52]	; (8018da8 <prvCheckTasksWaitingTermination+0x54>)
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	3b01      	subs	r3, #1
 8018d78:	4a0b      	ldr	r2, [pc, #44]	; (8018da8 <prvCheckTasksWaitingTermination+0x54>)
 8018d7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018d7c:	4b0b      	ldr	r3, [pc, #44]	; (8018dac <prvCheckTasksWaitingTermination+0x58>)
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	3b01      	subs	r3, #1
 8018d82:	4a0a      	ldr	r2, [pc, #40]	; (8018dac <prvCheckTasksWaitingTermination+0x58>)
 8018d84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018d86:	f000 fe25 	bl	80199d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018d8a:	6878      	ldr	r0, [r7, #4]
 8018d8c:	f000 f810 	bl	8018db0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018d90:	4b06      	ldr	r3, [pc, #24]	; (8018dac <prvCheckTasksWaitingTermination+0x58>)
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d1e1      	bne.n	8018d5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018d98:	bf00      	nop
 8018d9a:	bf00      	nop
 8018d9c:	3708      	adds	r7, #8
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	bd80      	pop	{r7, pc}
 8018da2:	bf00      	nop
 8018da4:	24002bc0 	.word	0x24002bc0
 8018da8:	24002bec 	.word	0x24002bec
 8018dac:	24002bd4 	.word	0x24002bd4

08018db0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b084      	sub	sp, #16
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d108      	bne.n	8018dd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f000 ffc2 	bl	8019d50 <vPortFree>
				vPortFree( pxTCB );
 8018dcc:	6878      	ldr	r0, [r7, #4]
 8018dce:	f000 ffbf 	bl	8019d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018dd2:	e018      	b.n	8018e06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018dda:	2b01      	cmp	r3, #1
 8018ddc:	d103      	bne.n	8018de6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018dde:	6878      	ldr	r0, [r7, #4]
 8018de0:	f000 ffb6 	bl	8019d50 <vPortFree>
	}
 8018de4:	e00f      	b.n	8018e06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018dec:	2b02      	cmp	r3, #2
 8018dee:	d00a      	beq.n	8018e06 <prvDeleteTCB+0x56>
	__asm volatile
 8018df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018df4:	f383 8811 	msr	BASEPRI, r3
 8018df8:	f3bf 8f6f 	isb	sy
 8018dfc:	f3bf 8f4f 	dsb	sy
 8018e00:	60fb      	str	r3, [r7, #12]
}
 8018e02:	bf00      	nop
 8018e04:	e7fe      	b.n	8018e04 <prvDeleteTCB+0x54>
	}
 8018e06:	bf00      	nop
 8018e08:	3710      	adds	r7, #16
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	bd80      	pop	{r7, pc}
	...

08018e10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018e10:	b480      	push	{r7}
 8018e12:	b083      	sub	sp, #12
 8018e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018e16:	4b0c      	ldr	r3, [pc, #48]	; (8018e48 <prvResetNextTaskUnblockTime+0x38>)
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d104      	bne.n	8018e2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018e20:	4b0a      	ldr	r3, [pc, #40]	; (8018e4c <prvResetNextTaskUnblockTime+0x3c>)
 8018e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018e28:	e008      	b.n	8018e3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e2a:	4b07      	ldr	r3, [pc, #28]	; (8018e48 <prvResetNextTaskUnblockTime+0x38>)
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	68db      	ldr	r3, [r3, #12]
 8018e30:	68db      	ldr	r3, [r3, #12]
 8018e32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	685b      	ldr	r3, [r3, #4]
 8018e38:	4a04      	ldr	r2, [pc, #16]	; (8018e4c <prvResetNextTaskUnblockTime+0x3c>)
 8018e3a:	6013      	str	r3, [r2, #0]
}
 8018e3c:	bf00      	nop
 8018e3e:	370c      	adds	r7, #12
 8018e40:	46bd      	mov	sp, r7
 8018e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e46:	4770      	bx	lr
 8018e48:	24002ba4 	.word	0x24002ba4
 8018e4c:	24002c0c 	.word	0x24002c0c

08018e50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018e50:	b480      	push	{r7}
 8018e52:	b083      	sub	sp, #12
 8018e54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018e56:	4b0b      	ldr	r3, [pc, #44]	; (8018e84 <xTaskGetSchedulerState+0x34>)
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d102      	bne.n	8018e64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018e5e:	2301      	movs	r3, #1
 8018e60:	607b      	str	r3, [r7, #4]
 8018e62:	e008      	b.n	8018e76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018e64:	4b08      	ldr	r3, [pc, #32]	; (8018e88 <xTaskGetSchedulerState+0x38>)
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d102      	bne.n	8018e72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018e6c:	2302      	movs	r3, #2
 8018e6e:	607b      	str	r3, [r7, #4]
 8018e70:	e001      	b.n	8018e76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018e72:	2300      	movs	r3, #0
 8018e74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018e76:	687b      	ldr	r3, [r7, #4]
	}
 8018e78:	4618      	mov	r0, r3
 8018e7a:	370c      	adds	r7, #12
 8018e7c:	46bd      	mov	sp, r7
 8018e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e82:	4770      	bx	lr
 8018e84:	24002bf8 	.word	0x24002bf8
 8018e88:	24002c14 	.word	0x24002c14

08018e8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b086      	sub	sp, #24
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018e98:	2300      	movs	r3, #0
 8018e9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d056      	beq.n	8018f50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018ea2:	4b2e      	ldr	r3, [pc, #184]	; (8018f5c <xTaskPriorityDisinherit+0xd0>)
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	693a      	ldr	r2, [r7, #16]
 8018ea8:	429a      	cmp	r2, r3
 8018eaa:	d00a      	beq.n	8018ec2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eb0:	f383 8811 	msr	BASEPRI, r3
 8018eb4:	f3bf 8f6f 	isb	sy
 8018eb8:	f3bf 8f4f 	dsb	sy
 8018ebc:	60fb      	str	r3, [r7, #12]
}
 8018ebe:	bf00      	nop
 8018ec0:	e7fe      	b.n	8018ec0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018ec2:	693b      	ldr	r3, [r7, #16]
 8018ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d10a      	bne.n	8018ee0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ece:	f383 8811 	msr	BASEPRI, r3
 8018ed2:	f3bf 8f6f 	isb	sy
 8018ed6:	f3bf 8f4f 	dsb	sy
 8018eda:	60bb      	str	r3, [r7, #8]
}
 8018edc:	bf00      	nop
 8018ede:	e7fe      	b.n	8018ede <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018ee0:	693b      	ldr	r3, [r7, #16]
 8018ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ee4:	1e5a      	subs	r2, r3, #1
 8018ee6:	693b      	ldr	r3, [r7, #16]
 8018ee8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018eea:	693b      	ldr	r3, [r7, #16]
 8018eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eee:	693b      	ldr	r3, [r7, #16]
 8018ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ef2:	429a      	cmp	r2, r3
 8018ef4:	d02c      	beq.n	8018f50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018ef6:	693b      	ldr	r3, [r7, #16]
 8018ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d128      	bne.n	8018f50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018efe:	693b      	ldr	r3, [r7, #16]
 8018f00:	3304      	adds	r3, #4
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7fe fbbc 	bl	8017680 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018f08:	693b      	ldr	r3, [r7, #16]
 8018f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018f0c:	693b      	ldr	r3, [r7, #16]
 8018f0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018f10:	693b      	ldr	r3, [r7, #16]
 8018f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018f18:	693b      	ldr	r3, [r7, #16]
 8018f1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018f1c:	693b      	ldr	r3, [r7, #16]
 8018f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f20:	4b0f      	ldr	r3, [pc, #60]	; (8018f60 <xTaskPriorityDisinherit+0xd4>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	429a      	cmp	r2, r3
 8018f26:	d903      	bls.n	8018f30 <xTaskPriorityDisinherit+0xa4>
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f2c:	4a0c      	ldr	r2, [pc, #48]	; (8018f60 <xTaskPriorityDisinherit+0xd4>)
 8018f2e:	6013      	str	r3, [r2, #0]
 8018f30:	693b      	ldr	r3, [r7, #16]
 8018f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f34:	4613      	mov	r3, r2
 8018f36:	009b      	lsls	r3, r3, #2
 8018f38:	4413      	add	r3, r2
 8018f3a:	009b      	lsls	r3, r3, #2
 8018f3c:	4a09      	ldr	r2, [pc, #36]	; (8018f64 <xTaskPriorityDisinherit+0xd8>)
 8018f3e:	441a      	add	r2, r3
 8018f40:	693b      	ldr	r3, [r7, #16]
 8018f42:	3304      	adds	r3, #4
 8018f44:	4619      	mov	r1, r3
 8018f46:	4610      	mov	r0, r2
 8018f48:	f7fe fb3d 	bl	80175c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018f4c:	2301      	movs	r3, #1
 8018f4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018f50:	697b      	ldr	r3, [r7, #20]
	}
 8018f52:	4618      	mov	r0, r3
 8018f54:	3718      	adds	r7, #24
 8018f56:	46bd      	mov	sp, r7
 8018f58:	bd80      	pop	{r7, pc}
 8018f5a:	bf00      	nop
 8018f5c:	24002718 	.word	0x24002718
 8018f60:	24002bf4 	.word	0x24002bf4
 8018f64:	2400271c 	.word	0x2400271c

08018f68 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018f68:	b480      	push	{r7}
 8018f6a:	b083      	sub	sp, #12
 8018f6c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018f6e:	4b09      	ldr	r3, [pc, #36]	; (8018f94 <uxTaskResetEventItemValue+0x2c>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	699b      	ldr	r3, [r3, #24]
 8018f74:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018f76:	4b07      	ldr	r3, [pc, #28]	; (8018f94 <uxTaskResetEventItemValue+0x2c>)
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f7c:	4b05      	ldr	r3, [pc, #20]	; (8018f94 <uxTaskResetEventItemValue+0x2c>)
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018f84:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018f86:	687b      	ldr	r3, [r7, #4]
}
 8018f88:	4618      	mov	r0, r3
 8018f8a:	370c      	adds	r7, #12
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f92:	4770      	bx	lr
 8018f94:	24002718 	.word	0x24002718

08018f98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b084      	sub	sp, #16
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]
 8018fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018fa2:	4b21      	ldr	r3, [pc, #132]	; (8019028 <prvAddCurrentTaskToDelayedList+0x90>)
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018fa8:	4b20      	ldr	r3, [pc, #128]	; (801902c <prvAddCurrentTaskToDelayedList+0x94>)
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	3304      	adds	r3, #4
 8018fae:	4618      	mov	r0, r3
 8018fb0:	f7fe fb66 	bl	8017680 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018fba:	d10a      	bne.n	8018fd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d007      	beq.n	8018fd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018fc2:	4b1a      	ldr	r3, [pc, #104]	; (801902c <prvAddCurrentTaskToDelayedList+0x94>)
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	3304      	adds	r3, #4
 8018fc8:	4619      	mov	r1, r3
 8018fca:	4819      	ldr	r0, [pc, #100]	; (8019030 <prvAddCurrentTaskToDelayedList+0x98>)
 8018fcc:	f7fe fafb 	bl	80175c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018fd0:	e026      	b.n	8019020 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018fd2:	68fa      	ldr	r2, [r7, #12]
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	4413      	add	r3, r2
 8018fd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018fda:	4b14      	ldr	r3, [pc, #80]	; (801902c <prvAddCurrentTaskToDelayedList+0x94>)
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	68ba      	ldr	r2, [r7, #8]
 8018fe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018fe2:	68ba      	ldr	r2, [r7, #8]
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	429a      	cmp	r2, r3
 8018fe8:	d209      	bcs.n	8018ffe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018fea:	4b12      	ldr	r3, [pc, #72]	; (8019034 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018fec:	681a      	ldr	r2, [r3, #0]
 8018fee:	4b0f      	ldr	r3, [pc, #60]	; (801902c <prvAddCurrentTaskToDelayedList+0x94>)
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	3304      	adds	r3, #4
 8018ff4:	4619      	mov	r1, r3
 8018ff6:	4610      	mov	r0, r2
 8018ff8:	f7fe fb09 	bl	801760e <vListInsert>
}
 8018ffc:	e010      	b.n	8019020 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018ffe:	4b0e      	ldr	r3, [pc, #56]	; (8019038 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019000:	681a      	ldr	r2, [r3, #0]
 8019002:	4b0a      	ldr	r3, [pc, #40]	; (801902c <prvAddCurrentTaskToDelayedList+0x94>)
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	3304      	adds	r3, #4
 8019008:	4619      	mov	r1, r3
 801900a:	4610      	mov	r0, r2
 801900c:	f7fe faff 	bl	801760e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019010:	4b0a      	ldr	r3, [pc, #40]	; (801903c <prvAddCurrentTaskToDelayedList+0xa4>)
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	68ba      	ldr	r2, [r7, #8]
 8019016:	429a      	cmp	r2, r3
 8019018:	d202      	bcs.n	8019020 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801901a:	4a08      	ldr	r2, [pc, #32]	; (801903c <prvAddCurrentTaskToDelayedList+0xa4>)
 801901c:	68bb      	ldr	r3, [r7, #8]
 801901e:	6013      	str	r3, [r2, #0]
}
 8019020:	bf00      	nop
 8019022:	3710      	adds	r7, #16
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}
 8019028:	24002bf0 	.word	0x24002bf0
 801902c:	24002718 	.word	0x24002718
 8019030:	24002bd8 	.word	0x24002bd8
 8019034:	24002ba8 	.word	0x24002ba8
 8019038:	24002ba4 	.word	0x24002ba4
 801903c:	24002c0c 	.word	0x24002c0c

08019040 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019040:	b580      	push	{r7, lr}
 8019042:	b08a      	sub	sp, #40	; 0x28
 8019044:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019046:	2300      	movs	r3, #0
 8019048:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801904a:	f000 fb07 	bl	801965c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801904e:	4b1c      	ldr	r3, [pc, #112]	; (80190c0 <xTimerCreateTimerTask+0x80>)
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d021      	beq.n	801909a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019056:	2300      	movs	r3, #0
 8019058:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801905a:	2300      	movs	r3, #0
 801905c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801905e:	1d3a      	adds	r2, r7, #4
 8019060:	f107 0108 	add.w	r1, r7, #8
 8019064:	f107 030c 	add.w	r3, r7, #12
 8019068:	4618      	mov	r0, r3
 801906a:	f7fd fff9 	bl	8017060 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801906e:	6879      	ldr	r1, [r7, #4]
 8019070:	68bb      	ldr	r3, [r7, #8]
 8019072:	68fa      	ldr	r2, [r7, #12]
 8019074:	9202      	str	r2, [sp, #8]
 8019076:	9301      	str	r3, [sp, #4]
 8019078:	2302      	movs	r3, #2
 801907a:	9300      	str	r3, [sp, #0]
 801907c:	2300      	movs	r3, #0
 801907e:	460a      	mov	r2, r1
 8019080:	4910      	ldr	r1, [pc, #64]	; (80190c4 <xTimerCreateTimerTask+0x84>)
 8019082:	4811      	ldr	r0, [pc, #68]	; (80190c8 <xTimerCreateTimerTask+0x88>)
 8019084:	f7ff f812 	bl	80180ac <xTaskCreateStatic>
 8019088:	4603      	mov	r3, r0
 801908a:	4a10      	ldr	r2, [pc, #64]	; (80190cc <xTimerCreateTimerTask+0x8c>)
 801908c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801908e:	4b0f      	ldr	r3, [pc, #60]	; (80190cc <xTimerCreateTimerTask+0x8c>)
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d001      	beq.n	801909a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8019096:	2301      	movs	r3, #1
 8019098:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801909a:	697b      	ldr	r3, [r7, #20]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d10a      	bne.n	80190b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80190a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190a4:	f383 8811 	msr	BASEPRI, r3
 80190a8:	f3bf 8f6f 	isb	sy
 80190ac:	f3bf 8f4f 	dsb	sy
 80190b0:	613b      	str	r3, [r7, #16]
}
 80190b2:	bf00      	nop
 80190b4:	e7fe      	b.n	80190b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80190b6:	697b      	ldr	r3, [r7, #20]
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	3718      	adds	r7, #24
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	24002c48 	.word	0x24002c48
 80190c4:	0801ac78 	.word	0x0801ac78
 80190c8:	08019205 	.word	0x08019205
 80190cc:	24002c4c 	.word	0x24002c4c

080190d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b08a      	sub	sp, #40	; 0x28
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	60f8      	str	r0, [r7, #12]
 80190d8:	60b9      	str	r1, [r7, #8]
 80190da:	607a      	str	r2, [r7, #4]
 80190dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80190de:	2300      	movs	r3, #0
 80190e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d10a      	bne.n	80190fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80190e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190ec:	f383 8811 	msr	BASEPRI, r3
 80190f0:	f3bf 8f6f 	isb	sy
 80190f4:	f3bf 8f4f 	dsb	sy
 80190f8:	623b      	str	r3, [r7, #32]
}
 80190fa:	bf00      	nop
 80190fc:	e7fe      	b.n	80190fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80190fe:	4b1a      	ldr	r3, [pc, #104]	; (8019168 <xTimerGenericCommand+0x98>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d02a      	beq.n	801915c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019112:	68bb      	ldr	r3, [r7, #8]
 8019114:	2b05      	cmp	r3, #5
 8019116:	dc18      	bgt.n	801914a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019118:	f7ff fe9a 	bl	8018e50 <xTaskGetSchedulerState>
 801911c:	4603      	mov	r3, r0
 801911e:	2b02      	cmp	r3, #2
 8019120:	d109      	bne.n	8019136 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019122:	4b11      	ldr	r3, [pc, #68]	; (8019168 <xTimerGenericCommand+0x98>)
 8019124:	6818      	ldr	r0, [r3, #0]
 8019126:	f107 0110 	add.w	r1, r7, #16
 801912a:	2300      	movs	r3, #0
 801912c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801912e:	f7fe fbd5 	bl	80178dc <xQueueGenericSend>
 8019132:	6278      	str	r0, [r7, #36]	; 0x24
 8019134:	e012      	b.n	801915c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019136:	4b0c      	ldr	r3, [pc, #48]	; (8019168 <xTimerGenericCommand+0x98>)
 8019138:	6818      	ldr	r0, [r3, #0]
 801913a:	f107 0110 	add.w	r1, r7, #16
 801913e:	2300      	movs	r3, #0
 8019140:	2200      	movs	r2, #0
 8019142:	f7fe fbcb 	bl	80178dc <xQueueGenericSend>
 8019146:	6278      	str	r0, [r7, #36]	; 0x24
 8019148:	e008      	b.n	801915c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801914a:	4b07      	ldr	r3, [pc, #28]	; (8019168 <xTimerGenericCommand+0x98>)
 801914c:	6818      	ldr	r0, [r3, #0]
 801914e:	f107 0110 	add.w	r1, r7, #16
 8019152:	2300      	movs	r3, #0
 8019154:	683a      	ldr	r2, [r7, #0]
 8019156:	f7fe fcbf 	bl	8017ad8 <xQueueGenericSendFromISR>
 801915a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801915e:	4618      	mov	r0, r3
 8019160:	3728      	adds	r7, #40	; 0x28
 8019162:	46bd      	mov	sp, r7
 8019164:	bd80      	pop	{r7, pc}
 8019166:	bf00      	nop
 8019168:	24002c48 	.word	0x24002c48

0801916c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801916c:	b580      	push	{r7, lr}
 801916e:	b088      	sub	sp, #32
 8019170:	af02      	add	r7, sp, #8
 8019172:	6078      	str	r0, [r7, #4]
 8019174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019176:	4b22      	ldr	r3, [pc, #136]	; (8019200 <prvProcessExpiredTimer+0x94>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	68db      	ldr	r3, [r3, #12]
 801917c:	68db      	ldr	r3, [r3, #12]
 801917e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019180:	697b      	ldr	r3, [r7, #20]
 8019182:	3304      	adds	r3, #4
 8019184:	4618      	mov	r0, r3
 8019186:	f7fe fa7b 	bl	8017680 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801918a:	697b      	ldr	r3, [r7, #20]
 801918c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019190:	f003 0304 	and.w	r3, r3, #4
 8019194:	2b00      	cmp	r3, #0
 8019196:	d022      	beq.n	80191de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019198:	697b      	ldr	r3, [r7, #20]
 801919a:	699a      	ldr	r2, [r3, #24]
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	18d1      	adds	r1, r2, r3
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	683a      	ldr	r2, [r7, #0]
 80191a4:	6978      	ldr	r0, [r7, #20]
 80191a6:	f000 f8d1 	bl	801934c <prvInsertTimerInActiveList>
 80191aa:	4603      	mov	r3, r0
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d01f      	beq.n	80191f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80191b0:	2300      	movs	r3, #0
 80191b2:	9300      	str	r3, [sp, #0]
 80191b4:	2300      	movs	r3, #0
 80191b6:	687a      	ldr	r2, [r7, #4]
 80191b8:	2100      	movs	r1, #0
 80191ba:	6978      	ldr	r0, [r7, #20]
 80191bc:	f7ff ff88 	bl	80190d0 <xTimerGenericCommand>
 80191c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80191c2:	693b      	ldr	r3, [r7, #16]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d113      	bne.n	80191f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80191c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191cc:	f383 8811 	msr	BASEPRI, r3
 80191d0:	f3bf 8f6f 	isb	sy
 80191d4:	f3bf 8f4f 	dsb	sy
 80191d8:	60fb      	str	r3, [r7, #12]
}
 80191da:	bf00      	nop
 80191dc:	e7fe      	b.n	80191dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80191de:	697b      	ldr	r3, [r7, #20]
 80191e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191e4:	f023 0301 	bic.w	r3, r3, #1
 80191e8:	b2da      	uxtb	r2, r3
 80191ea:	697b      	ldr	r3, [r7, #20]
 80191ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80191f0:	697b      	ldr	r3, [r7, #20]
 80191f2:	6a1b      	ldr	r3, [r3, #32]
 80191f4:	6978      	ldr	r0, [r7, #20]
 80191f6:	4798      	blx	r3
}
 80191f8:	bf00      	nop
 80191fa:	3718      	adds	r7, #24
 80191fc:	46bd      	mov	sp, r7
 80191fe:	bd80      	pop	{r7, pc}
 8019200:	24002c40 	.word	0x24002c40

08019204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019204:	b580      	push	{r7, lr}
 8019206:	b084      	sub	sp, #16
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801920c:	f107 0308 	add.w	r3, r7, #8
 8019210:	4618      	mov	r0, r3
 8019212:	f000 f857 	bl	80192c4 <prvGetNextExpireTime>
 8019216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019218:	68bb      	ldr	r3, [r7, #8]
 801921a:	4619      	mov	r1, r3
 801921c:	68f8      	ldr	r0, [r7, #12]
 801921e:	f000 f803 	bl	8019228 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019222:	f000 f8d5 	bl	80193d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019226:	e7f1      	b.n	801920c <prvTimerTask+0x8>

08019228 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b084      	sub	sp, #16
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019232:	f7ff f977 	bl	8018524 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019236:	f107 0308 	add.w	r3, r7, #8
 801923a:	4618      	mov	r0, r3
 801923c:	f000 f866 	bl	801930c <prvSampleTimeNow>
 8019240:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019242:	68bb      	ldr	r3, [r7, #8]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d130      	bne.n	80192aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019248:	683b      	ldr	r3, [r7, #0]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d10a      	bne.n	8019264 <prvProcessTimerOrBlockTask+0x3c>
 801924e:	687a      	ldr	r2, [r7, #4]
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	429a      	cmp	r2, r3
 8019254:	d806      	bhi.n	8019264 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019256:	f7ff f973 	bl	8018540 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801925a:	68f9      	ldr	r1, [r7, #12]
 801925c:	6878      	ldr	r0, [r7, #4]
 801925e:	f7ff ff85 	bl	801916c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019262:	e024      	b.n	80192ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d008      	beq.n	801927c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801926a:	4b13      	ldr	r3, [pc, #76]	; (80192b8 <prvProcessTimerOrBlockTask+0x90>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	2b00      	cmp	r3, #0
 8019272:	d101      	bne.n	8019278 <prvProcessTimerOrBlockTask+0x50>
 8019274:	2301      	movs	r3, #1
 8019276:	e000      	b.n	801927a <prvProcessTimerOrBlockTask+0x52>
 8019278:	2300      	movs	r3, #0
 801927a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801927c:	4b0f      	ldr	r3, [pc, #60]	; (80192bc <prvProcessTimerOrBlockTask+0x94>)
 801927e:	6818      	ldr	r0, [r3, #0]
 8019280:	687a      	ldr	r2, [r7, #4]
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	1ad3      	subs	r3, r2, r3
 8019286:	683a      	ldr	r2, [r7, #0]
 8019288:	4619      	mov	r1, r3
 801928a:	f7fe fedb 	bl	8018044 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801928e:	f7ff f957 	bl	8018540 <xTaskResumeAll>
 8019292:	4603      	mov	r3, r0
 8019294:	2b00      	cmp	r3, #0
 8019296:	d10a      	bne.n	80192ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019298:	4b09      	ldr	r3, [pc, #36]	; (80192c0 <prvProcessTimerOrBlockTask+0x98>)
 801929a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801929e:	601a      	str	r2, [r3, #0]
 80192a0:	f3bf 8f4f 	dsb	sy
 80192a4:	f3bf 8f6f 	isb	sy
}
 80192a8:	e001      	b.n	80192ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80192aa:	f7ff f949 	bl	8018540 <xTaskResumeAll>
}
 80192ae:	bf00      	nop
 80192b0:	3710      	adds	r7, #16
 80192b2:	46bd      	mov	sp, r7
 80192b4:	bd80      	pop	{r7, pc}
 80192b6:	bf00      	nop
 80192b8:	24002c44 	.word	0x24002c44
 80192bc:	24002c48 	.word	0x24002c48
 80192c0:	e000ed04 	.word	0xe000ed04

080192c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80192c4:	b480      	push	{r7}
 80192c6:	b085      	sub	sp, #20
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80192cc:	4b0e      	ldr	r3, [pc, #56]	; (8019308 <prvGetNextExpireTime+0x44>)
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d101      	bne.n	80192da <prvGetNextExpireTime+0x16>
 80192d6:	2201      	movs	r2, #1
 80192d8:	e000      	b.n	80192dc <prvGetNextExpireTime+0x18>
 80192da:	2200      	movs	r2, #0
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d105      	bne.n	80192f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80192e8:	4b07      	ldr	r3, [pc, #28]	; (8019308 <prvGetNextExpireTime+0x44>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	68db      	ldr	r3, [r3, #12]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	60fb      	str	r3, [r7, #12]
 80192f2:	e001      	b.n	80192f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80192f4:	2300      	movs	r3, #0
 80192f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80192f8:	68fb      	ldr	r3, [r7, #12]
}
 80192fa:	4618      	mov	r0, r3
 80192fc:	3714      	adds	r7, #20
 80192fe:	46bd      	mov	sp, r7
 8019300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019304:	4770      	bx	lr
 8019306:	bf00      	nop
 8019308:	24002c40 	.word	0x24002c40

0801930c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b084      	sub	sp, #16
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019314:	f7ff f9b2 	bl	801867c <xTaskGetTickCount>
 8019318:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801931a:	4b0b      	ldr	r3, [pc, #44]	; (8019348 <prvSampleTimeNow+0x3c>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	68fa      	ldr	r2, [r7, #12]
 8019320:	429a      	cmp	r2, r3
 8019322:	d205      	bcs.n	8019330 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019324:	f000 f936 	bl	8019594 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	2201      	movs	r2, #1
 801932c:	601a      	str	r2, [r3, #0]
 801932e:	e002      	b.n	8019336 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	2200      	movs	r2, #0
 8019334:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019336:	4a04      	ldr	r2, [pc, #16]	; (8019348 <prvSampleTimeNow+0x3c>)
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801933c:	68fb      	ldr	r3, [r7, #12]
}
 801933e:	4618      	mov	r0, r3
 8019340:	3710      	adds	r7, #16
 8019342:	46bd      	mov	sp, r7
 8019344:	bd80      	pop	{r7, pc}
 8019346:	bf00      	nop
 8019348:	24002c50 	.word	0x24002c50

0801934c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b086      	sub	sp, #24
 8019350:	af00      	add	r7, sp, #0
 8019352:	60f8      	str	r0, [r7, #12]
 8019354:	60b9      	str	r1, [r7, #8]
 8019356:	607a      	str	r2, [r7, #4]
 8019358:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801935a:	2300      	movs	r3, #0
 801935c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	68ba      	ldr	r2, [r7, #8]
 8019362:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	68fa      	ldr	r2, [r7, #12]
 8019368:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801936a:	68ba      	ldr	r2, [r7, #8]
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	429a      	cmp	r2, r3
 8019370:	d812      	bhi.n	8019398 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019372:	687a      	ldr	r2, [r7, #4]
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	1ad2      	subs	r2, r2, r3
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	699b      	ldr	r3, [r3, #24]
 801937c:	429a      	cmp	r2, r3
 801937e:	d302      	bcc.n	8019386 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019380:	2301      	movs	r3, #1
 8019382:	617b      	str	r3, [r7, #20]
 8019384:	e01b      	b.n	80193be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019386:	4b10      	ldr	r3, [pc, #64]	; (80193c8 <prvInsertTimerInActiveList+0x7c>)
 8019388:	681a      	ldr	r2, [r3, #0]
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	3304      	adds	r3, #4
 801938e:	4619      	mov	r1, r3
 8019390:	4610      	mov	r0, r2
 8019392:	f7fe f93c 	bl	801760e <vListInsert>
 8019396:	e012      	b.n	80193be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019398:	687a      	ldr	r2, [r7, #4]
 801939a:	683b      	ldr	r3, [r7, #0]
 801939c:	429a      	cmp	r2, r3
 801939e:	d206      	bcs.n	80193ae <prvInsertTimerInActiveList+0x62>
 80193a0:	68ba      	ldr	r2, [r7, #8]
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	429a      	cmp	r2, r3
 80193a6:	d302      	bcc.n	80193ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80193a8:	2301      	movs	r3, #1
 80193aa:	617b      	str	r3, [r7, #20]
 80193ac:	e007      	b.n	80193be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80193ae:	4b07      	ldr	r3, [pc, #28]	; (80193cc <prvInsertTimerInActiveList+0x80>)
 80193b0:	681a      	ldr	r2, [r3, #0]
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	3304      	adds	r3, #4
 80193b6:	4619      	mov	r1, r3
 80193b8:	4610      	mov	r0, r2
 80193ba:	f7fe f928 	bl	801760e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80193be:	697b      	ldr	r3, [r7, #20]
}
 80193c0:	4618      	mov	r0, r3
 80193c2:	3718      	adds	r7, #24
 80193c4:	46bd      	mov	sp, r7
 80193c6:	bd80      	pop	{r7, pc}
 80193c8:	24002c44 	.word	0x24002c44
 80193cc:	24002c40 	.word	0x24002c40

080193d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b08e      	sub	sp, #56	; 0x38
 80193d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80193d6:	e0ca      	b.n	801956e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	da18      	bge.n	8019410 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80193de:	1d3b      	adds	r3, r7, #4
 80193e0:	3304      	adds	r3, #4
 80193e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80193e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d10a      	bne.n	8019400 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80193ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193ee:	f383 8811 	msr	BASEPRI, r3
 80193f2:	f3bf 8f6f 	isb	sy
 80193f6:	f3bf 8f4f 	dsb	sy
 80193fa:	61fb      	str	r3, [r7, #28]
}
 80193fc:	bf00      	nop
 80193fe:	e7fe      	b.n	80193fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019406:	6850      	ldr	r0, [r2, #4]
 8019408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801940a:	6892      	ldr	r2, [r2, #8]
 801940c:	4611      	mov	r1, r2
 801940e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	2b00      	cmp	r3, #0
 8019414:	f2c0 80aa 	blt.w	801956c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801941e:	695b      	ldr	r3, [r3, #20]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d004      	beq.n	801942e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019426:	3304      	adds	r3, #4
 8019428:	4618      	mov	r0, r3
 801942a:	f7fe f929 	bl	8017680 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801942e:	463b      	mov	r3, r7
 8019430:	4618      	mov	r0, r3
 8019432:	f7ff ff6b 	bl	801930c <prvSampleTimeNow>
 8019436:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	2b09      	cmp	r3, #9
 801943c:	f200 8097 	bhi.w	801956e <prvProcessReceivedCommands+0x19e>
 8019440:	a201      	add	r2, pc, #4	; (adr r2, 8019448 <prvProcessReceivedCommands+0x78>)
 8019442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019446:	bf00      	nop
 8019448:	08019471 	.word	0x08019471
 801944c:	08019471 	.word	0x08019471
 8019450:	08019471 	.word	0x08019471
 8019454:	080194e5 	.word	0x080194e5
 8019458:	080194f9 	.word	0x080194f9
 801945c:	08019543 	.word	0x08019543
 8019460:	08019471 	.word	0x08019471
 8019464:	08019471 	.word	0x08019471
 8019468:	080194e5 	.word	0x080194e5
 801946c:	080194f9 	.word	0x080194f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019476:	f043 0301 	orr.w	r3, r3, #1
 801947a:	b2da      	uxtb	r2, r3
 801947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801947e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019482:	68ba      	ldr	r2, [r7, #8]
 8019484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019486:	699b      	ldr	r3, [r3, #24]
 8019488:	18d1      	adds	r1, r2, r3
 801948a:	68bb      	ldr	r3, [r7, #8]
 801948c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801948e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019490:	f7ff ff5c 	bl	801934c <prvInsertTimerInActiveList>
 8019494:	4603      	mov	r3, r0
 8019496:	2b00      	cmp	r3, #0
 8019498:	d069      	beq.n	801956e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801949c:	6a1b      	ldr	r3, [r3, #32]
 801949e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80194a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194a8:	f003 0304 	and.w	r3, r3, #4
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d05e      	beq.n	801956e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80194b0:	68ba      	ldr	r2, [r7, #8]
 80194b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194b4:	699b      	ldr	r3, [r3, #24]
 80194b6:	441a      	add	r2, r3
 80194b8:	2300      	movs	r3, #0
 80194ba:	9300      	str	r3, [sp, #0]
 80194bc:	2300      	movs	r3, #0
 80194be:	2100      	movs	r1, #0
 80194c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194c2:	f7ff fe05 	bl	80190d0 <xTimerGenericCommand>
 80194c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80194c8:	6a3b      	ldr	r3, [r7, #32]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d14f      	bne.n	801956e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80194ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194d2:	f383 8811 	msr	BASEPRI, r3
 80194d6:	f3bf 8f6f 	isb	sy
 80194da:	f3bf 8f4f 	dsb	sy
 80194de:	61bb      	str	r3, [r7, #24]
}
 80194e0:	bf00      	nop
 80194e2:	e7fe      	b.n	80194e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80194e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194ea:	f023 0301 	bic.w	r3, r3, #1
 80194ee:	b2da      	uxtb	r2, r3
 80194f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80194f6:	e03a      	b.n	801956e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80194f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194fe:	f043 0301 	orr.w	r3, r3, #1
 8019502:	b2da      	uxtb	r2, r3
 8019504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801950a:	68ba      	ldr	r2, [r7, #8]
 801950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801950e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019512:	699b      	ldr	r3, [r3, #24]
 8019514:	2b00      	cmp	r3, #0
 8019516:	d10a      	bne.n	801952e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801951c:	f383 8811 	msr	BASEPRI, r3
 8019520:	f3bf 8f6f 	isb	sy
 8019524:	f3bf 8f4f 	dsb	sy
 8019528:	617b      	str	r3, [r7, #20]
}
 801952a:	bf00      	nop
 801952c:	e7fe      	b.n	801952c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019530:	699a      	ldr	r2, [r3, #24]
 8019532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019534:	18d1      	adds	r1, r2, r3
 8019536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801953a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801953c:	f7ff ff06 	bl	801934c <prvInsertTimerInActiveList>
					break;
 8019540:	e015      	b.n	801956e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019548:	f003 0302 	and.w	r3, r3, #2
 801954c:	2b00      	cmp	r3, #0
 801954e:	d103      	bne.n	8019558 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019552:	f000 fbfd 	bl	8019d50 <vPortFree>
 8019556:	e00a      	b.n	801956e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801955a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801955e:	f023 0301 	bic.w	r3, r3, #1
 8019562:	b2da      	uxtb	r2, r3
 8019564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801956a:	e000      	b.n	801956e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801956c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801956e:	4b08      	ldr	r3, [pc, #32]	; (8019590 <prvProcessReceivedCommands+0x1c0>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	1d39      	adds	r1, r7, #4
 8019574:	2200      	movs	r2, #0
 8019576:	4618      	mov	r0, r3
 8019578:	f7fe fb4a 	bl	8017c10 <xQueueReceive>
 801957c:	4603      	mov	r3, r0
 801957e:	2b00      	cmp	r3, #0
 8019580:	f47f af2a 	bne.w	80193d8 <prvProcessReceivedCommands+0x8>
	}
}
 8019584:	bf00      	nop
 8019586:	bf00      	nop
 8019588:	3730      	adds	r7, #48	; 0x30
 801958a:	46bd      	mov	sp, r7
 801958c:	bd80      	pop	{r7, pc}
 801958e:	bf00      	nop
 8019590:	24002c48 	.word	0x24002c48

08019594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b088      	sub	sp, #32
 8019598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801959a:	e048      	b.n	801962e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801959c:	4b2d      	ldr	r3, [pc, #180]	; (8019654 <prvSwitchTimerLists+0xc0>)
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	68db      	ldr	r3, [r3, #12]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80195a6:	4b2b      	ldr	r3, [pc, #172]	; (8019654 <prvSwitchTimerLists+0xc0>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	68db      	ldr	r3, [r3, #12]
 80195ac:	68db      	ldr	r3, [r3, #12]
 80195ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	3304      	adds	r3, #4
 80195b4:	4618      	mov	r0, r3
 80195b6:	f7fe f863 	bl	8017680 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	6a1b      	ldr	r3, [r3, #32]
 80195be:	68f8      	ldr	r0, [r7, #12]
 80195c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80195c8:	f003 0304 	and.w	r3, r3, #4
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d02e      	beq.n	801962e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	699b      	ldr	r3, [r3, #24]
 80195d4:	693a      	ldr	r2, [r7, #16]
 80195d6:	4413      	add	r3, r2
 80195d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80195da:	68ba      	ldr	r2, [r7, #8]
 80195dc:	693b      	ldr	r3, [r7, #16]
 80195de:	429a      	cmp	r2, r3
 80195e0:	d90e      	bls.n	8019600 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	68ba      	ldr	r2, [r7, #8]
 80195e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	68fa      	ldr	r2, [r7, #12]
 80195ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80195ee:	4b19      	ldr	r3, [pc, #100]	; (8019654 <prvSwitchTimerLists+0xc0>)
 80195f0:	681a      	ldr	r2, [r3, #0]
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	3304      	adds	r3, #4
 80195f6:	4619      	mov	r1, r3
 80195f8:	4610      	mov	r0, r2
 80195fa:	f7fe f808 	bl	801760e <vListInsert>
 80195fe:	e016      	b.n	801962e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019600:	2300      	movs	r3, #0
 8019602:	9300      	str	r3, [sp, #0]
 8019604:	2300      	movs	r3, #0
 8019606:	693a      	ldr	r2, [r7, #16]
 8019608:	2100      	movs	r1, #0
 801960a:	68f8      	ldr	r0, [r7, #12]
 801960c:	f7ff fd60 	bl	80190d0 <xTimerGenericCommand>
 8019610:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d10a      	bne.n	801962e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801961c:	f383 8811 	msr	BASEPRI, r3
 8019620:	f3bf 8f6f 	isb	sy
 8019624:	f3bf 8f4f 	dsb	sy
 8019628:	603b      	str	r3, [r7, #0]
}
 801962a:	bf00      	nop
 801962c:	e7fe      	b.n	801962c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801962e:	4b09      	ldr	r3, [pc, #36]	; (8019654 <prvSwitchTimerLists+0xc0>)
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	2b00      	cmp	r3, #0
 8019636:	d1b1      	bne.n	801959c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019638:	4b06      	ldr	r3, [pc, #24]	; (8019654 <prvSwitchTimerLists+0xc0>)
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801963e:	4b06      	ldr	r3, [pc, #24]	; (8019658 <prvSwitchTimerLists+0xc4>)
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	4a04      	ldr	r2, [pc, #16]	; (8019654 <prvSwitchTimerLists+0xc0>)
 8019644:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019646:	4a04      	ldr	r2, [pc, #16]	; (8019658 <prvSwitchTimerLists+0xc4>)
 8019648:	697b      	ldr	r3, [r7, #20]
 801964a:	6013      	str	r3, [r2, #0]
}
 801964c:	bf00      	nop
 801964e:	3718      	adds	r7, #24
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}
 8019654:	24002c40 	.word	0x24002c40
 8019658:	24002c44 	.word	0x24002c44

0801965c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b082      	sub	sp, #8
 8019660:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019662:	f000 f987 	bl	8019974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019666:	4b15      	ldr	r3, [pc, #84]	; (80196bc <prvCheckForValidListAndQueue+0x60>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d120      	bne.n	80196b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801966e:	4814      	ldr	r0, [pc, #80]	; (80196c0 <prvCheckForValidListAndQueue+0x64>)
 8019670:	f7fd ff7c 	bl	801756c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019674:	4813      	ldr	r0, [pc, #76]	; (80196c4 <prvCheckForValidListAndQueue+0x68>)
 8019676:	f7fd ff79 	bl	801756c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801967a:	4b13      	ldr	r3, [pc, #76]	; (80196c8 <prvCheckForValidListAndQueue+0x6c>)
 801967c:	4a10      	ldr	r2, [pc, #64]	; (80196c0 <prvCheckForValidListAndQueue+0x64>)
 801967e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019680:	4b12      	ldr	r3, [pc, #72]	; (80196cc <prvCheckForValidListAndQueue+0x70>)
 8019682:	4a10      	ldr	r2, [pc, #64]	; (80196c4 <prvCheckForValidListAndQueue+0x68>)
 8019684:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019686:	2300      	movs	r3, #0
 8019688:	9300      	str	r3, [sp, #0]
 801968a:	4b11      	ldr	r3, [pc, #68]	; (80196d0 <prvCheckForValidListAndQueue+0x74>)
 801968c:	4a11      	ldr	r2, [pc, #68]	; (80196d4 <prvCheckForValidListAndQueue+0x78>)
 801968e:	2110      	movs	r1, #16
 8019690:	200a      	movs	r0, #10
 8019692:	f7fe f887 	bl	80177a4 <xQueueGenericCreateStatic>
 8019696:	4603      	mov	r3, r0
 8019698:	4a08      	ldr	r2, [pc, #32]	; (80196bc <prvCheckForValidListAndQueue+0x60>)
 801969a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801969c:	4b07      	ldr	r3, [pc, #28]	; (80196bc <prvCheckForValidListAndQueue+0x60>)
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d005      	beq.n	80196b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80196a4:	4b05      	ldr	r3, [pc, #20]	; (80196bc <prvCheckForValidListAndQueue+0x60>)
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	490b      	ldr	r1, [pc, #44]	; (80196d8 <prvCheckForValidListAndQueue+0x7c>)
 80196aa:	4618      	mov	r0, r3
 80196ac:	f7fe fca0 	bl	8017ff0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80196b0:	f000 f990 	bl	80199d4 <vPortExitCritical>
}
 80196b4:	bf00      	nop
 80196b6:	46bd      	mov	sp, r7
 80196b8:	bd80      	pop	{r7, pc}
 80196ba:	bf00      	nop
 80196bc:	24002c48 	.word	0x24002c48
 80196c0:	24002c18 	.word	0x24002c18
 80196c4:	24002c2c 	.word	0x24002c2c
 80196c8:	24002c40 	.word	0x24002c40
 80196cc:	24002c44 	.word	0x24002c44
 80196d0:	24002cf4 	.word	0x24002cf4
 80196d4:	24002c54 	.word	0x24002c54
 80196d8:	0801ac80 	.word	0x0801ac80

080196dc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80196dc:	b580      	push	{r7, lr}
 80196de:	b08a      	sub	sp, #40	; 0x28
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	60f8      	str	r0, [r7, #12]
 80196e4:	60b9      	str	r1, [r7, #8]
 80196e6:	607a      	str	r2, [r7, #4]
 80196e8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80196ea:	f06f 0301 	mvn.w	r3, #1
 80196ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80196f4:	68bb      	ldr	r3, [r7, #8]
 80196f6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80196fc:	4b06      	ldr	r3, [pc, #24]	; (8019718 <xTimerPendFunctionCallFromISR+0x3c>)
 80196fe:	6818      	ldr	r0, [r3, #0]
 8019700:	f107 0114 	add.w	r1, r7, #20
 8019704:	2300      	movs	r3, #0
 8019706:	683a      	ldr	r2, [r7, #0]
 8019708:	f7fe f9e6 	bl	8017ad8 <xQueueGenericSendFromISR>
 801970c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019710:	4618      	mov	r0, r3
 8019712:	3728      	adds	r7, #40	; 0x28
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}
 8019718:	24002c48 	.word	0x24002c48

0801971c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801971c:	b480      	push	{r7}
 801971e:	b085      	sub	sp, #20
 8019720:	af00      	add	r7, sp, #0
 8019722:	60f8      	str	r0, [r7, #12]
 8019724:	60b9      	str	r1, [r7, #8]
 8019726:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	3b04      	subs	r3, #4
 801972c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	3b04      	subs	r3, #4
 801973a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801973c:	68bb      	ldr	r3, [r7, #8]
 801973e:	f023 0201 	bic.w	r2, r3, #1
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	3b04      	subs	r3, #4
 801974a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801974c:	4a0c      	ldr	r2, [pc, #48]	; (8019780 <pxPortInitialiseStack+0x64>)
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	3b14      	subs	r3, #20
 8019756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019758:	687a      	ldr	r2, [r7, #4]
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	3b04      	subs	r3, #4
 8019762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	f06f 0202 	mvn.w	r2, #2
 801976a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	3b20      	subs	r3, #32
 8019770:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019772:	68fb      	ldr	r3, [r7, #12]
}
 8019774:	4618      	mov	r0, r3
 8019776:	3714      	adds	r7, #20
 8019778:	46bd      	mov	sp, r7
 801977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977e:	4770      	bx	lr
 8019780:	08019785 	.word	0x08019785

08019784 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019784:	b480      	push	{r7}
 8019786:	b085      	sub	sp, #20
 8019788:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801978a:	2300      	movs	r3, #0
 801978c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801978e:	4b12      	ldr	r3, [pc, #72]	; (80197d8 <prvTaskExitError+0x54>)
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019796:	d00a      	beq.n	80197ae <prvTaskExitError+0x2a>
	__asm volatile
 8019798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801979c:	f383 8811 	msr	BASEPRI, r3
 80197a0:	f3bf 8f6f 	isb	sy
 80197a4:	f3bf 8f4f 	dsb	sy
 80197a8:	60fb      	str	r3, [r7, #12]
}
 80197aa:	bf00      	nop
 80197ac:	e7fe      	b.n	80197ac <prvTaskExitError+0x28>
	__asm volatile
 80197ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197b2:	f383 8811 	msr	BASEPRI, r3
 80197b6:	f3bf 8f6f 	isb	sy
 80197ba:	f3bf 8f4f 	dsb	sy
 80197be:	60bb      	str	r3, [r7, #8]
}
 80197c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80197c2:	bf00      	nop
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d0fc      	beq.n	80197c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80197ca:	bf00      	nop
 80197cc:	bf00      	nop
 80197ce:	3714      	adds	r7, #20
 80197d0:	46bd      	mov	sp, r7
 80197d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197d6:	4770      	bx	lr
 80197d8:	240000d0 	.word	0x240000d0
 80197dc:	00000000 	.word	0x00000000

080197e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80197e0:	4b07      	ldr	r3, [pc, #28]	; (8019800 <pxCurrentTCBConst2>)
 80197e2:	6819      	ldr	r1, [r3, #0]
 80197e4:	6808      	ldr	r0, [r1, #0]
 80197e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ea:	f380 8809 	msr	PSP, r0
 80197ee:	f3bf 8f6f 	isb	sy
 80197f2:	f04f 0000 	mov.w	r0, #0
 80197f6:	f380 8811 	msr	BASEPRI, r0
 80197fa:	4770      	bx	lr
 80197fc:	f3af 8000 	nop.w

08019800 <pxCurrentTCBConst2>:
 8019800:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019804:	bf00      	nop
 8019806:	bf00      	nop

08019808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019808:	4808      	ldr	r0, [pc, #32]	; (801982c <prvPortStartFirstTask+0x24>)
 801980a:	6800      	ldr	r0, [r0, #0]
 801980c:	6800      	ldr	r0, [r0, #0]
 801980e:	f380 8808 	msr	MSP, r0
 8019812:	f04f 0000 	mov.w	r0, #0
 8019816:	f380 8814 	msr	CONTROL, r0
 801981a:	b662      	cpsie	i
 801981c:	b661      	cpsie	f
 801981e:	f3bf 8f4f 	dsb	sy
 8019822:	f3bf 8f6f 	isb	sy
 8019826:	df00      	svc	0
 8019828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801982a:	bf00      	nop
 801982c:	e000ed08 	.word	0xe000ed08

08019830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b086      	sub	sp, #24
 8019834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019836:	4b46      	ldr	r3, [pc, #280]	; (8019950 <xPortStartScheduler+0x120>)
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	4a46      	ldr	r2, [pc, #280]	; (8019954 <xPortStartScheduler+0x124>)
 801983c:	4293      	cmp	r3, r2
 801983e:	d10a      	bne.n	8019856 <xPortStartScheduler+0x26>
	__asm volatile
 8019840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019844:	f383 8811 	msr	BASEPRI, r3
 8019848:	f3bf 8f6f 	isb	sy
 801984c:	f3bf 8f4f 	dsb	sy
 8019850:	613b      	str	r3, [r7, #16]
}
 8019852:	bf00      	nop
 8019854:	e7fe      	b.n	8019854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019856:	4b3e      	ldr	r3, [pc, #248]	; (8019950 <xPortStartScheduler+0x120>)
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	4a3f      	ldr	r2, [pc, #252]	; (8019958 <xPortStartScheduler+0x128>)
 801985c:	4293      	cmp	r3, r2
 801985e:	d10a      	bne.n	8019876 <xPortStartScheduler+0x46>
	__asm volatile
 8019860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019864:	f383 8811 	msr	BASEPRI, r3
 8019868:	f3bf 8f6f 	isb	sy
 801986c:	f3bf 8f4f 	dsb	sy
 8019870:	60fb      	str	r3, [r7, #12]
}
 8019872:	bf00      	nop
 8019874:	e7fe      	b.n	8019874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019876:	4b39      	ldr	r3, [pc, #228]	; (801995c <xPortStartScheduler+0x12c>)
 8019878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801987a:	697b      	ldr	r3, [r7, #20]
 801987c:	781b      	ldrb	r3, [r3, #0]
 801987e:	b2db      	uxtb	r3, r3
 8019880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019882:	697b      	ldr	r3, [r7, #20]
 8019884:	22ff      	movs	r2, #255	; 0xff
 8019886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019888:	697b      	ldr	r3, [r7, #20]
 801988a:	781b      	ldrb	r3, [r3, #0]
 801988c:	b2db      	uxtb	r3, r3
 801988e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019890:	78fb      	ldrb	r3, [r7, #3]
 8019892:	b2db      	uxtb	r3, r3
 8019894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019898:	b2da      	uxtb	r2, r3
 801989a:	4b31      	ldr	r3, [pc, #196]	; (8019960 <xPortStartScheduler+0x130>)
 801989c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801989e:	4b31      	ldr	r3, [pc, #196]	; (8019964 <xPortStartScheduler+0x134>)
 80198a0:	2207      	movs	r2, #7
 80198a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80198a4:	e009      	b.n	80198ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80198a6:	4b2f      	ldr	r3, [pc, #188]	; (8019964 <xPortStartScheduler+0x134>)
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	3b01      	subs	r3, #1
 80198ac:	4a2d      	ldr	r2, [pc, #180]	; (8019964 <xPortStartScheduler+0x134>)
 80198ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80198b0:	78fb      	ldrb	r3, [r7, #3]
 80198b2:	b2db      	uxtb	r3, r3
 80198b4:	005b      	lsls	r3, r3, #1
 80198b6:	b2db      	uxtb	r3, r3
 80198b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80198ba:	78fb      	ldrb	r3, [r7, #3]
 80198bc:	b2db      	uxtb	r3, r3
 80198be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80198c2:	2b80      	cmp	r3, #128	; 0x80
 80198c4:	d0ef      	beq.n	80198a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80198c6:	4b27      	ldr	r3, [pc, #156]	; (8019964 <xPortStartScheduler+0x134>)
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	f1c3 0307 	rsb	r3, r3, #7
 80198ce:	2b04      	cmp	r3, #4
 80198d0:	d00a      	beq.n	80198e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80198d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198d6:	f383 8811 	msr	BASEPRI, r3
 80198da:	f3bf 8f6f 	isb	sy
 80198de:	f3bf 8f4f 	dsb	sy
 80198e2:	60bb      	str	r3, [r7, #8]
}
 80198e4:	bf00      	nop
 80198e6:	e7fe      	b.n	80198e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80198e8:	4b1e      	ldr	r3, [pc, #120]	; (8019964 <xPortStartScheduler+0x134>)
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	021b      	lsls	r3, r3, #8
 80198ee:	4a1d      	ldr	r2, [pc, #116]	; (8019964 <xPortStartScheduler+0x134>)
 80198f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80198f2:	4b1c      	ldr	r3, [pc, #112]	; (8019964 <xPortStartScheduler+0x134>)
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80198fa:	4a1a      	ldr	r2, [pc, #104]	; (8019964 <xPortStartScheduler+0x134>)
 80198fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	b2da      	uxtb	r2, r3
 8019902:	697b      	ldr	r3, [r7, #20]
 8019904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019906:	4b18      	ldr	r3, [pc, #96]	; (8019968 <xPortStartScheduler+0x138>)
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	4a17      	ldr	r2, [pc, #92]	; (8019968 <xPortStartScheduler+0x138>)
 801990c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019912:	4b15      	ldr	r3, [pc, #84]	; (8019968 <xPortStartScheduler+0x138>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	4a14      	ldr	r2, [pc, #80]	; (8019968 <xPortStartScheduler+0x138>)
 8019918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801991c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801991e:	f000 f8dd 	bl	8019adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019922:	4b12      	ldr	r3, [pc, #72]	; (801996c <xPortStartScheduler+0x13c>)
 8019924:	2200      	movs	r2, #0
 8019926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019928:	f000 f8fc 	bl	8019b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801992c:	4b10      	ldr	r3, [pc, #64]	; (8019970 <xPortStartScheduler+0x140>)
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	4a0f      	ldr	r2, [pc, #60]	; (8019970 <xPortStartScheduler+0x140>)
 8019932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019938:	f7ff ff66 	bl	8019808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801993c:	f7fe ff70 	bl	8018820 <vTaskSwitchContext>
	prvTaskExitError();
 8019940:	f7ff ff20 	bl	8019784 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019944:	2300      	movs	r3, #0
}
 8019946:	4618      	mov	r0, r3
 8019948:	3718      	adds	r7, #24
 801994a:	46bd      	mov	sp, r7
 801994c:	bd80      	pop	{r7, pc}
 801994e:	bf00      	nop
 8019950:	e000ed00 	.word	0xe000ed00
 8019954:	410fc271 	.word	0x410fc271
 8019958:	410fc270 	.word	0x410fc270
 801995c:	e000e400 	.word	0xe000e400
 8019960:	24002d44 	.word	0x24002d44
 8019964:	24002d48 	.word	0x24002d48
 8019968:	e000ed20 	.word	0xe000ed20
 801996c:	240000d0 	.word	0x240000d0
 8019970:	e000ef34 	.word	0xe000ef34

08019974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019974:	b480      	push	{r7}
 8019976:	b083      	sub	sp, #12
 8019978:	af00      	add	r7, sp, #0
	__asm volatile
 801997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801997e:	f383 8811 	msr	BASEPRI, r3
 8019982:	f3bf 8f6f 	isb	sy
 8019986:	f3bf 8f4f 	dsb	sy
 801998a:	607b      	str	r3, [r7, #4]
}
 801998c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801998e:	4b0f      	ldr	r3, [pc, #60]	; (80199cc <vPortEnterCritical+0x58>)
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	3301      	adds	r3, #1
 8019994:	4a0d      	ldr	r2, [pc, #52]	; (80199cc <vPortEnterCritical+0x58>)
 8019996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019998:	4b0c      	ldr	r3, [pc, #48]	; (80199cc <vPortEnterCritical+0x58>)
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	2b01      	cmp	r3, #1
 801999e:	d10f      	bne.n	80199c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80199a0:	4b0b      	ldr	r3, [pc, #44]	; (80199d0 <vPortEnterCritical+0x5c>)
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	b2db      	uxtb	r3, r3
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d00a      	beq.n	80199c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80199aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199ae:	f383 8811 	msr	BASEPRI, r3
 80199b2:	f3bf 8f6f 	isb	sy
 80199b6:	f3bf 8f4f 	dsb	sy
 80199ba:	603b      	str	r3, [r7, #0]
}
 80199bc:	bf00      	nop
 80199be:	e7fe      	b.n	80199be <vPortEnterCritical+0x4a>
	}
}
 80199c0:	bf00      	nop
 80199c2:	370c      	adds	r7, #12
 80199c4:	46bd      	mov	sp, r7
 80199c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ca:	4770      	bx	lr
 80199cc:	240000d0 	.word	0x240000d0
 80199d0:	e000ed04 	.word	0xe000ed04

080199d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80199d4:	b480      	push	{r7}
 80199d6:	b083      	sub	sp, #12
 80199d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80199da:	4b12      	ldr	r3, [pc, #72]	; (8019a24 <vPortExitCritical+0x50>)
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d10a      	bne.n	80199f8 <vPortExitCritical+0x24>
	__asm volatile
 80199e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199e6:	f383 8811 	msr	BASEPRI, r3
 80199ea:	f3bf 8f6f 	isb	sy
 80199ee:	f3bf 8f4f 	dsb	sy
 80199f2:	607b      	str	r3, [r7, #4]
}
 80199f4:	bf00      	nop
 80199f6:	e7fe      	b.n	80199f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80199f8:	4b0a      	ldr	r3, [pc, #40]	; (8019a24 <vPortExitCritical+0x50>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	3b01      	subs	r3, #1
 80199fe:	4a09      	ldr	r2, [pc, #36]	; (8019a24 <vPortExitCritical+0x50>)
 8019a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019a02:	4b08      	ldr	r3, [pc, #32]	; (8019a24 <vPortExitCritical+0x50>)
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d105      	bne.n	8019a16 <vPortExitCritical+0x42>
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019a0e:	683b      	ldr	r3, [r7, #0]
 8019a10:	f383 8811 	msr	BASEPRI, r3
}
 8019a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019a16:	bf00      	nop
 8019a18:	370c      	adds	r7, #12
 8019a1a:	46bd      	mov	sp, r7
 8019a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a20:	4770      	bx	lr
 8019a22:	bf00      	nop
 8019a24:	240000d0 	.word	0x240000d0
	...

08019a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019a30:	f3ef 8009 	mrs	r0, PSP
 8019a34:	f3bf 8f6f 	isb	sy
 8019a38:	4b15      	ldr	r3, [pc, #84]	; (8019a90 <pxCurrentTCBConst>)
 8019a3a:	681a      	ldr	r2, [r3, #0]
 8019a3c:	f01e 0f10 	tst.w	lr, #16
 8019a40:	bf08      	it	eq
 8019a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a4a:	6010      	str	r0, [r2, #0]
 8019a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019a54:	f380 8811 	msr	BASEPRI, r0
 8019a58:	f3bf 8f4f 	dsb	sy
 8019a5c:	f3bf 8f6f 	isb	sy
 8019a60:	f7fe fede 	bl	8018820 <vTaskSwitchContext>
 8019a64:	f04f 0000 	mov.w	r0, #0
 8019a68:	f380 8811 	msr	BASEPRI, r0
 8019a6c:	bc09      	pop	{r0, r3}
 8019a6e:	6819      	ldr	r1, [r3, #0]
 8019a70:	6808      	ldr	r0, [r1, #0]
 8019a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a76:	f01e 0f10 	tst.w	lr, #16
 8019a7a:	bf08      	it	eq
 8019a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019a80:	f380 8809 	msr	PSP, r0
 8019a84:	f3bf 8f6f 	isb	sy
 8019a88:	4770      	bx	lr
 8019a8a:	bf00      	nop
 8019a8c:	f3af 8000 	nop.w

08019a90 <pxCurrentTCBConst>:
 8019a90:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019a94:	bf00      	nop
 8019a96:	bf00      	nop

08019a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	b082      	sub	sp, #8
 8019a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8019a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aa2:	f383 8811 	msr	BASEPRI, r3
 8019aa6:	f3bf 8f6f 	isb	sy
 8019aaa:	f3bf 8f4f 	dsb	sy
 8019aae:	607b      	str	r3, [r7, #4]
}
 8019ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019ab2:	f7fe fdf3 	bl	801869c <xTaskIncrementTick>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d003      	beq.n	8019ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019abc:	4b06      	ldr	r3, [pc, #24]	; (8019ad8 <xPortSysTickHandler+0x40>)
 8019abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019ac2:	601a      	str	r2, [r3, #0]
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	f383 8811 	msr	BASEPRI, r3
}
 8019ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019ad0:	bf00      	nop
 8019ad2:	3708      	adds	r7, #8
 8019ad4:	46bd      	mov	sp, r7
 8019ad6:	bd80      	pop	{r7, pc}
 8019ad8:	e000ed04 	.word	0xe000ed04

08019adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019adc:	b480      	push	{r7}
 8019ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019ae0:	4b0b      	ldr	r3, [pc, #44]	; (8019b10 <vPortSetupTimerInterrupt+0x34>)
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019ae6:	4b0b      	ldr	r3, [pc, #44]	; (8019b14 <vPortSetupTimerInterrupt+0x38>)
 8019ae8:	2200      	movs	r2, #0
 8019aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019aec:	4b0a      	ldr	r3, [pc, #40]	; (8019b18 <vPortSetupTimerInterrupt+0x3c>)
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	4a0a      	ldr	r2, [pc, #40]	; (8019b1c <vPortSetupTimerInterrupt+0x40>)
 8019af2:	fba2 2303 	umull	r2, r3, r2, r3
 8019af6:	099b      	lsrs	r3, r3, #6
 8019af8:	4a09      	ldr	r2, [pc, #36]	; (8019b20 <vPortSetupTimerInterrupt+0x44>)
 8019afa:	3b01      	subs	r3, #1
 8019afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019afe:	4b04      	ldr	r3, [pc, #16]	; (8019b10 <vPortSetupTimerInterrupt+0x34>)
 8019b00:	2207      	movs	r2, #7
 8019b02:	601a      	str	r2, [r3, #0]
}
 8019b04:	bf00      	nop
 8019b06:	46bd      	mov	sp, r7
 8019b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b0c:	4770      	bx	lr
 8019b0e:	bf00      	nop
 8019b10:	e000e010 	.word	0xe000e010
 8019b14:	e000e018 	.word	0xe000e018
 8019b18:	240000c0 	.word	0x240000c0
 8019b1c:	10624dd3 	.word	0x10624dd3
 8019b20:	e000e014 	.word	0xe000e014

08019b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019b34 <vPortEnableVFP+0x10>
 8019b28:	6801      	ldr	r1, [r0, #0]
 8019b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019b2e:	6001      	str	r1, [r0, #0]
 8019b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019b32:	bf00      	nop
 8019b34:	e000ed88 	.word	0xe000ed88

08019b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019b38:	b480      	push	{r7}
 8019b3a:	b085      	sub	sp, #20
 8019b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019b3e:	f3ef 8305 	mrs	r3, IPSR
 8019b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	2b0f      	cmp	r3, #15
 8019b48:	d914      	bls.n	8019b74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019b4a:	4a17      	ldr	r2, [pc, #92]	; (8019ba8 <vPortValidateInterruptPriority+0x70>)
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	4413      	add	r3, r2
 8019b50:	781b      	ldrb	r3, [r3, #0]
 8019b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019b54:	4b15      	ldr	r3, [pc, #84]	; (8019bac <vPortValidateInterruptPriority+0x74>)
 8019b56:	781b      	ldrb	r3, [r3, #0]
 8019b58:	7afa      	ldrb	r2, [r7, #11]
 8019b5a:	429a      	cmp	r2, r3
 8019b5c:	d20a      	bcs.n	8019b74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b62:	f383 8811 	msr	BASEPRI, r3
 8019b66:	f3bf 8f6f 	isb	sy
 8019b6a:	f3bf 8f4f 	dsb	sy
 8019b6e:	607b      	str	r3, [r7, #4]
}
 8019b70:	bf00      	nop
 8019b72:	e7fe      	b.n	8019b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019b74:	4b0e      	ldr	r3, [pc, #56]	; (8019bb0 <vPortValidateInterruptPriority+0x78>)
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019b7c:	4b0d      	ldr	r3, [pc, #52]	; (8019bb4 <vPortValidateInterruptPriority+0x7c>)
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	429a      	cmp	r2, r3
 8019b82:	d90a      	bls.n	8019b9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b88:	f383 8811 	msr	BASEPRI, r3
 8019b8c:	f3bf 8f6f 	isb	sy
 8019b90:	f3bf 8f4f 	dsb	sy
 8019b94:	603b      	str	r3, [r7, #0]
}
 8019b96:	bf00      	nop
 8019b98:	e7fe      	b.n	8019b98 <vPortValidateInterruptPriority+0x60>
	}
 8019b9a:	bf00      	nop
 8019b9c:	3714      	adds	r7, #20
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba4:	4770      	bx	lr
 8019ba6:	bf00      	nop
 8019ba8:	e000e3f0 	.word	0xe000e3f0
 8019bac:	24002d44 	.word	0x24002d44
 8019bb0:	e000ed0c 	.word	0xe000ed0c
 8019bb4:	24002d48 	.word	0x24002d48

08019bb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b08a      	sub	sp, #40	; 0x28
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019bc4:	f7fe fcae 	bl	8018524 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019bc8:	4b5b      	ldr	r3, [pc, #364]	; (8019d38 <pvPortMalloc+0x180>)
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d101      	bne.n	8019bd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019bd0:	f000 f920 	bl	8019e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019bd4:	4b59      	ldr	r3, [pc, #356]	; (8019d3c <pvPortMalloc+0x184>)
 8019bd6:	681a      	ldr	r2, [r3, #0]
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	4013      	ands	r3, r2
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	f040 8093 	bne.w	8019d08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d01d      	beq.n	8019c24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019be8:	2208      	movs	r2, #8
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	4413      	add	r3, r2
 8019bee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	f003 0307 	and.w	r3, r3, #7
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d014      	beq.n	8019c24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	f023 0307 	bic.w	r3, r3, #7
 8019c00:	3308      	adds	r3, #8
 8019c02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	f003 0307 	and.w	r3, r3, #7
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d00a      	beq.n	8019c24 <pvPortMalloc+0x6c>
	__asm volatile
 8019c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c12:	f383 8811 	msr	BASEPRI, r3
 8019c16:	f3bf 8f6f 	isb	sy
 8019c1a:	f3bf 8f4f 	dsb	sy
 8019c1e:	617b      	str	r3, [r7, #20]
}
 8019c20:	bf00      	nop
 8019c22:	e7fe      	b.n	8019c22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d06e      	beq.n	8019d08 <pvPortMalloc+0x150>
 8019c2a:	4b45      	ldr	r3, [pc, #276]	; (8019d40 <pvPortMalloc+0x188>)
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	687a      	ldr	r2, [r7, #4]
 8019c30:	429a      	cmp	r2, r3
 8019c32:	d869      	bhi.n	8019d08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019c34:	4b43      	ldr	r3, [pc, #268]	; (8019d44 <pvPortMalloc+0x18c>)
 8019c36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019c38:	4b42      	ldr	r3, [pc, #264]	; (8019d44 <pvPortMalloc+0x18c>)
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019c3e:	e004      	b.n	8019c4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4c:	685b      	ldr	r3, [r3, #4]
 8019c4e:	687a      	ldr	r2, [r7, #4]
 8019c50:	429a      	cmp	r2, r3
 8019c52:	d903      	bls.n	8019c5c <pvPortMalloc+0xa4>
 8019c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d1f1      	bne.n	8019c40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019c5c:	4b36      	ldr	r3, [pc, #216]	; (8019d38 <pvPortMalloc+0x180>)
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c62:	429a      	cmp	r2, r3
 8019c64:	d050      	beq.n	8019d08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019c66:	6a3b      	ldr	r3, [r7, #32]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	2208      	movs	r2, #8
 8019c6c:	4413      	add	r3, r2
 8019c6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c72:	681a      	ldr	r2, [r3, #0]
 8019c74:	6a3b      	ldr	r3, [r7, #32]
 8019c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c7a:	685a      	ldr	r2, [r3, #4]
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	1ad2      	subs	r2, r2, r3
 8019c80:	2308      	movs	r3, #8
 8019c82:	005b      	lsls	r3, r3, #1
 8019c84:	429a      	cmp	r2, r3
 8019c86:	d91f      	bls.n	8019cc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	4413      	add	r3, r2
 8019c8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019c90:	69bb      	ldr	r3, [r7, #24]
 8019c92:	f003 0307 	and.w	r3, r3, #7
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d00a      	beq.n	8019cb0 <pvPortMalloc+0xf8>
	__asm volatile
 8019c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c9e:	f383 8811 	msr	BASEPRI, r3
 8019ca2:	f3bf 8f6f 	isb	sy
 8019ca6:	f3bf 8f4f 	dsb	sy
 8019caa:	613b      	str	r3, [r7, #16]
}
 8019cac:	bf00      	nop
 8019cae:	e7fe      	b.n	8019cae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cb2:	685a      	ldr	r2, [r3, #4]
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	1ad2      	subs	r2, r2, r3
 8019cb8:	69bb      	ldr	r3, [r7, #24]
 8019cba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cbe:	687a      	ldr	r2, [r7, #4]
 8019cc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019cc2:	69b8      	ldr	r0, [r7, #24]
 8019cc4:	f000 f908 	bl	8019ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019cc8:	4b1d      	ldr	r3, [pc, #116]	; (8019d40 <pvPortMalloc+0x188>)
 8019cca:	681a      	ldr	r2, [r3, #0]
 8019ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cce:	685b      	ldr	r3, [r3, #4]
 8019cd0:	1ad3      	subs	r3, r2, r3
 8019cd2:	4a1b      	ldr	r2, [pc, #108]	; (8019d40 <pvPortMalloc+0x188>)
 8019cd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019cd6:	4b1a      	ldr	r3, [pc, #104]	; (8019d40 <pvPortMalloc+0x188>)
 8019cd8:	681a      	ldr	r2, [r3, #0]
 8019cda:	4b1b      	ldr	r3, [pc, #108]	; (8019d48 <pvPortMalloc+0x190>)
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	429a      	cmp	r2, r3
 8019ce0:	d203      	bcs.n	8019cea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019ce2:	4b17      	ldr	r3, [pc, #92]	; (8019d40 <pvPortMalloc+0x188>)
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	4a18      	ldr	r2, [pc, #96]	; (8019d48 <pvPortMalloc+0x190>)
 8019ce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cec:	685a      	ldr	r2, [r3, #4]
 8019cee:	4b13      	ldr	r3, [pc, #76]	; (8019d3c <pvPortMalloc+0x184>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	431a      	orrs	r2, r3
 8019cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cfa:	2200      	movs	r2, #0
 8019cfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019cfe:	4b13      	ldr	r3, [pc, #76]	; (8019d4c <pvPortMalloc+0x194>)
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	3301      	adds	r3, #1
 8019d04:	4a11      	ldr	r2, [pc, #68]	; (8019d4c <pvPortMalloc+0x194>)
 8019d06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019d08:	f7fe fc1a 	bl	8018540 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019d0c:	69fb      	ldr	r3, [r7, #28]
 8019d0e:	f003 0307 	and.w	r3, r3, #7
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d00a      	beq.n	8019d2c <pvPortMalloc+0x174>
	__asm volatile
 8019d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d1a:	f383 8811 	msr	BASEPRI, r3
 8019d1e:	f3bf 8f6f 	isb	sy
 8019d22:	f3bf 8f4f 	dsb	sy
 8019d26:	60fb      	str	r3, [r7, #12]
}
 8019d28:	bf00      	nop
 8019d2a:	e7fe      	b.n	8019d2a <pvPortMalloc+0x172>
	return pvReturn;
 8019d2c:	69fb      	ldr	r3, [r7, #28]
}
 8019d2e:	4618      	mov	r0, r3
 8019d30:	3728      	adds	r7, #40	; 0x28
 8019d32:	46bd      	mov	sp, r7
 8019d34:	bd80      	pop	{r7, pc}
 8019d36:	bf00      	nop
 8019d38:	24006954 	.word	0x24006954
 8019d3c:	24006968 	.word	0x24006968
 8019d40:	24006958 	.word	0x24006958
 8019d44:	2400694c 	.word	0x2400694c
 8019d48:	2400695c 	.word	0x2400695c
 8019d4c:	24006960 	.word	0x24006960

08019d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019d50:	b580      	push	{r7, lr}
 8019d52:	b086      	sub	sp, #24
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d04d      	beq.n	8019dfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019d62:	2308      	movs	r3, #8
 8019d64:	425b      	negs	r3, r3
 8019d66:	697a      	ldr	r2, [r7, #20]
 8019d68:	4413      	add	r3, r2
 8019d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019d6c:	697b      	ldr	r3, [r7, #20]
 8019d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019d70:	693b      	ldr	r3, [r7, #16]
 8019d72:	685a      	ldr	r2, [r3, #4]
 8019d74:	4b24      	ldr	r3, [pc, #144]	; (8019e08 <vPortFree+0xb8>)
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	4013      	ands	r3, r2
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d10a      	bne.n	8019d94 <vPortFree+0x44>
	__asm volatile
 8019d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d82:	f383 8811 	msr	BASEPRI, r3
 8019d86:	f3bf 8f6f 	isb	sy
 8019d8a:	f3bf 8f4f 	dsb	sy
 8019d8e:	60fb      	str	r3, [r7, #12]
}
 8019d90:	bf00      	nop
 8019d92:	e7fe      	b.n	8019d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019d94:	693b      	ldr	r3, [r7, #16]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d00a      	beq.n	8019db2 <vPortFree+0x62>
	__asm volatile
 8019d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019da0:	f383 8811 	msr	BASEPRI, r3
 8019da4:	f3bf 8f6f 	isb	sy
 8019da8:	f3bf 8f4f 	dsb	sy
 8019dac:	60bb      	str	r3, [r7, #8]
}
 8019dae:	bf00      	nop
 8019db0:	e7fe      	b.n	8019db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019db2:	693b      	ldr	r3, [r7, #16]
 8019db4:	685a      	ldr	r2, [r3, #4]
 8019db6:	4b14      	ldr	r3, [pc, #80]	; (8019e08 <vPortFree+0xb8>)
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	4013      	ands	r3, r2
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d01e      	beq.n	8019dfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019dc0:	693b      	ldr	r3, [r7, #16]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d11a      	bne.n	8019dfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019dc8:	693b      	ldr	r3, [r7, #16]
 8019dca:	685a      	ldr	r2, [r3, #4]
 8019dcc:	4b0e      	ldr	r3, [pc, #56]	; (8019e08 <vPortFree+0xb8>)
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	43db      	mvns	r3, r3
 8019dd2:	401a      	ands	r2, r3
 8019dd4:	693b      	ldr	r3, [r7, #16]
 8019dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019dd8:	f7fe fba4 	bl	8018524 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019ddc:	693b      	ldr	r3, [r7, #16]
 8019dde:	685a      	ldr	r2, [r3, #4]
 8019de0:	4b0a      	ldr	r3, [pc, #40]	; (8019e0c <vPortFree+0xbc>)
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	4413      	add	r3, r2
 8019de6:	4a09      	ldr	r2, [pc, #36]	; (8019e0c <vPortFree+0xbc>)
 8019de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019dea:	6938      	ldr	r0, [r7, #16]
 8019dec:	f000 f874 	bl	8019ed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019df0:	4b07      	ldr	r3, [pc, #28]	; (8019e10 <vPortFree+0xc0>)
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	3301      	adds	r3, #1
 8019df6:	4a06      	ldr	r2, [pc, #24]	; (8019e10 <vPortFree+0xc0>)
 8019df8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019dfa:	f7fe fba1 	bl	8018540 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019dfe:	bf00      	nop
 8019e00:	3718      	adds	r7, #24
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}
 8019e06:	bf00      	nop
 8019e08:	24006968 	.word	0x24006968
 8019e0c:	24006958 	.word	0x24006958
 8019e10:	24006964 	.word	0x24006964

08019e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019e14:	b480      	push	{r7}
 8019e16:	b085      	sub	sp, #20
 8019e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019e20:	4b27      	ldr	r3, [pc, #156]	; (8019ec0 <prvHeapInit+0xac>)
 8019e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	f003 0307 	and.w	r3, r3, #7
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d00c      	beq.n	8019e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	3307      	adds	r3, #7
 8019e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	f023 0307 	bic.w	r3, r3, #7
 8019e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019e3c:	68ba      	ldr	r2, [r7, #8]
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	1ad3      	subs	r3, r2, r3
 8019e42:	4a1f      	ldr	r2, [pc, #124]	; (8019ec0 <prvHeapInit+0xac>)
 8019e44:	4413      	add	r3, r2
 8019e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019e4c:	4a1d      	ldr	r2, [pc, #116]	; (8019ec4 <prvHeapInit+0xb0>)
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019e52:	4b1c      	ldr	r3, [pc, #112]	; (8019ec4 <prvHeapInit+0xb0>)
 8019e54:	2200      	movs	r2, #0
 8019e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	68ba      	ldr	r2, [r7, #8]
 8019e5c:	4413      	add	r3, r2
 8019e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019e60:	2208      	movs	r2, #8
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	1a9b      	subs	r3, r3, r2
 8019e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	f023 0307 	bic.w	r3, r3, #7
 8019e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	4a15      	ldr	r2, [pc, #84]	; (8019ec8 <prvHeapInit+0xb4>)
 8019e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019e76:	4b14      	ldr	r3, [pc, #80]	; (8019ec8 <prvHeapInit+0xb4>)
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	2200      	movs	r2, #0
 8019e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019e7e:	4b12      	ldr	r3, [pc, #72]	; (8019ec8 <prvHeapInit+0xb4>)
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	2200      	movs	r2, #0
 8019e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	68fa      	ldr	r2, [r7, #12]
 8019e8e:	1ad2      	subs	r2, r2, r3
 8019e90:	683b      	ldr	r3, [r7, #0]
 8019e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019e94:	4b0c      	ldr	r3, [pc, #48]	; (8019ec8 <prvHeapInit+0xb4>)
 8019e96:	681a      	ldr	r2, [r3, #0]
 8019e98:	683b      	ldr	r3, [r7, #0]
 8019e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019e9c:	683b      	ldr	r3, [r7, #0]
 8019e9e:	685b      	ldr	r3, [r3, #4]
 8019ea0:	4a0a      	ldr	r2, [pc, #40]	; (8019ecc <prvHeapInit+0xb8>)
 8019ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019ea4:	683b      	ldr	r3, [r7, #0]
 8019ea6:	685b      	ldr	r3, [r3, #4]
 8019ea8:	4a09      	ldr	r2, [pc, #36]	; (8019ed0 <prvHeapInit+0xbc>)
 8019eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019eac:	4b09      	ldr	r3, [pc, #36]	; (8019ed4 <prvHeapInit+0xc0>)
 8019eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019eb2:	601a      	str	r2, [r3, #0]
}
 8019eb4:	bf00      	nop
 8019eb6:	3714      	adds	r7, #20
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ebe:	4770      	bx	lr
 8019ec0:	24002d4c 	.word	0x24002d4c
 8019ec4:	2400694c 	.word	0x2400694c
 8019ec8:	24006954 	.word	0x24006954
 8019ecc:	2400695c 	.word	0x2400695c
 8019ed0:	24006958 	.word	0x24006958
 8019ed4:	24006968 	.word	0x24006968

08019ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019ed8:	b480      	push	{r7}
 8019eda:	b085      	sub	sp, #20
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019ee0:	4b28      	ldr	r3, [pc, #160]	; (8019f84 <prvInsertBlockIntoFreeList+0xac>)
 8019ee2:	60fb      	str	r3, [r7, #12]
 8019ee4:	e002      	b.n	8019eec <prvInsertBlockIntoFreeList+0x14>
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	60fb      	str	r3, [r7, #12]
 8019eec:	68fb      	ldr	r3, [r7, #12]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	687a      	ldr	r2, [r7, #4]
 8019ef2:	429a      	cmp	r2, r3
 8019ef4:	d8f7      	bhi.n	8019ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	685b      	ldr	r3, [r3, #4]
 8019efe:	68ba      	ldr	r2, [r7, #8]
 8019f00:	4413      	add	r3, r2
 8019f02:	687a      	ldr	r2, [r7, #4]
 8019f04:	429a      	cmp	r2, r3
 8019f06:	d108      	bne.n	8019f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	685a      	ldr	r2, [r3, #4]
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	685b      	ldr	r3, [r3, #4]
 8019f10:	441a      	add	r2, r3
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	685b      	ldr	r3, [r3, #4]
 8019f22:	68ba      	ldr	r2, [r7, #8]
 8019f24:	441a      	add	r2, r3
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	429a      	cmp	r2, r3
 8019f2c:	d118      	bne.n	8019f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	681a      	ldr	r2, [r3, #0]
 8019f32:	4b15      	ldr	r3, [pc, #84]	; (8019f88 <prvInsertBlockIntoFreeList+0xb0>)
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	429a      	cmp	r2, r3
 8019f38:	d00d      	beq.n	8019f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	685a      	ldr	r2, [r3, #4]
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	685b      	ldr	r3, [r3, #4]
 8019f44:	441a      	add	r2, r3
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	681a      	ldr	r2, [r3, #0]
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	601a      	str	r2, [r3, #0]
 8019f54:	e008      	b.n	8019f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019f56:	4b0c      	ldr	r3, [pc, #48]	; (8019f88 <prvInsertBlockIntoFreeList+0xb0>)
 8019f58:	681a      	ldr	r2, [r3, #0]
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	601a      	str	r2, [r3, #0]
 8019f5e:	e003      	b.n	8019f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	681a      	ldr	r2, [r3, #0]
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019f68:	68fa      	ldr	r2, [r7, #12]
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	429a      	cmp	r2, r3
 8019f6e:	d002      	beq.n	8019f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	687a      	ldr	r2, [r7, #4]
 8019f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019f76:	bf00      	nop
 8019f78:	3714      	adds	r7, #20
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f80:	4770      	bx	lr
 8019f82:	bf00      	nop
 8019f84:	2400694c 	.word	0x2400694c
 8019f88:	24006954 	.word	0x24006954

08019f8c <__errno>:
 8019f8c:	4b01      	ldr	r3, [pc, #4]	; (8019f94 <__errno+0x8>)
 8019f8e:	6818      	ldr	r0, [r3, #0]
 8019f90:	4770      	bx	lr
 8019f92:	bf00      	nop
 8019f94:	240000d4 	.word	0x240000d4

08019f98 <__libc_init_array>:
 8019f98:	b570      	push	{r4, r5, r6, lr}
 8019f9a:	4d0d      	ldr	r5, [pc, #52]	; (8019fd0 <__libc_init_array+0x38>)
 8019f9c:	4c0d      	ldr	r4, [pc, #52]	; (8019fd4 <__libc_init_array+0x3c>)
 8019f9e:	1b64      	subs	r4, r4, r5
 8019fa0:	10a4      	asrs	r4, r4, #2
 8019fa2:	2600      	movs	r6, #0
 8019fa4:	42a6      	cmp	r6, r4
 8019fa6:	d109      	bne.n	8019fbc <__libc_init_array+0x24>
 8019fa8:	4d0b      	ldr	r5, [pc, #44]	; (8019fd8 <__libc_init_array+0x40>)
 8019faa:	4c0c      	ldr	r4, [pc, #48]	; (8019fdc <__libc_init_array+0x44>)
 8019fac:	f000 fd2c 	bl	801aa08 <_init>
 8019fb0:	1b64      	subs	r4, r4, r5
 8019fb2:	10a4      	asrs	r4, r4, #2
 8019fb4:	2600      	movs	r6, #0
 8019fb6:	42a6      	cmp	r6, r4
 8019fb8:	d105      	bne.n	8019fc6 <__libc_init_array+0x2e>
 8019fba:	bd70      	pop	{r4, r5, r6, pc}
 8019fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019fc0:	4798      	blx	r3
 8019fc2:	3601      	adds	r6, #1
 8019fc4:	e7ee      	b.n	8019fa4 <__libc_init_array+0xc>
 8019fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019fca:	4798      	blx	r3
 8019fcc:	3601      	adds	r6, #1
 8019fce:	e7f2      	b.n	8019fb6 <__libc_init_array+0x1e>
 8019fd0:	0801aec0 	.word	0x0801aec0
 8019fd4:	0801aec0 	.word	0x0801aec0
 8019fd8:	0801aec0 	.word	0x0801aec0
 8019fdc:	0801aec4 	.word	0x0801aec4

08019fe0 <memcpy>:
 8019fe0:	440a      	add	r2, r1
 8019fe2:	4291      	cmp	r1, r2
 8019fe4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019fe8:	d100      	bne.n	8019fec <memcpy+0xc>
 8019fea:	4770      	bx	lr
 8019fec:	b510      	push	{r4, lr}
 8019fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019ff6:	4291      	cmp	r1, r2
 8019ff8:	d1f9      	bne.n	8019fee <memcpy+0xe>
 8019ffa:	bd10      	pop	{r4, pc}

08019ffc <memset>:
 8019ffc:	4402      	add	r2, r0
 8019ffe:	4603      	mov	r3, r0
 801a000:	4293      	cmp	r3, r2
 801a002:	d100      	bne.n	801a006 <memset+0xa>
 801a004:	4770      	bx	lr
 801a006:	f803 1b01 	strb.w	r1, [r3], #1
 801a00a:	e7f9      	b.n	801a000 <memset+0x4>

0801a00c <_puts_r>:
 801a00c:	b570      	push	{r4, r5, r6, lr}
 801a00e:	460e      	mov	r6, r1
 801a010:	4605      	mov	r5, r0
 801a012:	b118      	cbz	r0, 801a01c <_puts_r+0x10>
 801a014:	6983      	ldr	r3, [r0, #24]
 801a016:	b90b      	cbnz	r3, 801a01c <_puts_r+0x10>
 801a018:	f000 fa48 	bl	801a4ac <__sinit>
 801a01c:	69ab      	ldr	r3, [r5, #24]
 801a01e:	68ac      	ldr	r4, [r5, #8]
 801a020:	b913      	cbnz	r3, 801a028 <_puts_r+0x1c>
 801a022:	4628      	mov	r0, r5
 801a024:	f000 fa42 	bl	801a4ac <__sinit>
 801a028:	4b2c      	ldr	r3, [pc, #176]	; (801a0dc <_puts_r+0xd0>)
 801a02a:	429c      	cmp	r4, r3
 801a02c:	d120      	bne.n	801a070 <_puts_r+0x64>
 801a02e:	686c      	ldr	r4, [r5, #4]
 801a030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a032:	07db      	lsls	r3, r3, #31
 801a034:	d405      	bmi.n	801a042 <_puts_r+0x36>
 801a036:	89a3      	ldrh	r3, [r4, #12]
 801a038:	0598      	lsls	r0, r3, #22
 801a03a:	d402      	bmi.n	801a042 <_puts_r+0x36>
 801a03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a03e:	f000 fad3 	bl	801a5e8 <__retarget_lock_acquire_recursive>
 801a042:	89a3      	ldrh	r3, [r4, #12]
 801a044:	0719      	lsls	r1, r3, #28
 801a046:	d51d      	bpl.n	801a084 <_puts_r+0x78>
 801a048:	6923      	ldr	r3, [r4, #16]
 801a04a:	b1db      	cbz	r3, 801a084 <_puts_r+0x78>
 801a04c:	3e01      	subs	r6, #1
 801a04e:	68a3      	ldr	r3, [r4, #8]
 801a050:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a054:	3b01      	subs	r3, #1
 801a056:	60a3      	str	r3, [r4, #8]
 801a058:	bb39      	cbnz	r1, 801a0aa <_puts_r+0x9e>
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	da38      	bge.n	801a0d0 <_puts_r+0xc4>
 801a05e:	4622      	mov	r2, r4
 801a060:	210a      	movs	r1, #10
 801a062:	4628      	mov	r0, r5
 801a064:	f000 f848 	bl	801a0f8 <__swbuf_r>
 801a068:	3001      	adds	r0, #1
 801a06a:	d011      	beq.n	801a090 <_puts_r+0x84>
 801a06c:	250a      	movs	r5, #10
 801a06e:	e011      	b.n	801a094 <_puts_r+0x88>
 801a070:	4b1b      	ldr	r3, [pc, #108]	; (801a0e0 <_puts_r+0xd4>)
 801a072:	429c      	cmp	r4, r3
 801a074:	d101      	bne.n	801a07a <_puts_r+0x6e>
 801a076:	68ac      	ldr	r4, [r5, #8]
 801a078:	e7da      	b.n	801a030 <_puts_r+0x24>
 801a07a:	4b1a      	ldr	r3, [pc, #104]	; (801a0e4 <_puts_r+0xd8>)
 801a07c:	429c      	cmp	r4, r3
 801a07e:	bf08      	it	eq
 801a080:	68ec      	ldreq	r4, [r5, #12]
 801a082:	e7d5      	b.n	801a030 <_puts_r+0x24>
 801a084:	4621      	mov	r1, r4
 801a086:	4628      	mov	r0, r5
 801a088:	f000 f888 	bl	801a19c <__swsetup_r>
 801a08c:	2800      	cmp	r0, #0
 801a08e:	d0dd      	beq.n	801a04c <_puts_r+0x40>
 801a090:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a096:	07da      	lsls	r2, r3, #31
 801a098:	d405      	bmi.n	801a0a6 <_puts_r+0x9a>
 801a09a:	89a3      	ldrh	r3, [r4, #12]
 801a09c:	059b      	lsls	r3, r3, #22
 801a09e:	d402      	bmi.n	801a0a6 <_puts_r+0x9a>
 801a0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0a2:	f000 faa2 	bl	801a5ea <__retarget_lock_release_recursive>
 801a0a6:	4628      	mov	r0, r5
 801a0a8:	bd70      	pop	{r4, r5, r6, pc}
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	da04      	bge.n	801a0b8 <_puts_r+0xac>
 801a0ae:	69a2      	ldr	r2, [r4, #24]
 801a0b0:	429a      	cmp	r2, r3
 801a0b2:	dc06      	bgt.n	801a0c2 <_puts_r+0xb6>
 801a0b4:	290a      	cmp	r1, #10
 801a0b6:	d004      	beq.n	801a0c2 <_puts_r+0xb6>
 801a0b8:	6823      	ldr	r3, [r4, #0]
 801a0ba:	1c5a      	adds	r2, r3, #1
 801a0bc:	6022      	str	r2, [r4, #0]
 801a0be:	7019      	strb	r1, [r3, #0]
 801a0c0:	e7c5      	b.n	801a04e <_puts_r+0x42>
 801a0c2:	4622      	mov	r2, r4
 801a0c4:	4628      	mov	r0, r5
 801a0c6:	f000 f817 	bl	801a0f8 <__swbuf_r>
 801a0ca:	3001      	adds	r0, #1
 801a0cc:	d1bf      	bne.n	801a04e <_puts_r+0x42>
 801a0ce:	e7df      	b.n	801a090 <_puts_r+0x84>
 801a0d0:	6823      	ldr	r3, [r4, #0]
 801a0d2:	250a      	movs	r5, #10
 801a0d4:	1c5a      	adds	r2, r3, #1
 801a0d6:	6022      	str	r2, [r4, #0]
 801a0d8:	701d      	strb	r5, [r3, #0]
 801a0da:	e7db      	b.n	801a094 <_puts_r+0x88>
 801a0dc:	0801ae78 	.word	0x0801ae78
 801a0e0:	0801ae98 	.word	0x0801ae98
 801a0e4:	0801ae58 	.word	0x0801ae58

0801a0e8 <puts>:
 801a0e8:	4b02      	ldr	r3, [pc, #8]	; (801a0f4 <puts+0xc>)
 801a0ea:	4601      	mov	r1, r0
 801a0ec:	6818      	ldr	r0, [r3, #0]
 801a0ee:	f7ff bf8d 	b.w	801a00c <_puts_r>
 801a0f2:	bf00      	nop
 801a0f4:	240000d4 	.word	0x240000d4

0801a0f8 <__swbuf_r>:
 801a0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0fa:	460e      	mov	r6, r1
 801a0fc:	4614      	mov	r4, r2
 801a0fe:	4605      	mov	r5, r0
 801a100:	b118      	cbz	r0, 801a10a <__swbuf_r+0x12>
 801a102:	6983      	ldr	r3, [r0, #24]
 801a104:	b90b      	cbnz	r3, 801a10a <__swbuf_r+0x12>
 801a106:	f000 f9d1 	bl	801a4ac <__sinit>
 801a10a:	4b21      	ldr	r3, [pc, #132]	; (801a190 <__swbuf_r+0x98>)
 801a10c:	429c      	cmp	r4, r3
 801a10e:	d12b      	bne.n	801a168 <__swbuf_r+0x70>
 801a110:	686c      	ldr	r4, [r5, #4]
 801a112:	69a3      	ldr	r3, [r4, #24]
 801a114:	60a3      	str	r3, [r4, #8]
 801a116:	89a3      	ldrh	r3, [r4, #12]
 801a118:	071a      	lsls	r2, r3, #28
 801a11a:	d52f      	bpl.n	801a17c <__swbuf_r+0x84>
 801a11c:	6923      	ldr	r3, [r4, #16]
 801a11e:	b36b      	cbz	r3, 801a17c <__swbuf_r+0x84>
 801a120:	6923      	ldr	r3, [r4, #16]
 801a122:	6820      	ldr	r0, [r4, #0]
 801a124:	1ac0      	subs	r0, r0, r3
 801a126:	6963      	ldr	r3, [r4, #20]
 801a128:	b2f6      	uxtb	r6, r6
 801a12a:	4283      	cmp	r3, r0
 801a12c:	4637      	mov	r7, r6
 801a12e:	dc04      	bgt.n	801a13a <__swbuf_r+0x42>
 801a130:	4621      	mov	r1, r4
 801a132:	4628      	mov	r0, r5
 801a134:	f000 f926 	bl	801a384 <_fflush_r>
 801a138:	bb30      	cbnz	r0, 801a188 <__swbuf_r+0x90>
 801a13a:	68a3      	ldr	r3, [r4, #8]
 801a13c:	3b01      	subs	r3, #1
 801a13e:	60a3      	str	r3, [r4, #8]
 801a140:	6823      	ldr	r3, [r4, #0]
 801a142:	1c5a      	adds	r2, r3, #1
 801a144:	6022      	str	r2, [r4, #0]
 801a146:	701e      	strb	r6, [r3, #0]
 801a148:	6963      	ldr	r3, [r4, #20]
 801a14a:	3001      	adds	r0, #1
 801a14c:	4283      	cmp	r3, r0
 801a14e:	d004      	beq.n	801a15a <__swbuf_r+0x62>
 801a150:	89a3      	ldrh	r3, [r4, #12]
 801a152:	07db      	lsls	r3, r3, #31
 801a154:	d506      	bpl.n	801a164 <__swbuf_r+0x6c>
 801a156:	2e0a      	cmp	r6, #10
 801a158:	d104      	bne.n	801a164 <__swbuf_r+0x6c>
 801a15a:	4621      	mov	r1, r4
 801a15c:	4628      	mov	r0, r5
 801a15e:	f000 f911 	bl	801a384 <_fflush_r>
 801a162:	b988      	cbnz	r0, 801a188 <__swbuf_r+0x90>
 801a164:	4638      	mov	r0, r7
 801a166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a168:	4b0a      	ldr	r3, [pc, #40]	; (801a194 <__swbuf_r+0x9c>)
 801a16a:	429c      	cmp	r4, r3
 801a16c:	d101      	bne.n	801a172 <__swbuf_r+0x7a>
 801a16e:	68ac      	ldr	r4, [r5, #8]
 801a170:	e7cf      	b.n	801a112 <__swbuf_r+0x1a>
 801a172:	4b09      	ldr	r3, [pc, #36]	; (801a198 <__swbuf_r+0xa0>)
 801a174:	429c      	cmp	r4, r3
 801a176:	bf08      	it	eq
 801a178:	68ec      	ldreq	r4, [r5, #12]
 801a17a:	e7ca      	b.n	801a112 <__swbuf_r+0x1a>
 801a17c:	4621      	mov	r1, r4
 801a17e:	4628      	mov	r0, r5
 801a180:	f000 f80c 	bl	801a19c <__swsetup_r>
 801a184:	2800      	cmp	r0, #0
 801a186:	d0cb      	beq.n	801a120 <__swbuf_r+0x28>
 801a188:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a18c:	e7ea      	b.n	801a164 <__swbuf_r+0x6c>
 801a18e:	bf00      	nop
 801a190:	0801ae78 	.word	0x0801ae78
 801a194:	0801ae98 	.word	0x0801ae98
 801a198:	0801ae58 	.word	0x0801ae58

0801a19c <__swsetup_r>:
 801a19c:	4b32      	ldr	r3, [pc, #200]	; (801a268 <__swsetup_r+0xcc>)
 801a19e:	b570      	push	{r4, r5, r6, lr}
 801a1a0:	681d      	ldr	r5, [r3, #0]
 801a1a2:	4606      	mov	r6, r0
 801a1a4:	460c      	mov	r4, r1
 801a1a6:	b125      	cbz	r5, 801a1b2 <__swsetup_r+0x16>
 801a1a8:	69ab      	ldr	r3, [r5, #24]
 801a1aa:	b913      	cbnz	r3, 801a1b2 <__swsetup_r+0x16>
 801a1ac:	4628      	mov	r0, r5
 801a1ae:	f000 f97d 	bl	801a4ac <__sinit>
 801a1b2:	4b2e      	ldr	r3, [pc, #184]	; (801a26c <__swsetup_r+0xd0>)
 801a1b4:	429c      	cmp	r4, r3
 801a1b6:	d10f      	bne.n	801a1d8 <__swsetup_r+0x3c>
 801a1b8:	686c      	ldr	r4, [r5, #4]
 801a1ba:	89a3      	ldrh	r3, [r4, #12]
 801a1bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1c0:	0719      	lsls	r1, r3, #28
 801a1c2:	d42c      	bmi.n	801a21e <__swsetup_r+0x82>
 801a1c4:	06dd      	lsls	r5, r3, #27
 801a1c6:	d411      	bmi.n	801a1ec <__swsetup_r+0x50>
 801a1c8:	2309      	movs	r3, #9
 801a1ca:	6033      	str	r3, [r6, #0]
 801a1cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a1d0:	81a3      	strh	r3, [r4, #12]
 801a1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a1d6:	e03e      	b.n	801a256 <__swsetup_r+0xba>
 801a1d8:	4b25      	ldr	r3, [pc, #148]	; (801a270 <__swsetup_r+0xd4>)
 801a1da:	429c      	cmp	r4, r3
 801a1dc:	d101      	bne.n	801a1e2 <__swsetup_r+0x46>
 801a1de:	68ac      	ldr	r4, [r5, #8]
 801a1e0:	e7eb      	b.n	801a1ba <__swsetup_r+0x1e>
 801a1e2:	4b24      	ldr	r3, [pc, #144]	; (801a274 <__swsetup_r+0xd8>)
 801a1e4:	429c      	cmp	r4, r3
 801a1e6:	bf08      	it	eq
 801a1e8:	68ec      	ldreq	r4, [r5, #12]
 801a1ea:	e7e6      	b.n	801a1ba <__swsetup_r+0x1e>
 801a1ec:	0758      	lsls	r0, r3, #29
 801a1ee:	d512      	bpl.n	801a216 <__swsetup_r+0x7a>
 801a1f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a1f2:	b141      	cbz	r1, 801a206 <__swsetup_r+0x6a>
 801a1f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1f8:	4299      	cmp	r1, r3
 801a1fa:	d002      	beq.n	801a202 <__swsetup_r+0x66>
 801a1fc:	4630      	mov	r0, r6
 801a1fe:	f000 fa5b 	bl	801a6b8 <_free_r>
 801a202:	2300      	movs	r3, #0
 801a204:	6363      	str	r3, [r4, #52]	; 0x34
 801a206:	89a3      	ldrh	r3, [r4, #12]
 801a208:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a20c:	81a3      	strh	r3, [r4, #12]
 801a20e:	2300      	movs	r3, #0
 801a210:	6063      	str	r3, [r4, #4]
 801a212:	6923      	ldr	r3, [r4, #16]
 801a214:	6023      	str	r3, [r4, #0]
 801a216:	89a3      	ldrh	r3, [r4, #12]
 801a218:	f043 0308 	orr.w	r3, r3, #8
 801a21c:	81a3      	strh	r3, [r4, #12]
 801a21e:	6923      	ldr	r3, [r4, #16]
 801a220:	b94b      	cbnz	r3, 801a236 <__swsetup_r+0x9a>
 801a222:	89a3      	ldrh	r3, [r4, #12]
 801a224:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a22c:	d003      	beq.n	801a236 <__swsetup_r+0x9a>
 801a22e:	4621      	mov	r1, r4
 801a230:	4630      	mov	r0, r6
 801a232:	f000 fa01 	bl	801a638 <__smakebuf_r>
 801a236:	89a0      	ldrh	r0, [r4, #12]
 801a238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a23c:	f010 0301 	ands.w	r3, r0, #1
 801a240:	d00a      	beq.n	801a258 <__swsetup_r+0xbc>
 801a242:	2300      	movs	r3, #0
 801a244:	60a3      	str	r3, [r4, #8]
 801a246:	6963      	ldr	r3, [r4, #20]
 801a248:	425b      	negs	r3, r3
 801a24a:	61a3      	str	r3, [r4, #24]
 801a24c:	6923      	ldr	r3, [r4, #16]
 801a24e:	b943      	cbnz	r3, 801a262 <__swsetup_r+0xc6>
 801a250:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a254:	d1ba      	bne.n	801a1cc <__swsetup_r+0x30>
 801a256:	bd70      	pop	{r4, r5, r6, pc}
 801a258:	0781      	lsls	r1, r0, #30
 801a25a:	bf58      	it	pl
 801a25c:	6963      	ldrpl	r3, [r4, #20]
 801a25e:	60a3      	str	r3, [r4, #8]
 801a260:	e7f4      	b.n	801a24c <__swsetup_r+0xb0>
 801a262:	2000      	movs	r0, #0
 801a264:	e7f7      	b.n	801a256 <__swsetup_r+0xba>
 801a266:	bf00      	nop
 801a268:	240000d4 	.word	0x240000d4
 801a26c:	0801ae78 	.word	0x0801ae78
 801a270:	0801ae98 	.word	0x0801ae98
 801a274:	0801ae58 	.word	0x0801ae58

0801a278 <__sflush_r>:
 801a278:	898a      	ldrh	r2, [r1, #12]
 801a27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a27e:	4605      	mov	r5, r0
 801a280:	0710      	lsls	r0, r2, #28
 801a282:	460c      	mov	r4, r1
 801a284:	d458      	bmi.n	801a338 <__sflush_r+0xc0>
 801a286:	684b      	ldr	r3, [r1, #4]
 801a288:	2b00      	cmp	r3, #0
 801a28a:	dc05      	bgt.n	801a298 <__sflush_r+0x20>
 801a28c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a28e:	2b00      	cmp	r3, #0
 801a290:	dc02      	bgt.n	801a298 <__sflush_r+0x20>
 801a292:	2000      	movs	r0, #0
 801a294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a29a:	2e00      	cmp	r6, #0
 801a29c:	d0f9      	beq.n	801a292 <__sflush_r+0x1a>
 801a29e:	2300      	movs	r3, #0
 801a2a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a2a4:	682f      	ldr	r7, [r5, #0]
 801a2a6:	602b      	str	r3, [r5, #0]
 801a2a8:	d032      	beq.n	801a310 <__sflush_r+0x98>
 801a2aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a2ac:	89a3      	ldrh	r3, [r4, #12]
 801a2ae:	075a      	lsls	r2, r3, #29
 801a2b0:	d505      	bpl.n	801a2be <__sflush_r+0x46>
 801a2b2:	6863      	ldr	r3, [r4, #4]
 801a2b4:	1ac0      	subs	r0, r0, r3
 801a2b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a2b8:	b10b      	cbz	r3, 801a2be <__sflush_r+0x46>
 801a2ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a2bc:	1ac0      	subs	r0, r0, r3
 801a2be:	2300      	movs	r3, #0
 801a2c0:	4602      	mov	r2, r0
 801a2c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2c4:	6a21      	ldr	r1, [r4, #32]
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	47b0      	blx	r6
 801a2ca:	1c43      	adds	r3, r0, #1
 801a2cc:	89a3      	ldrh	r3, [r4, #12]
 801a2ce:	d106      	bne.n	801a2de <__sflush_r+0x66>
 801a2d0:	6829      	ldr	r1, [r5, #0]
 801a2d2:	291d      	cmp	r1, #29
 801a2d4:	d82c      	bhi.n	801a330 <__sflush_r+0xb8>
 801a2d6:	4a2a      	ldr	r2, [pc, #168]	; (801a380 <__sflush_r+0x108>)
 801a2d8:	40ca      	lsrs	r2, r1
 801a2da:	07d6      	lsls	r6, r2, #31
 801a2dc:	d528      	bpl.n	801a330 <__sflush_r+0xb8>
 801a2de:	2200      	movs	r2, #0
 801a2e0:	6062      	str	r2, [r4, #4]
 801a2e2:	04d9      	lsls	r1, r3, #19
 801a2e4:	6922      	ldr	r2, [r4, #16]
 801a2e6:	6022      	str	r2, [r4, #0]
 801a2e8:	d504      	bpl.n	801a2f4 <__sflush_r+0x7c>
 801a2ea:	1c42      	adds	r2, r0, #1
 801a2ec:	d101      	bne.n	801a2f2 <__sflush_r+0x7a>
 801a2ee:	682b      	ldr	r3, [r5, #0]
 801a2f0:	b903      	cbnz	r3, 801a2f4 <__sflush_r+0x7c>
 801a2f2:	6560      	str	r0, [r4, #84]	; 0x54
 801a2f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a2f6:	602f      	str	r7, [r5, #0]
 801a2f8:	2900      	cmp	r1, #0
 801a2fa:	d0ca      	beq.n	801a292 <__sflush_r+0x1a>
 801a2fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a300:	4299      	cmp	r1, r3
 801a302:	d002      	beq.n	801a30a <__sflush_r+0x92>
 801a304:	4628      	mov	r0, r5
 801a306:	f000 f9d7 	bl	801a6b8 <_free_r>
 801a30a:	2000      	movs	r0, #0
 801a30c:	6360      	str	r0, [r4, #52]	; 0x34
 801a30e:	e7c1      	b.n	801a294 <__sflush_r+0x1c>
 801a310:	6a21      	ldr	r1, [r4, #32]
 801a312:	2301      	movs	r3, #1
 801a314:	4628      	mov	r0, r5
 801a316:	47b0      	blx	r6
 801a318:	1c41      	adds	r1, r0, #1
 801a31a:	d1c7      	bne.n	801a2ac <__sflush_r+0x34>
 801a31c:	682b      	ldr	r3, [r5, #0]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d0c4      	beq.n	801a2ac <__sflush_r+0x34>
 801a322:	2b1d      	cmp	r3, #29
 801a324:	d001      	beq.n	801a32a <__sflush_r+0xb2>
 801a326:	2b16      	cmp	r3, #22
 801a328:	d101      	bne.n	801a32e <__sflush_r+0xb6>
 801a32a:	602f      	str	r7, [r5, #0]
 801a32c:	e7b1      	b.n	801a292 <__sflush_r+0x1a>
 801a32e:	89a3      	ldrh	r3, [r4, #12]
 801a330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a334:	81a3      	strh	r3, [r4, #12]
 801a336:	e7ad      	b.n	801a294 <__sflush_r+0x1c>
 801a338:	690f      	ldr	r7, [r1, #16]
 801a33a:	2f00      	cmp	r7, #0
 801a33c:	d0a9      	beq.n	801a292 <__sflush_r+0x1a>
 801a33e:	0793      	lsls	r3, r2, #30
 801a340:	680e      	ldr	r6, [r1, #0]
 801a342:	bf08      	it	eq
 801a344:	694b      	ldreq	r3, [r1, #20]
 801a346:	600f      	str	r7, [r1, #0]
 801a348:	bf18      	it	ne
 801a34a:	2300      	movne	r3, #0
 801a34c:	eba6 0807 	sub.w	r8, r6, r7
 801a350:	608b      	str	r3, [r1, #8]
 801a352:	f1b8 0f00 	cmp.w	r8, #0
 801a356:	dd9c      	ble.n	801a292 <__sflush_r+0x1a>
 801a358:	6a21      	ldr	r1, [r4, #32]
 801a35a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a35c:	4643      	mov	r3, r8
 801a35e:	463a      	mov	r2, r7
 801a360:	4628      	mov	r0, r5
 801a362:	47b0      	blx	r6
 801a364:	2800      	cmp	r0, #0
 801a366:	dc06      	bgt.n	801a376 <__sflush_r+0xfe>
 801a368:	89a3      	ldrh	r3, [r4, #12]
 801a36a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a36e:	81a3      	strh	r3, [r4, #12]
 801a370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a374:	e78e      	b.n	801a294 <__sflush_r+0x1c>
 801a376:	4407      	add	r7, r0
 801a378:	eba8 0800 	sub.w	r8, r8, r0
 801a37c:	e7e9      	b.n	801a352 <__sflush_r+0xda>
 801a37e:	bf00      	nop
 801a380:	20400001 	.word	0x20400001

0801a384 <_fflush_r>:
 801a384:	b538      	push	{r3, r4, r5, lr}
 801a386:	690b      	ldr	r3, [r1, #16]
 801a388:	4605      	mov	r5, r0
 801a38a:	460c      	mov	r4, r1
 801a38c:	b913      	cbnz	r3, 801a394 <_fflush_r+0x10>
 801a38e:	2500      	movs	r5, #0
 801a390:	4628      	mov	r0, r5
 801a392:	bd38      	pop	{r3, r4, r5, pc}
 801a394:	b118      	cbz	r0, 801a39e <_fflush_r+0x1a>
 801a396:	6983      	ldr	r3, [r0, #24]
 801a398:	b90b      	cbnz	r3, 801a39e <_fflush_r+0x1a>
 801a39a:	f000 f887 	bl	801a4ac <__sinit>
 801a39e:	4b14      	ldr	r3, [pc, #80]	; (801a3f0 <_fflush_r+0x6c>)
 801a3a0:	429c      	cmp	r4, r3
 801a3a2:	d11b      	bne.n	801a3dc <_fflush_r+0x58>
 801a3a4:	686c      	ldr	r4, [r5, #4]
 801a3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d0ef      	beq.n	801a38e <_fflush_r+0xa>
 801a3ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a3b0:	07d0      	lsls	r0, r2, #31
 801a3b2:	d404      	bmi.n	801a3be <_fflush_r+0x3a>
 801a3b4:	0599      	lsls	r1, r3, #22
 801a3b6:	d402      	bmi.n	801a3be <_fflush_r+0x3a>
 801a3b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3ba:	f000 f915 	bl	801a5e8 <__retarget_lock_acquire_recursive>
 801a3be:	4628      	mov	r0, r5
 801a3c0:	4621      	mov	r1, r4
 801a3c2:	f7ff ff59 	bl	801a278 <__sflush_r>
 801a3c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3c8:	07da      	lsls	r2, r3, #31
 801a3ca:	4605      	mov	r5, r0
 801a3cc:	d4e0      	bmi.n	801a390 <_fflush_r+0xc>
 801a3ce:	89a3      	ldrh	r3, [r4, #12]
 801a3d0:	059b      	lsls	r3, r3, #22
 801a3d2:	d4dd      	bmi.n	801a390 <_fflush_r+0xc>
 801a3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3d6:	f000 f908 	bl	801a5ea <__retarget_lock_release_recursive>
 801a3da:	e7d9      	b.n	801a390 <_fflush_r+0xc>
 801a3dc:	4b05      	ldr	r3, [pc, #20]	; (801a3f4 <_fflush_r+0x70>)
 801a3de:	429c      	cmp	r4, r3
 801a3e0:	d101      	bne.n	801a3e6 <_fflush_r+0x62>
 801a3e2:	68ac      	ldr	r4, [r5, #8]
 801a3e4:	e7df      	b.n	801a3a6 <_fflush_r+0x22>
 801a3e6:	4b04      	ldr	r3, [pc, #16]	; (801a3f8 <_fflush_r+0x74>)
 801a3e8:	429c      	cmp	r4, r3
 801a3ea:	bf08      	it	eq
 801a3ec:	68ec      	ldreq	r4, [r5, #12]
 801a3ee:	e7da      	b.n	801a3a6 <_fflush_r+0x22>
 801a3f0:	0801ae78 	.word	0x0801ae78
 801a3f4:	0801ae98 	.word	0x0801ae98
 801a3f8:	0801ae58 	.word	0x0801ae58

0801a3fc <std>:
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	b510      	push	{r4, lr}
 801a400:	4604      	mov	r4, r0
 801a402:	e9c0 3300 	strd	r3, r3, [r0]
 801a406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a40a:	6083      	str	r3, [r0, #8]
 801a40c:	8181      	strh	r1, [r0, #12]
 801a40e:	6643      	str	r3, [r0, #100]	; 0x64
 801a410:	81c2      	strh	r2, [r0, #14]
 801a412:	6183      	str	r3, [r0, #24]
 801a414:	4619      	mov	r1, r3
 801a416:	2208      	movs	r2, #8
 801a418:	305c      	adds	r0, #92	; 0x5c
 801a41a:	f7ff fdef 	bl	8019ffc <memset>
 801a41e:	4b05      	ldr	r3, [pc, #20]	; (801a434 <std+0x38>)
 801a420:	6263      	str	r3, [r4, #36]	; 0x24
 801a422:	4b05      	ldr	r3, [pc, #20]	; (801a438 <std+0x3c>)
 801a424:	62a3      	str	r3, [r4, #40]	; 0x28
 801a426:	4b05      	ldr	r3, [pc, #20]	; (801a43c <std+0x40>)
 801a428:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a42a:	4b05      	ldr	r3, [pc, #20]	; (801a440 <std+0x44>)
 801a42c:	6224      	str	r4, [r4, #32]
 801a42e:	6323      	str	r3, [r4, #48]	; 0x30
 801a430:	bd10      	pop	{r4, pc}
 801a432:	bf00      	nop
 801a434:	0801a899 	.word	0x0801a899
 801a438:	0801a8bb 	.word	0x0801a8bb
 801a43c:	0801a8f3 	.word	0x0801a8f3
 801a440:	0801a917 	.word	0x0801a917

0801a444 <_cleanup_r>:
 801a444:	4901      	ldr	r1, [pc, #4]	; (801a44c <_cleanup_r+0x8>)
 801a446:	f000 b8af 	b.w	801a5a8 <_fwalk_reent>
 801a44a:	bf00      	nop
 801a44c:	0801a385 	.word	0x0801a385

0801a450 <__sfmoreglue>:
 801a450:	b570      	push	{r4, r5, r6, lr}
 801a452:	2268      	movs	r2, #104	; 0x68
 801a454:	1e4d      	subs	r5, r1, #1
 801a456:	4355      	muls	r5, r2
 801a458:	460e      	mov	r6, r1
 801a45a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a45e:	f000 f997 	bl	801a790 <_malloc_r>
 801a462:	4604      	mov	r4, r0
 801a464:	b140      	cbz	r0, 801a478 <__sfmoreglue+0x28>
 801a466:	2100      	movs	r1, #0
 801a468:	e9c0 1600 	strd	r1, r6, [r0]
 801a46c:	300c      	adds	r0, #12
 801a46e:	60a0      	str	r0, [r4, #8]
 801a470:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a474:	f7ff fdc2 	bl	8019ffc <memset>
 801a478:	4620      	mov	r0, r4
 801a47a:	bd70      	pop	{r4, r5, r6, pc}

0801a47c <__sfp_lock_acquire>:
 801a47c:	4801      	ldr	r0, [pc, #4]	; (801a484 <__sfp_lock_acquire+0x8>)
 801a47e:	f000 b8b3 	b.w	801a5e8 <__retarget_lock_acquire_recursive>
 801a482:	bf00      	nop
 801a484:	2400696d 	.word	0x2400696d

0801a488 <__sfp_lock_release>:
 801a488:	4801      	ldr	r0, [pc, #4]	; (801a490 <__sfp_lock_release+0x8>)
 801a48a:	f000 b8ae 	b.w	801a5ea <__retarget_lock_release_recursive>
 801a48e:	bf00      	nop
 801a490:	2400696d 	.word	0x2400696d

0801a494 <__sinit_lock_acquire>:
 801a494:	4801      	ldr	r0, [pc, #4]	; (801a49c <__sinit_lock_acquire+0x8>)
 801a496:	f000 b8a7 	b.w	801a5e8 <__retarget_lock_acquire_recursive>
 801a49a:	bf00      	nop
 801a49c:	2400696e 	.word	0x2400696e

0801a4a0 <__sinit_lock_release>:
 801a4a0:	4801      	ldr	r0, [pc, #4]	; (801a4a8 <__sinit_lock_release+0x8>)
 801a4a2:	f000 b8a2 	b.w	801a5ea <__retarget_lock_release_recursive>
 801a4a6:	bf00      	nop
 801a4a8:	2400696e 	.word	0x2400696e

0801a4ac <__sinit>:
 801a4ac:	b510      	push	{r4, lr}
 801a4ae:	4604      	mov	r4, r0
 801a4b0:	f7ff fff0 	bl	801a494 <__sinit_lock_acquire>
 801a4b4:	69a3      	ldr	r3, [r4, #24]
 801a4b6:	b11b      	cbz	r3, 801a4c0 <__sinit+0x14>
 801a4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4bc:	f7ff bff0 	b.w	801a4a0 <__sinit_lock_release>
 801a4c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a4c4:	6523      	str	r3, [r4, #80]	; 0x50
 801a4c6:	4b13      	ldr	r3, [pc, #76]	; (801a514 <__sinit+0x68>)
 801a4c8:	4a13      	ldr	r2, [pc, #76]	; (801a518 <__sinit+0x6c>)
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	62a2      	str	r2, [r4, #40]	; 0x28
 801a4ce:	42a3      	cmp	r3, r4
 801a4d0:	bf04      	itt	eq
 801a4d2:	2301      	moveq	r3, #1
 801a4d4:	61a3      	streq	r3, [r4, #24]
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	f000 f820 	bl	801a51c <__sfp>
 801a4dc:	6060      	str	r0, [r4, #4]
 801a4de:	4620      	mov	r0, r4
 801a4e0:	f000 f81c 	bl	801a51c <__sfp>
 801a4e4:	60a0      	str	r0, [r4, #8]
 801a4e6:	4620      	mov	r0, r4
 801a4e8:	f000 f818 	bl	801a51c <__sfp>
 801a4ec:	2200      	movs	r2, #0
 801a4ee:	60e0      	str	r0, [r4, #12]
 801a4f0:	2104      	movs	r1, #4
 801a4f2:	6860      	ldr	r0, [r4, #4]
 801a4f4:	f7ff ff82 	bl	801a3fc <std>
 801a4f8:	68a0      	ldr	r0, [r4, #8]
 801a4fa:	2201      	movs	r2, #1
 801a4fc:	2109      	movs	r1, #9
 801a4fe:	f7ff ff7d 	bl	801a3fc <std>
 801a502:	68e0      	ldr	r0, [r4, #12]
 801a504:	2202      	movs	r2, #2
 801a506:	2112      	movs	r1, #18
 801a508:	f7ff ff78 	bl	801a3fc <std>
 801a50c:	2301      	movs	r3, #1
 801a50e:	61a3      	str	r3, [r4, #24]
 801a510:	e7d2      	b.n	801a4b8 <__sinit+0xc>
 801a512:	bf00      	nop
 801a514:	0801ae54 	.word	0x0801ae54
 801a518:	0801a445 	.word	0x0801a445

0801a51c <__sfp>:
 801a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a51e:	4607      	mov	r7, r0
 801a520:	f7ff ffac 	bl	801a47c <__sfp_lock_acquire>
 801a524:	4b1e      	ldr	r3, [pc, #120]	; (801a5a0 <__sfp+0x84>)
 801a526:	681e      	ldr	r6, [r3, #0]
 801a528:	69b3      	ldr	r3, [r6, #24]
 801a52a:	b913      	cbnz	r3, 801a532 <__sfp+0x16>
 801a52c:	4630      	mov	r0, r6
 801a52e:	f7ff ffbd 	bl	801a4ac <__sinit>
 801a532:	3648      	adds	r6, #72	; 0x48
 801a534:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a538:	3b01      	subs	r3, #1
 801a53a:	d503      	bpl.n	801a544 <__sfp+0x28>
 801a53c:	6833      	ldr	r3, [r6, #0]
 801a53e:	b30b      	cbz	r3, 801a584 <__sfp+0x68>
 801a540:	6836      	ldr	r6, [r6, #0]
 801a542:	e7f7      	b.n	801a534 <__sfp+0x18>
 801a544:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a548:	b9d5      	cbnz	r5, 801a580 <__sfp+0x64>
 801a54a:	4b16      	ldr	r3, [pc, #88]	; (801a5a4 <__sfp+0x88>)
 801a54c:	60e3      	str	r3, [r4, #12]
 801a54e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a552:	6665      	str	r5, [r4, #100]	; 0x64
 801a554:	f000 f847 	bl	801a5e6 <__retarget_lock_init_recursive>
 801a558:	f7ff ff96 	bl	801a488 <__sfp_lock_release>
 801a55c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a560:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a564:	6025      	str	r5, [r4, #0]
 801a566:	61a5      	str	r5, [r4, #24]
 801a568:	2208      	movs	r2, #8
 801a56a:	4629      	mov	r1, r5
 801a56c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a570:	f7ff fd44 	bl	8019ffc <memset>
 801a574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a57c:	4620      	mov	r0, r4
 801a57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a580:	3468      	adds	r4, #104	; 0x68
 801a582:	e7d9      	b.n	801a538 <__sfp+0x1c>
 801a584:	2104      	movs	r1, #4
 801a586:	4638      	mov	r0, r7
 801a588:	f7ff ff62 	bl	801a450 <__sfmoreglue>
 801a58c:	4604      	mov	r4, r0
 801a58e:	6030      	str	r0, [r6, #0]
 801a590:	2800      	cmp	r0, #0
 801a592:	d1d5      	bne.n	801a540 <__sfp+0x24>
 801a594:	f7ff ff78 	bl	801a488 <__sfp_lock_release>
 801a598:	230c      	movs	r3, #12
 801a59a:	603b      	str	r3, [r7, #0]
 801a59c:	e7ee      	b.n	801a57c <__sfp+0x60>
 801a59e:	bf00      	nop
 801a5a0:	0801ae54 	.word	0x0801ae54
 801a5a4:	ffff0001 	.word	0xffff0001

0801a5a8 <_fwalk_reent>:
 801a5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5ac:	4606      	mov	r6, r0
 801a5ae:	4688      	mov	r8, r1
 801a5b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a5b4:	2700      	movs	r7, #0
 801a5b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a5ba:	f1b9 0901 	subs.w	r9, r9, #1
 801a5be:	d505      	bpl.n	801a5cc <_fwalk_reent+0x24>
 801a5c0:	6824      	ldr	r4, [r4, #0]
 801a5c2:	2c00      	cmp	r4, #0
 801a5c4:	d1f7      	bne.n	801a5b6 <_fwalk_reent+0xe>
 801a5c6:	4638      	mov	r0, r7
 801a5c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5cc:	89ab      	ldrh	r3, [r5, #12]
 801a5ce:	2b01      	cmp	r3, #1
 801a5d0:	d907      	bls.n	801a5e2 <_fwalk_reent+0x3a>
 801a5d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a5d6:	3301      	adds	r3, #1
 801a5d8:	d003      	beq.n	801a5e2 <_fwalk_reent+0x3a>
 801a5da:	4629      	mov	r1, r5
 801a5dc:	4630      	mov	r0, r6
 801a5de:	47c0      	blx	r8
 801a5e0:	4307      	orrs	r7, r0
 801a5e2:	3568      	adds	r5, #104	; 0x68
 801a5e4:	e7e9      	b.n	801a5ba <_fwalk_reent+0x12>

0801a5e6 <__retarget_lock_init_recursive>:
 801a5e6:	4770      	bx	lr

0801a5e8 <__retarget_lock_acquire_recursive>:
 801a5e8:	4770      	bx	lr

0801a5ea <__retarget_lock_release_recursive>:
 801a5ea:	4770      	bx	lr

0801a5ec <__swhatbuf_r>:
 801a5ec:	b570      	push	{r4, r5, r6, lr}
 801a5ee:	460e      	mov	r6, r1
 801a5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5f4:	2900      	cmp	r1, #0
 801a5f6:	b096      	sub	sp, #88	; 0x58
 801a5f8:	4614      	mov	r4, r2
 801a5fa:	461d      	mov	r5, r3
 801a5fc:	da08      	bge.n	801a610 <__swhatbuf_r+0x24>
 801a5fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a602:	2200      	movs	r2, #0
 801a604:	602a      	str	r2, [r5, #0]
 801a606:	061a      	lsls	r2, r3, #24
 801a608:	d410      	bmi.n	801a62c <__swhatbuf_r+0x40>
 801a60a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a60e:	e00e      	b.n	801a62e <__swhatbuf_r+0x42>
 801a610:	466a      	mov	r2, sp
 801a612:	f000 f9a7 	bl	801a964 <_fstat_r>
 801a616:	2800      	cmp	r0, #0
 801a618:	dbf1      	blt.n	801a5fe <__swhatbuf_r+0x12>
 801a61a:	9a01      	ldr	r2, [sp, #4]
 801a61c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a620:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a624:	425a      	negs	r2, r3
 801a626:	415a      	adcs	r2, r3
 801a628:	602a      	str	r2, [r5, #0]
 801a62a:	e7ee      	b.n	801a60a <__swhatbuf_r+0x1e>
 801a62c:	2340      	movs	r3, #64	; 0x40
 801a62e:	2000      	movs	r0, #0
 801a630:	6023      	str	r3, [r4, #0]
 801a632:	b016      	add	sp, #88	; 0x58
 801a634:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a638 <__smakebuf_r>:
 801a638:	898b      	ldrh	r3, [r1, #12]
 801a63a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a63c:	079d      	lsls	r5, r3, #30
 801a63e:	4606      	mov	r6, r0
 801a640:	460c      	mov	r4, r1
 801a642:	d507      	bpl.n	801a654 <__smakebuf_r+0x1c>
 801a644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a648:	6023      	str	r3, [r4, #0]
 801a64a:	6123      	str	r3, [r4, #16]
 801a64c:	2301      	movs	r3, #1
 801a64e:	6163      	str	r3, [r4, #20]
 801a650:	b002      	add	sp, #8
 801a652:	bd70      	pop	{r4, r5, r6, pc}
 801a654:	ab01      	add	r3, sp, #4
 801a656:	466a      	mov	r2, sp
 801a658:	f7ff ffc8 	bl	801a5ec <__swhatbuf_r>
 801a65c:	9900      	ldr	r1, [sp, #0]
 801a65e:	4605      	mov	r5, r0
 801a660:	4630      	mov	r0, r6
 801a662:	f000 f895 	bl	801a790 <_malloc_r>
 801a666:	b948      	cbnz	r0, 801a67c <__smakebuf_r+0x44>
 801a668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a66c:	059a      	lsls	r2, r3, #22
 801a66e:	d4ef      	bmi.n	801a650 <__smakebuf_r+0x18>
 801a670:	f023 0303 	bic.w	r3, r3, #3
 801a674:	f043 0302 	orr.w	r3, r3, #2
 801a678:	81a3      	strh	r3, [r4, #12]
 801a67a:	e7e3      	b.n	801a644 <__smakebuf_r+0xc>
 801a67c:	4b0d      	ldr	r3, [pc, #52]	; (801a6b4 <__smakebuf_r+0x7c>)
 801a67e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a680:	89a3      	ldrh	r3, [r4, #12]
 801a682:	6020      	str	r0, [r4, #0]
 801a684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a688:	81a3      	strh	r3, [r4, #12]
 801a68a:	9b00      	ldr	r3, [sp, #0]
 801a68c:	6163      	str	r3, [r4, #20]
 801a68e:	9b01      	ldr	r3, [sp, #4]
 801a690:	6120      	str	r0, [r4, #16]
 801a692:	b15b      	cbz	r3, 801a6ac <__smakebuf_r+0x74>
 801a694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a698:	4630      	mov	r0, r6
 801a69a:	f000 f975 	bl	801a988 <_isatty_r>
 801a69e:	b128      	cbz	r0, 801a6ac <__smakebuf_r+0x74>
 801a6a0:	89a3      	ldrh	r3, [r4, #12]
 801a6a2:	f023 0303 	bic.w	r3, r3, #3
 801a6a6:	f043 0301 	orr.w	r3, r3, #1
 801a6aa:	81a3      	strh	r3, [r4, #12]
 801a6ac:	89a0      	ldrh	r0, [r4, #12]
 801a6ae:	4305      	orrs	r5, r0
 801a6b0:	81a5      	strh	r5, [r4, #12]
 801a6b2:	e7cd      	b.n	801a650 <__smakebuf_r+0x18>
 801a6b4:	0801a445 	.word	0x0801a445

0801a6b8 <_free_r>:
 801a6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a6ba:	2900      	cmp	r1, #0
 801a6bc:	d044      	beq.n	801a748 <_free_r+0x90>
 801a6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6c2:	9001      	str	r0, [sp, #4]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	f1a1 0404 	sub.w	r4, r1, #4
 801a6ca:	bfb8      	it	lt
 801a6cc:	18e4      	addlt	r4, r4, r3
 801a6ce:	f000 f97d 	bl	801a9cc <__malloc_lock>
 801a6d2:	4a1e      	ldr	r2, [pc, #120]	; (801a74c <_free_r+0x94>)
 801a6d4:	9801      	ldr	r0, [sp, #4]
 801a6d6:	6813      	ldr	r3, [r2, #0]
 801a6d8:	b933      	cbnz	r3, 801a6e8 <_free_r+0x30>
 801a6da:	6063      	str	r3, [r4, #4]
 801a6dc:	6014      	str	r4, [r2, #0]
 801a6de:	b003      	add	sp, #12
 801a6e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a6e4:	f000 b978 	b.w	801a9d8 <__malloc_unlock>
 801a6e8:	42a3      	cmp	r3, r4
 801a6ea:	d908      	bls.n	801a6fe <_free_r+0x46>
 801a6ec:	6825      	ldr	r5, [r4, #0]
 801a6ee:	1961      	adds	r1, r4, r5
 801a6f0:	428b      	cmp	r3, r1
 801a6f2:	bf01      	itttt	eq
 801a6f4:	6819      	ldreq	r1, [r3, #0]
 801a6f6:	685b      	ldreq	r3, [r3, #4]
 801a6f8:	1949      	addeq	r1, r1, r5
 801a6fa:	6021      	streq	r1, [r4, #0]
 801a6fc:	e7ed      	b.n	801a6da <_free_r+0x22>
 801a6fe:	461a      	mov	r2, r3
 801a700:	685b      	ldr	r3, [r3, #4]
 801a702:	b10b      	cbz	r3, 801a708 <_free_r+0x50>
 801a704:	42a3      	cmp	r3, r4
 801a706:	d9fa      	bls.n	801a6fe <_free_r+0x46>
 801a708:	6811      	ldr	r1, [r2, #0]
 801a70a:	1855      	adds	r5, r2, r1
 801a70c:	42a5      	cmp	r5, r4
 801a70e:	d10b      	bne.n	801a728 <_free_r+0x70>
 801a710:	6824      	ldr	r4, [r4, #0]
 801a712:	4421      	add	r1, r4
 801a714:	1854      	adds	r4, r2, r1
 801a716:	42a3      	cmp	r3, r4
 801a718:	6011      	str	r1, [r2, #0]
 801a71a:	d1e0      	bne.n	801a6de <_free_r+0x26>
 801a71c:	681c      	ldr	r4, [r3, #0]
 801a71e:	685b      	ldr	r3, [r3, #4]
 801a720:	6053      	str	r3, [r2, #4]
 801a722:	4421      	add	r1, r4
 801a724:	6011      	str	r1, [r2, #0]
 801a726:	e7da      	b.n	801a6de <_free_r+0x26>
 801a728:	d902      	bls.n	801a730 <_free_r+0x78>
 801a72a:	230c      	movs	r3, #12
 801a72c:	6003      	str	r3, [r0, #0]
 801a72e:	e7d6      	b.n	801a6de <_free_r+0x26>
 801a730:	6825      	ldr	r5, [r4, #0]
 801a732:	1961      	adds	r1, r4, r5
 801a734:	428b      	cmp	r3, r1
 801a736:	bf04      	itt	eq
 801a738:	6819      	ldreq	r1, [r3, #0]
 801a73a:	685b      	ldreq	r3, [r3, #4]
 801a73c:	6063      	str	r3, [r4, #4]
 801a73e:	bf04      	itt	eq
 801a740:	1949      	addeq	r1, r1, r5
 801a742:	6021      	streq	r1, [r4, #0]
 801a744:	6054      	str	r4, [r2, #4]
 801a746:	e7ca      	b.n	801a6de <_free_r+0x26>
 801a748:	b003      	add	sp, #12
 801a74a:	bd30      	pop	{r4, r5, pc}
 801a74c:	24006970 	.word	0x24006970

0801a750 <sbrk_aligned>:
 801a750:	b570      	push	{r4, r5, r6, lr}
 801a752:	4e0e      	ldr	r6, [pc, #56]	; (801a78c <sbrk_aligned+0x3c>)
 801a754:	460c      	mov	r4, r1
 801a756:	6831      	ldr	r1, [r6, #0]
 801a758:	4605      	mov	r5, r0
 801a75a:	b911      	cbnz	r1, 801a762 <sbrk_aligned+0x12>
 801a75c:	f000 f88c 	bl	801a878 <_sbrk_r>
 801a760:	6030      	str	r0, [r6, #0]
 801a762:	4621      	mov	r1, r4
 801a764:	4628      	mov	r0, r5
 801a766:	f000 f887 	bl	801a878 <_sbrk_r>
 801a76a:	1c43      	adds	r3, r0, #1
 801a76c:	d00a      	beq.n	801a784 <sbrk_aligned+0x34>
 801a76e:	1cc4      	adds	r4, r0, #3
 801a770:	f024 0403 	bic.w	r4, r4, #3
 801a774:	42a0      	cmp	r0, r4
 801a776:	d007      	beq.n	801a788 <sbrk_aligned+0x38>
 801a778:	1a21      	subs	r1, r4, r0
 801a77a:	4628      	mov	r0, r5
 801a77c:	f000 f87c 	bl	801a878 <_sbrk_r>
 801a780:	3001      	adds	r0, #1
 801a782:	d101      	bne.n	801a788 <sbrk_aligned+0x38>
 801a784:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a788:	4620      	mov	r0, r4
 801a78a:	bd70      	pop	{r4, r5, r6, pc}
 801a78c:	24006974 	.word	0x24006974

0801a790 <_malloc_r>:
 801a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a794:	1ccd      	adds	r5, r1, #3
 801a796:	f025 0503 	bic.w	r5, r5, #3
 801a79a:	3508      	adds	r5, #8
 801a79c:	2d0c      	cmp	r5, #12
 801a79e:	bf38      	it	cc
 801a7a0:	250c      	movcc	r5, #12
 801a7a2:	2d00      	cmp	r5, #0
 801a7a4:	4607      	mov	r7, r0
 801a7a6:	db01      	blt.n	801a7ac <_malloc_r+0x1c>
 801a7a8:	42a9      	cmp	r1, r5
 801a7aa:	d905      	bls.n	801a7b8 <_malloc_r+0x28>
 801a7ac:	230c      	movs	r3, #12
 801a7ae:	603b      	str	r3, [r7, #0]
 801a7b0:	2600      	movs	r6, #0
 801a7b2:	4630      	mov	r0, r6
 801a7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7b8:	4e2e      	ldr	r6, [pc, #184]	; (801a874 <_malloc_r+0xe4>)
 801a7ba:	f000 f907 	bl	801a9cc <__malloc_lock>
 801a7be:	6833      	ldr	r3, [r6, #0]
 801a7c0:	461c      	mov	r4, r3
 801a7c2:	bb34      	cbnz	r4, 801a812 <_malloc_r+0x82>
 801a7c4:	4629      	mov	r1, r5
 801a7c6:	4638      	mov	r0, r7
 801a7c8:	f7ff ffc2 	bl	801a750 <sbrk_aligned>
 801a7cc:	1c43      	adds	r3, r0, #1
 801a7ce:	4604      	mov	r4, r0
 801a7d0:	d14d      	bne.n	801a86e <_malloc_r+0xde>
 801a7d2:	6834      	ldr	r4, [r6, #0]
 801a7d4:	4626      	mov	r6, r4
 801a7d6:	2e00      	cmp	r6, #0
 801a7d8:	d140      	bne.n	801a85c <_malloc_r+0xcc>
 801a7da:	6823      	ldr	r3, [r4, #0]
 801a7dc:	4631      	mov	r1, r6
 801a7de:	4638      	mov	r0, r7
 801a7e0:	eb04 0803 	add.w	r8, r4, r3
 801a7e4:	f000 f848 	bl	801a878 <_sbrk_r>
 801a7e8:	4580      	cmp	r8, r0
 801a7ea:	d13a      	bne.n	801a862 <_malloc_r+0xd2>
 801a7ec:	6821      	ldr	r1, [r4, #0]
 801a7ee:	3503      	adds	r5, #3
 801a7f0:	1a6d      	subs	r5, r5, r1
 801a7f2:	f025 0503 	bic.w	r5, r5, #3
 801a7f6:	3508      	adds	r5, #8
 801a7f8:	2d0c      	cmp	r5, #12
 801a7fa:	bf38      	it	cc
 801a7fc:	250c      	movcc	r5, #12
 801a7fe:	4629      	mov	r1, r5
 801a800:	4638      	mov	r0, r7
 801a802:	f7ff ffa5 	bl	801a750 <sbrk_aligned>
 801a806:	3001      	adds	r0, #1
 801a808:	d02b      	beq.n	801a862 <_malloc_r+0xd2>
 801a80a:	6823      	ldr	r3, [r4, #0]
 801a80c:	442b      	add	r3, r5
 801a80e:	6023      	str	r3, [r4, #0]
 801a810:	e00e      	b.n	801a830 <_malloc_r+0xa0>
 801a812:	6822      	ldr	r2, [r4, #0]
 801a814:	1b52      	subs	r2, r2, r5
 801a816:	d41e      	bmi.n	801a856 <_malloc_r+0xc6>
 801a818:	2a0b      	cmp	r2, #11
 801a81a:	d916      	bls.n	801a84a <_malloc_r+0xba>
 801a81c:	1961      	adds	r1, r4, r5
 801a81e:	42a3      	cmp	r3, r4
 801a820:	6025      	str	r5, [r4, #0]
 801a822:	bf18      	it	ne
 801a824:	6059      	strne	r1, [r3, #4]
 801a826:	6863      	ldr	r3, [r4, #4]
 801a828:	bf08      	it	eq
 801a82a:	6031      	streq	r1, [r6, #0]
 801a82c:	5162      	str	r2, [r4, r5]
 801a82e:	604b      	str	r3, [r1, #4]
 801a830:	4638      	mov	r0, r7
 801a832:	f104 060b 	add.w	r6, r4, #11
 801a836:	f000 f8cf 	bl	801a9d8 <__malloc_unlock>
 801a83a:	f026 0607 	bic.w	r6, r6, #7
 801a83e:	1d23      	adds	r3, r4, #4
 801a840:	1af2      	subs	r2, r6, r3
 801a842:	d0b6      	beq.n	801a7b2 <_malloc_r+0x22>
 801a844:	1b9b      	subs	r3, r3, r6
 801a846:	50a3      	str	r3, [r4, r2]
 801a848:	e7b3      	b.n	801a7b2 <_malloc_r+0x22>
 801a84a:	6862      	ldr	r2, [r4, #4]
 801a84c:	42a3      	cmp	r3, r4
 801a84e:	bf0c      	ite	eq
 801a850:	6032      	streq	r2, [r6, #0]
 801a852:	605a      	strne	r2, [r3, #4]
 801a854:	e7ec      	b.n	801a830 <_malloc_r+0xa0>
 801a856:	4623      	mov	r3, r4
 801a858:	6864      	ldr	r4, [r4, #4]
 801a85a:	e7b2      	b.n	801a7c2 <_malloc_r+0x32>
 801a85c:	4634      	mov	r4, r6
 801a85e:	6876      	ldr	r6, [r6, #4]
 801a860:	e7b9      	b.n	801a7d6 <_malloc_r+0x46>
 801a862:	230c      	movs	r3, #12
 801a864:	603b      	str	r3, [r7, #0]
 801a866:	4638      	mov	r0, r7
 801a868:	f000 f8b6 	bl	801a9d8 <__malloc_unlock>
 801a86c:	e7a1      	b.n	801a7b2 <_malloc_r+0x22>
 801a86e:	6025      	str	r5, [r4, #0]
 801a870:	e7de      	b.n	801a830 <_malloc_r+0xa0>
 801a872:	bf00      	nop
 801a874:	24006970 	.word	0x24006970

0801a878 <_sbrk_r>:
 801a878:	b538      	push	{r3, r4, r5, lr}
 801a87a:	4d06      	ldr	r5, [pc, #24]	; (801a894 <_sbrk_r+0x1c>)
 801a87c:	2300      	movs	r3, #0
 801a87e:	4604      	mov	r4, r0
 801a880:	4608      	mov	r0, r1
 801a882:	602b      	str	r3, [r5, #0]
 801a884:	f7ea f872 	bl	800496c <_sbrk>
 801a888:	1c43      	adds	r3, r0, #1
 801a88a:	d102      	bne.n	801a892 <_sbrk_r+0x1a>
 801a88c:	682b      	ldr	r3, [r5, #0]
 801a88e:	b103      	cbz	r3, 801a892 <_sbrk_r+0x1a>
 801a890:	6023      	str	r3, [r4, #0]
 801a892:	bd38      	pop	{r3, r4, r5, pc}
 801a894:	24006978 	.word	0x24006978

0801a898 <__sread>:
 801a898:	b510      	push	{r4, lr}
 801a89a:	460c      	mov	r4, r1
 801a89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8a0:	f000 f8a0 	bl	801a9e4 <_read_r>
 801a8a4:	2800      	cmp	r0, #0
 801a8a6:	bfab      	itete	ge
 801a8a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a8aa:	89a3      	ldrhlt	r3, [r4, #12]
 801a8ac:	181b      	addge	r3, r3, r0
 801a8ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a8b2:	bfac      	ite	ge
 801a8b4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a8b6:	81a3      	strhlt	r3, [r4, #12]
 801a8b8:	bd10      	pop	{r4, pc}

0801a8ba <__swrite>:
 801a8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8be:	461f      	mov	r7, r3
 801a8c0:	898b      	ldrh	r3, [r1, #12]
 801a8c2:	05db      	lsls	r3, r3, #23
 801a8c4:	4605      	mov	r5, r0
 801a8c6:	460c      	mov	r4, r1
 801a8c8:	4616      	mov	r6, r2
 801a8ca:	d505      	bpl.n	801a8d8 <__swrite+0x1e>
 801a8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8d0:	2302      	movs	r3, #2
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	f000 f868 	bl	801a9a8 <_lseek_r>
 801a8d8:	89a3      	ldrh	r3, [r4, #12]
 801a8da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a8de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a8e2:	81a3      	strh	r3, [r4, #12]
 801a8e4:	4632      	mov	r2, r6
 801a8e6:	463b      	mov	r3, r7
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a8ee:	f000 b817 	b.w	801a920 <_write_r>

0801a8f2 <__sseek>:
 801a8f2:	b510      	push	{r4, lr}
 801a8f4:	460c      	mov	r4, r1
 801a8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8fa:	f000 f855 	bl	801a9a8 <_lseek_r>
 801a8fe:	1c43      	adds	r3, r0, #1
 801a900:	89a3      	ldrh	r3, [r4, #12]
 801a902:	bf15      	itete	ne
 801a904:	6560      	strne	r0, [r4, #84]	; 0x54
 801a906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a90a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a90e:	81a3      	strheq	r3, [r4, #12]
 801a910:	bf18      	it	ne
 801a912:	81a3      	strhne	r3, [r4, #12]
 801a914:	bd10      	pop	{r4, pc}

0801a916 <__sclose>:
 801a916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a91a:	f000 b813 	b.w	801a944 <_close_r>
	...

0801a920 <_write_r>:
 801a920:	b538      	push	{r3, r4, r5, lr}
 801a922:	4d07      	ldr	r5, [pc, #28]	; (801a940 <_write_r+0x20>)
 801a924:	4604      	mov	r4, r0
 801a926:	4608      	mov	r0, r1
 801a928:	4611      	mov	r1, r2
 801a92a:	2200      	movs	r2, #0
 801a92c:	602a      	str	r2, [r5, #0]
 801a92e:	461a      	mov	r2, r3
 801a930:	f7e9 ffcb 	bl	80048ca <_write>
 801a934:	1c43      	adds	r3, r0, #1
 801a936:	d102      	bne.n	801a93e <_write_r+0x1e>
 801a938:	682b      	ldr	r3, [r5, #0]
 801a93a:	b103      	cbz	r3, 801a93e <_write_r+0x1e>
 801a93c:	6023      	str	r3, [r4, #0]
 801a93e:	bd38      	pop	{r3, r4, r5, pc}
 801a940:	24006978 	.word	0x24006978

0801a944 <_close_r>:
 801a944:	b538      	push	{r3, r4, r5, lr}
 801a946:	4d06      	ldr	r5, [pc, #24]	; (801a960 <_close_r+0x1c>)
 801a948:	2300      	movs	r3, #0
 801a94a:	4604      	mov	r4, r0
 801a94c:	4608      	mov	r0, r1
 801a94e:	602b      	str	r3, [r5, #0]
 801a950:	f7e9 ffd7 	bl	8004902 <_close>
 801a954:	1c43      	adds	r3, r0, #1
 801a956:	d102      	bne.n	801a95e <_close_r+0x1a>
 801a958:	682b      	ldr	r3, [r5, #0]
 801a95a:	b103      	cbz	r3, 801a95e <_close_r+0x1a>
 801a95c:	6023      	str	r3, [r4, #0]
 801a95e:	bd38      	pop	{r3, r4, r5, pc}
 801a960:	24006978 	.word	0x24006978

0801a964 <_fstat_r>:
 801a964:	b538      	push	{r3, r4, r5, lr}
 801a966:	4d07      	ldr	r5, [pc, #28]	; (801a984 <_fstat_r+0x20>)
 801a968:	2300      	movs	r3, #0
 801a96a:	4604      	mov	r4, r0
 801a96c:	4608      	mov	r0, r1
 801a96e:	4611      	mov	r1, r2
 801a970:	602b      	str	r3, [r5, #0]
 801a972:	f7e9 ffd2 	bl	800491a <_fstat>
 801a976:	1c43      	adds	r3, r0, #1
 801a978:	d102      	bne.n	801a980 <_fstat_r+0x1c>
 801a97a:	682b      	ldr	r3, [r5, #0]
 801a97c:	b103      	cbz	r3, 801a980 <_fstat_r+0x1c>
 801a97e:	6023      	str	r3, [r4, #0]
 801a980:	bd38      	pop	{r3, r4, r5, pc}
 801a982:	bf00      	nop
 801a984:	24006978 	.word	0x24006978

0801a988 <_isatty_r>:
 801a988:	b538      	push	{r3, r4, r5, lr}
 801a98a:	4d06      	ldr	r5, [pc, #24]	; (801a9a4 <_isatty_r+0x1c>)
 801a98c:	2300      	movs	r3, #0
 801a98e:	4604      	mov	r4, r0
 801a990:	4608      	mov	r0, r1
 801a992:	602b      	str	r3, [r5, #0]
 801a994:	f7e9 ffd1 	bl	800493a <_isatty>
 801a998:	1c43      	adds	r3, r0, #1
 801a99a:	d102      	bne.n	801a9a2 <_isatty_r+0x1a>
 801a99c:	682b      	ldr	r3, [r5, #0]
 801a99e:	b103      	cbz	r3, 801a9a2 <_isatty_r+0x1a>
 801a9a0:	6023      	str	r3, [r4, #0]
 801a9a2:	bd38      	pop	{r3, r4, r5, pc}
 801a9a4:	24006978 	.word	0x24006978

0801a9a8 <_lseek_r>:
 801a9a8:	b538      	push	{r3, r4, r5, lr}
 801a9aa:	4d07      	ldr	r5, [pc, #28]	; (801a9c8 <_lseek_r+0x20>)
 801a9ac:	4604      	mov	r4, r0
 801a9ae:	4608      	mov	r0, r1
 801a9b0:	4611      	mov	r1, r2
 801a9b2:	2200      	movs	r2, #0
 801a9b4:	602a      	str	r2, [r5, #0]
 801a9b6:	461a      	mov	r2, r3
 801a9b8:	f7e9 ffca 	bl	8004950 <_lseek>
 801a9bc:	1c43      	adds	r3, r0, #1
 801a9be:	d102      	bne.n	801a9c6 <_lseek_r+0x1e>
 801a9c0:	682b      	ldr	r3, [r5, #0]
 801a9c2:	b103      	cbz	r3, 801a9c6 <_lseek_r+0x1e>
 801a9c4:	6023      	str	r3, [r4, #0]
 801a9c6:	bd38      	pop	{r3, r4, r5, pc}
 801a9c8:	24006978 	.word	0x24006978

0801a9cc <__malloc_lock>:
 801a9cc:	4801      	ldr	r0, [pc, #4]	; (801a9d4 <__malloc_lock+0x8>)
 801a9ce:	f7ff be0b 	b.w	801a5e8 <__retarget_lock_acquire_recursive>
 801a9d2:	bf00      	nop
 801a9d4:	2400696c 	.word	0x2400696c

0801a9d8 <__malloc_unlock>:
 801a9d8:	4801      	ldr	r0, [pc, #4]	; (801a9e0 <__malloc_unlock+0x8>)
 801a9da:	f7ff be06 	b.w	801a5ea <__retarget_lock_release_recursive>
 801a9de:	bf00      	nop
 801a9e0:	2400696c 	.word	0x2400696c

0801a9e4 <_read_r>:
 801a9e4:	b538      	push	{r3, r4, r5, lr}
 801a9e6:	4d07      	ldr	r5, [pc, #28]	; (801aa04 <_read_r+0x20>)
 801a9e8:	4604      	mov	r4, r0
 801a9ea:	4608      	mov	r0, r1
 801a9ec:	4611      	mov	r1, r2
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	602a      	str	r2, [r5, #0]
 801a9f2:	461a      	mov	r2, r3
 801a9f4:	f7e9 ff4c 	bl	8004890 <_read>
 801a9f8:	1c43      	adds	r3, r0, #1
 801a9fa:	d102      	bne.n	801aa02 <_read_r+0x1e>
 801a9fc:	682b      	ldr	r3, [r5, #0]
 801a9fe:	b103      	cbz	r3, 801aa02 <_read_r+0x1e>
 801aa00:	6023      	str	r3, [r4, #0]
 801aa02:	bd38      	pop	{r3, r4, r5, pc}
 801aa04:	24006978 	.word	0x24006978

0801aa08 <_init>:
 801aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa0a:	bf00      	nop
 801aa0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa0e:	bc08      	pop	{r3}
 801aa10:	469e      	mov	lr, r3
 801aa12:	4770      	bx	lr

0801aa14 <_fini>:
 801aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa16:	bf00      	nop
 801aa18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa1a:	bc08      	pop	{r3}
 801aa1c:	469e      	mov	lr, r3
 801aa1e:	4770      	bx	lr
